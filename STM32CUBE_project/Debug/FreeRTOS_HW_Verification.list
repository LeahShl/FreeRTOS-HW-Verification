
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000209bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ec4  08020b8c  08020b8c  00021b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a50  08024a50  000261cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08024a50  08024a50  00025a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a58  08024a58  000261cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a58  08024a58  00025a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024a5c  08024a5c  00025a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08024a60  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08024aec  0002608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08024b8c  0002612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002d6f4  200001cc  08024c2c  000261cc  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  2002d8c0  08024c2c  000268c0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000261cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045ad3  00000000  00000000  000261fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ad7a  00000000  00000000  0006bccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003058  00000000  00000000  00076a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025ea  00000000  00000000  00079aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ee57  00000000  00000000  0007c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ee98  00000000  00000000  000baee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123874  00000000  00000000  00109d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022d5f5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ccd0  00000000  00000000  0022d638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0023a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020b74 	.word	0x08020b74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08020b74 	.word	0x08020b74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fed5 	bl	80023ec <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fde4 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f875 	bl	800274c <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fdd4 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001e8 	.word	0x200001e8
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fce1 	bl	80050ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fdcf 	bl	80032d0 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fd6c 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000230 	.word	0x20000230
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fb95 	bl	8002ebc <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd3c 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000290 	.word	0x20000290
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fb20 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fb39 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fb18 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fb31 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fb10 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fb29 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fb08 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fb21 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 fb00 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fb19 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 faf8 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fb11 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 faf0 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fb09 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 fae8 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 fb01 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 fae0 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 faf9 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fad8 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 faf1 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fad0 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 fae9 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fac8 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 fae1 	bl	8002ea0 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01f f977 	bl	801fbec <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08020c68 	.word	0x08020c68

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000920:	4a47      	ldr	r2, [pc, #284]	@ (8000a40 <MX_FREERTOS_Init+0x124>)
 8000922:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000926:	2010      	movs	r0, #16
 8000928:	f00c fd0a 	bl	800d340 <osMessageQueueNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a45      	ldr	r2, [pc, #276]	@ (8000a44 <MX_FREERTOS_Init+0x128>)
 8000930:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000932:	4a45      	ldr	r2, [pc, #276]	@ (8000a48 <MX_FREERTOS_Init+0x12c>)
 8000934:	2110      	movs	r1, #16
 8000936:	2010      	movs	r0, #16
 8000938:	f00c fd02 	bl	800d340 <osMessageQueueNew>
 800093c:	4603      	mov	r3, r0
 800093e:	4a43      	ldr	r2, [pc, #268]	@ (8000a4c <MX_FREERTOS_Init+0x130>)
 8000940:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000942:	4a43      	ldr	r2, [pc, #268]	@ (8000a50 <MX_FREERTOS_Init+0x134>)
 8000944:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000948:	2008      	movs	r0, #8
 800094a:	f00c fcf9 	bl	800d340 <osMessageQueueNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a40      	ldr	r2, [pc, #256]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 8000952:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 8000954:	4a40      	ldr	r2, [pc, #256]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 8000956:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800095a:	2008      	movs	r0, #8
 800095c:	f00c fcf0 	bl	800d340 <osMessageQueueNew>
 8000960:	4603      	mov	r3, r0
 8000962:	4a3e      	ldr	r2, [pc, #248]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 8000964:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 8000966:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 8000968:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800096c:	2008      	movs	r0, #8
 800096e:	f00c fce7 	bl	800d340 <osMessageQueueNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a3b      	ldr	r2, [pc, #236]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 8000976:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 8000978:	4a3b      	ldr	r2, [pc, #236]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800097a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800097e:	2008      	movs	r0, #8
 8000980:	f00c fcde 	bl	800d340 <osMessageQueueNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a39      	ldr	r2, [pc, #228]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 800098a:	4a39      	ldr	r2, [pc, #228]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 800098c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000990:	2008      	movs	r0, #8
 8000992:	f00c fcd5 	bl	800d340 <osMessageQueueNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a36      	ldr	r2, [pc, #216]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 800099a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800099c:	4a36      	ldr	r2, [pc, #216]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 800099e:	2100      	movs	r1, #0
 80009a0:	4836      	ldr	r0, [pc, #216]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 80009a2:	f00c f919 	bl	800cbd8 <osThreadNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a35      	ldr	r2, [pc, #212]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009ac:	4a35      	ldr	r2, [pc, #212]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4835      	ldr	r0, [pc, #212]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 80009b2:	f00c f911 	bl	800cbd8 <osThreadNew>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a34      	ldr	r2, [pc, #208]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009ba:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009bc:	4a34      	ldr	r2, [pc, #208]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009be:	2100      	movs	r1, #0
 80009c0:	4834      	ldr	r0, [pc, #208]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009c2:	f00c f909 	bl	800cbd8 <osThreadNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a33      	ldr	r2, [pc, #204]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009ca:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009cc:	4a33      	ldr	r2, [pc, #204]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4833      	ldr	r0, [pc, #204]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009d2:	f00c f901 	bl	800cbd8 <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009da:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009dc:	4a32      	ldr	r2, [pc, #200]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009de:	2100      	movs	r1, #0
 80009e0:	4832      	ldr	r0, [pc, #200]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009e2:	f00c f8f9 	bl	800cbd8 <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a31      	ldr	r2, [pc, #196]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009ec:	4a31      	ldr	r2, [pc, #196]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4831      	ldr	r0, [pc, #196]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009f2:	f00c f8f1 	bl	800cbd8 <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a30      	ldr	r2, [pc, #192]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009fa:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 80009fc:	4a30      	ldr	r2, [pc, #192]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4830      	ldr	r0, [pc, #192]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 8000a02:	f00c f8e9 	bl	800cbd8 <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	482f      	ldr	r0, [pc, #188]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 8000a12:	f00c f8e1 	bl	800cbd8 <osThreadNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 8000a1a:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	482e      	ldr	r0, [pc, #184]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 8000a22:	f00c f8d9 	bl	800cbd8 <osThreadNew>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a2d      	ldr	r2, [pc, #180]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	482d      	ldr	r0, [pc, #180]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a32:	f00c f8d1 	bl	800cbd8 <osThreadNew>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a2c      	ldr	r2, [pc, #176]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	08024740 	.word	0x08024740
 8000a44:	200002dc 	.word	0x200002dc
 8000a48:	08024758 	.word	0x08024758
 8000a4c:	200002e0 	.word	0x200002e0
 8000a50:	08024770 	.word	0x08024770
 8000a54:	200002e4 	.word	0x200002e4
 8000a58:	08024788 	.word	0x08024788
 8000a5c:	200002e8 	.word	0x200002e8
 8000a60:	080247a0 	.word	0x080247a0
 8000a64:	200002ec 	.word	0x200002ec
 8000a68:	080247b8 	.word	0x080247b8
 8000a6c:	200002f0 	.word	0x200002f0
 8000a70:	080247d0 	.word	0x080247d0
 8000a74:	200002f4 	.word	0x200002f4
 8000a78:	080245d8 	.word	0x080245d8
 8000a7c:	08000af1 	.word	0x08000af1
 8000a80:	200002b4 	.word	0x200002b4
 8000a84:	080245fc 	.word	0x080245fc
 8000a88:	08000b05 	.word	0x08000b05
 8000a8c:	200002b8 	.word	0x200002b8
 8000a90:	08024620 	.word	0x08024620
 8000a94:	08000b19 	.word	0x08000b19
 8000a98:	200002bc 	.word	0x200002bc
 8000a9c:	08024644 	.word	0x08024644
 8000aa0:	08000b2d 	.word	0x08000b2d
 8000aa4:	200002c0 	.word	0x200002c0
 8000aa8:	08024668 	.word	0x08024668
 8000aac:	08000b41 	.word	0x08000b41
 8000ab0:	200002c4 	.word	0x200002c4
 8000ab4:	0802468c 	.word	0x0802468c
 8000ab8:	08000b55 	.word	0x08000b55
 8000abc:	200002c8 	.word	0x200002c8
 8000ac0:	080246b0 	.word	0x080246b0
 8000ac4:	08000b69 	.word	0x08000b69
 8000ac8:	200002cc 	.word	0x200002cc
 8000acc:	080246d4 	.word	0x080246d4
 8000ad0:	08000b7d 	.word	0x08000b7d
 8000ad4:	200002d0 	.word	0x200002d0
 8000ad8:	080246f8 	.word	0x080246f8
 8000adc:	08000b91 	.word	0x08000b91
 8000ae0:	200002d4 	.word	0x200002d4
 8000ae4:	0802471c 	.word	0x0802471c
 8000ae8:	08000ba5 	.word	0x08000ba5
 8000aec:	200002d8 	.word	0x200002d8

08000af0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000af8:	f00b f97c 	bl	800bdf4 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f00c f919 	bl	800cd34 <osDelay>
 8000b02:	e7fb      	b.n	8000afc <StartDefaultTask+0xc>

08000b04 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  UDP_Listen(); // loops here
 8000b0c:	f01e f83a 	bl	801eb84 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b20:	f01d ff3a 	bl	801e998 <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b34:	f01e fdf6 	bl	801f724 <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000b48:	f01e f936 	bl	801edb8 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000b5c:	f01e fb04 	bl	801f168 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000b70:	f01d fe2e 	bl	801e7d0 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000b84:	f01e fcb4 	bl	801f4f0 <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000b98:	f01e f8ba 	bl	801ed10 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	printf("--------------------------------------\n");

	stats_display();
	osDelay(30000);
	*/
	  osDelay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f00c f8c1 	bl	800cd34 <osDelay>
 8000bb2:	e7fb      	b.n	8000bac <StartLoggerTask+0x8>

08000bb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a26      	ldr	r2, [pc, #152]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a20      	ldr	r2, [pc, #128]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a1a      	ldr	r2, [pc, #104]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <MX_I2C1_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <MX_I2C1_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c98:	f004 fbb4 	bl	8005404 <HAL_I2C_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f000 fab7 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000caa:	f006 fd57 	bl	800775c <HAL_I2CEx_ConfigAnalogFilter>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 faae 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000cbc:	f006 fd99 	bl	80077f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 faa5 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200002f8 	.word	0x200002f8
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	20404768 	.word	0x20404768

08000cdc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <MX_I2C2_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_I2C2_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000cee:	2214      	movs	r2, #20
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d16:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d18:	f004 fb74 	bl	8005404 <HAL_I2C_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 fa77 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d2a:	f006 fd17 	bl	800775c <HAL_I2CEx_ConfigAnalogFilter>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 fa6e 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d3c:	f006 fd59 	bl	80077f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 fa65 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000034c 	.word	0x2000034c
 8000d54:	40005800 	.word	0x40005800
 8000d58:	20404768 	.word	0x20404768

08000d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	2284      	movs	r2, #132	@ 0x84
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f01f f88d 	bl	801fe9c <memset>
  if(i2cHandle->Instance==I2C1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a57      	ldr	r2, [pc, #348]	@ (8000ee4 <HAL_I2C_MspInit+0x188>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	f040 80b9 	bne.w	8000f00 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f007 fa81 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000da8:	f000 fa34 	bl	8001214 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dde:	2304      	movs	r3, #4
 8000de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4840      	ldr	r0, [pc, #256]	@ (8000eec <HAL_I2C_MspInit+0x190>)
 8000dec:	f004 f95e 	bl	80050ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	4a3c      	ldr	r2, [pc, #240]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000df6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e08:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e0a:	4a3a      	ldr	r2, [pc, #232]	@ (8000ef4 <HAL_I2C_MspInit+0x198>)
 8000e0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e14:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1c:	4b34      	ldr	r3, [pc, #208]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e22:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e48:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e4a:	f002 fa41 	bl	80032d0 <HAL_DMA_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000e54:	f000 f9de 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a25      	ldr	r2, [pc, #148]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e66:	4a25      	ldr	r2, [pc, #148]	@ (8000efc <HAL_I2C_MspInit+0x1a0>)
 8000e68:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e70:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e74:	2240      	movs	r2, #64	@ 0x40
 8000e76:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e84:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000ea4:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000ea6:	f002 fa13 	bl	80032d0 <HAL_DMA_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000eb0:	f000 f9b0 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2105      	movs	r1, #5
 8000ec4:	201f      	movs	r0, #31
 8000ec6:	f001 ffcf 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000eca:	201f      	movs	r0, #31
 8000ecc:	f001 ffe8 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2105      	movs	r1, #5
 8000ed4:	2020      	movs	r0, #32
 8000ed6:	f001 ffc7 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000eda:	2020      	movs	r0, #32
 8000edc:	f001 ffe0 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ee0:	e0be      	b.n	8001060 <HAL_I2C_MspInit+0x304>
 8000ee2:	bf00      	nop
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	200003a0 	.word	0x200003a0
 8000ef4:	40026088 	.word	0x40026088
 8000ef8:	20000400 	.word	0x20000400
 8000efc:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a58      	ldr	r2, [pc, #352]	@ (8001068 <HAL_I2C_MspInit+0x30c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	f040 80aa 	bne.w	8001060 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f10:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 f9c1 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000f28:	f000 f974 	bl	8001214 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a4e      	ldr	r2, [pc, #312]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b4c      	ldr	r3, [pc, #304]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4841      	ldr	r0, [pc, #260]	@ (8001070 <HAL_I2C_MspInit+0x314>)
 8000f6c:	f004 f89e 	bl	80050ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f70:	4b3e      	ldr	r3, [pc, #248]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a3d      	ldr	r2, [pc, #244]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000f88:	4b3a      	ldr	r3, [pc, #232]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <HAL_I2C_MspInit+0x31c>)
 8000f8c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000f8e:	4b39      	ldr	r3, [pc, #228]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000f90:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000f94:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f96:	4b37      	ldr	r3, [pc, #220]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000faa:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb0:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000fc8:	482a      	ldr	r0, [pc, #168]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fca:	f002 f981 	bl	80032d0 <HAL_DMA_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000fd4:	f000 f91e 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a26      	ldr	r2, [pc, #152]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fde:	4a25      	ldr	r2, [pc, #148]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8000fe6:	4a26      	ldr	r2, [pc, #152]	@ (8001080 <HAL_I2C_MspInit+0x324>)
 8000fe8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8000fec:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000ff0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8000ff4:	2240      	movs	r2, #64	@ 0x40
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001000:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001004:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_I2C_MspInit+0x320>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <HAL_I2C_MspInit+0x320>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001024:	4815      	ldr	r0, [pc, #84]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001026:	f002 f953 	bl	80032d0 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001030:	f000 f8f0 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a11      	ldr	r2, [pc, #68]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
 800103a:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_I2C_MspInit+0x320>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2105      	movs	r1, #5
 8001044:	2021      	movs	r0, #33	@ 0x21
 8001046:	f001 ff0f 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800104a:	2021      	movs	r0, #33	@ 0x21
 800104c:	f001 ff28 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2105      	movs	r1, #5
 8001054:	2022      	movs	r0, #34	@ 0x22
 8001056:	f001 ff07 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800105a:	2022      	movs	r0, #34	@ 0x22
 800105c:	f001 ff20 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	37b0      	adds	r7, #176	@ 0xb0
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40005800 	.word	0x40005800
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400
 8001074:	20000460 	.word	0x20000460
 8001078:	40026058 	.word	0x40026058
 800107c:	200004c0 	.word	0x200004c0
 8001080:	400260b8 	.word	0x400260b8

08001084 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <_write+0x3c>)
 8001092:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	b29a      	uxth	r2, r3
 8001098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <_write+0x40>)
 80010a0:	f009 fb54 	bl	800a74c <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 80010a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a8:	2201      	movs	r2, #1
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <_write+0x40>)
 80010ae:	f009 fb4d 	bl	800a74c <HAL_UART_Transmit>
	return len + 1;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	08020c88 	.word	0x08020c88
 80010c4:	200009c0 	.word	0x200009c0

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f001 f93d 	bl	800234a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f822 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f7ff fd6e 	bl	8000bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d8:	f7ff fb86 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80010dc:	f000 fe4c 	bl	8001d78 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80010e0:	f7ff fb40 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 80010e4:	f000 fde8 	bl	8001cb8 <MX_UART4_Init>
  MX_UART5_Init();
 80010e8:	f000 fe16 	bl	8001d18 <MX_UART5_Init>
  MX_I2C1_Init();
 80010ec:	f7ff fdb6 	bl	8000c5c <MX_I2C1_Init>
  MX_I2C2_Init();
 80010f0:	f7ff fdf4 	bl	8000cdc <MX_I2C2_Init>
  MX_SPI1_Init();
 80010f4:	f000 f894 	bl	8001220 <MX_SPI1_Init>
  MX_SPI4_Init();
 80010f8:	f000 f8d0 	bl	800129c <MX_SPI4_Init>
  MX_ADC1_Init();
 80010fc:	f7ff fa6e 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001100:	f000 fd38 	bl	8001b74 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001104:	f000 fce8 	bl	8001ad8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001108:	f00b fcd4 	bl	800cab4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800110c:	f7ff fc06 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001110:	f00b fd04 	bl	800cb1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <main+0x4c>

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	@ 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2230      	movs	r2, #48	@ 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f01e feb8 	bl	801fe9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <SystemClock_Config+0xd0>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a29      	ldr	r2, [pc, #164]	@ (80011e8 <SystemClock_Config+0xd0>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <SystemClock_Config+0xd0>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <SystemClock_Config+0xd4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <SystemClock_Config+0xd4>)
 800115a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <SystemClock_Config+0xd4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2310      	movs	r3, #16
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117c:	2300      	movs	r3, #0
 800117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001180:	2308      	movs	r3, #8
 8001182:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001184:	23d8      	movs	r3, #216	@ 0xd8
 8001186:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4618      	mov	r0, r3
 8001196:	f006 fbc9 	bl	800792c <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011a0:	f000 f838 	bl	8001214 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011a4:	f006 fb72 	bl	800788c <HAL_PWREx_EnableOverDrive>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f831 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2107      	movs	r1, #7
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 fe4f 	bl	8007e74 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011dc:	f000 f81a 	bl	8001214 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	@ 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001202:	f001 f8af 	bl	8002364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40001400 	.word	0x40001400

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001226:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <MX_SPI1_Init+0x78>)
 8001228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_SPI1_Init+0x74>)
 800122c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001230:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <MX_SPI1_Init+0x74>)
 800123a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800123e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_SPI1_Init+0x74>)
 800124e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001252:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001256:	2218      	movs	r2, #24
 8001258:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_SPI1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_SPI1_Init+0x74>)
 800126e:	2207      	movs	r2, #7
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_SPI1_Init+0x74>)
 800127a:	2208      	movs	r2, #8
 800127c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001280:	f007 fc00 	bl	8008a84 <HAL_SPI_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800128a:	f7ff ffc3 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000520 	.word	0x20000520
 8001298:	40013000 	.word	0x40013000

0800129c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80012a0:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012a2:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <MX_SPI4_Init+0x6c>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012b8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c0:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012da:	2200      	movs	r2, #0
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012f2:	f007 fbc7 	bl	8008a84 <HAL_SPI_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80012fc:	f7ff ff8a 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000584 	.word	0x20000584
 8001308:	40013400 	.word	0x40013400

0800130c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	@ 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4aa1      	ldr	r2, [pc, #644]	@ (80015b0 <HAL_SPI_MspInit+0x2a4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	f040 80a9 	bne.w	8001482 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001330:	4ba0      	ldr	r3, [pc, #640]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001334:	4a9f      	ldr	r2, [pc, #636]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133a:	6453      	str	r3, [r2, #68]	@ 0x44
 800133c:	4b9d      	ldr	r3, [pc, #628]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800133e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b9a      	ldr	r3, [pc, #616]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	4a99      	ldr	r2, [pc, #612]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6313      	str	r3, [r2, #48]	@ 0x30
 8001354:	4b97      	ldr	r3, [pc, #604]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	4b94      	ldr	r3, [pc, #592]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a93      	ldr	r2, [pc, #588]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b91      	ldr	r3, [pc, #580]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001378:	2370      	movs	r3, #112	@ 0x70
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001388:	2305      	movs	r3, #5
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4889      	ldr	r0, [pc, #548]	@ (80015b8 <HAL_SPI_MspInit+0x2ac>)
 8001394:	f003 fe8a 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001398:	2320      	movs	r3, #32
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a8:	2305      	movs	r3, #5
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4882      	ldr	r0, [pc, #520]	@ (80015bc <HAL_SPI_MspInit+0x2b0>)
 80013b4:	f003 fe7a 	bl	80050ac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80013b8:	4b81      	ldr	r3, [pc, #516]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013ba:	4a82      	ldr	r2, [pc, #520]	@ (80015c4 <HAL_SPI_MspInit+0x2b8>)
 80013bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80013be:	4b80      	ldr	r3, [pc, #512]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013c0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c6:	4b7e      	ldr	r3, [pc, #504]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b7c      	ldr	r3, [pc, #496]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b7b      	ldr	r3, [pc, #492]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013da:	4b79      	ldr	r3, [pc, #484]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e0:	4b77      	ldr	r3, [pc, #476]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013e6:	4b76      	ldr	r3, [pc, #472]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ec:	4b74      	ldr	r3, [pc, #464]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f2:	4b73      	ldr	r3, [pc, #460]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013f8:	4871      	ldr	r0, [pc, #452]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013fa:	f001 ff69 	bl	80032d0 <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001404:	f7ff ff06 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a6d      	ldr	r2, [pc, #436]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 800140c:	659a      	str	r2, [r3, #88]	@ 0x58
 800140e:	4a6c      	ldr	r2, [pc, #432]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001414:	4b6c      	ldr	r3, [pc, #432]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001416:	4a6d      	ldr	r2, [pc, #436]	@ (80015cc <HAL_SPI_MspInit+0x2c0>)
 8001418:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800141a:	4b6b      	ldr	r3, [pc, #428]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800141c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001420:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001422:	4b69      	ldr	r3, [pc, #420]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001424:	2240      	movs	r2, #64	@ 0x40
 8001426:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b67      	ldr	r3, [pc, #412]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b66      	ldr	r3, [pc, #408]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001430:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001434:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001436:	4b64      	ldr	r3, [pc, #400]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143c:	4b62      	ldr	r3, [pc, #392]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001442:	4b61      	ldr	r3, [pc, #388]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001448:	4b5f      	ldr	r3, [pc, #380]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144e:	4b5e      	ldr	r3, [pc, #376]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001454:	485c      	ldr	r0, [pc, #368]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001456:	f001 ff3b 	bl	80032d0 <HAL_DMA_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001460:	f7ff fed8 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a58      	ldr	r2, [pc, #352]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001468:	655a      	str	r2, [r3, #84]	@ 0x54
 800146a:	4a57      	ldr	r2, [pc, #348]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2105      	movs	r1, #5
 8001474:	2023      	movs	r0, #35	@ 0x23
 8001476:	f001 fcf7 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800147a:	2023      	movs	r0, #35	@ 0x23
 800147c:	f001 fd10 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001480:	e091      	b.n	80015a6 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a52      	ldr	r2, [pc, #328]	@ (80015d0 <HAL_SPI_MspInit+0x2c4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	f040 808c 	bne.w	80015a6 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800148e:	4b49      	ldr	r3, [pc, #292]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	4a48      	ldr	r2, [pc, #288]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001494:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001498:	6453      	str	r3, [r2, #68]	@ 0x44
 800149a:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a6:	4b43      	ldr	r3, [pc, #268]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a42      	ldr	r2, [pc, #264]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 80014ac:	f043 0310 	orr.w	r3, r3, #16
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b40      	ldr	r3, [pc, #256]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014be:	2374      	movs	r3, #116	@ 0x74
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014ce:	2305      	movs	r3, #5
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	483e      	ldr	r0, [pc, #248]	@ (80015d4 <HAL_SPI_MspInit+0x2c8>)
 80014da:	f003 fde7 	bl	80050ac <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80014de:	4b3e      	ldr	r3, [pc, #248]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014e0:	4a3e      	ldr	r2, [pc, #248]	@ (80015dc <HAL_SPI_MspInit+0x2d0>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80014e4:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ec:	4b3a      	ldr	r3, [pc, #232]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b37      	ldr	r3, [pc, #220]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001500:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001506:	4b34      	ldr	r3, [pc, #208]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800150c:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001512:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001518:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800151e:	482e      	ldr	r0, [pc, #184]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001520:	f001 fed6 	bl	80032d0 <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800152a:	f7ff fe73 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a29      	ldr	r2, [pc, #164]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001532:	659a      	str	r2, [r3, #88]	@ 0x58
 8001534:	4a28      	ldr	r2, [pc, #160]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800153c:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <HAL_SPI_MspInit+0x2d8>)
 800153e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001540:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001542:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001546:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800154a:	2240      	movs	r2, #64	@ 0x40
 800154c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800155a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800157a:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800157c:	f001 fea8 	bl	80032d0 <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8001586:	f7ff fe45 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001590:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	2054      	movs	r0, #84	@ 0x54
 800159c:	f001 fc64 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80015a0:	2054      	movs	r0, #84	@ 0x54
 80015a2:	f001 fc7d 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3730      	adds	r7, #48	@ 0x30
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020400 	.word	0x40020400
 80015c0:	200005e8 	.word	0x200005e8
 80015c4:	40026440 	.word	0x40026440
 80015c8:	20000648 	.word	0x20000648
 80015cc:	40026458 	.word	0x40026458
 80015d0:	40013400 	.word	0x40013400
 80015d4:	40021000 	.word	0x40021000
 80015d8:	200006a8 	.word	0x200006a8
 80015dc:	40026410 	.word	0x40026410
 80015e0:	20000708 	.word	0x20000708
 80015e4:	40026428 	.word	0x40026428

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	210f      	movs	r1, #15
 8001622:	f06f 0001 	mvn.w	r0, #1
 8001626:	f001 fc1f 	bl	8002e68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	@ 0x38
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001648:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <HAL_InitTick+0xe0>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	4a32      	ldr	r2, [pc, #200]	@ (8001718 <HAL_InitTick+0xe0>)
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	6413      	str	r3, [r2, #64]	@ 0x40
 8001654:	4b30      	ldr	r3, [pc, #192]	@ (8001718 <HAL_InitTick+0xe0>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001660:	f107 0210 	add.w	r2, r7, #16
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f006 fde8 	bl	8008240 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800167a:	f006 fdb9 	bl	80081f0 <HAL_RCC_GetPCLK1Freq>
 800167e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001680:	e004      	b.n	800168c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001682:	f006 fdb5 	bl	80081f0 <HAL_RCC_GetPCLK1Freq>
 8001686:	4603      	mov	r3, r0
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800168c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <HAL_InitTick+0xe4>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	0c9b      	lsrs	r3, r3, #18
 8001696:	3b01      	subs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_InitTick+0xe8>)
 800169c:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <HAL_InitTick+0xec>)
 800169e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_InitTick+0xe8>)
 80016a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016a6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_InitTick+0xe8>)
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <HAL_InitTick+0xe8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <HAL_InitTick+0xe8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_InitTick+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80016c0:	4817      	ldr	r0, [pc, #92]	@ (8001720 <HAL_InitTick+0xe8>)
 80016c2:	f008 faa7 	bl	8009c14 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11b      	bne.n	800170c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80016d4:	4812      	ldr	r0, [pc, #72]	@ (8001720 <HAL_InitTick+0xe8>)
 80016d6:	f008 fb8d 	bl	8009df4 <HAL_TIM_Base_Start_IT>
 80016da:	4603      	mov	r3, r0
 80016dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016e8:	2037      	movs	r0, #55	@ 0x37
 80016ea:	f001 fbd9 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d808      	bhi.n	8001706 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	2037      	movs	r0, #55	@ 0x37
 80016fa:	f001 fbb5 	bl	8002e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_InitTick+0xf0>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e002      	b.n	800170c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800170c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001710:	4618      	mov	r0, r3
 8001712:	3738      	adds	r7, #56	@ 0x38
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	431bde83 	.word	0x431bde83
 8001720:	20000768 	.word	0x20000768
 8001724:	40001400 	.word	0x40001400
 8001728:	20000004 	.word	0x20000004

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <DMA1_Stream0_IRQHandler+0x10>)
 800176a:	f001 ff51 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000aa8 	.word	0x20000aa8

08001778 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <DMA1_Stream1_IRQHandler+0x10>)
 800177e:	f001 ff47 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000850 	.word	0x20000850

0800178c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <DMA1_Stream2_IRQHandler+0x10>)
 8001792:	f001 ff3d 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000a48 	.word	0x20000a48

080017a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <DMA1_Stream3_IRQHandler+0x10>)
 80017a6:	f001 ff33 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000460 	.word	0x20000460

080017b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <DMA1_Stream5_IRQHandler+0x10>)
 80017ba:	f001 ff29 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200003a0 	.word	0x200003a0

080017c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <DMA1_Stream6_IRQHandler+0x10>)
 80017ce:	f001 ff1f 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000400 	.word	0x20000400

080017dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <I2C1_EV_IRQHandler+0x10>)
 80017e2:	f004 fa51 	bl	8005c88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002f8 	.word	0x200002f8

080017f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <I2C1_ER_IRQHandler+0x10>)
 80017f6:	f004 fa61 	bl	8005cbc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002f8 	.word	0x200002f8

08001804 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <I2C2_EV_IRQHandler+0x10>)
 800180a:	f004 fa3d 	bl	8005c88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000034c 	.word	0x2000034c

08001818 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <I2C2_ER_IRQHandler+0x10>)
 800181e:	f004 fa4d 	bl	8005cbc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000034c 	.word	0x2000034c

0800182c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <SPI1_IRQHandler+0x10>)
 8001832:	f007 fd67 	bl	8009304 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000520 	.word	0x20000520

08001840 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <USART3_IRQHandler+0x10>)
 8001846:	f009 f8ad 	bl	800a9a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200009c0 	.word	0x200009c0

08001854 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <DMA1_Stream7_IRQHandler+0x10>)
 800185a:	f001 fed9 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200004c0 	.word	0x200004c0

08001868 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <UART4_IRQHandler+0x10>)
 800186e:	f009 f899 	bl	800a9a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200008b0 	.word	0x200008b0

0800187c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <UART5_IRQHandler+0x10>)
 8001882:	f009 f88f 	bl	800a9a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000938 	.word	0x20000938

08001890 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <TIM6_DAC_IRQHandler+0x10>)
 8001896:	f008 fb25 	bl	8009ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000804 	.word	0x20000804

080018a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <TIM7_IRQHandler+0x10>)
 80018aa:	f008 fb1b 	bl	8009ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000768 	.word	0x20000768

080018b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <DMA2_Stream0_IRQHandler+0x10>)
 80018be:	f001 fea7 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200006a8 	.word	0x200006a8

080018cc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <DMA2_Stream1_IRQHandler+0x10>)
 80018d2:	f001 fe9d 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000708 	.word	0x20000708

080018e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA2_Stream2_IRQHandler+0x10>)
 80018e6:	f001 fe93 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200005e8 	.word	0x200005e8

080018f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <DMA2_Stream3_IRQHandler+0x10>)
 80018fa:	f001 fe89 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000648 	.word	0x20000648

08001908 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA2_Stream4_IRQHandler+0x10>)
 800190e:	f001 fe7f 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000230 	.word	0x20000230

0800191c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <ETH_IRQHandler+0x10>)
 8001922:	f002 fcdb 	bl	80042dc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000cf9c 	.word	0x2000cf9c

08001930 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <ETH_WKUP_IRQHandler+0x10>)
 8001936:	f002 fcd1 	bl	80042dc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000cf9c 	.word	0x2000cf9c

08001944 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <SPI4_IRQHandler+0x10>)
 800194a:	f007 fcdb 	bl	8009304 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000584 	.word	0x20000584

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <_kill+0x20>)
 8001974:	2216      	movs	r2, #22
 8001976:	601a      	str	r2, [r3, #0]
  return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	2002d8b0 	.word	0x2002d8b0

0800198c <_exit>:

void _exit (int status)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001994:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ffe5 	bl	8001968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800199e:	bf00      	nop
 80019a0:	e7fd      	b.n	800199e <_exit+0x12>

080019a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e00a      	b.n	80019ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b4:	f3af 8000 	nop.w
 80019b8:	4601      	mov	r1, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	60ba      	str	r2, [r7, #8]
 80019c0:	b2ca      	uxtb	r2, r1
 80019c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbf0      	blt.n	80019b4 <_read+0x12>
  }

  return len;
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a04:	605a      	str	r2, [r3, #4]
  return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_isatty>:

int _isatty(int file)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d205      	bcs.n	8001a80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a74:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <_sbrk+0x6c>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	20050000 	.word	0x20050000
 8001aa4:	00002000 	.word	0x00002000
 8001aa8:	200007b4 	.word	0x200007b4
 8001aac:	2002d8c0 	.word	0x2002d8c0
 8001ab0:	2002d8b0 	.word	0x2002d8b0

08001ab4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001af8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001afc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1e:	4814      	ldr	r0, [pc, #80]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b20:	f008 f878 	bl	8009c14 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b2a:	f7ff fb73 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b3c:	f008 fada 	bl	800a0f4 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b46:	f7ff fb65 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b58:	f008 fcfe 	bl	800a558 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b62:	f7ff fb57 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200007b8 	.word	0x200007b8

08001b74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001b86:	4a15      	ldr	r2, [pc, #84]	@ (8001bdc <MX_TIM6_Init+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001b8c:	f240 221b 	movw	r2, #539	@ 0x21b
 8001b90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001b9a:	2263      	movs	r2, #99	@ 0x63
 8001b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001ba6:	f008 f835 	bl	8009c14 <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bb0:	f7ff fb30 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001bc2:	f008 fcc9 	bl	800a558 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bcc:	f7ff fb22 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000804 	.word	0x20000804
 8001bdc:	40001000 	.word	0x40001000

08001be0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c0a:	e049      	b.n	8001ca0 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a26      	ldr	r2, [pc, #152]	@ (8001cac <HAL_TIM_Base_MspInit+0xcc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d144      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c30:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001c32:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c36:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c3a:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c4e:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c56:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c58:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c5e:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c68:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c6c:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001c74:	480e      	ldr	r0, [pc, #56]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c76:	f001 fb2b 	bl	80032d0 <HAL_DMA_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001c80:	f7ff fac8 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c88:	621a      	str	r2, [r3, #32]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2105      	movs	r1, #5
 8001c94:	2036      	movs	r0, #54	@ 0x36
 8001c96:	f001 f8e7 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c9a:	2036      	movs	r0, #54	@ 0x36
 8001c9c:	f001 f900 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40001000 	.word	0x40001000
 8001cb0:	20000850 	.word	0x20000850
 8001cb4:	40026028 	.word	0x40026028

08001cb8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <MX_UART4_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cfc:	f008 fcd8 	bl	800a6b0 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d06:	f7ff fa85 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200008b0 	.word	0x200008b0
 8001d14:	40004c00 	.word	0x40004c00

08001d18 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d1e:	4a15      	ldr	r2, [pc, #84]	@ (8001d74 <MX_UART5_Init+0x5c>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d5c:	f008 fca8 	bl	800a6b0 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d66:	f7ff fa55 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000938 	.word	0x20000938
 8001d74:	40005000 	.word	0x40005000

08001d78 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d7e:	4a15      	ldr	r2, [pc, #84]	@ (8001dd4 <MX_USART3_UART_Init+0x5c>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001dbc:	f008 fc78 	bl	800a6b0 <HAL_UART_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dc6:	f7ff fa25 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200009c0 	.word	0x200009c0
 8001dd4:	40004800 	.word	0x40004800

08001dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0b0      	sub	sp, #192	@ 0xc0
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df4:	2284      	movs	r2, #132	@ 0x84
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f01e f84f 	bl	801fe9c <memset>
  if(uartHandle->Instance==UART4)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4ab0      	ldr	r2, [pc, #704]	@ (80020c4 <HAL_UART_MspInit+0x2ec>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d173      	bne.n	8001ef0 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e16:	4618      	mov	r0, r3
 8001e18:	f006 fa44 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e22:	f7ff f9f7 	bl	8001214 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e26:	4ba8      	ldr	r3, [pc, #672]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4aa7      	ldr	r2, [pc, #668]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4ba5      	ldr	r3, [pc, #660]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4ba2      	ldr	r3, [pc, #648]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4aa1      	ldr	r2, [pc, #644]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b9f      	ldr	r3, [pc, #636]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e70:	2308      	movs	r3, #8
 8001e72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4893      	ldr	r0, [pc, #588]	@ (80020cc <HAL_UART_MspInit+0x2f4>)
 8001e7e:	f003 f915 	bl	80050ac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001e82:	4b93      	ldr	r3, [pc, #588]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e84:	4a93      	ldr	r2, [pc, #588]	@ (80020d4 <HAL_UART_MspInit+0x2fc>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001e88:	4b91      	ldr	r3, [pc, #580]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e90:	4b8f      	ldr	r3, [pc, #572]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b8e      	ldr	r3, [pc, #568]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eaa:	4b89      	ldr	r3, [pc, #548]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001eb0:	4b87      	ldr	r3, [pc, #540]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb6:	4b86      	ldr	r3, [pc, #536]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ebc:	4b84      	ldr	r3, [pc, #528]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001ec2:	4883      	ldr	r0, [pc, #524]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001ec4:	f001 fa04 	bl	80032d0 <HAL_DMA_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ece:	f7ff f9a1 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a7e      	ldr	r2, [pc, #504]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001ed6:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ed8:	4a7d      	ldr	r2, [pc, #500]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2105      	movs	r1, #5
 8001ee2:	2034      	movs	r0, #52	@ 0x34
 8001ee4:	f000 ffc0 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ee8:	2034      	movs	r0, #52	@ 0x34
 8001eea:	f000 ffd9 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001eee:	e0e4      	b.n	80020ba <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a78      	ldr	r2, [pc, #480]	@ (80020d8 <HAL_UART_MspInit+0x300>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	f040 8095 	bne.w	8002026 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 f9ca 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f16:	f7ff f97d 	bl	8001214 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f1a:	4b6b      	ldr	r3, [pc, #428]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	4a6a      	ldr	r2, [pc, #424]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f26:	4b68      	ldr	r3, [pc, #416]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	4b65      	ldr	r3, [pc, #404]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a64      	ldr	r2, [pc, #400]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b62      	ldr	r3, [pc, #392]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b5c      	ldr	r3, [pc, #368]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f82:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f86:	4619      	mov	r1, r3
 8001f88:	4850      	ldr	r0, [pc, #320]	@ (80020cc <HAL_UART_MspInit+0x2f4>)
 8001f8a:	f003 f88f 	bl	80050ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	484a      	ldr	r0, [pc, #296]	@ (80020dc <HAL_UART_MspInit+0x304>)
 8001fb4:	f003 f87a 	bl	80050ac <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001fb8:	4b49      	ldr	r3, [pc, #292]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fba:	4a4a      	ldr	r2, [pc, #296]	@ (80020e4 <HAL_UART_MspInit+0x30c>)
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001fbe:	4b48      	ldr	r3, [pc, #288]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fc4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc6:	4b46      	ldr	r3, [pc, #280]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fcc:	4b44      	ldr	r3, [pc, #272]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd2:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fd8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fec:	4b3c      	ldr	r3, [pc, #240]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001ff8:	4839      	ldr	r0, [pc, #228]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001ffa:	f001 f969 	bl	80032d0 <HAL_DMA_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002004:	f7ff f906 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a35      	ldr	r2, [pc, #212]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 800200c:	675a      	str	r2, [r3, #116]	@ 0x74
 800200e:	4a34      	ldr	r2, [pc, #208]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2105      	movs	r1, #5
 8002018:	2035      	movs	r0, #53	@ 0x35
 800201a:	f000 ff25 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800201e:	2035      	movs	r0, #53	@ 0x35
 8002020:	f000 ff3e 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 8002024:	e049      	b.n	80020ba <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2f      	ldr	r2, [pc, #188]	@ (80020e8 <HAL_UART_MspInit+0x310>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d144      	bne.n	80020ba <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002036:	2300      	movs	r3, #0
 8002038:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800203a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800203e:	4618      	mov	r0, r3
 8002040:	f006 f930 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_UART_MspInit+0x276>
      Error_Handler();
 800204a:	f7ff f8e3 	bl	8001214 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a1d      	ldr	r2, [pc, #116]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a17      	ldr	r2, [pc, #92]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800207e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002098:	2307      	movs	r3, #7
 800209a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020a2:	4619      	mov	r1, r3
 80020a4:	480d      	ldr	r0, [pc, #52]	@ (80020dc <HAL_UART_MspInit+0x304>)
 80020a6:	f003 f801 	bl	80050ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2105      	movs	r1, #5
 80020ae:	2027      	movs	r0, #39	@ 0x27
 80020b0:	f000 feda 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020b4:	2027      	movs	r0, #39	@ 0x27
 80020b6:	f000 fef3 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	37c0      	adds	r7, #192	@ 0xc0
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40004c00 	.word	0x40004c00
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020800 	.word	0x40020800
 80020d0:	20000a48 	.word	0x20000a48
 80020d4:	40026040 	.word	0x40026040
 80020d8:	40005000 	.word	0x40005000
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	20000aa8 	.word	0x20000aa8
 80020e4:	40026010 	.word	0x40026010
 80020e8:	40004800 	.word	0x40004800

080020ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002124 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020f0:	f7ff fce0 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f4:	480c      	ldr	r0, [pc, #48]	@ (8002128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020f6:	490d      	ldr	r1, [pc, #52]	@ (800212c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800210c:	4c0a      	ldr	r4, [pc, #40]	@ (8002138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800211a:	f01d ff6b 	bl	801fff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7fe ffd3 	bl	80010c8 <main>
  bx  lr    
 8002122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002124:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002130:	08024a60 	.word	0x08024a60
  ldr r2, =_sbss
 8002134:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002138:	2002d8c0 	.word	0x2002d8c0

0800213c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC_IRQHandler>

0800213e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <LAN8742_RegisterBusIO+0x28>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <LAN8742_RegisterBusIO+0x28>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <LAN8742_RegisterBusIO+0x28>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800216a:	e014      	b.n	8002196 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d139      	bne.n	8002232 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e01c      	b.n	8002212 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f107 020c 	add.w	r2, r7, #12
 80021e0:	2112      	movs	r1, #18
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	4798      	blx	r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da03      	bge.n	80021f4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80021ec:	f06f 0304 	mvn.w	r3, #4
 80021f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80021f2:	e00b      	b.n	800220c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d105      	bne.n	800220c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
         break;
 800220a:	e005      	b.n	8002218 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3301      	adds	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b1f      	cmp	r3, #31
 8002216:	d9df      	bls.n	80021d8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b1f      	cmp	r3, #31
 800221e:	d902      	bls.n	8002226 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002220:	f06f 0302 	mvn.w	r3, #2
 8002224:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002232:	693b      	ldr	r3, [r7, #16]
 }
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6810      	ldr	r0, [r2, #0]
 8002250:	f107 020c 	add.w	r2, r7, #12
 8002254:	2101      	movs	r1, #1
 8002256:	4798      	blx	r3
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	da02      	bge.n	8002264 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800225e:	f06f 0304 	mvn.w	r3, #4
 8002262:	e06e      	b.n	8002342 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6810      	ldr	r0, [r2, #0]
 800226c:	f107 020c 	add.w	r2, r7, #12
 8002270:	2101      	movs	r1, #1
 8002272:	4798      	blx	r3
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	da02      	bge.n	8002280 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800227a:	f06f 0304 	mvn.w	r3, #4
 800227e:	e060      	b.n	8002342 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800228a:	2301      	movs	r3, #1
 800228c:	e059      	b.n	8002342 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6810      	ldr	r0, [r2, #0]
 8002296:	f107 020c 	add.w	r2, r7, #12
 800229a:	2100      	movs	r1, #0
 800229c:	4798      	blx	r3
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da02      	bge.n	80022aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022a4:	f06f 0304 	mvn.w	r3, #4
 80022a8:	e04b      	b.n	8002342 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11b      	bne.n	80022ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <LAN8742_GetLinkState+0x90>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022c8:	2302      	movs	r3, #2
 80022ca:	e03a      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e033      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022e4:	2304      	movs	r3, #4
 80022e6:	e02c      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022e8:	2305      	movs	r3, #5
 80022ea:	e02a      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6810      	ldr	r0, [r2, #0]
 80022f4:	f107 020c 	add.w	r2, r7, #12
 80022f8:	211f      	movs	r1, #31
 80022fa:	4798      	blx	r3
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da02      	bge.n	8002308 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002302:	f06f 0304 	mvn.w	r3, #4
 8002306:	e01c      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002312:	2306      	movs	r3, #6
 8002314:	e015      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	2b18      	cmp	r3, #24
 800231e:	d101      	bne.n	8002324 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002320:	2302      	movs	r3, #2
 8002322:	e00e      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 031c 	and.w	r3, r3, #28
 800232a:	2b08      	cmp	r3, #8
 800232c:	d101      	bne.n	8002332 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800232e:	2303      	movs	r3, #3
 8002330:	e007      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 031c 	and.w	r3, r3, #28
 8002338:	2b14      	cmp	r3, #20
 800233a:	d101      	bne.n	8002340 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800233c:	2304      	movs	r3, #4
 800233e:	e000      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002340:	2305      	movs	r3, #5
    }
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234e:	2003      	movs	r0, #3
 8002350:	f000 fd7f 	bl	8002e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002354:	200f      	movs	r0, #15
 8002356:	f7ff f96f 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800235a:	f7ff f945 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_IncTick+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_IncTick+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4413      	add	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	@ (8002388 <HAL_IncTick+0x24>)
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000008 	.word	0x20000008
 8002388:	20000b08 	.word	0x20000b08

0800238c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;
 8002390:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <HAL_GetTick+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000b08 	.word	0x20000b08

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff ffee 	bl	800238c <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_Delay+0x44>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffde 	bl	800238c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008

080023ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e031      	b.n	8002466 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe f938 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <HAL_ADC_Init+0x84>)
 8002430:	4013      	ands	r3, r2
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fae0 	bl	8002a00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
 8002456:	e001      	b.n	800245c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	ffffeefd 	.word	0xffffeefd

08002474 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Start_DMA+0x22>
 8002492:	2302      	movs	r3, #2
 8002494:	e0d6      	b.n	8002644 <HAL_ADC_Start_DMA+0x1d0>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d018      	beq.n	80024de <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024bc:	4b63      	ldr	r3, [pc, #396]	@ (800264c <HAL_ADC_Start_DMA+0x1d8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a63      	ldr	r2, [pc, #396]	@ (8002650 <HAL_ADC_Start_DMA+0x1dc>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9a      	lsrs	r2, r3, #18
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	f040 809e 	bne.w	800262a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024f2:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <HAL_ADC_Start_DMA+0x1e0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002514:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002528:	d106      	bne.n	8002538 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f023 0206 	bic.w	r2, r3, #6
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
 8002536:	e002      	b.n	800253e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	4a43      	ldr	r2, [pc, #268]	@ (8002658 <HAL_ADC_Start_DMA+0x1e4>)
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002552:	4a42      	ldr	r2, [pc, #264]	@ (800265c <HAL_ADC_Start_DMA+0x1e8>)
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255a:	4a41      	ldr	r2, [pc, #260]	@ (8002660 <HAL_ADC_Start_DMA+0x1ec>)
 800255c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002566:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002576:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002586:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	334c      	adds	r3, #76	@ 0x4c
 8002592:	4619      	mov	r1, r3
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f000 ff48 	bl	800342c <HAL_DMA_Start_IT>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025a0:	4b30      	ldr	r3, [pc, #192]	@ (8002664 <HAL_ADC_Start_DMA+0x1f0>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d143      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e03a      	b.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a25      	ldr	r2, [pc, #148]	@ (8002668 <HAL_ADC_Start_DMA+0x1f4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10e      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x180>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025f2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_ADC_Start_DMA+0x1f0>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d120      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	@ (800266c <HAL_ADC_Start_DMA+0x1f8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d11b      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d114      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	e00b      	b.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000000 	.word	0x20000000
 8002650:	431bde83 	.word	0x431bde83
 8002654:	fffff8fe 	.word	0xfffff8fe
 8002658:	08002bf5 	.word	0x08002bf5
 800265c:	08002caf 	.word	0x08002caf
 8002660:	08002ccb 	.word	0x08002ccb
 8002664:	40012300 	.word	0x40012300
 8002668:	40012000 	.word	0x40012000
 800266c:	40012200 	.word	0x40012200

08002670 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_ADC_Stop_DMA+0x1a>
 8002686:	2302      	movs	r3, #2
 8002688:	e046      	b.n	8002718 <HAL_ADC_Stop_DMA+0xa8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d12e      	bne.n	800270e <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026be:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d10f      	bne.n	80026ee <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff0a 	bl	80034ec <HAL_DMA_Abort>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80026fc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <HAL_ADC_Stop_DMA+0xb0>)
 8002704:	4013      	ands	r3, r2
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	ffffeefe 	.word	0xffffeefe

08002724 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1c>
 8002764:	2302      	movs	r3, #2
 8002766:	e13a      	b.n	80029de <HAL_ADC_ConfigChannel+0x292>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b09      	cmp	r3, #9
 8002776:	d93a      	bls.n	80027ee <HAL_ADC_ConfigChannel+0xa2>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002780:	d035      	beq.n	80027ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	3b1e      	subs	r3, #30
 8002798:	2207      	movs	r2, #7
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	400a      	ands	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a8f      	ldr	r2, [pc, #572]	@ (80029ec <HAL_ADC_ConfigChannel+0x2a0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68d9      	ldr	r1, [r3, #12]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	061a      	lsls	r2, r3, #24
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c6:	e039      	b.n	800283c <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68d9      	ldr	r1, [r3, #12]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4403      	add	r3, r0
 80027e0:	3b1e      	subs	r3, #30
 80027e2:	409a      	lsls	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ec:	e026      	b.n	800283c <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6919      	ldr	r1, [r3, #16]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2207      	movs	r2, #7
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43da      	mvns	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	400a      	ands	r2, r1
 8002814:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6919      	ldr	r1, [r3, #16]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	4603      	mov	r3, r0
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4403      	add	r3, r0
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	409a      	lsls	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b06      	cmp	r3, #6
 8002842:	d824      	bhi.n	800288e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	3b05      	subs	r3, #5
 8002856:	221f      	movs	r2, #31
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43da      	mvns	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	400a      	ands	r2, r1
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b05      	subs	r3, #5
 8002880:	fa00 f203 	lsl.w	r2, r0, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	635a      	str	r2, [r3, #52]	@ 0x34
 800288c:	e04c      	b.n	8002928 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d824      	bhi.n	80028e0 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b23      	subs	r3, #35	@ 0x23
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	400a      	ands	r2, r1
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b23      	subs	r3, #35	@ 0x23
 80028d2:	fa00 f203 	lsl.w	r2, r0, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80028de:	e023      	b.n	8002928 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b41      	subs	r3, #65	@ 0x41
 80028f2:	221f      	movs	r2, #31
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43da      	mvns	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	400a      	ands	r2, r1
 8002900:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b41      	subs	r3, #65	@ 0x41
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_ADC_ConfigChannel+0x2a4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10a      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1fc>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800293a:	d105      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800293c:	4b2d      	ldr	r3, [pc, #180]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a2c      	ldr	r2, [pc, #176]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002942:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002946:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a28      	ldr	r2, [pc, #160]	@ (80029f0 <HAL_ADC_ConfigChannel+0x2a4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10f      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x226>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b12      	cmp	r3, #18
 8002958:	d10b      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800295a:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a25      	ldr	r2, [pc, #148]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002960:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002964:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002966:	4b23      	ldr	r3, [pc, #140]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a22      	ldr	r2, [pc, #136]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800296c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002970:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d12b      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x288>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1a      	ldr	r2, [pc, #104]	@ (80029ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <HAL_ADC_ConfigChannel+0x242>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b11      	cmp	r3, #17
 800298c:	d122      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800298e:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a18      	ldr	r2, [pc, #96]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002994:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002998:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800299a:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a15      	ldr	r2, [pc, #84]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80029a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_ADC_ConfigChannel+0x2a0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d111      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <HAL_ADC_ConfigChannel+0x2ac>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_ADC_ConfigChannel+0x2b0>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9a      	lsrs	r2, r3, #18
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029c6:	e002      	b.n	80029ce <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f9      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	10000012 	.word	0x10000012
 80029f0:	40012000 	.word	0x40012000
 80029f4:	40012300 	.word	0x40012300
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83

08002a00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a08:	4b78      	ldr	r3, [pc, #480]	@ (8002bec <ADC_Init+0x1ec>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a77      	ldr	r2, [pc, #476]	@ (8002bec <ADC_Init+0x1ec>)
 8002a0e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a12:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a14:	4b75      	ldr	r3, [pc, #468]	@ (8002bec <ADC_Init+0x1ec>)
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4973      	ldr	r1, [pc, #460]	@ (8002bec <ADC_Init+0x1ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	021a      	lsls	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	4a58      	ldr	r2, [pc, #352]	@ (8002bf0 <ADC_Init+0x1f0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d022      	beq.n	8002ada <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002aa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e00f      	b.n	8002afa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002af8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0202 	bic.w	r2, r2, #2
 8002b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	005a      	lsls	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	3b01      	subs	r3, #1
 8002b54:	035a      	lsls	r2, r3, #13
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	e007      	b.n	8002b70 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	051a      	lsls	r2, r3, #20
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bb2:	025a      	lsls	r2, r3, #9
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	029a      	lsls	r2, r3, #10
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40012300 	.word	0x40012300
 8002bf0:	0f000001 	.word	0x0f000001

08002bf4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d13c      	bne.n	8002c88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d12b      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d127      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d119      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0220 	bic.w	r2, r2, #32
 8002c5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f01b fe6b 	bl	801e95c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c86:	e00e      	b.n	8002ca6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff fd4f 	bl	8002738 <HAL_ADC_ErrorCallback>
}
 8002c9a:	e004      	b.n	8002ca6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fd31 	bl	8002724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2240      	movs	r2, #64	@ 0x40
 8002cdc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	f043 0204 	orr.w	r2, r3, #4
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff fd24 	bl	8002738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <__NVIC_SetPriorityGrouping+0x40>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d26:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <__NVIC_SetPriorityGrouping+0x40>)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60d3      	str	r3, [r2, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00
 8002d3c:	05fa0000 	.word	0x05fa0000

08002d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d44:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4907      	ldr	r1, [pc, #28]	@ (8002d94 <__NVIC_EnableIRQ+0x38>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	@ (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	@ (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	@ 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff4c 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7a:	f7ff ff61 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6978      	ldr	r0, [r7, #20]
 8002e86:	f7ff ffb1 	bl	8002dec <NVIC_EncodePriority>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff80 	bl	8002d98 <__NVIC_SetPriority>
}
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff54 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e054      	b.n	8002f78 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7f5b      	ldrb	r3, [r3, #29]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fc62 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	791b      	ldrb	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a22      	ldr	r2, [pc, #136]	@ (8002f80 <HAL_CRC_Init+0xc4>)
 8002ef8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0218 	bic.w	r2, r2, #24
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	e00c      	b.n	8002f26 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	461a      	mov	r2, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f94c 	bl	80031b4 <HAL_CRCEx_Polynomial_Set>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e028      	b.n	8002f78 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	795b      	ldrb	r3, [r3, #5]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d105      	bne.n	8002f3a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f36:	611a      	str	r2, [r3, #16]
 8002f38:	e004      	b.n	8002f44 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6912      	ldr	r2, [r2, #16]
 8002f42:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	04c11db7 	.word	0x04c11db7

08002f84 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2202      	movs	r2, #2
 8002f98:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d006      	beq.n	8002fc0 <HAL_CRC_Calculate+0x3c>
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d829      	bhi.n	800300a <HAL_CRC_Calculate+0x86>
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d019      	beq.n	8002fee <HAL_CRC_Calculate+0x6a>
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d01e      	beq.n	8002ffc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002fbe:	e024      	b.n	800300a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e00a      	b.n	8002fdc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3f0      	bcc.n	8002fc6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
      break;
 8002fec:	e00e      	b.n	800300c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f812 	bl	800301c <CRC_Handle_8>
 8002ff8:	6138      	str	r0, [r7, #16]
      break;
 8002ffa:	e007      	b.n	800300c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f89d 	bl	8003140 <CRC_Handle_16>
 8003006:	6138      	str	r0, [r7, #16]
      break;
 8003008:	e000      	b.n	800300c <HAL_CRC_Calculate+0x88>
      break;
 800300a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003012:	693b      	ldr	r3, [r7, #16]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	e023      	b.n	8003076 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	3301      	adds	r3, #1
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	440b      	add	r3, r1
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003048:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	440b      	add	r3, r1
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003058:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3303      	adds	r3, #3
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	440b      	add	r3, r1
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800306c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800306e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3d6      	bcc.n	800302e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d051      	beq.n	800312e <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d108      	bne.n	80030a6 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	4413      	add	r3, r2
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	7013      	strb	r3, [r2, #0]
 80030a4:	e043      	b.n	800312e <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d118      	bne.n	80030e2 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	b21a      	sxth	r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	3301      	adds	r3, #1
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	440b      	add	r3, r1
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b21b      	sxth	r3, r3
 80030d2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	8b7a      	ldrh	r2, [r7, #26]
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	e025      	b.n	800312e <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d120      	bne.n	800312e <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	4413      	add	r3, r2
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3301      	adds	r3, #1
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	440b      	add	r3, r1
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b21b      	sxth	r3, r3
 800310a:	4313      	orrs	r3, r2
 800310c:	b21b      	sxth	r3, r3
 800310e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	8b7a      	ldrh	r2, [r7, #26]
 800311a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4413      	add	r3, r2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3724      	adds	r7, #36	@ 0x24
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e013      	b.n	800317a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	041a      	lsls	r2, r3, #16
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	440b      	add	r3, r1
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3301      	adds	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	429a      	cmp	r2, r3
 8003182:	d3e6      	bcc.n	8003152 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	4413      	add	r3, r2
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031c4:	231f      	movs	r3, #31
 80031c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
 80031d6:	e063      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031d8:	bf00      	nop
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	613a      	str	r2, [r7, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_CRCEx_Polynomial_Set+0x44>
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b18      	cmp	r3, #24
 80031fc:	d846      	bhi.n	800328c <HAL_CRCEx_Polynomial_Set+0xd8>
 80031fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003204 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003204:	08003293 	.word	0x08003293
 8003208:	0800328d 	.word	0x0800328d
 800320c:	0800328d 	.word	0x0800328d
 8003210:	0800328d 	.word	0x0800328d
 8003214:	0800328d 	.word	0x0800328d
 8003218:	0800328d 	.word	0x0800328d
 800321c:	0800328d 	.word	0x0800328d
 8003220:	0800328d 	.word	0x0800328d
 8003224:	08003281 	.word	0x08003281
 8003228:	0800328d 	.word	0x0800328d
 800322c:	0800328d 	.word	0x0800328d
 8003230:	0800328d 	.word	0x0800328d
 8003234:	0800328d 	.word	0x0800328d
 8003238:	0800328d 	.word	0x0800328d
 800323c:	0800328d 	.word	0x0800328d
 8003240:	0800328d 	.word	0x0800328d
 8003244:	08003275 	.word	0x08003275
 8003248:	0800328d 	.word	0x0800328d
 800324c:	0800328d 	.word	0x0800328d
 8003250:	0800328d 	.word	0x0800328d
 8003254:	0800328d 	.word	0x0800328d
 8003258:	0800328d 	.word	0x0800328d
 800325c:	0800328d 	.word	0x0800328d
 8003260:	0800328d 	.word	0x0800328d
 8003264:	08003269 	.word	0x08003269
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d913      	bls.n	8003296 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003272:	e010      	b.n	8003296 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b07      	cmp	r3, #7
 8003278:	d90f      	bls.n	800329a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800327e:	e00c      	b.n	800329a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d90b      	bls.n	800329e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800328a:	e008      	b.n	800329e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
        break;
 8003290:	e006      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003292:	bf00      	nop
 8003294:	e004      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800329e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 0118 	bic.w	r1, r3, #24
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff f856 	bl	800238c <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e099      	b.n	8003420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330c:	e00f      	b.n	800332e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330e:	f7ff f83d 	bl	800238c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b05      	cmp	r3, #5
 800331a:	d908      	bls.n	800332e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2203      	movs	r2, #3
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e078      	b.n	8003420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e8      	bne.n	800330e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <HAL_DMA_Init+0x158>)
 8003348:	4013      	ands	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800335a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	2b04      	cmp	r3, #4
 8003386:	d107      	bne.n	8003398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	4313      	orrs	r3, r2
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0307 	bic.w	r3, r3, #7
 80033ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d117      	bne.n	80033f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00e      	beq.n	80033f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fb77 	bl	8003ac8 <DMA_CheckFifoParam>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2240      	movs	r2, #64	@ 0x40
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033ee:	2301      	movs	r3, #1
 80033f0:	e016      	b.n	8003420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fb2e 	bl	8003a5c <DMA_CalcBaseAndBitshift>
 8003400:	4603      	mov	r3, r0
 8003402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	223f      	movs	r2, #63	@ 0x3f
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	f010803f 	.word	0xf010803f

0800342c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_DMA_Start_IT+0x26>
 800344e:	2302      	movs	r3, #2
 8003450:	e048      	b.n	80034e4 <HAL_DMA_Start_IT+0xb8>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d137      	bne.n	80034d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fac0 	bl	8003a00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003484:	223f      	movs	r2, #63	@ 0x3f
 8003486:	409a      	lsls	r2, r3
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0216 	orr.w	r2, r2, #22
 800349a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e005      	b.n	80034e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034fa:	f7fe ff47 	bl	800238c <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d008      	beq.n	800351e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e052      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0216 	bic.w	r2, r2, #22
 800352c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_DMA_Abort+0x62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356e:	e013      	b.n	8003598 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003570:	f7fe ff0c 	bl	800238c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b05      	cmp	r3, #5
 800357c:	d90c      	bls.n	8003598 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2203      	movs	r2, #3
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e015      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e4      	bne.n	8003570 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	223f      	movs	r2, #63	@ 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2280      	movs	r2, #128	@ 0x80
 80035e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00c      	b.n	8003604 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2205      	movs	r2, #5
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800361c:	4b8e      	ldr	r3, [pc, #568]	@ (8003858 <HAL_DMA_IRQHandler+0x248>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8e      	ldr	r2, [pc, #568]	@ (800385c <HAL_DMA_IRQHandler+0x24c>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01a      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	2208      	movs	r2, #8
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f043 0201 	orr.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2201      	movs	r2, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	2210      	movs	r2, #16
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d043      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03c      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	2210      	movs	r2, #16
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e01f      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e016      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0208 	bic.w	r2, r2, #8
 800376e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2220      	movs	r2, #32
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808f 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8087 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d136      	bne.n	8003828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x1da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	223f      	movs	r2, #63	@ 0x3f
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d07e      	beq.n	800391c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
        }
        return;
 8003826:	e079      	b.n	800391c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	2b00      	cmp	r3, #0
 800384a:	d031      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e02c      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
 8003856:	bf00      	nop
 8003858:	20000000 	.word	0x20000000
 800385c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e01e      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0210 	bic.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d032      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2205      	movs	r2, #5
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3301      	adds	r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d307      	bcc.n	80038f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f2      	bne.n	80038dc <HAL_DMA_IRQHandler+0x2cc>
 80038f6:	e000      	b.n	80038fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
 800391a:	e000      	b.n	800391e <HAL_DMA_IRQHandler+0x30e>
        return;
 800391c:	bf00      	nop
    }
  }
}
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	460b      	mov	r3, r1
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_DMA_RegisterCallback+0x20>
 8003940:	2302      	movs	r3, #2
 8003942:	e03d      	b.n	80039c0 <HAL_DMA_RegisterCallback+0x9c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d12c      	bne.n	80039b2 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8003958:	7afb      	ldrb	r3, [r7, #11]
 800395a:	2b05      	cmp	r3, #5
 800395c:	d826      	bhi.n	80039ac <HAL_DMA_RegisterCallback+0x88>
 800395e:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <HAL_DMA_RegisterCallback+0x40>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	0800397d 	.word	0x0800397d
 8003968:	08003985 	.word	0x08003985
 800396c:	0800398d 	.word	0x0800398d
 8003970:	08003995 	.word	0x08003995
 8003974:	0800399d 	.word	0x0800399d
 8003978:	080039a5 	.word	0x080039a5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8003982:	e018      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800398a:	e014      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8003992:	e010      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800399a:	e00c      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 80039a2:	e008      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80039aa:	e004      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
      break;
 80039b0:	e001      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039da:	b2db      	uxtb	r3, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b40      	cmp	r3, #64	@ 0x40
 8003a2c:	d108      	bne.n	8003a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a3e:	e007      	b.n	8003a50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	60da      	str	r2, [r3, #12]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	3b10      	subs	r3, #16
 8003a6c:	4a13      	ldr	r2, [pc, #76]	@ (8003abc <DMA_CalcBaseAndBitshift+0x60>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d908      	bls.n	8003a9c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	1d1a      	adds	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a9a:	e006      	b.n	8003aaa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	aaaaaaab 	.word	0xaaaaaaab
 8003ac0:	08024800 	.word	0x08024800
 8003ac4:	fffffc00 	.word	0xfffffc00

08003ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11f      	bne.n	8003b22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d856      	bhi.n	8003b96 <DMA_CheckFifoParam+0xce>
 8003ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <DMA_CheckFifoParam+0x28>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b01 	.word	0x08003b01
 8003af4:	08003b13 	.word	0x08003b13
 8003af8:	08003b01 	.word	0x08003b01
 8003afc:	08003b97 	.word	0x08003b97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d046      	beq.n	8003b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e043      	b.n	8003b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b1a:	d140      	bne.n	8003b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b20:	e03d      	b.n	8003b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b2a:	d121      	bne.n	8003b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d837      	bhi.n	8003ba2 <DMA_CheckFifoParam+0xda>
 8003b32:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <DMA_CheckFifoParam+0x70>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b4f 	.word	0x08003b4f
 8003b40:	08003b49 	.word	0x08003b49
 8003b44:	08003b61 	.word	0x08003b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4c:	e030      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d025      	beq.n	8003ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5e:	e022      	b.n	8003ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b68:	d11f      	bne.n	8003baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b6e:	e01c      	b.n	8003baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d903      	bls.n	8003b7e <DMA_CheckFifoParam+0xb6>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d003      	beq.n	8003b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b7c:	e018      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      break;
 8003b82:	e015      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	e00b      	b.n	8003bae <DMA_CheckFifoParam+0xe6>
      break;
 8003b96:	bf00      	nop
 8003b98:	e00a      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e008      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e006      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e004      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bae:	bf00      	nop
    }
  } 
  
  return status; 
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop

08003bc0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e086      	b.n	8003ce0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f008 fd3d 	bl	800c664 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bea:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce8 <HAL_ETH_Init+0x128>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	4a3e      	ldr	r2, [pc, #248]	@ (8003ce8 <HAL_ETH_Init+0x128>)
 8003bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ce8 <HAL_ETH_Init+0x128>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c02:	4b3a      	ldr	r3, [pc, #232]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4a39      	ldr	r2, [pc, #228]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c0e:	4b37      	ldr	r3, [pc, #220]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4935      	ldr	r1, [pc, #212]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c1c:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c38:	f7fe fba8 	bl	800238c <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c3e:	e011      	b.n	8003c64 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c40:	f7fe fba4 	bl	800238c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c4e:	d909      	bls.n	8003c64 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2204      	movs	r2, #4
 8003c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	22e0      	movs	r2, #224	@ 0xe0
 8003c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e03d      	b.n	8003ce0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e4      	bne.n	8003c40 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 ff5c 	bl	8004b34 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f001 f807 	bl	8004c90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f001 f85d 	bl	8004d42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 ffc5 	bl	8004c20 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf0 <HAL_ETH_Init+0x130>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003cca:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40013800 	.word	0x40013800
 8003cf0:	00020060 	.word	0x00020060

08003cf4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d15f      	bne.n	8003dc6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9f6 	bl	800410c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f7fe fb3b 	bl	80023a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d4c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d64:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fd80 	bl	800486c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0208 	orr.w	r2, r2, #8
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7fe fb0d 	bl	80023a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0204 	orr.w	r2, r2, #4
 8003da0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003daa:	69d9      	ldr	r1, [r3, #28]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <HAL_ETH_Start_IT+0xdc>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003db8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2240      	movs	r2, #64	@ 0x40
 8003dbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	0001a0c1 	.word	0x0001a0c1

08003dd4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de2:	2b40      	cmp	r3, #64	@ 0x40
 8003de4:	d16e      	bne.n	8003ec4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b34      	ldr	r3, [pc, #208]	@ (8003ed0 <HAL_ETH_Stop_IT+0xfc>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e04:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e1c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	f023 0302 	bic.w	r3, r3, #2
 8003e30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e34:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0204 	bic.w	r2, r2, #4
 8003e44:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fe faa8 	bl	80023a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fd05 	bl	800486c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0208 	bic.w	r2, r2, #8
 8003e70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fe fa92 	bl	80023a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e00e      	b.n	8003eac <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	3212      	adds	r2, #18
 8003e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e98:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d9ed      	bls.n	8003e8e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2210      	movs	r2, #16
 8003ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	fffe5f3e 	.word	0xfffe5f3e

08003ed4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e045      	b.n	8003f84 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d13f      	bne.n	8003f82 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 ff86 	bl	8004e20 <ETH_Prepare_Tx_Descriptors>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f20:	f043 0202 	orr.w	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e02a      	b.n	8003f84 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f2e:	f3bf 8f4f 	dsb	sy
}
 8003f32:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d904      	bls.n	8003f50 <HAL_ETH_Transmit_IT+0x7c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	1f1a      	subs	r2, r3, #4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
  }
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0a4      	b.n	8004102 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d001      	beq.n	8003fc6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e09d      	b.n	8004102 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	3212      	adds	r2, #18
 8003fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fdc:	f1c3 0304 	rsb	r3, r3, #4
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fe2:	e066      	b.n	80040b2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	699a      	ldr	r2, [r3, #24]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <HAL_ETH_ReadData+0x88>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d03c      	beq.n	800408e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004036:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800404c:	2301      	movs	r3, #1
 800404e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004068:	461a      	mov	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f008 fccd 	bl	800ca0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	441a      	add	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2200      	movs	r2, #0
 800408c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3301      	adds	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d902      	bls.n	80040a0 <HAL_ETH_ReadData+0x114>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3b04      	subs	r3, #4
 800409e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	3212      	adds	r2, #18
 80040a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040aa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	db06      	blt.n	80040c8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d202      	bcs.n	80040c8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d08d      	beq.n	8003fe4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f815 	bl	800410c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d108      	bne.n	8004100 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004118:	2301      	movs	r3, #1
 800411a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004120:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	3212      	adds	r2, #18
 8004128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800412c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004132:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004134:	e042      	b.n	80041bc <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d112      	bne.n	8004164 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	4618      	mov	r0, r3
 8004144:	f008 fc32 	bl	800c9ac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	74fb      	strb	r3, [r7, #19]
 8004152:	e007      	b.n	8004164 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	461a      	mov	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	461a      	mov	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d028      	beq.n	80041bc <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <ETH_UpdateDescriptor+0x104>)
 8004178:	4313      	orrs	r3, r2
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	6053      	str	r3, [r2, #4]
 800417e:	e005      	b.n	800418c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	3301      	adds	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d902      	bls.n	80041aa <ETH_UpdateDescriptor+0x9e>
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3b04      	subs	r3, #4
 80041a8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	3212      	adds	r2, #18
 80041b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b4:	617b      	str	r3, [r7, #20]
      desccount--;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <ETH_UpdateDescriptor+0xbc>
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1b6      	bne.n	8004136 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d01a      	beq.n	8004208 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3303      	adds	r3, #3
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041dc:	f3bf 8f5f 	dmb	sy
}
 80041e0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6919      	ldr	r1, [r3, #16]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	18ca      	adds	r2, r1, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041fa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004208:	bf00      	nop
 800420a:	3720      	adds	r7, #32
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	80004000 	.word	0x80004000

08004214 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3318      	adds	r3, #24
 8004220:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004232:	e047      	b.n	80042c4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004234:	2301      	movs	r3, #1
 8004236:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3b01      	subs	r3, #1
 800423c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	3304      	adds	r3, #4
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3301      	adds	r3, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d902      	bls.n	8004260 <HAL_ETH_ReleaseTxPacket+0x4c>
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	3b04      	subs	r3, #4
 800425e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004264:	7bbb      	ldrb	r3, [r7, #14]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d02c      	beq.n	80042c4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68d9      	ldr	r1, [r3, #12]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	440b      	add	r3, r1
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db1f      	blt.n	80042c0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	3304      	adds	r3, #4
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	f008 fbff 	bl	800ca90 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	3304      	adds	r3, #4
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	2200      	movs	r2, #0
 800429e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	3301      	adds	r3, #1
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d902      	bls.n	80042b2 <HAL_ETH_ReleaseTxPacket+0x9e>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3b04      	subs	r3, #4
 80042b0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042be:	e001      	b.n	80042c4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_ETH_ReleaseTxPacket+0xbc>
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1b1      	bne.n	8004234 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004304:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_ETH_IRQHandler+0x158>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00e      	beq.n	8004332 <HAL_ETH_IRQHandler+0x56>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004326:	461a      	mov	r2, r3
 8004328:	4b43      	ldr	r3, [pc, #268]	@ (8004438 <HAL_ETH_IRQHandler+0x15c>)
 800432a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f007 fed9 	bl	800c0e4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00f      	beq.n	800435c <HAL_ETH_IRQHandler+0x80>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434e:	461a      	mov	r2, r3
 8004350:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004354:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f007 fed4 	bl	800c104 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d042      	beq.n	80043ec <HAL_ETH_IRQHandler+0x110>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d03d      	beq.n	80043ec <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f043 0208 	orr.w	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01a      	beq.n	80043c0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	4b29      	ldr	r3, [pc, #164]	@ (800443c <HAL_ETH_IRQHandler+0x160>)
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80043b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043b4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	22e0      	movs	r2, #224	@ 0xe0
 80043ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80043be:	e012      	b.n	80043e6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043ce:	4013      	ands	r3, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043de:	461a      	mov	r2, r3
 80043e0:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043e4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f007 fe9c 	bl	800c124 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f81a 	bl	8004440 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d006      	beq.n	800442c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800441e:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_ETH_IRQHandler+0x158>)
 8004420:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004424:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f814 	bl	8004454 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40013c00 	.word	0x40013c00
 8004438:	00010040 	.word	0x00010040
 800443c:	007e2000 	.word	0x007e2000

08004440 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 031c 	and.w	r3, r3, #28
 8004484:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	02db      	lsls	r3, r3, #11
 800448a:	b29b      	uxth	r3, r3
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0302 	bic.w	r3, r3, #2
 80044a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80044b8:	f7fd ff68 	bl	800238c <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044be:	e00d      	b.n	80044dc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80044c0:	f7fd ff64 	bl	800238c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ce:	d301      	bcc.n	80044d4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e010      	b.n	80044f6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ec      	bne.n	80044c0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 031c 	and.w	r3, r3, #28
 800451a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	02db      	lsls	r3, r3, #11
 8004520:	b29b      	uxth	r3, r3
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	019b      	lsls	r3, r3, #6
 800452c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004558:	f7fd ff18 	bl	800238c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800455e:	e00d      	b.n	800457c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004560:	f7fd ff14 	bl	800238c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800456e:	d301      	bcc.n	8004574 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e009      	b.n	8004588 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ec      	bne.n	8004560 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0e6      	b.n	8004772 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800460e:	2b00      	cmp	r3, #0
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	bf14      	ite	ne
 8004696:	2301      	movne	r3, #1
 8004698:	2300      	moveq	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf14      	ite	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	2300      	moveq	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	b29a      	uxth	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e00b      	b.n	80047aa <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004798:	2b10      	cmp	r3, #16
 800479a:	d105      	bne.n	80047a8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f88a 	bl	80048b8 <ETH_SetMACConfig>

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 031c 	bic.w	r3, r3, #28
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80047cc:	f003 fd04 	bl	80081d8 <HAL_RCC_GetHCLKFreq>
 80047d0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a14      	ldr	r2, [pc, #80]	@ (8004828 <HAL_ETH_SetMDIOClockRange+0x74>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d804      	bhi.n	80047e4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e019      	b.n	8004818 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4a11      	ldr	r2, [pc, #68]	@ (800482c <HAL_ETH_SetMDIOClockRange+0x78>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d204      	bcs.n	80047f6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f043 030c 	orr.w	r3, r3, #12
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e010      	b.n	8004818 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004830 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d90c      	bls.n	8004818 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a0c      	ldr	r2, [pc, #48]	@ (8004834 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d804      	bhi.n	8004810 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e003      	b.n	8004818 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f043 0310 	orr.w	r3, r3, #16
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	611a      	str	r2, [r3, #16]
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	02160ebf 	.word	0x02160ebf
 800482c:	03938700 	.word	0x03938700
 8004830:	05f5e0ff 	.word	0x05f5e0ff
 8004834:	08f0d17f 	.word	0x08f0d17f

08004838 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800488a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800488e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800489c:	2001      	movs	r0, #1
 800489e:	f7fd fd81 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048ac:	6193      	str	r3, [r2, #24]
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <ETH_SetMACConfig+0x164>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	7b9b      	ldrb	r3, [r3, #14]
 80048d6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	7c12      	ldrb	r2, [r2, #16]
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d102      	bne.n	80048e6 <ETH_SetMACConfig+0x2e>
 80048e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048e4:	e000      	b.n	80048e8 <ETH_SetMACConfig+0x30>
 80048e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	7c52      	ldrb	r2, [r2, #17]
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	d102      	bne.n	80048f8 <ETH_SetMACConfig+0x40>
 80048f2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80048f6:	e000      	b.n	80048fa <ETH_SetMACConfig+0x42>
 80048f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004900:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	7fdb      	ldrb	r3, [r3, #31]
 8004906:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004908:	431a      	orrs	r2, r3
                        macconf->Speed |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800490e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	7f92      	ldrb	r2, [r2, #30]
 8004914:	2a00      	cmp	r2, #0
 8004916:	d102      	bne.n	800491e <ETH_SetMACConfig+0x66>
 8004918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800491c:	e000      	b.n	8004920 <ETH_SetMACConfig+0x68>
 800491e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004920:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	7f1b      	ldrb	r3, [r3, #28]
 8004926:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004928:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800492e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	791b      	ldrb	r3, [r3, #4]
 8004934:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800493e:	2a00      	cmp	r2, #0
 8004940:	d102      	bne.n	8004948 <ETH_SetMACConfig+0x90>
 8004942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004946:	e000      	b.n	800494a <ETH_SetMACConfig+0x92>
 8004948:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800494a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	7bdb      	ldrb	r3, [r3, #15]
 8004950:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004952:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004958:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004960:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004962:	4313      	orrs	r3, r2
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800497a:	2001      	movs	r0, #1
 800497c:	f7fd fd12 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004996:	4013      	ands	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	d101      	bne.n	80049ae <ETH_SetMACConfig+0xf6>
 80049aa:	2280      	movs	r2, #128	@ 0x80
 80049ac:	e000      	b.n	80049b0 <ETH_SetMACConfig+0xf8>
 80049ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80049be:	2a01      	cmp	r2, #1
 80049c0:	d101      	bne.n	80049c6 <ETH_SetMACConfig+0x10e>
 80049c2:	2208      	movs	r2, #8
 80049c4:	e000      	b.n	80049c8 <ETH_SetMACConfig+0x110>
 80049c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80049c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80049d0:	2a01      	cmp	r2, #1
 80049d2:	d101      	bne.n	80049d8 <ETH_SetMACConfig+0x120>
 80049d4:	2204      	movs	r2, #4
 80049d6:	e000      	b.n	80049da <ETH_SetMACConfig+0x122>
 80049d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80049e2:	2a01      	cmp	r2, #1
 80049e4:	d101      	bne.n	80049ea <ETH_SetMACConfig+0x132>
 80049e6:	2202      	movs	r2, #2
 80049e8:	e000      	b.n	80049ec <ETH_SetMACConfig+0x134>
 80049ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049ec:	4313      	orrs	r3, r2
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a04:	2001      	movs	r0, #1
 8004a06:	f7fd fccd 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	619a      	str	r2, [r3, #24]
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	fd20810f 	.word	0xfd20810f

08004a20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4b3d      	ldr	r3, [pc, #244]	@ (8004b30 <ETH_SetDMAConfig+0x110>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	7b1b      	ldrb	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <ETH_SetDMAConfig+0x2c>
 8004a46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004a4a:	e000      	b.n	8004a4e <ETH_SetDMAConfig+0x2e>
 8004a4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	7b5b      	ldrb	r3, [r3, #13]
 8004a52:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a54:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	7f52      	ldrb	r2, [r2, #29]
 8004a5a:	2a00      	cmp	r2, #0
 8004a5c:	d102      	bne.n	8004a64 <ETH_SetDMAConfig+0x44>
 8004a5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a62:	e000      	b.n	8004a66 <ETH_SetDMAConfig+0x46>
 8004a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	7b9b      	ldrb	r3, [r3, #14]
 8004a6c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a6e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	7f1b      	ldrb	r3, [r3, #28]
 8004a7a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	7f9b      	ldrb	r3, [r3, #30]
 8004a82:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a84:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a92:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a94:	4313      	orrs	r3, r2
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fd fc74 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ad4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004ada:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ae0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ae8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004aea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004af2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004af8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b06:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7fd fc45 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b22:	461a      	mov	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6013      	str	r3, [r2, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	f8de3f23 	.word	0xf8de3f23

08004b34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b0a6      	sub	sp, #152	@ 0x98
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b76:	2300      	movs	r3, #0
 8004b78:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004ba2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004bae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fe7f 	bl	80048b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004bea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bf0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bf4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bfa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff05 	bl	8004a20 <ETH_SetDMAConfig>
}
 8004c16:	bf00      	nop
 8004c18:	3798      	adds	r7, #152	@ 0x98
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3305      	adds	r3, #5
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	3204      	adds	r2, #4
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <ETH_MACAddressConfig+0x68>)
 8004c42:	4413      	add	r3, r2
 8004c44:	461a      	mov	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	061a      	lsls	r2, r3, #24
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3302      	adds	r3, #2
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	4313      	orrs	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	7812      	ldrb	r2, [r2, #0]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <ETH_MACAddressConfig+0x6c>)
 8004c72:	4413      	add	r3, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	6013      	str	r3, [r2, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40028040 	.word	0x40028040
 8004c8c:	40028044 	.word	0x40028044

08004c90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e03e      	b.n	8004d1c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68d9      	ldr	r1, [r3, #12]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	3206      	adds	r2, #6
 8004cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d80c      	bhi.n	8004d00 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68d9      	ldr	r1, [r3, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	440b      	add	r3, r1
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	e004      	b.n	8004d0a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	461a      	mov	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d9bd      	bls.n	8004c9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d34:	611a      	str	r2, [r3, #16]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	e048      	b.n	8004de2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6919      	ldr	r1, [r3, #16]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	440b      	add	r3, r1
 8004d60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d8c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	3212      	adds	r2, #18
 8004dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d80c      	bhi.n	8004dd2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6919      	ldr	r1, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	440b      	add	r3, r1
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e004      	b.n	8004ddc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d9b3      	bls.n	8004d50 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e12:	60da      	str	r2, [r3, #12]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b091      	sub	sp, #68	@ 0x44
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3318      	adds	r3, #24
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e62:	d007      	beq.n	8004e74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e68:	3304      	adds	r3, #4
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e74:	2302      	movs	r3, #2
 8004e76:	e111      	b.n	800509c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4b86      	ldr	r3, [pc, #536]	@ (80050a8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e92:	6852      	ldr	r2, [r2, #4]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004efa:	e082      	b.n	8005002 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e005      	b.n	8004f28 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d902      	bls.n	8004f3a <ETH_Prepare_Tx_Descriptors+0x11a>
 8004f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f36:	3b04      	subs	r3, #4
 8004f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f50:	d007      	beq.n	8004f62 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f56:	3304      	adds	r3, #4
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d029      	beq.n	8004fb6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004f70:	2300      	movs	r3, #0
 8004f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f74:	e019      	b.n	8004faa <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004f76:	f3bf 8f5f 	dmb	sy
}
 8004f7a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d902      	bls.n	8004f9a <ETH_Prepare_Tx_Descriptors+0x17a>
 8004f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f96:	3b04      	subs	r3, #4
 8004f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004faa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d3e1      	bcc.n	8004f76 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e072      	b.n	800509c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	4b32      	ldr	r3, [pc, #200]	@ (80050a8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe2:	6852      	ldr	r2, [r2, #4]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	3301      	adds	r3, #1
 8004fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004ff0:	f3bf 8f5f 	dmb	sy
}
 8004ff4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f47f af78 	bne.w	8004efc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d006      	beq.n	8005020 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e005      	b.n	800502c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005040:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005042:	f3bf 8f5f 	dmb	sy
}
 8005046:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005052:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005058:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800505a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505c:	3304      	adds	r3, #4
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005068:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8310 	mrs	r3, PRIMASK
 800506e:	613b      	str	r3, [r7, #16]
  return(result);
 8005070:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	2301      	movs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	4413      	add	r3, r2
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	629a      	str	r2, [r3, #40]	@ 0x28
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3744      	adds	r7, #68	@ 0x44
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	ffffe000 	.word	0xffffe000

080050ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	@ 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	e175      	b.n	80053b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050cc:	2201      	movs	r2, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	f040 8164 	bne.w	80053b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d005      	beq.n	8005102 <HAL_GPIO_Init+0x56>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d130      	bne.n	8005164 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	2203      	movs	r2, #3
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005138:	2201      	movs	r2, #1
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 0201 	and.w	r2, r3, #1
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	2b03      	cmp	r3, #3
 800516e:	d017      	beq.n	80051a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	2203      	movs	r2, #3
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d123      	bne.n	80051f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	08da      	lsrs	r2, r3, #3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3208      	adds	r2, #8
 80051b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	220f      	movs	r2, #15
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	08da      	lsrs	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3208      	adds	r2, #8
 80051ee:	69b9      	ldr	r1, [r7, #24]
 80051f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	2203      	movs	r2, #3
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0203 	and.w	r2, r3, #3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80be 	beq.w	80053b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005236:	4b66      	ldr	r3, [pc, #408]	@ (80053d0 <HAL_GPIO_Init+0x324>)
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	4a65      	ldr	r2, [pc, #404]	@ (80053d0 <HAL_GPIO_Init+0x324>)
 800523c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005240:	6453      	str	r3, [r2, #68]	@ 0x44
 8005242:	4b63      	ldr	r3, [pc, #396]	@ (80053d0 <HAL_GPIO_Init+0x324>)
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800524e:	4a61      	ldr	r2, [pc, #388]	@ (80053d4 <HAL_GPIO_Init+0x328>)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	3302      	adds	r3, #2
 8005256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	220f      	movs	r2, #15
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a58      	ldr	r2, [pc, #352]	@ (80053d8 <HAL_GPIO_Init+0x32c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d037      	beq.n	80052ea <HAL_GPIO_Init+0x23e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a57      	ldr	r2, [pc, #348]	@ (80053dc <HAL_GPIO_Init+0x330>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d031      	beq.n	80052e6 <HAL_GPIO_Init+0x23a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a56      	ldr	r2, [pc, #344]	@ (80053e0 <HAL_GPIO_Init+0x334>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d02b      	beq.n	80052e2 <HAL_GPIO_Init+0x236>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a55      	ldr	r2, [pc, #340]	@ (80053e4 <HAL_GPIO_Init+0x338>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d025      	beq.n	80052de <HAL_GPIO_Init+0x232>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a54      	ldr	r2, [pc, #336]	@ (80053e8 <HAL_GPIO_Init+0x33c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01f      	beq.n	80052da <HAL_GPIO_Init+0x22e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a53      	ldr	r2, [pc, #332]	@ (80053ec <HAL_GPIO_Init+0x340>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d019      	beq.n	80052d6 <HAL_GPIO_Init+0x22a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a52      	ldr	r2, [pc, #328]	@ (80053f0 <HAL_GPIO_Init+0x344>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_GPIO_Init+0x226>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a51      	ldr	r2, [pc, #324]	@ (80053f4 <HAL_GPIO_Init+0x348>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00d      	beq.n	80052ce <HAL_GPIO_Init+0x222>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a50      	ldr	r2, [pc, #320]	@ (80053f8 <HAL_GPIO_Init+0x34c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <HAL_GPIO_Init+0x21e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a4f      	ldr	r2, [pc, #316]	@ (80053fc <HAL_GPIO_Init+0x350>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d101      	bne.n	80052c6 <HAL_GPIO_Init+0x21a>
 80052c2:	2309      	movs	r3, #9
 80052c4:	e012      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052c6:	230a      	movs	r3, #10
 80052c8:	e010      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ca:	2308      	movs	r3, #8
 80052cc:	e00e      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ce:	2307      	movs	r3, #7
 80052d0:	e00c      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052d2:	2306      	movs	r3, #6
 80052d4:	e00a      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052d6:	2305      	movs	r3, #5
 80052d8:	e008      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052da:	2304      	movs	r3, #4
 80052dc:	e006      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052de:	2303      	movs	r3, #3
 80052e0:	e004      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e002      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ea:	2300      	movs	r3, #0
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	f002 0203 	and.w	r2, r2, #3
 80052f2:	0092      	lsls	r2, r2, #2
 80052f4:	4093      	lsls	r3, r2
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052fc:	4935      	ldr	r1, [pc, #212]	@ (80053d4 <HAL_GPIO_Init+0x328>)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	089b      	lsrs	r3, r3, #2
 8005302:	3302      	adds	r3, #2
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800530a:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <HAL_GPIO_Init+0x354>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800532e:	4a34      	ldr	r2, [pc, #208]	@ (8005400 <HAL_GPIO_Init+0x354>)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005334:	4b32      	ldr	r3, [pc, #200]	@ (8005400 <HAL_GPIO_Init+0x354>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005358:	4a29      	ldr	r2, [pc, #164]	@ (8005400 <HAL_GPIO_Init+0x354>)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800535e:	4b28      	ldr	r3, [pc, #160]	@ (8005400 <HAL_GPIO_Init+0x354>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	43db      	mvns	r3, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4013      	ands	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005382:	4a1f      	ldr	r2, [pc, #124]	@ (8005400 <HAL_GPIO_Init+0x354>)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <HAL_GPIO_Init+0x354>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053ac:	4a14      	ldr	r2, [pc, #80]	@ (8005400 <HAL_GPIO_Init+0x354>)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3301      	adds	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b0f      	cmp	r3, #15
 80053bc:	f67f ae86 	bls.w	80050cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	3724      	adds	r7, #36	@ 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40013800 	.word	0x40013800
 80053d8:	40020000 	.word	0x40020000
 80053dc:	40020400 	.word	0x40020400
 80053e0:	40020800 	.word	0x40020800
 80053e4:	40020c00 	.word	0x40020c00
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40021400 	.word	0x40021400
 80053f0:	40021800 	.word	0x40021800
 80053f4:	40021c00 	.word	0x40021c00
 80053f8:	40022000 	.word	0x40022000
 80053fc:	40022400 	.word	0x40022400
 8005400:	40013c00 	.word	0x40013c00

08005404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e08b      	b.n	800552e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fb fc96 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	@ 0x24
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e006      	b.n	800548c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800548a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d108      	bne.n	80054a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	e007      	b.n	80054b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6859      	ldr	r1, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <HAL_I2C_Init+0x134>)
 80054c2:	430b      	orrs	r3, r1
 80054c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69d9      	ldr	r1, [r3, #28]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1a      	ldr	r2, [r3, #32]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	02008000 	.word	0x02008000

0800553c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	461a      	mov	r2, r3
 8005548:	460b      	mov	r3, r1
 800554a:	817b      	strh	r3, [r7, #10]
 800554c:	4613      	mov	r3, r2
 800554e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b20      	cmp	r3, #32
 800555e:	f040 80ef 	bne.w	8005740 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005570:	d101      	bne.n	8005576 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
 8005574:	e0e5      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005580:	2302      	movs	r3, #2
 8005582:	e0de      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2221      	movs	r2, #33	@ 0x21
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2210      	movs	r2, #16
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	893a      	ldrh	r2, [r7, #8]
 80055ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a66      	ldr	r2, [pc, #408]	@ (800574c <HAL_I2C_Master_Transmit_DMA+0x210>)
 80055b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a66      	ldr	r2, [pc, #408]	@ (8005750 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80055b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2bff      	cmp	r3, #255	@ 0xff
 80055c2:	d906      	bls.n	80055d2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	22ff      	movs	r2, #255	@ 0xff
 80055c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80055ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	e007      	b.n	80055e2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055e0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01a      	beq.n	8005620 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005604:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d074      	beq.n	8005712 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	d022      	beq.n	8005676 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	4a47      	ldr	r2, [pc, #284]	@ (8005754 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005636:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	4a46      	ldr	r2, [pc, #280]	@ (8005758 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800563e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	2200      	movs	r2, #0
 8005646:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564c:	2200      	movs	r2, #0
 800564e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005660:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005666:	f7fd fee1 	bl	800342c <HAL_DMA_Start_IT>
 800566a:	4603      	mov	r3, r0
 800566c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d13a      	bne.n	80056ea <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005674:	e013      	b.n	800569e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e051      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	3301      	adds	r3, #1
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	8979      	ldrh	r1, [r7, #10]
 80056aa:	4b2c      	ldr	r3, [pc, #176]	@ (800575c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f001 ff3f 	bl	8007534 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056d0:	2110      	movs	r1, #16
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f001 ff60 	bl	8007598 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e028      	b.n	800573c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	f043 0210 	orr.w	r2, r3, #16
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e017      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a12      	ldr	r2, [pc, #72]	@ (8005760 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f001 ff04 	bl	8007534 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005734:	2101      	movs	r1, #1
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f001 ff2e 	bl	8007598 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	e000      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005740:	2302      	movs	r3, #2
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	ffff0000 	.word	0xffff0000
 8005750:	0800628b 	.word	0x0800628b
 8005754:	080072b7 	.word	0x080072b7
 8005758:	08007485 	.word	0x08007485
 800575c:	80002000 	.word	0x80002000
 8005760:	08005dff 	.word	0x08005dff

08005764 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	461a      	mov	r2, r3
 8005770:	460b      	mov	r3, r1
 8005772:	817b      	strh	r3, [r7, #10]
 8005774:	4613      	mov	r3, r2
 8005776:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b20      	cmp	r3, #32
 8005782:	f040 80cd 	bne.w	8005920 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005794:	d101      	bne.n	800579a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	e0c3      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_I2C_Master_Receive_DMA+0x44>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e0bc      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2222      	movs	r2, #34	@ 0x22
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2210      	movs	r2, #16
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	893a      	ldrh	r2, [r7, #8]
 80057d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a55      	ldr	r2, [pc, #340]	@ (800592c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a55      	ldr	r2, [pc, #340]	@ (8005930 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80057dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2bff      	cmp	r3, #255	@ 0xff
 80057e6:	d906      	bls.n	80057f6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80057ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e007      	b.n	8005806 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005800:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005804:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d070      	beq.n	80058f0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d020      	beq.n	8005858 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581a:	4a46      	ldr	r2, [pc, #280]	@ (8005934 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800581c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005822:	4a45      	ldr	r2, [pc, #276]	@ (8005938 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005824:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582a:	2200      	movs	r2, #0
 800582c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005832:	2200      	movs	r2, #0
 8005834:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3324      	adds	r3, #36	@ 0x24
 8005840:	4619      	mov	r1, r3
 8005842:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005848:	f7fd fdf0 	bl	800342c <HAL_DMA_Start_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d138      	bne.n	80058c8 <HAL_I2C_Master_Receive_DMA+0x164>
 8005856:	e013      	b.n	8005880 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e050      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005884:	b2da      	uxtb	r2, r3
 8005886:	8979      	ldrh	r1, [r7, #10]
 8005888:	4b2c      	ldr	r3, [pc, #176]	@ (800593c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f001 fe50 	bl	8007534 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80058ae:	2110      	movs	r1, #16
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f001 fe71 	bl	8007598 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e029      	b.n	800591c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058dc:	f043 0210 	orr.w	r2, r3, #16
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e018      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a13      	ldr	r2, [pc, #76]	@ (8005940 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80058f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	8979      	ldrh	r1, [r7, #10]
 80058fe:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f001 fe14 	bl	8007534 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005914:	2102      	movs	r1, #2
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 fe3e 	bl	8007598 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	ffff0000 	.word	0xffff0000
 8005930:	0800628b 	.word	0x0800628b
 8005934:	0800738d 	.word	0x0800738d
 8005938:	08007485 	.word	0x08007485
 800593c:	80002400 	.word	0x80002400
 8005940:	08005dff 	.word	0x08005dff

08005944 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b20      	cmp	r3, #32
 800595c:	f040 80d1 	bne.w	8005b02 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005972:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0c5      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005982:	2302      	movs	r3, #2
 8005984:	e0be      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	@ 0x21
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	88fa      	ldrh	r2, [r7, #6]
 80059ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a53      	ldr	r2, [pc, #332]	@ (8005b0c <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80059be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a53      	ldr	r2, [pc, #332]	@ (8005b10 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80059c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ce:	d117      	bne.n	8005a00 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d068      	beq.n	8005adc <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d022      	beq.n	8005a58 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	4a3f      	ldr	r2, [pc, #252]	@ (8005b14 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005a18:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b18 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005a20:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	2200      	movs	r2, #0
 8005a28:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	2200      	movs	r2, #0
 8005a30:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a3a:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a42:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a48:	f7fd fcf0 	bl	800342c <HAL_DMA_Start_IT>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d12e      	bne.n	8005ab4 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005a56:	e013      	b.n	8005a80 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2228      	movs	r2, #40	@ 0x28
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e041      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a8e:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f001 fd7b 	bl	8007598 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e024      	b.n	8005afe <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2228      	movs	r2, #40	@ 0x28
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac8:	f043 0210 	orr.w	r2, r3, #16
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e013      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005af4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f001 fd4d 	bl	8007598 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e000      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
  }
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	ffff0000 	.word	0xffff0000
 8005b10:	0800672d 	.word	0x0800672d
 8005b14:	0800734d 	.word	0x0800734d
 8005b18:	08007485 	.word	0x08007485

08005b1c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	f040 809b 	bne.w	8005c6e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e08f      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_I2C_Slave_Receive_DMA+0x42>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e088      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2222      	movs	r2, #34	@ 0x22
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a38      	ldr	r2, [pc, #224]	@ (8005c78 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005b96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a38      	ldr	r2, [pc, #224]	@ (8005c7c <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005b9c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d020      	beq.n	8005be8 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005baa:	4a35      	ldr	r2, [pc, #212]	@ (8005c80 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005bac:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb2:	4a34      	ldr	r2, [pc, #208]	@ (8005c84 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005bb4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bba:	2200      	movs	r2, #0
 8005bbc:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3324      	adds	r3, #36	@ 0x24
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bd8:	f7fd fc28 	bl	800342c <HAL_DMA_Start_IT>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d12f      	bne.n	8005c46 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005be6:	e013      	b.n	8005c10 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2228      	movs	r2, #40	@ 0x28
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e02f      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c1e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f001 fcb3 	bl	8007598 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c40:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e014      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2228      	movs	r2, #40	@ 0x28
 8005c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	f043 0210 	orr.w	r2, r3, #16
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
  }
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	ffff0000 	.word	0xffff0000
 8005c7c:	0800672d 	.word	0x0800672d
 8005c80:	0800743f 	.word	0x0800743f
 8005c84:	08007485 	.word	0x08007485

08005c88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68f9      	ldr	r1, [r7, #12]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d010      	beq.n	8005d02 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	09db      	lsrs	r3, r3, #7
 8005ce4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf0:	f043 0201 	orr.w	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d00:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	0a9b      	lsrs	r3, r3, #10
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d010      	beq.n	8005d30 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	09db      	lsrs	r3, r3, #7
 8005d12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	f043 0208 	orr.w	r2, r3, #8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	0a5b      	lsrs	r3, r3, #9
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	09db      	lsrs	r3, r3, #7
 8005d40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4c:	f043 0202 	orr.w	r2, r3, #2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d5c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 030b 	and.w	r3, r3, #11
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 f965 	bl	8007040 <I2C_ITError>
  }
}
 8005d76:	bf00      	nop
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b088      	sub	sp, #32
 8005e02:	af02      	add	r7, sp, #8
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <I2C_Master_ISR_IT+0x1e>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e12e      	b.n	800607a <I2C_Master_ISR_IT+0x27c>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d013      	beq.n	8005e58 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00d      	beq.n	8005e58 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2210      	movs	r2, #16
 8005e42:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e48:	f043 0204 	orr.w	r2, r3, #4
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f001 fa0c 	bl	800726e <I2C_Flush_TXDR>
 8005e56:	e0fb      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d023      	beq.n	8005eac <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01d      	beq.n	8005eac <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0304 	bic.w	r3, r3, #4
 8005e76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005eaa:	e0d1      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d12a      	bne.n	8005f0e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d024      	beq.n	8005f0e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01e      	beq.n	8005f0e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80ba 	beq.w	8006050 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005f0c:	e0a0      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	09db      	lsrs	r3, r3, #7
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d06b      	beq.n	8005ff2 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	099b      	lsrs	r3, r3, #6
 8005f1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d065      	beq.n	8005ff2 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d04e      	beq.n	8005fce <I2C_Master_ISR_IT+0x1d0>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d14a      	bne.n	8005fce <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f44:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2bff      	cmp	r3, #255	@ 0xff
 8005f4e:	d91c      	bls.n	8005f8a <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d103      	bne.n	8005f6c <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f6a:	e002      	b.n	8005f72 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	22ff      	movs	r2, #255	@ 0xff
 8005f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	8a79      	ldrh	r1, [r7, #18]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f001 fad6 	bl	8007534 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f88:	e032      	b.n	8005ff0 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f9c:	d00b      	beq.n	8005fb6 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa2:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fa8:	8a79      	ldrh	r1, [r7, #18]
 8005faa:	2000      	movs	r0, #0
 8005fac:	9000      	str	r0, [sp, #0]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f001 fac0 	bl	8007534 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb4:	e01c      	b.n	8005ff0 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	8a79      	ldrh	r1, [r7, #18]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f001 fab4 	bl	8007534 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fcc:	e010      	b.n	8005ff0 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fdc:	d003      	beq.n	8005fe6 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fd09 	bl	80069f6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fe4:	e034      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fe6:	2140      	movs	r1, #64	@ 0x40
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f001 f829 	bl	8007040 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fee:	e02f      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
 8005ff0:	e02e      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	099b      	lsrs	r3, r3, #6
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d028      	beq.n	8006050 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	099b      	lsrs	r3, r3, #6
 8006002:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006006:	2b00      	cmp	r3, #0
 8006008:	d022      	beq.n	8006050 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d119      	bne.n	8006048 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006022:	d015      	beq.n	8006050 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800602c:	d108      	bne.n	8006040 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	e007      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fcd8 	bl	80069f6 <I2C_ITMasterSeqCplt>
 8006046:	e003      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006048:	2140      	movs	r1, #64	@ 0x40
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fff8 	bl	8007040 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006068:	6979      	ldr	r1, [r7, #20]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 fd5e 	bl	8006b2c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <I2C_Slave_ISR_IT+0x24>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0ed      	b.n	8006282 <I2C_Slave_ISR_IT+0x200>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80060c6:	6939      	ldr	r1, [r7, #16]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fdf9 	bl	8006cc0 <I2C_ITSlaveCplt>
 80060ce:	e0d3      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d04d      	beq.n	8006178 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d047      	beq.n	8006178 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d128      	bne.n	8006144 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b28      	cmp	r3, #40	@ 0x28
 80060fc:	d108      	bne.n	8006110 <I2C_Slave_ISR_IT+0x8e>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006104:	d104      	bne.n	8006110 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006106:	6939      	ldr	r1, [r7, #16]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 ff43 	bl	8006f94 <I2C_ITListenCplt>
 800610e:	e032      	b.n	8006176 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b29      	cmp	r3, #41	@ 0x29
 800611a:	d10e      	bne.n	800613a <I2C_Slave_ISR_IT+0xb8>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006122:	d00a      	beq.n	800613a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2210      	movs	r2, #16
 800612a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f001 f89e 	bl	800726e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fc9c 	bl	8006a70 <I2C_ITSlaveSeqCplt>
 8006138:	e01d      	b.n	8006176 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2210      	movs	r2, #16
 8006140:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006142:	e096      	b.n	8006272 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2210      	movs	r2, #16
 800614a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006150:	f043 0204 	orr.w	r2, r3, #4
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <I2C_Slave_ISR_IT+0xe6>
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006164:	f040 8085 	bne.w	8006272 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616c:	4619      	mov	r1, r3
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 ff66 	bl	8007040 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006174:	e07d      	b.n	8006272 <I2C_Slave_ISR_IT+0x1f0>
 8006176:	e07c      	b.n	8006272 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d030      	beq.n	80061e6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800618c:	2b00      	cmp	r3, #0
 800618e:	d02a      	beq.n	80061e6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d14f      	bne.n	8006276 <I2C_Slave_ISR_IT+0x1f4>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061dc:	d04b      	beq.n	8006276 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fc46 	bl	8006a70 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80061e4:	e047      	b.n	8006276 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	08db      	lsrs	r3, r3, #3
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	08db      	lsrs	r3, r3, #3
 80061f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80061fe:	6939      	ldr	r1, [r7, #16]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fb74 	bl	80068ee <I2C_ITAddrCplt>
 8006206:	e037      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d031      	beq.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02b      	beq.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	851a      	strh	r2, [r3, #40]	@ 0x28
 800625a:	e00d      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006262:	d002      	beq.n	800626a <I2C_Slave_ISR_IT+0x1e8>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fc00 	bl	8006a70 <I2C_ITSlaveSeqCplt>
 8006270:	e002      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006276:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b088      	sub	sp, #32
 800628e:	af02      	add	r7, sp, #8
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <I2C_Master_ISR_DMA+0x1a>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e0f0      	b.n	8006486 <I2C_Master_ISR_DMA+0x1fc>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	091b      	lsrs	r3, r3, #4
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d017      	beq.n	80062e8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2210      	movs	r2, #16
 80062ca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d0:	f043 0204 	orr.w	r2, r3, #4
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062d8:	2120      	movs	r1, #32
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f001 f95c 	bl	8007598 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 ffc4 	bl	800726e <I2C_Flush_TXDR>
 80062e6:	e0c9      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	09db      	lsrs	r3, r3, #7
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8081 	beq.w	80063f8 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	099b      	lsrs	r3, r3, #6
 80062fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d07a      	beq.n	80063f8 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006310:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05c      	beq.n	80063d6 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006328:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	2bff      	cmp	r3, #255	@ 0xff
 8006332:	d914      	bls.n	800635e <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	0c1b      	lsrs	r3, r3, #16
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d103      	bne.n	8006350 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800634e:	e002      	b.n	8006356 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	22ff      	movs	r2, #255	@ 0xff
 8006354:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8006356:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e010      	b.n	8006380 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006370:	d003      	beq.n	800637a <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e002      	b.n	8006380 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800637a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800637e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006384:	b2da      	uxtb	r2, r3
 8006386:	8a79      	ldrh	r1, [r7, #18]
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 f8d0 	bl	8007534 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b22      	cmp	r3, #34	@ 0x22
 80063b0:	d108      	bne.n	80063c4 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063c2:	e05b      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063d2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063d4:	e052      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063e4:	d003      	beq.n	80063ee <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fb05 	bl	80069f6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80063ec:	e046      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063ee:	2140      	movs	r1, #64	@ 0x40
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fe25 	bl	8007040 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80063f6:	e041      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	099b      	lsrs	r3, r3, #6
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d029      	beq.n	8006458 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800640c:	2b00      	cmp	r3, #0
 800640e:	d023      	beq.n	8006458 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d119      	bne.n	800644e <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006428:	d027      	beq.n	800647a <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006432:	d108      	bne.n	8006446 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006442:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006444:	e019      	b.n	800647a <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fad5 	bl	80069f6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800644c:	e015      	b.n	800647a <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800644e:	2140      	movs	r1, #64	@ 0x40
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fdf5 	bl	8007040 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006456:	e010      	b.n	800647a <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fb5a 	bl	8006b2c <I2C_ITMasterCplt>
 8006478:	e000      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800647a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800649c:	4b94      	ldr	r3, [pc, #592]	@ (80066f0 <I2C_Mem_ISR_DMA+0x260>)
 800649e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <I2C_Mem_ISR_DMA+0x1e>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e139      	b.n	8006722 <I2C_Mem_ISR_DMA+0x292>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	091b      	lsrs	r3, r3, #4
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d011      	beq.n	80064f2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2210      	movs	r2, #16
 80064d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064da:	f043 0204 	orr.w	r2, r3, #4
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064e2:	2120      	movs	r1, #32
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 f857 	bl	8007598 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 febf 	bl	800726e <I2C_Flush_TXDR>
 80064f0:	e112      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00f      	beq.n	800651e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006512:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800651a:	651a      	str	r2, [r3, #80]	@ 0x50
 800651c:	e0fc      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	09db      	lsrs	r3, r3, #7
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06e      	beq.n	8006608 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	099b      	lsrs	r3, r3, #6
 800652e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006532:	2b00      	cmp	r3, #0
 8006534:	d068      	beq.n	8006608 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006536:	2101      	movs	r1, #1
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f001 f8b1 	bl	80076a0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800653e:	2110      	movs	r1, #16
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f001 f829 	bl	8007598 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d056      	beq.n	80065fe <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2bff      	cmp	r3, #255	@ 0xff
 8006558:	d91e      	bls.n	8006598 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	b2db      	uxtb	r3, r3
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b01      	cmp	r3, #1
 800656c:	d103      	bne.n	8006576 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006574:	e002      	b.n	800657c <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	22ff      	movs	r2, #255	@ 0xff
 800657a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006580:	b299      	uxth	r1, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006586:	b2da      	uxtb	r2, r3
 8006588:	2300      	movs	r3, #0
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 ffcf 	bl	8007534 <I2C_TransferConfig>
 8006596:	e011      	b.n	80065bc <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a6:	b299      	uxth	r1, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 ffbc 	bl	8007534 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b22      	cmp	r3, #34	@ 0x22
 80065d8:	d108      	bne.n	80065ec <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065ea:	e095      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065fc:	e08c      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065fe:	2140      	movs	r1, #64	@ 0x40
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fd1d 	bl	8007040 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006606:	e087      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	099b      	lsrs	r3, r3, #6
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d071      	beq.n	80066f8 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800661c:	2b00      	cmp	r3, #0
 800661e:	d06b      	beq.n	80066f8 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006620:	2101      	movs	r1, #1
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f001 f83c 	bl	80076a0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006628:	2110      	movs	r1, #16
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 ffb4 	bl	8007598 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b22      	cmp	r3, #34	@ 0x22
 800663a:	d101      	bne.n	8006640 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 800663c:	4b2d      	ldr	r3, [pc, #180]	@ (80066f4 <I2C_Mem_ISR_DMA+0x264>)
 800663e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	2bff      	cmp	r3, #255	@ 0xff
 8006648:	d91e      	bls.n	8006688 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d103      	bne.n	8006666 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006664:	e002      	b.n	800666c <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	22ff      	movs	r2, #255	@ 0xff
 800666a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006670:	b299      	uxth	r1, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006676:	b2da      	uxtb	r2, r3
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 ff57 	bl	8007534 <I2C_TransferConfig>
 8006686:	e011      	b.n	80066ac <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006696:	b299      	uxth	r1, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669c:	b2da      	uxtb	r2, r3
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 ff44 	bl	8007534 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b22      	cmp	r3, #34	@ 0x22
 80066c8:	d108      	bne.n	80066dc <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066d8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066da:	e01d      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ec:	e014      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
 80066ee:	bf00      	nop
 80066f0:	80002000 	.word	0x80002000
 80066f4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fa0a 	bl	8006b2c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop

0800672c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <I2C_Slave_ISR_DMA+0x24>
 800674c:	2302      	movs	r3, #2
 800674e:	e0ca      	b.n	80068e6 <I2C_Slave_ISR_DMA+0x1ba>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 faa4 	bl	8006cc0 <I2C_ITSlaveCplt>
 8006778:	e0b0      	b.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	091b      	lsrs	r3, r3, #4
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 809a 	beq.w	80068bc <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8093 	beq.w	80068bc <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	0b9b      	lsrs	r3, r3, #14
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d105      	bne.n	80067ae <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	0bdb      	lsrs	r3, r3, #15
 80067a6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d07f      	beq.n	80068ae <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00d      	beq.n	80067d2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	0bdb      	lsrs	r3, r3, #15
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80067ce:	2301      	movs	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00d      	beq.n	80067f6 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0b9b      	lsrs	r3, r3, #14
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80067f2:	2301      	movs	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d128      	bne.n	800684e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b28      	cmp	r3, #40	@ 0x28
 8006806:	d108      	bne.n	800681a <I2C_Slave_ISR_DMA+0xee>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800680e:	d104      	bne.n	800681a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fbbe 	bl	8006f94 <I2C_ITListenCplt>
 8006818:	e048      	b.n	80068ac <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b29      	cmp	r3, #41	@ 0x29
 8006824:	d10e      	bne.n	8006844 <I2C_Slave_ISR_DMA+0x118>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800682c:	d00a      	beq.n	8006844 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2210      	movs	r2, #16
 8006834:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 fd19 	bl	800726e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f917 	bl	8006a70 <I2C_ITSlaveSeqCplt>
 8006842:	e033      	b.n	80068ac <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2210      	movs	r2, #16
 800684a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800684c:	e034      	b.n	80068b8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2210      	movs	r2, #16
 8006854:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685a:	f043 0204 	orr.w	r2, r3, #4
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006868:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <I2C_Slave_ISR_DMA+0x14c>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006876:	d11f      	bne.n	80068b8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b21      	cmp	r3, #33	@ 0x21
 800687c:	d002      	beq.n	8006884 <I2C_Slave_ISR_DMA+0x158>
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	2b29      	cmp	r3, #41	@ 0x29
 8006882:	d103      	bne.n	800688c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2221      	movs	r2, #33	@ 0x21
 8006888:	631a      	str	r2, [r3, #48]	@ 0x30
 800688a:	e008      	b.n	800689e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b22      	cmp	r3, #34	@ 0x22
 8006890:	d002      	beq.n	8006898 <I2C_Slave_ISR_DMA+0x16c>
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b2a      	cmp	r3, #42	@ 0x2a
 8006896:	d102      	bne.n	800689e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2222      	movs	r2, #34	@ 0x22
 800689c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a2:	4619      	mov	r1, r3
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fbcb 	bl	8007040 <I2C_ITError>
      if (treatdmanack == 1U)
 80068aa:	e005      	b.n	80068b8 <I2C_Slave_ISR_DMA+0x18c>
 80068ac:	e004      	b.n	80068b8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2210      	movs	r2, #16
 80068b4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068b6:	e011      	b.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80068b8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068ba:	e00f      	b.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	08db      	lsrs	r3, r3, #3
 80068cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f809 	bl	80068ee <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006904:	2b28      	cmp	r3, #40	@ 0x28
 8006906:	d16a      	bne.n	80069de <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	b29b      	uxth	r3, r3
 8006922:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006926:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006934:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006942:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d138      	bne.n	80069be <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800694c:	897b      	ldrh	r3, [r7, #10]
 800694e:	09db      	lsrs	r3, r3, #7
 8006950:	b29a      	uxth	r2, r3
 8006952:	89bb      	ldrh	r3, [r7, #12]
 8006954:	4053      	eors	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	f003 0306 	and.w	r3, r3, #6
 800695c:	2b00      	cmp	r3, #0
 800695e:	d11c      	bne.n	800699a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006960:	897b      	ldrh	r3, [r7, #10]
 8006962:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006972:	2b02      	cmp	r3, #2
 8006974:	d13b      	bne.n	80069ee <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2208      	movs	r2, #8
 8006982:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800698c:	89ba      	ldrh	r2, [r7, #12]
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff f9f3 	bl	8005d7e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006998:	e029      	b.n	80069ee <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800699a:	893b      	ldrh	r3, [r7, #8]
 800699c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800699e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fe7c 	bl	80076a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069b0:	89ba      	ldrh	r2, [r7, #12]
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff f9e1 	bl	8005d7e <HAL_I2C_AddrCallback>
}
 80069bc:	e017      	b.n	80069ee <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80069be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fe6c 	bl	80076a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069d0:	89ba      	ldrh	r2, [r7, #12]
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff f9d1 	bl	8005d7e <HAL_I2C_AddrCallback>
}
 80069dc:	e007      	b.n	80069ee <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b21      	cmp	r3, #33	@ 0x21
 8006a10:	d115      	bne.n	8006a3e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2211      	movs	r2, #17
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a26:	2101      	movs	r1, #1
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fe39 	bl	80076a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f018 fb3e 	bl	801f0b8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a3c:	e014      	b.n	8006a68 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2212      	movs	r2, #18
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a52:	2102      	movs	r1, #2
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fe23 	bl	80076a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f018 fb3e 	bl	801f0e4 <HAL_I2C_MasterRxCpltCallback>
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	0b9b      	lsrs	r3, r3, #14
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e00d      	b.n	8006ac2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	0bdb      	lsrs	r3, r3, #15
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ac0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b29      	cmp	r3, #41	@ 0x29
 8006acc:	d112      	bne.n	8006af4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2228      	movs	r2, #40	@ 0x28
 8006ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2221      	movs	r2, #33	@ 0x21
 8006ada:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006adc:	2101      	movs	r1, #1
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fdde 	bl	80076a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f018 fb0f 	bl	801f110 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006af2:	e017      	b.n	8006b24 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006afe:	d111      	bne.n	8006b24 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2228      	movs	r2, #40	@ 0x28
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2222      	movs	r2, #34	@ 0x22
 8006b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b0e:	2102      	movs	r1, #2
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fdc5 	bl	80076a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f018 fb0c 	bl	801f13c <HAL_I2C_SlaveRxCpltCallback>
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b21      	cmp	r3, #33	@ 0x21
 8006b4c:	d107      	bne.n	8006b5e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b4e:	2101      	movs	r1, #1
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fda5 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2211      	movs	r2, #17
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b5c:	e00c      	b.n	8006b78 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b22      	cmp	r3, #34	@ 0x22
 8006b68:	d106      	bne.n	8006b78 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b6a:	2102      	movs	r1, #2
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fd97 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2212      	movs	r2, #18
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6859      	ldr	r1, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b4d      	ldr	r3, [pc, #308]	@ (8006cb8 <I2C_ITMasterCplt+0x18c>)
 8006b84:	400b      	ands	r3, r1
 8006b86:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a4a      	ldr	r2, [pc, #296]	@ (8006cbc <I2C_ITMasterCplt+0x190>)
 8006b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bac:	f043 0204 	orr.w	r2, r3, #4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b60      	cmp	r3, #96	@ 0x60
 8006bbe:	d10b      	bne.n	8006bd8 <I2C_ITMasterCplt+0xac>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	089b      	lsrs	r3, r3, #2
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fb48 	bl	800726e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b60      	cmp	r3, #96	@ 0x60
 8006bee:	d002      	beq.n	8006bf6 <I2C_ITMasterCplt+0xca>
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d006      	beq.n	8006c04 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa1f 	bl	8007040 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c02:	e054      	b.n	8006cae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b21      	cmp	r3, #33	@ 0x21
 8006c0e:	d124      	bne.n	8006c5a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d10b      	bne.n	8006c42 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff f8b7 	bl	8005dae <HAL_I2C_MemTxCpltCallback>
}
 8006c40:	e035      	b.n	8006cae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f018 fa30 	bl	801f0b8 <HAL_I2C_MasterTxCpltCallback>
}
 8006c58:	e029      	b.n	8006cae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b22      	cmp	r3, #34	@ 0x22
 8006c64:	d123      	bne.n	8006cae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b40      	cmp	r3, #64	@ 0x40
 8006c7e:	d10b      	bne.n	8006c98 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f896 	bl	8005dc2 <HAL_I2C_MemRxCpltCallback>
}
 8006c96:	e00a      	b.n	8006cae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f018 fa1b 	bl	801f0e4 <HAL_I2C_MasterRxCpltCallback>
}
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	fe00e800 	.word	0xfe00e800
 8006cbc:	ffff0000 	.word	0xffff0000

08006cc0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cda:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	2b21      	cmp	r3, #33	@ 0x21
 8006cf0:	d002      	beq.n	8006cf8 <I2C_ITSlaveCplt+0x38>
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	2b29      	cmp	r3, #41	@ 0x29
 8006cf6:	d108      	bne.n	8006d0a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006cf8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fccf 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2221      	movs	r2, #33	@ 0x21
 8006d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d08:	e019      	b.n	8006d3e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	2b22      	cmp	r3, #34	@ 0x22
 8006d0e:	d002      	beq.n	8006d16 <I2C_ITSlaveCplt+0x56>
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d14:	d108      	bne.n	8006d28 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d16:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fcc0 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2222      	movs	r2, #34	@ 0x22
 8006d24:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d26:	e00a      	b.n	8006d3e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	2b28      	cmp	r3, #40	@ 0x28
 8006d2c:	d107      	bne.n	8006d3e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006d2e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fcb4 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d4c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6859      	ldr	r1, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4b8c      	ldr	r3, [pc, #560]	@ (8006f8c <I2C_ITSlaveCplt+0x2cc>)
 8006d5a:	400b      	ands	r3, r1
 8006d5c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa85 	bl	800726e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	0b9b      	lsrs	r3, r3, #14
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d013      	beq.n	8006d98 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d020      	beq.n	8006dca <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d96:	e018      	b.n	8006dca <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	0bdb      	lsrs	r3, r3, #15
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d012      	beq.n	8006dca <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006db2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d006      	beq.n	8006dca <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	089b      	lsrs	r3, r3, #2
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d020      	beq.n	8006e18 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 0304 	bic.w	r3, r3, #4
 8006ddc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e26:	f043 0204 	orr.w	r2, r3, #4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	091b      	lsrs	r3, r3, #4
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04a      	beq.n	8006ed0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d044      	beq.n	8006ed0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d128      	bne.n	8006ea2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b28      	cmp	r3, #40	@ 0x28
 8006e5a:	d108      	bne.n	8006e6e <I2C_ITSlaveCplt+0x1ae>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e62:	d104      	bne.n	8006e6e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e64:	6979      	ldr	r1, [r7, #20]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f894 	bl	8006f94 <I2C_ITListenCplt>
 8006e6c:	e030      	b.n	8006ed0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b29      	cmp	r3, #41	@ 0x29
 8006e78:	d10e      	bne.n	8006e98 <I2C_ITSlaveCplt+0x1d8>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e80:	d00a      	beq.n	8006e98 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2210      	movs	r2, #16
 8006e88:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f9ef 	bl	800726e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fded 	bl	8006a70 <I2C_ITSlaveSeqCplt>
 8006e96:	e01b      	b.n	8006ed0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	61da      	str	r2, [r3, #28]
 8006ea0:	e016      	b.n	8006ed0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2210      	movs	r2, #16
 8006ea8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eae:	f043 0204 	orr.w	r2, r3, #4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <I2C_ITSlaveCplt+0x204>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ec2:	d105      	bne.n	8006ed0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8b8 	bl	8007040 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8a7 	bl	8007040 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b28      	cmp	r3, #40	@ 0x28
 8006efc:	d141      	bne.n	8006f82 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006efe:	6979      	ldr	r1, [r7, #20]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f847 	bl	8006f94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f06:	e03c      	b.n	8006f82 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f10:	d014      	beq.n	8006f3c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fdac 	bl	8006a70 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006f90 <I2C_ITSlaveCplt+0x2d0>)
 8006f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fe ff30 	bl	8005d9a <HAL_I2C_ListenCpltCallback>
}
 8006f3a:	e022      	b.n	8006f82 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b22      	cmp	r3, #34	@ 0x22
 8006f46:	d10e      	bne.n	8006f66 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f018 f8ec 	bl	801f13c <HAL_I2C_SlaveRxCpltCallback>
}
 8006f64:	e00d      	b.n	8006f82 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f018 f8c7 	bl	801f110 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f82:	bf00      	nop
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	fe00e800 	.word	0xfe00e800
 8006f90:	ffff0000 	.word	0xffff0000

08006f94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a26      	ldr	r2, [pc, #152]	@ (800703c <I2C_ITListenCplt+0xa8>)
 8006fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d022      	beq.n	8007012 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d012      	beq.n	8007012 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700a:	f043 0204 	orr.w	r2, r3, #4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007012:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fb42 	bl	80076a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2210      	movs	r2, #16
 8007022:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fe feb4 	bl	8005d9a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	ffff0000 	.word	0xffff0000

08007040 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007050:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a6d      	ldr	r2, [pc, #436]	@ (8007214 <I2C_ITError+0x1d4>)
 800705e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b28      	cmp	r3, #40	@ 0x28
 8007076:	d005      	beq.n	8007084 <I2C_ITError+0x44>
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	2b29      	cmp	r3, #41	@ 0x29
 800707c:	d002      	beq.n	8007084 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b2a      	cmp	r3, #42	@ 0x2a
 8007082:	d10b      	bne.n	800709c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007084:	2103      	movs	r1, #3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fb0a 	bl	80076a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2228      	movs	r2, #40	@ 0x28
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a60      	ldr	r2, [pc, #384]	@ (8007218 <I2C_ITError+0x1d8>)
 8007098:	635a      	str	r2, [r3, #52]	@ 0x34
 800709a:	e030      	b.n	80070fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800709c:	f248 0103 	movw	r1, #32771	@ 0x8003
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fafd 	bl	80076a0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f8e1 	bl	800726e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b60      	cmp	r3, #96	@ 0x60
 80070b6:	d01f      	beq.n	80070f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d114      	bne.n	80070f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d109      	bne.n	80070f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2210      	movs	r2, #16
 80070e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e8:	f043 0204 	orr.w	r2, r3, #4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2220      	movs	r2, #32
 80070f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007102:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007108:	2b00      	cmp	r3, #0
 800710a:	d039      	beq.n	8007180 <I2C_ITError+0x140>
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b11      	cmp	r3, #17
 8007110:	d002      	beq.n	8007118 <I2C_ITError+0xd8>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b21      	cmp	r3, #33	@ 0x21
 8007116:	d133      	bne.n	8007180 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007126:	d107      	bne.n	8007138 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007136:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713c:	4618      	mov	r0, r3
 800713e:	f7fc fc45 	bl	80039cc <HAL_DMA_GetState>
 8007142:	4603      	mov	r3, r0
 8007144:	2b01      	cmp	r3, #1
 8007146:	d017      	beq.n	8007178 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714c:	4a33      	ldr	r2, [pc, #204]	@ (800721c <I2C_ITError+0x1dc>)
 800714e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	4618      	mov	r0, r3
 800715e:	f7fc fa35 	bl	80035cc <HAL_DMA_Abort_IT>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d04d      	beq.n	8007204 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007172:	4610      	mov	r0, r2
 8007174:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007176:	e045      	b.n	8007204 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f851 	bl	8007220 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800717e:	e041      	b.n	8007204 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d039      	beq.n	80071fc <I2C_ITError+0x1bc>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b12      	cmp	r3, #18
 800718c:	d002      	beq.n	8007194 <I2C_ITError+0x154>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b22      	cmp	r3, #34	@ 0x22
 8007192:	d133      	bne.n	80071fc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800719e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071a2:	d107      	bne.n	80071b4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fc fc07 	bl	80039cc <HAL_DMA_GetState>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d017      	beq.n	80071f4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c8:	4a14      	ldr	r2, [pc, #80]	@ (800721c <I2C_ITError+0x1dc>)
 80071ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fc f9f7 	bl	80035cc <HAL_DMA_Abort_IT>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d011      	beq.n	8007208 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071ee:	4610      	mov	r0, r2
 80071f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071f2:	e009      	b.n	8007208 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f813 	bl	8007220 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071fa:	e005      	b.n	8007208 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f80f 	bl	8007220 <I2C_TreatErrorCallback>
  }
}
 8007202:	e002      	b.n	800720a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007204:	bf00      	nop
 8007206:	e000      	b.n	800720a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007208:	bf00      	nop
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	ffff0000 	.word	0xffff0000
 8007218:	08006083 	.word	0x08006083
 800721c:	080074f9 	.word	0x080074f9

08007220 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b60      	cmp	r3, #96	@ 0x60
 8007232:	d10e      	bne.n	8007252 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fe fdcd 	bl	8005dea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007250:	e009      	b.n	8007266 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fe fdb8 	bl	8005dd6 <HAL_I2C_ErrorCallback>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b02      	cmp	r3, #2
 8007282:	d103      	bne.n	800728c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2200      	movs	r2, #0
 800728a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b01      	cmp	r3, #1
 8007298:	d007      	beq.n	80072aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699a      	ldr	r2, [r3, #24]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	619a      	str	r2, [r3, #24]
  }
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072d2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80072de:	2120      	movs	r1, #32
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f959 	bl	8007598 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80072e6:	e02d      	b.n	8007344 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80072f0:	441a      	add	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2bff      	cmp	r3, #255	@ 0xff
 80072fe:	d903      	bls.n	8007308 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	22ff      	movs	r2, #255	@ 0xff
 8007304:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007306:	e004      	b.n	8007312 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	4619      	mov	r1, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3328      	adds	r3, #40	@ 0x28
 8007322:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007328:	f7fc f880 	bl	800342c <HAL_DMA_Start_IT>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007332:	2110      	movs	r1, #16
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff fe83 	bl	8007040 <I2C_ITError>
}
 800733a:	e003      	b.n	8007344 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800733c:	2140      	movs	r1, #64	@ 0x40
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f92a 	bl	8007598 <I2C_Enable_IRQ>
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007366:	d002      	beq.n	800736e <I2C_DMASlaveTransmitCplt+0x22>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800737c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7ff fb76 	bl	8006a70 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007398:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073a8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80073b4:	2120      	movs	r1, #32
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f8ee 	bl	8007598 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80073bc:	e03b      	b.n	8007436 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80073c6:	441a      	add	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2bff      	cmp	r3, #255	@ 0xff
 80073d4:	d911      	bls.n	80073fa <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	0c1b      	lsrs	r3, r3, #16
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d103      	bne.n	80073f2 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073f0:	e008      	b.n	8007404 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	22ff      	movs	r2, #255	@ 0xff
 80073f6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073f8:	e004      	b.n	8007404 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3324      	adds	r3, #36	@ 0x24
 800740e:	4619      	mov	r1, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007414:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800741a:	f7fc f807 	bl	800342c <HAL_DMA_Start_IT>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007424:	2110      	movs	r1, #16
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fe0a 	bl	8007040 <I2C_ITError>
}
 800742c:	e003      	b.n	8007436 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800742e:	2140      	movs	r1, #64	@ 0x40
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f8b1 	bl	8007598 <I2C_Enable_IRQ>
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007450:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10e      	bne.n	800747c <I2C_DMASlaveReceiveCplt+0x3e>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007464:	d00a      	beq.n	800747c <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007474:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff fafa 	bl	8006a70 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007494:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80074aa:	2301      	movs	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80074c2:	2301      	movs	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fc fa8e 	bl	80039e8 <HAL_DMA_GetError>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d00e      	beq.n	80074f0 <I2C_DMAError+0x6c>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074e6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074e8:	2110      	movs	r1, #16
 80074ea:	68b8      	ldr	r0, [r7, #8]
 80074ec:	f7ff fda8 	bl	8007040 <I2C_ITError>
  }
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007512:	2200      	movs	r2, #0
 8007514:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007522:	2200      	movs	r2, #0
 8007524:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f7ff fe7a 	bl	8007220 <I2C_TreatErrorCallback>
}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	817b      	strh	r3, [r7, #10]
 8007542:	4613      	mov	r3, r2
 8007544:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007546:	897b      	ldrh	r3, [r7, #10]
 8007548:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800754c:	7a7b      	ldrb	r3, [r7, #9]
 800754e:	041b      	lsls	r3, r3, #16
 8007550:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007554:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	4313      	orrs	r3, r2
 800755e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007562:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	0d5b      	lsrs	r3, r3, #21
 800756e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007572:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <I2C_TransferConfig+0x60>)
 8007574:	430b      	orrs	r3, r1
 8007576:	43db      	mvns	r3, r3
 8007578:	ea02 0103 	and.w	r1, r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	03ff63ff 	.word	0x03ff63ff

08007598 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ac:	4a39      	ldr	r2, [pc, #228]	@ (8007694 <I2C_Enable_IRQ+0xfc>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d032      	beq.n	8007618 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80075b6:	4a38      	ldr	r2, [pc, #224]	@ (8007698 <I2C_Enable_IRQ+0x100>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d02d      	beq.n	8007618 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80075c0:	4a36      	ldr	r2, [pc, #216]	@ (800769c <I2C_Enable_IRQ+0x104>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d028      	beq.n	8007618 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da03      	bge.n	80075d6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075d6:	887b      	ldrh	r3, [r7, #2]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075e8:	887b      	ldrh	r3, [r7, #2]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075fa:	887b      	ldrh	r3, [r7, #2]
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d103      	bne.n	8007608 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007606:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007608:	887b      	ldrh	r3, [r7, #2]
 800760a:	2b20      	cmp	r3, #32
 800760c:	d133      	bne.n	8007676 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f043 0320 	orr.w	r3, r3, #32
 8007614:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007616:	e02e      	b.n	8007676 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800761c:	2b00      	cmp	r3, #0
 800761e:	da03      	bge.n	8007628 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007626:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007628:	887b      	ldrh	r3, [r7, #2]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007638:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800763a:	887b      	ldrh	r3, [r7, #2]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800764a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	2b10      	cmp	r3, #16
 8007650:	d103      	bne.n	800765a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007658:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800765a:	887b      	ldrh	r3, [r7, #2]
 800765c:	2b20      	cmp	r3, #32
 800765e:	d103      	bne.n	8007668 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007666:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007668:	887b      	ldrh	r3, [r7, #2]
 800766a:	2b40      	cmp	r3, #64	@ 0x40
 800766c:	d103      	bne.n	8007676 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007674:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6819      	ldr	r1, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	430a      	orrs	r2, r1
 8007684:	601a      	str	r2, [r3, #0]
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	0800628b 	.word	0x0800628b
 8007698:	0800672d 	.word	0x0800672d
 800769c:	08006491 	.word	0x08006491

080076a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076b0:	887b      	ldrh	r3, [r7, #2]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00f      	beq.n	80076da <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80076c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076ce:	2b28      	cmp	r3, #40	@ 0x28
 80076d0:	d003      	beq.n	80076da <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00f      	beq.n	8007704 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80076ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076f8:	2b28      	cmp	r3, #40	@ 0x28
 80076fa:	d003      	beq.n	8007704 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007702:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	da03      	bge.n	8007714 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007712:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007714:	887b      	ldrh	r3, [r7, #2]
 8007716:	2b10      	cmp	r3, #16
 8007718:	d103      	bne.n	8007722 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007720:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007722:	887b      	ldrh	r3, [r7, #2]
 8007724:	2b20      	cmp	r3, #32
 8007726:	d103      	bne.n	8007730 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f043 0320 	orr.w	r3, r3, #32
 800772e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007730:	887b      	ldrh	r3, [r7, #2]
 8007732:	2b40      	cmp	r3, #64	@ 0x40
 8007734:	d103      	bne.n	800773e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800773c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	43da      	mvns	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	400a      	ands	r2, r1
 800774e:	601a      	str	r2, [r3, #0]
}
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b20      	cmp	r3, #32
 8007770:	d138      	bne.n	80077e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800777c:	2302      	movs	r3, #2
 800777e:	e032      	b.n	80077e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2224      	movs	r2, #36	@ 0x24
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0201 	bic.w	r2, r2, #1
 800779e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	e000      	b.n	80077e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077e4:	2302      	movs	r3, #2
  }
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b20      	cmp	r3, #32
 8007806:	d139      	bne.n	800787c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007812:	2302      	movs	r3, #2
 8007814:	e033      	b.n	800787e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2224      	movs	r2, #36	@ 0x24
 8007822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0201 	bic.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007844:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	e000      	b.n	800787e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800787c:	2302      	movs	r3, #2
  }
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007896:	4b23      	ldr	r3, [pc, #140]	@ (8007924 <HAL_PWREx_EnableOverDrive+0x98>)
 8007898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789a:	4a22      	ldr	r2, [pc, #136]	@ (8007924 <HAL_PWREx_EnableOverDrive+0x98>)
 800789c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80078a2:	4b20      	ldr	r3, [pc, #128]	@ (8007924 <HAL_PWREx_EnableOverDrive+0x98>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80078ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078ba:	f7fa fd67 	bl	800238c <HAL_GetTick>
 80078be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078c0:	e009      	b.n	80078d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078c2:	f7fa fd63 	bl	800238c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078d0:	d901      	bls.n	80078d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e022      	b.n	800791c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078d6:	4b14      	ldr	r3, [pc, #80]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e2:	d1ee      	bne.n	80078c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078e4:	4b10      	ldr	r3, [pc, #64]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a0f      	ldr	r2, [pc, #60]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f0:	f7fa fd4c 	bl	800238c <HAL_GetTick>
 80078f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078f6:	e009      	b.n	800790c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078f8:	f7fa fd48 	bl	800238c <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007906:	d901      	bls.n	800790c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e007      	b.n	800791c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800790c:	4b06      	ldr	r3, [pc, #24]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007918:	d1ee      	bne.n	80078f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40023800 	.word	0x40023800
 8007928:	40007000 	.word	0x40007000

0800792c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007934:	2300      	movs	r3, #0
 8007936:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e291      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8087 	beq.w	8007a5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007950:	4b96      	ldr	r3, [pc, #600]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 030c 	and.w	r3, r3, #12
 8007958:	2b04      	cmp	r3, #4
 800795a:	d00c      	beq.n	8007976 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800795c:	4b93      	ldr	r3, [pc, #588]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 030c 	and.w	r3, r3, #12
 8007964:	2b08      	cmp	r3, #8
 8007966:	d112      	bne.n	800798e <HAL_RCC_OscConfig+0x62>
 8007968:	4b90      	ldr	r3, [pc, #576]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007974:	d10b      	bne.n	800798e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007976:	4b8d      	ldr	r3, [pc, #564]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d06c      	beq.n	8007a5c <HAL_RCC_OscConfig+0x130>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d168      	bne.n	8007a5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e26b      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007996:	d106      	bne.n	80079a6 <HAL_RCC_OscConfig+0x7a>
 8007998:	4b84      	ldr	r3, [pc, #528]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a83      	ldr	r2, [pc, #524]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 800799e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	e02e      	b.n	8007a04 <HAL_RCC_OscConfig+0xd8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10c      	bne.n	80079c8 <HAL_RCC_OscConfig+0x9c>
 80079ae:	4b7f      	ldr	r3, [pc, #508]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a7e      	ldr	r2, [pc, #504]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	4b7c      	ldr	r3, [pc, #496]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a7b      	ldr	r2, [pc, #492]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e01d      	b.n	8007a04 <HAL_RCC_OscConfig+0xd8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079d0:	d10c      	bne.n	80079ec <HAL_RCC_OscConfig+0xc0>
 80079d2:	4b76      	ldr	r3, [pc, #472]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a75      	ldr	r2, [pc, #468]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	4b73      	ldr	r3, [pc, #460]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a72      	ldr	r2, [pc, #456]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	e00b      	b.n	8007a04 <HAL_RCC_OscConfig+0xd8>
 80079ec:	4b6f      	ldr	r3, [pc, #444]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a6e      	ldr	r2, [pc, #440]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	4b6c      	ldr	r3, [pc, #432]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a6b      	ldr	r2, [pc, #428]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d013      	beq.n	8007a34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fa fcbe 	bl	800238c <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a14:	f7fa fcba 	bl	800238c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b64      	cmp	r3, #100	@ 0x64
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e21f      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a26:	4b61      	ldr	r3, [pc, #388]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0f0      	beq.n	8007a14 <HAL_RCC_OscConfig+0xe8>
 8007a32:	e014      	b.n	8007a5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fa fcaa 	bl	800238c <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a3c:	f7fa fca6 	bl	800238c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b64      	cmp	r3, #100	@ 0x64
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e20b      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a4e:	4b57      	ldr	r3, [pc, #348]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f0      	bne.n	8007a3c <HAL_RCC_OscConfig+0x110>
 8007a5a:	e000      	b.n	8007a5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d069      	beq.n	8007b3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a6a:	4b50      	ldr	r3, [pc, #320]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 030c 	and.w	r3, r3, #12
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a76:	4b4d      	ldr	r3, [pc, #308]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 030c 	and.w	r3, r3, #12
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d11c      	bne.n	8007abc <HAL_RCC_OscConfig+0x190>
 8007a82:	4b4a      	ldr	r3, [pc, #296]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d116      	bne.n	8007abc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a8e:	4b47      	ldr	r3, [pc, #284]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x17a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d001      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e1df      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa6:	4b41      	ldr	r3, [pc, #260]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	493d      	ldr	r1, [pc, #244]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aba:	e040      	b.n	8007b3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d023      	beq.n	8007b0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ac4:	4b39      	ldr	r3, [pc, #228]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a38      	ldr	r2, [pc, #224]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad0:	f7fa fc5c 	bl	800238c <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ad8:	f7fa fc58 	bl	800238c <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e1bd      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aea:	4b30      	ldr	r3, [pc, #192]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f0      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007af6:	4b2d      	ldr	r3, [pc, #180]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4929      	ldr	r1, [pc, #164]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	600b      	str	r3, [r1, #0]
 8007b0a:	e018      	b.n	8007b3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b0c:	4b27      	ldr	r3, [pc, #156]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a26      	ldr	r2, [pc, #152]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b12:	f023 0301 	bic.w	r3, r3, #1
 8007b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b18:	f7fa fc38 	bl	800238c <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b20:	f7fa fc34 	bl	800238c <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e199      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b32:	4b1e      	ldr	r3, [pc, #120]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d038      	beq.n	8007bbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d019      	beq.n	8007b86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b52:	4b16      	ldr	r3, [pc, #88]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b56:	4a15      	ldr	r2, [pc, #84]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5e:	f7fa fc15 	bl	800238c <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b66:	f7fa fc11 	bl	800238c <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e176      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b78:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <HAL_RCC_OscConfig+0x23a>
 8007b84:	e01a      	b.n	8007bbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b86:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b8a:	4a08      	ldr	r2, [pc, #32]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b92:	f7fa fbfb 	bl	800238c <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b98:	e00a      	b.n	8007bb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b9a:	f7fa fbf7 	bl	800238c <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d903      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e15c      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
 8007bac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bb0:	4b91      	ldr	r3, [pc, #580]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1ee      	bne.n	8007b9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0304 	and.w	r3, r3, #4
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 80a4 	beq.w	8007d12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bca:	4b8b      	ldr	r3, [pc, #556]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bd6:	4b88      	ldr	r3, [pc, #544]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	4a87      	ldr	r2, [pc, #540]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007be2:	4b85      	ldr	r3, [pc, #532]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bea:	60bb      	str	r3, [r7, #8]
 8007bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bf2:	4b82      	ldr	r3, [pc, #520]	@ (8007dfc <HAL_RCC_OscConfig+0x4d0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d118      	bne.n	8007c30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8007dfc <HAL_RCC_OscConfig+0x4d0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a7e      	ldr	r2, [pc, #504]	@ (8007dfc <HAL_RCC_OscConfig+0x4d0>)
 8007c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c0a:	f7fa fbbf 	bl	800238c <HAL_GetTick>
 8007c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c10:	e008      	b.n	8007c24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c12:	f7fa fbbb 	bl	800238c <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b64      	cmp	r3, #100	@ 0x64
 8007c1e:	d901      	bls.n	8007c24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e120      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c24:	4b75      	ldr	r3, [pc, #468]	@ (8007dfc <HAL_RCC_OscConfig+0x4d0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0f0      	beq.n	8007c12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d106      	bne.n	8007c46 <HAL_RCC_OscConfig+0x31a>
 8007c38:	4b6f      	ldr	r3, [pc, #444]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c44:	e02d      	b.n	8007ca2 <HAL_RCC_OscConfig+0x376>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10c      	bne.n	8007c68 <HAL_RCC_OscConfig+0x33c>
 8007c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c52:	4a69      	ldr	r2, [pc, #420]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c54:	f023 0301 	bic.w	r3, r3, #1
 8007c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c5a:	4b67      	ldr	r3, [pc, #412]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c5e:	4a66      	ldr	r2, [pc, #408]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c60:	f023 0304 	bic.w	r3, r3, #4
 8007c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c66:	e01c      	b.n	8007ca2 <HAL_RCC_OscConfig+0x376>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b05      	cmp	r3, #5
 8007c6e:	d10c      	bne.n	8007c8a <HAL_RCC_OscConfig+0x35e>
 8007c70:	4b61      	ldr	r3, [pc, #388]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c74:	4a60      	ldr	r2, [pc, #384]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c76:	f043 0304 	orr.w	r3, r3, #4
 8007c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c80:	4a5d      	ldr	r2, [pc, #372]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c88:	e00b      	b.n	8007ca2 <HAL_RCC_OscConfig+0x376>
 8007c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8e:	4a5a      	ldr	r2, [pc, #360]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c96:	4b58      	ldr	r3, [pc, #352]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9a:	4a57      	ldr	r2, [pc, #348]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c9c:	f023 0304 	bic.w	r3, r3, #4
 8007ca0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d015      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007caa:	f7fa fb6f 	bl	800238c <HAL_GetTick>
 8007cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cb0:	e00a      	b.n	8007cc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cb2:	f7fa fb6b 	bl	800238c <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e0ce      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0ee      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x386>
 8007cd4:	e014      	b.n	8007d00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd6:	f7fa fb59 	bl	800238c <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cde:	f7fa fb55 	bl	800238c <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e0b8      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf4:	4b40      	ldr	r3, [pc, #256]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1ee      	bne.n	8007cde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d105      	bne.n	8007d12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d06:	4b3c      	ldr	r3, [pc, #240]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d10:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 80a4 	beq.w	8007e64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d1c:	4b36      	ldr	r3, [pc, #216]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 030c 	and.w	r3, r3, #12
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d06b      	beq.n	8007e00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d149      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d30:	4b31      	ldr	r3, [pc, #196]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a30      	ldr	r2, [pc, #192]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7fa fb26 	bl	800238c <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d44:	f7fa fb22 	bl	800238c <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e087      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d56:	4b28      	ldr	r3, [pc, #160]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	69da      	ldr	r2, [r3, #28]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d70:	019b      	lsls	r3, r3, #6
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d78:	085b      	lsrs	r3, r3, #1
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	061b      	lsls	r3, r3, #24
 8007d86:	4313      	orrs	r3, r2
 8007d88:	4a1b      	ldr	r2, [pc, #108]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d90:	4b19      	ldr	r3, [pc, #100]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a18      	ldr	r2, [pc, #96]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d9c:	f7fa faf6 	bl	800238c <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007da4:	f7fa faf2 	bl	800238c <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e057      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007db6:	4b10      	ldr	r3, [pc, #64]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0f0      	beq.n	8007da4 <HAL_RCC_OscConfig+0x478>
 8007dc2:	e04f      	b.n	8007e64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fa fadc 	bl	800238c <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd8:	f7fa fad8 	bl	800238c <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e03d      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dea:	4b03      	ldr	r3, [pc, #12]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x4ac>
 8007df6:	e035      	b.n	8007e64 <HAL_RCC_OscConfig+0x538>
 8007df8:	40023800 	.word	0x40023800
 8007dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e00:	4b1b      	ldr	r3, [pc, #108]	@ (8007e70 <HAL_RCC_OscConfig+0x544>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d028      	beq.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d121      	bne.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d11a      	bne.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e30:	4013      	ands	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d111      	bne.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e46:	085b      	lsrs	r3, r3, #1
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d001      	beq.n	8007e64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40023800 	.word	0x40023800

08007e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e0d0      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d910      	bls.n	8007ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9a:	4b67      	ldr	r3, [pc, #412]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f023 020f 	bic.w	r2, r3, #15
 8007ea2:	4965      	ldr	r1, [pc, #404]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eaa:	4b63      	ldr	r3, [pc, #396]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0b8      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d020      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ed4:	4b59      	ldr	r3, [pc, #356]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	4a58      	ldr	r2, [pc, #352]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eec:	4b53      	ldr	r3, [pc, #332]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a52      	ldr	r2, [pc, #328]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ef8:	4b50      	ldr	r3, [pc, #320]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	494d      	ldr	r1, [pc, #308]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d040      	beq.n	8007f98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d107      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f1e:	4b47      	ldr	r3, [pc, #284]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d115      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e07f      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d107      	bne.n	8007f46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f36:	4b41      	ldr	r3, [pc, #260]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e073      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f46:	4b3d      	ldr	r3, [pc, #244]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e06b      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f56:	4b39      	ldr	r3, [pc, #228]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f023 0203 	bic.w	r2, r3, #3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	4936      	ldr	r1, [pc, #216]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f68:	f7fa fa10 	bl	800238c <HAL_GetTick>
 8007f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f6e:	e00a      	b.n	8007f86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f70:	f7fa fa0c 	bl	800238c <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e053      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f86:	4b2d      	ldr	r3, [pc, #180]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 020c 	and.w	r2, r3, #12
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d1eb      	bne.n	8007f70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f98:	4b27      	ldr	r3, [pc, #156]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d210      	bcs.n	8007fc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa6:	4b24      	ldr	r3, [pc, #144]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f023 020f 	bic.w	r2, r3, #15
 8007fae:	4922      	ldr	r1, [pc, #136]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fb6:	4b20      	ldr	r3, [pc, #128]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d001      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e032      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fd4:	4b19      	ldr	r3, [pc, #100]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	4916      	ldr	r1, [pc, #88]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ff2:	4b12      	ldr	r3, [pc, #72]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	490e      	ldr	r1, [pc, #56]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8008002:	4313      	orrs	r3, r2
 8008004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008006:	f000 f821 	bl	800804c <HAL_RCC_GetSysClockFreq>
 800800a:	4602      	mov	r2, r0
 800800c:	4b0b      	ldr	r3, [pc, #44]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	091b      	lsrs	r3, r3, #4
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	490a      	ldr	r1, [pc, #40]	@ (8008040 <HAL_RCC_ClockConfig+0x1cc>)
 8008018:	5ccb      	ldrb	r3, [r1, r3]
 800801a:	fa22 f303 	lsr.w	r3, r2, r3
 800801e:	4a09      	ldr	r2, [pc, #36]	@ (8008044 <HAL_RCC_ClockConfig+0x1d0>)
 8008020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008022:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <HAL_RCC_ClockConfig+0x1d4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f7f9 fb06 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40023c00 	.word	0x40023c00
 800803c:	40023800 	.word	0x40023800
 8008040:	080247e8 	.word	0x080247e8
 8008044:	20000000 	.word	0x20000000
 8008048:	20000004 	.word	0x20000004

0800804c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800804c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008050:	b090      	sub	sp, #64	@ 0x40
 8008052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
 8008058:	2300      	movs	r3, #0
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800805c:	2300      	movs	r3, #0
 800805e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008064:	4b59      	ldr	r3, [pc, #356]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 030c 	and.w	r3, r3, #12
 800806c:	2b08      	cmp	r3, #8
 800806e:	d00d      	beq.n	800808c <HAL_RCC_GetSysClockFreq+0x40>
 8008070:	2b08      	cmp	r3, #8
 8008072:	f200 80a1 	bhi.w	80081b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_RCC_GetSysClockFreq+0x34>
 800807a:	2b04      	cmp	r3, #4
 800807c:	d003      	beq.n	8008086 <HAL_RCC_GetSysClockFreq+0x3a>
 800807e:	e09b      	b.n	80081b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008080:	4b53      	ldr	r3, [pc, #332]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008082:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008084:	e09b      	b.n	80081be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008086:	4b53      	ldr	r3, [pc, #332]	@ (80081d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008088:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800808a:	e098      	b.n	80081be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800808c:	4b4f      	ldr	r3, [pc, #316]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008094:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008096:	4b4d      	ldr	r3, [pc, #308]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d028      	beq.n	80080f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080a2:	4b4a      	ldr	r3, [pc, #296]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	2200      	movs	r2, #0
 80080aa:	623b      	str	r3, [r7, #32]
 80080ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080b4:	2100      	movs	r1, #0
 80080b6:	4b47      	ldr	r3, [pc, #284]	@ (80081d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80080b8:	fb03 f201 	mul.w	r2, r3, r1
 80080bc:	2300      	movs	r3, #0
 80080be:	fb00 f303 	mul.w	r3, r0, r3
 80080c2:	4413      	add	r3, r2
 80080c4:	4a43      	ldr	r2, [pc, #268]	@ (80081d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80080c6:	fba0 1202 	umull	r1, r2, r0, r2
 80080ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080cc:	460a      	mov	r2, r1
 80080ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080d2:	4413      	add	r3, r2
 80080d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d8:	2200      	movs	r2, #0
 80080da:	61bb      	str	r3, [r7, #24]
 80080dc:	61fa      	str	r2, [r7, #28]
 80080de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080e6:	f7f8 f8e3 	bl	80002b0 <__aeabi_uldivmod>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4613      	mov	r3, r2
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f2:	e053      	b.n	800819c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080f4:	4b35      	ldr	r3, [pc, #212]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	099b      	lsrs	r3, r3, #6
 80080fa:	2200      	movs	r2, #0
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	617a      	str	r2, [r7, #20]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008106:	f04f 0b00 	mov.w	fp, #0
 800810a:	4652      	mov	r2, sl
 800810c:	465b      	mov	r3, fp
 800810e:	f04f 0000 	mov.w	r0, #0
 8008112:	f04f 0100 	mov.w	r1, #0
 8008116:	0159      	lsls	r1, r3, #5
 8008118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800811c:	0150      	lsls	r0, r2, #5
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	ebb2 080a 	subs.w	r8, r2, sl
 8008126:	eb63 090b 	sbc.w	r9, r3, fp
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800813a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800813e:	ebb2 0408 	subs.w	r4, r2, r8
 8008142:	eb63 0509 	sbc.w	r5, r3, r9
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	00eb      	lsls	r3, r5, #3
 8008150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008154:	00e2      	lsls	r2, r4, #3
 8008156:	4614      	mov	r4, r2
 8008158:	461d      	mov	r5, r3
 800815a:	eb14 030a 	adds.w	r3, r4, sl
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	eb45 030b 	adc.w	r3, r5, fp
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	f04f 0300 	mov.w	r3, #0
 800816e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008172:	4629      	mov	r1, r5
 8008174:	028b      	lsls	r3, r1, #10
 8008176:	4621      	mov	r1, r4
 8008178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800817c:	4621      	mov	r1, r4
 800817e:	028a      	lsls	r2, r1, #10
 8008180:	4610      	mov	r0, r2
 8008182:	4619      	mov	r1, r3
 8008184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008186:	2200      	movs	r2, #0
 8008188:	60bb      	str	r3, [r7, #8]
 800818a:	60fa      	str	r2, [r7, #12]
 800818c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008190:	f7f8 f88e 	bl	80002b0 <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4613      	mov	r3, r2
 800819a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800819c:	4b0b      	ldr	r3, [pc, #44]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	0c1b      	lsrs	r3, r3, #16
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	3301      	adds	r3, #1
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80081ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081b6:	e002      	b.n	80081be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081b8:	4b05      	ldr	r3, [pc, #20]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80081ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3740      	adds	r7, #64	@ 0x40
 80081c4:	46bd      	mov	sp, r7
 80081c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ca:	bf00      	nop
 80081cc:	40023800 	.word	0x40023800
 80081d0:	00f42400 	.word	0x00f42400
 80081d4:	017d7840 	.word	0x017d7840

080081d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081dc:	4b03      	ldr	r3, [pc, #12]	@ (80081ec <HAL_RCC_GetHCLKFreq+0x14>)
 80081de:	681b      	ldr	r3, [r3, #0]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000000 	.word	0x20000000

080081f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081f4:	f7ff fff0 	bl	80081d8 <HAL_RCC_GetHCLKFreq>
 80081f8:	4602      	mov	r2, r0
 80081fa:	4b05      	ldr	r3, [pc, #20]	@ (8008210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	0a9b      	lsrs	r3, r3, #10
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	4903      	ldr	r1, [pc, #12]	@ (8008214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008206:	5ccb      	ldrb	r3, [r1, r3]
 8008208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800820c:	4618      	mov	r0, r3
 800820e:	bd80      	pop	{r7, pc}
 8008210:	40023800 	.word	0x40023800
 8008214:	080247f8 	.word	0x080247f8

08008218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800821c:	f7ff ffdc 	bl	80081d8 <HAL_RCC_GetHCLKFreq>
 8008220:	4602      	mov	r2, r0
 8008222:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	0b5b      	lsrs	r3, r3, #13
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	4903      	ldr	r1, [pc, #12]	@ (800823c <HAL_RCC_GetPCLK2Freq+0x24>)
 800822e:	5ccb      	ldrb	r3, [r1, r3]
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008234:	4618      	mov	r0, r3
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40023800 	.word	0x40023800
 800823c:	080247f8 	.word	0x080247f8

08008240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	220f      	movs	r2, #15
 800824e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008250:	4b12      	ldr	r3, [pc, #72]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 0203 	and.w	r2, r3, #3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800825c:	4b0f      	ldr	r3, [pc, #60]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008268:	4b0c      	ldr	r3, [pc, #48]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008274:	4b09      	ldr	r3, [pc, #36]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008282:	4b07      	ldr	r3, [pc, #28]	@ (80082a0 <HAL_RCC_GetClockConfig+0x60>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 020f 	and.w	r2, r3, #15
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	601a      	str	r2, [r3, #0]
}
 800828e:	bf00      	nop
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40023800 	.word	0x40023800
 80082a0:	40023c00 	.word	0x40023c00

080082a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d012      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082cc:	4b69      	ldr	r3, [pc, #420]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	4a68      	ldr	r2, [pc, #416]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082d6:	6093      	str	r3, [r2, #8]
 80082d8:	4b66      	ldr	r3, [pc, #408]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e0:	4964      	ldr	r1, [pc, #400]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082ee:	2301      	movs	r3, #1
 80082f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d017      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082fe:	4b5d      	ldr	r3, [pc, #372]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008304:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800830c:	4959      	ldr	r1, [pc, #356]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800831c:	d101      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800831e:	2301      	movs	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d017      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800833a:	4b4e      	ldr	r3, [pc, #312]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800833c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008340:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008348:	494a      	ldr	r1, [pc, #296]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008358:	d101      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800835a:	2301      	movs	r3, #1
 800835c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008366:	2301      	movs	r3, #1
 8008368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008376:	2301      	movs	r3, #1
 8008378:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 808b 	beq.w	800849e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008388:	4b3a      	ldr	r3, [pc, #232]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838c:	4a39      	ldr	r2, [pc, #228]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008392:	6413      	str	r3, [r2, #64]	@ 0x40
 8008394:	4b37      	ldr	r3, [pc, #220]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083a0:	4b35      	ldr	r3, [pc, #212]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a34      	ldr	r2, [pc, #208]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ac:	f7f9 ffee 	bl	800238c <HAL_GetTick>
 80083b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083b2:	e008      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083b4:	f7f9 ffea 	bl	800238c <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b64      	cmp	r3, #100	@ 0x64
 80083c0:	d901      	bls.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e357      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0f0      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083d2:	4b28      	ldr	r3, [pc, #160]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d035      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d02e      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083f0:	4b20      	ldr	r3, [pc, #128]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008404:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008406:	4b1b      	ldr	r3, [pc, #108]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840a:	4a1a      	ldr	r2, [pc, #104]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008410:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008412:	4a18      	ldr	r2, [pc, #96]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008418:	4b16      	ldr	r3, [pc, #88]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	d114      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008424:	f7f9 ffb2 	bl	800238c <HAL_GetTick>
 8008428:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800842a:	e00a      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800842c:	f7f9 ffae 	bl	800238c <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800843a:	4293      	cmp	r3, r2
 800843c:	d901      	bls.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e319      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008442:	4b0c      	ldr	r3, [pc, #48]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0ee      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800845a:	d111      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800845c:	4b05      	ldr	r3, [pc, #20]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008468:	4b04      	ldr	r3, [pc, #16]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800846a:	400b      	ands	r3, r1
 800846c:	4901      	ldr	r1, [pc, #4]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846e:	4313      	orrs	r3, r2
 8008470:	608b      	str	r3, [r1, #8]
 8008472:	e00b      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008474:	40023800 	.word	0x40023800
 8008478:	40007000 	.word	0x40007000
 800847c:	0ffffcff 	.word	0x0ffffcff
 8008480:	4baa      	ldr	r3, [pc, #680]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	4aa9      	ldr	r2, [pc, #676]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008486:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800848a:	6093      	str	r3, [r2, #8]
 800848c:	4ba7      	ldr	r3, [pc, #668]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008498:	49a4      	ldr	r1, [pc, #656]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849a:	4313      	orrs	r3, r2
 800849c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d010      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084aa:	4ba0      	ldr	r3, [pc, #640]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084b0:	4a9e      	ldr	r2, [pc, #632]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80084ba:	4b9c      	ldr	r3, [pc, #624]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	4999      	ldr	r1, [pc, #612]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084d8:	4b94      	ldr	r3, [pc, #592]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084e6:	4991      	ldr	r1, [pc, #580]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084fa:	4b8c      	ldr	r3, [pc, #560]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008500:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008508:	4988      	ldr	r1, [pc, #544]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800851c:	4b83      	ldr	r3, [pc, #524]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800852a:	4980      	ldr	r1, [pc, #512]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800853e:	4b7b      	ldr	r3, [pc, #492]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008544:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800854c:	4977      	ldr	r1, [pc, #476]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008560:	4b72      	ldr	r3, [pc, #456]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008566:	f023 0203 	bic.w	r2, r3, #3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856e:	496f      	ldr	r1, [pc, #444]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008582:	4b6a      	ldr	r3, [pc, #424]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008588:	f023 020c 	bic.w	r2, r3, #12
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008590:	4966      	ldr	r1, [pc, #408]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085a4:	4b61      	ldr	r3, [pc, #388]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085b2:	495e      	ldr	r1, [pc, #376]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085c6:	4b59      	ldr	r3, [pc, #356]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d4:	4955      	ldr	r1, [pc, #340]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085e8:	4b50      	ldr	r3, [pc, #320]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f6:	494d      	ldr	r1, [pc, #308]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800860a:	4b48      	ldr	r3, [pc, #288]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008610:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008618:	4944      	ldr	r1, [pc, #272]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800862c:	4b3f      	ldr	r3, [pc, #252]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008632:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800863a:	493c      	ldr	r1, [pc, #240]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800864e:	4b37      	ldr	r3, [pc, #220]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008654:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800865c:	4933      	ldr	r1, [pc, #204]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008670:	4b2e      	ldr	r3, [pc, #184]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008676:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800867e:	492b      	ldr	r1, [pc, #172]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008680:	4313      	orrs	r3, r2
 8008682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d011      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008692:	4b26      	ldr	r3, [pc, #152]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008698:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086a0:	4922      	ldr	r1, [pc, #136]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086b0:	d101      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086b2:	2301      	movs	r3, #1
 80086b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086c2:	2301      	movs	r3, #1
 80086c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086d2:	4b16      	ldr	r3, [pc, #88]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086e0:	4912      	ldr	r1, [pc, #72]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086f4:	4b0d      	ldr	r3, [pc, #52]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008704:	4909      	ldr	r1, [pc, #36]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008706:	4313      	orrs	r3, r2
 8008708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d006      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 80d9 	beq.w	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008720:	4b02      	ldr	r3, [pc, #8]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a01      	ldr	r2, [pc, #4]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008726:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800872a:	e001      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800872c:	40023800 	.word	0x40023800
 8008730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008732:	f7f9 fe2b 	bl	800238c <HAL_GetTick>
 8008736:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008738:	e008      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800873a:	f7f9 fe27 	bl	800238c <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	2b64      	cmp	r3, #100	@ 0x64
 8008746:	d901      	bls.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e194      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800874c:	4b6c      	ldr	r3, [pc, #432]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f0      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d021      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008768:	2b00      	cmp	r3, #0
 800876a:	d11d      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800876c:	4b64      	ldr	r3, [pc, #400]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800876e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008772:	0c1b      	lsrs	r3, r3, #16
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800877a:	4b61      	ldr	r3, [pc, #388]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800877c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008780:	0e1b      	lsrs	r3, r3, #24
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	019a      	lsls	r2, r3, #6
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	041b      	lsls	r3, r3, #16
 8008792:	431a      	orrs	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	061b      	lsls	r3, r3, #24
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	071b      	lsls	r3, r3, #28
 80087a0:	4957      	ldr	r1, [pc, #348]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087bc:	d00a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d02e      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087d2:	d129      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087d4:	4b4a      	ldr	r3, [pc, #296]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	f003 0303 	and.w	r3, r3, #3
 80087e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087e2:	4b47      	ldr	r3, [pc, #284]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e8:	0f1b      	lsrs	r3, r3, #28
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	019a      	lsls	r2, r3, #6
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	041b      	lsls	r3, r3, #16
 80087fa:	431a      	orrs	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	061b      	lsls	r3, r3, #24
 8008802:	431a      	orrs	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	071b      	lsls	r3, r3, #28
 8008808:	493d      	ldr	r1, [pc, #244]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800880a:	4313      	orrs	r3, r2
 800880c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008810:	4b3b      	ldr	r3, [pc, #236]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008816:	f023 021f 	bic.w	r2, r3, #31
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881e:	3b01      	subs	r3, #1
 8008820:	4937      	ldr	r1, [pc, #220]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01d      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008834:	4b32      	ldr	r3, [pc, #200]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800883a:	0e1b      	lsrs	r3, r3, #24
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008842:	4b2f      	ldr	r3, [pc, #188]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008848:	0f1b      	lsrs	r3, r3, #28
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	019a      	lsls	r2, r3, #6
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	041b      	lsls	r3, r3, #16
 800885c:	431a      	orrs	r2, r3
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	061b      	lsls	r3, r3, #24
 8008862:	431a      	orrs	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	071b      	lsls	r3, r3, #28
 8008868:	4925      	ldr	r1, [pc, #148]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800886a:	4313      	orrs	r3, r2
 800886c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d011      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	019a      	lsls	r2, r3, #6
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	061b      	lsls	r3, r3, #24
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	071b      	lsls	r3, r3, #28
 8008898:	4919      	ldr	r1, [pc, #100]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088a0:	4b17      	ldr	r3, [pc, #92]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a16      	ldr	r2, [pc, #88]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ac:	f7f9 fd6e 	bl	800238c <HAL_GetTick>
 80088b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088b4:	f7f9 fd6a 	bl	800238c <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b64      	cmp	r3, #100	@ 0x64
 80088c0:	d901      	bls.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e0d7      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	f040 80cd 	bne.w	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088da:	4b09      	ldr	r3, [pc, #36]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a08      	ldr	r2, [pc, #32]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e6:	f7f9 fd51 	bl	800238c <HAL_GetTick>
 80088ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088ec:	e00a      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088ee:	f7f9 fd4d 	bl	800238c <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b64      	cmp	r3, #100	@ 0x64
 80088fa:	d903      	bls.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e0ba      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008900:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008904:	4b5e      	ldr	r3, [pc, #376]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800890c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008910:	d0ed      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800892e:	2b00      	cmp	r3, #0
 8008930:	d02e      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d12a      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800893a:	4b51      	ldr	r3, [pc, #324]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800893c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008948:	4b4d      	ldr	r3, [pc, #308]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800894e:	0f1b      	lsrs	r3, r3, #28
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	019a      	lsls	r2, r3, #6
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	431a      	orrs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	061b      	lsls	r3, r3, #24
 8008968:	431a      	orrs	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	071b      	lsls	r3, r3, #28
 800896e:	4944      	ldr	r1, [pc, #272]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008970:	4313      	orrs	r3, r2
 8008972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008976:	4b42      	ldr	r3, [pc, #264]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800897c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	3b01      	subs	r3, #1
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	493d      	ldr	r1, [pc, #244]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800898a:	4313      	orrs	r3, r2
 800898c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d022      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089a4:	d11d      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089a6:	4b36      	ldr	r3, [pc, #216]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ac:	0e1b      	lsrs	r3, r3, #24
 80089ae:	f003 030f 	and.w	r3, r3, #15
 80089b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089b4:	4b32      	ldr	r3, [pc, #200]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ba:	0f1b      	lsrs	r3, r3, #28
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	019a      	lsls	r2, r3, #6
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	431a      	orrs	r2, r3
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	061b      	lsls	r3, r3, #24
 80089d4:	431a      	orrs	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	071b      	lsls	r3, r3, #28
 80089da:	4929      	ldr	r1, [pc, #164]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d028      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089ee:	4b24      	ldr	r3, [pc, #144]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f4:	0e1b      	lsrs	r3, r3, #24
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089fc:	4b20      	ldr	r3, [pc, #128]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a02:	0c1b      	lsrs	r3, r3, #16
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	019a      	lsls	r2, r3, #6
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	041b      	lsls	r3, r3, #16
 8008a14:	431a      	orrs	r2, r3
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	061b      	lsls	r3, r3, #24
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	071b      	lsls	r3, r3, #28
 8008a22:	4917      	ldr	r1, [pc, #92]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a2a:	4b15      	ldr	r3, [pc, #84]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a38:	4911      	ldr	r1, [pc, #68]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a40:	4b0f      	ldr	r3, [pc, #60]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a0e      	ldr	r2, [pc, #56]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4c:	f7f9 fc9e 	bl	800238c <HAL_GetTick>
 8008a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a52:	e008      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a54:	f7f9 fc9a 	bl	800238c <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b64      	cmp	r3, #100	@ 0x64
 8008a60:	d901      	bls.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e007      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a66:	4b06      	ldr	r3, [pc, #24]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a72:	d1ef      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023800 	.word	0x40023800

08008a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e09d      	b.n	8008bd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d108      	bne.n	8008ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aa6:	d009      	beq.n	8008abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	61da      	str	r2, [r3, #28]
 8008aae:	e005      	b.n	8008abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d106      	bne.n	8008adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7f8 fc18 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008afc:	d902      	bls.n	8008b04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	e002      	b.n	8008b0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008b12:	d007      	beq.n	8008b24 <HAL_SPI_Init+0xa0>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b1c:	d002      	beq.n	8008b24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b66:	ea42 0103 	orr.w	r1, r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	0c1b      	lsrs	r3, r3, #16
 8008b80:	f003 0204 	and.w	r2, r3, #4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008ba0:	ea42 0103 	orr.w	r1, r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d001      	beq.n	8008bfa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e0d4      	b.n	8008da4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <HAL_SPI_Transmit_DMA+0x2a>
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e0cc      	b.n	8008da4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_SPI_Transmit_DMA+0x3c>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e0c5      	b.n	8008da4 <HAL_SPI_Transmit_DMA+0x1c8>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2203      	movs	r2, #3
 8008c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	88fa      	ldrh	r2, [r7, #6]
 8008c38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	88fa      	ldrh	r2, [r7, #6]
 8008c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c6a:	d10f      	bne.n	8008c8c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c90:	4a46      	ldr	r2, [pc, #280]	@ (8008dac <HAL_SPI_Transmit_DMA+0x1d0>)
 8008c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c98:	4a45      	ldr	r2, [pc, #276]	@ (8008db0 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca0:	4a44      	ldr	r2, [pc, #272]	@ (8008db4 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008ca2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca8:	2200      	movs	r2, #0
 8008caa:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008cc4:	d82d      	bhi.n	8008d22 <HAL_SPI_Transmit_DMA+0x146>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cd0:	d127      	bne.n	8008d22 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10f      	bne.n	8008d00 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cfe:	e010      	b.n	8008d22 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d0e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	330c      	adds	r3, #12
 8008d32:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d38:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d3a:	f7fa fb77 	bl	800342c <HAL_DMA_Start_IT>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d48:	f043 0210 	orr.w	r2, r3, #16
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e023      	b.n	8008da4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d66:	2b40      	cmp	r3, #64	@ 0x40
 8008d68:	d007      	beq.n	8008d7a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d78:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 0220 	orr.w	r2, r2, #32
 8008d90:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0202 	orr.w	r2, r2, #2
 8008da0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	0800974d 	.word	0x0800974d
 8008db0:	08009569 	.word	0x08009569
 8008db4:	080097a1 	.word	0x080097a1

08008db8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d001      	beq.n	8008dd6 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e105      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <HAL_SPI_Receive_DMA+0x2a>
 8008ddc:	88fb      	ldrh	r3, [r7, #6]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e0fd      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d110      	bne.n	8008e10 <HAL_SPI_Receive_DMA+0x58>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008df6:	d10b      	bne.n	8008e10 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f8f6 	bl	8008ff8 <HAL_SPI_TransmitReceive_DMA>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	e0e8      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <HAL_SPI_Receive_DMA+0x66>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e0e1      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2204      	movs	r2, #4
 8008e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	88fa      	ldrh	r2, [r7, #6]
 8008e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	88fa      	ldrh	r2, [r7, #6]
 8008e46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e6a:	d10f      	bne.n	8008e8c <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e9a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ea4:	d908      	bls.n	8008eb8 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008eb4:	605a      	str	r2, [r3, #4]
 8008eb6:	e042      	b.n	8008f3e <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ec6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ed2:	d134      	bne.n	8008f3e <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ee2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d111      	bne.n	8008f18 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f02:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	085b      	lsrs	r3, r3, #1
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008f16:	e012      	b.n	8008f3e <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f26:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3301      	adds	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f42:	4a2a      	ldr	r2, [pc, #168]	@ (8008fec <HAL_SPI_Receive_DMA+0x234>)
 8008f44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4a:	4a29      	ldr	r2, [pc, #164]	@ (8008ff0 <HAL_SPI_Receive_DMA+0x238>)
 8008f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f52:	4a28      	ldr	r2, [pc, #160]	@ (8008ff4 <HAL_SPI_Receive_DMA+0x23c>)
 8008f54:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	330c      	adds	r3, #12
 8008f68:	4619      	mov	r1, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f78:	f7fa fa58 	bl	800342c <HAL_DMA_Start_IT>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f86:	f043 0210 	orr.w	r2, r3, #16
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e023      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa4:	2b40      	cmp	r3, #64	@ 0x40
 8008fa6:	d007      	beq.n	8008fb8 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fb6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0220 	orr.w	r2, r2, #32
 8008fce:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	08009769 	.word	0x08009769
 8008ff0:	08009611 	.word	0x08009611
 8008ff4:	080097a1 	.word	0x080097a1

08008ff8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800900c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d00c      	beq.n	8009034 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009020:	d106      	bne.n	8009030 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d102      	bne.n	8009030 <HAL_SPI_TransmitReceive_DMA+0x38>
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	2b04      	cmp	r3, #4
 800902e:	d001      	beq.n	8009034 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009030:	2302      	movs	r3, #2
 8009032:	e158      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009040:	887b      	ldrh	r3, [r7, #2]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e14d      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_SPI_TransmitReceive_DMA+0x60>
 8009054:	2302      	movs	r3, #2
 8009056:	e146      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b04      	cmp	r3, #4
 800906a:	d003      	beq.n	8009074 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2205      	movs	r2, #5
 8009070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	887a      	ldrh	r2, [r7, #2]
 8009084:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	887a      	ldrh	r2, [r7, #2]
 800908a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	887a      	ldrh	r2, [r7, #2]
 8009096:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	887a      	ldrh	r2, [r7, #2]
 800909e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80090bc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090c6:	d908      	bls.n	80090da <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090d6:	605a      	str	r2, [r3, #4]
 80090d8:	e06f      	b.n	80091ba <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090e8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090f4:	d126      	bne.n	8009144 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10f      	bne.n	8009122 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009110:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009116:	b29b      	uxth	r3, r3
 8009118:	085b      	lsrs	r3, r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009120:	e010      	b.n	8009144 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009130:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009136:	b29b      	uxth	r3, r3
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	b29b      	uxth	r3, r3
 800913c:	3301      	adds	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800914e:	d134      	bne.n	80091ba <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800915e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009166:	b29b      	uxth	r3, r3
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d111      	bne.n	8009194 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800917e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009186:	b29b      	uxth	r3, r3
 8009188:	085b      	lsrs	r3, r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009192:	e012      	b.n	80091ba <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	085b      	lsrs	r3, r3, #1
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3301      	adds	r3, #1
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d108      	bne.n	80091d8 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ca:	4a49      	ldr	r2, [pc, #292]	@ (80092f0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80091cc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d2:	4a48      	ldr	r2, [pc, #288]	@ (80092f4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80091d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80091d6:	e007      	b.n	80091e8 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091dc:	4a46      	ldr	r2, [pc, #280]	@ (80092f8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80091de:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e4:	4a45      	ldr	r2, [pc, #276]	@ (80092fc <HAL_SPI_TransmitReceive_DMA+0x304>)
 80091e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ec:	4a44      	ldr	r2, [pc, #272]	@ (8009300 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80091ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091f4:	2200      	movs	r2, #0
 80091f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	4619      	mov	r1, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009208:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009210:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009212:	f7fa f90b 	bl	800342c <HAL_DMA_Start_IT>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00b      	beq.n	8009234 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009220:	f043 0210 	orr.w	r2, r3, #16
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e058      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0201 	orr.w	r2, r2, #1
 8009242:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009248:	2200      	movs	r2, #0
 800924a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009250:	2200      	movs	r2, #0
 8009252:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009258:	2200      	movs	r2, #0
 800925a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009260:	2200      	movs	r2, #0
 8009262:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	4619      	mov	r1, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330c      	adds	r3, #12
 8009274:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800927a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800927c:	f7fa f8d6 	bl	800342c <HAL_DMA_Start_IT>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00b      	beq.n	800929e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800928a:	f043 0210 	orr.w	r2, r3, #16
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e023      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a8:	2b40      	cmp	r3, #64	@ 0x40
 80092aa:	d007      	beq.n	80092bc <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0220 	orr.w	r2, r2, #32
 80092d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685a      	ldr	r2, [r3, #4]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0202 	orr.w	r2, r2, #2
 80092e2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	08009769 	.word	0x08009769
 80092f4:	08009611 	.word	0x08009611
 80092f8:	08009785 	.word	0x08009785
 80092fc:	080096bb 	.word	0x080096bb
 8009300:	080097a1 	.word	0x080097a1

08009304 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	099b      	lsrs	r3, r3, #6
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10f      	bne.n	8009348 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	099b      	lsrs	r3, r3, #6
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d004      	beq.n	8009348 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
    return;
 8009346:	e0d7      	b.n	80094f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <HAL_SPI_IRQHandler+0x66>
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	09db      	lsrs	r3, r3, #7
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d004      	beq.n	800936a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	4798      	blx	r3
    return;
 8009368:	e0c6      	b.n	80094f8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	095b      	lsrs	r3, r3, #5
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10c      	bne.n	8009390 <HAL_SPI_IRQHandler+0x8c>
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	099b      	lsrs	r3, r3, #6
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	0a1b      	lsrs	r3, r3, #8
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 80b4 	beq.w	80094f8 <HAL_SPI_IRQHandler+0x1f4>
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80ad 	beq.w	80094f8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	099b      	lsrs	r3, r3, #6
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d023      	beq.n	80093f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d011      	beq.n	80093da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ba:	f043 0204 	orr.w	r2, r3, #4
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	617b      	str	r3, [r7, #20]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	e00b      	b.n	80093f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093da:	2300      	movs	r3, #0
 80093dc:	613b      	str	r3, [r7, #16]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	613b      	str	r3, [r7, #16]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	693b      	ldr	r3, [r7, #16]
        return;
 80093f0:	e082      	b.n	80094f8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d014      	beq.n	8009428 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009402:	f043 0201 	orr.w	r2, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800940a:	2300      	movs	r3, #0
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	0a1b      	lsrs	r3, r3, #8
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00c      	beq.n	800944e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009438:	f043 0208 	orr.w	r2, r3, #8
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009440:	2300      	movs	r3, #0
 8009442:	60bb      	str	r3, [r7, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	60bb      	str	r3, [r7, #8]
 800944c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009452:	2b00      	cmp	r3, #0
 8009454:	d04f      	beq.n	80094f6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009464:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d104      	bne.n	8009482 <HAL_SPI_IRQHandler+0x17e>
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d034      	beq.n	80094ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 0203 	bic.w	r2, r2, #3
 8009490:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009496:	2b00      	cmp	r3, #0
 8009498:	d011      	beq.n	80094be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800949e:	4a18      	ldr	r2, [pc, #96]	@ (8009500 <HAL_SPI_IRQHandler+0x1fc>)
 80094a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fa f890 	bl	80035cc <HAL_DMA_Abort_IT>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d016      	beq.n	80094f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ca:	4a0d      	ldr	r2, [pc, #52]	@ (8009500 <HAL_SPI_IRQHandler+0x1fc>)
 80094cc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fa f87a 	bl	80035cc <HAL_DMA_Abort_IT>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80094ea:	e003      	b.n	80094f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f831 	bl	8009554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80094f2:	e000      	b.n	80094f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80094f4:	bf00      	nop
    return;
 80094f6:	bf00      	nop
  }
}
 80094f8:	3720      	adds	r7, #32
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	080097e1 	.word	0x080097e1

08009504 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009574:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009576:	f7f8 ff09 	bl	800238c <HAL_GetTick>
 800957a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800958a:	d03b      	beq.n	8009604 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0220 	bic.w	r2, r2, #32
 800959a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 0202 	bic.w	r2, r2, #2
 80095aa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	2164      	movs	r1, #100	@ 0x64
 80095b0:	6978      	ldr	r0, [r7, #20]
 80095b2:	f000 fac5 	bl	8009b40 <SPI_EndRxTxTransaction>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c0:	f043 0220 	orr.w	r2, r3, #32
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095d0:	2300      	movs	r3, #0
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2200      	movs	r2, #0
 80095ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80095fc:	6978      	ldr	r0, [r7, #20]
 80095fe:	f7ff ffa9 	bl	8009554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009602:	e002      	b.n	800960a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009604:	6978      	ldr	r0, [r7, #20]
 8009606:	f015 ff2f 	bl	801f468 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800961e:	f7f8 feb5 	bl	800238c <HAL_GetTick>
 8009622:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800962e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009632:	d03c      	beq.n	80096ae <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0220 	bic.w	r2, r2, #32
 8009642:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10d      	bne.n	8009668 <SPI_DMAReceiveCplt+0x58>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009654:	d108      	bne.n	8009668 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0203 	bic.w	r2, r2, #3
 8009664:	605a      	str	r2, [r3, #4]
 8009666:	e007      	b.n	8009678 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0201 	bic.w	r2, r2, #1
 8009676:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	2164      	movs	r1, #100	@ 0x64
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 f9e3 	bl	8009a48 <SPI_EndRxTransaction>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2220      	movs	r2, #32
 800968c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f7ff ff54 	bl	8009554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80096ac:	e002      	b.n	80096b4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f015 fefc 	bl	801f4ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096c8:	f7f8 fe60 	bl	800238c <HAL_GetTick>
 80096cc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096dc:	d030      	beq.n	8009740 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0220 	bic.w	r2, r2, #32
 80096ec:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	2164      	movs	r1, #100	@ 0x64
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 fa24 	bl	8009b40 <SPI_EndRxTxTransaction>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009702:	f043 0220 	orr.w	r2, r3, #32
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0203 	bic.w	r2, r2, #3
 8009718:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff ff0b 	bl	8009554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800973e:	e002      	b.n	8009746 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f7ff fedf 	bl	8009504 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009758:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff fedc 	bl	8009518 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009760:	bf00      	nop
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009774:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f7ff fed8 	bl	800952c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009790:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fed4 	bl	8009540 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009798:	bf00      	nop
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0203 	bic.w	r2, r2, #3
 80097bc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097c2:	f043 0210 	orr.w	r2, r3, #16
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f7ff febe 	bl	8009554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097d8:	bf00      	nop
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7ff fea9 	bl	8009554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	603b      	str	r3, [r7, #0]
 8009818:	4613      	mov	r3, r2
 800981a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800981c:	f7f8 fdb6 	bl	800238c <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009824:	1a9b      	subs	r3, r3, r2
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4413      	add	r3, r2
 800982a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800982c:	f7f8 fdae 	bl	800238c <HAL_GetTick>
 8009830:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009832:	4b39      	ldr	r3, [pc, #228]	@ (8009918 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	015b      	lsls	r3, r3, #5
 8009838:	0d1b      	lsrs	r3, r3, #20
 800983a:	69fa      	ldr	r2, [r7, #28]
 800983c:	fb02 f303 	mul.w	r3, r2, r3
 8009840:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009842:	e055      	b.n	80098f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800984a:	d051      	beq.n	80098f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800984c:	f7f8 fd9e 	bl	800238c <HAL_GetTick>
 8009850:	4602      	mov	r2, r0
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	429a      	cmp	r2, r3
 800985a:	d902      	bls.n	8009862 <SPI_WaitFlagStateUntilTimeout+0x56>
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d13d      	bne.n	80098de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009870:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800987a:	d111      	bne.n	80098a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009884:	d004      	beq.n	8009890 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800988e:	d107      	bne.n	80098a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800989e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098a8:	d10f      	bne.n	80098ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e018      	b.n	8009910 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d102      	bne.n	80098ea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61fb      	str	r3, [r7, #28]
 80098e8:	e002      	b.n	80098f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	4013      	ands	r3, r2
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	bf0c      	ite	eq
 8009900:	2301      	moveq	r3, #1
 8009902:	2300      	movne	r3, #0
 8009904:	b2db      	uxtb	r3, r3
 8009906:	461a      	mov	r2, r3
 8009908:	79fb      	ldrb	r3, [r7, #7]
 800990a:	429a      	cmp	r2, r3
 800990c:	d19a      	bne.n	8009844 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3720      	adds	r7, #32
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	20000000 	.word	0x20000000

0800991c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b08a      	sub	sp, #40	@ 0x28
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800992e:	f7f8 fd2d 	bl	800238c <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	1a9b      	subs	r3, r3, r2
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	4413      	add	r3, r2
 800993c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800993e:	f7f8 fd25 	bl	800238c <HAL_GetTick>
 8009942:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800994c:	4b3d      	ldr	r3, [pc, #244]	@ (8009a44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	4613      	mov	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	00da      	lsls	r2, r3, #3
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	0d1b      	lsrs	r3, r3, #20
 800995c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800995e:	fb02 f303 	mul.w	r3, r2, r3
 8009962:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009964:	e061      	b.n	8009a2a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800996c:	d107      	bne.n	800997e <SPI_WaitFifoStateUntilTimeout+0x62>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d104      	bne.n	800997e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	b2db      	uxtb	r3, r3
 800997a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800997c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009984:	d051      	beq.n	8009a2a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009986:	f7f8 fd01 	bl	800238c <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009992:	429a      	cmp	r2, r3
 8009994:	d902      	bls.n	800999c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	2b00      	cmp	r3, #0
 800999a:	d13d      	bne.n	8009a18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099b4:	d111      	bne.n	80099da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099be:	d004      	beq.n	80099ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099c8:	d107      	bne.n	80099da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099e2:	d10f      	bne.n	8009a04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e011      	b.n	8009a3c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a22:	e002      	b.n	8009a2a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	3b01      	subs	r3, #1
 8009a28:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4013      	ands	r3, r2
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d195      	bne.n	8009966 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3728      	adds	r7, #40	@ 0x28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20000000 	.word	0x20000000

08009a48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a5c:	d111      	bne.n	8009a82 <SPI_EndRxTransaction+0x3a>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a66:	d004      	beq.n	8009a72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a70:	d107      	bne.n	8009a82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a8a:	d112      	bne.n	8009ab2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2200      	movs	r2, #0
 8009a94:	2180      	movs	r1, #128	@ 0x80
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff feb8 	bl	800980c <SPI_WaitFlagStateUntilTimeout>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d021      	beq.n	8009ae6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aa6:	f043 0220 	orr.w	r2, r3, #32
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e03d      	b.n	8009b2e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ab2:	4b21      	ldr	r3, [pc, #132]	@ (8009b38 <SPI_EndRxTransaction+0xf0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a21      	ldr	r2, [pc, #132]	@ (8009b3c <SPI_EndRxTransaction+0xf4>)
 8009ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8009abc:	0d5b      	lsrs	r3, r3, #21
 8009abe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009ac2:	fb02 f303 	mul.w	r3, r2, r3
 8009ac6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ade:	2b80      	cmp	r3, #128	@ 0x80
 8009ae0:	d0f2      	beq.n	8009ac8 <SPI_EndRxTransaction+0x80>
 8009ae2:	e000      	b.n	8009ae6 <SPI_EndRxTransaction+0x9e>
        break;
 8009ae4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009aee:	d11d      	bne.n	8009b2c <SPI_EndRxTransaction+0xe4>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009af8:	d004      	beq.n	8009b04 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b02:	d113      	bne.n	8009b2c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f7ff ff03 	bl	800991c <SPI_WaitFifoStateUntilTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d007      	beq.n	8009b2c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b20:	f043 0220 	orr.w	r2, r3, #32
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e000      	b.n	8009b2e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000000 	.word	0x20000000
 8009b3c:	165e9f81 	.word	0x165e9f81

08009b40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff fedf 	bl	800991c <SPI_WaitFifoStateUntilTimeout>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d007      	beq.n	8009b74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b68:	f043 0220 	orr.w	r2, r3, #32
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e046      	b.n	8009c02 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b74:	4b25      	ldr	r3, [pc, #148]	@ (8009c0c <SPI_EndRxTxTransaction+0xcc>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a25      	ldr	r2, [pc, #148]	@ (8009c10 <SPI_EndRxTxTransaction+0xd0>)
 8009b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7e:	0d5b      	lsrs	r3, r3, #21
 8009b80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b84:	fb02 f303 	mul.w	r3, r2, r3
 8009b88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b92:	d112      	bne.n	8009bba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2180      	movs	r1, #128	@ 0x80
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7ff fe34 	bl	800980c <SPI_WaitFlagStateUntilTimeout>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d016      	beq.n	8009bd8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bae:	f043 0220 	orr.w	r2, r3, #32
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e023      	b.n	8009c02 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00a      	beq.n	8009bd6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd0:	2b80      	cmp	r3, #128	@ 0x80
 8009bd2:	d0f2      	beq.n	8009bba <SPI_EndRxTxTransaction+0x7a>
 8009bd4:	e000      	b.n	8009bd8 <SPI_EndRxTxTransaction+0x98>
        break;
 8009bd6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff fe99 	bl	800991c <SPI_WaitFifoStateUntilTimeout>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d007      	beq.n	8009c00 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bf4:	f043 0220 	orr.w	r2, r3, #32
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e000      	b.n	8009c02 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000000 	.word	0x20000000
 8009c10:	165e9f81 	.word	0x165e9f81

08009c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e049      	b.n	8009cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d106      	bne.n	8009c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7f7 ffd0 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4619      	mov	r1, r3
 8009c52:	4610      	mov	r0, r2
 8009c54:	f000 fb40 	bl	800a2d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
	...

08009cc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d001      	beq.n	8009cdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e04c      	b.n	8009d76 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a26      	ldr	r2, [pc, #152]	@ (8009d84 <HAL_TIM_Base_Start+0xc0>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d022      	beq.n	8009d34 <HAL_TIM_Base_Start+0x70>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf6:	d01d      	beq.n	8009d34 <HAL_TIM_Base_Start+0x70>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a22      	ldr	r2, [pc, #136]	@ (8009d88 <HAL_TIM_Base_Start+0xc4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d018      	beq.n	8009d34 <HAL_TIM_Base_Start+0x70>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a21      	ldr	r2, [pc, #132]	@ (8009d8c <HAL_TIM_Base_Start+0xc8>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d013      	beq.n	8009d34 <HAL_TIM_Base_Start+0x70>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a1f      	ldr	r2, [pc, #124]	@ (8009d90 <HAL_TIM_Base_Start+0xcc>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d00e      	beq.n	8009d34 <HAL_TIM_Base_Start+0x70>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8009d94 <HAL_TIM_Base_Start+0xd0>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d009      	beq.n	8009d34 <HAL_TIM_Base_Start+0x70>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a1c      	ldr	r2, [pc, #112]	@ (8009d98 <HAL_TIM_Base_Start+0xd4>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d004      	beq.n	8009d34 <HAL_TIM_Base_Start+0x70>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8009d9c <HAL_TIM_Base_Start+0xd8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d115      	bne.n	8009d60 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	4b19      	ldr	r3, [pc, #100]	@ (8009da0 <HAL_TIM_Base_Start+0xdc>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b06      	cmp	r3, #6
 8009d44:	d015      	beq.n	8009d72 <HAL_TIM_Base_Start+0xae>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d4c:	d011      	beq.n	8009d72 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0201 	orr.w	r2, r2, #1
 8009d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d5e:	e008      	b.n	8009d72 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f042 0201 	orr.w	r2, r2, #1
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	e000      	b.n	8009d74 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	40010000 	.word	0x40010000
 8009d88:	40000400 	.word	0x40000400
 8009d8c:	40000800 	.word	0x40000800
 8009d90:	40000c00 	.word	0x40000c00
 8009d94:	40010400 	.word	0x40010400
 8009d98:	40014000 	.word	0x40014000
 8009d9c:	40001800 	.word	0x40001800
 8009da0:	00010007 	.word	0x00010007

08009da4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6a1a      	ldr	r2, [r3, #32]
 8009db2:	4b0f      	ldr	r3, [pc, #60]	@ (8009df0 <HAL_TIM_Base_Stop+0x4c>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10f      	bne.n	8009dda <HAL_TIM_Base_Stop+0x36>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	6a1a      	ldr	r2, [r3, #32]
 8009dc0:	f240 4344 	movw	r3, #1092	@ 0x444
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d107      	bne.n	8009dda <HAL_TIM_Base_Stop+0x36>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 0201 	bic.w	r2, r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	00111111 	.word	0x00111111

08009df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d001      	beq.n	8009e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e054      	b.n	8009eb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68da      	ldr	r2, [r3, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0201 	orr.w	r2, r2, #1
 8009e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a26      	ldr	r2, [pc, #152]	@ (8009ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d022      	beq.n	8009e74 <HAL_TIM_Base_Start_IT+0x80>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e36:	d01d      	beq.n	8009e74 <HAL_TIM_Base_Start_IT+0x80>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a22      	ldr	r2, [pc, #136]	@ (8009ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d018      	beq.n	8009e74 <HAL_TIM_Base_Start_IT+0x80>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a21      	ldr	r2, [pc, #132]	@ (8009ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d013      	beq.n	8009e74 <HAL_TIM_Base_Start_IT+0x80>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a1f      	ldr	r2, [pc, #124]	@ (8009ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00e      	beq.n	8009e74 <HAL_TIM_Base_Start_IT+0x80>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ed4 <HAL_TIM_Base_Start_IT+0xe0>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d009      	beq.n	8009e74 <HAL_TIM_Base_Start_IT+0x80>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d004      	beq.n	8009e74 <HAL_TIM_Base_Start_IT+0x80>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8009edc <HAL_TIM_Base_Start_IT+0xe8>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d115      	bne.n	8009ea0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	4b19      	ldr	r3, [pc, #100]	@ (8009ee0 <HAL_TIM_Base_Start_IT+0xec>)
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b06      	cmp	r3, #6
 8009e84:	d015      	beq.n	8009eb2 <HAL_TIM_Base_Start_IT+0xbe>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e8c:	d011      	beq.n	8009eb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f042 0201 	orr.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e9e:	e008      	b.n	8009eb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f042 0201 	orr.w	r2, r2, #1
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	e000      	b.n	8009eb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	40010000 	.word	0x40010000
 8009ec8:	40000400 	.word	0x40000400
 8009ecc:	40000800 	.word	0x40000800
 8009ed0:	40000c00 	.word	0x40000c00
 8009ed4:	40010400 	.word	0x40010400
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	40001800 	.word	0x40001800
 8009ee0:	00010007 	.word	0x00010007

08009ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d020      	beq.n	8009f48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f003 0302 	and.w	r3, r3, #2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01b      	beq.n	8009f48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f06f 0202 	mvn.w	r2, #2
 8009f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f9b4 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8009f34:	e005      	b.n	8009f42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f9a6 	bl	800a288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f9b7 	bl	800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d020      	beq.n	8009f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01b      	beq.n	8009f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f06f 0204 	mvn.w	r2, #4
 8009f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f98e 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8009f80:	e005      	b.n	8009f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f980 	bl	800a288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f991 	bl	800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f003 0308 	and.w	r3, r3, #8
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d020      	beq.n	8009fe0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d01b      	beq.n	8009fe0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f06f 0208 	mvn.w	r2, #8
 8009fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2204      	movs	r2, #4
 8009fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	f003 0303 	and.w	r3, r3, #3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f968 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 8009fcc:	e005      	b.n	8009fda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f95a 	bl	800a288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f96b 	bl	800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d020      	beq.n	800a02c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f003 0310 	and.w	r3, r3, #16
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d01b      	beq.n	800a02c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f06f 0210 	mvn.w	r2, #16
 8009ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2208      	movs	r2, #8
 800a002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f942 	bl	800a29c <HAL_TIM_IC_CaptureCallback>
 800a018:	e005      	b.n	800a026 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f934 	bl	800a288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f945 	bl	800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00c      	beq.n	800a050 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d007      	beq.n	800a050 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f06f 0201 	mvn.w	r2, #1
 800a048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7f7 f8d0 	bl	80011f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a056:	2b00      	cmp	r3, #0
 800a058:	d104      	bne.n	800a064 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00c      	beq.n	800a07e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d007      	beq.n	800a07e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fb05 	bl	800a688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00c      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d007      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fafd 	bl	800a69c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00c      	beq.n	800a0c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d007      	beq.n	800a0c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f8ff 	bl	800a2c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00c      	beq.n	800a0ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f003 0320 	and.w	r3, r3, #32
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d007      	beq.n	800a0ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f06f 0220 	mvn.w	r2, #32
 800a0e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fac5 	bl	800a674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d101      	bne.n	800a110 <HAL_TIM_ConfigClockSource+0x1c>
 800a10c:	2302      	movs	r3, #2
 800a10e:	e0b4      	b.n	800a27a <HAL_TIM_ConfigClockSource+0x186>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	4b56      	ldr	r3, [pc, #344]	@ (800a284 <HAL_TIM_ConfigClockSource+0x190>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a148:	d03e      	beq.n	800a1c8 <HAL_TIM_ConfigClockSource+0xd4>
 800a14a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a14e:	f200 8087 	bhi.w	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a156:	f000 8086 	beq.w	800a266 <HAL_TIM_ConfigClockSource+0x172>
 800a15a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a15e:	d87f      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a160:	2b70      	cmp	r3, #112	@ 0x70
 800a162:	d01a      	beq.n	800a19a <HAL_TIM_ConfigClockSource+0xa6>
 800a164:	2b70      	cmp	r3, #112	@ 0x70
 800a166:	d87b      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a168:	2b60      	cmp	r3, #96	@ 0x60
 800a16a:	d050      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0x11a>
 800a16c:	2b60      	cmp	r3, #96	@ 0x60
 800a16e:	d877      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a170:	2b50      	cmp	r3, #80	@ 0x50
 800a172:	d03c      	beq.n	800a1ee <HAL_TIM_ConfigClockSource+0xfa>
 800a174:	2b50      	cmp	r3, #80	@ 0x50
 800a176:	d873      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a178:	2b40      	cmp	r3, #64	@ 0x40
 800a17a:	d058      	beq.n	800a22e <HAL_TIM_ConfigClockSource+0x13a>
 800a17c:	2b40      	cmp	r3, #64	@ 0x40
 800a17e:	d86f      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a180:	2b30      	cmp	r3, #48	@ 0x30
 800a182:	d064      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x15a>
 800a184:	2b30      	cmp	r3, #48	@ 0x30
 800a186:	d86b      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d060      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x15a>
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	d867      	bhi.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d05c      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x15a>
 800a194:	2b10      	cmp	r3, #16
 800a196:	d05a      	beq.n	800a24e <HAL_TIM_ConfigClockSource+0x15a>
 800a198:	e062      	b.n	800a260 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1aa:	f000 f9b5 	bl	800a518 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a1bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	609a      	str	r2, [r3, #8]
      break;
 800a1c6:	e04f      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a1d8:	f000 f99e 	bl	800a518 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	689a      	ldr	r2, [r3, #8]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1ea:	609a      	str	r2, [r3, #8]
      break;
 800a1ec:	e03c      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f000 f912 	bl	800a424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2150      	movs	r1, #80	@ 0x50
 800a206:	4618      	mov	r0, r3
 800a208:	f000 f96b 	bl	800a4e2 <TIM_ITRx_SetConfig>
      break;
 800a20c:	e02c      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a21a:	461a      	mov	r2, r3
 800a21c:	f000 f931 	bl	800a482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2160      	movs	r1, #96	@ 0x60
 800a226:	4618      	mov	r0, r3
 800a228:	f000 f95b 	bl	800a4e2 <TIM_ITRx_SetConfig>
      break;
 800a22c:	e01c      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a23a:	461a      	mov	r2, r3
 800a23c:	f000 f8f2 	bl	800a424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2140      	movs	r1, #64	@ 0x40
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f94b 	bl	800a4e2 <TIM_ITRx_SetConfig>
      break;
 800a24c:	e00c      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4619      	mov	r1, r3
 800a258:	4610      	mov	r0, r2
 800a25a:	f000 f942 	bl	800a4e2 <TIM_ITRx_SetConfig>
      break;
 800a25e:	e003      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	73fb      	strb	r3, [r7, #15]
      break;
 800a264:	e000      	b.n	800a268 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a278:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	fffeff88 	.word	0xfffeff88

0800a288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a43      	ldr	r2, [pc, #268]	@ (800a3f8 <TIM_Base_SetConfig+0x120>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d013      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2f6:	d00f      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a40      	ldr	r2, [pc, #256]	@ (800a3fc <TIM_Base_SetConfig+0x124>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d00b      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a3f      	ldr	r2, [pc, #252]	@ (800a400 <TIM_Base_SetConfig+0x128>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d007      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a3e      	ldr	r2, [pc, #248]	@ (800a404 <TIM_Base_SetConfig+0x12c>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d003      	beq.n	800a318 <TIM_Base_SetConfig+0x40>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a3d      	ldr	r2, [pc, #244]	@ (800a408 <TIM_Base_SetConfig+0x130>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d108      	bne.n	800a32a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a31e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4313      	orrs	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a32      	ldr	r2, [pc, #200]	@ (800a3f8 <TIM_Base_SetConfig+0x120>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d02b      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a338:	d027      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a2f      	ldr	r2, [pc, #188]	@ (800a3fc <TIM_Base_SetConfig+0x124>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d023      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a2e      	ldr	r2, [pc, #184]	@ (800a400 <TIM_Base_SetConfig+0x128>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d01f      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a2d      	ldr	r2, [pc, #180]	@ (800a404 <TIM_Base_SetConfig+0x12c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d01b      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a2c      	ldr	r2, [pc, #176]	@ (800a408 <TIM_Base_SetConfig+0x130>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d017      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a2b      	ldr	r2, [pc, #172]	@ (800a40c <TIM_Base_SetConfig+0x134>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d013      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a2a      	ldr	r2, [pc, #168]	@ (800a410 <TIM_Base_SetConfig+0x138>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d00f      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a29      	ldr	r2, [pc, #164]	@ (800a414 <TIM_Base_SetConfig+0x13c>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d00b      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a28      	ldr	r2, [pc, #160]	@ (800a418 <TIM_Base_SetConfig+0x140>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d007      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a27      	ldr	r2, [pc, #156]	@ (800a41c <TIM_Base_SetConfig+0x144>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d003      	beq.n	800a38a <TIM_Base_SetConfig+0xb2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a26      	ldr	r2, [pc, #152]	@ (800a420 <TIM_Base_SetConfig+0x148>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d108      	bne.n	800a39c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4313      	orrs	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a0e      	ldr	r2, [pc, #56]	@ (800a3f8 <TIM_Base_SetConfig+0x120>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d003      	beq.n	800a3ca <TIM_Base_SetConfig+0xf2>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a10      	ldr	r2, [pc, #64]	@ (800a408 <TIM_Base_SetConfig+0x130>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d103      	bne.n	800a3d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	691a      	ldr	r2, [r3, #16]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f043 0204 	orr.w	r2, r3, #4
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	601a      	str	r2, [r3, #0]
}
 800a3ea:	bf00      	nop
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	40010000 	.word	0x40010000
 800a3fc:	40000400 	.word	0x40000400
 800a400:	40000800 	.word	0x40000800
 800a404:	40000c00 	.word	0x40000c00
 800a408:	40010400 	.word	0x40010400
 800a40c:	40014000 	.word	0x40014000
 800a410:	40014400 	.word	0x40014400
 800a414:	40014800 	.word	0x40014800
 800a418:	40001800 	.word	0x40001800
 800a41c:	40001c00 	.word	0x40001c00
 800a420:	40002000 	.word	0x40002000

0800a424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	f023 0201 	bic.w	r2, r3, #1
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a44e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f023 030a 	bic.w	r3, r3, #10
 800a460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	621a      	str	r2, [r3, #32]
}
 800a476:	bf00      	nop
 800a478:	371c      	adds	r7, #28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a482:	b480      	push	{r7}
 800a484:	b087      	sub	sp, #28
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	f023 0210 	bic.w	r2, r3, #16
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a4ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	031b      	lsls	r3, r3, #12
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a4be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	621a      	str	r2, [r3, #32]
}
 800a4d6:	bf00      	nop
 800a4d8:	371c      	adds	r7, #28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b085      	sub	sp, #20
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	f043 0307 	orr.w	r3, r3, #7
 800a504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	609a      	str	r2, [r3, #8]
}
 800a50c:	bf00      	nop
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a518:	b480      	push	{r7}
 800a51a:	b087      	sub	sp, #28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	021a      	lsls	r2, r3, #8
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	431a      	orrs	r2, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	4313      	orrs	r3, r2
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	4313      	orrs	r3, r2
 800a544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	609a      	str	r2, [r3, #8]
}
 800a54c:	bf00      	nop
 800a54e:	371c      	adds	r7, #28
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d101      	bne.n	800a570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a56c:	2302      	movs	r3, #2
 800a56e:	e06d      	b.n	800a64c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2202      	movs	r2, #2
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a30      	ldr	r2, [pc, #192]	@ (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d004      	beq.n	800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a2f      	ldr	r2, [pc, #188]	@ (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d108      	bne.n	800a5b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a5aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a20      	ldr	r2, [pc, #128]	@ (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d022      	beq.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5e2:	d01d      	beq.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a660 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d018      	beq.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a1c      	ldr	r2, [pc, #112]	@ (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d013      	beq.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a1a      	ldr	r2, [pc, #104]	@ (800a668 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d00e      	beq.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a15      	ldr	r2, [pc, #84]	@ (800a65c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d009      	beq.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a16      	ldr	r2, [pc, #88]	@ (800a66c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d004      	beq.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a15      	ldr	r2, [pc, #84]	@ (800a670 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10c      	bne.n	800a63a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a626:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	4313      	orrs	r3, r2
 800a630:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	40010000 	.word	0x40010000
 800a65c:	40010400 	.word	0x40010400
 800a660:	40000400 	.word	0x40000400
 800a664:	40000800 	.word	0x40000800
 800a668:	40000c00 	.word	0x40000c00
 800a66c:	40014000 	.word	0x40014000
 800a670:	40001800 	.word	0x40001800

0800a674 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e040      	b.n	800a744 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7f7 fb80 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2224      	movs	r2, #36	@ 0x24
 800a6dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fece 	bl	800b498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fc67 	bl	800afd0 <UART_SetConfig>
 800a702:	4603      	mov	r3, r0
 800a704:	2b01      	cmp	r3, #1
 800a706:	d101      	bne.n	800a70c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e01b      	b.n	800a744 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a71a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a72a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0201 	orr.w	r2, r2, #1
 800a73a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 ff4d 	bl	800b5dc <UART_CheckIdleState>
 800a742:	4603      	mov	r3, r0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b08a      	sub	sp, #40	@ 0x28
 800a750:	af02      	add	r7, sp, #8
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	4613      	mov	r3, r2
 800a75a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a760:	2b20      	cmp	r3, #32
 800a762:	d177      	bne.n	800a854 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <HAL_UART_Transmit+0x24>
 800a76a:	88fb      	ldrh	r3, [r7, #6]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e070      	b.n	800a856 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2221      	movs	r2, #33	@ 0x21
 800a780:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a782:	f7f7 fe03 	bl	800238c <HAL_GetTick>
 800a786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	88fa      	ldrh	r2, [r7, #6]
 800a78c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	88fa      	ldrh	r2, [r7, #6]
 800a794:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7a0:	d108      	bne.n	800a7b4 <HAL_UART_Transmit+0x68>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d104      	bne.n	800a7b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	61bb      	str	r3, [r7, #24]
 800a7b2:	e003      	b.n	800a7bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a7bc:	e02f      	b.n	800a81e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2180      	movs	r1, #128	@ 0x80
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 ff5e 	bl	800b68a <UART_WaitOnFlagUntilTimeout>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d004      	beq.n	800a7de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e03b      	b.n	800a856 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10b      	bne.n	800a7fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	3302      	adds	r3, #2
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	e007      	b.n	800a80c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	781a      	ldrb	r2, [r3, #0]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	3301      	adds	r3, #1
 800a80a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a812:	b29b      	uxth	r3, r3
 800a814:	3b01      	subs	r3, #1
 800a816:	b29a      	uxth	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a824:	b29b      	uxth	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1c9      	bne.n	800a7be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2200      	movs	r2, #0
 800a832:	2140      	movs	r1, #64	@ 0x40
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 ff28 	bl	800b68a <UART_WaitOnFlagUntilTimeout>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d004      	beq.n	800a84a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2220      	movs	r2, #32
 800a844:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e005      	b.n	800a856 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2220      	movs	r2, #32
 800a84e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	e000      	b.n	800a856 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a854:	2302      	movs	r3, #2
  }
}
 800a856:	4618      	mov	r0, r3
 800a858:	3720      	adds	r7, #32
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
	...

0800a860 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a860:	b480      	push	{r7}
 800a862:	b08b      	sub	sp, #44	@ 0x2c
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	4613      	mov	r3, r2
 800a86c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a872:	2b20      	cmp	r3, #32
 800a874:	d147      	bne.n	800a906 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <HAL_UART_Transmit_IT+0x22>
 800a87c:	88fb      	ldrh	r3, [r7, #6]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e040      	b.n	800a908 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	88fa      	ldrh	r2, [r7, #6]
 800a890:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	88fa      	ldrh	r2, [r7, #6]
 800a898:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2221      	movs	r2, #33	@ 0x21
 800a8ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8b8:	d107      	bne.n	800a8ca <HAL_UART_Transmit_IT+0x6a>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d103      	bne.n	800a8ca <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4a13      	ldr	r2, [pc, #76]	@ (800a914 <HAL_UART_Transmit_IT+0xb4>)
 800a8c6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a8c8:	e002      	b.n	800a8d0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	4a12      	ldr	r2, [pc, #72]	@ (800a918 <HAL_UART_Transmit_IT+0xb8>)
 800a8ce:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ee:	623b      	str	r3, [r7, #32]
 800a8f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f2:	69f9      	ldr	r1, [r7, #28]
 800a8f4:	6a3a      	ldr	r2, [r7, #32]
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1e6      	bne.n	800a8d0 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	e000      	b.n	800a908 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a906:	2302      	movs	r3, #2
  }
}
 800a908:	4618      	mov	r0, r3
 800a90a:	372c      	adds	r7, #44	@ 0x2c
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	0800bce1 	.word	0x0800bce1
 800a918:	0800bc2b 	.word	0x0800bc2b

0800a91c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b08a      	sub	sp, #40	@ 0x28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a930:	2b20      	cmp	r3, #32
 800a932:	d132      	bne.n	800a99a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <HAL_UART_Receive_DMA+0x24>
 800a93a:	88fb      	ldrh	r3, [r7, #6]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e02b      	b.n	800a99c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d018      	beq.n	800a98a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	613b      	str	r3, [r7, #16]
   return(result);
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a96c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a976:	623b      	str	r3, [r7, #32]
 800a978:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	69f9      	ldr	r1, [r7, #28]
 800a97c:	6a3a      	ldr	r2, [r7, #32]
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	61bb      	str	r3, [r7, #24]
   return(result);
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e6      	bne.n	800a958 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a98a:	88fb      	ldrh	r3, [r7, #6]
 800a98c:	461a      	mov	r2, r3
 800a98e:	68b9      	ldr	r1, [r7, #8]
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 fee7 	bl	800b764 <UART_Start_Receive_DMA>
 800a996:	4603      	mov	r3, r0
 800a998:	e000      	b.n	800a99c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a99a:	2302      	movs	r3, #2
  }
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3728      	adds	r7, #40	@ 0x28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b0ba      	sub	sp, #232	@ 0xe8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a9ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a9d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d115      	bne.n	800aa0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e4:	f003 0320 	and.w	r3, r3, #32
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00f      	beq.n	800aa0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f000 82b1 	beq.w	800af64 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	4798      	blx	r3
      }
      return;
 800aa0a:	e2ab      	b.n	800af64 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f000 8117 	beq.w	800ac44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa26:	4b85      	ldr	r3, [pc, #532]	@ (800ac3c <HAL_UART_IRQHandler+0x298>)
 800aa28:	4013      	ands	r3, r2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 810a 	beq.w	800ac44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d011      	beq.n	800aa60 <HAL_UART_IRQHandler+0xbc>
 800aa3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa56:	f043 0201 	orr.w	r2, r3, #1
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d011      	beq.n	800aa90 <HAL_UART_IRQHandler+0xec>
 800aa6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00b      	beq.n	800aa90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa86:	f043 0204 	orr.w	r2, r3, #4
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa94:	f003 0304 	and.w	r3, r3, #4
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d011      	beq.n	800aac0 <HAL_UART_IRQHandler+0x11c>
 800aa9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2204      	movs	r2, #4
 800aaae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aab6:	f043 0202 	orr.w	r2, r3, #2
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aac4:	f003 0308 	and.w	r3, r3, #8
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d017      	beq.n	800aafc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aacc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aad0:	f003 0320 	and.w	r3, r3, #32
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d105      	bne.n	800aae4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aadc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00b      	beq.n	800aafc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2208      	movs	r2, #8
 800aaea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaf2:	f043 0208 	orr.w	r2, r3, #8
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d012      	beq.n	800ab2e <HAL_UART_IRQHandler+0x18a>
 800ab08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00c      	beq.n	800ab2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab24:	f043 0220 	orr.w	r2, r3, #32
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 8217 	beq.w	800af68 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab3e:	f003 0320 	and.w	r3, r3, #32
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00d      	beq.n	800ab62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab76:	2b40      	cmp	r3, #64	@ 0x40
 800ab78:	d005      	beq.n	800ab86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d04f      	beq.n	800ac26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 feb2 	bl	800b8f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab96:	2b40      	cmp	r3, #64	@ 0x40
 800ab98:	d141      	bne.n	800ac1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aba8:	e853 3f00 	ldrex	r3, [r3]
 800abac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800abb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3308      	adds	r3, #8
 800abc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800abc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800abca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800abd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800abd6:	e841 2300 	strex	r3, r2, [r1]
 800abda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800abde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1d9      	bne.n	800ab9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abea:	2b00      	cmp	r3, #0
 800abec:	d013      	beq.n	800ac16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abf2:	4a13      	ldr	r2, [pc, #76]	@ (800ac40 <HAL_UART_IRQHandler+0x29c>)
 800abf4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7f8 fce6 	bl	80035cc <HAL_DMA_Abort_IT>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d017      	beq.n	800ac36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ac10:	4610      	mov	r0, r2
 800ac12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac14:	e00f      	b.n	800ac36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f9c4 	bl	800afa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac1c:	e00b      	b.n	800ac36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f9c0 	bl	800afa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac24:	e007      	b.n	800ac36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f9bc 	bl	800afa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ac34:	e198      	b.n	800af68 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac36:	bf00      	nop
    return;
 800ac38:	e196      	b.n	800af68 <HAL_UART_IRQHandler+0x5c4>
 800ac3a:	bf00      	nop
 800ac3c:	04000120 	.word	0x04000120
 800ac40:	0800bc07 	.word	0x0800bc07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	f040 8166 	bne.w	800af1a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac52:	f003 0310 	and.w	r3, r3, #16
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 815f 	beq.w	800af1a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8158 	beq.w	800af1a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2210      	movs	r2, #16
 800ac70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac7c:	2b40      	cmp	r3, #64	@ 0x40
 800ac7e:	f040 80d0 	bne.w	800ae22 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 80ab 	beq.w	800adee <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aca2:	429a      	cmp	r2, r3
 800aca4:	f080 80a3 	bcs.w	800adee <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acb6:	69db      	ldr	r3, [r3, #28]
 800acb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acbc:	f000 8086 	beq.w	800adcc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800accc:	e853 3f00 	ldrex	r3, [r3]
 800acd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800acd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800acd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	461a      	mov	r2, r3
 800ace6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800acf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acfa:	e841 2300 	strex	r3, r2, [r1]
 800acfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ad02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1da      	bne.n	800acc0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3308      	adds	r3, #8
 800ad10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad14:	e853 3f00 	ldrex	r3, [r3]
 800ad18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad1c:	f023 0301 	bic.w	r3, r3, #1
 800ad20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3308      	adds	r3, #8
 800ad2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ad2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ad32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e1      	bne.n	800ad0a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad50:	e853 3f00 	ldrex	r3, [r3]
 800ad54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3308      	adds	r3, #8
 800ad66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad72:	e841 2300 	strex	r3, r2, [r1]
 800ad76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e3      	bne.n	800ad46 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2220      	movs	r2, #32
 800ad82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad94:	e853 3f00 	ldrex	r3, [r3]
 800ad98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad9c:	f023 0310 	bic.w	r3, r3, #16
 800ada0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adb6:	e841 2300 	strex	r3, r2, [r1]
 800adba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800adbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1e4      	bne.n	800ad8c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7f8 fb90 	bl	80034ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2202      	movs	r2, #2
 800add0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adde:	b29b      	uxth	r3, r3
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f8e6 	bl	800afb8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800adec:	e0be      	b.n	800af6c <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800adf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800adf8:	429a      	cmp	r2, r3
 800adfa:	f040 80b7 	bne.w	800af6c <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae08:	f040 80b0 	bne.w	800af6c <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2202      	movs	r2, #2
 800ae10:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f8cc 	bl	800afb8 <HAL_UARTEx_RxEventCallback>
      return;
 800ae20:	e0a4      	b.n	800af6c <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 8096 	beq.w	800af70 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ae44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f000 8091 	beq.w	800af70 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae56:	e853 3f00 	ldrex	r3, [r3]
 800ae5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae70:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae78:	e841 2300 	strex	r3, r2, [r1]
 800ae7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1e4      	bne.n	800ae4e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	3308      	adds	r3, #8
 800ae8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	e853 3f00 	ldrex	r3, [r3]
 800ae92:	623b      	str	r3, [r7, #32]
   return(result);
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	f023 0301 	bic.w	r3, r3, #1
 800ae9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3308      	adds	r3, #8
 800aea4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aea8:	633a      	str	r2, [r7, #48]	@ 0x30
 800aeaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aeae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeb0:	e841 2300 	strex	r3, r2, [r1]
 800aeb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aeb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e3      	bne.n	800ae84 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	e853 3f00 	ldrex	r3, [r3]
 800aedc:	60fb      	str	r3, [r7, #12]
   return(result);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f023 0310 	bic.w	r3, r3, #16
 800aee4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aef2:	61fb      	str	r3, [r7, #28]
 800aef4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	69b9      	ldr	r1, [r7, #24]
 800aef8:	69fa      	ldr	r2, [r7, #28]
 800aefa:	e841 2300 	strex	r3, r2, [r1]
 800aefe:	617b      	str	r3, [r7, #20]
   return(result);
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e4      	bne.n	800aed0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2202      	movs	r2, #2
 800af0a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f850 	bl	800afb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af18:	e02a      	b.n	800af70 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00e      	beq.n	800af44 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d008      	beq.n	800af44 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af36:	2b00      	cmp	r3, #0
 800af38:	d01c      	beq.n	800af74 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	4798      	blx	r3
    }
    return;
 800af42:	e017      	b.n	800af74 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d012      	beq.n	800af76 <HAL_UART_IRQHandler+0x5d2>
 800af50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00c      	beq.n	800af76 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 ff1f 	bl	800bda0 <UART_EndTransmit_IT>
    return;
 800af62:	e008      	b.n	800af76 <HAL_UART_IRQHandler+0x5d2>
      return;
 800af64:	bf00      	nop
 800af66:	e006      	b.n	800af76 <HAL_UART_IRQHandler+0x5d2>
    return;
 800af68:	bf00      	nop
 800af6a:	e004      	b.n	800af76 <HAL_UART_IRQHandler+0x5d2>
      return;
 800af6c:	bf00      	nop
 800af6e:	e002      	b.n	800af76 <HAL_UART_IRQHandler+0x5d2>
      return;
 800af70:	bf00      	nop
 800af72:	e000      	b.n	800af76 <HAL_UART_IRQHandler+0x5d2>
    return;
 800af74:	bf00      	nop
  }

}
 800af76:	37e8      	adds	r7, #232	@ 0xe8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b088      	sub	sp, #32
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689a      	ldr	r2, [r3, #8]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	431a      	orrs	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	431a      	orrs	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4ba6      	ldr	r3, [pc, #664]	@ (800b294 <UART_SetConfig+0x2c4>)
 800affc:	4013      	ands	r3, r2
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	6812      	ldr	r2, [r2, #0]
 800b002:	6979      	ldr	r1, [r7, #20]
 800b004:	430b      	orrs	r3, r1
 800b006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68da      	ldr	r2, [r3, #12]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	430a      	orrs	r2, r1
 800b01c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a1b      	ldr	r3, [r3, #32]
 800b028:	697a      	ldr	r2, [r7, #20]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	430a      	orrs	r2, r1
 800b040:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a94      	ldr	r2, [pc, #592]	@ (800b298 <UART_SetConfig+0x2c8>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d120      	bne.n	800b08e <UART_SetConfig+0xbe>
 800b04c:	4b93      	ldr	r3, [pc, #588]	@ (800b29c <UART_SetConfig+0x2cc>)
 800b04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	2b03      	cmp	r3, #3
 800b058:	d816      	bhi.n	800b088 <UART_SetConfig+0xb8>
 800b05a:	a201      	add	r2, pc, #4	@ (adr r2, 800b060 <UART_SetConfig+0x90>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b071 	.word	0x0800b071
 800b064:	0800b07d 	.word	0x0800b07d
 800b068:	0800b077 	.word	0x0800b077
 800b06c:	0800b083 	.word	0x0800b083
 800b070:	2301      	movs	r3, #1
 800b072:	77fb      	strb	r3, [r7, #31]
 800b074:	e150      	b.n	800b318 <UART_SetConfig+0x348>
 800b076:	2302      	movs	r3, #2
 800b078:	77fb      	strb	r3, [r7, #31]
 800b07a:	e14d      	b.n	800b318 <UART_SetConfig+0x348>
 800b07c:	2304      	movs	r3, #4
 800b07e:	77fb      	strb	r3, [r7, #31]
 800b080:	e14a      	b.n	800b318 <UART_SetConfig+0x348>
 800b082:	2308      	movs	r3, #8
 800b084:	77fb      	strb	r3, [r7, #31]
 800b086:	e147      	b.n	800b318 <UART_SetConfig+0x348>
 800b088:	2310      	movs	r3, #16
 800b08a:	77fb      	strb	r3, [r7, #31]
 800b08c:	e144      	b.n	800b318 <UART_SetConfig+0x348>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a83      	ldr	r2, [pc, #524]	@ (800b2a0 <UART_SetConfig+0x2d0>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d132      	bne.n	800b0fe <UART_SetConfig+0x12e>
 800b098:	4b80      	ldr	r3, [pc, #512]	@ (800b29c <UART_SetConfig+0x2cc>)
 800b09a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b09e:	f003 030c 	and.w	r3, r3, #12
 800b0a2:	2b0c      	cmp	r3, #12
 800b0a4:	d828      	bhi.n	800b0f8 <UART_SetConfig+0x128>
 800b0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0ac <UART_SetConfig+0xdc>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0e1 	.word	0x0800b0e1
 800b0b0:	0800b0f9 	.word	0x0800b0f9
 800b0b4:	0800b0f9 	.word	0x0800b0f9
 800b0b8:	0800b0f9 	.word	0x0800b0f9
 800b0bc:	0800b0ed 	.word	0x0800b0ed
 800b0c0:	0800b0f9 	.word	0x0800b0f9
 800b0c4:	0800b0f9 	.word	0x0800b0f9
 800b0c8:	0800b0f9 	.word	0x0800b0f9
 800b0cc:	0800b0e7 	.word	0x0800b0e7
 800b0d0:	0800b0f9 	.word	0x0800b0f9
 800b0d4:	0800b0f9 	.word	0x0800b0f9
 800b0d8:	0800b0f9 	.word	0x0800b0f9
 800b0dc:	0800b0f3 	.word	0x0800b0f3
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	77fb      	strb	r3, [r7, #31]
 800b0e4:	e118      	b.n	800b318 <UART_SetConfig+0x348>
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	77fb      	strb	r3, [r7, #31]
 800b0ea:	e115      	b.n	800b318 <UART_SetConfig+0x348>
 800b0ec:	2304      	movs	r3, #4
 800b0ee:	77fb      	strb	r3, [r7, #31]
 800b0f0:	e112      	b.n	800b318 <UART_SetConfig+0x348>
 800b0f2:	2308      	movs	r3, #8
 800b0f4:	77fb      	strb	r3, [r7, #31]
 800b0f6:	e10f      	b.n	800b318 <UART_SetConfig+0x348>
 800b0f8:	2310      	movs	r3, #16
 800b0fa:	77fb      	strb	r3, [r7, #31]
 800b0fc:	e10c      	b.n	800b318 <UART_SetConfig+0x348>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a68      	ldr	r2, [pc, #416]	@ (800b2a4 <UART_SetConfig+0x2d4>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d120      	bne.n	800b14a <UART_SetConfig+0x17a>
 800b108:	4b64      	ldr	r3, [pc, #400]	@ (800b29c <UART_SetConfig+0x2cc>)
 800b10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b10e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b112:	2b30      	cmp	r3, #48	@ 0x30
 800b114:	d013      	beq.n	800b13e <UART_SetConfig+0x16e>
 800b116:	2b30      	cmp	r3, #48	@ 0x30
 800b118:	d814      	bhi.n	800b144 <UART_SetConfig+0x174>
 800b11a:	2b20      	cmp	r3, #32
 800b11c:	d009      	beq.n	800b132 <UART_SetConfig+0x162>
 800b11e:	2b20      	cmp	r3, #32
 800b120:	d810      	bhi.n	800b144 <UART_SetConfig+0x174>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <UART_SetConfig+0x15c>
 800b126:	2b10      	cmp	r3, #16
 800b128:	d006      	beq.n	800b138 <UART_SetConfig+0x168>
 800b12a:	e00b      	b.n	800b144 <UART_SetConfig+0x174>
 800b12c:	2300      	movs	r3, #0
 800b12e:	77fb      	strb	r3, [r7, #31]
 800b130:	e0f2      	b.n	800b318 <UART_SetConfig+0x348>
 800b132:	2302      	movs	r3, #2
 800b134:	77fb      	strb	r3, [r7, #31]
 800b136:	e0ef      	b.n	800b318 <UART_SetConfig+0x348>
 800b138:	2304      	movs	r3, #4
 800b13a:	77fb      	strb	r3, [r7, #31]
 800b13c:	e0ec      	b.n	800b318 <UART_SetConfig+0x348>
 800b13e:	2308      	movs	r3, #8
 800b140:	77fb      	strb	r3, [r7, #31]
 800b142:	e0e9      	b.n	800b318 <UART_SetConfig+0x348>
 800b144:	2310      	movs	r3, #16
 800b146:	77fb      	strb	r3, [r7, #31]
 800b148:	e0e6      	b.n	800b318 <UART_SetConfig+0x348>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a56      	ldr	r2, [pc, #344]	@ (800b2a8 <UART_SetConfig+0x2d8>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d120      	bne.n	800b196 <UART_SetConfig+0x1c6>
 800b154:	4b51      	ldr	r3, [pc, #324]	@ (800b29c <UART_SetConfig+0x2cc>)
 800b156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b15e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b160:	d013      	beq.n	800b18a <UART_SetConfig+0x1ba>
 800b162:	2bc0      	cmp	r3, #192	@ 0xc0
 800b164:	d814      	bhi.n	800b190 <UART_SetConfig+0x1c0>
 800b166:	2b80      	cmp	r3, #128	@ 0x80
 800b168:	d009      	beq.n	800b17e <UART_SetConfig+0x1ae>
 800b16a:	2b80      	cmp	r3, #128	@ 0x80
 800b16c:	d810      	bhi.n	800b190 <UART_SetConfig+0x1c0>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d002      	beq.n	800b178 <UART_SetConfig+0x1a8>
 800b172:	2b40      	cmp	r3, #64	@ 0x40
 800b174:	d006      	beq.n	800b184 <UART_SetConfig+0x1b4>
 800b176:	e00b      	b.n	800b190 <UART_SetConfig+0x1c0>
 800b178:	2300      	movs	r3, #0
 800b17a:	77fb      	strb	r3, [r7, #31]
 800b17c:	e0cc      	b.n	800b318 <UART_SetConfig+0x348>
 800b17e:	2302      	movs	r3, #2
 800b180:	77fb      	strb	r3, [r7, #31]
 800b182:	e0c9      	b.n	800b318 <UART_SetConfig+0x348>
 800b184:	2304      	movs	r3, #4
 800b186:	77fb      	strb	r3, [r7, #31]
 800b188:	e0c6      	b.n	800b318 <UART_SetConfig+0x348>
 800b18a:	2308      	movs	r3, #8
 800b18c:	77fb      	strb	r3, [r7, #31]
 800b18e:	e0c3      	b.n	800b318 <UART_SetConfig+0x348>
 800b190:	2310      	movs	r3, #16
 800b192:	77fb      	strb	r3, [r7, #31]
 800b194:	e0c0      	b.n	800b318 <UART_SetConfig+0x348>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a44      	ldr	r2, [pc, #272]	@ (800b2ac <UART_SetConfig+0x2dc>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d125      	bne.n	800b1ec <UART_SetConfig+0x21c>
 800b1a0:	4b3e      	ldr	r3, [pc, #248]	@ (800b29c <UART_SetConfig+0x2cc>)
 800b1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1ae:	d017      	beq.n	800b1e0 <UART_SetConfig+0x210>
 800b1b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1b4:	d817      	bhi.n	800b1e6 <UART_SetConfig+0x216>
 800b1b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1ba:	d00b      	beq.n	800b1d4 <UART_SetConfig+0x204>
 800b1bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1c0:	d811      	bhi.n	800b1e6 <UART_SetConfig+0x216>
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <UART_SetConfig+0x1fe>
 800b1c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1ca:	d006      	beq.n	800b1da <UART_SetConfig+0x20a>
 800b1cc:	e00b      	b.n	800b1e6 <UART_SetConfig+0x216>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	77fb      	strb	r3, [r7, #31]
 800b1d2:	e0a1      	b.n	800b318 <UART_SetConfig+0x348>
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	77fb      	strb	r3, [r7, #31]
 800b1d8:	e09e      	b.n	800b318 <UART_SetConfig+0x348>
 800b1da:	2304      	movs	r3, #4
 800b1dc:	77fb      	strb	r3, [r7, #31]
 800b1de:	e09b      	b.n	800b318 <UART_SetConfig+0x348>
 800b1e0:	2308      	movs	r3, #8
 800b1e2:	77fb      	strb	r3, [r7, #31]
 800b1e4:	e098      	b.n	800b318 <UART_SetConfig+0x348>
 800b1e6:	2310      	movs	r3, #16
 800b1e8:	77fb      	strb	r3, [r7, #31]
 800b1ea:	e095      	b.n	800b318 <UART_SetConfig+0x348>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a2f      	ldr	r2, [pc, #188]	@ (800b2b0 <UART_SetConfig+0x2e0>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d125      	bne.n	800b242 <UART_SetConfig+0x272>
 800b1f6:	4b29      	ldr	r3, [pc, #164]	@ (800b29c <UART_SetConfig+0x2cc>)
 800b1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b204:	d017      	beq.n	800b236 <UART_SetConfig+0x266>
 800b206:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b20a:	d817      	bhi.n	800b23c <UART_SetConfig+0x26c>
 800b20c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b210:	d00b      	beq.n	800b22a <UART_SetConfig+0x25a>
 800b212:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b216:	d811      	bhi.n	800b23c <UART_SetConfig+0x26c>
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <UART_SetConfig+0x254>
 800b21c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b220:	d006      	beq.n	800b230 <UART_SetConfig+0x260>
 800b222:	e00b      	b.n	800b23c <UART_SetConfig+0x26c>
 800b224:	2301      	movs	r3, #1
 800b226:	77fb      	strb	r3, [r7, #31]
 800b228:	e076      	b.n	800b318 <UART_SetConfig+0x348>
 800b22a:	2302      	movs	r3, #2
 800b22c:	77fb      	strb	r3, [r7, #31]
 800b22e:	e073      	b.n	800b318 <UART_SetConfig+0x348>
 800b230:	2304      	movs	r3, #4
 800b232:	77fb      	strb	r3, [r7, #31]
 800b234:	e070      	b.n	800b318 <UART_SetConfig+0x348>
 800b236:	2308      	movs	r3, #8
 800b238:	77fb      	strb	r3, [r7, #31]
 800b23a:	e06d      	b.n	800b318 <UART_SetConfig+0x348>
 800b23c:	2310      	movs	r3, #16
 800b23e:	77fb      	strb	r3, [r7, #31]
 800b240:	e06a      	b.n	800b318 <UART_SetConfig+0x348>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a1b      	ldr	r2, [pc, #108]	@ (800b2b4 <UART_SetConfig+0x2e4>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d138      	bne.n	800b2be <UART_SetConfig+0x2ee>
 800b24c:	4b13      	ldr	r3, [pc, #76]	@ (800b29c <UART_SetConfig+0x2cc>)
 800b24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b252:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b256:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b25a:	d017      	beq.n	800b28c <UART_SetConfig+0x2bc>
 800b25c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b260:	d82a      	bhi.n	800b2b8 <UART_SetConfig+0x2e8>
 800b262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b266:	d00b      	beq.n	800b280 <UART_SetConfig+0x2b0>
 800b268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b26c:	d824      	bhi.n	800b2b8 <UART_SetConfig+0x2e8>
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d003      	beq.n	800b27a <UART_SetConfig+0x2aa>
 800b272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b276:	d006      	beq.n	800b286 <UART_SetConfig+0x2b6>
 800b278:	e01e      	b.n	800b2b8 <UART_SetConfig+0x2e8>
 800b27a:	2300      	movs	r3, #0
 800b27c:	77fb      	strb	r3, [r7, #31]
 800b27e:	e04b      	b.n	800b318 <UART_SetConfig+0x348>
 800b280:	2302      	movs	r3, #2
 800b282:	77fb      	strb	r3, [r7, #31]
 800b284:	e048      	b.n	800b318 <UART_SetConfig+0x348>
 800b286:	2304      	movs	r3, #4
 800b288:	77fb      	strb	r3, [r7, #31]
 800b28a:	e045      	b.n	800b318 <UART_SetConfig+0x348>
 800b28c:	2308      	movs	r3, #8
 800b28e:	77fb      	strb	r3, [r7, #31]
 800b290:	e042      	b.n	800b318 <UART_SetConfig+0x348>
 800b292:	bf00      	nop
 800b294:	efff69f3 	.word	0xefff69f3
 800b298:	40011000 	.word	0x40011000
 800b29c:	40023800 	.word	0x40023800
 800b2a0:	40004400 	.word	0x40004400
 800b2a4:	40004800 	.word	0x40004800
 800b2a8:	40004c00 	.word	0x40004c00
 800b2ac:	40005000 	.word	0x40005000
 800b2b0:	40011400 	.word	0x40011400
 800b2b4:	40007800 	.word	0x40007800
 800b2b8:	2310      	movs	r3, #16
 800b2ba:	77fb      	strb	r3, [r7, #31]
 800b2bc:	e02c      	b.n	800b318 <UART_SetConfig+0x348>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a72      	ldr	r2, [pc, #456]	@ (800b48c <UART_SetConfig+0x4bc>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d125      	bne.n	800b314 <UART_SetConfig+0x344>
 800b2c8:	4b71      	ldr	r3, [pc, #452]	@ (800b490 <UART_SetConfig+0x4c0>)
 800b2ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b2d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2d6:	d017      	beq.n	800b308 <UART_SetConfig+0x338>
 800b2d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2dc:	d817      	bhi.n	800b30e <UART_SetConfig+0x33e>
 800b2de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2e2:	d00b      	beq.n	800b2fc <UART_SetConfig+0x32c>
 800b2e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2e8:	d811      	bhi.n	800b30e <UART_SetConfig+0x33e>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d003      	beq.n	800b2f6 <UART_SetConfig+0x326>
 800b2ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2f2:	d006      	beq.n	800b302 <UART_SetConfig+0x332>
 800b2f4:	e00b      	b.n	800b30e <UART_SetConfig+0x33e>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	77fb      	strb	r3, [r7, #31]
 800b2fa:	e00d      	b.n	800b318 <UART_SetConfig+0x348>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	77fb      	strb	r3, [r7, #31]
 800b300:	e00a      	b.n	800b318 <UART_SetConfig+0x348>
 800b302:	2304      	movs	r3, #4
 800b304:	77fb      	strb	r3, [r7, #31]
 800b306:	e007      	b.n	800b318 <UART_SetConfig+0x348>
 800b308:	2308      	movs	r3, #8
 800b30a:	77fb      	strb	r3, [r7, #31]
 800b30c:	e004      	b.n	800b318 <UART_SetConfig+0x348>
 800b30e:	2310      	movs	r3, #16
 800b310:	77fb      	strb	r3, [r7, #31]
 800b312:	e001      	b.n	800b318 <UART_SetConfig+0x348>
 800b314:	2310      	movs	r3, #16
 800b316:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	69db      	ldr	r3, [r3, #28]
 800b31c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b320:	d15b      	bne.n	800b3da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b322:	7ffb      	ldrb	r3, [r7, #31]
 800b324:	2b08      	cmp	r3, #8
 800b326:	d828      	bhi.n	800b37a <UART_SetConfig+0x3aa>
 800b328:	a201      	add	r2, pc, #4	@ (adr r2, 800b330 <UART_SetConfig+0x360>)
 800b32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32e:	bf00      	nop
 800b330:	0800b355 	.word	0x0800b355
 800b334:	0800b35d 	.word	0x0800b35d
 800b338:	0800b365 	.word	0x0800b365
 800b33c:	0800b37b 	.word	0x0800b37b
 800b340:	0800b36b 	.word	0x0800b36b
 800b344:	0800b37b 	.word	0x0800b37b
 800b348:	0800b37b 	.word	0x0800b37b
 800b34c:	0800b37b 	.word	0x0800b37b
 800b350:	0800b373 	.word	0x0800b373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b354:	f7fc ff4c 	bl	80081f0 <HAL_RCC_GetPCLK1Freq>
 800b358:	61b8      	str	r0, [r7, #24]
        break;
 800b35a:	e013      	b.n	800b384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b35c:	f7fc ff5c 	bl	8008218 <HAL_RCC_GetPCLK2Freq>
 800b360:	61b8      	str	r0, [r7, #24]
        break;
 800b362:	e00f      	b.n	800b384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b364:	4b4b      	ldr	r3, [pc, #300]	@ (800b494 <UART_SetConfig+0x4c4>)
 800b366:	61bb      	str	r3, [r7, #24]
        break;
 800b368:	e00c      	b.n	800b384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b36a:	f7fc fe6f 	bl	800804c <HAL_RCC_GetSysClockFreq>
 800b36e:	61b8      	str	r0, [r7, #24]
        break;
 800b370:	e008      	b.n	800b384 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b376:	61bb      	str	r3, [r7, #24]
        break;
 800b378:	e004      	b.n	800b384 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b37a:	2300      	movs	r3, #0
 800b37c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	77bb      	strb	r3, [r7, #30]
        break;
 800b382:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d074      	beq.n	800b474 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	005a      	lsls	r2, r3, #1
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	441a      	add	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b39e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	2b0f      	cmp	r3, #15
 800b3a4:	d916      	bls.n	800b3d4 <UART_SetConfig+0x404>
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3ac:	d212      	bcs.n	800b3d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	f023 030f 	bic.w	r3, r3, #15
 800b3b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	085b      	lsrs	r3, r3, #1
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	f003 0307 	and.w	r3, r3, #7
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	89fb      	ldrh	r3, [r7, #14]
 800b3c6:	4313      	orrs	r3, r2
 800b3c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	89fa      	ldrh	r2, [r7, #14]
 800b3d0:	60da      	str	r2, [r3, #12]
 800b3d2:	e04f      	b.n	800b474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	77bb      	strb	r3, [r7, #30]
 800b3d8:	e04c      	b.n	800b474 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3da:	7ffb      	ldrb	r3, [r7, #31]
 800b3dc:	2b08      	cmp	r3, #8
 800b3de:	d828      	bhi.n	800b432 <UART_SetConfig+0x462>
 800b3e0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e8 <UART_SetConfig+0x418>)
 800b3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e6:	bf00      	nop
 800b3e8:	0800b40d 	.word	0x0800b40d
 800b3ec:	0800b415 	.word	0x0800b415
 800b3f0:	0800b41d 	.word	0x0800b41d
 800b3f4:	0800b433 	.word	0x0800b433
 800b3f8:	0800b423 	.word	0x0800b423
 800b3fc:	0800b433 	.word	0x0800b433
 800b400:	0800b433 	.word	0x0800b433
 800b404:	0800b433 	.word	0x0800b433
 800b408:	0800b42b 	.word	0x0800b42b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b40c:	f7fc fef0 	bl	80081f0 <HAL_RCC_GetPCLK1Freq>
 800b410:	61b8      	str	r0, [r7, #24]
        break;
 800b412:	e013      	b.n	800b43c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b414:	f7fc ff00 	bl	8008218 <HAL_RCC_GetPCLK2Freq>
 800b418:	61b8      	str	r0, [r7, #24]
        break;
 800b41a:	e00f      	b.n	800b43c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b41c:	4b1d      	ldr	r3, [pc, #116]	@ (800b494 <UART_SetConfig+0x4c4>)
 800b41e:	61bb      	str	r3, [r7, #24]
        break;
 800b420:	e00c      	b.n	800b43c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b422:	f7fc fe13 	bl	800804c <HAL_RCC_GetSysClockFreq>
 800b426:	61b8      	str	r0, [r7, #24]
        break;
 800b428:	e008      	b.n	800b43c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b42a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b42e:	61bb      	str	r3, [r7, #24]
        break;
 800b430:	e004      	b.n	800b43c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b432:	2300      	movs	r3, #0
 800b434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	77bb      	strb	r3, [r7, #30]
        break;
 800b43a:	bf00      	nop
    }

    if (pclk != 0U)
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d018      	beq.n	800b474 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	085a      	lsrs	r2, r3, #1
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	441a      	add	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	fbb2 f3f3 	udiv	r3, r2, r3
 800b454:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	2b0f      	cmp	r3, #15
 800b45a:	d909      	bls.n	800b470 <UART_SetConfig+0x4a0>
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b462:	d205      	bcs.n	800b470 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	b29a      	uxth	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	60da      	str	r2, [r3, #12]
 800b46e:	e001      	b.n	800b474 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b480:	7fbb      	ldrb	r3, [r7, #30]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3720      	adds	r7, #32
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	40007c00 	.word	0x40007c00
 800b490:	40023800 	.word	0x40023800
 800b494:	00f42400 	.word	0x00f42400

0800b498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a4:	f003 0308 	and.w	r3, r3, #8
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00a      	beq.n	800b4c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c6:	f003 0301 	and.w	r3, r3, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e8:	f003 0302 	and.w	r3, r3, #2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	430a      	orrs	r2, r1
 800b504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50a:	f003 0304 	and.w	r3, r3, #4
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00a      	beq.n	800b528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	430a      	orrs	r2, r1
 800b526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52c:	f003 0310 	and.w	r3, r3, #16
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00a      	beq.n	800b54a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	430a      	orrs	r2, r1
 800b548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b54e:	f003 0320 	and.w	r3, r3, #32
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00a      	beq.n	800b56c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	430a      	orrs	r2, r1
 800b56a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01a      	beq.n	800b5ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	430a      	orrs	r2, r1
 800b58c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b596:	d10a      	bne.n	800b5ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	430a      	orrs	r2, r1
 800b5ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	605a      	str	r2, [r3, #4]
  }
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b08c      	sub	sp, #48	@ 0x30
 800b5e0:	af02      	add	r7, sp, #8
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5ec:	f7f6 fece 	bl	800238c <HAL_GetTick>
 800b5f0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 0308 	and.w	r3, r3, #8
 800b5fc:	2b08      	cmp	r3, #8
 800b5fe:	d12e      	bne.n	800b65e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b608:	2200      	movs	r2, #0
 800b60a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f83b 	bl	800b68a <UART_WaitOnFlagUntilTimeout>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d021      	beq.n	800b65e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	e853 3f00 	ldrex	r3, [r3]
 800b626:	60fb      	str	r3, [r7, #12]
   return(result);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b62e:	623b      	str	r3, [r7, #32]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	461a      	mov	r2, r3
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	61fb      	str	r3, [r7, #28]
 800b63a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63c:	69b9      	ldr	r1, [r7, #24]
 800b63e:	69fa      	ldr	r2, [r7, #28]
 800b640:	e841 2300 	strex	r3, r2, [r1]
 800b644:	617b      	str	r3, [r7, #20]
   return(result);
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1e6      	bne.n	800b61a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2220      	movs	r2, #32
 800b650:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e011      	b.n	800b682 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2220      	movs	r2, #32
 800b662:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2220      	movs	r2, #32
 800b668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2200      	movs	r2, #0
 800b676:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3728      	adds	r7, #40	@ 0x28
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	603b      	str	r3, [r7, #0]
 800b696:	4613      	mov	r3, r2
 800b698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b69a:	e04f      	b.n	800b73c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6a2:	d04b      	beq.n	800b73c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6a4:	f7f6 fe72 	bl	800238c <HAL_GetTick>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	69ba      	ldr	r2, [r7, #24]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d302      	bcc.n	800b6ba <UART_WaitOnFlagUntilTimeout+0x30>
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e04e      	b.n	800b75c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d037      	beq.n	800b73c <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	2b80      	cmp	r3, #128	@ 0x80
 800b6d0:	d034      	beq.n	800b73c <UART_WaitOnFlagUntilTimeout+0xb2>
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b40      	cmp	r3, #64	@ 0x40
 800b6d6:	d031      	beq.n	800b73c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	f003 0308 	and.w	r3, r3, #8
 800b6e2:	2b08      	cmp	r3, #8
 800b6e4:	d110      	bne.n	800b708 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2208      	movs	r2, #8
 800b6ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f000 f8fe 	bl	800b8f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2208      	movs	r2, #8
 800b6f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e029      	b.n	800b75c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b716:	d111      	bne.n	800b73c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b720:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f000 f8e4 	bl	800b8f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2220      	movs	r2, #32
 800b72c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b738:	2303      	movs	r3, #3
 800b73a:	e00f      	b.n	800b75c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	69da      	ldr	r2, [r3, #28]
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	4013      	ands	r3, r2
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	429a      	cmp	r2, r3
 800b74a:	bf0c      	ite	eq
 800b74c:	2301      	moveq	r3, #1
 800b74e:	2300      	movne	r3, #0
 800b750:	b2db      	uxtb	r3, r3
 800b752:	461a      	mov	r2, r3
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	429a      	cmp	r2, r3
 800b758:	d0a0      	beq.n	800b69c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b096      	sub	sp, #88	@ 0x58
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	4613      	mov	r3, r2
 800b770:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	88fa      	ldrh	r2, [r7, #6]
 800b77c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2222      	movs	r2, #34	@ 0x22
 800b78c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b794:	2b00      	cmp	r3, #0
 800b796:	d028      	beq.n	800b7ea <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b79c:	4a3e      	ldr	r2, [pc, #248]	@ (800b898 <UART_Start_Receive_DMA+0x134>)
 800b79e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7a4:	4a3d      	ldr	r2, [pc, #244]	@ (800b89c <UART_Start_Receive_DMA+0x138>)
 800b7a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7ac:	4a3c      	ldr	r2, [pc, #240]	@ (800b8a0 <UART_Start_Receive_DMA+0x13c>)
 800b7ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3324      	adds	r3, #36	@ 0x24
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	88fb      	ldrh	r3, [r7, #6]
 800b7cc:	f7f7 fe2e 	bl	800342c <HAL_DMA_Start_IT>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d009      	beq.n	800b7ea <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2210      	movs	r2, #16
 800b7da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e051      	b.n	800b88e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d018      	beq.n	800b824 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7fa:	e853 3f00 	ldrex	r3, [r3]
 800b7fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b806:	657b      	str	r3, [r7, #84]	@ 0x54
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	461a      	mov	r2, r3
 800b80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b810:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b812:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b814:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b818:	e841 2300 	strex	r3, r2, [r1]
 800b81c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b81e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1e6      	bne.n	800b7f2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3308      	adds	r3, #8
 800b82a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3308      	adds	r3, #8
 800b842:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b844:	637a      	str	r2, [r7, #52]	@ 0x34
 800b846:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b848:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b84a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b84c:	e841 2300 	strex	r3, r2, [r1]
 800b850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e5      	bne.n	800b824 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3308      	adds	r3, #8
 800b85e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	613b      	str	r3, [r7, #16]
   return(result);
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b86e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3308      	adds	r3, #8
 800b876:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b878:	623a      	str	r2, [r7, #32]
 800b87a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	69f9      	ldr	r1, [r7, #28]
 800b87e:	6a3a      	ldr	r2, [r7, #32]
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	61bb      	str	r3, [r7, #24]
   return(result);
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e5      	bne.n	800b858 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3758      	adds	r7, #88	@ 0x58
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	0800b9b9 	.word	0x0800b9b9
 800b89c:	0800bb17 	.word	0x0800bb17
 800b8a0:	0800bb89 	.word	0x0800bb89

0800b8a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b089      	sub	sp, #36	@ 0x24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b8c0:	61fb      	str	r3, [r7, #28]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	61bb      	str	r3, [r7, #24]
 800b8cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6979      	ldr	r1, [r7, #20]
 800b8d0:	69ba      	ldr	r2, [r7, #24]
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e6      	bne.n	800b8ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b8e4:	bf00      	nop
 800b8e6:	3724      	adds	r7, #36	@ 0x24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b095      	sub	sp, #84	@ 0x54
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b900:	e853 3f00 	ldrex	r3, [r3]
 800b904:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b90c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b916:	643b      	str	r3, [r7, #64]	@ 0x40
 800b918:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b91c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b91e:	e841 2300 	strex	r3, r2, [r1]
 800b922:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1e6      	bne.n	800b8f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	3308      	adds	r3, #8
 800b930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	e853 3f00 	ldrex	r3, [r3]
 800b938:	61fb      	str	r3, [r7, #28]
   return(result);
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	f023 0301 	bic.w	r3, r3, #1
 800b940:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3308      	adds	r3, #8
 800b948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b94a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b94c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b952:	e841 2300 	strex	r3, r2, [r1]
 800b956:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1e5      	bne.n	800b92a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b962:	2b01      	cmp	r3, #1
 800b964:	d118      	bne.n	800b998 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	e853 3f00 	ldrex	r3, [r3]
 800b972:	60bb      	str	r3, [r7, #8]
   return(result);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f023 0310 	bic.w	r3, r3, #16
 800b97a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	461a      	mov	r2, r3
 800b982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b984:	61bb      	str	r3, [r7, #24]
 800b986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b988:	6979      	ldr	r1, [r7, #20]
 800b98a:	69ba      	ldr	r2, [r7, #24]
 800b98c:	e841 2300 	strex	r3, r2, [r1]
 800b990:	613b      	str	r3, [r7, #16]
   return(result);
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1e6      	bne.n	800b966 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2220      	movs	r2, #32
 800b99c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b9ac:	bf00      	nop
 800b9ae:	3754      	adds	r7, #84	@ 0x54
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b09c      	sub	sp, #112	@ 0x70
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9ce:	d071      	beq.n	800bab4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b9d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9e0:	e853 3f00 	ldrex	r3, [r3]
 800b9e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b9e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b9f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b9fe:	e841 2300 	strex	r3, r2, [r1]
 800ba02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1e6      	bne.n	800b9d8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba14:	e853 3f00 	ldrex	r3, [r3]
 800ba18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1c:	f023 0301 	bic.w	r3, r3, #1
 800ba20:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3308      	adds	r3, #8
 800ba28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba2a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba32:	e841 2300 	strex	r3, r2, [r1]
 800ba36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1e5      	bne.n	800ba0a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3308      	adds	r3, #8
 800ba44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba46:	6a3b      	ldr	r3, [r7, #32]
 800ba48:	e853 3f00 	ldrex	r3, [r3]
 800ba4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba54:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e5      	bne.n	800ba3e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba74:	2220      	movs	r2, #32
 800ba76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d118      	bne.n	800bab4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	e853 3f00 	ldrex	r3, [r3]
 800ba8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f023 0310 	bic.w	r3, r3, #16
 800ba96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baa0:	61bb      	str	r3, [r7, #24]
 800baa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa4:	6979      	ldr	r1, [r7, #20]
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	e841 2300 	strex	r3, r2, [r1]
 800baac:	613b      	str	r3, [r7, #16]
   return(result);
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e6      	bne.n	800ba82 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab6:	2200      	movs	r2, #0
 800bab8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800babc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d122      	bne.n	800bb08 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800bac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bac4:	2200      	movs	r2, #0
 800bac6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800bad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bad6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bada:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bade:	429a      	cmp	r2, r3
 800bae0:	d204      	bcs.n	800baec <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bae4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bae8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800baec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800baf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	4619      	mov	r1, r3
 800bb00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb02:	f7ff fa59 	bl	800afb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb06:	e002      	b.n	800bb0e <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bb08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb0a:	f013 ff4d 	bl	801f9a8 <HAL_UART_RxCpltCallback>
}
 800bb0e:	bf00      	nop
 800bb10:	3770      	adds	r7, #112	@ 0x70
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b084      	sub	sp, #16
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2201      	movs	r2, #1
 800bb28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d123      	bne.n	800bb7a <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb38:	085b      	lsrs	r3, r3, #1
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb50:	897a      	ldrh	r2, [r7, #10]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d803      	bhi.n	800bb5e <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	897a      	ldrh	r2, [r7, #10]
 800bb5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	4619      	mov	r1, r3
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f7ff fa20 	bl	800afb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb78:	e002      	b.n	800bb80 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff fa08 	bl	800af90 <HAL_UART_RxHalfCpltCallback>
}
 800bb80:	bf00      	nop
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbae:	2b80      	cmp	r3, #128	@ 0x80
 800bbb0:	d109      	bne.n	800bbc6 <UART_DMAError+0x3e>
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	2b21      	cmp	r3, #33	@ 0x21
 800bbb6:	d106      	bne.n	800bbc6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bbc0:	6978      	ldr	r0, [r7, #20]
 800bbc2:	f7ff fe6f 	bl	800b8a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd0:	2b40      	cmp	r3, #64	@ 0x40
 800bbd2:	d109      	bne.n	800bbe8 <UART_DMAError+0x60>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b22      	cmp	r3, #34	@ 0x22
 800bbd8:	d106      	bne.n	800bbe8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bbe2:	6978      	ldr	r0, [r7, #20]
 800bbe4:	f7ff fe84 	bl	800b8f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbee:	f043 0210 	orr.w	r2, r3, #16
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbf8:	6978      	ldr	r0, [r7, #20]
 800bbfa:	f7ff f9d3 	bl	800afa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbfe:	bf00      	nop
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f7ff f9c1 	bl	800afa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b08f      	sub	sp, #60	@ 0x3c
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc36:	2b21      	cmp	r3, #33	@ 0x21
 800bc38:	d14c      	bne.n	800bcd4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d132      	bne.n	800bcac <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	e853 3f00 	ldrex	r3, [r3]
 800bc52:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	461a      	mov	r2, r3
 800bc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc66:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc6c:	e841 2300 	strex	r3, r2, [r1]
 800bc70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1e6      	bne.n	800bc46 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	e853 3f00 	ldrex	r3, [r3]
 800bc84:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc8c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc96:	61bb      	str	r3, [r7, #24]
 800bc98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9a:	6979      	ldr	r1, [r7, #20]
 800bc9c:	69ba      	ldr	r2, [r7, #24]
 800bc9e:	e841 2300 	strex	r3, r2, [r1]
 800bca2:	613b      	str	r3, [r7, #16]
   return(result);
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1e6      	bne.n	800bc78 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bcaa:	e013      	b.n	800bcd4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcb0:	781a      	ldrb	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcbc:	1c5a      	adds	r2, r3, #1
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	3b01      	subs	r3, #1
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bcd4:	bf00      	nop
 800bcd6:	373c      	adds	r7, #60	@ 0x3c
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b091      	sub	sp, #68	@ 0x44
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcec:	2b21      	cmp	r3, #33	@ 0x21
 800bcee:	d151      	bne.n	800bd94 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d132      	bne.n	800bd62 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	e853 3f00 	ldrex	r3, [r3]
 800bd08:	623b      	str	r3, [r7, #32]
   return(result);
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd22:	e841 2300 	strex	r3, r2, [r1]
 800bd26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1e6      	bne.n	800bcfc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	e853 3f00 	ldrex	r3, [r3]
 800bd3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd42:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd4c:	61fb      	str	r3, [r7, #28]
 800bd4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd50:	69b9      	ldr	r1, [r7, #24]
 800bd52:	69fa      	ldr	r2, [r7, #28]
 800bd54:	e841 2300 	strex	r3, r2, [r1]
 800bd58:	617b      	str	r3, [r7, #20]
   return(result);
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e6      	bne.n	800bd2e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bd60:	e018      	b.n	800bd94 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd76:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd7c:	1c9a      	adds	r2, r3, #2
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bd94:	bf00      	nop
 800bd96:	3744      	adds	r7, #68	@ 0x44
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdbc:	61fb      	str	r3, [r7, #28]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	61bb      	str	r3, [r7, #24]
 800bdc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	6979      	ldr	r1, [r7, #20]
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	e841 2300 	strex	r3, r2, [r1]
 800bdd2:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1e6      	bne.n	800bda8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2220      	movs	r2, #32
 800bdde:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff f8c8 	bl	800af7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdec:	bf00      	nop
 800bdee:	3720      	adds	r7, #32
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800bdfa:	4b92      	ldr	r3, [pc, #584]	@ (800c044 <MX_LWIP_Init+0x250>)
 800bdfc:	220a      	movs	r2, #10
 800bdfe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800be00:	4b90      	ldr	r3, [pc, #576]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be02:	2200      	movs	r2, #0
 800be04:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800be06:	4b8f      	ldr	r3, [pc, #572]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be08:	2201      	movs	r2, #1
 800be0a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800be0c:	4b8d      	ldr	r3, [pc, #564]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be0e:	2264      	movs	r2, #100	@ 0x64
 800be10:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800be12:	4b8d      	ldr	r3, [pc, #564]	@ (800c048 <MX_LWIP_Init+0x254>)
 800be14:	22ff      	movs	r2, #255	@ 0xff
 800be16:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800be18:	4b8b      	ldr	r3, [pc, #556]	@ (800c048 <MX_LWIP_Init+0x254>)
 800be1a:	22ff      	movs	r2, #255	@ 0xff
 800be1c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800be1e:	4b8a      	ldr	r3, [pc, #552]	@ (800c048 <MX_LWIP_Init+0x254>)
 800be20:	22ff      	movs	r2, #255	@ 0xff
 800be22:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800be24:	4b88      	ldr	r3, [pc, #544]	@ (800c048 <MX_LWIP_Init+0x254>)
 800be26:	2200      	movs	r2, #0
 800be28:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800be2a:	4b88      	ldr	r3, [pc, #544]	@ (800c04c <MX_LWIP_Init+0x258>)
 800be2c:	220a      	movs	r2, #10
 800be2e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800be30:	4b86      	ldr	r3, [pc, #536]	@ (800c04c <MX_LWIP_Init+0x258>)
 800be32:	2200      	movs	r2, #0
 800be34:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800be36:	4b85      	ldr	r3, [pc, #532]	@ (800c04c <MX_LWIP_Init+0x258>)
 800be38:	2201      	movs	r2, #1
 800be3a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800be3c:	4b83      	ldr	r3, [pc, #524]	@ (800c04c <MX_LWIP_Init+0x258>)
 800be3e:	2265      	movs	r2, #101	@ 0x65
 800be40:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800be42:	2100      	movs	r1, #0
 800be44:	2000      	movs	r0, #0
 800be46:	f006 ff77 	bl	8012d38 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800be4a:	4b7e      	ldr	r3, [pc, #504]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	061a      	lsls	r2, r3, #24
 800be50:	4b7c      	ldr	r3, [pc, #496]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be52:	785b      	ldrb	r3, [r3, #1]
 800be54:	041b      	lsls	r3, r3, #16
 800be56:	431a      	orrs	r2, r3
 800be58:	4b7a      	ldr	r3, [pc, #488]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be5a:	789b      	ldrb	r3, [r3, #2]
 800be5c:	021b      	lsls	r3, r3, #8
 800be5e:	4313      	orrs	r3, r2
 800be60:	4a78      	ldr	r2, [pc, #480]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be62:	78d2      	ldrb	r2, [r2, #3]
 800be64:	4313      	orrs	r3, r2
 800be66:	061a      	lsls	r2, r3, #24
 800be68:	4b76      	ldr	r3, [pc, #472]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	0619      	lsls	r1, r3, #24
 800be6e:	4b75      	ldr	r3, [pc, #468]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be70:	785b      	ldrb	r3, [r3, #1]
 800be72:	041b      	lsls	r3, r3, #16
 800be74:	4319      	orrs	r1, r3
 800be76:	4b73      	ldr	r3, [pc, #460]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be78:	789b      	ldrb	r3, [r3, #2]
 800be7a:	021b      	lsls	r3, r3, #8
 800be7c:	430b      	orrs	r3, r1
 800be7e:	4971      	ldr	r1, [pc, #452]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be80:	78c9      	ldrb	r1, [r1, #3]
 800be82:	430b      	orrs	r3, r1
 800be84:	021b      	lsls	r3, r3, #8
 800be86:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800be8a:	431a      	orrs	r2, r3
 800be8c:	4b6d      	ldr	r3, [pc, #436]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	0619      	lsls	r1, r3, #24
 800be92:	4b6c      	ldr	r3, [pc, #432]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be94:	785b      	ldrb	r3, [r3, #1]
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	4319      	orrs	r1, r3
 800be9a:	4b6a      	ldr	r3, [pc, #424]	@ (800c044 <MX_LWIP_Init+0x250>)
 800be9c:	789b      	ldrb	r3, [r3, #2]
 800be9e:	021b      	lsls	r3, r3, #8
 800bea0:	430b      	orrs	r3, r1
 800bea2:	4968      	ldr	r1, [pc, #416]	@ (800c044 <MX_LWIP_Init+0x250>)
 800bea4:	78c9      	ldrb	r1, [r1, #3]
 800bea6:	430b      	orrs	r3, r1
 800bea8:	0a1b      	lsrs	r3, r3, #8
 800beaa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800beae:	431a      	orrs	r2, r3
 800beb0:	4b64      	ldr	r3, [pc, #400]	@ (800c044 <MX_LWIP_Init+0x250>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	0619      	lsls	r1, r3, #24
 800beb6:	4b63      	ldr	r3, [pc, #396]	@ (800c044 <MX_LWIP_Init+0x250>)
 800beb8:	785b      	ldrb	r3, [r3, #1]
 800beba:	041b      	lsls	r3, r3, #16
 800bebc:	4319      	orrs	r1, r3
 800bebe:	4b61      	ldr	r3, [pc, #388]	@ (800c044 <MX_LWIP_Init+0x250>)
 800bec0:	789b      	ldrb	r3, [r3, #2]
 800bec2:	021b      	lsls	r3, r3, #8
 800bec4:	430b      	orrs	r3, r1
 800bec6:	495f      	ldr	r1, [pc, #380]	@ (800c044 <MX_LWIP_Init+0x250>)
 800bec8:	78c9      	ldrb	r1, [r1, #3]
 800beca:	430b      	orrs	r3, r1
 800becc:	0e1b      	lsrs	r3, r3, #24
 800bece:	4313      	orrs	r3, r2
 800bed0:	4a5f      	ldr	r2, [pc, #380]	@ (800c050 <MX_LWIP_Init+0x25c>)
 800bed2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bed4:	4b5c      	ldr	r3, [pc, #368]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	061a      	lsls	r2, r3, #24
 800beda:	4b5b      	ldr	r3, [pc, #364]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bedc:	785b      	ldrb	r3, [r3, #1]
 800bede:	041b      	lsls	r3, r3, #16
 800bee0:	431a      	orrs	r2, r3
 800bee2:	4b59      	ldr	r3, [pc, #356]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bee4:	789b      	ldrb	r3, [r3, #2]
 800bee6:	021b      	lsls	r3, r3, #8
 800bee8:	4313      	orrs	r3, r2
 800beea:	4a57      	ldr	r2, [pc, #348]	@ (800c048 <MX_LWIP_Init+0x254>)
 800beec:	78d2      	ldrb	r2, [r2, #3]
 800beee:	4313      	orrs	r3, r2
 800bef0:	061a      	lsls	r2, r3, #24
 800bef2:	4b55      	ldr	r3, [pc, #340]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	0619      	lsls	r1, r3, #24
 800bef8:	4b53      	ldr	r3, [pc, #332]	@ (800c048 <MX_LWIP_Init+0x254>)
 800befa:	785b      	ldrb	r3, [r3, #1]
 800befc:	041b      	lsls	r3, r3, #16
 800befe:	4319      	orrs	r1, r3
 800bf00:	4b51      	ldr	r3, [pc, #324]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf02:	789b      	ldrb	r3, [r3, #2]
 800bf04:	021b      	lsls	r3, r3, #8
 800bf06:	430b      	orrs	r3, r1
 800bf08:	494f      	ldr	r1, [pc, #316]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf0a:	78c9      	ldrb	r1, [r1, #3]
 800bf0c:	430b      	orrs	r3, r1
 800bf0e:	021b      	lsls	r3, r3, #8
 800bf10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf14:	431a      	orrs	r2, r3
 800bf16:	4b4c      	ldr	r3, [pc, #304]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	0619      	lsls	r1, r3, #24
 800bf1c:	4b4a      	ldr	r3, [pc, #296]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	041b      	lsls	r3, r3, #16
 800bf22:	4319      	orrs	r1, r3
 800bf24:	4b48      	ldr	r3, [pc, #288]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf26:	789b      	ldrb	r3, [r3, #2]
 800bf28:	021b      	lsls	r3, r3, #8
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	4946      	ldr	r1, [pc, #280]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf2e:	78c9      	ldrb	r1, [r1, #3]
 800bf30:	430b      	orrs	r3, r1
 800bf32:	0a1b      	lsrs	r3, r3, #8
 800bf34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	4b43      	ldr	r3, [pc, #268]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	0619      	lsls	r1, r3, #24
 800bf40:	4b41      	ldr	r3, [pc, #260]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf42:	785b      	ldrb	r3, [r3, #1]
 800bf44:	041b      	lsls	r3, r3, #16
 800bf46:	4319      	orrs	r1, r3
 800bf48:	4b3f      	ldr	r3, [pc, #252]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf4a:	789b      	ldrb	r3, [r3, #2]
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	493d      	ldr	r1, [pc, #244]	@ (800c048 <MX_LWIP_Init+0x254>)
 800bf52:	78c9      	ldrb	r1, [r1, #3]
 800bf54:	430b      	orrs	r3, r1
 800bf56:	0e1b      	lsrs	r3, r3, #24
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	4a3e      	ldr	r2, [pc, #248]	@ (800c054 <MX_LWIP_Init+0x260>)
 800bf5c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bf5e:	4b3b      	ldr	r3, [pc, #236]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	061a      	lsls	r2, r3, #24
 800bf64:	4b39      	ldr	r3, [pc, #228]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bf66:	785b      	ldrb	r3, [r3, #1]
 800bf68:	041b      	lsls	r3, r3, #16
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	4b37      	ldr	r3, [pc, #220]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bf6e:	789b      	ldrb	r3, [r3, #2]
 800bf70:	021b      	lsls	r3, r3, #8
 800bf72:	4313      	orrs	r3, r2
 800bf74:	4a35      	ldr	r2, [pc, #212]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bf76:	78d2      	ldrb	r2, [r2, #3]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	061a      	lsls	r2, r3, #24
 800bf7c:	4b33      	ldr	r3, [pc, #204]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	0619      	lsls	r1, r3, #24
 800bf82:	4b32      	ldr	r3, [pc, #200]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bf84:	785b      	ldrb	r3, [r3, #1]
 800bf86:	041b      	lsls	r3, r3, #16
 800bf88:	4319      	orrs	r1, r3
 800bf8a:	4b30      	ldr	r3, [pc, #192]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bf8c:	789b      	ldrb	r3, [r3, #2]
 800bf8e:	021b      	lsls	r3, r3, #8
 800bf90:	430b      	orrs	r3, r1
 800bf92:	492e      	ldr	r1, [pc, #184]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bf94:	78c9      	ldrb	r1, [r1, #3]
 800bf96:	430b      	orrs	r3, r1
 800bf98:	021b      	lsls	r3, r3, #8
 800bf9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf9e:	431a      	orrs	r2, r3
 800bfa0:	4b2a      	ldr	r3, [pc, #168]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	0619      	lsls	r1, r3, #24
 800bfa6:	4b29      	ldr	r3, [pc, #164]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bfa8:	785b      	ldrb	r3, [r3, #1]
 800bfaa:	041b      	lsls	r3, r3, #16
 800bfac:	4319      	orrs	r1, r3
 800bfae:	4b27      	ldr	r3, [pc, #156]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bfb0:	789b      	ldrb	r3, [r3, #2]
 800bfb2:	021b      	lsls	r3, r3, #8
 800bfb4:	430b      	orrs	r3, r1
 800bfb6:	4925      	ldr	r1, [pc, #148]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bfb8:	78c9      	ldrb	r1, [r1, #3]
 800bfba:	430b      	orrs	r3, r1
 800bfbc:	0a1b      	lsrs	r3, r3, #8
 800bfbe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bfc2:	431a      	orrs	r2, r3
 800bfc4:	4b21      	ldr	r3, [pc, #132]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	0619      	lsls	r1, r3, #24
 800bfca:	4b20      	ldr	r3, [pc, #128]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bfcc:	785b      	ldrb	r3, [r3, #1]
 800bfce:	041b      	lsls	r3, r3, #16
 800bfd0:	4319      	orrs	r1, r3
 800bfd2:	4b1e      	ldr	r3, [pc, #120]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bfd4:	789b      	ldrb	r3, [r3, #2]
 800bfd6:	021b      	lsls	r3, r3, #8
 800bfd8:	430b      	orrs	r3, r1
 800bfda:	491c      	ldr	r1, [pc, #112]	@ (800c04c <MX_LWIP_Init+0x258>)
 800bfdc:	78c9      	ldrb	r1, [r1, #3]
 800bfde:	430b      	orrs	r3, r1
 800bfe0:	0e1b      	lsrs	r3, r3, #24
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	4a1c      	ldr	r2, [pc, #112]	@ (800c058 <MX_LWIP_Init+0x264>)
 800bfe6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bfe8:	4b1c      	ldr	r3, [pc, #112]	@ (800c05c <MX_LWIP_Init+0x268>)
 800bfea:	9302      	str	r3, [sp, #8]
 800bfec:	4b1c      	ldr	r3, [pc, #112]	@ (800c060 <MX_LWIP_Init+0x26c>)
 800bfee:	9301      	str	r3, [sp, #4]
 800bff0:	2300      	movs	r3, #0
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	4b18      	ldr	r3, [pc, #96]	@ (800c058 <MX_LWIP_Init+0x264>)
 800bff6:	4a17      	ldr	r2, [pc, #92]	@ (800c054 <MX_LWIP_Init+0x260>)
 800bff8:	4915      	ldr	r1, [pc, #84]	@ (800c050 <MX_LWIP_Init+0x25c>)
 800bffa:	481a      	ldr	r0, [pc, #104]	@ (800c064 <MX_LWIP_Init+0x270>)
 800bffc:	f007 fd32 	bl	8013a64 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c000:	4818      	ldr	r0, [pc, #96]	@ (800c064 <MX_LWIP_Init+0x270>)
 800c002:	f007 fee1 	bl	8013dc8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c006:	4817      	ldr	r0, [pc, #92]	@ (800c064 <MX_LWIP_Init+0x270>)
 800c008:	f007 feee 	bl	8013de8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c00c:	4916      	ldr	r1, [pc, #88]	@ (800c068 <MX_LWIP_Init+0x274>)
 800c00e:	4815      	ldr	r0, [pc, #84]	@ (800c064 <MX_LWIP_Init+0x270>)
 800c010:	f007 ffec 	bl	8013fec <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c014:	2224      	movs	r2, #36	@ 0x24
 800c016:	2100      	movs	r1, #0
 800c018:	4814      	ldr	r0, [pc, #80]	@ (800c06c <MX_LWIP_Init+0x278>)
 800c01a:	f013 ff3f 	bl	801fe9c <memset>
  attributes.name = "EthLink";
 800c01e:	4b13      	ldr	r3, [pc, #76]	@ (800c06c <MX_LWIP_Init+0x278>)
 800c020:	4a13      	ldr	r2, [pc, #76]	@ (800c070 <MX_LWIP_Init+0x27c>)
 800c022:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c024:	4b11      	ldr	r3, [pc, #68]	@ (800c06c <MX_LWIP_Init+0x278>)
 800c026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c02a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800c02c:	4b0f      	ldr	r3, [pc, #60]	@ (800c06c <MX_LWIP_Init+0x278>)
 800c02e:	2210      	movs	r2, #16
 800c030:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800c032:	4a0e      	ldr	r2, [pc, #56]	@ (800c06c <MX_LWIP_Init+0x278>)
 800c034:	490b      	ldr	r1, [pc, #44]	@ (800c064 <MX_LWIP_Init+0x270>)
 800c036:	480f      	ldr	r0, [pc, #60]	@ (800c074 <MX_LWIP_Init+0x280>)
 800c038:	f000 fdce 	bl	800cbd8 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c03c:	bf00      	nop
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20000b4c 	.word	0x20000b4c
 800c048:	20000b50 	.word	0x20000b50
 800c04c:	20000b54 	.word	0x20000b54
 800c050:	20000b40 	.word	0x20000b40
 800c054:	20000b44 	.word	0x20000b44
 800c058:	20000b48 	.word	0x20000b48
 800c05c:	08012c49 	.word	0x08012c49
 800c060:	0800c5b9 	.word	0x0800c5b9
 800c064:	20000b0c 	.word	0x20000b0c
 800c068:	0800c079 	.word	0x0800c079
 800c06c:	20000b58 	.word	0x20000b58
 800c070:	08020c8c 	.word	0x08020c8c
 800c074:	0800c891 	.word	0x0800c891

0800c078 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b087      	sub	sp, #28
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c09e:	2320      	movs	r3, #32
 800c0a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c0a2:	f3bf 8f4f 	dsb	sy
}
 800c0a6:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c0a8:	e00b      	b.n	800c0c2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c0aa:	4a0d      	ldr	r2, [pc, #52]	@ (800c0e0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dcf0      	bgt.n	800c0aa <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c0c8:	f3bf 8f4f 	dsb	sy
}
 800c0cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c0ce:	f3bf 8f6f 	isb	sy
}
 800c0d2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c0d4:	bf00      	nop
 800c0d6:	371c      	adds	r7, #28
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr
 800c0e0:	e000ed00 	.word	0xe000ed00

0800c0e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c0ec:	4b04      	ldr	r3, [pc, #16]	@ (800c100 <HAL_ETH_RxCpltCallback+0x1c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f001 f897 	bl	800d224 <osSemaphoreRelease>
}
 800c0f6:	bf00      	nop
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	2000cf94 	.word	0x2000cf94

0800c104 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c10c:	4b04      	ldr	r3, [pc, #16]	@ (800c120 <HAL_ETH_TxCpltCallback+0x1c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4618      	mov	r0, r3
 800c112:	f001 f887 	bl	800d224 <osSemaphoreRelease>
}
 800c116:	bf00      	nop
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	2000cf98 	.word	0x2000cf98

0800c124 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7f8 fb90 	bl	8004852 <HAL_ETH_GetDMAError>
 800c132:	4603      	mov	r3, r0
 800c134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c138:	2b80      	cmp	r3, #128	@ 0x80
 800c13a:	d104      	bne.n	800c146 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c13c:	4b04      	ldr	r3, [pc, #16]	@ (800c150 <HAL_ETH_ErrorCallback+0x2c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4618      	mov	r0, r3
 800c142:	f001 f86f 	bl	800d224 <osSemaphoreRelease>
  }
}
 800c146:	bf00      	nop
 800c148:	3708      	adds	r7, #8
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	2000cf94 	.word	0x2000cf94

0800c154 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b0aa      	sub	sp, #168	@ 0xa8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c16e:	f107 0310 	add.w	r3, r7, #16
 800c172:	2264      	movs	r2, #100	@ 0x64
 800c174:	2100      	movs	r1, #0
 800c176:	4618      	mov	r0, r3
 800c178:	f013 fe90 	bl	801fe9c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c17c:	4b89      	ldr	r3, [pc, #548]	@ (800c3a4 <low_level_init+0x250>)
 800c17e:	4a8a      	ldr	r2, [pc, #552]	@ (800c3a8 <low_level_init+0x254>)
 800c180:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c182:	2300      	movs	r3, #0
 800c184:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c186:	2380      	movs	r3, #128	@ 0x80
 800c188:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c18a:	23e1      	movs	r3, #225	@ 0xe1
 800c18c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c18e:	2300      	movs	r3, #0
 800c190:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c192:	2300      	movs	r3, #0
 800c194:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c196:	2300      	movs	r3, #0
 800c198:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c19a:	4a82      	ldr	r2, [pc, #520]	@ (800c3a4 <low_level_init+0x250>)
 800c19c:	f107 0308 	add.w	r3, r7, #8
 800c1a0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c1a2:	4b80      	ldr	r3, [pc, #512]	@ (800c3a4 <low_level_init+0x250>)
 800c1a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c1a8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c1aa:	4b7e      	ldr	r3, [pc, #504]	@ (800c3a4 <low_level_init+0x250>)
 800c1ac:	4a7f      	ldr	r2, [pc, #508]	@ (800c3ac <low_level_init+0x258>)
 800c1ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c1b0:	4b7c      	ldr	r3, [pc, #496]	@ (800c3a4 <low_level_init+0x250>)
 800c1b2:	4a7f      	ldr	r2, [pc, #508]	@ (800c3b0 <low_level_init+0x25c>)
 800c1b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c1b6:	4b7b      	ldr	r3, [pc, #492]	@ (800c3a4 <low_level_init+0x250>)
 800c1b8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c1bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c1be:	4879      	ldr	r0, [pc, #484]	@ (800c3a4 <low_level_init+0x250>)
 800c1c0:	f7f7 fcfe 	bl	8003bc0 <HAL_ETH_Init>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c1ca:	2238      	movs	r2, #56	@ 0x38
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	4879      	ldr	r0, [pc, #484]	@ (800c3b4 <low_level_init+0x260>)
 800c1d0:	f013 fe64 	bl	801fe9c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c1d4:	4b77      	ldr	r3, [pc, #476]	@ (800c3b4 <low_level_init+0x260>)
 800c1d6:	2221      	movs	r2, #33	@ 0x21
 800c1d8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c1da:	4b76      	ldr	r3, [pc, #472]	@ (800c3b4 <low_level_init+0x260>)
 800c1dc:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c1e0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c1e2:	4b74      	ldr	r3, [pc, #464]	@ (800c3b4 <low_level_init+0x260>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c1e8:	4873      	ldr	r0, [pc, #460]	@ (800c3b8 <low_level_init+0x264>)
 800c1ea:	f007 fac3 	bl	8013774 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2206      	movs	r2, #6
 800c1f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c1f6:	4b6b      	ldr	r3, [pc, #428]	@ (800c3a4 <low_level_init+0x250>)
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	781a      	ldrb	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c202:	4b68      	ldr	r3, [pc, #416]	@ (800c3a4 <low_level_init+0x250>)
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	785a      	ldrb	r2, [r3, #1]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c20e:	4b65      	ldr	r3, [pc, #404]	@ (800c3a4 <low_level_init+0x250>)
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	789a      	ldrb	r2, [r3, #2]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c21a:	4b62      	ldr	r3, [pc, #392]	@ (800c3a4 <low_level_init+0x250>)
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	78da      	ldrb	r2, [r3, #3]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c226:	4b5f      	ldr	r3, [pc, #380]	@ (800c3a4 <low_level_init+0x250>)
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	791a      	ldrb	r2, [r3, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c232:	4b5c      	ldr	r3, [pc, #368]	@ (800c3a4 <low_level_init+0x250>)
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	795a      	ldrb	r2, [r3, #5]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c244:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c24c:	f043 030a 	orr.w	r3, r3, #10
 800c250:	b2da      	uxtb	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c258:	2200      	movs	r2, #0
 800c25a:	2100      	movs	r1, #0
 800c25c:	2001      	movs	r0, #1
 800c25e:	f000 fedf 	bl	800d020 <osSemaphoreNew>
 800c262:	4603      	mov	r3, r0
 800c264:	4a55      	ldr	r2, [pc, #340]	@ (800c3bc <low_level_init+0x268>)
 800c266:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c268:	2200      	movs	r2, #0
 800c26a:	2100      	movs	r1, #0
 800c26c:	2001      	movs	r0, #1
 800c26e:	f000 fed7 	bl	800d020 <osSemaphoreNew>
 800c272:	4603      	mov	r3, r0
 800c274:	4a52      	ldr	r2, [pc, #328]	@ (800c3c0 <low_level_init+0x26c>)
 800c276:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c278:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c27c:	2224      	movs	r2, #36	@ 0x24
 800c27e:	2100      	movs	r1, #0
 800c280:	4618      	mov	r0, r3
 800c282:	f013 fe0b 	bl	801fe9c <memset>
  attributes.name = "EthIf";
 800c286:	4b4f      	ldr	r3, [pc, #316]	@ (800c3c4 <low_level_init+0x270>)
 800c288:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c28a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c28e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c292:	2330      	movs	r3, #48	@ 0x30
 800c294:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c298:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c29c:	461a      	mov	r2, r3
 800c29e:	6879      	ldr	r1, [r7, #4]
 800c2a0:	4849      	ldr	r0, [pc, #292]	@ (800c3c8 <low_level_init+0x274>)
 800c2a2:	f000 fc99 	bl	800cbd8 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c2a6:	4949      	ldr	r1, [pc, #292]	@ (800c3cc <low_level_init+0x278>)
 800c2a8:	4849      	ldr	r0, [pc, #292]	@ (800c3d0 <low_level_init+0x27c>)
 800c2aa:	f7f5 ff48 	bl	800213e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c2ae:	4848      	ldr	r0, [pc, #288]	@ (800c3d0 <low_level_init+0x27c>)
 800c2b0:	f7f5 ff77 	bl	80021a2 <LAN8742_Init>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d006      	beq.n	800c2c8 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f007 fe66 	bl	8013f8c <netif_set_link_down>
    netif_set_down(netif);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f007 fdfd 	bl	8013ec0 <netif_set_down>
 800c2c6:	e06a      	b.n	800c39e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c2c8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d164      	bne.n	800c39a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c2d0:	483f      	ldr	r0, [pc, #252]	@ (800c3d0 <low_level_init+0x27c>)
 800c2d2:	f7f5 ffb3 	bl	800223c <LAN8742_GetLinkState>
 800c2d6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c2da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	dc06      	bgt.n	800c2f0 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f007 fe52 	bl	8013f8c <netif_set_link_down>
      netif_set_down(netif);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f007 fde9 	bl	8013ec0 <netif_set_down>
 800c2ee:	e056      	b.n	800c39e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c2f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2f4:	3b02      	subs	r3, #2
 800c2f6:	2b03      	cmp	r3, #3
 800c2f8:	d82a      	bhi.n	800c350 <low_level_init+0x1fc>
 800c2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c300 <low_level_init+0x1ac>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c311 	.word	0x0800c311
 800c304:	0800c323 	.word	0x0800c323
 800c308:	0800c333 	.word	0x0800c333
 800c30c:	0800c343 	.word	0x0800c343
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c314:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c318:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c31c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c320:	e01f      	b.n	800c362 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c322:	2300      	movs	r3, #0
 800c324:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c328:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c32c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c330:	e017      	b.n	800c362 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c33a:	2300      	movs	r3, #0
 800c33c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c340:	e00f      	b.n	800c362 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c342:	2300      	movs	r3, #0
 800c344:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c348:	2300      	movs	r3, #0
 800c34a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c34e:	e008      	b.n	800c362 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c350:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c358:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c35c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c360:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c362:	f107 0310 	add.w	r3, r7, #16
 800c366:	4619      	mov	r1, r3
 800c368:	480e      	ldr	r0, [pc, #56]	@ (800c3a4 <low_level_init+0x250>)
 800c36a:	f7f8 f911 	bl	8004590 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c36e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c372:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c374:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c37a:	f107 0310 	add.w	r3, r7, #16
 800c37e:	4619      	mov	r1, r3
 800c380:	4808      	ldr	r0, [pc, #32]	@ (800c3a4 <low_level_init+0x250>)
 800c382:	f7f8 f9fc 	bl	800477e <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c386:	4807      	ldr	r0, [pc, #28]	@ (800c3a4 <low_level_init+0x250>)
 800c388:	f7f7 fcb4 	bl	8003cf4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f007 fd2b 	bl	8013de8 <netif_set_up>
    netif_set_link_up(netif);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f007 fdc6 	bl	8013f24 <netif_set_link_up>
 800c398:	e001      	b.n	800c39e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c39a:	f7f4 ff3b 	bl	8001214 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c39e:	37a8      	adds	r7, #168	@ 0xa8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	2000cf9c 	.word	0x2000cf9c
 800c3a8:	40028000 	.word	0x40028000
 800c3ac:	2000012c 	.word	0x2000012c
 800c3b0:	2000008c 	.word	0x2000008c
 800c3b4:	2000d04c 	.word	0x2000d04c
 800c3b8:	08024808 	.word	0x08024808
 800c3bc:	2000cf94 	.word	0x2000cf94
 800c3c0:	2000cf98 	.word	0x2000cf98
 800c3c4:	08020c94 	.word	0x08020c94
 800c3c8:	0800c565 	.word	0x0800c565
 800c3cc:	2000000c 	.word	0x2000000c
 800c3d0:	2000d084 	.word	0x2000d084

0800c3d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b092      	sub	sp, #72	@ 0x48
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c3ec:	f107 030c 	add.w	r3, r7, #12
 800c3f0:	2230      	movs	r2, #48	@ 0x30
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f013 fd51 	bl	801fe9c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c3fa:	f107 030c 	add.w	r3, r7, #12
 800c3fe:	2230      	movs	r2, #48	@ 0x30
 800c400:	2100      	movs	r1, #0
 800c402:	4618      	mov	r0, r3
 800c404:	f013 fd4a 	bl	801fe9c <memset>

  for(q = p; q != NULL; q = q->next)
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c40c:	e045      	b.n	800c49a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c410:	2b03      	cmp	r3, #3
 800c412:	d902      	bls.n	800c41a <low_level_output+0x46>
      return ERR_IF;
 800c414:	f06f 030b 	mvn.w	r3, #11
 800c418:	e07f      	b.n	800c51a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c41a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c41c:	6859      	ldr	r1, [r3, #4]
 800c41e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c420:	4613      	mov	r3, r2
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	4413      	add	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	3348      	adds	r3, #72	@ 0x48
 800c42a:	443b      	add	r3, r7
 800c42c:	3b3c      	subs	r3, #60	@ 0x3c
 800c42e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c432:	895b      	ldrh	r3, [r3, #10]
 800c434:	4619      	mov	r1, r3
 800c436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c438:	4613      	mov	r3, r2
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	4413      	add	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	3348      	adds	r3, #72	@ 0x48
 800c442:	443b      	add	r3, r7
 800c444:	3b38      	subs	r3, #56	@ 0x38
 800c446:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d011      	beq.n	800c472 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c44e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c450:	1e5a      	subs	r2, r3, #1
 800c452:	f107 000c 	add.w	r0, r7, #12
 800c456:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c458:	460b      	mov	r3, r1
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	440b      	add	r3, r1
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	18c1      	adds	r1, r0, r3
 800c462:	4613      	mov	r3, r2
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	3348      	adds	r3, #72	@ 0x48
 800c46c:	443b      	add	r3, r7
 800c46e:	3b34      	subs	r3, #52	@ 0x34
 800c470:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d109      	bne.n	800c48e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c47a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c47c:	4613      	mov	r3, r2
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	4413      	add	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	3348      	adds	r3, #72	@ 0x48
 800c486:	443b      	add	r3, r7
 800c488:	3b34      	subs	r3, #52	@ 0x34
 800c48a:	2200      	movs	r2, #0
 800c48c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c48e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c490:	3301      	adds	r3, #1
 800c492:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	643b      	str	r3, [r7, #64]	@ 0x40
 800c49a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1b6      	bne.n	800c40e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	891b      	ldrh	r3, [r3, #8]
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b1f      	ldr	r3, [pc, #124]	@ (800c524 <low_level_output+0x150>)
 800c4a8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c4aa:	4a1e      	ldr	r2, [pc, #120]	@ (800c524 <low_level_output+0x150>)
 800c4ac:	f107 030c 	add.w	r3, r7, #12
 800c4b0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c4b2:	4a1c      	ldr	r2, [pc, #112]	@ (800c524 <low_level_output+0x150>)
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c4b8:	6838      	ldr	r0, [r7, #0]
 800c4ba:	f008 f9eb 	bl	8014894 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c4be:	4919      	ldr	r1, [pc, #100]	@ (800c524 <low_level_output+0x150>)
 800c4c0:	4819      	ldr	r0, [pc, #100]	@ (800c528 <low_level_output+0x154>)
 800c4c2:	f7f7 fd07 	bl	8003ed4 <HAL_ETH_Transmit_IT>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c4d2:	e01b      	b.n	800c50c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c4d4:	4814      	ldr	r0, [pc, #80]	@ (800c528 <low_level_output+0x154>)
 800c4d6:	f7f8 f9af 	bl	8004838 <HAL_ETH_GetError>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	f003 0302 	and.w	r3, r3, #2
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00d      	beq.n	800c500 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c4e4:	4b11      	ldr	r3, [pc, #68]	@ (800c52c <low_level_output+0x158>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 fe33 	bl	800d158 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c4f2:	480d      	ldr	r0, [pc, #52]	@ (800c528 <low_level_output+0x154>)
 800c4f4:	f7f7 fe8e 	bl	8004214 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c4f8:	23fe      	movs	r3, #254	@ 0xfe
 800c4fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c4fe:	e005      	b.n	800c50c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c500:	6838      	ldr	r0, [r7, #0]
 800c502:	f008 f921 	bl	8014748 <pbuf_free>
        errval =  ERR_IF;
 800c506:	23f4      	movs	r3, #244	@ 0xf4
 800c508:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c50c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c510:	f113 0f02 	cmn.w	r3, #2
 800c514:	d0d3      	beq.n	800c4be <low_level_output+0xea>

  return errval;
 800c516:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3748      	adds	r7, #72	@ 0x48
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	2000d04c 	.word	0x2000d04c
 800c528:	2000cf9c 	.word	0x2000cf9c
 800c52c:	2000cf98 	.word	0x2000cf98

0800c530 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c538:	2300      	movs	r3, #0
 800c53a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c53c:	4b07      	ldr	r3, [pc, #28]	@ (800c55c <low_level_input+0x2c>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d105      	bne.n	800c550 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c544:	f107 030c 	add.w	r3, r7, #12
 800c548:	4619      	mov	r1, r3
 800c54a:	4805      	ldr	r0, [pc, #20]	@ (800c560 <low_level_input+0x30>)
 800c54c:	f7f7 fd1e 	bl	8003f8c <HAL_ETH_ReadData>
  }

  return p;
 800c550:	68fb      	ldr	r3, [r7, #12]
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	2000cf90 	.word	0x2000cf90
 800c560:	2000cf9c 	.word	0x2000cf9c

0800c564 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c56c:	2300      	movs	r3, #0
 800c56e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c574:	4b0f      	ldr	r3, [pc, #60]	@ (800c5b4 <ethernetif_input+0x50>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c57c:	4618      	mov	r0, r3
 800c57e:	f000 fdeb 	bl	800d158 <osSemaphoreAcquire>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1f5      	bne.n	800c574 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c588:	68b8      	ldr	r0, [r7, #8]
 800c58a:	f7ff ffd1 	bl	800c530 <low_level_input>
 800c58e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00a      	beq.n	800c5ac <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	68b9      	ldr	r1, [r7, #8]
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	4798      	blx	r3
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d002      	beq.n	800c5ac <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f008 f8ce 	bl	8014748 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1ea      	bne.n	800c588 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c5b2:	e7df      	b.n	800c574 <ethernetif_input+0x10>
 800c5b4:	2000cf94 	.word	0x2000cf94

0800c5b8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d106      	bne.n	800c5d4 <ethernetif_init+0x1c>
 800c5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c600 <ethernetif_init+0x48>)
 800c5c8:	f240 220d 	movw	r2, #525	@ 0x20d
 800c5cc:	490d      	ldr	r1, [pc, #52]	@ (800c604 <ethernetif_init+0x4c>)
 800c5ce:	480e      	ldr	r0, [pc, #56]	@ (800c608 <ethernetif_init+0x50>)
 800c5d0:	f013 fb0c 	bl	801fbec <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2273      	movs	r2, #115	@ 0x73
 800c5d8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2274      	movs	r2, #116	@ 0x74
 800c5e0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a09      	ldr	r2, [pc, #36]	@ (800c60c <ethernetif_init+0x54>)
 800c5e8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a08      	ldr	r2, [pc, #32]	@ (800c610 <ethernetif_init+0x58>)
 800c5ee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7ff fdaf 	bl	800c154 <low_level_init>

  return ERR_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	08020c9c 	.word	0x08020c9c
 800c604:	08020cb8 	.word	0x08020cb8
 800c608:	08020cc8 	.word	0x08020cc8
 800c60c:	0801c409 	.word	0x0801c409
 800c610:	0800c3d5 	.word	0x0800c3d5

0800c614 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c620:	68f9      	ldr	r1, [r7, #12]
 800c622:	4809      	ldr	r0, [pc, #36]	@ (800c648 <pbuf_free_custom+0x34>)
 800c624:	f007 f9c8 	bl	80139b8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c628:	4b08      	ldr	r3, [pc, #32]	@ (800c64c <pbuf_free_custom+0x38>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d107      	bne.n	800c640 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c630:	4b06      	ldr	r3, [pc, #24]	@ (800c64c <pbuf_free_custom+0x38>)
 800c632:	2200      	movs	r2, #0
 800c634:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c636:	4b06      	ldr	r3, [pc, #24]	@ (800c650 <pbuf_free_custom+0x3c>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 fdf2 	bl	800d224 <osSemaphoreRelease>
  }
}
 800c640:	bf00      	nop
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	08024808 	.word	0x08024808
 800c64c:	2000cf90 	.word	0x2000cf90
 800c650:	2000cf94 	.word	0x2000cf94

0800c654 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c658:	f7f5 fe98 	bl	800238c <HAL_GetTick>
 800c65c:	4603      	mov	r3, r0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	bd80      	pop	{r7, pc}
	...

0800c664 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08e      	sub	sp, #56	@ 0x38
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c66c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c670:	2200      	movs	r2, #0
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	605a      	str	r2, [r3, #4]
 800c676:	609a      	str	r2, [r3, #8]
 800c678:	60da      	str	r2, [r3, #12]
 800c67a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a56      	ldr	r2, [pc, #344]	@ (800c7dc <HAL_ETH_MspInit+0x178>)
 800c682:	4293      	cmp	r3, r2
 800c684:	f040 80a6 	bne.w	800c7d4 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c688:	4b55      	ldr	r3, [pc, #340]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c68a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c68c:	4a54      	ldr	r2, [pc, #336]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c68e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c692:	6313      	str	r3, [r2, #48]	@ 0x30
 800c694:	4b52      	ldr	r3, [pc, #328]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c69c:	623b      	str	r3, [r7, #32]
 800c69e:	6a3b      	ldr	r3, [r7, #32]
 800c6a0:	4b4f      	ldr	r3, [pc, #316]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6a4:	4a4e      	ldr	r2, [pc, #312]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6ac:	4b4c      	ldr	r3, [pc, #304]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c6b4:	61fb      	str	r3, [r7, #28]
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	4b49      	ldr	r3, [pc, #292]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6bc:	4a48      	ldr	r2, [pc, #288]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c6c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6c4:	4b46      	ldr	r3, [pc, #280]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6cc:	61bb      	str	r3, [r7, #24]
 800c6ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c6d0:	4b43      	ldr	r3, [pc, #268]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6d4:	4a42      	ldr	r2, [pc, #264]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6d6:	f043 0304 	orr.w	r3, r3, #4
 800c6da:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6dc:	4b40      	ldr	r3, [pc, #256]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e0:	f003 0304 	and.w	r3, r3, #4
 800c6e4:	617b      	str	r3, [r7, #20]
 800c6e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6e8:	4b3d      	ldr	r3, [pc, #244]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ec:	4a3c      	ldr	r2, [pc, #240]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6ee:	f043 0301 	orr.w	r3, r3, #1
 800c6f2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c6f4:	4b3a      	ldr	r3, [pc, #232]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	613b      	str	r3, [r7, #16]
 800c6fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c700:	4b37      	ldr	r3, [pc, #220]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c704:	4a36      	ldr	r2, [pc, #216]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c706:	f043 0302 	orr.w	r3, r3, #2
 800c70a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c70c:	4b34      	ldr	r3, [pc, #208]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c70e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c710:	f003 0302 	and.w	r3, r3, #2
 800c714:	60fb      	str	r3, [r7, #12]
 800c716:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c718:	4b31      	ldr	r3, [pc, #196]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c71c:	4a30      	ldr	r2, [pc, #192]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c71e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c722:	6313      	str	r3, [r2, #48]	@ 0x30
 800c724:	4b2e      	ldr	r3, [pc, #184]	@ (800c7e0 <HAL_ETH_MspInit+0x17c>)
 800c726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c72c:	60bb      	str	r3, [r7, #8]
 800c72e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c730:	2332      	movs	r3, #50	@ 0x32
 800c732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c734:	2302      	movs	r3, #2
 800c736:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c738:	2300      	movs	r3, #0
 800c73a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c73c:	2303      	movs	r3, #3
 800c73e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c740:	230b      	movs	r3, #11
 800c742:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c748:	4619      	mov	r1, r3
 800c74a:	4826      	ldr	r0, [pc, #152]	@ (800c7e4 <HAL_ETH_MspInit+0x180>)
 800c74c:	f7f8 fcae 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c750:	2386      	movs	r3, #134	@ 0x86
 800c752:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c754:	2302      	movs	r3, #2
 800c756:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c75c:	2303      	movs	r3, #3
 800c75e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c760:	230b      	movs	r3, #11
 800c762:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c768:	4619      	mov	r1, r3
 800c76a:	481f      	ldr	r0, [pc, #124]	@ (800c7e8 <HAL_ETH_MspInit+0x184>)
 800c76c:	f7f8 fc9e 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c774:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c776:	2302      	movs	r3, #2
 800c778:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c77e:	2303      	movs	r3, #3
 800c780:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c782:	230b      	movs	r3, #11
 800c784:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c78a:	4619      	mov	r1, r3
 800c78c:	4817      	ldr	r0, [pc, #92]	@ (800c7ec <HAL_ETH_MspInit+0x188>)
 800c78e:	f7f8 fc8d 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c792:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c796:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c798:	2302      	movs	r3, #2
 800c79a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c79c:	2300      	movs	r3, #0
 800c79e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c7a4:	230b      	movs	r3, #11
 800c7a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c7a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4810      	ldr	r0, [pc, #64]	@ (800c7f0 <HAL_ETH_MspInit+0x18c>)
 800c7b0:	f7f8 fc7c 	bl	80050ac <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2105      	movs	r1, #5
 800c7b8:	203d      	movs	r0, #61	@ 0x3d
 800c7ba:	f7f6 fb55 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c7be:	203d      	movs	r0, #61	@ 0x3d
 800c7c0:	f7f6 fb6e 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2105      	movs	r1, #5
 800c7c8:	203e      	movs	r0, #62	@ 0x3e
 800c7ca:	f7f6 fb4d 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c7ce:	203e      	movs	r0, #62	@ 0x3e
 800c7d0:	f7f6 fb66 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c7d4:	bf00      	nop
 800c7d6:	3738      	adds	r7, #56	@ 0x38
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	40028000 	.word	0x40028000
 800c7e0:	40023800 	.word	0x40023800
 800c7e4:	40020800 	.word	0x40020800
 800c7e8:	40020000 	.word	0x40020000
 800c7ec:	40020400 	.word	0x40020400
 800c7f0:	40021800 	.word	0x40021800

0800c7f4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c7f8:	4802      	ldr	r0, [pc, #8]	@ (800c804 <ETH_PHY_IO_Init+0x10>)
 800c7fa:	f7f7 ffdb 	bl	80047b4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	bd80      	pop	{r7, pc}
 800c804:	2000cf9c 	.word	0x2000cf9c

0800c808 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0
  return 0;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	68f9      	ldr	r1, [r7, #12]
 800c82a:	4807      	ldr	r0, [pc, #28]	@ (800c848 <ETH_PHY_IO_ReadReg+0x30>)
 800c82c:	f7f7 fe1c 	bl	8004468 <HAL_ETH_ReadPHYRegister>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d002      	beq.n	800c83c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c83a:	e000      	b.n	800c83e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	2000cf9c 	.word	0x2000cf9c

0800c84c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	68f9      	ldr	r1, [r7, #12]
 800c85e:	4807      	ldr	r0, [pc, #28]	@ (800c87c <ETH_PHY_IO_WriteReg+0x30>)
 800c860:	f7f7 fe4d 	bl	80044fe <HAL_ETH_WritePHYRegister>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c86a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c86e:	e000      	b.n	800c872 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	2000cf9c 	.word	0x2000cf9c

0800c880 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c884:	f7f5 fd82 	bl	800238c <HAL_GetTick>
 800c888:	4603      	mov	r3, r0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	bd80      	pop	{r7, pc}
	...

0800c890 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b0a0      	sub	sp, #128	@ 0x80
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c898:	f107 0308 	add.w	r3, r7, #8
 800c89c:	2264      	movs	r2, #100	@ 0x64
 800c89e:	2100      	movs	r1, #0
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f013 fafb 	bl	801fe9c <memset>
  int32_t PHYLinkState = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c8ba:	483a      	ldr	r0, [pc, #232]	@ (800c9a4 <ethernet_link_thread+0x114>)
 800c8bc:	f7f5 fcbe 	bl	800223c <LAN8742_GetLinkState>
 800c8c0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c8c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8c8:	089b      	lsrs	r3, r3, #2
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00c      	beq.n	800c8ee <ethernet_link_thread+0x5e>
 800c8d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	dc09      	bgt.n	800c8ee <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c8da:	4833      	ldr	r0, [pc, #204]	@ (800c9a8 <ethernet_link_thread+0x118>)
 800c8dc:	f7f7 fa7a 	bl	8003dd4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c8e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c8e2:	f007 faed 	bl	8013ec0 <netif_set_down>
    netif_set_link_down(netif);
 800c8e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c8e8:	f007 fb50 	bl	8013f8c <netif_set_link_down>
 800c8ec:	e055      	b.n	800c99a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c8ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8f4:	f003 0304 	and.w	r3, r3, #4
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d14e      	bne.n	800c99a <ethernet_link_thread+0x10a>
 800c8fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	dd4b      	ble.n	800c99a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c902:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c904:	3b02      	subs	r3, #2
 800c906:	2b03      	cmp	r3, #3
 800c908:	d82a      	bhi.n	800c960 <ethernet_link_thread+0xd0>
 800c90a:	a201      	add	r2, pc, #4	@ (adr r2, 800c910 <ethernet_link_thread+0x80>)
 800c90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c910:	0800c921 	.word	0x0800c921
 800c914:	0800c933 	.word	0x0800c933
 800c918:	0800c943 	.word	0x0800c943
 800c91c:	0800c953 	.word	0x0800c953
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c920:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c924:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c926:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c92a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c92c:	2301      	movs	r3, #1
 800c92e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c930:	e017      	b.n	800c962 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c932:	2300      	movs	r3, #0
 800c934:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c936:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c93a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c93c:	2301      	movs	r3, #1
 800c93e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c940:	e00f      	b.n	800c962 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c942:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c946:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c948:	2300      	movs	r3, #0
 800c94a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c94c:	2301      	movs	r3, #1
 800c94e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c950:	e007      	b.n	800c962 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c952:	2300      	movs	r3, #0
 800c954:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c956:	2300      	movs	r3, #0
 800c958:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c95a:	2301      	movs	r3, #1
 800c95c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c95e:	e000      	b.n	800c962 <ethernet_link_thread+0xd2>
    default:
      break;
 800c960:	bf00      	nop
    }

    if(linkchanged)
 800c962:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c964:	2b00      	cmp	r3, #0
 800c966:	d018      	beq.n	800c99a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c968:	f107 0308 	add.w	r3, r7, #8
 800c96c:	4619      	mov	r1, r3
 800c96e:	480e      	ldr	r0, [pc, #56]	@ (800c9a8 <ethernet_link_thread+0x118>)
 800c970:	f7f7 fe0e 	bl	8004590 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c974:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c976:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c978:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c97a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c97c:	f107 0308 	add.w	r3, r7, #8
 800c980:	4619      	mov	r1, r3
 800c982:	4809      	ldr	r0, [pc, #36]	@ (800c9a8 <ethernet_link_thread+0x118>)
 800c984:	f7f7 fefb 	bl	800477e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c988:	4807      	ldr	r0, [pc, #28]	@ (800c9a8 <ethernet_link_thread+0x118>)
 800c98a:	f7f7 f9b3 	bl	8003cf4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c98e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c990:	f007 fa2a 	bl	8013de8 <netif_set_up>
      netif_set_link_up(netif);
 800c994:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c996:	f007 fac5 	bl	8013f24 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c99a:	2064      	movs	r0, #100	@ 0x64
 800c99c:	f000 f9ca 	bl	800cd34 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c9a0:	e78b      	b.n	800c8ba <ethernet_link_thread+0x2a>
 800c9a2:	bf00      	nop
 800c9a4:	2000d084 	.word	0x2000d084
 800c9a8:	2000cf9c 	.word	0x2000cf9c

0800c9ac <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af02      	add	r7, sp, #8
 800c9b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c9b4:	4812      	ldr	r0, [pc, #72]	@ (800ca00 <HAL_ETH_RxAllocateCallback+0x54>)
 800c9b6:	f006 ff85 	bl	80138c4 <memp_malloc_pool>
 800c9ba:	60f8      	str	r0, [r7, #12]
  if (p)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d014      	beq.n	800c9ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f103 0220 	add.w	r2, r3, #32
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4a0d      	ldr	r2, [pc, #52]	@ (800ca04 <HAL_ETH_RxAllocateCallback+0x58>)
 800c9d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c9da:	9201      	str	r2, [sp, #4]
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2241      	movs	r2, #65	@ 0x41
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	f007 fcf5 	bl	80143d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c9ea:	e005      	b.n	800c9f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ca08 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
}
 800c9f8:	bf00      	nop
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	08024808 	.word	0x08024808
 800ca04:	0800c615 	.word	0x0800c615
 800ca08:	2000cf90 	.word	0x2000cf90

0800ca0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ca22:	2300      	movs	r3, #0
 800ca24:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	3b20      	subs	r3, #32
 800ca2a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	2200      	movs	r2, #0
 800ca36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	887a      	ldrh	r2, [r7, #2]
 800ca3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d103      	bne.n	800ca4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	69fa      	ldr	r2, [r7, #28]
 800ca4a:	601a      	str	r2, [r3, #0]
 800ca4c:	e003      	b.n	800ca56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	69fa      	ldr	r2, [r7, #28]
 800ca54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	69fa      	ldr	r2, [r7, #28]
 800ca5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	61fb      	str	r3, [r7, #28]
 800ca62:	e009      	b.n	800ca78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	891a      	ldrh	r2, [r3, #8]
 800ca68:	887b      	ldrh	r3, [r7, #2]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	61fb      	str	r3, [r7, #28]
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1f2      	bne.n	800ca64 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800ca7e:	887b      	ldrh	r3, [r7, #2]
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff fb02 	bl	800c08c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800ca88:	bf00      	nop
 800ca8a:	3720      	adds	r7, #32
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f007 fe55 	bl	8014748 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800ca9e:	bf00      	nop
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800caa6:	b480      	push	{r7}
 800caa8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800caaa:	bf00      	nop
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caba:	f3ef 8305 	mrs	r3, IPSR
 800cabe:	60bb      	str	r3, [r7, #8]
  return(result);
 800cac0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10f      	bne.n	800cae6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cac6:	f3ef 8310 	mrs	r3, PRIMASK
 800caca:	607b      	str	r3, [r7, #4]
  return(result);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d105      	bne.n	800cade <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cad2:	f3ef 8311 	mrs	r3, BASEPRI
 800cad6:	603b      	str	r3, [r7, #0]
  return(result);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d007      	beq.n	800caee <osKernelInitialize+0x3a>
 800cade:	4b0e      	ldr	r3, [pc, #56]	@ (800cb18 <osKernelInitialize+0x64>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d103      	bne.n	800caee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cae6:	f06f 0305 	mvn.w	r3, #5
 800caea:	60fb      	str	r3, [r7, #12]
 800caec:	e00c      	b.n	800cb08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800caee:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <osKernelInitialize+0x64>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d105      	bne.n	800cb02 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800caf6:	4b08      	ldr	r3, [pc, #32]	@ (800cb18 <osKernelInitialize+0x64>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	e002      	b.n	800cb08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cb02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cb08:	68fb      	ldr	r3, [r7, #12]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	2000d0a4 	.word	0x2000d0a4

0800cb1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb22:	f3ef 8305 	mrs	r3, IPSR
 800cb26:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10f      	bne.n	800cb4e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb2e:	f3ef 8310 	mrs	r3, PRIMASK
 800cb32:	607b      	str	r3, [r7, #4]
  return(result);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d105      	bne.n	800cb46 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb3a:	f3ef 8311 	mrs	r3, BASEPRI
 800cb3e:	603b      	str	r3, [r7, #0]
  return(result);
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d007      	beq.n	800cb56 <osKernelStart+0x3a>
 800cb46:	4b0f      	ldr	r3, [pc, #60]	@ (800cb84 <osKernelStart+0x68>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d103      	bne.n	800cb56 <osKernelStart+0x3a>
    stat = osErrorISR;
 800cb4e:	f06f 0305 	mvn.w	r3, #5
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	e010      	b.n	800cb78 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cb56:	4b0b      	ldr	r3, [pc, #44]	@ (800cb84 <osKernelStart+0x68>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d109      	bne.n	800cb72 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cb5e:	f7ff ffa2 	bl	800caa6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cb62:	4b08      	ldr	r3, [pc, #32]	@ (800cb84 <osKernelStart+0x68>)
 800cb64:	2202      	movs	r2, #2
 800cb66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cb68:	f002 fa8c 	bl	800f084 <vTaskStartScheduler>
      stat = osOK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	60fb      	str	r3, [r7, #12]
 800cb70:	e002      	b.n	800cb78 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cb72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cb78:	68fb      	ldr	r3, [r7, #12]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	2000d0a4 	.word	0x2000d0a4

0800cb88 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb8e:	f3ef 8305 	mrs	r3, IPSR
 800cb92:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb94:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10f      	bne.n	800cbba <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb9a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb9e:	607b      	str	r3, [r7, #4]
  return(result);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d105      	bne.n	800cbb2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cba6:	f3ef 8311 	mrs	r3, BASEPRI
 800cbaa:	603b      	str	r3, [r7, #0]
  return(result);
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d007      	beq.n	800cbc2 <osKernelGetTickCount+0x3a>
 800cbb2:	4b08      	ldr	r3, [pc, #32]	@ (800cbd4 <osKernelGetTickCount+0x4c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d103      	bne.n	800cbc2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cbba:	f002 fb95 	bl	800f2e8 <xTaskGetTickCountFromISR>
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	e002      	b.n	800cbc8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cbc2:	f002 fb81 	bl	800f2c8 <xTaskGetTickCount>
 800cbc6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	2000d0a4 	.word	0x2000d0a4

0800cbd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b090      	sub	sp, #64	@ 0x40
 800cbdc:	af04      	add	r7, sp, #16
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbe8:	f3ef 8305 	mrs	r3, IPSR
 800cbec:	61fb      	str	r3, [r7, #28]
  return(result);
 800cbee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f040 8090 	bne.w	800cd16 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbf6:	f3ef 8310 	mrs	r3, PRIMASK
 800cbfa:	61bb      	str	r3, [r7, #24]
  return(result);
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d105      	bne.n	800cc0e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc02:	f3ef 8311 	mrs	r3, BASEPRI
 800cc06:	617b      	str	r3, [r7, #20]
  return(result);
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <osThreadNew+0x3e>
 800cc0e:	4b44      	ldr	r3, [pc, #272]	@ (800cd20 <osThreadNew+0x148>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d07f      	beq.n	800cd16 <osThreadNew+0x13e>
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d07c      	beq.n	800cd16 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800cc1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc20:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cc22:	2318      	movs	r3, #24
 800cc24:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800cc26:	2300      	movs	r3, #0
 800cc28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800cc2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc2e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d045      	beq.n	800ccc2 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <osThreadNew+0x6c>
        name = attr->name;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	699b      	ldr	r3, [r3, #24]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d002      	beq.n	800cc52 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	699b      	ldr	r3, [r3, #24]
 800cc50:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d008      	beq.n	800cc6a <osThreadNew+0x92>
 800cc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5a:	2b38      	cmp	r3, #56	@ 0x38
 800cc5c:	d805      	bhi.n	800cc6a <osThreadNew+0x92>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f003 0301 	and.w	r3, r3, #1
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <osThreadNew+0x96>
        return (NULL);
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	e054      	b.n	800cd18 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	695b      	ldr	r3, [r3, #20]
 800cc7a:	089b      	lsrs	r3, r3, #2
 800cc7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00e      	beq.n	800cca4 <osThreadNew+0xcc>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	2ba7      	cmp	r3, #167	@ 0xa7
 800cc8c:	d90a      	bls.n	800cca4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d006      	beq.n	800cca4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	695b      	ldr	r3, [r3, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d002      	beq.n	800cca4 <osThreadNew+0xcc>
        mem = 1;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	623b      	str	r3, [r7, #32]
 800cca2:	e010      	b.n	800ccc6 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10c      	bne.n	800ccc6 <osThreadNew+0xee>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d108      	bne.n	800ccc6 <osThreadNew+0xee>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	691b      	ldr	r3, [r3, #16]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d104      	bne.n	800ccc6 <osThreadNew+0xee>
          mem = 0;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	623b      	str	r3, [r7, #32]
 800ccc0:	e001      	b.n	800ccc6 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ccc6:	6a3b      	ldr	r3, [r7, #32]
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d110      	bne.n	800ccee <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ccd4:	9202      	str	r2, [sp, #8]
 800ccd6:	9301      	str	r3, [sp, #4]
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccda:	9300      	str	r3, [sp, #0]
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cce0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f001 ff5a 	bl	800eb9c <xTaskCreateStatic>
 800cce8:	4603      	mov	r3, r0
 800ccea:	613b      	str	r3, [r7, #16]
 800ccec:	e013      	b.n	800cd16 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d110      	bne.n	800cd16 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ccf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	f107 0310 	add.w	r3, r7, #16
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f001 ffae 	bl	800ec68 <xTaskCreate>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d001      	beq.n	800cd16 <osThreadNew+0x13e>
          hTask = NULL;
 800cd12:	2300      	movs	r3, #0
 800cd14:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd16:	693b      	ldr	r3, [r7, #16]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3730      	adds	r7, #48	@ 0x30
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	2000d0a4 	.word	0x2000d0a4

0800cd24 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800cd28:	2000      	movs	r0, #0
 800cd2a:	f002 f8fd 	bl	800ef28 <vTaskDelete>
#endif
  for (;;);
 800cd2e:	bf00      	nop
 800cd30:	e7fd      	b.n	800cd2e <osThreadExit+0xa>
	...

0800cd34 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd3c:	f3ef 8305 	mrs	r3, IPSR
 800cd40:	613b      	str	r3, [r7, #16]
  return(result);
 800cd42:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10f      	bne.n	800cd68 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd48:	f3ef 8310 	mrs	r3, PRIMASK
 800cd4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d105      	bne.n	800cd60 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd54:	f3ef 8311 	mrs	r3, BASEPRI
 800cd58:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d007      	beq.n	800cd70 <osDelay+0x3c>
 800cd60:	4b0a      	ldr	r3, [pc, #40]	@ (800cd8c <osDelay+0x58>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d103      	bne.n	800cd70 <osDelay+0x3c>
    stat = osErrorISR;
 800cd68:	f06f 0305 	mvn.w	r3, #5
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	e007      	b.n	800cd80 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f002 f94a 	bl	800f014 <vTaskDelay>
    }
  }

  return (stat);
 800cd80:	697b      	ldr	r3, [r7, #20]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3718      	adds	r7, #24
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	2000d0a4 	.word	0x2000d0a4

0800cd90 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08a      	sub	sp, #40	@ 0x28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd9c:	f3ef 8305 	mrs	r3, IPSR
 800cda0:	613b      	str	r3, [r7, #16]
  return(result);
 800cda2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f040 8085 	bne.w	800ceb4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdaa:	f3ef 8310 	mrs	r3, PRIMASK
 800cdae:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d105      	bne.n	800cdc2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdb6:	f3ef 8311 	mrs	r3, BASEPRI
 800cdba:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <osMutexNew+0x3a>
 800cdc2:	4b3f      	ldr	r3, [pc, #252]	@ (800cec0 <osMutexNew+0x130>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d074      	beq.n	800ceb4 <osMutexNew+0x124>
    if (attr != NULL) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d003      	beq.n	800cdd8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	623b      	str	r3, [r7, #32]
 800cdd6:	e001      	b.n	800cddc <osMutexNew+0x4c>
    } else {
      type = 0U;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	f003 0301 	and.w	r3, r3, #1
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d002      	beq.n	800cdec <osMutexNew+0x5c>
      rmtx = 1U;
 800cde6:	2301      	movs	r3, #1
 800cde8:	61fb      	str	r3, [r7, #28]
 800cdea:	e001      	b.n	800cdf0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800cdec:	2300      	movs	r3, #0
 800cdee:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800cdf0:	6a3b      	ldr	r3, [r7, #32]
 800cdf2:	f003 0308 	and.w	r3, r3, #8
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d15c      	bne.n	800ceb4 <osMutexNew+0x124>
      mem = -1;
 800cdfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdfe:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d015      	beq.n	800ce32 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d006      	beq.n	800ce1c <osMutexNew+0x8c>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	2b4f      	cmp	r3, #79	@ 0x4f
 800ce14:	d902      	bls.n	800ce1c <osMutexNew+0x8c>
          mem = 1;
 800ce16:	2301      	movs	r3, #1
 800ce18:	61bb      	str	r3, [r7, #24]
 800ce1a:	e00c      	b.n	800ce36 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d108      	bne.n	800ce36 <osMutexNew+0xa6>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68db      	ldr	r3, [r3, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d104      	bne.n	800ce36 <osMutexNew+0xa6>
            mem = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	61bb      	str	r3, [r7, #24]
 800ce30:	e001      	b.n	800ce36 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ce36:	69bb      	ldr	r3, [r7, #24]
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d112      	bne.n	800ce62 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d007      	beq.n	800ce52 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	4619      	mov	r1, r3
 800ce48:	2004      	movs	r0, #4
 800ce4a:	f000 fec0 	bl	800dbce <xQueueCreateMutexStatic>
 800ce4e:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce50:	e016      	b.n	800ce80 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	4619      	mov	r1, r3
 800ce58:	2001      	movs	r0, #1
 800ce5a:	f000 feb8 	bl	800dbce <xQueueCreateMutexStatic>
 800ce5e:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce60:	e00e      	b.n	800ce80 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d10b      	bne.n	800ce80 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d004      	beq.n	800ce78 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ce6e:	2004      	movs	r0, #4
 800ce70:	f000 fe95 	bl	800db9e <xQueueCreateMutex>
 800ce74:	6278      	str	r0, [r7, #36]	@ 0x24
 800ce76:	e003      	b.n	800ce80 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ce78:	2001      	movs	r0, #1
 800ce7a:	f000 fe90 	bl	800db9e <xQueueCreateMutex>
 800ce7e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ce80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00c      	beq.n	800cea0 <osMutexNew+0x110>
        if (attr != NULL) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <osMutexNew+0x104>
          name = attr->name;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	617b      	str	r3, [r7, #20]
 800ce92:	e001      	b.n	800ce98 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ce94:	2300      	movs	r3, #0
 800ce96:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ce98:	6979      	ldr	r1, [r7, #20]
 800ce9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce9c:	f001 fdf6 	bl	800ea8c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d006      	beq.n	800ceb4 <osMutexNew+0x124>
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ceac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceae:	f043 0301 	orr.w	r3, r3, #1
 800ceb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3728      	adds	r7, #40	@ 0x28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	2000d0a4 	.word	0x2000d0a4

0800cec4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f023 0301 	bic.w	r3, r3, #1
 800ced4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cede:	2300      	movs	r3, #0
 800cee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cee2:	f3ef 8305 	mrs	r3, IPSR
 800cee6:	613b      	str	r3, [r7, #16]
  return(result);
 800cee8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d10f      	bne.n	800cf0e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceee:	f3ef 8310 	mrs	r3, PRIMASK
 800cef2:	60fb      	str	r3, [r7, #12]
  return(result);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d105      	bne.n	800cf06 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cefa:	f3ef 8311 	mrs	r3, BASEPRI
 800cefe:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d007      	beq.n	800cf16 <osMutexAcquire+0x52>
 800cf06:	4b1d      	ldr	r3, [pc, #116]	@ (800cf7c <osMutexAcquire+0xb8>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d103      	bne.n	800cf16 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800cf0e:	f06f 0305 	mvn.w	r3, #5
 800cf12:	61fb      	str	r3, [r7, #28]
 800cf14:	e02c      	b.n	800cf70 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d103      	bne.n	800cf24 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800cf1c:	f06f 0303 	mvn.w	r3, #3
 800cf20:	61fb      	str	r3, [r7, #28]
 800cf22:	e025      	b.n	800cf70 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d011      	beq.n	800cf4e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cf2a:	6839      	ldr	r1, [r7, #0]
 800cf2c:	69b8      	ldr	r0, [r7, #24]
 800cf2e:	f000 fea0 	bl	800dc72 <xQueueTakeMutexRecursive>
 800cf32:	4603      	mov	r3, r0
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d01b      	beq.n	800cf70 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800cf3e:	f06f 0301 	mvn.w	r3, #1
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	e014      	b.n	800cf70 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cf46:	f06f 0302 	mvn.w	r3, #2
 800cf4a:	61fb      	str	r3, [r7, #28]
 800cf4c:	e010      	b.n	800cf70 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	69b8      	ldr	r0, [r7, #24]
 800cf52:	f001 fa6b 	bl	800e42c <xQueueSemaphoreTake>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d009      	beq.n	800cf70 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800cf62:	f06f 0301 	mvn.w	r3, #1
 800cf66:	61fb      	str	r3, [r7, #28]
 800cf68:	e002      	b.n	800cf70 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cf6a:	f06f 0302 	mvn.w	r3, #2
 800cf6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf70:	69fb      	ldr	r3, [r7, #28]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3720      	adds	r7, #32
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	2000d0a4 	.word	0x2000d0a4

0800cf80 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f023 0301 	bic.w	r3, r3, #1
 800cf8e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf9c:	f3ef 8305 	mrs	r3, IPSR
 800cfa0:	613b      	str	r3, [r7, #16]
  return(result);
 800cfa2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10f      	bne.n	800cfc8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfa8:	f3ef 8310 	mrs	r3, PRIMASK
 800cfac:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d105      	bne.n	800cfc0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfb4:	f3ef 8311 	mrs	r3, BASEPRI
 800cfb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d007      	beq.n	800cfd0 <osMutexRelease+0x50>
 800cfc0:	4b16      	ldr	r3, [pc, #88]	@ (800d01c <osMutexRelease+0x9c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d103      	bne.n	800cfd0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800cfc8:	f06f 0305 	mvn.w	r3, #5
 800cfcc:	61fb      	str	r3, [r7, #28]
 800cfce:	e01f      	b.n	800d010 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d103      	bne.n	800cfde <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800cfd6:	f06f 0303 	mvn.w	r3, #3
 800cfda:	61fb      	str	r3, [r7, #28]
 800cfdc:	e018      	b.n	800d010 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d009      	beq.n	800cff8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cfe4:	69b8      	ldr	r0, [r7, #24]
 800cfe6:	f000 fe0d 	bl	800dc04 <xQueueGiveMutexRecursive>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d00f      	beq.n	800d010 <osMutexRelease+0x90>
        stat = osErrorResource;
 800cff0:	f06f 0302 	mvn.w	r3, #2
 800cff4:	61fb      	str	r3, [r7, #28]
 800cff6:	e00b      	b.n	800d010 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cff8:	2300      	movs	r3, #0
 800cffa:	2200      	movs	r2, #0
 800cffc:	2100      	movs	r1, #0
 800cffe:	69b8      	ldr	r0, [r7, #24]
 800d000:	f000 fee6 	bl	800ddd0 <xQueueGenericSend>
 800d004:	4603      	mov	r3, r0
 800d006:	2b01      	cmp	r3, #1
 800d008:	d002      	beq.n	800d010 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d00a:	f06f 0302 	mvn.w	r3, #2
 800d00e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d010:	69fb      	ldr	r3, [r7, #28]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3720      	adds	r7, #32
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	2000d0a4 	.word	0x2000d0a4

0800d020 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d020:	b580      	push	{r7, lr}
 800d022:	b08c      	sub	sp, #48	@ 0x30
 800d024:	af02      	add	r7, sp, #8
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d02c:	2300      	movs	r3, #0
 800d02e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d030:	f3ef 8305 	mrs	r3, IPSR
 800d034:	61bb      	str	r3, [r7, #24]
  return(result);
 800d036:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f040 8086 	bne.w	800d14a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d03e:	f3ef 8310 	mrs	r3, PRIMASK
 800d042:	617b      	str	r3, [r7, #20]
  return(result);
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d105      	bne.n	800d056 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d04a:	f3ef 8311 	mrs	r3, BASEPRI
 800d04e:	613b      	str	r3, [r7, #16]
  return(result);
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d003      	beq.n	800d05e <osSemaphoreNew+0x3e>
 800d056:	4b3f      	ldr	r3, [pc, #252]	@ (800d154 <osSemaphoreNew+0x134>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d075      	beq.n	800d14a <osSemaphoreNew+0x12a>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d072      	beq.n	800d14a <osSemaphoreNew+0x12a>
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d86e      	bhi.n	800d14a <osSemaphoreNew+0x12a>
    mem = -1;
 800d06c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d070:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d015      	beq.n	800d0a4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	689b      	ldr	r3, [r3, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d006      	beq.n	800d08e <osSemaphoreNew+0x6e>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	2b4f      	cmp	r3, #79	@ 0x4f
 800d086:	d902      	bls.n	800d08e <osSemaphoreNew+0x6e>
        mem = 1;
 800d088:	2301      	movs	r3, #1
 800d08a:	623b      	str	r3, [r7, #32]
 800d08c:	e00c      	b.n	800d0a8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d108      	bne.n	800d0a8 <osSemaphoreNew+0x88>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d104      	bne.n	800d0a8 <osSemaphoreNew+0x88>
          mem = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	623b      	str	r3, [r7, #32]
 800d0a2:	e001      	b.n	800d0a8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d0a8:	6a3b      	ldr	r3, [r7, #32]
 800d0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0ae:	d04c      	beq.n	800d14a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d128      	bne.n	800d108 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d0b6:	6a3b      	ldr	r3, [r7, #32]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d10a      	bne.n	800d0d2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	2203      	movs	r2, #3
 800d0c2:	9200      	str	r2, [sp, #0]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	f000 fc61 	bl	800d990 <xQueueGenericCreateStatic>
 800d0ce:	6278      	str	r0, [r7, #36]	@ 0x24
 800d0d0:	e005      	b.n	800d0de <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d0d2:	2203      	movs	r2, #3
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	f000 fce1 	bl	800da9e <xQueueGenericCreate>
 800d0dc:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d022      	beq.n	800d12a <osSemaphoreNew+0x10a>
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d01f      	beq.n	800d12a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0f2:	f000 fe6d 	bl	800ddd0 <xQueueGenericSend>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d016      	beq.n	800d12a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d0fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0fe:	f001 fb77 	bl	800e7f0 <vQueueDelete>
            hSemaphore = NULL;
 800d102:	2300      	movs	r3, #0
 800d104:	627b      	str	r3, [r7, #36]	@ 0x24
 800d106:	e010      	b.n	800d12a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d108:	6a3b      	ldr	r3, [r7, #32]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d108      	bne.n	800d120 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	461a      	mov	r2, r3
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f000 fde4 	bl	800dce4 <xQueueCreateCountingSemaphoreStatic>
 800d11c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d11e:	e004      	b.n	800d12a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f000 fe1b 	bl	800dd5e <xQueueCreateCountingSemaphore>
 800d128:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00c      	beq.n	800d14a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d003      	beq.n	800d13e <osSemaphoreNew+0x11e>
          name = attr->name;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	61fb      	str	r3, [r7, #28]
 800d13c:	e001      	b.n	800d142 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d142:	69f9      	ldr	r1, [r7, #28]
 800d144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d146:	f001 fca1 	bl	800ea8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3728      	adds	r7, #40	@ 0x28
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	2000d0a4 	.word	0x2000d0a4

0800d158 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d158:	b580      	push	{r7, lr}
 800d15a:	b088      	sub	sp, #32
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d166:	2300      	movs	r3, #0
 800d168:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d103      	bne.n	800d178 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d170:	f06f 0303 	mvn.w	r3, #3
 800d174:	61fb      	str	r3, [r7, #28]
 800d176:	e04b      	b.n	800d210 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d178:	f3ef 8305 	mrs	r3, IPSR
 800d17c:	617b      	str	r3, [r7, #20]
  return(result);
 800d17e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10f      	bne.n	800d1a4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d184:	f3ef 8310 	mrs	r3, PRIMASK
 800d188:	613b      	str	r3, [r7, #16]
  return(result);
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d105      	bne.n	800d19c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d190:	f3ef 8311 	mrs	r3, BASEPRI
 800d194:	60fb      	str	r3, [r7, #12]
  return(result);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d026      	beq.n	800d1ea <osSemaphoreAcquire+0x92>
 800d19c:	4b1f      	ldr	r3, [pc, #124]	@ (800d21c <osSemaphoreAcquire+0xc4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d122      	bne.n	800d1ea <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d003      	beq.n	800d1b2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d1aa:	f06f 0303 	mvn.w	r3, #3
 800d1ae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d1b0:	e02d      	b.n	800d20e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d1b6:	f107 0308 	add.w	r3, r7, #8
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	2100      	movs	r1, #0
 800d1be:	69b8      	ldr	r0, [r7, #24]
 800d1c0:	f001 fa4c 	bl	800e65c <xQueueReceiveFromISR>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d003      	beq.n	800d1d2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d1ca:	f06f 0302 	mvn.w	r3, #2
 800d1ce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d1d0:	e01d      	b.n	800d20e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d01a      	beq.n	800d20e <osSemaphoreAcquire+0xb6>
 800d1d8:	4b11      	ldr	r3, [pc, #68]	@ (800d220 <osSemaphoreAcquire+0xc8>)
 800d1da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1de:	601a      	str	r2, [r3, #0]
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d1e8:	e011      	b.n	800d20e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	69b8      	ldr	r0, [r7, #24]
 800d1ee:	f001 f91d 	bl	800e42c <xQueueSemaphoreTake>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d00b      	beq.n	800d210 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d003      	beq.n	800d206 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d1fe:	f06f 0301 	mvn.w	r3, #1
 800d202:	61fb      	str	r3, [r7, #28]
 800d204:	e004      	b.n	800d210 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d206:	f06f 0302 	mvn.w	r3, #2
 800d20a:	61fb      	str	r3, [r7, #28]
 800d20c:	e000      	b.n	800d210 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d20e:	bf00      	nop
      }
    }
  }

  return (stat);
 800d210:	69fb      	ldr	r3, [r7, #28]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3720      	adds	r7, #32
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	2000d0a4 	.word	0x2000d0a4
 800d220:	e000ed04 	.word	0xe000ed04

0800d224 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d230:	2300      	movs	r3, #0
 800d232:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d103      	bne.n	800d242 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d23a:	f06f 0303 	mvn.w	r3, #3
 800d23e:	61fb      	str	r3, [r7, #28]
 800d240:	e03e      	b.n	800d2c0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d242:	f3ef 8305 	mrs	r3, IPSR
 800d246:	617b      	str	r3, [r7, #20]
  return(result);
 800d248:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d10f      	bne.n	800d26e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d24e:	f3ef 8310 	mrs	r3, PRIMASK
 800d252:	613b      	str	r3, [r7, #16]
  return(result);
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d105      	bne.n	800d266 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d25a:	f3ef 8311 	mrs	r3, BASEPRI
 800d25e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d01e      	beq.n	800d2a4 <osSemaphoreRelease+0x80>
 800d266:	4b19      	ldr	r3, [pc, #100]	@ (800d2cc <osSemaphoreRelease+0xa8>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d11a      	bne.n	800d2a4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d26e:	2300      	movs	r3, #0
 800d270:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d272:	f107 0308 	add.w	r3, r7, #8
 800d276:	4619      	mov	r1, r3
 800d278:	69b8      	ldr	r0, [r7, #24]
 800d27a:	f000 ff56 	bl	800e12a <xQueueGiveFromISR>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b01      	cmp	r3, #1
 800d282:	d003      	beq.n	800d28c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d284:	f06f 0302 	mvn.w	r3, #2
 800d288:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d28a:	e018      	b.n	800d2be <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d015      	beq.n	800d2be <osSemaphoreRelease+0x9a>
 800d292:	4b0f      	ldr	r3, [pc, #60]	@ (800d2d0 <osSemaphoreRelease+0xac>)
 800d294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d298:	601a      	str	r2, [r3, #0]
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2a2:	e00c      	b.n	800d2be <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	69b8      	ldr	r0, [r7, #24]
 800d2ac:	f000 fd90 	bl	800ddd0 <xQueueGenericSend>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d004      	beq.n	800d2c0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d2b6:	f06f 0302 	mvn.w	r3, #2
 800d2ba:	61fb      	str	r3, [r7, #28]
 800d2bc:	e000      	b.n	800d2c0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2be:	bf00      	nop
    }
  }

  return (stat);
 800d2c0:	69fb      	ldr	r3, [r7, #28]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3720      	adds	r7, #32
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	2000d0a4 	.word	0x2000d0a4
 800d2d0:	e000ed04 	.word	0xe000ed04

0800d2d4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2e0:	f3ef 8305 	mrs	r3, IPSR
 800d2e4:	617b      	str	r3, [r7, #20]
  return(result);
 800d2e6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10f      	bne.n	800d30c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d2f0:	613b      	str	r3, [r7, #16]
  return(result);
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d105      	bne.n	800d304 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2f8:	f3ef 8311 	mrs	r3, BASEPRI
 800d2fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d007      	beq.n	800d314 <osSemaphoreDelete+0x40>
 800d304:	4b0d      	ldr	r3, [pc, #52]	@ (800d33c <osSemaphoreDelete+0x68>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d103      	bne.n	800d314 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d30c:	f06f 0305 	mvn.w	r3, #5
 800d310:	61fb      	str	r3, [r7, #28]
 800d312:	e00e      	b.n	800d332 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d103      	bne.n	800d322 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d31a:	f06f 0303 	mvn.w	r3, #3
 800d31e:	61fb      	str	r3, [r7, #28]
 800d320:	e007      	b.n	800d332 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d322:	69b8      	ldr	r0, [r7, #24]
 800d324:	f001 fbdc 	bl	800eae0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d328:	2300      	movs	r3, #0
 800d32a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d32c:	69b8      	ldr	r0, [r7, #24]
 800d32e:	f001 fa5f 	bl	800e7f0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d332:	69fb      	ldr	r3, [r7, #28]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3720      	adds	r7, #32
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	2000d0a4 	.word	0x2000d0a4

0800d340 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d340:	b580      	push	{r7, lr}
 800d342:	b08c      	sub	sp, #48	@ 0x30
 800d344:	af02      	add	r7, sp, #8
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d34c:	2300      	movs	r3, #0
 800d34e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d350:	f3ef 8305 	mrs	r3, IPSR
 800d354:	61bb      	str	r3, [r7, #24]
  return(result);
 800d356:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d16f      	bne.n	800d43c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d35c:	f3ef 8310 	mrs	r3, PRIMASK
 800d360:	617b      	str	r3, [r7, #20]
  return(result);
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d105      	bne.n	800d374 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d368:	f3ef 8311 	mrs	r3, BASEPRI
 800d36c:	613b      	str	r3, [r7, #16]
  return(result);
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <osMessageQueueNew+0x3c>
 800d374:	4b34      	ldr	r3, [pc, #208]	@ (800d448 <osMessageQueueNew+0x108>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d05f      	beq.n	800d43c <osMessageQueueNew+0xfc>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d05c      	beq.n	800d43c <osMessageQueueNew+0xfc>
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d059      	beq.n	800d43c <osMessageQueueNew+0xfc>
    mem = -1;
 800d388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d38c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d029      	beq.n	800d3e8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d012      	beq.n	800d3c2 <osMessageQueueNew+0x82>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	2b4f      	cmp	r3, #79	@ 0x4f
 800d3a2:	d90e      	bls.n	800d3c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00a      	beq.n	800d3c2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	695a      	ldr	r2, [r3, #20]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	68b9      	ldr	r1, [r7, #8]
 800d3b4:	fb01 f303 	mul.w	r3, r1, r3
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d302      	bcc.n	800d3c2 <osMessageQueueNew+0x82>
        mem = 1;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	623b      	str	r3, [r7, #32]
 800d3c0:	e014      	b.n	800d3ec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d110      	bne.n	800d3ec <osMessageQueueNew+0xac>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10c      	bne.n	800d3ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d108      	bne.n	800d3ec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d104      	bne.n	800d3ec <osMessageQueueNew+0xac>
          mem = 0;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	623b      	str	r3, [r7, #32]
 800d3e6:	e001      	b.n	800d3ec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d10b      	bne.n	800d40a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	691a      	ldr	r2, [r3, #16]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	9100      	str	r1, [sp, #0]
 800d3fe:	68b9      	ldr	r1, [r7, #8]
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f000 fac5 	bl	800d990 <xQueueGenericCreateStatic>
 800d406:	6278      	str	r0, [r7, #36]	@ 0x24
 800d408:	e008      	b.n	800d41c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d40a:	6a3b      	ldr	r3, [r7, #32]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d105      	bne.n	800d41c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d410:	2200      	movs	r2, #0
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f000 fb42 	bl	800da9e <xQueueGenericCreate>
 800d41a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00c      	beq.n	800d43c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d003      	beq.n	800d430 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	61fb      	str	r3, [r7, #28]
 800d42e:	e001      	b.n	800d434 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d430:	2300      	movs	r3, #0
 800d432:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d434:	69f9      	ldr	r1, [r7, #28]
 800d436:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d438:	f001 fb28 	bl	800ea8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3728      	adds	r7, #40	@ 0x28
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	2000d0a4 	.word	0x2000d0a4

0800d44c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08a      	sub	sp, #40	@ 0x28
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	603b      	str	r3, [r7, #0]
 800d458:	4613      	mov	r3, r2
 800d45a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d460:	2300      	movs	r3, #0
 800d462:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d464:	f3ef 8305 	mrs	r3, IPSR
 800d468:	61fb      	str	r3, [r7, #28]
  return(result);
 800d46a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10f      	bne.n	800d490 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d470:	f3ef 8310 	mrs	r3, PRIMASK
 800d474:	61bb      	str	r3, [r7, #24]
  return(result);
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d105      	bne.n	800d488 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d47c:	f3ef 8311 	mrs	r3, BASEPRI
 800d480:	617b      	str	r3, [r7, #20]
  return(result);
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d02c      	beq.n	800d4e2 <osMessageQueuePut+0x96>
 800d488:	4b28      	ldr	r3, [pc, #160]	@ (800d52c <osMessageQueuePut+0xe0>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d128      	bne.n	800d4e2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d490:	6a3b      	ldr	r3, [r7, #32]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d005      	beq.n	800d4a2 <osMessageQueuePut+0x56>
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <osMessageQueuePut+0x56>
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d003      	beq.n	800d4aa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d4a2:	f06f 0303 	mvn.w	r3, #3
 800d4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4a8:	e039      	b.n	800d51e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d4ae:	f107 0210 	add.w	r2, r7, #16
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	68b9      	ldr	r1, [r7, #8]
 800d4b6:	6a38      	ldr	r0, [r7, #32]
 800d4b8:	f000 fd94 	bl	800dfe4 <xQueueGenericSendFromISR>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d003      	beq.n	800d4ca <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d4c2:	f06f 0302 	mvn.w	r3, #2
 800d4c6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4c8:	e029      	b.n	800d51e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d026      	beq.n	800d51e <osMessageQueuePut+0xd2>
 800d4d0:	4b17      	ldr	r3, [pc, #92]	@ (800d530 <osMessageQueuePut+0xe4>)
 800d4d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4d6:	601a      	str	r2, [r3, #0]
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d4e0:	e01d      	b.n	800d51e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <osMessageQueuePut+0xa2>
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d103      	bne.n	800d4f6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d4ee:	f06f 0303 	mvn.w	r3, #3
 800d4f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4f4:	e014      	b.n	800d520 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	68b9      	ldr	r1, [r7, #8]
 800d4fc:	6a38      	ldr	r0, [r7, #32]
 800d4fe:	f000 fc67 	bl	800ddd0 <xQueueGenericSend>
 800d502:	4603      	mov	r3, r0
 800d504:	2b01      	cmp	r3, #1
 800d506:	d00b      	beq.n	800d520 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d003      	beq.n	800d516 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d50e:	f06f 0301 	mvn.w	r3, #1
 800d512:	627b      	str	r3, [r7, #36]	@ 0x24
 800d514:	e004      	b.n	800d520 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d516:	f06f 0302 	mvn.w	r3, #2
 800d51a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d51c:	e000      	b.n	800d520 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d51e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d522:	4618      	mov	r0, r3
 800d524:	3728      	adds	r7, #40	@ 0x28
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	2000d0a4 	.word	0x2000d0a4
 800d530:	e000ed04 	.word	0xe000ed04

0800d534 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d534:	b580      	push	{r7, lr}
 800d536:	b08a      	sub	sp, #40	@ 0x28
 800d538:	af00      	add	r7, sp, #0
 800d53a:	60f8      	str	r0, [r7, #12]
 800d53c:	60b9      	str	r1, [r7, #8]
 800d53e:	607a      	str	r2, [r7, #4]
 800d540:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d546:	2300      	movs	r3, #0
 800d548:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d54a:	f3ef 8305 	mrs	r3, IPSR
 800d54e:	61fb      	str	r3, [r7, #28]
  return(result);
 800d550:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10f      	bne.n	800d576 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d556:	f3ef 8310 	mrs	r3, PRIMASK
 800d55a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d105      	bne.n	800d56e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d562:	f3ef 8311 	mrs	r3, BASEPRI
 800d566:	617b      	str	r3, [r7, #20]
  return(result);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d02c      	beq.n	800d5c8 <osMessageQueueGet+0x94>
 800d56e:	4b28      	ldr	r3, [pc, #160]	@ (800d610 <osMessageQueueGet+0xdc>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b02      	cmp	r3, #2
 800d574:	d128      	bne.n	800d5c8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d576:	6a3b      	ldr	r3, [r7, #32]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d005      	beq.n	800d588 <osMessageQueueGet+0x54>
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <osMessageQueueGet+0x54>
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d003      	beq.n	800d590 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d588:	f06f 0303 	mvn.w	r3, #3
 800d58c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d58e:	e038      	b.n	800d602 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d590:	2300      	movs	r3, #0
 800d592:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d594:	f107 0310 	add.w	r3, r7, #16
 800d598:	461a      	mov	r2, r3
 800d59a:	68b9      	ldr	r1, [r7, #8]
 800d59c:	6a38      	ldr	r0, [r7, #32]
 800d59e:	f001 f85d 	bl	800e65c <xQueueReceiveFromISR>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d003      	beq.n	800d5b0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d5a8:	f06f 0302 	mvn.w	r3, #2
 800d5ac:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d5ae:	e028      	b.n	800d602 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d025      	beq.n	800d602 <osMessageQueueGet+0xce>
 800d5b6:	4b17      	ldr	r3, [pc, #92]	@ (800d614 <osMessageQueueGet+0xe0>)
 800d5b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d5c6:	e01c      	b.n	800d602 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <osMessageQueueGet+0xa0>
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d103      	bne.n	800d5dc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d5d4:	f06f 0303 	mvn.w	r3, #3
 800d5d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5da:	e013      	b.n	800d604 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d5dc:	683a      	ldr	r2, [r7, #0]
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	6a38      	ldr	r0, [r7, #32]
 800d5e2:	f000 fe3b 	bl	800e25c <xQueueReceive>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d00b      	beq.n	800d604 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d003      	beq.n	800d5fa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d5f2:	f06f 0301 	mvn.w	r3, #1
 800d5f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5f8:	e004      	b.n	800d604 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d5fa:	f06f 0302 	mvn.w	r3, #2
 800d5fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800d600:	e000      	b.n	800d604 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d602:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d606:	4618      	mov	r0, r3
 800d608:	3728      	adds	r7, #40	@ 0x28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	2000d0a4 	.word	0x2000d0a4
 800d614:	e000ed04 	.word	0xe000ed04

0800d618 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d102      	bne.n	800d630 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	61fb      	str	r3, [r7, #28]
 800d62e:	e01e      	b.n	800d66e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d630:	f3ef 8305 	mrs	r3, IPSR
 800d634:	617b      	str	r3, [r7, #20]
  return(result);
 800d636:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10f      	bne.n	800d65c <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d63c:	f3ef 8310 	mrs	r3, PRIMASK
 800d640:	613b      	str	r3, [r7, #16]
  return(result);
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d105      	bne.n	800d654 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d648:	f3ef 8311 	mrs	r3, BASEPRI
 800d64c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d008      	beq.n	800d666 <osMessageQueueGetCount+0x4e>
 800d654:	4b08      	ldr	r3, [pc, #32]	@ (800d678 <osMessageQueueGetCount+0x60>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d104      	bne.n	800d666 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d65c:	69b8      	ldr	r0, [r7, #24]
 800d65e:	f001 f8a6 	bl	800e7ae <uxQueueMessagesWaitingFromISR>
 800d662:	61f8      	str	r0, [r7, #28]
 800d664:	e003      	b.n	800d66e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d666:	69b8      	ldr	r0, [r7, #24]
 800d668:	f001 f880 	bl	800e76c <uxQueueMessagesWaiting>
 800d66c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d66e:	69fb      	ldr	r3, [r7, #28]
}
 800d670:	4618      	mov	r0, r3
 800d672:	3720      	adds	r7, #32
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	2000d0a4 	.word	0x2000d0a4

0800d67c <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d688:	f3ef 8305 	mrs	r3, IPSR
 800d68c:	617b      	str	r3, [r7, #20]
  return(result);
 800d68e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10f      	bne.n	800d6b4 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d694:	f3ef 8310 	mrs	r3, PRIMASK
 800d698:	613b      	str	r3, [r7, #16]
  return(result);
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d105      	bne.n	800d6ac <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6a0:	f3ef 8311 	mrs	r3, BASEPRI
 800d6a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d007      	beq.n	800d6bc <osMessageQueueDelete+0x40>
 800d6ac:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e4 <osMessageQueueDelete+0x68>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d103      	bne.n	800d6bc <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800d6b4:	f06f 0305 	mvn.w	r3, #5
 800d6b8:	61fb      	str	r3, [r7, #28]
 800d6ba:	e00e      	b.n	800d6da <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d103      	bne.n	800d6ca <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800d6c2:	f06f 0303 	mvn.w	r3, #3
 800d6c6:	61fb      	str	r3, [r7, #28]
 800d6c8:	e007      	b.n	800d6da <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d6ca:	69b8      	ldr	r0, [r7, #24]
 800d6cc:	f001 fa08 	bl	800eae0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800d6d4:	69b8      	ldr	r0, [r7, #24]
 800d6d6:	f001 f88b 	bl	800e7f0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d6da:	69fb      	ldr	r3, [r7, #28]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3720      	adds	r7, #32
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	2000d0a4 	.word	0x2000d0a4

0800d6e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	4a07      	ldr	r2, [pc, #28]	@ (800d714 <vApplicationGetIdleTaskMemory+0x2c>)
 800d6f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	4a06      	ldr	r2, [pc, #24]	@ (800d718 <vApplicationGetIdleTaskMemory+0x30>)
 800d6fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d706:	601a      	str	r2, [r3, #0]
}
 800d708:	bf00      	nop
 800d70a:	3714      	adds	r7, #20
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr
 800d714:	2000d0a8 	.word	0x2000d0a8
 800d718:	2000d150 	.word	0x2000d150

0800d71c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	4a07      	ldr	r2, [pc, #28]	@ (800d748 <vApplicationGetTimerTaskMemory+0x2c>)
 800d72c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	4a06      	ldr	r2, [pc, #24]	@ (800d74c <vApplicationGetTimerTaskMemory+0x30>)
 800d732:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d73a:	601a      	str	r2, [r3, #0]
}
 800d73c:	bf00      	nop
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	2000d950 	.word	0x2000d950
 800d74c:	2000d9f8 	.word	0x2000d9f8

0800d750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f103 0208 	add.w	r2, r3, #8
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f103 0208 	add.w	r2, r3, #8
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f103 0208 	add.w	r2, r3, #8
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d79e:	bf00      	nop
 800d7a0:	370c      	adds	r7, #12
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr

0800d7aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7aa:	b480      	push	{r7}
 800d7ac:	b085      	sub	sp, #20
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	689a      	ldr	r2, [r3, #8]
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	601a      	str	r2, [r3, #0]
}
 800d7e6:	bf00      	nop
 800d7e8:	3714      	adds	r7, #20
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b085      	sub	sp, #20
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d808:	d103      	bne.n	800d812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	691b      	ldr	r3, [r3, #16]
 800d80e:	60fb      	str	r3, [r7, #12]
 800d810:	e00c      	b.n	800d82c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	3308      	adds	r3, #8
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	e002      	b.n	800d820 <vListInsert+0x2e>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	68ba      	ldr	r2, [r7, #8]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d2f6      	bcs.n	800d81a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	685a      	ldr	r2, [r3, #4]
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	683a      	ldr	r2, [r7, #0]
 800d846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	1c5a      	adds	r2, r3, #1
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	601a      	str	r2, [r3, #0]
}
 800d858:	bf00      	nop
 800d85a:	3714      	adds	r7, #20
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	6892      	ldr	r2, [r2, #8]
 800d87a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	6852      	ldr	r2, [r2, #4]
 800d884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d103      	bne.n	800d898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	689a      	ldr	r2, [r3, #8]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	1e5a      	subs	r2, r3, #1
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10d      	bne.n	800d8e8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d0:	b672      	cpsid	i
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	b662      	cpsie	i
 800d8e0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d8e2:	bf00      	nop
 800d8e4:	bf00      	nop
 800d8e6:	e7fd      	b.n	800d8e4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d8e8:	f002 fef0 	bl	80106cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8f4:	68f9      	ldr	r1, [r7, #12]
 800d8f6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d8f8:	fb01 f303 	mul.w	r3, r1, r3
 800d8fc:	441a      	add	r2, r3
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2200      	movs	r2, #0
 800d906:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d918:	3b01      	subs	r3, #1
 800d91a:	68f9      	ldr	r1, [r7, #12]
 800d91c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d91e:	fb01 f303 	mul.w	r3, r1, r3
 800d922:	441a      	add	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	22ff      	movs	r2, #255	@ 0xff
 800d92c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	22ff      	movs	r2, #255	@ 0xff
 800d934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d114      	bne.n	800d968 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	691b      	ldr	r3, [r3, #16]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d01a      	beq.n	800d97c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	3310      	adds	r3, #16
 800d94a:	4618      	mov	r0, r3
 800d94c:	f001 fe7c 	bl	800f648 <xTaskRemoveFromEventList>
 800d950:	4603      	mov	r3, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d012      	beq.n	800d97c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d956:	4b0d      	ldr	r3, [pc, #52]	@ (800d98c <xQueueGenericReset+0xd4>)
 800d958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	e009      	b.n	800d97c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	3310      	adds	r3, #16
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff feef 	bl	800d750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	3324      	adds	r3, #36	@ 0x24
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff feea 	bl	800d750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d97c:	f002 fedc 	bl	8010738 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d980:	2301      	movs	r3, #1
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	e000ed04 	.word	0xe000ed04

0800d990 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08e      	sub	sp, #56	@ 0x38
 800d994:	af02      	add	r7, sp, #8
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
 800d99c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10d      	bne.n	800d9c0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800d9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a8:	b672      	cpsid	i
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	b662      	cpsie	i
 800d9b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d9ba:	bf00      	nop
 800d9bc:	bf00      	nop
 800d9be:	e7fd      	b.n	800d9bc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10d      	bne.n	800d9e2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ca:	b672      	cpsid	i
 800d9cc:	f383 8811 	msr	BASEPRI, r3
 800d9d0:	f3bf 8f6f 	isb	sy
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	b662      	cpsie	i
 800d9da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d9dc:	bf00      	nop
 800d9de:	bf00      	nop
 800d9e0:	e7fd      	b.n	800d9de <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d002      	beq.n	800d9ee <xQueueGenericCreateStatic+0x5e>
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <xQueueGenericCreateStatic+0x62>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e000      	b.n	800d9f4 <xQueueGenericCreateStatic+0x64>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10d      	bne.n	800da14 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	b672      	cpsid	i
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	b662      	cpsie	i
 800da0c:	623b      	str	r3, [r7, #32]
}
 800da0e:	bf00      	nop
 800da10:	bf00      	nop
 800da12:	e7fd      	b.n	800da10 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d102      	bne.n	800da20 <xQueueGenericCreateStatic+0x90>
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d101      	bne.n	800da24 <xQueueGenericCreateStatic+0x94>
 800da20:	2301      	movs	r3, #1
 800da22:	e000      	b.n	800da26 <xQueueGenericCreateStatic+0x96>
 800da24:	2300      	movs	r3, #0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10d      	bne.n	800da46 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2e:	b672      	cpsid	i
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	b662      	cpsie	i
 800da3e:	61fb      	str	r3, [r7, #28]
}
 800da40:	bf00      	nop
 800da42:	bf00      	nop
 800da44:	e7fd      	b.n	800da42 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da46:	2350      	movs	r3, #80	@ 0x50
 800da48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2b50      	cmp	r3, #80	@ 0x50
 800da4e:	d00d      	beq.n	800da6c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da54:	b672      	cpsid	i
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	b662      	cpsie	i
 800da64:	61bb      	str	r3, [r7, #24]
}
 800da66:	bf00      	nop
 800da68:	bf00      	nop
 800da6a:	e7fd      	b.n	800da68 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800da72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00d      	beq.n	800da94 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800da84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	4613      	mov	r3, r2
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	68b9      	ldr	r1, [r7, #8]
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f000 f848 	bl	800db24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800da96:	4618      	mov	r0, r3
 800da98:	3730      	adds	r7, #48	@ 0x30
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b08a      	sub	sp, #40	@ 0x28
 800daa2:	af02      	add	r7, sp, #8
 800daa4:	60f8      	str	r0, [r7, #12]
 800daa6:	60b9      	str	r1, [r7, #8]
 800daa8:	4613      	mov	r3, r2
 800daaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d10d      	bne.n	800dace <xQueueGenericCreate+0x30>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab6:	b672      	cpsid	i
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	b662      	cpsie	i
 800dac6:	613b      	str	r3, [r7, #16]
}
 800dac8:	bf00      	nop
 800daca:	bf00      	nop
 800dacc:	e7fd      	b.n	800daca <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d102      	bne.n	800dada <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800dad4:	2300      	movs	r3, #0
 800dad6:	61fb      	str	r3, [r7, #28]
 800dad8:	e004      	b.n	800dae4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	fb02 f303 	mul.w	r3, r2, r3
 800dae2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dae4:	69fb      	ldr	r3, [r7, #28]
 800dae6:	3350      	adds	r3, #80	@ 0x50
 800dae8:	4618      	mov	r0, r3
 800daea:	f002 ff1d 	bl	8010928 <pvPortMalloc>
 800daee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d011      	beq.n	800db1a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	3350      	adds	r3, #80	@ 0x50
 800dafe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db08:	79fa      	ldrb	r2, [r7, #7]
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	4613      	mov	r3, r2
 800db10:	697a      	ldr	r2, [r7, #20]
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f000 f805 	bl	800db24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db1a:	69bb      	ldr	r3, [r7, #24]
	}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3720      	adds	r7, #32
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
 800db30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d103      	bne.n	800db40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	69ba      	ldr	r2, [r7, #24]
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	e002      	b.n	800db46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db52:	2101      	movs	r1, #1
 800db54:	69b8      	ldr	r0, [r7, #24]
 800db56:	f7ff feaf 	bl	800d8b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800db5a:	69bb      	ldr	r3, [r7, #24]
 800db5c:	78fa      	ldrb	r2, [r7, #3]
 800db5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db62:	bf00      	nop
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b082      	sub	sp, #8
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00e      	beq.n	800db96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db8a:	2300      	movs	r3, #0
 800db8c:	2200      	movs	r2, #0
 800db8e:	2100      	movs	r1, #0
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f91d 	bl	800ddd0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800db96:	bf00      	nop
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b086      	sub	sp, #24
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	4603      	mov	r3, r0
 800dba6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	617b      	str	r3, [r7, #20]
 800dbac:	2300      	movs	r3, #0
 800dbae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	6939      	ldr	r1, [r7, #16]
 800dbb6:	6978      	ldr	r0, [r7, #20]
 800dbb8:	f7ff ff71 	bl	800da9e <xQueueGenericCreate>
 800dbbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f7ff ffd3 	bl	800db6a <prvInitialiseMutex>

		return xNewQueue;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
	}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b088      	sub	sp, #32
 800dbd2:	af02      	add	r7, sp, #8
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	6039      	str	r1, [r7, #0]
 800dbd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	2300      	movs	r3, #0
 800dbe0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dbe2:	79fb      	ldrb	r3, [r7, #7]
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	6939      	ldr	r1, [r7, #16]
 800dbec:	6978      	ldr	r0, [r7, #20]
 800dbee:	f7ff fecf 	bl	800d990 <xQueueGenericCreateStatic>
 800dbf2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f7ff ffb8 	bl	800db6a <prvInitialiseMutex>

		return xNewQueue;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
	}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dc04:	b590      	push	{r4, r7, lr}
 800dc06:	b087      	sub	sp, #28
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10d      	bne.n	800dc32 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800dc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc1a:	b672      	cpsid	i
 800dc1c:	f383 8811 	msr	BASEPRI, r3
 800dc20:	f3bf 8f6f 	isb	sy
 800dc24:	f3bf 8f4f 	dsb	sy
 800dc28:	b662      	cpsie	i
 800dc2a:	60fb      	str	r3, [r7, #12]
}
 800dc2c:	bf00      	nop
 800dc2e:	bf00      	nop
 800dc30:	e7fd      	b.n	800dc2e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	689c      	ldr	r4, [r3, #8]
 800dc36:	f001 fed5 	bl	800f9e4 <xTaskGetCurrentTaskHandle>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	429c      	cmp	r4, r3
 800dc3e:	d111      	bne.n	800dc64 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	1e5a      	subs	r2, r3, #1
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d105      	bne.n	800dc5e <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dc52:	2300      	movs	r3, #0
 800dc54:	2200      	movs	r2, #0
 800dc56:	2100      	movs	r1, #0
 800dc58:	6938      	ldr	r0, [r7, #16]
 800dc5a:	f000 f8b9 	bl	800ddd0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	617b      	str	r3, [r7, #20]
 800dc62:	e001      	b.n	800dc68 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dc64:	2300      	movs	r3, #0
 800dc66:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dc68:	697b      	ldr	r3, [r7, #20]
	}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd90      	pop	{r4, r7, pc}

0800dc72 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dc72:	b590      	push	{r4, r7, lr}
 800dc74:	b087      	sub	sp, #28
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10d      	bne.n	800dca2 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8a:	b672      	cpsid	i
 800dc8c:	f383 8811 	msr	BASEPRI, r3
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	b662      	cpsie	i
 800dc9a:	60fb      	str	r3, [r7, #12]
}
 800dc9c:	bf00      	nop
 800dc9e:	bf00      	nop
 800dca0:	e7fd      	b.n	800dc9e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	689c      	ldr	r4, [r3, #8]
 800dca6:	f001 fe9d 	bl	800f9e4 <xTaskGetCurrentTaskHandle>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	429c      	cmp	r4, r3
 800dcae:	d107      	bne.n	800dcc0 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	1c5a      	adds	r2, r3, #1
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	617b      	str	r3, [r7, #20]
 800dcbe:	e00c      	b.n	800dcda <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6938      	ldr	r0, [r7, #16]
 800dcc4:	f000 fbb2 	bl	800e42c <xQueueSemaphoreTake>
 800dcc8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d004      	beq.n	800dcda <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	1c5a      	adds	r2, r3, #1
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dcda:	697b      	ldr	r3, [r7, #20]
	}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	371c      	adds	r7, #28
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd90      	pop	{r4, r7, pc}

0800dce4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08a      	sub	sp, #40	@ 0x28
 800dce8:	af02      	add	r7, sp, #8
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d10d      	bne.n	800dd12 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfa:	b672      	cpsid	i
 800dcfc:	f383 8811 	msr	BASEPRI, r3
 800dd00:	f3bf 8f6f 	isb	sy
 800dd04:	f3bf 8f4f 	dsb	sy
 800dd08:	b662      	cpsie	i
 800dd0a:	61bb      	str	r3, [r7, #24]
}
 800dd0c:	bf00      	nop
 800dd0e:	bf00      	nop
 800dd10:	e7fd      	b.n	800dd0e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d90d      	bls.n	800dd36 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800dd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd1e:	b672      	cpsid	i
 800dd20:	f383 8811 	msr	BASEPRI, r3
 800dd24:	f3bf 8f6f 	isb	sy
 800dd28:	f3bf 8f4f 	dsb	sy
 800dd2c:	b662      	cpsie	i
 800dd2e:	617b      	str	r3, [r7, #20]
}
 800dd30:	bf00      	nop
 800dd32:	bf00      	nop
 800dd34:	e7fd      	b.n	800dd32 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd36:	2302      	movs	r3, #2
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2100      	movs	r1, #0
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f7ff fe25 	bl	800d990 <xQueueGenericCreateStatic>
 800dd46:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dd54:	69fb      	ldr	r3, [r7, #28]
	}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3720      	adds	r7, #32
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b086      	sub	sp, #24
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10d      	bne.n	800dd8a <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd72:	b672      	cpsid	i
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	b662      	cpsie	i
 800dd82:	613b      	str	r3, [r7, #16]
}
 800dd84:	bf00      	nop
 800dd86:	bf00      	nop
 800dd88:	e7fd      	b.n	800dd86 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd8a:	683a      	ldr	r2, [r7, #0]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d90d      	bls.n	800ddae <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800dd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd96:	b672      	cpsid	i
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	b662      	cpsie	i
 800dda6:	60fb      	str	r3, [r7, #12]
}
 800dda8:	bf00      	nop
 800ddaa:	bf00      	nop
 800ddac:	e7fd      	b.n	800ddaa <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ddae:	2202      	movs	r2, #2
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff fe73 	bl	800da9e <xQueueGenericCreate>
 800ddb8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ddc6:	697b      	ldr	r3, [r7, #20]
	}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3718      	adds	r7, #24
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b08e      	sub	sp, #56	@ 0x38
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	607a      	str	r2, [r7, #4]
 800dddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ddde:	2300      	movs	r3, #0
 800dde0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d10d      	bne.n	800de08 <xQueueGenericSend+0x38>
	__asm volatile
 800ddec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf0:	b672      	cpsid	i
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	b662      	cpsie	i
 800de00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800de02:	bf00      	nop
 800de04:	bf00      	nop
 800de06:	e7fd      	b.n	800de04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d103      	bne.n	800de16 <xQueueGenericSend+0x46>
 800de0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <xQueueGenericSend+0x4a>
 800de16:	2301      	movs	r3, #1
 800de18:	e000      	b.n	800de1c <xQueueGenericSend+0x4c>
 800de1a:	2300      	movs	r3, #0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d10d      	bne.n	800de3c <xQueueGenericSend+0x6c>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de24:	b672      	cpsid	i
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	b662      	cpsie	i
 800de34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800de36:	bf00      	nop
 800de38:	bf00      	nop
 800de3a:	e7fd      	b.n	800de38 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d103      	bne.n	800de4a <xQueueGenericSend+0x7a>
 800de42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de46:	2b01      	cmp	r3, #1
 800de48:	d101      	bne.n	800de4e <xQueueGenericSend+0x7e>
 800de4a:	2301      	movs	r3, #1
 800de4c:	e000      	b.n	800de50 <xQueueGenericSend+0x80>
 800de4e:	2300      	movs	r3, #0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d10d      	bne.n	800de70 <xQueueGenericSend+0xa0>
	__asm volatile
 800de54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de58:	b672      	cpsid	i
 800de5a:	f383 8811 	msr	BASEPRI, r3
 800de5e:	f3bf 8f6f 	isb	sy
 800de62:	f3bf 8f4f 	dsb	sy
 800de66:	b662      	cpsie	i
 800de68:	623b      	str	r3, [r7, #32]
}
 800de6a:	bf00      	nop
 800de6c:	bf00      	nop
 800de6e:	e7fd      	b.n	800de6c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de70:	f001 fdc8 	bl	800fa04 <xTaskGetSchedulerState>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d102      	bne.n	800de80 <xQueueGenericSend+0xb0>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d101      	bne.n	800de84 <xQueueGenericSend+0xb4>
 800de80:	2301      	movs	r3, #1
 800de82:	e000      	b.n	800de86 <xQueueGenericSend+0xb6>
 800de84:	2300      	movs	r3, #0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10d      	bne.n	800dea6 <xQueueGenericSend+0xd6>
	__asm volatile
 800de8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8e:	b672      	cpsid	i
 800de90:	f383 8811 	msr	BASEPRI, r3
 800de94:	f3bf 8f6f 	isb	sy
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	b662      	cpsie	i
 800de9e:	61fb      	str	r3, [r7, #28]
}
 800dea0:	bf00      	nop
 800dea2:	bf00      	nop
 800dea4:	e7fd      	b.n	800dea2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dea6:	f002 fc11 	bl	80106cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800deaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800deae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d302      	bcc.n	800debc <xQueueGenericSend+0xec>
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	2b02      	cmp	r3, #2
 800deba:	d129      	bne.n	800df10 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800debc:	683a      	ldr	r2, [r7, #0]
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dec2:	f000 fcd3 	bl	800e86c <prvCopyDataToQueue>
 800dec6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800decc:	2b00      	cmp	r3, #0
 800dece:	d010      	beq.n	800def2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ded0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded2:	3324      	adds	r3, #36	@ 0x24
 800ded4:	4618      	mov	r0, r3
 800ded6:	f001 fbb7 	bl	800f648 <xTaskRemoveFromEventList>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d013      	beq.n	800df08 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dee0:	4b3f      	ldr	r3, [pc, #252]	@ (800dfe0 <xQueueGenericSend+0x210>)
 800dee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	e00a      	b.n	800df08 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800def2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def4:	2b00      	cmp	r3, #0
 800def6:	d007      	beq.n	800df08 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800def8:	4b39      	ldr	r3, [pc, #228]	@ (800dfe0 <xQueueGenericSend+0x210>)
 800defa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df08:	f002 fc16 	bl	8010738 <vPortExitCritical>
				return pdPASS;
 800df0c:	2301      	movs	r3, #1
 800df0e:	e063      	b.n	800dfd8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d103      	bne.n	800df1e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df16:	f002 fc0f 	bl	8010738 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800df1a:	2300      	movs	r3, #0
 800df1c:	e05c      	b.n	800dfd8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df20:	2b00      	cmp	r3, #0
 800df22:	d106      	bne.n	800df32 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df24:	f107 0314 	add.w	r3, r7, #20
 800df28:	4618      	mov	r0, r3
 800df2a:	f001 fbf3 	bl	800f714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df2e:	2301      	movs	r3, #1
 800df30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df32:	f002 fc01 	bl	8010738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df36:	f001 f919 	bl	800f16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df3a:	f002 fbc7 	bl	80106cc <vPortEnterCritical>
 800df3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800df44:	b25b      	sxtb	r3, r3
 800df46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df4a:	d103      	bne.n	800df54 <xQueueGenericSend+0x184>
 800df4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800df5a:	b25b      	sxtb	r3, r3
 800df5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df60:	d103      	bne.n	800df6a <xQueueGenericSend+0x19a>
 800df62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df64:	2200      	movs	r2, #0
 800df66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df6a:	f002 fbe5 	bl	8010738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df6e:	1d3a      	adds	r2, r7, #4
 800df70:	f107 0314 	add.w	r3, r7, #20
 800df74:	4611      	mov	r1, r2
 800df76:	4618      	mov	r0, r3
 800df78:	f001 fbe2 	bl	800f740 <xTaskCheckForTimeOut>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d124      	bne.n	800dfcc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800df82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df84:	f000 fd6a 	bl	800ea5c <prvIsQueueFull>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d018      	beq.n	800dfc0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800df8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df90:	3310      	adds	r3, #16
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	4611      	mov	r1, r2
 800df96:	4618      	mov	r0, r3
 800df98:	f001 fb00 	bl	800f59c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800df9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df9e:	f000 fcf5 	bl	800e98c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dfa2:	f001 f8f1 	bl	800f188 <xTaskResumeAll>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f47f af7c 	bne.w	800dea6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800dfae:	4b0c      	ldr	r3, [pc, #48]	@ (800dfe0 <xQueueGenericSend+0x210>)
 800dfb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfb4:	601a      	str	r2, [r3, #0]
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	e772      	b.n	800dea6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dfc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfc2:	f000 fce3 	bl	800e98c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfc6:	f001 f8df 	bl	800f188 <xTaskResumeAll>
 800dfca:	e76c      	b.n	800dea6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dfcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfce:	f000 fcdd 	bl	800e98c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfd2:	f001 f8d9 	bl	800f188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dfd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3738      	adds	r7, #56	@ 0x38
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	e000ed04 	.word	0xe000ed04

0800dfe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b08e      	sub	sp, #56	@ 0x38
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
 800dff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d10d      	bne.n	800e018 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800dffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e000:	b672      	cpsid	i
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	b662      	cpsie	i
 800e010:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e012:	bf00      	nop
 800e014:	bf00      	nop
 800e016:	e7fd      	b.n	800e014 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d103      	bne.n	800e026 <xQueueGenericSendFromISR+0x42>
 800e01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e022:	2b00      	cmp	r3, #0
 800e024:	d101      	bne.n	800e02a <xQueueGenericSendFromISR+0x46>
 800e026:	2301      	movs	r3, #1
 800e028:	e000      	b.n	800e02c <xQueueGenericSendFromISR+0x48>
 800e02a:	2300      	movs	r3, #0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10d      	bne.n	800e04c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e034:	b672      	cpsid	i
 800e036:	f383 8811 	msr	BASEPRI, r3
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	b662      	cpsie	i
 800e044:	623b      	str	r3, [r7, #32]
}
 800e046:	bf00      	nop
 800e048:	bf00      	nop
 800e04a:	e7fd      	b.n	800e048 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	2b02      	cmp	r3, #2
 800e050:	d103      	bne.n	800e05a <xQueueGenericSendFromISR+0x76>
 800e052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e056:	2b01      	cmp	r3, #1
 800e058:	d101      	bne.n	800e05e <xQueueGenericSendFromISR+0x7a>
 800e05a:	2301      	movs	r3, #1
 800e05c:	e000      	b.n	800e060 <xQueueGenericSendFromISR+0x7c>
 800e05e:	2300      	movs	r3, #0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10d      	bne.n	800e080 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e068:	b672      	cpsid	i
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	b662      	cpsie	i
 800e078:	61fb      	str	r3, [r7, #28]
}
 800e07a:	bf00      	nop
 800e07c:	bf00      	nop
 800e07e:	e7fd      	b.n	800e07c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e080:	f002 fc0c 	bl	801089c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e084:	f3ef 8211 	mrs	r2, BASEPRI
 800e088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e08c:	b672      	cpsid	i
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	b662      	cpsie	i
 800e09c:	61ba      	str	r2, [r7, #24]
 800e09e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e0a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d302      	bcc.n	800e0b6 <xQueueGenericSendFromISR+0xd2>
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	d12c      	bne.n	800e110 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e0bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0c0:	683a      	ldr	r2, [r7, #0]
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0c6:	f000 fbd1 	bl	800e86c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e0ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e0d2:	d112      	bne.n	800e0fa <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d016      	beq.n	800e10a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0de:	3324      	adds	r3, #36	@ 0x24
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f001 fab1 	bl	800f648 <xTaskRemoveFromEventList>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00e      	beq.n	800e10a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00b      	beq.n	800e10a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	601a      	str	r2, [r3, #0]
 800e0f8:	e007      	b.n	800e10a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e0fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e0fe:	3301      	adds	r3, #1
 800e100:	b2db      	uxtb	r3, r3
 800e102:	b25a      	sxtb	r2, r3
 800e104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e10a:	2301      	movs	r3, #1
 800e10c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e10e:	e001      	b.n	800e114 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e110:	2300      	movs	r3, #0
 800e112:	637b      	str	r3, [r7, #52]	@ 0x34
 800e114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e116:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e11e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e122:	4618      	mov	r0, r3
 800e124:	3738      	adds	r7, #56	@ 0x38
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b08e      	sub	sp, #56	@ 0x38
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
 800e132:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10d      	bne.n	800e15a <xQueueGiveFromISR+0x30>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e142:	b672      	cpsid	i
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	b662      	cpsie	i
 800e152:	623b      	str	r3, [r7, #32]
}
 800e154:	bf00      	nop
 800e156:	bf00      	nop
 800e158:	e7fd      	b.n	800e156 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00d      	beq.n	800e17e <xQueueGiveFromISR+0x54>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e166:	b672      	cpsid	i
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	b662      	cpsie	i
 800e176:	61fb      	str	r3, [r7, #28]
}
 800e178:	bf00      	nop
 800e17a:	bf00      	nop
 800e17c:	e7fd      	b.n	800e17a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d103      	bne.n	800e18e <xQueueGiveFromISR+0x64>
 800e186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <xQueueGiveFromISR+0x68>
 800e18e:	2301      	movs	r3, #1
 800e190:	e000      	b.n	800e194 <xQueueGiveFromISR+0x6a>
 800e192:	2300      	movs	r3, #0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10d      	bne.n	800e1b4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e19c:	b672      	cpsid	i
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
 800e1aa:	b662      	cpsie	i
 800e1ac:	61bb      	str	r3, [r7, #24]
}
 800e1ae:	bf00      	nop
 800e1b0:	bf00      	nop
 800e1b2:	e7fd      	b.n	800e1b0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1b4:	f002 fb72 	bl	801089c <vPortValidateInterruptPriority>
	__asm volatile
 800e1b8:	f3ef 8211 	mrs	r2, BASEPRI
 800e1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c0:	b672      	cpsid	i
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	b662      	cpsie	i
 800e1d0:	617a      	str	r2, [r7, #20]
 800e1d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e1d4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1dc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d22b      	bcs.n	800e240 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e1ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f4:	1c5a      	adds	r2, r3, #1
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e1fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e202:	d112      	bne.n	800e22a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d016      	beq.n	800e23a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e20e:	3324      	adds	r3, #36	@ 0x24
 800e210:	4618      	mov	r0, r3
 800e212:	f001 fa19 	bl	800f648 <xTaskRemoveFromEventList>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00e      	beq.n	800e23a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00b      	beq.n	800e23a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	2201      	movs	r2, #1
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	e007      	b.n	800e23a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e22a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e22e:	3301      	adds	r3, #1
 800e230:	b2db      	uxtb	r3, r3
 800e232:	b25a      	sxtb	r2, r3
 800e234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e236:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e23a:	2301      	movs	r3, #1
 800e23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e23e:	e001      	b.n	800e244 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e240:	2300      	movs	r3, #0
 800e242:	637b      	str	r3, [r7, #52]	@ 0x34
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e246:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f383 8811 	msr	BASEPRI, r3
}
 800e24e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e252:	4618      	mov	r0, r3
 800e254:	3738      	adds	r7, #56	@ 0x38
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
	...

0800e25c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b08c      	sub	sp, #48	@ 0x30
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e268:	2300      	movs	r3, #0
 800e26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10d      	bne.n	800e292 <xQueueReceive+0x36>
	__asm volatile
 800e276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e27a:	b672      	cpsid	i
 800e27c:	f383 8811 	msr	BASEPRI, r3
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	b662      	cpsie	i
 800e28a:	623b      	str	r3, [r7, #32]
}
 800e28c:	bf00      	nop
 800e28e:	bf00      	nop
 800e290:	e7fd      	b.n	800e28e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d103      	bne.n	800e2a0 <xQueueReceive+0x44>
 800e298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d101      	bne.n	800e2a4 <xQueueReceive+0x48>
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	e000      	b.n	800e2a6 <xQueueReceive+0x4a>
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d10d      	bne.n	800e2c6 <xQueueReceive+0x6a>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ae:	b672      	cpsid	i
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	b662      	cpsie	i
 800e2be:	61fb      	str	r3, [r7, #28]
}
 800e2c0:	bf00      	nop
 800e2c2:	bf00      	nop
 800e2c4:	e7fd      	b.n	800e2c2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2c6:	f001 fb9d 	bl	800fa04 <xTaskGetSchedulerState>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d102      	bne.n	800e2d6 <xQueueReceive+0x7a>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d101      	bne.n	800e2da <xQueueReceive+0x7e>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e000      	b.n	800e2dc <xQueueReceive+0x80>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10d      	bne.n	800e2fc <xQueueReceive+0xa0>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e4:	b672      	cpsid	i
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	b662      	cpsie	i
 800e2f4:	61bb      	str	r3, [r7, #24]
}
 800e2f6:	bf00      	nop
 800e2f8:	bf00      	nop
 800e2fa:	e7fd      	b.n	800e2f8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2fc:	f002 f9e6 	bl	80106cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e304:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d01f      	beq.n	800e34c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e310:	f000 fb16 	bl	800e940 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e316:	1e5a      	subs	r2, r3, #1
 800e318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31e:	691b      	ldr	r3, [r3, #16]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00f      	beq.n	800e344 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e326:	3310      	adds	r3, #16
 800e328:	4618      	mov	r0, r3
 800e32a:	f001 f98d 	bl	800f648 <xTaskRemoveFromEventList>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d007      	beq.n	800e344 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e334:	4b3c      	ldr	r3, [pc, #240]	@ (800e428 <xQueueReceive+0x1cc>)
 800e336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e344:	f002 f9f8 	bl	8010738 <vPortExitCritical>
				return pdPASS;
 800e348:	2301      	movs	r3, #1
 800e34a:	e069      	b.n	800e420 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d103      	bne.n	800e35a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e352:	f002 f9f1 	bl	8010738 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e356:	2300      	movs	r3, #0
 800e358:	e062      	b.n	800e420 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d106      	bne.n	800e36e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e360:	f107 0310 	add.w	r3, r7, #16
 800e364:	4618      	mov	r0, r3
 800e366:	f001 f9d5 	bl	800f714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e36a:	2301      	movs	r3, #1
 800e36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e36e:	f002 f9e3 	bl	8010738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e372:	f000 fefb 	bl	800f16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e376:	f002 f9a9 	bl	80106cc <vPortEnterCritical>
 800e37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e380:	b25b      	sxtb	r3, r3
 800e382:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e386:	d103      	bne.n	800e390 <xQueueReceive+0x134>
 800e388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e392:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e396:	b25b      	sxtb	r3, r3
 800e398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e39c:	d103      	bne.n	800e3a6 <xQueueReceive+0x14a>
 800e39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3a6:	f002 f9c7 	bl	8010738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3aa:	1d3a      	adds	r2, r7, #4
 800e3ac:	f107 0310 	add.w	r3, r7, #16
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f001 f9c4 	bl	800f740 <xTaskCheckForTimeOut>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d123      	bne.n	800e406 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3c0:	f000 fb36 	bl	800ea30 <prvIsQueueEmpty>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d017      	beq.n	800e3fa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3cc:	3324      	adds	r3, #36	@ 0x24
 800e3ce:	687a      	ldr	r2, [r7, #4]
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f001 f8e2 	bl	800f59c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e3d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3da:	f000 fad7 	bl	800e98c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e3de:	f000 fed3 	bl	800f188 <xTaskResumeAll>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d189      	bne.n	800e2fc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800e428 <xQueueReceive+0x1cc>)
 800e3ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	e780      	b.n	800e2fc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e3fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3fc:	f000 fac6 	bl	800e98c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e400:	f000 fec2 	bl	800f188 <xTaskResumeAll>
 800e404:	e77a      	b.n	800e2fc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e408:	f000 fac0 	bl	800e98c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e40c:	f000 febc 	bl	800f188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e412:	f000 fb0d 	bl	800ea30 <prvIsQueueEmpty>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f43f af6f 	beq.w	800e2fc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e41e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e420:	4618      	mov	r0, r3
 800e422:	3730      	adds	r7, #48	@ 0x30
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	e000ed04 	.word	0xe000ed04

0800e42c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08e      	sub	sp, #56	@ 0x38
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e436:	2300      	movs	r3, #0
 800e438:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e43e:	2300      	movs	r3, #0
 800e440:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10d      	bne.n	800e464 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44c:	b672      	cpsid	i
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	b662      	cpsie	i
 800e45c:	623b      	str	r3, [r7, #32]
}
 800e45e:	bf00      	nop
 800e460:	bf00      	nop
 800e462:	e7fd      	b.n	800e460 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00d      	beq.n	800e488 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e470:	b672      	cpsid	i
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	b662      	cpsie	i
 800e480:	61fb      	str	r3, [r7, #28]
}
 800e482:	bf00      	nop
 800e484:	bf00      	nop
 800e486:	e7fd      	b.n	800e484 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e488:	f001 fabc 	bl	800fa04 <xTaskGetSchedulerState>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d102      	bne.n	800e498 <xQueueSemaphoreTake+0x6c>
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d101      	bne.n	800e49c <xQueueSemaphoreTake+0x70>
 800e498:	2301      	movs	r3, #1
 800e49a:	e000      	b.n	800e49e <xQueueSemaphoreTake+0x72>
 800e49c:	2300      	movs	r3, #0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10d      	bne.n	800e4be <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a6:	b672      	cpsid	i
 800e4a8:	f383 8811 	msr	BASEPRI, r3
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	b662      	cpsie	i
 800e4b6:	61bb      	str	r3, [r7, #24]
}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	e7fd      	b.n	800e4ba <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4be:	f002 f905 	bl	80106cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d024      	beq.n	800e518 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d0:	1e5a      	subs	r2, r3, #1
 800e4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d104      	bne.n	800e4e8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e4de:	f001 fc13 	bl	800fd08 <pvTaskIncrementMutexHeldCount>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ea:	691b      	ldr	r3, [r3, #16]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00f      	beq.n	800e510 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f2:	3310      	adds	r3, #16
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f001 f8a7 	bl	800f648 <xTaskRemoveFromEventList>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d007      	beq.n	800e510 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e500:	4b55      	ldr	r3, [pc, #340]	@ (800e658 <xQueueSemaphoreTake+0x22c>)
 800e502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e506:	601a      	str	r2, [r3, #0]
 800e508:	f3bf 8f4f 	dsb	sy
 800e50c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e510:	f002 f912 	bl	8010738 <vPortExitCritical>
				return pdPASS;
 800e514:	2301      	movs	r3, #1
 800e516:	e09a      	b.n	800e64e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d114      	bne.n	800e548 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00d      	beq.n	800e540 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e528:	b672      	cpsid	i
 800e52a:	f383 8811 	msr	BASEPRI, r3
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f3bf 8f4f 	dsb	sy
 800e536:	b662      	cpsie	i
 800e538:	617b      	str	r3, [r7, #20]
}
 800e53a:	bf00      	nop
 800e53c:	bf00      	nop
 800e53e:	e7fd      	b.n	800e53c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e540:	f002 f8fa 	bl	8010738 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e544:	2300      	movs	r3, #0
 800e546:	e082      	b.n	800e64e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d106      	bne.n	800e55c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e54e:	f107 030c 	add.w	r3, r7, #12
 800e552:	4618      	mov	r0, r3
 800e554:	f001 f8de 	bl	800f714 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e558:	2301      	movs	r3, #1
 800e55a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e55c:	f002 f8ec 	bl	8010738 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e560:	f000 fe04 	bl	800f16c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e564:	f002 f8b2 	bl	80106cc <vPortEnterCritical>
 800e568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e56a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e56e:	b25b      	sxtb	r3, r3
 800e570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e574:	d103      	bne.n	800e57e <xQueueSemaphoreTake+0x152>
 800e576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e584:	b25b      	sxtb	r3, r3
 800e586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e58a:	d103      	bne.n	800e594 <xQueueSemaphoreTake+0x168>
 800e58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58e:	2200      	movs	r2, #0
 800e590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e594:	f002 f8d0 	bl	8010738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e598:	463a      	mov	r2, r7
 800e59a:	f107 030c 	add.w	r3, r7, #12
 800e59e:	4611      	mov	r1, r2
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f001 f8cd 	bl	800f740 <xTaskCheckForTimeOut>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d132      	bne.n	800e612 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5ae:	f000 fa3f 	bl	800ea30 <prvIsQueueEmpty>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d026      	beq.n	800e606 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d109      	bne.n	800e5d4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e5c0:	f002 f884 	bl	80106cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f001 fa39 	bl	800fa40 <xTaskPriorityInherit>
 800e5ce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e5d0:	f002 f8b2 	bl	8010738 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d6:	3324      	adds	r3, #36	@ 0x24
 800e5d8:	683a      	ldr	r2, [r7, #0]
 800e5da:	4611      	mov	r1, r2
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f000 ffdd 	bl	800f59c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5e4:	f000 f9d2 	bl	800e98c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e5e8:	f000 fdce 	bl	800f188 <xTaskResumeAll>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f47f af65 	bne.w	800e4be <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e5f4:	4b18      	ldr	r3, [pc, #96]	@ (800e658 <xQueueSemaphoreTake+0x22c>)
 800e5f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5fa:	601a      	str	r2, [r3, #0]
 800e5fc:	f3bf 8f4f 	dsb	sy
 800e600:	f3bf 8f6f 	isb	sy
 800e604:	e75b      	b.n	800e4be <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e606:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e608:	f000 f9c0 	bl	800e98c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e60c:	f000 fdbc 	bl	800f188 <xTaskResumeAll>
 800e610:	e755      	b.n	800e4be <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e612:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e614:	f000 f9ba 	bl	800e98c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e618:	f000 fdb6 	bl	800f188 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e61c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e61e:	f000 fa07 	bl	800ea30 <prvIsQueueEmpty>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	f43f af4a 	beq.w	800e4be <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00d      	beq.n	800e64c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e630:	f002 f84c 	bl	80106cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e634:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e636:	f000 f901 	bl	800e83c <prvGetDisinheritPriorityAfterTimeout>
 800e63a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e642:	4618      	mov	r0, r3
 800e644:	f001 fad8 	bl	800fbf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e648:	f002 f876 	bl	8010738 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e64c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3738      	adds	r7, #56	@ 0x38
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	e000ed04 	.word	0xe000ed04

0800e65c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b08e      	sub	sp, #56	@ 0x38
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10d      	bne.n	800e68e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e676:	b672      	cpsid	i
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	b662      	cpsie	i
 800e686:	623b      	str	r3, [r7, #32]
}
 800e688:	bf00      	nop
 800e68a:	bf00      	nop
 800e68c:	e7fd      	b.n	800e68a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d103      	bne.n	800e69c <xQueueReceiveFromISR+0x40>
 800e694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d101      	bne.n	800e6a0 <xQueueReceiveFromISR+0x44>
 800e69c:	2301      	movs	r3, #1
 800e69e:	e000      	b.n	800e6a2 <xQueueReceiveFromISR+0x46>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d10d      	bne.n	800e6c2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6aa:	b672      	cpsid	i
 800e6ac:	f383 8811 	msr	BASEPRI, r3
 800e6b0:	f3bf 8f6f 	isb	sy
 800e6b4:	f3bf 8f4f 	dsb	sy
 800e6b8:	b662      	cpsie	i
 800e6ba:	61fb      	str	r3, [r7, #28]
}
 800e6bc:	bf00      	nop
 800e6be:	bf00      	nop
 800e6c0:	e7fd      	b.n	800e6be <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6c2:	f002 f8eb 	bl	801089c <vPortValidateInterruptPriority>
	__asm volatile
 800e6c6:	f3ef 8211 	mrs	r2, BASEPRI
 800e6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ce:	b672      	cpsid	i
 800e6d0:	f383 8811 	msr	BASEPRI, r3
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	b662      	cpsie	i
 800e6de:	61ba      	str	r2, [r7, #24]
 800e6e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e6e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d02f      	beq.n	800e752 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e6f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6fc:	68b9      	ldr	r1, [r7, #8]
 800e6fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e700:	f000 f91e 	bl	800e940 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e706:	1e5a      	subs	r2, r3, #1
 800e708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e70c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e714:	d112      	bne.n	800e73c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d016      	beq.n	800e74c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e720:	3310      	adds	r3, #16
 800e722:	4618      	mov	r0, r3
 800e724:	f000 ff90 	bl	800f648 <xTaskRemoveFromEventList>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00e      	beq.n	800e74c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00b      	beq.n	800e74c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	601a      	str	r2, [r3, #0]
 800e73a:	e007      	b.n	800e74c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e73c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e740:	3301      	adds	r3, #1
 800e742:	b2db      	uxtb	r3, r3
 800e744:	b25a      	sxtb	r2, r3
 800e746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e74c:	2301      	movs	r3, #1
 800e74e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e750:	e001      	b.n	800e756 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e752:	2300      	movs	r3, #0
 800e754:	637b      	str	r3, [r7, #52]	@ 0x34
 800e756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e758:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	f383 8811 	msr	BASEPRI, r3
}
 800e760:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e764:	4618      	mov	r0, r3
 800e766:	3738      	adds	r7, #56	@ 0x38
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b084      	sub	sp, #16
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10d      	bne.n	800e796 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77e:	b672      	cpsid	i
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	b662      	cpsie	i
 800e78e:	60bb      	str	r3, [r7, #8]
}
 800e790:	bf00      	nop
 800e792:	bf00      	nop
 800e794:	e7fd      	b.n	800e792 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800e796:	f001 ff99 	bl	80106cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e79e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e7a0:	f001 ffca 	bl	8010738 <vPortExitCritical>

	return uxReturn;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b087      	sub	sp, #28
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10d      	bne.n	800e7dc <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c4:	b672      	cpsid	i
 800e7c6:	f383 8811 	msr	BASEPRI, r3
 800e7ca:	f3bf 8f6f 	isb	sy
 800e7ce:	f3bf 8f4f 	dsb	sy
 800e7d2:	b662      	cpsie	i
 800e7d4:	60fb      	str	r3, [r7, #12]
}
 800e7d6:	bf00      	nop
 800e7d8:	bf00      	nop
 800e7da:	e7fd      	b.n	800e7d8 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7e0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e7e2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	371c      	adds	r7, #28
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10d      	bne.n	800e81e <vQueueDelete+0x2e>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e806:	b672      	cpsid	i
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	b662      	cpsie	i
 800e816:	60bb      	str	r3, [r7, #8]
}
 800e818:	bf00      	nop
 800e81a:	bf00      	nop
 800e81c:	e7fd      	b.n	800e81a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f000 f95e 	bl	800eae0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d102      	bne.n	800e834 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f002 f94c 	bl	8010acc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e834:	bf00      	nop
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e83c:	b480      	push	{r7}
 800e83e:	b085      	sub	sp, #20
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d006      	beq.n	800e85a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e856:	60fb      	str	r3, [r7, #12]
 800e858:	e001      	b.n	800e85e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e85a:	2300      	movs	r3, #0
 800e85c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e85e:	68fb      	ldr	r3, [r7, #12]
	}
 800e860:	4618      	mov	r0, r3
 800e862:	3714      	adds	r7, #20
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e878:	2300      	movs	r3, #0
 800e87a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e880:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10d      	bne.n	800e8a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d14d      	bne.n	800e92e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	689b      	ldr	r3, [r3, #8]
 800e896:	4618      	mov	r0, r3
 800e898:	f001 f93a 	bl	800fb10 <xTaskPriorityDisinherit>
 800e89c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	609a      	str	r2, [r3, #8]
 800e8a4:	e043      	b.n	800e92e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d119      	bne.n	800e8e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	6858      	ldr	r0, [r3, #4]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	68b9      	ldr	r1, [r7, #8]
 800e8b8:	f011 fbc3 	bl	8020042 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8c4:	441a      	add	r2, r3
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	685a      	ldr	r2, [r3, #4]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d32b      	bcc.n	800e92e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	605a      	str	r2, [r3, #4]
 800e8de:	e026      	b.n	800e92e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	68d8      	ldr	r0, [r3, #12]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	68b9      	ldr	r1, [r7, #8]
 800e8ec:	f011 fba9 	bl	8020042 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	68da      	ldr	r2, [r3, #12]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8f8:	425b      	negs	r3, r3
 800e8fa:	441a      	add	r2, r3
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	68da      	ldr	r2, [r3, #12]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d207      	bcs.n	800e91c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	689a      	ldr	r2, [r3, #8]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e914:	425b      	negs	r3, r3
 800e916:	441a      	add	r2, r3
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d105      	bne.n	800e92e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	3b01      	subs	r3, #1
 800e92c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	1c5a      	adds	r2, r3, #1
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e936:	697b      	ldr	r3, [r7, #20]
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d018      	beq.n	800e984 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68da      	ldr	r2, [r3, #12]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e95a:	441a      	add	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68da      	ldr	r2, [r3, #12]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d303      	bcc.n	800e974 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	68d9      	ldr	r1, [r3, #12]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e97c:	461a      	mov	r2, r3
 800e97e:	6838      	ldr	r0, [r7, #0]
 800e980:	f011 fb5f 	bl	8020042 <memcpy>
	}
}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e994:	f001 fe9a 	bl	80106cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e99e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9a0:	e011      	b.n	800e9c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d012      	beq.n	800e9d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	3324      	adds	r3, #36	@ 0x24
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f000 fe4a 	bl	800f648 <xTaskRemoveFromEventList>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d001      	beq.n	800e9be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9ba:	f000 ff29 	bl	800f810 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9be:	7bfb      	ldrb	r3, [r7, #15]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	dce9      	bgt.n	800e9a2 <prvUnlockQueue+0x16>
 800e9ce:	e000      	b.n	800e9d2 <prvUnlockQueue+0x46>
					break;
 800e9d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	22ff      	movs	r2, #255	@ 0xff
 800e9d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e9da:	f001 fead 	bl	8010738 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9de:	f001 fe75 	bl	80106cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e9e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9ea:	e011      	b.n	800ea10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d012      	beq.n	800ea1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	3310      	adds	r3, #16
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 fe25 	bl	800f648 <xTaskRemoveFromEventList>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d001      	beq.n	800ea08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea04:	f000 ff04 	bl	800f810 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea08:	7bbb      	ldrb	r3, [r7, #14]
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	dce9      	bgt.n	800e9ec <prvUnlockQueue+0x60>
 800ea18:	e000      	b.n	800ea1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	22ff      	movs	r2, #255	@ 0xff
 800ea20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ea24:	f001 fe88 	bl	8010738 <vPortExitCritical>
}
 800ea28:	bf00      	nop
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea38:	f001 fe48 	bl	80106cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d102      	bne.n	800ea4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea44:	2301      	movs	r3, #1
 800ea46:	60fb      	str	r3, [r7, #12]
 800ea48:	e001      	b.n	800ea4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea4e:	f001 fe73 	bl	8010738 <vPortExitCritical>

	return xReturn;
 800ea52:	68fb      	ldr	r3, [r7, #12]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3710      	adds	r7, #16
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea64:	f001 fe32 	bl	80106cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d102      	bne.n	800ea7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea74:	2301      	movs	r3, #1
 800ea76:	60fb      	str	r3, [r7, #12]
 800ea78:	e001      	b.n	800ea7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea7e:	f001 fe5b 	bl	8010738 <vPortExitCritical>

	return xReturn;
 800ea82:	68fb      	ldr	r3, [r7, #12]
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b085      	sub	sp, #20
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea96:	2300      	movs	r3, #0
 800ea98:	60fb      	str	r3, [r7, #12]
 800ea9a:	e014      	b.n	800eac6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ea9c:	4a0f      	ldr	r2, [pc, #60]	@ (800eadc <vQueueAddToRegistry+0x50>)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d10b      	bne.n	800eac0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eaa8:	490c      	ldr	r1, [pc, #48]	@ (800eadc <vQueueAddToRegistry+0x50>)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	683a      	ldr	r2, [r7, #0]
 800eaae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eab2:	4a0a      	ldr	r2, [pc, #40]	@ (800eadc <vQueueAddToRegistry+0x50>)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	00db      	lsls	r3, r3, #3
 800eab8:	4413      	add	r3, r2
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eabe:	e006      	b.n	800eace <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	3301      	adds	r3, #1
 800eac4:	60fb      	str	r3, [r7, #12]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2b0b      	cmp	r3, #11
 800eaca:	d9e7      	bls.n	800ea9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eacc:	bf00      	nop
 800eace:	bf00      	nop
 800ead0:	3714      	adds	r7, #20
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	2000e9f8 	.word	0x2000e9f8

0800eae0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eae8:	2300      	movs	r3, #0
 800eaea:	60fb      	str	r3, [r7, #12]
 800eaec:	e016      	b.n	800eb1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800eaee:	4a10      	ldr	r2, [pc, #64]	@ (800eb30 <vQueueUnregisterQueue+0x50>)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	4413      	add	r3, r2
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d10b      	bne.n	800eb16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800eafe:	4a0c      	ldr	r2, [pc, #48]	@ (800eb30 <vQueueUnregisterQueue+0x50>)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2100      	movs	r1, #0
 800eb04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800eb08:	4a09      	ldr	r2, [pc, #36]	@ (800eb30 <vQueueUnregisterQueue+0x50>)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	4413      	add	r3, r2
 800eb10:	2200      	movs	r2, #0
 800eb12:	605a      	str	r2, [r3, #4]
				break;
 800eb14:	e006      	b.n	800eb24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	3301      	adds	r3, #1
 800eb1a:	60fb      	str	r3, [r7, #12]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2b0b      	cmp	r3, #11
 800eb20:	d9e5      	bls.n	800eaee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800eb22:	bf00      	nop
 800eb24:	bf00      	nop
 800eb26:	3714      	adds	r7, #20
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	2000e9f8 	.word	0x2000e9f8

0800eb34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb44:	f001 fdc2 	bl	80106cc <vPortEnterCritical>
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb4e:	b25b      	sxtb	r3, r3
 800eb50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb54:	d103      	bne.n	800eb5e <vQueueWaitForMessageRestricted+0x2a>
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb64:	b25b      	sxtb	r3, r3
 800eb66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb6a:	d103      	bne.n	800eb74 <vQueueWaitForMessageRestricted+0x40>
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb74:	f001 fde0 	bl	8010738 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d106      	bne.n	800eb8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	3324      	adds	r3, #36	@ 0x24
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	68b9      	ldr	r1, [r7, #8]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f000 fd2f 	bl	800f5ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb8e:	6978      	ldr	r0, [r7, #20]
 800eb90:	f7ff fefc 	bl	800e98c <prvUnlockQueue>
	}
 800eb94:	bf00      	nop
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b08e      	sub	sp, #56	@ 0x38
 800eba0:	af04      	add	r7, sp, #16
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ebaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10d      	bne.n	800ebcc <xTaskCreateStatic+0x30>
	__asm volatile
 800ebb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb4:	b672      	cpsid	i
 800ebb6:	f383 8811 	msr	BASEPRI, r3
 800ebba:	f3bf 8f6f 	isb	sy
 800ebbe:	f3bf 8f4f 	dsb	sy
 800ebc2:	b662      	cpsie	i
 800ebc4:	623b      	str	r3, [r7, #32]
}
 800ebc6:	bf00      	nop
 800ebc8:	bf00      	nop
 800ebca:	e7fd      	b.n	800ebc8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10d      	bne.n	800ebee <xTaskCreateStatic+0x52>
	__asm volatile
 800ebd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd6:	b672      	cpsid	i
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	b662      	cpsie	i
 800ebe6:	61fb      	str	r3, [r7, #28]
}
 800ebe8:	bf00      	nop
 800ebea:	bf00      	nop
 800ebec:	e7fd      	b.n	800ebea <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ebee:	23a8      	movs	r3, #168	@ 0xa8
 800ebf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2ba8      	cmp	r3, #168	@ 0xa8
 800ebf6:	d00d      	beq.n	800ec14 <xTaskCreateStatic+0x78>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebfc:	b672      	cpsid	i
 800ebfe:	f383 8811 	msr	BASEPRI, r3
 800ec02:	f3bf 8f6f 	isb	sy
 800ec06:	f3bf 8f4f 	dsb	sy
 800ec0a:	b662      	cpsie	i
 800ec0c:	61bb      	str	r3, [r7, #24]
}
 800ec0e:	bf00      	nop
 800ec10:	bf00      	nop
 800ec12:	e7fd      	b.n	800ec10 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d01e      	beq.n	800ec5a <xTaskCreateStatic+0xbe>
 800ec1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d01b      	beq.n	800ec5a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2e:	2202      	movs	r2, #2
 800ec30:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec34:	2300      	movs	r3, #0
 800ec36:	9303      	str	r3, [sp, #12]
 800ec38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3a:	9302      	str	r3, [sp, #8]
 800ec3c:	f107 0314 	add.w	r3, r7, #20
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	68b9      	ldr	r1, [r7, #8]
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f000 f851 	bl	800ecf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec54:	f000 f8f8 	bl	800ee48 <prvAddNewTaskToReadyList>
 800ec58:	e001      	b.n	800ec5e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec5e:	697b      	ldr	r3, [r7, #20]
	}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3728      	adds	r7, #40	@ 0x28
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08c      	sub	sp, #48	@ 0x30
 800ec6c:	af04      	add	r7, sp, #16
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	603b      	str	r3, [r7, #0]
 800ec74:	4613      	mov	r3, r2
 800ec76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec78:	88fb      	ldrh	r3, [r7, #6]
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f001 fe53 	bl	8010928 <pvPortMalloc>
 800ec82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00e      	beq.n	800eca8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec8a:	20a8      	movs	r0, #168	@ 0xa8
 800ec8c:	f001 fe4c 	bl	8010928 <pvPortMalloc>
 800ec90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d003      	beq.n	800eca0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ec9e:	e005      	b.n	800ecac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eca0:	6978      	ldr	r0, [r7, #20]
 800eca2:	f001 ff13 	bl	8010acc <vPortFree>
 800eca6:	e001      	b.n	800ecac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d017      	beq.n	800ece2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ecba:	88fa      	ldrh	r2, [r7, #6]
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	9303      	str	r3, [sp, #12]
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	9302      	str	r3, [sp, #8]
 800ecc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc6:	9301      	str	r3, [sp, #4]
 800ecc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecca:	9300      	str	r3, [sp, #0]
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	68b9      	ldr	r1, [r7, #8]
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f000 f80f 	bl	800ecf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecd6:	69f8      	ldr	r0, [r7, #28]
 800ecd8:	f000 f8b6 	bl	800ee48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	61bb      	str	r3, [r7, #24]
 800ece0:	e002      	b.n	800ece8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ece2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ece6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ece8:	69bb      	ldr	r3, [r7, #24]
	}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3720      	adds	r7, #32
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
	...

0800ecf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b088      	sub	sp, #32
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed04:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	21a5      	movs	r1, #165	@ 0xa5
 800ed0e:	f011 f8c5 	bl	801fe9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ed1c:	440b      	add	r3, r1
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	4413      	add	r3, r2
 800ed22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	f023 0307 	bic.w	r3, r3, #7
 800ed2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed2c:	69bb      	ldr	r3, [r7, #24]
 800ed2e:	f003 0307 	and.w	r3, r3, #7
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00d      	beq.n	800ed52 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800ed36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed3a:	b672      	cpsid	i
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	b662      	cpsie	i
 800ed4a:	617b      	str	r3, [r7, #20]
}
 800ed4c:	bf00      	nop
 800ed4e:	bf00      	nop
 800ed50:	e7fd      	b.n	800ed4e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d01f      	beq.n	800ed98 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed58:	2300      	movs	r3, #0
 800ed5a:	61fb      	str	r3, [r7, #28]
 800ed5c:	e012      	b.n	800ed84 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	4413      	add	r3, r2
 800ed64:	7819      	ldrb	r1, [r3, #0]
 800ed66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	3334      	adds	r3, #52	@ 0x34
 800ed6e:	460a      	mov	r2, r1
 800ed70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed72:	68ba      	ldr	r2, [r7, #8]
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	4413      	add	r3, r2
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d006      	beq.n	800ed8c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	3301      	adds	r3, #1
 800ed82:	61fb      	str	r3, [r7, #28]
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	2b0f      	cmp	r3, #15
 800ed88:	d9e9      	bls.n	800ed5e <prvInitialiseNewTask+0x6a>
 800ed8a:	e000      	b.n	800ed8e <prvInitialiseNewTask+0x9a>
			{
				break;
 800ed8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ed96:	e003      	b.n	800eda0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda2:	2b37      	cmp	r3, #55	@ 0x37
 800eda4:	d901      	bls.n	800edaa <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eda6:	2337      	movs	r3, #55	@ 0x37
 800eda8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800edaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edb4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800edb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edb8:	2200      	movs	r2, #0
 800edba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800edbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edbe:	3304      	adds	r3, #4
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fe fce5 	bl	800d790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800edc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc8:	3318      	adds	r3, #24
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe fce0 	bl	800d790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800edd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ede0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ede4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ede6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede8:	2200      	movs	r2, #0
 800edea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf0:	2200      	movs	r2, #0
 800edf2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800edf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edf8:	3354      	adds	r3, #84	@ 0x54
 800edfa:	224c      	movs	r2, #76	@ 0x4c
 800edfc:	2100      	movs	r1, #0
 800edfe:	4618      	mov	r0, r3
 800ee00:	f011 f84c 	bl	801fe9c <memset>
 800ee04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee06:	4a0d      	ldr	r2, [pc, #52]	@ (800ee3c <prvInitialiseNewTask+0x148>)
 800ee08:	659a      	str	r2, [r3, #88]	@ 0x58
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0c:	4a0c      	ldr	r2, [pc, #48]	@ (800ee40 <prvInitialiseNewTask+0x14c>)
 800ee0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ee10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee12:	4a0c      	ldr	r2, [pc, #48]	@ (800ee44 <prvInitialiseNewTask+0x150>)
 800ee14:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	68f9      	ldr	r1, [r7, #12]
 800ee1a:	69b8      	ldr	r0, [r7, #24]
 800ee1c:	f001 fb44 	bl	80104a8 <pxPortInitialiseStack>
 800ee20:	4602      	mov	r2, r0
 800ee22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee32:	bf00      	nop
 800ee34:	3720      	adds	r7, #32
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	2002d774 	.word	0x2002d774
 800ee40:	2002d7dc 	.word	0x2002d7dc
 800ee44:	2002d844 	.word	0x2002d844

0800ee48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee50:	f001 fc3c 	bl	80106cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee54:	4b2d      	ldr	r3, [pc, #180]	@ (800ef0c <prvAddNewTaskToReadyList+0xc4>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	4a2c      	ldr	r2, [pc, #176]	@ (800ef0c <prvAddNewTaskToReadyList+0xc4>)
 800ee5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee5e:	4b2c      	ldr	r3, [pc, #176]	@ (800ef10 <prvAddNewTaskToReadyList+0xc8>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d109      	bne.n	800ee7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee66:	4a2a      	ldr	r2, [pc, #168]	@ (800ef10 <prvAddNewTaskToReadyList+0xc8>)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee6c:	4b27      	ldr	r3, [pc, #156]	@ (800ef0c <prvAddNewTaskToReadyList+0xc4>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d110      	bne.n	800ee96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee74:	f000 fcf0 	bl	800f858 <prvInitialiseTaskLists>
 800ee78:	e00d      	b.n	800ee96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee7a:	4b26      	ldr	r3, [pc, #152]	@ (800ef14 <prvAddNewTaskToReadyList+0xcc>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d109      	bne.n	800ee96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee82:	4b23      	ldr	r3, [pc, #140]	@ (800ef10 <prvAddNewTaskToReadyList+0xc8>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d802      	bhi.n	800ee96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee90:	4a1f      	ldr	r2, [pc, #124]	@ (800ef10 <prvAddNewTaskToReadyList+0xc8>)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee96:	4b20      	ldr	r3, [pc, #128]	@ (800ef18 <prvAddNewTaskToReadyList+0xd0>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	4a1e      	ldr	r2, [pc, #120]	@ (800ef18 <prvAddNewTaskToReadyList+0xd0>)
 800ee9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eea0:	4b1d      	ldr	r3, [pc, #116]	@ (800ef18 <prvAddNewTaskToReadyList+0xd0>)
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeac:	4b1b      	ldr	r3, [pc, #108]	@ (800ef1c <prvAddNewTaskToReadyList+0xd4>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d903      	bls.n	800eebc <prvAddNewTaskToReadyList+0x74>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeb8:	4a18      	ldr	r2, [pc, #96]	@ (800ef1c <prvAddNewTaskToReadyList+0xd4>)
 800eeba:	6013      	str	r3, [r2, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eec0:	4613      	mov	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4a15      	ldr	r2, [pc, #84]	@ (800ef20 <prvAddNewTaskToReadyList+0xd8>)
 800eeca:	441a      	add	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3304      	adds	r3, #4
 800eed0:	4619      	mov	r1, r3
 800eed2:	4610      	mov	r0, r2
 800eed4:	f7fe fc69 	bl	800d7aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eed8:	f001 fc2e 	bl	8010738 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eedc:	4b0d      	ldr	r3, [pc, #52]	@ (800ef14 <prvAddNewTaskToReadyList+0xcc>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00e      	beq.n	800ef02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eee4:	4b0a      	ldr	r3, [pc, #40]	@ (800ef10 <prvAddNewTaskToReadyList+0xc8>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d207      	bcs.n	800ef02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eef2:	4b0c      	ldr	r3, [pc, #48]	@ (800ef24 <prvAddNewTaskToReadyList+0xdc>)
 800eef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eef8:	601a      	str	r2, [r3, #0]
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef02:	bf00      	nop
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	2000ef2c 	.word	0x2000ef2c
 800ef10:	2000ea58 	.word	0x2000ea58
 800ef14:	2000ef38 	.word	0x2000ef38
 800ef18:	2000ef48 	.word	0x2000ef48
 800ef1c:	2000ef34 	.word	0x2000ef34
 800ef20:	2000ea5c 	.word	0x2000ea5c
 800ef24:	e000ed04 	.word	0xe000ed04

0800ef28 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ef30:	f001 fbcc 	bl	80106cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d102      	bne.n	800ef40 <vTaskDelete+0x18>
 800ef3a:	4b2e      	ldr	r3, [pc, #184]	@ (800eff4 <vTaskDelete+0xcc>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	e000      	b.n	800ef42 <vTaskDelete+0x1a>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	3304      	adds	r3, #4
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fe fc8b 	bl	800d864 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d004      	beq.n	800ef60 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	3318      	adds	r3, #24
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe fc82 	bl	800d864 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800ef60:	4b25      	ldr	r3, [pc, #148]	@ (800eff8 <vTaskDelete+0xd0>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	3301      	adds	r3, #1
 800ef66:	4a24      	ldr	r2, [pc, #144]	@ (800eff8 <vTaskDelete+0xd0>)
 800ef68:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ef6a:	4b22      	ldr	r3, [pc, #136]	@ (800eff4 <vTaskDelete+0xcc>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d10b      	bne.n	800ef8c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	3304      	adds	r3, #4
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4820      	ldr	r0, [pc, #128]	@ (800effc <vTaskDelete+0xd4>)
 800ef7c:	f7fe fc15 	bl	800d7aa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ef80:	4b1f      	ldr	r3, [pc, #124]	@ (800f000 <vTaskDelete+0xd8>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	3301      	adds	r3, #1
 800ef86:	4a1e      	ldr	r2, [pc, #120]	@ (800f000 <vTaskDelete+0xd8>)
 800ef88:	6013      	str	r3, [r2, #0]
 800ef8a:	e009      	b.n	800efa0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ef8c:	4b1d      	ldr	r3, [pc, #116]	@ (800f004 <vTaskDelete+0xdc>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	3b01      	subs	r3, #1
 800ef92:	4a1c      	ldr	r2, [pc, #112]	@ (800f004 <vTaskDelete+0xdc>)
 800ef94:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ef96:	68f8      	ldr	r0, [r7, #12]
 800ef98:	f000 fccc 	bl	800f934 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ef9c:	f000 fd02 	bl	800f9a4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800efa0:	f001 fbca 	bl	8010738 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800efa4:	4b18      	ldr	r3, [pc, #96]	@ (800f008 <vTaskDelete+0xe0>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d01e      	beq.n	800efea <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 800efac:	4b11      	ldr	r3, [pc, #68]	@ (800eff4 <vTaskDelete+0xcc>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d119      	bne.n	800efea <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800efb6:	4b15      	ldr	r3, [pc, #84]	@ (800f00c <vTaskDelete+0xe4>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00d      	beq.n	800efda <vTaskDelete+0xb2>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc2:	b672      	cpsid	i
 800efc4:	f383 8811 	msr	BASEPRI, r3
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	b662      	cpsie	i
 800efd2:	60bb      	str	r3, [r7, #8]
}
 800efd4:	bf00      	nop
 800efd6:	bf00      	nop
 800efd8:	e7fd      	b.n	800efd6 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800efda:	4b0d      	ldr	r3, [pc, #52]	@ (800f010 <vTaskDelete+0xe8>)
 800efdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efe0:	601a      	str	r2, [r3, #0]
 800efe2:	f3bf 8f4f 	dsb	sy
 800efe6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800efea:	bf00      	nop
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	2000ea58 	.word	0x2000ea58
 800eff8:	2000ef48 	.word	0x2000ef48
 800effc:	2000ef00 	.word	0x2000ef00
 800f000:	2000ef14 	.word	0x2000ef14
 800f004:	2000ef2c 	.word	0x2000ef2c
 800f008:	2000ef38 	.word	0x2000ef38
 800f00c:	2000ef54 	.word	0x2000ef54
 800f010:	e000ed04 	.word	0xe000ed04

0800f014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f01c:	2300      	movs	r3, #0
 800f01e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d01a      	beq.n	800f05c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f026:	4b15      	ldr	r3, [pc, #84]	@ (800f07c <vTaskDelay+0x68>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00d      	beq.n	800f04a <vTaskDelay+0x36>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f032:	b672      	cpsid	i
 800f034:	f383 8811 	msr	BASEPRI, r3
 800f038:	f3bf 8f6f 	isb	sy
 800f03c:	f3bf 8f4f 	dsb	sy
 800f040:	b662      	cpsie	i
 800f042:	60bb      	str	r3, [r7, #8]
}
 800f044:	bf00      	nop
 800f046:	bf00      	nop
 800f048:	e7fd      	b.n	800f046 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f04a:	f000 f88f 	bl	800f16c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f04e:	2100      	movs	r1, #0
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 fe6d 	bl	800fd30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f056:	f000 f897 	bl	800f188 <xTaskResumeAll>
 800f05a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d107      	bne.n	800f072 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f062:	4b07      	ldr	r3, [pc, #28]	@ (800f080 <vTaskDelay+0x6c>)
 800f064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f072:	bf00      	nop
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	2000ef54 	.word	0x2000ef54
 800f080:	e000ed04 	.word	0xe000ed04

0800f084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08a      	sub	sp, #40	@ 0x28
 800f088:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f08a:	2300      	movs	r3, #0
 800f08c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f08e:	2300      	movs	r3, #0
 800f090:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f092:	463a      	mov	r2, r7
 800f094:	1d39      	adds	r1, r7, #4
 800f096:	f107 0308 	add.w	r3, r7, #8
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe fb24 	bl	800d6e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68ba      	ldr	r2, [r7, #8]
 800f0a6:	9202      	str	r2, [sp, #8]
 800f0a8:	9301      	str	r3, [sp, #4]
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	460a      	mov	r2, r1
 800f0b2:	4926      	ldr	r1, [pc, #152]	@ (800f14c <vTaskStartScheduler+0xc8>)
 800f0b4:	4826      	ldr	r0, [pc, #152]	@ (800f150 <vTaskStartScheduler+0xcc>)
 800f0b6:	f7ff fd71 	bl	800eb9c <xTaskCreateStatic>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	4a25      	ldr	r2, [pc, #148]	@ (800f154 <vTaskStartScheduler+0xd0>)
 800f0be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f0c0:	4b24      	ldr	r3, [pc, #144]	@ (800f154 <vTaskStartScheduler+0xd0>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	617b      	str	r3, [r7, #20]
 800f0cc:	e001      	b.n	800f0d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d102      	bne.n	800f0de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f0d8:	f000 fe7e 	bl	800fdd8 <xTimerCreateTimerTask>
 800f0dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d11d      	bne.n	800f120 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e8:	b672      	cpsid	i
 800f0ea:	f383 8811 	msr	BASEPRI, r3
 800f0ee:	f3bf 8f6f 	isb	sy
 800f0f2:	f3bf 8f4f 	dsb	sy
 800f0f6:	b662      	cpsie	i
 800f0f8:	613b      	str	r3, [r7, #16]
}
 800f0fa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f0fc:	4b16      	ldr	r3, [pc, #88]	@ (800f158 <vTaskStartScheduler+0xd4>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	3354      	adds	r3, #84	@ 0x54
 800f102:	4a16      	ldr	r2, [pc, #88]	@ (800f15c <vTaskStartScheduler+0xd8>)
 800f104:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f106:	4b16      	ldr	r3, [pc, #88]	@ (800f160 <vTaskStartScheduler+0xdc>)
 800f108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f10c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f10e:	4b15      	ldr	r3, [pc, #84]	@ (800f164 <vTaskStartScheduler+0xe0>)
 800f110:	2201      	movs	r2, #1
 800f112:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f114:	4b14      	ldr	r3, [pc, #80]	@ (800f168 <vTaskStartScheduler+0xe4>)
 800f116:	2200      	movs	r2, #0
 800f118:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f11a:	f001 fa59 	bl	80105d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f11e:	e011      	b.n	800f144 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f126:	d10d      	bne.n	800f144 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f12c:	b672      	cpsid	i
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	b662      	cpsie	i
 800f13c:	60fb      	str	r3, [r7, #12]
}
 800f13e:	bf00      	nop
 800f140:	bf00      	nop
 800f142:	e7fd      	b.n	800f140 <vTaskStartScheduler+0xbc>
}
 800f144:	bf00      	nop
 800f146:	3718      	adds	r7, #24
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	08020cf0 	.word	0x08020cf0
 800f150:	0800f829 	.word	0x0800f829
 800f154:	2000ef50 	.word	0x2000ef50
 800f158:	2000ea58 	.word	0x2000ea58
 800f15c:	2000003c 	.word	0x2000003c
 800f160:	2000ef4c 	.word	0x2000ef4c
 800f164:	2000ef38 	.word	0x2000ef38
 800f168:	2000ef30 	.word	0x2000ef30

0800f16c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f16c:	b480      	push	{r7}
 800f16e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f170:	4b04      	ldr	r3, [pc, #16]	@ (800f184 <vTaskSuspendAll+0x18>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3301      	adds	r3, #1
 800f176:	4a03      	ldr	r2, [pc, #12]	@ (800f184 <vTaskSuspendAll+0x18>)
 800f178:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f17a:	bf00      	nop
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr
 800f184:	2000ef54 	.word	0x2000ef54

0800f188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f18e:	2300      	movs	r3, #0
 800f190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f192:	2300      	movs	r3, #0
 800f194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f196:	4b43      	ldr	r3, [pc, #268]	@ (800f2a4 <xTaskResumeAll+0x11c>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10d      	bne.n	800f1ba <xTaskResumeAll+0x32>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a2:	b672      	cpsid	i
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	b662      	cpsie	i
 800f1b2:	603b      	str	r3, [r7, #0]
}
 800f1b4:	bf00      	nop
 800f1b6:	bf00      	nop
 800f1b8:	e7fd      	b.n	800f1b6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1ba:	f001 fa87 	bl	80106cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1be:	4b39      	ldr	r3, [pc, #228]	@ (800f2a4 <xTaskResumeAll+0x11c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	4a37      	ldr	r2, [pc, #220]	@ (800f2a4 <xTaskResumeAll+0x11c>)
 800f1c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1c8:	4b36      	ldr	r3, [pc, #216]	@ (800f2a4 <xTaskResumeAll+0x11c>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d162      	bne.n	800f296 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f1d0:	4b35      	ldr	r3, [pc, #212]	@ (800f2a8 <xTaskResumeAll+0x120>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d05e      	beq.n	800f296 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f1d8:	e02f      	b.n	800f23a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1da:	4b34      	ldr	r3, [pc, #208]	@ (800f2ac <xTaskResumeAll+0x124>)
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	3318      	adds	r3, #24
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7fe fb3c 	bl	800d864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	3304      	adds	r3, #4
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7fe fb37 	bl	800d864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1fa:	4b2d      	ldr	r3, [pc, #180]	@ (800f2b0 <xTaskResumeAll+0x128>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d903      	bls.n	800f20a <xTaskResumeAll+0x82>
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f206:	4a2a      	ldr	r2, [pc, #168]	@ (800f2b0 <xTaskResumeAll+0x128>)
 800f208:	6013      	str	r3, [r2, #0]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f20e:	4613      	mov	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	4413      	add	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4a27      	ldr	r2, [pc, #156]	@ (800f2b4 <xTaskResumeAll+0x12c>)
 800f218:	441a      	add	r2, r3
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	3304      	adds	r3, #4
 800f21e:	4619      	mov	r1, r3
 800f220:	4610      	mov	r0, r2
 800f222:	f7fe fac2 	bl	800d7aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f22a:	4b23      	ldr	r3, [pc, #140]	@ (800f2b8 <xTaskResumeAll+0x130>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f230:	429a      	cmp	r2, r3
 800f232:	d302      	bcc.n	800f23a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f234:	4b21      	ldr	r3, [pc, #132]	@ (800f2bc <xTaskResumeAll+0x134>)
 800f236:	2201      	movs	r2, #1
 800f238:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f23a:	4b1c      	ldr	r3, [pc, #112]	@ (800f2ac <xTaskResumeAll+0x124>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d1cb      	bne.n	800f1da <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d001      	beq.n	800f24c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f248:	f000 fbac 	bl	800f9a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f24c:	4b1c      	ldr	r3, [pc, #112]	@ (800f2c0 <xTaskResumeAll+0x138>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d010      	beq.n	800f27a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f258:	f000 f858 	bl	800f30c <xTaskIncrementTick>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d002      	beq.n	800f268 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f262:	4b16      	ldr	r3, [pc, #88]	@ (800f2bc <xTaskResumeAll+0x134>)
 800f264:	2201      	movs	r2, #1
 800f266:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	3b01      	subs	r3, #1
 800f26c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d1f1      	bne.n	800f258 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f274:	4b12      	ldr	r3, [pc, #72]	@ (800f2c0 <xTaskResumeAll+0x138>)
 800f276:	2200      	movs	r2, #0
 800f278:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f27a:	4b10      	ldr	r3, [pc, #64]	@ (800f2bc <xTaskResumeAll+0x134>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d009      	beq.n	800f296 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f282:	2301      	movs	r3, #1
 800f284:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f286:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c4 <xTaskResumeAll+0x13c>)
 800f288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f28c:	601a      	str	r2, [r3, #0]
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f296:	f001 fa4f 	bl	8010738 <vPortExitCritical>

	return xAlreadyYielded;
 800f29a:	68bb      	ldr	r3, [r7, #8]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	2000ef54 	.word	0x2000ef54
 800f2a8:	2000ef2c 	.word	0x2000ef2c
 800f2ac:	2000eeec 	.word	0x2000eeec
 800f2b0:	2000ef34 	.word	0x2000ef34
 800f2b4:	2000ea5c 	.word	0x2000ea5c
 800f2b8:	2000ea58 	.word	0x2000ea58
 800f2bc:	2000ef40 	.word	0x2000ef40
 800f2c0:	2000ef3c 	.word	0x2000ef3c
 800f2c4:	e000ed04 	.word	0xe000ed04

0800f2c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f2ce:	4b05      	ldr	r3, [pc, #20]	@ (800f2e4 <xTaskGetTickCount+0x1c>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f2d4:	687b      	ldr	r3, [r7, #4]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	370c      	adds	r7, #12
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	2000ef30 	.word	0x2000ef30

0800f2e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2ee:	f001 fad5 	bl	801089c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f2f6:	4b04      	ldr	r3, [pc, #16]	@ (800f308 <xTaskGetTickCountFromISR+0x20>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f2fc:	683b      	ldr	r3, [r7, #0]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	2000ef30 	.word	0x2000ef30

0800f30c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b086      	sub	sp, #24
 800f310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f312:	2300      	movs	r3, #0
 800f314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f316:	4b50      	ldr	r3, [pc, #320]	@ (800f458 <xTaskIncrementTick+0x14c>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f040 808c 	bne.w	800f438 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f320:	4b4e      	ldr	r3, [pc, #312]	@ (800f45c <xTaskIncrementTick+0x150>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	3301      	adds	r3, #1
 800f326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f328:	4a4c      	ldr	r2, [pc, #304]	@ (800f45c <xTaskIncrementTick+0x150>)
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d123      	bne.n	800f37c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f334:	4b4a      	ldr	r3, [pc, #296]	@ (800f460 <xTaskIncrementTick+0x154>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00d      	beq.n	800f35a <xTaskIncrementTick+0x4e>
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f342:	b672      	cpsid	i
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	b662      	cpsie	i
 800f352:	603b      	str	r3, [r7, #0]
}
 800f354:	bf00      	nop
 800f356:	bf00      	nop
 800f358:	e7fd      	b.n	800f356 <xTaskIncrementTick+0x4a>
 800f35a:	4b41      	ldr	r3, [pc, #260]	@ (800f460 <xTaskIncrementTick+0x154>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	60fb      	str	r3, [r7, #12]
 800f360:	4b40      	ldr	r3, [pc, #256]	@ (800f464 <xTaskIncrementTick+0x158>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4a3e      	ldr	r2, [pc, #248]	@ (800f460 <xTaskIncrementTick+0x154>)
 800f366:	6013      	str	r3, [r2, #0]
 800f368:	4a3e      	ldr	r2, [pc, #248]	@ (800f464 <xTaskIncrementTick+0x158>)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	6013      	str	r3, [r2, #0]
 800f36e:	4b3e      	ldr	r3, [pc, #248]	@ (800f468 <xTaskIncrementTick+0x15c>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	3301      	adds	r3, #1
 800f374:	4a3c      	ldr	r2, [pc, #240]	@ (800f468 <xTaskIncrementTick+0x15c>)
 800f376:	6013      	str	r3, [r2, #0]
 800f378:	f000 fb14 	bl	800f9a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f37c:	4b3b      	ldr	r3, [pc, #236]	@ (800f46c <xTaskIncrementTick+0x160>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	693a      	ldr	r2, [r7, #16]
 800f382:	429a      	cmp	r2, r3
 800f384:	d349      	bcc.n	800f41a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f386:	4b36      	ldr	r3, [pc, #216]	@ (800f460 <xTaskIncrementTick+0x154>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d104      	bne.n	800f39a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f390:	4b36      	ldr	r3, [pc, #216]	@ (800f46c <xTaskIncrementTick+0x160>)
 800f392:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f396:	601a      	str	r2, [r3, #0]
					break;
 800f398:	e03f      	b.n	800f41a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f39a:	4b31      	ldr	r3, [pc, #196]	@ (800f460 <xTaskIncrementTick+0x154>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3aa:	693a      	ldr	r2, [r7, #16]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d203      	bcs.n	800f3ba <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3b2:	4a2e      	ldr	r2, [pc, #184]	@ (800f46c <xTaskIncrementTick+0x160>)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3b8:	e02f      	b.n	800f41a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	3304      	adds	r3, #4
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe fa50 	bl	800d864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d004      	beq.n	800f3d6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	3318      	adds	r3, #24
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fe fa47 	bl	800d864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3da:	4b25      	ldr	r3, [pc, #148]	@ (800f470 <xTaskIncrementTick+0x164>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d903      	bls.n	800f3ea <xTaskIncrementTick+0xde>
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e6:	4a22      	ldr	r2, [pc, #136]	@ (800f470 <xTaskIncrementTick+0x164>)
 800f3e8:	6013      	str	r3, [r2, #0]
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	4a1f      	ldr	r2, [pc, #124]	@ (800f474 <xTaskIncrementTick+0x168>)
 800f3f8:	441a      	add	r2, r3
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	3304      	adds	r3, #4
 800f3fe:	4619      	mov	r1, r3
 800f400:	4610      	mov	r0, r2
 800f402:	f7fe f9d2 	bl	800d7aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f40a:	4b1b      	ldr	r3, [pc, #108]	@ (800f478 <xTaskIncrementTick+0x16c>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f410:	429a      	cmp	r2, r3
 800f412:	d3b8      	bcc.n	800f386 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f414:	2301      	movs	r3, #1
 800f416:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f418:	e7b5      	b.n	800f386 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f41a:	4b17      	ldr	r3, [pc, #92]	@ (800f478 <xTaskIncrementTick+0x16c>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f420:	4914      	ldr	r1, [pc, #80]	@ (800f474 <xTaskIncrementTick+0x168>)
 800f422:	4613      	mov	r3, r2
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4413      	add	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	440b      	add	r3, r1
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d907      	bls.n	800f442 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f432:	2301      	movs	r3, #1
 800f434:	617b      	str	r3, [r7, #20]
 800f436:	e004      	b.n	800f442 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f438:	4b10      	ldr	r3, [pc, #64]	@ (800f47c <xTaskIncrementTick+0x170>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	3301      	adds	r3, #1
 800f43e:	4a0f      	ldr	r2, [pc, #60]	@ (800f47c <xTaskIncrementTick+0x170>)
 800f440:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f442:	4b0f      	ldr	r3, [pc, #60]	@ (800f480 <xTaskIncrementTick+0x174>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f44a:	2301      	movs	r3, #1
 800f44c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f44e:	697b      	ldr	r3, [r7, #20]
}
 800f450:	4618      	mov	r0, r3
 800f452:	3718      	adds	r7, #24
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	2000ef54 	.word	0x2000ef54
 800f45c:	2000ef30 	.word	0x2000ef30
 800f460:	2000eee4 	.word	0x2000eee4
 800f464:	2000eee8 	.word	0x2000eee8
 800f468:	2000ef44 	.word	0x2000ef44
 800f46c:	2000ef4c 	.word	0x2000ef4c
 800f470:	2000ef34 	.word	0x2000ef34
 800f474:	2000ea5c 	.word	0x2000ea5c
 800f478:	2000ea58 	.word	0x2000ea58
 800f47c:	2000ef3c 	.word	0x2000ef3c
 800f480:	2000ef40 	.word	0x2000ef40

0800f484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f48a:	4b3e      	ldr	r3, [pc, #248]	@ (800f584 <vTaskSwitchContext+0x100>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d003      	beq.n	800f49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f492:	4b3d      	ldr	r3, [pc, #244]	@ (800f588 <vTaskSwitchContext+0x104>)
 800f494:	2201      	movs	r2, #1
 800f496:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f498:	e070      	b.n	800f57c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f49a:	4b3b      	ldr	r3, [pc, #236]	@ (800f588 <vTaskSwitchContext+0x104>)
 800f49c:	2200      	movs	r2, #0
 800f49e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f4a0:	4b3a      	ldr	r3, [pc, #232]	@ (800f58c <vTaskSwitchContext+0x108>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4a6:	613b      	str	r3, [r7, #16]
 800f4a8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f4ac:	60fb      	str	r3, [r7, #12]
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d111      	bne.n	800f4dc <vTaskSwitchContext+0x58>
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d10b      	bne.n	800f4dc <vTaskSwitchContext+0x58>
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	3308      	adds	r3, #8
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	68fa      	ldr	r2, [r7, #12]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d105      	bne.n	800f4dc <vTaskSwitchContext+0x58>
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	330c      	adds	r3, #12
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d008      	beq.n	800f4ee <vTaskSwitchContext+0x6a>
 800f4dc:	4b2b      	ldr	r3, [pc, #172]	@ (800f58c <vTaskSwitchContext+0x108>)
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	4b2a      	ldr	r3, [pc, #168]	@ (800f58c <vTaskSwitchContext+0x108>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	3334      	adds	r3, #52	@ 0x34
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	4610      	mov	r0, r2
 800f4ea:	f7f1 f9ff 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ee:	4b28      	ldr	r3, [pc, #160]	@ (800f590 <vTaskSwitchContext+0x10c>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e013      	b.n	800f51e <vTaskSwitchContext+0x9a>
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d10d      	bne.n	800f518 <vTaskSwitchContext+0x94>
	__asm volatile
 800f4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f500:	b672      	cpsid	i
 800f502:	f383 8811 	msr	BASEPRI, r3
 800f506:	f3bf 8f6f 	isb	sy
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	b662      	cpsie	i
 800f510:	607b      	str	r3, [r7, #4]
}
 800f512:	bf00      	nop
 800f514:	bf00      	nop
 800f516:	e7fd      	b.n	800f514 <vTaskSwitchContext+0x90>
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	617b      	str	r3, [r7, #20]
 800f51e:	491d      	ldr	r1, [pc, #116]	@ (800f594 <vTaskSwitchContext+0x110>)
 800f520:	697a      	ldr	r2, [r7, #20]
 800f522:	4613      	mov	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	4413      	add	r3, r2
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	440b      	add	r3, r1
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d0e1      	beq.n	800f4f6 <vTaskSwitchContext+0x72>
 800f532:	697a      	ldr	r2, [r7, #20]
 800f534:	4613      	mov	r3, r2
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	4413      	add	r3, r2
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	4a15      	ldr	r2, [pc, #84]	@ (800f594 <vTaskSwitchContext+0x110>)
 800f53e:	4413      	add	r3, r2
 800f540:	60bb      	str	r3, [r7, #8]
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	685a      	ldr	r2, [r3, #4]
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	605a      	str	r2, [r3, #4]
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	685a      	ldr	r2, [r3, #4]
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	3308      	adds	r3, #8
 800f554:	429a      	cmp	r2, r3
 800f556:	d104      	bne.n	800f562 <vTaskSwitchContext+0xde>
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	685a      	ldr	r2, [r3, #4]
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	605a      	str	r2, [r3, #4]
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	4a08      	ldr	r2, [pc, #32]	@ (800f58c <vTaskSwitchContext+0x108>)
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	4a08      	ldr	r2, [pc, #32]	@ (800f590 <vTaskSwitchContext+0x10c>)
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f572:	4b06      	ldr	r3, [pc, #24]	@ (800f58c <vTaskSwitchContext+0x108>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	3354      	adds	r3, #84	@ 0x54
 800f578:	4a07      	ldr	r2, [pc, #28]	@ (800f598 <vTaskSwitchContext+0x114>)
 800f57a:	6013      	str	r3, [r2, #0]
}
 800f57c:	bf00      	nop
 800f57e:	3718      	adds	r7, #24
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	2000ef54 	.word	0x2000ef54
 800f588:	2000ef40 	.word	0x2000ef40
 800f58c:	2000ea58 	.word	0x2000ea58
 800f590:	2000ef34 	.word	0x2000ef34
 800f594:	2000ea5c 	.word	0x2000ea5c
 800f598:	2000003c 	.word	0x2000003c

0800f59c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10d      	bne.n	800f5c8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b0:	b672      	cpsid	i
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	b662      	cpsie	i
 800f5c0:	60fb      	str	r3, [r7, #12]
}
 800f5c2:	bf00      	nop
 800f5c4:	bf00      	nop
 800f5c6:	e7fd      	b.n	800f5c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5c8:	4b07      	ldr	r3, [pc, #28]	@ (800f5e8 <vTaskPlaceOnEventList+0x4c>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3318      	adds	r3, #24
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f7fe f90e 	bl	800d7f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f5d6:	2101      	movs	r1, #1
 800f5d8:	6838      	ldr	r0, [r7, #0]
 800f5da:	f000 fba9 	bl	800fd30 <prvAddCurrentTaskToDelayedList>
}
 800f5de:	bf00      	nop
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	2000ea58 	.word	0x2000ea58

0800f5ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b086      	sub	sp, #24
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d10d      	bne.n	800f61a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800f5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f602:	b672      	cpsid	i
 800f604:	f383 8811 	msr	BASEPRI, r3
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	b662      	cpsie	i
 800f612:	617b      	str	r3, [r7, #20]
}
 800f614:	bf00      	nop
 800f616:	bf00      	nop
 800f618:	e7fd      	b.n	800f616 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f61a:	4b0a      	ldr	r3, [pc, #40]	@ (800f644 <vTaskPlaceOnEventListRestricted+0x58>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	3318      	adds	r3, #24
 800f620:	4619      	mov	r1, r3
 800f622:	68f8      	ldr	r0, [r7, #12]
 800f624:	f7fe f8c1 	bl	800d7aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d002      	beq.n	800f634 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800f62e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f632:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f634:	6879      	ldr	r1, [r7, #4]
 800f636:	68b8      	ldr	r0, [r7, #8]
 800f638:	f000 fb7a 	bl	800fd30 <prvAddCurrentTaskToDelayedList>
	}
 800f63c:	bf00      	nop
 800f63e:	3718      	adds	r7, #24
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	2000ea58 	.word	0x2000ea58

0800f648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b086      	sub	sp, #24
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10d      	bne.n	800f67a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f662:	b672      	cpsid	i
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	b662      	cpsie	i
 800f672:	60fb      	str	r3, [r7, #12]
}
 800f674:	bf00      	nop
 800f676:	bf00      	nop
 800f678:	e7fd      	b.n	800f676 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	3318      	adds	r3, #24
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fe f8f0 	bl	800d864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f684:	4b1d      	ldr	r3, [pc, #116]	@ (800f6fc <xTaskRemoveFromEventList+0xb4>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d11d      	bne.n	800f6c8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	3304      	adds	r3, #4
 800f690:	4618      	mov	r0, r3
 800f692:	f7fe f8e7 	bl	800d864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f69a:	4b19      	ldr	r3, [pc, #100]	@ (800f700 <xTaskRemoveFromEventList+0xb8>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d903      	bls.n	800f6aa <xTaskRemoveFromEventList+0x62>
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6a6:	4a16      	ldr	r2, [pc, #88]	@ (800f700 <xTaskRemoveFromEventList+0xb8>)
 800f6a8:	6013      	str	r3, [r2, #0]
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	009b      	lsls	r3, r3, #2
 800f6b2:	4413      	add	r3, r2
 800f6b4:	009b      	lsls	r3, r3, #2
 800f6b6:	4a13      	ldr	r2, [pc, #76]	@ (800f704 <xTaskRemoveFromEventList+0xbc>)
 800f6b8:	441a      	add	r2, r3
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	3304      	adds	r3, #4
 800f6be:	4619      	mov	r1, r3
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	f7fe f872 	bl	800d7aa <vListInsertEnd>
 800f6c6:	e005      	b.n	800f6d4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	3318      	adds	r3, #24
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	480e      	ldr	r0, [pc, #56]	@ (800f708 <xTaskRemoveFromEventList+0xc0>)
 800f6d0:	f7fe f86b 	bl	800d7aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6d8:	4b0c      	ldr	r3, [pc, #48]	@ (800f70c <xTaskRemoveFromEventList+0xc4>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d905      	bls.n	800f6ee <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f710 <xTaskRemoveFromEventList+0xc8>)
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	601a      	str	r2, [r3, #0]
 800f6ec:	e001      	b.n	800f6f2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f6f2:	697b      	ldr	r3, [r7, #20]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3718      	adds	r7, #24
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	2000ef54 	.word	0x2000ef54
 800f700:	2000ef34 	.word	0x2000ef34
 800f704:	2000ea5c 	.word	0x2000ea5c
 800f708:	2000eeec 	.word	0x2000eeec
 800f70c:	2000ea58 	.word	0x2000ea58
 800f710:	2000ef40 	.word	0x2000ef40

0800f714 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f71c:	4b06      	ldr	r3, [pc, #24]	@ (800f738 <vTaskInternalSetTimeOutState+0x24>)
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f724:	4b05      	ldr	r3, [pc, #20]	@ (800f73c <vTaskInternalSetTimeOutState+0x28>)
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	605a      	str	r2, [r3, #4]
}
 800f72c:	bf00      	nop
 800f72e:	370c      	adds	r7, #12
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr
 800f738:	2000ef44 	.word	0x2000ef44
 800f73c:	2000ef30 	.word	0x2000ef30

0800f740 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b088      	sub	sp, #32
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d10d      	bne.n	800f76c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f754:	b672      	cpsid	i
 800f756:	f383 8811 	msr	BASEPRI, r3
 800f75a:	f3bf 8f6f 	isb	sy
 800f75e:	f3bf 8f4f 	dsb	sy
 800f762:	b662      	cpsie	i
 800f764:	613b      	str	r3, [r7, #16]
}
 800f766:	bf00      	nop
 800f768:	bf00      	nop
 800f76a:	e7fd      	b.n	800f768 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d10d      	bne.n	800f78e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f776:	b672      	cpsid	i
 800f778:	f383 8811 	msr	BASEPRI, r3
 800f77c:	f3bf 8f6f 	isb	sy
 800f780:	f3bf 8f4f 	dsb	sy
 800f784:	b662      	cpsie	i
 800f786:	60fb      	str	r3, [r7, #12]
}
 800f788:	bf00      	nop
 800f78a:	bf00      	nop
 800f78c:	e7fd      	b.n	800f78a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f78e:	f000 ff9d 	bl	80106cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f792:	4b1d      	ldr	r3, [pc, #116]	@ (800f808 <xTaskCheckForTimeOut+0xc8>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	69ba      	ldr	r2, [r7, #24]
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7aa:	d102      	bne.n	800f7b2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	61fb      	str	r3, [r7, #28]
 800f7b0:	e023      	b.n	800f7fa <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	4b15      	ldr	r3, [pc, #84]	@ (800f80c <xTaskCheckForTimeOut+0xcc>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d007      	beq.n	800f7ce <xTaskCheckForTimeOut+0x8e>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	69ba      	ldr	r2, [r7, #24]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d302      	bcc.n	800f7ce <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	61fb      	str	r3, [r7, #28]
 800f7cc:	e015      	b.n	800f7fa <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	697a      	ldr	r2, [r7, #20]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d20b      	bcs.n	800f7f0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	1ad2      	subs	r2, r2, r3
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff ff95 	bl	800f714 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	61fb      	str	r3, [r7, #28]
 800f7ee:	e004      	b.n	800f7fa <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f7fa:	f000 ff9d 	bl	8010738 <vPortExitCritical>

	return xReturn;
 800f7fe:	69fb      	ldr	r3, [r7, #28]
}
 800f800:	4618      	mov	r0, r3
 800f802:	3720      	adds	r7, #32
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}
 800f808:	2000ef30 	.word	0x2000ef30
 800f80c:	2000ef44 	.word	0x2000ef44

0800f810 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f810:	b480      	push	{r7}
 800f812:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f814:	4b03      	ldr	r3, [pc, #12]	@ (800f824 <vTaskMissedYield+0x14>)
 800f816:	2201      	movs	r2, #1
 800f818:	601a      	str	r2, [r3, #0]
}
 800f81a:	bf00      	nop
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	2000ef40 	.word	0x2000ef40

0800f828 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f830:	f000 f852 	bl	800f8d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f834:	4b06      	ldr	r3, [pc, #24]	@ (800f850 <prvIdleTask+0x28>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d9f9      	bls.n	800f830 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f83c:	4b05      	ldr	r3, [pc, #20]	@ (800f854 <prvIdleTask+0x2c>)
 800f83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f842:	601a      	str	r2, [r3, #0]
 800f844:	f3bf 8f4f 	dsb	sy
 800f848:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f84c:	e7f0      	b.n	800f830 <prvIdleTask+0x8>
 800f84e:	bf00      	nop
 800f850:	2000ea5c 	.word	0x2000ea5c
 800f854:	e000ed04 	.word	0xe000ed04

0800f858 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f85e:	2300      	movs	r3, #0
 800f860:	607b      	str	r3, [r7, #4]
 800f862:	e00c      	b.n	800f87e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	4613      	mov	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4413      	add	r3, r2
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	4a12      	ldr	r2, [pc, #72]	@ (800f8b8 <prvInitialiseTaskLists+0x60>)
 800f870:	4413      	add	r3, r2
 800f872:	4618      	mov	r0, r3
 800f874:	f7fd ff6c 	bl	800d750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3301      	adds	r3, #1
 800f87c:	607b      	str	r3, [r7, #4]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b37      	cmp	r3, #55	@ 0x37
 800f882:	d9ef      	bls.n	800f864 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f884:	480d      	ldr	r0, [pc, #52]	@ (800f8bc <prvInitialiseTaskLists+0x64>)
 800f886:	f7fd ff63 	bl	800d750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f88a:	480d      	ldr	r0, [pc, #52]	@ (800f8c0 <prvInitialiseTaskLists+0x68>)
 800f88c:	f7fd ff60 	bl	800d750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f890:	480c      	ldr	r0, [pc, #48]	@ (800f8c4 <prvInitialiseTaskLists+0x6c>)
 800f892:	f7fd ff5d 	bl	800d750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f896:	480c      	ldr	r0, [pc, #48]	@ (800f8c8 <prvInitialiseTaskLists+0x70>)
 800f898:	f7fd ff5a 	bl	800d750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f89c:	480b      	ldr	r0, [pc, #44]	@ (800f8cc <prvInitialiseTaskLists+0x74>)
 800f89e:	f7fd ff57 	bl	800d750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f8d0 <prvInitialiseTaskLists+0x78>)
 800f8a4:	4a05      	ldr	r2, [pc, #20]	@ (800f8bc <prvInitialiseTaskLists+0x64>)
 800f8a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f8d4 <prvInitialiseTaskLists+0x7c>)
 800f8aa:	4a05      	ldr	r2, [pc, #20]	@ (800f8c0 <prvInitialiseTaskLists+0x68>)
 800f8ac:	601a      	str	r2, [r3, #0]
}
 800f8ae:	bf00      	nop
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	2000ea5c 	.word	0x2000ea5c
 800f8bc:	2000eebc 	.word	0x2000eebc
 800f8c0:	2000eed0 	.word	0x2000eed0
 800f8c4:	2000eeec 	.word	0x2000eeec
 800f8c8:	2000ef00 	.word	0x2000ef00
 800f8cc:	2000ef18 	.word	0x2000ef18
 800f8d0:	2000eee4 	.word	0x2000eee4
 800f8d4:	2000eee8 	.word	0x2000eee8

0800f8d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8de:	e019      	b.n	800f914 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f8e0:	f000 fef4 	bl	80106cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8e4:	4b10      	ldr	r3, [pc, #64]	@ (800f928 <prvCheckTasksWaitingTermination+0x50>)
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fd ffb7 	bl	800d864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f92c <prvCheckTasksWaitingTermination+0x54>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3b01      	subs	r3, #1
 800f8fc:	4a0b      	ldr	r2, [pc, #44]	@ (800f92c <prvCheckTasksWaitingTermination+0x54>)
 800f8fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f900:	4b0b      	ldr	r3, [pc, #44]	@ (800f930 <prvCheckTasksWaitingTermination+0x58>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	3b01      	subs	r3, #1
 800f906:	4a0a      	ldr	r2, [pc, #40]	@ (800f930 <prvCheckTasksWaitingTermination+0x58>)
 800f908:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f90a:	f000 ff15 	bl	8010738 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f810 	bl	800f934 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f914:	4b06      	ldr	r3, [pc, #24]	@ (800f930 <prvCheckTasksWaitingTermination+0x58>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1e1      	bne.n	800f8e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f91c:	bf00      	nop
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	2000ef00 	.word	0x2000ef00
 800f92c:	2000ef2c 	.word	0x2000ef2c
 800f930:	2000ef14 	.word	0x2000ef14

0800f934 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3354      	adds	r3, #84	@ 0x54
 800f940:	4618      	mov	r0, r3
 800f942:	f010 fac3 	bl	801fecc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d108      	bne.n	800f962 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f954:	4618      	mov	r0, r3
 800f956:	f001 f8b9 	bl	8010acc <vPortFree>
				vPortFree( pxTCB );
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f001 f8b6 	bl	8010acc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f960:	e01b      	b.n	800f99a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d103      	bne.n	800f974 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f001 f8ad 	bl	8010acc <vPortFree>
	}
 800f972:	e012      	b.n	800f99a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d00d      	beq.n	800f99a <prvDeleteTCB+0x66>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f982:	b672      	cpsid	i
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	b662      	cpsie	i
 800f992:	60fb      	str	r3, [r7, #12]
}
 800f994:	bf00      	nop
 800f996:	bf00      	nop
 800f998:	e7fd      	b.n	800f996 <prvDeleteTCB+0x62>
	}
 800f99a:	bf00      	nop
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
	...

0800f9a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f9dc <prvResetNextTaskUnblockTime+0x38>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d104      	bne.n	800f9be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f9e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f9b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9bc:	e008      	b.n	800f9d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9be:	4b07      	ldr	r3, [pc, #28]	@ (800f9dc <prvResetNextTaskUnblockTime+0x38>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	4a04      	ldr	r2, [pc, #16]	@ (800f9e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f9ce:	6013      	str	r3, [r2, #0]
}
 800f9d0:	bf00      	nop
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr
 800f9dc:	2000eee4 	.word	0x2000eee4
 800f9e0:	2000ef4c 	.word	0x2000ef4c

0800f9e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f9ea:	4b05      	ldr	r3, [pc, #20]	@ (800fa00 <xTaskGetCurrentTaskHandle+0x1c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f9f0:	687b      	ldr	r3, [r7, #4]
	}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	370c      	adds	r7, #12
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	2000ea58 	.word	0x2000ea58

0800fa04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fa0a:	4b0b      	ldr	r3, [pc, #44]	@ (800fa38 <xTaskGetSchedulerState+0x34>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d102      	bne.n	800fa18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa12:	2301      	movs	r3, #1
 800fa14:	607b      	str	r3, [r7, #4]
 800fa16:	e008      	b.n	800fa2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa18:	4b08      	ldr	r3, [pc, #32]	@ (800fa3c <xTaskGetSchedulerState+0x38>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d102      	bne.n	800fa26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa20:	2302      	movs	r3, #2
 800fa22:	607b      	str	r3, [r7, #4]
 800fa24:	e001      	b.n	800fa2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa26:	2300      	movs	r3, #0
 800fa28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa2a:	687b      	ldr	r3, [r7, #4]
	}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr
 800fa38:	2000ef38 	.word	0x2000ef38
 800fa3c:	2000ef54 	.word	0x2000ef54

0800fa40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d051      	beq.n	800fafa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa5a:	4b2a      	ldr	r3, [pc, #168]	@ (800fb04 <xTaskPriorityInherit+0xc4>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d241      	bcs.n	800fae8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	699b      	ldr	r3, [r3, #24]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	db06      	blt.n	800fa7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa6c:	4b25      	ldr	r3, [pc, #148]	@ (800fb04 <xTaskPriorityInherit+0xc4>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	6959      	ldr	r1, [r3, #20]
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa82:	4613      	mov	r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	4413      	add	r3, r2
 800fa88:	009b      	lsls	r3, r3, #2
 800fa8a:	4a1f      	ldr	r2, [pc, #124]	@ (800fb08 <xTaskPriorityInherit+0xc8>)
 800fa8c:	4413      	add	r3, r2
 800fa8e:	4299      	cmp	r1, r3
 800fa90:	d122      	bne.n	800fad8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	3304      	adds	r3, #4
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fd fee4 	bl	800d864 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa9c:	4b19      	ldr	r3, [pc, #100]	@ (800fb04 <xTaskPriorityInherit+0xc4>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faaa:	4b18      	ldr	r3, [pc, #96]	@ (800fb0c <xTaskPriorityInherit+0xcc>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d903      	bls.n	800faba <xTaskPriorityInherit+0x7a>
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fab6:	4a15      	ldr	r2, [pc, #84]	@ (800fb0c <xTaskPriorityInherit+0xcc>)
 800fab8:	6013      	str	r3, [r2, #0]
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fabe:	4613      	mov	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	4413      	add	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4a10      	ldr	r2, [pc, #64]	@ (800fb08 <xTaskPriorityInherit+0xc8>)
 800fac8:	441a      	add	r2, r3
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	3304      	adds	r3, #4
 800face:	4619      	mov	r1, r3
 800fad0:	4610      	mov	r0, r2
 800fad2:	f7fd fe6a 	bl	800d7aa <vListInsertEnd>
 800fad6:	e004      	b.n	800fae2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fad8:	4b0a      	ldr	r3, [pc, #40]	@ (800fb04 <xTaskPriorityInherit+0xc4>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fae2:	2301      	movs	r3, #1
 800fae4:	60fb      	str	r3, [r7, #12]
 800fae6:	e008      	b.n	800fafa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800faec:	4b05      	ldr	r3, [pc, #20]	@ (800fb04 <xTaskPriorityInherit+0xc4>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d201      	bcs.n	800fafa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800faf6:	2301      	movs	r3, #1
 800faf8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fafa:	68fb      	ldr	r3, [r7, #12]
	}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	2000ea58 	.word	0x2000ea58
 800fb08:	2000ea5c 	.word	0x2000ea5c
 800fb0c:	2000ef34 	.word	0x2000ef34

0800fb10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d05c      	beq.n	800fbe0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fb26:	4b31      	ldr	r3, [pc, #196]	@ (800fbec <xTaskPriorityDisinherit+0xdc>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	693a      	ldr	r2, [r7, #16]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d00d      	beq.n	800fb4c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800fb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb34:	b672      	cpsid	i
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	b662      	cpsie	i
 800fb44:	60fb      	str	r3, [r7, #12]
}
 800fb46:	bf00      	nop
 800fb48:	bf00      	nop
 800fb4a:	e7fd      	b.n	800fb48 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10d      	bne.n	800fb70 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb58:	b672      	cpsid	i
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	b662      	cpsie	i
 800fb68:	60bb      	str	r3, [r7, #8]
}
 800fb6a:	bf00      	nop
 800fb6c:	bf00      	nop
 800fb6e:	e7fd      	b.n	800fb6c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb74:	1e5a      	subs	r2, r3, #1
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d02c      	beq.n	800fbe0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d128      	bne.n	800fbe0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	3304      	adds	r3, #4
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fd fe66 	bl	800d864 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbb0:	4b0f      	ldr	r3, [pc, #60]	@ (800fbf0 <xTaskPriorityDisinherit+0xe0>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d903      	bls.n	800fbc0 <xTaskPriorityDisinherit+0xb0>
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbbc:	4a0c      	ldr	r2, [pc, #48]	@ (800fbf0 <xTaskPriorityDisinherit+0xe0>)
 800fbbe:	6013      	str	r3, [r2, #0]
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4a09      	ldr	r2, [pc, #36]	@ (800fbf4 <xTaskPriorityDisinherit+0xe4>)
 800fbce:	441a      	add	r2, r3
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	f7fd fde7 	bl	800d7aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fbe0:	697b      	ldr	r3, [r7, #20]
	}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3718      	adds	r7, #24
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	2000ea58 	.word	0x2000ea58
 800fbf0:	2000ef34 	.word	0x2000ef34
 800fbf4:	2000ea5c 	.word	0x2000ea5c

0800fbf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b088      	sub	sp, #32
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fc06:	2301      	movs	r3, #1
 800fc08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d070      	beq.n	800fcf2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fc10:	69bb      	ldr	r3, [r7, #24]
 800fc12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10d      	bne.n	800fc34 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800fc18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc1c:	b672      	cpsid	i
 800fc1e:	f383 8811 	msr	BASEPRI, r3
 800fc22:	f3bf 8f6f 	isb	sy
 800fc26:	f3bf 8f4f 	dsb	sy
 800fc2a:	b662      	cpsie	i
 800fc2c:	60fb      	str	r3, [r7, #12]
}
 800fc2e:	bf00      	nop
 800fc30:	bf00      	nop
 800fc32:	e7fd      	b.n	800fc30 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc38:	683a      	ldr	r2, [r7, #0]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d902      	bls.n	800fc44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	61fb      	str	r3, [r7, #28]
 800fc42:	e002      	b.n	800fc4a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fc44:	69bb      	ldr	r3, [r7, #24]
 800fc46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fc4a:	69bb      	ldr	r3, [r7, #24]
 800fc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4e:	69fa      	ldr	r2, [r7, #28]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d04e      	beq.n	800fcf2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc54:	69bb      	ldr	r3, [r7, #24]
 800fc56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc58:	697a      	ldr	r2, [r7, #20]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d149      	bne.n	800fcf2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc5e:	4b27      	ldr	r3, [pc, #156]	@ (800fcfc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	69ba      	ldr	r2, [r7, #24]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d10d      	bne.n	800fc84 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800fc68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc6c:	b672      	cpsid	i
 800fc6e:	f383 8811 	msr	BASEPRI, r3
 800fc72:	f3bf 8f6f 	isb	sy
 800fc76:	f3bf 8f4f 	dsb	sy
 800fc7a:	b662      	cpsie	i
 800fc7c:	60bb      	str	r3, [r7, #8]
}
 800fc7e:	bf00      	nop
 800fc80:	bf00      	nop
 800fc82:	e7fd      	b.n	800fc80 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	69fa      	ldr	r2, [r7, #28]
 800fc8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	699b      	ldr	r3, [r3, #24]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	db04      	blt.n	800fca2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	6959      	ldr	r1, [r3, #20]
 800fca6:	693a      	ldr	r2, [r7, #16]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	4413      	add	r3, r2
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	4a13      	ldr	r2, [pc, #76]	@ (800fd00 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fcb2:	4413      	add	r3, r2
 800fcb4:	4299      	cmp	r1, r3
 800fcb6:	d11c      	bne.n	800fcf2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	3304      	adds	r3, #4
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fd fdd1 	bl	800d864 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcc6:	4b0f      	ldr	r3, [pc, #60]	@ (800fd04 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d903      	bls.n	800fcd6 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd2:	4a0c      	ldr	r2, [pc, #48]	@ (800fd04 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fcd4:	6013      	str	r3, [r2, #0]
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcda:	4613      	mov	r3, r2
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	4413      	add	r3, r2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	4a07      	ldr	r2, [pc, #28]	@ (800fd00 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fce4:	441a      	add	r2, r3
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	3304      	adds	r3, #4
 800fcea:	4619      	mov	r1, r3
 800fcec:	4610      	mov	r0, r2
 800fcee:	f7fd fd5c 	bl	800d7aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcf2:	bf00      	nop
 800fcf4:	3720      	adds	r7, #32
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	2000ea58 	.word	0x2000ea58
 800fd00:	2000ea5c 	.word	0x2000ea5c
 800fd04:	2000ef34 	.word	0x2000ef34

0800fd08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fd08:	b480      	push	{r7}
 800fd0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd0c:	4b07      	ldr	r3, [pc, #28]	@ (800fd2c <pvTaskIncrementMutexHeldCount+0x24>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d004      	beq.n	800fd1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd14:	4b05      	ldr	r3, [pc, #20]	@ (800fd2c <pvTaskIncrementMutexHeldCount+0x24>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd1a:	3201      	adds	r2, #1
 800fd1c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fd1e:	4b03      	ldr	r3, [pc, #12]	@ (800fd2c <pvTaskIncrementMutexHeldCount+0x24>)
 800fd20:	681b      	ldr	r3, [r3, #0]
	}
 800fd22:	4618      	mov	r0, r3
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr
 800fd2c:	2000ea58 	.word	0x2000ea58

0800fd30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd3a:	4b21      	ldr	r3, [pc, #132]	@ (800fdc0 <prvAddCurrentTaskToDelayedList+0x90>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd40:	4b20      	ldr	r3, [pc, #128]	@ (800fdc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	3304      	adds	r3, #4
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fd fd8c 	bl	800d864 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd52:	d10a      	bne.n	800fd6a <prvAddCurrentTaskToDelayedList+0x3a>
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d007      	beq.n	800fd6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd5a:	4b1a      	ldr	r3, [pc, #104]	@ (800fdc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3304      	adds	r3, #4
 800fd60:	4619      	mov	r1, r3
 800fd62:	4819      	ldr	r0, [pc, #100]	@ (800fdc8 <prvAddCurrentTaskToDelayedList+0x98>)
 800fd64:	f7fd fd21 	bl	800d7aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd68:	e026      	b.n	800fdb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4413      	add	r3, r2
 800fd70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd72:	4b14      	ldr	r3, [pc, #80]	@ (800fdc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68ba      	ldr	r2, [r7, #8]
 800fd78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d209      	bcs.n	800fd96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd82:	4b12      	ldr	r3, [pc, #72]	@ (800fdcc <prvAddCurrentTaskToDelayedList+0x9c>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	4b0f      	ldr	r3, [pc, #60]	@ (800fdc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	4610      	mov	r0, r2
 800fd90:	f7fd fd2f 	bl	800d7f2 <vListInsert>
}
 800fd94:	e010      	b.n	800fdb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd96:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800fdc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	3304      	adds	r3, #4
 800fda0:	4619      	mov	r1, r3
 800fda2:	4610      	mov	r0, r2
 800fda4:	f7fd fd25 	bl	800d7f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fda8:	4b0a      	ldr	r3, [pc, #40]	@ (800fdd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d202      	bcs.n	800fdb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fdb2:	4a08      	ldr	r2, [pc, #32]	@ (800fdd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	6013      	str	r3, [r2, #0]
}
 800fdb8:	bf00      	nop
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	2000ef30 	.word	0x2000ef30
 800fdc4:	2000ea58 	.word	0x2000ea58
 800fdc8:	2000ef18 	.word	0x2000ef18
 800fdcc:	2000eee8 	.word	0x2000eee8
 800fdd0:	2000eee4 	.word	0x2000eee4
 800fdd4:	2000ef4c 	.word	0x2000ef4c

0800fdd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08a      	sub	sp, #40	@ 0x28
 800fddc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fdde:	2300      	movs	r3, #0
 800fde0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fde2:	f000 fb21 	bl	8010428 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fde6:	4b1e      	ldr	r3, [pc, #120]	@ (800fe60 <xTimerCreateTimerTask+0x88>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d021      	beq.n	800fe32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fdf6:	1d3a      	adds	r2, r7, #4
 800fdf8:	f107 0108 	add.w	r1, r7, #8
 800fdfc:	f107 030c 	add.w	r3, r7, #12
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fd fc8b 	bl	800d71c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fe06:	6879      	ldr	r1, [r7, #4]
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	9202      	str	r2, [sp, #8]
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	2302      	movs	r3, #2
 800fe12:	9300      	str	r3, [sp, #0]
 800fe14:	2300      	movs	r3, #0
 800fe16:	460a      	mov	r2, r1
 800fe18:	4912      	ldr	r1, [pc, #72]	@ (800fe64 <xTimerCreateTimerTask+0x8c>)
 800fe1a:	4813      	ldr	r0, [pc, #76]	@ (800fe68 <xTimerCreateTimerTask+0x90>)
 800fe1c:	f7fe febe 	bl	800eb9c <xTaskCreateStatic>
 800fe20:	4603      	mov	r3, r0
 800fe22:	4a12      	ldr	r2, [pc, #72]	@ (800fe6c <xTimerCreateTimerTask+0x94>)
 800fe24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fe26:	4b11      	ldr	r3, [pc, #68]	@ (800fe6c <xTimerCreateTimerTask+0x94>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d10d      	bne.n	800fe54 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800fe38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe3c:	b672      	cpsid	i
 800fe3e:	f383 8811 	msr	BASEPRI, r3
 800fe42:	f3bf 8f6f 	isb	sy
 800fe46:	f3bf 8f4f 	dsb	sy
 800fe4a:	b662      	cpsie	i
 800fe4c:	613b      	str	r3, [r7, #16]
}
 800fe4e:	bf00      	nop
 800fe50:	bf00      	nop
 800fe52:	e7fd      	b.n	800fe50 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fe54:	697b      	ldr	r3, [r7, #20]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3718      	adds	r7, #24
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	2000ef88 	.word	0x2000ef88
 800fe64:	08020cf8 	.word	0x08020cf8
 800fe68:	0800ffb1 	.word	0x0800ffb1
 800fe6c:	2000ef8c 	.word	0x2000ef8c

0800fe70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b08a      	sub	sp, #40	@ 0x28
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
 800fe7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10d      	bne.n	800fea4 <xTimerGenericCommand+0x34>
	__asm volatile
 800fe88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe8c:	b672      	cpsid	i
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	b662      	cpsie	i
 800fe9c:	623b      	str	r3, [r7, #32]
}
 800fe9e:	bf00      	nop
 800fea0:	bf00      	nop
 800fea2:	e7fd      	b.n	800fea0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fea4:	4b19      	ldr	r3, [pc, #100]	@ (800ff0c <xTimerGenericCommand+0x9c>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d02a      	beq.n	800ff02 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	2b05      	cmp	r3, #5
 800febc:	dc18      	bgt.n	800fef0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800febe:	f7ff fda1 	bl	800fa04 <xTaskGetSchedulerState>
 800fec2:	4603      	mov	r3, r0
 800fec4:	2b02      	cmp	r3, #2
 800fec6:	d109      	bne.n	800fedc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fec8:	4b10      	ldr	r3, [pc, #64]	@ (800ff0c <xTimerGenericCommand+0x9c>)
 800feca:	6818      	ldr	r0, [r3, #0]
 800fecc:	f107 0110 	add.w	r1, r7, #16
 800fed0:	2300      	movs	r3, #0
 800fed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fed4:	f7fd ff7c 	bl	800ddd0 <xQueueGenericSend>
 800fed8:	6278      	str	r0, [r7, #36]	@ 0x24
 800feda:	e012      	b.n	800ff02 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fedc:	4b0b      	ldr	r3, [pc, #44]	@ (800ff0c <xTimerGenericCommand+0x9c>)
 800fede:	6818      	ldr	r0, [r3, #0]
 800fee0:	f107 0110 	add.w	r1, r7, #16
 800fee4:	2300      	movs	r3, #0
 800fee6:	2200      	movs	r2, #0
 800fee8:	f7fd ff72 	bl	800ddd0 <xQueueGenericSend>
 800feec:	6278      	str	r0, [r7, #36]	@ 0x24
 800feee:	e008      	b.n	800ff02 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fef0:	4b06      	ldr	r3, [pc, #24]	@ (800ff0c <xTimerGenericCommand+0x9c>)
 800fef2:	6818      	ldr	r0, [r3, #0]
 800fef4:	f107 0110 	add.w	r1, r7, #16
 800fef8:	2300      	movs	r3, #0
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	f7fe f872 	bl	800dfe4 <xQueueGenericSendFromISR>
 800ff00:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ff02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3728      	adds	r7, #40	@ 0x28
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	2000ef88 	.word	0x2000ef88

0800ff10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b088      	sub	sp, #32
 800ff14:	af02      	add	r7, sp, #8
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff1a:	4b24      	ldr	r3, [pc, #144]	@ (800ffac <prvProcessExpiredTimer+0x9c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	3304      	adds	r3, #4
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fd fc9b 	bl	800d864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff34:	f003 0304 	and.w	r3, r3, #4
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d025      	beq.n	800ff88 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	699a      	ldr	r2, [r3, #24]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	18d1      	adds	r1, r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	683a      	ldr	r2, [r7, #0]
 800ff48:	6978      	ldr	r0, [r7, #20]
 800ff4a:	f000 f8d7 	bl	80100fc <prvInsertTimerInActiveList>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d022      	beq.n	800ff9a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff54:	2300      	movs	r3, #0
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	6978      	ldr	r0, [r7, #20]
 800ff60:	f7ff ff86 	bl	800fe70 <xTimerGenericCommand>
 800ff64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d116      	bne.n	800ff9a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff70:	b672      	cpsid	i
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	b662      	cpsie	i
 800ff80:	60fb      	str	r3, [r7, #12]
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	e7fd      	b.n	800ff84 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff8e:	f023 0301 	bic.w	r3, r3, #1
 800ff92:	b2da      	uxtb	r2, r3
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	6a1b      	ldr	r3, [r3, #32]
 800ff9e:	6978      	ldr	r0, [r7, #20]
 800ffa0:	4798      	blx	r3
}
 800ffa2:	bf00      	nop
 800ffa4:	3718      	adds	r7, #24
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	2000ef80 	.word	0x2000ef80

0800ffb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffb8:	f107 0308 	add.w	r3, r7, #8
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f000 f859 	bl	8010074 <prvGetNextExpireTime>
 800ffc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f000 f805 	bl	800ffd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ffce:	f000 f8d7 	bl	8010180 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ffd2:	bf00      	nop
 800ffd4:	e7f0      	b.n	800ffb8 <prvTimerTask+0x8>
	...

0800ffd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ffe2:	f7ff f8c3 	bl	800f16c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ffe6:	f107 0308 	add.w	r3, r7, #8
 800ffea:	4618      	mov	r0, r3
 800ffec:	f000 f866 	bl	80100bc <prvSampleTimeNow>
 800fff0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d130      	bne.n	801005a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d10a      	bne.n	8010014 <prvProcessTimerOrBlockTask+0x3c>
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	429a      	cmp	r2, r3
 8010004:	d806      	bhi.n	8010014 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010006:	f7ff f8bf 	bl	800f188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801000a:	68f9      	ldr	r1, [r7, #12]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7ff ff7f 	bl	800ff10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010012:	e024      	b.n	801005e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d008      	beq.n	801002c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801001a:	4b13      	ldr	r3, [pc, #76]	@ (8010068 <prvProcessTimerOrBlockTask+0x90>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d101      	bne.n	8010028 <prvProcessTimerOrBlockTask+0x50>
 8010024:	2301      	movs	r3, #1
 8010026:	e000      	b.n	801002a <prvProcessTimerOrBlockTask+0x52>
 8010028:	2300      	movs	r3, #0
 801002a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801002c:	4b0f      	ldr	r3, [pc, #60]	@ (801006c <prvProcessTimerOrBlockTask+0x94>)
 801002e:	6818      	ldr	r0, [r3, #0]
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	1ad3      	subs	r3, r2, r3
 8010036:	683a      	ldr	r2, [r7, #0]
 8010038:	4619      	mov	r1, r3
 801003a:	f7fe fd7b 	bl	800eb34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801003e:	f7ff f8a3 	bl	800f188 <xTaskResumeAll>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d10a      	bne.n	801005e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010048:	4b09      	ldr	r3, [pc, #36]	@ (8010070 <prvProcessTimerOrBlockTask+0x98>)
 801004a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801004e:	601a      	str	r2, [r3, #0]
 8010050:	f3bf 8f4f 	dsb	sy
 8010054:	f3bf 8f6f 	isb	sy
}
 8010058:	e001      	b.n	801005e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801005a:	f7ff f895 	bl	800f188 <xTaskResumeAll>
}
 801005e:	bf00      	nop
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	2000ef84 	.word	0x2000ef84
 801006c:	2000ef88 	.word	0x2000ef88
 8010070:	e000ed04 	.word	0xe000ed04

08010074 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801007c:	4b0e      	ldr	r3, [pc, #56]	@ (80100b8 <prvGetNextExpireTime+0x44>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d101      	bne.n	801008a <prvGetNextExpireTime+0x16>
 8010086:	2201      	movs	r2, #1
 8010088:	e000      	b.n	801008c <prvGetNextExpireTime+0x18>
 801008a:	2200      	movs	r2, #0
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d105      	bne.n	80100a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010098:	4b07      	ldr	r3, [pc, #28]	@ (80100b8 <prvGetNextExpireTime+0x44>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	68db      	ldr	r3, [r3, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	60fb      	str	r3, [r7, #12]
 80100a2:	e001      	b.n	80100a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80100a4:	2300      	movs	r3, #0
 80100a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80100a8:	68fb      	ldr	r3, [r7, #12]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	2000ef80 	.word	0x2000ef80

080100bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80100c4:	f7ff f900 	bl	800f2c8 <xTaskGetTickCount>
 80100c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80100ca:	4b0b      	ldr	r3, [pc, #44]	@ (80100f8 <prvSampleTimeNow+0x3c>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	68fa      	ldr	r2, [r7, #12]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d205      	bcs.n	80100e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80100d4:	f000 f940 	bl	8010358 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2201      	movs	r2, #1
 80100dc:	601a      	str	r2, [r3, #0]
 80100de:	e002      	b.n	80100e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80100e6:	4a04      	ldr	r2, [pc, #16]	@ (80100f8 <prvSampleTimeNow+0x3c>)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80100ec:	68fb      	ldr	r3, [r7, #12]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	2000ef90 	.word	0x2000ef90

080100fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b086      	sub	sp, #24
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801010a:	2300      	movs	r3, #0
 801010c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	68ba      	ldr	r2, [r7, #8]
 8010112:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	68fa      	ldr	r2, [r7, #12]
 8010118:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801011a:	68ba      	ldr	r2, [r7, #8]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	429a      	cmp	r2, r3
 8010120:	d812      	bhi.n	8010148 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	1ad2      	subs	r2, r2, r3
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	699b      	ldr	r3, [r3, #24]
 801012c:	429a      	cmp	r2, r3
 801012e:	d302      	bcc.n	8010136 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010130:	2301      	movs	r3, #1
 8010132:	617b      	str	r3, [r7, #20]
 8010134:	e01b      	b.n	801016e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010136:	4b10      	ldr	r3, [pc, #64]	@ (8010178 <prvInsertTimerInActiveList+0x7c>)
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3304      	adds	r3, #4
 801013e:	4619      	mov	r1, r3
 8010140:	4610      	mov	r0, r2
 8010142:	f7fd fb56 	bl	800d7f2 <vListInsert>
 8010146:	e012      	b.n	801016e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	429a      	cmp	r2, r3
 801014e:	d206      	bcs.n	801015e <prvInsertTimerInActiveList+0x62>
 8010150:	68ba      	ldr	r2, [r7, #8]
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	429a      	cmp	r2, r3
 8010156:	d302      	bcc.n	801015e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010158:	2301      	movs	r3, #1
 801015a:	617b      	str	r3, [r7, #20]
 801015c:	e007      	b.n	801016e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801015e:	4b07      	ldr	r3, [pc, #28]	@ (801017c <prvInsertTimerInActiveList+0x80>)
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3304      	adds	r3, #4
 8010166:	4619      	mov	r1, r3
 8010168:	4610      	mov	r0, r2
 801016a:	f7fd fb42 	bl	800d7f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801016e:	697b      	ldr	r3, [r7, #20]
}
 8010170:	4618      	mov	r0, r3
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	2000ef84 	.word	0x2000ef84
 801017c:	2000ef80 	.word	0x2000ef80

08010180 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b08e      	sub	sp, #56	@ 0x38
 8010184:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010186:	e0d4      	b.n	8010332 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	da1b      	bge.n	80101c6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801018e:	1d3b      	adds	r3, r7, #4
 8010190:	3304      	adds	r3, #4
 8010192:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010196:	2b00      	cmp	r3, #0
 8010198:	d10d      	bne.n	80101b6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 801019a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019e:	b672      	cpsid	i
 80101a0:	f383 8811 	msr	BASEPRI, r3
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	f3bf 8f4f 	dsb	sy
 80101ac:	b662      	cpsie	i
 80101ae:	61fb      	str	r3, [r7, #28]
}
 80101b0:	bf00      	nop
 80101b2:	bf00      	nop
 80101b4:	e7fd      	b.n	80101b2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80101b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101bc:	6850      	ldr	r0, [r2, #4]
 80101be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101c0:	6892      	ldr	r2, [r2, #8]
 80101c2:	4611      	mov	r1, r2
 80101c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f2c0 80b2 	blt.w	8010332 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80101d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d4:	695b      	ldr	r3, [r3, #20]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d004      	beq.n	80101e4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80101da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101dc:	3304      	adds	r3, #4
 80101de:	4618      	mov	r0, r3
 80101e0:	f7fd fb40 	bl	800d864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80101e4:	463b      	mov	r3, r7
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7ff ff68 	bl	80100bc <prvSampleTimeNow>
 80101ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b09      	cmp	r3, #9
 80101f2:	f200 809b 	bhi.w	801032c <prvProcessReceivedCommands+0x1ac>
 80101f6:	a201      	add	r2, pc, #4	@ (adr r2, 80101fc <prvProcessReceivedCommands+0x7c>)
 80101f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101fc:	08010225 	.word	0x08010225
 8010200:	08010225 	.word	0x08010225
 8010204:	08010225 	.word	0x08010225
 8010208:	0801029f 	.word	0x0801029f
 801020c:	080102b3 	.word	0x080102b3
 8010210:	08010303 	.word	0x08010303
 8010214:	08010225 	.word	0x08010225
 8010218:	08010225 	.word	0x08010225
 801021c:	0801029f 	.word	0x0801029f
 8010220:	080102b3 	.word	0x080102b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010226:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801022a:	f043 0301 	orr.w	r3, r3, #1
 801022e:	b2da      	uxtb	r2, r3
 8010230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010232:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010236:	68ba      	ldr	r2, [r7, #8]
 8010238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801023a:	699b      	ldr	r3, [r3, #24]
 801023c:	18d1      	adds	r1, r2, r3
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010244:	f7ff ff5a 	bl	80100fc <prvInsertTimerInActiveList>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d070      	beq.n	8010330 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801024e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010250:	6a1b      	ldr	r3, [r3, #32]
 8010252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801025c:	f003 0304 	and.w	r3, r3, #4
 8010260:	2b00      	cmp	r3, #0
 8010262:	d065      	beq.n	8010330 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010264:	68ba      	ldr	r2, [r7, #8]
 8010266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	441a      	add	r2, r3
 801026c:	2300      	movs	r3, #0
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	2300      	movs	r3, #0
 8010272:	2100      	movs	r1, #0
 8010274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010276:	f7ff fdfb 	bl	800fe70 <xTimerGenericCommand>
 801027a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801027c:	6a3b      	ldr	r3, [r7, #32]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d156      	bne.n	8010330 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8010282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010286:	b672      	cpsid	i
 8010288:	f383 8811 	msr	BASEPRI, r3
 801028c:	f3bf 8f6f 	isb	sy
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	b662      	cpsie	i
 8010296:	61bb      	str	r3, [r7, #24]
}
 8010298:	bf00      	nop
 801029a:	bf00      	nop
 801029c:	e7fd      	b.n	801029a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801029e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102a4:	f023 0301 	bic.w	r3, r3, #1
 80102a8:	b2da      	uxtb	r2, r3
 80102aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80102b0:	e03f      	b.n	8010332 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80102b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102b8:	f043 0301 	orr.w	r3, r3, #1
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80102ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102cc:	699b      	ldr	r3, [r3, #24]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d10d      	bne.n	80102ee <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80102d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d6:	b672      	cpsid	i
 80102d8:	f383 8811 	msr	BASEPRI, r3
 80102dc:	f3bf 8f6f 	isb	sy
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	b662      	cpsie	i
 80102e6:	617b      	str	r3, [r7, #20]
}
 80102e8:	bf00      	nop
 80102ea:	bf00      	nop
 80102ec:	e7fd      	b.n	80102ea <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80102ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f0:	699a      	ldr	r2, [r3, #24]
 80102f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f4:	18d1      	adds	r1, r2, r3
 80102f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102fc:	f7ff fefe 	bl	80100fc <prvInsertTimerInActiveList>
					break;
 8010300:	e017      	b.n	8010332 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010308:	f003 0302 	and.w	r3, r3, #2
 801030c:	2b00      	cmp	r3, #0
 801030e:	d103      	bne.n	8010318 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8010310:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010312:	f000 fbdb 	bl	8010acc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010316:	e00c      	b.n	8010332 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801031a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801031e:	f023 0301 	bic.w	r3, r3, #1
 8010322:	b2da      	uxtb	r2, r3
 8010324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801032a:	e002      	b.n	8010332 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 801032c:	bf00      	nop
 801032e:	e000      	b.n	8010332 <prvProcessReceivedCommands+0x1b2>
					break;
 8010330:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010332:	4b08      	ldr	r3, [pc, #32]	@ (8010354 <prvProcessReceivedCommands+0x1d4>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	1d39      	adds	r1, r7, #4
 8010338:	2200      	movs	r2, #0
 801033a:	4618      	mov	r0, r3
 801033c:	f7fd ff8e 	bl	800e25c <xQueueReceive>
 8010340:	4603      	mov	r3, r0
 8010342:	2b00      	cmp	r3, #0
 8010344:	f47f af20 	bne.w	8010188 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010348:	bf00      	nop
 801034a:	bf00      	nop
 801034c:	3730      	adds	r7, #48	@ 0x30
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}
 8010352:	bf00      	nop
 8010354:	2000ef88 	.word	0x2000ef88

08010358 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b088      	sub	sp, #32
 801035c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801035e:	e04b      	b.n	80103f8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010360:	4b2f      	ldr	r3, [pc, #188]	@ (8010420 <prvSwitchTimerLists+0xc8>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801036a:	4b2d      	ldr	r3, [pc, #180]	@ (8010420 <prvSwitchTimerLists+0xc8>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	3304      	adds	r3, #4
 8010378:	4618      	mov	r0, r3
 801037a:	f7fd fa73 	bl	800d864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	6a1b      	ldr	r3, [r3, #32]
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801038c:	f003 0304 	and.w	r3, r3, #4
 8010390:	2b00      	cmp	r3, #0
 8010392:	d031      	beq.n	80103f8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	699b      	ldr	r3, [r3, #24]
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	4413      	add	r3, r2
 801039c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801039e:	68ba      	ldr	r2, [r7, #8]
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d90e      	bls.n	80103c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	68ba      	ldr	r2, [r7, #8]
 80103aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	68fa      	ldr	r2, [r7, #12]
 80103b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010420 <prvSwitchTimerLists+0xc8>)
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3304      	adds	r3, #4
 80103ba:	4619      	mov	r1, r3
 80103bc:	4610      	mov	r0, r2
 80103be:	f7fd fa18 	bl	800d7f2 <vListInsert>
 80103c2:	e019      	b.n	80103f8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103c4:	2300      	movs	r3, #0
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	2300      	movs	r3, #0
 80103ca:	693a      	ldr	r2, [r7, #16]
 80103cc:	2100      	movs	r1, #0
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	f7ff fd4e 	bl	800fe70 <xTimerGenericCommand>
 80103d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10d      	bne.n	80103f8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80103dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103e0:	b672      	cpsid	i
 80103e2:	f383 8811 	msr	BASEPRI, r3
 80103e6:	f3bf 8f6f 	isb	sy
 80103ea:	f3bf 8f4f 	dsb	sy
 80103ee:	b662      	cpsie	i
 80103f0:	603b      	str	r3, [r7, #0]
}
 80103f2:	bf00      	nop
 80103f4:	bf00      	nop
 80103f6:	e7fd      	b.n	80103f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80103f8:	4b09      	ldr	r3, [pc, #36]	@ (8010420 <prvSwitchTimerLists+0xc8>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1ae      	bne.n	8010360 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010402:	4b07      	ldr	r3, [pc, #28]	@ (8010420 <prvSwitchTimerLists+0xc8>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010408:	4b06      	ldr	r3, [pc, #24]	@ (8010424 <prvSwitchTimerLists+0xcc>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4a04      	ldr	r2, [pc, #16]	@ (8010420 <prvSwitchTimerLists+0xc8>)
 801040e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010410:	4a04      	ldr	r2, [pc, #16]	@ (8010424 <prvSwitchTimerLists+0xcc>)
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	6013      	str	r3, [r2, #0]
}
 8010416:	bf00      	nop
 8010418:	3718      	adds	r7, #24
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}
 801041e:	bf00      	nop
 8010420:	2000ef80 	.word	0x2000ef80
 8010424:	2000ef84 	.word	0x2000ef84

08010428 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801042e:	f000 f94d 	bl	80106cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010432:	4b15      	ldr	r3, [pc, #84]	@ (8010488 <prvCheckForValidListAndQueue+0x60>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d120      	bne.n	801047c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801043a:	4814      	ldr	r0, [pc, #80]	@ (801048c <prvCheckForValidListAndQueue+0x64>)
 801043c:	f7fd f988 	bl	800d750 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010440:	4813      	ldr	r0, [pc, #76]	@ (8010490 <prvCheckForValidListAndQueue+0x68>)
 8010442:	f7fd f985 	bl	800d750 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010446:	4b13      	ldr	r3, [pc, #76]	@ (8010494 <prvCheckForValidListAndQueue+0x6c>)
 8010448:	4a10      	ldr	r2, [pc, #64]	@ (801048c <prvCheckForValidListAndQueue+0x64>)
 801044a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801044c:	4b12      	ldr	r3, [pc, #72]	@ (8010498 <prvCheckForValidListAndQueue+0x70>)
 801044e:	4a10      	ldr	r2, [pc, #64]	@ (8010490 <prvCheckForValidListAndQueue+0x68>)
 8010450:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010452:	2300      	movs	r3, #0
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	4b11      	ldr	r3, [pc, #68]	@ (801049c <prvCheckForValidListAndQueue+0x74>)
 8010458:	4a11      	ldr	r2, [pc, #68]	@ (80104a0 <prvCheckForValidListAndQueue+0x78>)
 801045a:	2110      	movs	r1, #16
 801045c:	200a      	movs	r0, #10
 801045e:	f7fd fa97 	bl	800d990 <xQueueGenericCreateStatic>
 8010462:	4603      	mov	r3, r0
 8010464:	4a08      	ldr	r2, [pc, #32]	@ (8010488 <prvCheckForValidListAndQueue+0x60>)
 8010466:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010468:	4b07      	ldr	r3, [pc, #28]	@ (8010488 <prvCheckForValidListAndQueue+0x60>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d005      	beq.n	801047c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010470:	4b05      	ldr	r3, [pc, #20]	@ (8010488 <prvCheckForValidListAndQueue+0x60>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	490b      	ldr	r1, [pc, #44]	@ (80104a4 <prvCheckForValidListAndQueue+0x7c>)
 8010476:	4618      	mov	r0, r3
 8010478:	f7fe fb08 	bl	800ea8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801047c:	f000 f95c 	bl	8010738 <vPortExitCritical>
}
 8010480:	bf00      	nop
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	2000ef88 	.word	0x2000ef88
 801048c:	2000ef58 	.word	0x2000ef58
 8010490:	2000ef6c 	.word	0x2000ef6c
 8010494:	2000ef80 	.word	0x2000ef80
 8010498:	2000ef84 	.word	0x2000ef84
 801049c:	2000f034 	.word	0x2000f034
 80104a0:	2000ef94 	.word	0x2000ef94
 80104a4:	08020d00 	.word	0x08020d00

080104a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80104a8:	b480      	push	{r7}
 80104aa:	b085      	sub	sp, #20
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	3b04      	subs	r3, #4
 80104b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80104c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	3b04      	subs	r3, #4
 80104c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	f023 0201 	bic.w	r2, r3, #1
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	3b04      	subs	r3, #4
 80104d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80104d8:	4a0c      	ldr	r2, [pc, #48]	@ (801050c <pxPortInitialiseStack+0x64>)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	3b14      	subs	r3, #20
 80104e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80104e4:	687a      	ldr	r2, [r7, #4]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	3b04      	subs	r3, #4
 80104ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f06f 0202 	mvn.w	r2, #2
 80104f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	3b20      	subs	r3, #32
 80104fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80104fe:	68fb      	ldr	r3, [r7, #12]
}
 8010500:	4618      	mov	r0, r3
 8010502:	3714      	adds	r7, #20
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	08010511 	.word	0x08010511

08010510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010510:	b480      	push	{r7}
 8010512:	b085      	sub	sp, #20
 8010514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010516:	2300      	movs	r3, #0
 8010518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801051a:	4b15      	ldr	r3, [pc, #84]	@ (8010570 <prvTaskExitError+0x60>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010522:	d00d      	beq.n	8010540 <prvTaskExitError+0x30>
	__asm volatile
 8010524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010528:	b672      	cpsid	i
 801052a:	f383 8811 	msr	BASEPRI, r3
 801052e:	f3bf 8f6f 	isb	sy
 8010532:	f3bf 8f4f 	dsb	sy
 8010536:	b662      	cpsie	i
 8010538:	60fb      	str	r3, [r7, #12]
}
 801053a:	bf00      	nop
 801053c:	bf00      	nop
 801053e:	e7fd      	b.n	801053c <prvTaskExitError+0x2c>
	__asm volatile
 8010540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010544:	b672      	cpsid	i
 8010546:	f383 8811 	msr	BASEPRI, r3
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	b662      	cpsie	i
 8010554:	60bb      	str	r3, [r7, #8]
}
 8010556:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010558:	bf00      	nop
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d0fc      	beq.n	801055a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010560:	bf00      	nop
 8010562:	bf00      	nop
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	20000020 	.word	0x20000020
	...

08010580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010580:	4b07      	ldr	r3, [pc, #28]	@ (80105a0 <pxCurrentTCBConst2>)
 8010582:	6819      	ldr	r1, [r3, #0]
 8010584:	6808      	ldr	r0, [r1, #0]
 8010586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058a:	f380 8809 	msr	PSP, r0
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f04f 0000 	mov.w	r0, #0
 8010596:	f380 8811 	msr	BASEPRI, r0
 801059a:	4770      	bx	lr
 801059c:	f3af 8000 	nop.w

080105a0 <pxCurrentTCBConst2>:
 80105a0:	2000ea58 	.word	0x2000ea58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80105a4:	bf00      	nop
 80105a6:	bf00      	nop

080105a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80105a8:	4808      	ldr	r0, [pc, #32]	@ (80105cc <prvPortStartFirstTask+0x24>)
 80105aa:	6800      	ldr	r0, [r0, #0]
 80105ac:	6800      	ldr	r0, [r0, #0]
 80105ae:	f380 8808 	msr	MSP, r0
 80105b2:	f04f 0000 	mov.w	r0, #0
 80105b6:	f380 8814 	msr	CONTROL, r0
 80105ba:	b662      	cpsie	i
 80105bc:	b661      	cpsie	f
 80105be:	f3bf 8f4f 	dsb	sy
 80105c2:	f3bf 8f6f 	isb	sy
 80105c6:	df00      	svc	0
 80105c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80105ca:	bf00      	nop
 80105cc:	e000ed08 	.word	0xe000ed08

080105d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80105d6:	4b37      	ldr	r3, [pc, #220]	@ (80106b4 <xPortStartScheduler+0xe4>)
 80105d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	22ff      	movs	r2, #255	@ 0xff
 80105e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80105f0:	78fb      	ldrb	r3, [r7, #3]
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b2f      	ldr	r3, [pc, #188]	@ (80106b8 <xPortStartScheduler+0xe8>)
 80105fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80105fe:	4b2f      	ldr	r3, [pc, #188]	@ (80106bc <xPortStartScheduler+0xec>)
 8010600:	2207      	movs	r2, #7
 8010602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010604:	e009      	b.n	801061a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010606:	4b2d      	ldr	r3, [pc, #180]	@ (80106bc <xPortStartScheduler+0xec>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3b01      	subs	r3, #1
 801060c:	4a2b      	ldr	r2, [pc, #172]	@ (80106bc <xPortStartScheduler+0xec>)
 801060e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010610:	78fb      	ldrb	r3, [r7, #3]
 8010612:	b2db      	uxtb	r3, r3
 8010614:	005b      	lsls	r3, r3, #1
 8010616:	b2db      	uxtb	r3, r3
 8010618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801061a:	78fb      	ldrb	r3, [r7, #3]
 801061c:	b2db      	uxtb	r3, r3
 801061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010622:	2b80      	cmp	r3, #128	@ 0x80
 8010624:	d0ef      	beq.n	8010606 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010626:	4b25      	ldr	r3, [pc, #148]	@ (80106bc <xPortStartScheduler+0xec>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f1c3 0307 	rsb	r3, r3, #7
 801062e:	2b04      	cmp	r3, #4
 8010630:	d00d      	beq.n	801064e <xPortStartScheduler+0x7e>
	__asm volatile
 8010632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010636:	b672      	cpsid	i
 8010638:	f383 8811 	msr	BASEPRI, r3
 801063c:	f3bf 8f6f 	isb	sy
 8010640:	f3bf 8f4f 	dsb	sy
 8010644:	b662      	cpsie	i
 8010646:	60bb      	str	r3, [r7, #8]
}
 8010648:	bf00      	nop
 801064a:	bf00      	nop
 801064c:	e7fd      	b.n	801064a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801064e:	4b1b      	ldr	r3, [pc, #108]	@ (80106bc <xPortStartScheduler+0xec>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	021b      	lsls	r3, r3, #8
 8010654:	4a19      	ldr	r2, [pc, #100]	@ (80106bc <xPortStartScheduler+0xec>)
 8010656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010658:	4b18      	ldr	r3, [pc, #96]	@ (80106bc <xPortStartScheduler+0xec>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010660:	4a16      	ldr	r2, [pc, #88]	@ (80106bc <xPortStartScheduler+0xec>)
 8010662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	b2da      	uxtb	r2, r3
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801066c:	4b14      	ldr	r3, [pc, #80]	@ (80106c0 <xPortStartScheduler+0xf0>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a13      	ldr	r2, [pc, #76]	@ (80106c0 <xPortStartScheduler+0xf0>)
 8010672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010678:	4b11      	ldr	r3, [pc, #68]	@ (80106c0 <xPortStartScheduler+0xf0>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a10      	ldr	r2, [pc, #64]	@ (80106c0 <xPortStartScheduler+0xf0>)
 801067e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010684:	f000 f8dc 	bl	8010840 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010688:	4b0e      	ldr	r3, [pc, #56]	@ (80106c4 <xPortStartScheduler+0xf4>)
 801068a:	2200      	movs	r2, #0
 801068c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801068e:	f000 f8fb 	bl	8010888 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010692:	4b0d      	ldr	r3, [pc, #52]	@ (80106c8 <xPortStartScheduler+0xf8>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4a0c      	ldr	r2, [pc, #48]	@ (80106c8 <xPortStartScheduler+0xf8>)
 8010698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801069c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801069e:	f7ff ff83 	bl	80105a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80106a2:	f7fe feef 	bl	800f484 <vTaskSwitchContext>
	prvTaskExitError();
 80106a6:	f7ff ff33 	bl	8010510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80106aa:	2300      	movs	r3, #0
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3710      	adds	r7, #16
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	e000e400 	.word	0xe000e400
 80106b8:	2000f084 	.word	0x2000f084
 80106bc:	2000f088 	.word	0x2000f088
 80106c0:	e000ed20 	.word	0xe000ed20
 80106c4:	20000020 	.word	0x20000020
 80106c8:	e000ef34 	.word	0xe000ef34

080106cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
	__asm volatile
 80106d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106d6:	b672      	cpsid	i
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	b662      	cpsie	i
 80106e6:	607b      	str	r3, [r7, #4]
}
 80106e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106ea:	4b11      	ldr	r3, [pc, #68]	@ (8010730 <vPortEnterCritical+0x64>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	3301      	adds	r3, #1
 80106f0:	4a0f      	ldr	r2, [pc, #60]	@ (8010730 <vPortEnterCritical+0x64>)
 80106f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80106f4:	4b0e      	ldr	r3, [pc, #56]	@ (8010730 <vPortEnterCritical+0x64>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d112      	bne.n	8010722 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80106fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010734 <vPortEnterCritical+0x68>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	b2db      	uxtb	r3, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00d      	beq.n	8010722 <vPortEnterCritical+0x56>
	__asm volatile
 8010706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801070a:	b672      	cpsid	i
 801070c:	f383 8811 	msr	BASEPRI, r3
 8010710:	f3bf 8f6f 	isb	sy
 8010714:	f3bf 8f4f 	dsb	sy
 8010718:	b662      	cpsie	i
 801071a:	603b      	str	r3, [r7, #0]
}
 801071c:	bf00      	nop
 801071e:	bf00      	nop
 8010720:	e7fd      	b.n	801071e <vPortEnterCritical+0x52>
	}
}
 8010722:	bf00      	nop
 8010724:	370c      	adds	r7, #12
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	20000020 	.word	0x20000020
 8010734:	e000ed04 	.word	0xe000ed04

08010738 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801073e:	4b13      	ldr	r3, [pc, #76]	@ (801078c <vPortExitCritical+0x54>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d10d      	bne.n	8010762 <vPortExitCritical+0x2a>
	__asm volatile
 8010746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801074a:	b672      	cpsid	i
 801074c:	f383 8811 	msr	BASEPRI, r3
 8010750:	f3bf 8f6f 	isb	sy
 8010754:	f3bf 8f4f 	dsb	sy
 8010758:	b662      	cpsie	i
 801075a:	607b      	str	r3, [r7, #4]
}
 801075c:	bf00      	nop
 801075e:	bf00      	nop
 8010760:	e7fd      	b.n	801075e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010762:	4b0a      	ldr	r3, [pc, #40]	@ (801078c <vPortExitCritical+0x54>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3b01      	subs	r3, #1
 8010768:	4a08      	ldr	r2, [pc, #32]	@ (801078c <vPortExitCritical+0x54>)
 801076a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801076c:	4b07      	ldr	r3, [pc, #28]	@ (801078c <vPortExitCritical+0x54>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d105      	bne.n	8010780 <vPortExitCritical+0x48>
 8010774:	2300      	movs	r3, #0
 8010776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	f383 8811 	msr	BASEPRI, r3
}
 801077e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010780:	bf00      	nop
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr
 801078c:	20000020 	.word	0x20000020

08010790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010790:	f3ef 8009 	mrs	r0, PSP
 8010794:	f3bf 8f6f 	isb	sy
 8010798:	4b15      	ldr	r3, [pc, #84]	@ (80107f0 <pxCurrentTCBConst>)
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	f01e 0f10 	tst.w	lr, #16
 80107a0:	bf08      	it	eq
 80107a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80107a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107aa:	6010      	str	r0, [r2, #0]
 80107ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80107b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80107b4:	b672      	cpsid	i
 80107b6:	f380 8811 	msr	BASEPRI, r0
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	b662      	cpsie	i
 80107c4:	f7fe fe5e 	bl	800f484 <vTaskSwitchContext>
 80107c8:	f04f 0000 	mov.w	r0, #0
 80107cc:	f380 8811 	msr	BASEPRI, r0
 80107d0:	bc09      	pop	{r0, r3}
 80107d2:	6819      	ldr	r1, [r3, #0]
 80107d4:	6808      	ldr	r0, [r1, #0]
 80107d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107da:	f01e 0f10 	tst.w	lr, #16
 80107de:	bf08      	it	eq
 80107e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80107e4:	f380 8809 	msr	PSP, r0
 80107e8:	f3bf 8f6f 	isb	sy
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop

080107f0 <pxCurrentTCBConst>:
 80107f0:	2000ea58 	.word	0x2000ea58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80107f4:	bf00      	nop
 80107f6:	bf00      	nop

080107f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
	__asm volatile
 80107fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010802:	b672      	cpsid	i
 8010804:	f383 8811 	msr	BASEPRI, r3
 8010808:	f3bf 8f6f 	isb	sy
 801080c:	f3bf 8f4f 	dsb	sy
 8010810:	b662      	cpsie	i
 8010812:	607b      	str	r3, [r7, #4]
}
 8010814:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010816:	f7fe fd79 	bl	800f30c <xTaskIncrementTick>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010820:	4b06      	ldr	r3, [pc, #24]	@ (801083c <SysTick_Handler+0x44>)
 8010822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010826:	601a      	str	r2, [r3, #0]
 8010828:	2300      	movs	r3, #0
 801082a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	f383 8811 	msr	BASEPRI, r3
}
 8010832:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010834:	bf00      	nop
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	e000ed04 	.word	0xe000ed04

08010840 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010840:	b480      	push	{r7}
 8010842:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010844:	4b0b      	ldr	r3, [pc, #44]	@ (8010874 <vPortSetupTimerInterrupt+0x34>)
 8010846:	2200      	movs	r2, #0
 8010848:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801084a:	4b0b      	ldr	r3, [pc, #44]	@ (8010878 <vPortSetupTimerInterrupt+0x38>)
 801084c:	2200      	movs	r2, #0
 801084e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010850:	4b0a      	ldr	r3, [pc, #40]	@ (801087c <vPortSetupTimerInterrupt+0x3c>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4a0a      	ldr	r2, [pc, #40]	@ (8010880 <vPortSetupTimerInterrupt+0x40>)
 8010856:	fba2 2303 	umull	r2, r3, r2, r3
 801085a:	099b      	lsrs	r3, r3, #6
 801085c:	4a09      	ldr	r2, [pc, #36]	@ (8010884 <vPortSetupTimerInterrupt+0x44>)
 801085e:	3b01      	subs	r3, #1
 8010860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010862:	4b04      	ldr	r3, [pc, #16]	@ (8010874 <vPortSetupTimerInterrupt+0x34>)
 8010864:	2207      	movs	r2, #7
 8010866:	601a      	str	r2, [r3, #0]
}
 8010868:	bf00      	nop
 801086a:	46bd      	mov	sp, r7
 801086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010870:	4770      	bx	lr
 8010872:	bf00      	nop
 8010874:	e000e010 	.word	0xe000e010
 8010878:	e000e018 	.word	0xe000e018
 801087c:	20000000 	.word	0x20000000
 8010880:	10624dd3 	.word	0x10624dd3
 8010884:	e000e014 	.word	0xe000e014

08010888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010888:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010898 <vPortEnableVFP+0x10>
 801088c:	6801      	ldr	r1, [r0, #0]
 801088e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010892:	6001      	str	r1, [r0, #0]
 8010894:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010896:	bf00      	nop
 8010898:	e000ed88 	.word	0xe000ed88

0801089c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80108a2:	f3ef 8305 	mrs	r3, IPSR
 80108a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2b0f      	cmp	r3, #15
 80108ac:	d917      	bls.n	80108de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80108ae:	4a1a      	ldr	r2, [pc, #104]	@ (8010918 <vPortValidateInterruptPriority+0x7c>)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4413      	add	r3, r2
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80108b8:	4b18      	ldr	r3, [pc, #96]	@ (801091c <vPortValidateInterruptPriority+0x80>)
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	7afa      	ldrb	r2, [r7, #11]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d20d      	bcs.n	80108de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108c6:	b672      	cpsid	i
 80108c8:	f383 8811 	msr	BASEPRI, r3
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	f3bf 8f4f 	dsb	sy
 80108d4:	b662      	cpsie	i
 80108d6:	607b      	str	r3, [r7, #4]
}
 80108d8:	bf00      	nop
 80108da:	bf00      	nop
 80108dc:	e7fd      	b.n	80108da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80108de:	4b10      	ldr	r3, [pc, #64]	@ (8010920 <vPortValidateInterruptPriority+0x84>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80108e6:	4b0f      	ldr	r3, [pc, #60]	@ (8010924 <vPortValidateInterruptPriority+0x88>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d90d      	bls.n	801090a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80108ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f2:	b672      	cpsid	i
 80108f4:	f383 8811 	msr	BASEPRI, r3
 80108f8:	f3bf 8f6f 	isb	sy
 80108fc:	f3bf 8f4f 	dsb	sy
 8010900:	b662      	cpsie	i
 8010902:	603b      	str	r3, [r7, #0]
}
 8010904:	bf00      	nop
 8010906:	bf00      	nop
 8010908:	e7fd      	b.n	8010906 <vPortValidateInterruptPriority+0x6a>
	}
 801090a:	bf00      	nop
 801090c:	3714      	adds	r7, #20
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	e000e3f0 	.word	0xe000e3f0
 801091c:	2000f084 	.word	0x2000f084
 8010920:	e000ed0c 	.word	0xe000ed0c
 8010924:	2000f088 	.word	0x2000f088

08010928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08a      	sub	sp, #40	@ 0x28
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010930:	2300      	movs	r3, #0
 8010932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010934:	f7fe fc1a 	bl	800f16c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010938:	4b5f      	ldr	r3, [pc, #380]	@ (8010ab8 <pvPortMalloc+0x190>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d101      	bne.n	8010944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010940:	f000 f924 	bl	8010b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010944:	4b5d      	ldr	r3, [pc, #372]	@ (8010abc <pvPortMalloc+0x194>)
 8010946:	681a      	ldr	r2, [r3, #0]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	4013      	ands	r3, r2
 801094c:	2b00      	cmp	r3, #0
 801094e:	f040 8094 	bne.w	8010a7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d020      	beq.n	801099a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010958:	2208      	movs	r2, #8
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4413      	add	r3, r2
 801095e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f003 0307 	and.w	r3, r3, #7
 8010966:	2b00      	cmp	r3, #0
 8010968:	d017      	beq.n	801099a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f023 0307 	bic.w	r3, r3, #7
 8010970:	3308      	adds	r3, #8
 8010972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f003 0307 	and.w	r3, r3, #7
 801097a:	2b00      	cmp	r3, #0
 801097c:	d00d      	beq.n	801099a <pvPortMalloc+0x72>
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010982:	b672      	cpsid	i
 8010984:	f383 8811 	msr	BASEPRI, r3
 8010988:	f3bf 8f6f 	isb	sy
 801098c:	f3bf 8f4f 	dsb	sy
 8010990:	b662      	cpsie	i
 8010992:	617b      	str	r3, [r7, #20]
}
 8010994:	bf00      	nop
 8010996:	bf00      	nop
 8010998:	e7fd      	b.n	8010996 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d06c      	beq.n	8010a7a <pvPortMalloc+0x152>
 80109a0:	4b47      	ldr	r3, [pc, #284]	@ (8010ac0 <pvPortMalloc+0x198>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d867      	bhi.n	8010a7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80109aa:	4b46      	ldr	r3, [pc, #280]	@ (8010ac4 <pvPortMalloc+0x19c>)
 80109ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80109ae:	4b45      	ldr	r3, [pc, #276]	@ (8010ac4 <pvPortMalloc+0x19c>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109b4:	e004      	b.n	80109c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80109b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80109ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d903      	bls.n	80109d2 <pvPortMalloc+0xaa>
 80109ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d1f1      	bne.n	80109b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80109d2:	4b39      	ldr	r3, [pc, #228]	@ (8010ab8 <pvPortMalloc+0x190>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109d8:	429a      	cmp	r2, r3
 80109da:	d04e      	beq.n	8010a7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80109dc:	6a3b      	ldr	r3, [r7, #32]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2208      	movs	r2, #8
 80109e2:	4413      	add	r3, r2
 80109e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	6a3b      	ldr	r3, [r7, #32]
 80109ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80109ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f0:	685a      	ldr	r2, [r3, #4]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	1ad2      	subs	r2, r2, r3
 80109f6:	2308      	movs	r3, #8
 80109f8:	005b      	lsls	r3, r3, #1
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d922      	bls.n	8010a44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80109fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	4413      	add	r3, r2
 8010a04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	f003 0307 	and.w	r3, r3, #7
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d00d      	beq.n	8010a2c <pvPortMalloc+0x104>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a14:	b672      	cpsid	i
 8010a16:	f383 8811 	msr	BASEPRI, r3
 8010a1a:	f3bf 8f6f 	isb	sy
 8010a1e:	f3bf 8f4f 	dsb	sy
 8010a22:	b662      	cpsie	i
 8010a24:	613b      	str	r3, [r7, #16]
}
 8010a26:	bf00      	nop
 8010a28:	bf00      	nop
 8010a2a:	e7fd      	b.n	8010a28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2e:	685a      	ldr	r2, [r3, #4]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	1ad2      	subs	r2, r2, r3
 8010a34:	69bb      	ldr	r3, [r7, #24]
 8010a36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3a:	687a      	ldr	r2, [r7, #4]
 8010a3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a3e:	69b8      	ldr	r0, [r7, #24]
 8010a40:	f000 f906 	bl	8010c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a44:	4b1e      	ldr	r3, [pc, #120]	@ (8010ac0 <pvPortMalloc+0x198>)
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8010ac0 <pvPortMalloc+0x198>)
 8010a50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a52:	4b1b      	ldr	r3, [pc, #108]	@ (8010ac0 <pvPortMalloc+0x198>)
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	4b1c      	ldr	r3, [pc, #112]	@ (8010ac8 <pvPortMalloc+0x1a0>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d203      	bcs.n	8010a66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a5e:	4b18      	ldr	r3, [pc, #96]	@ (8010ac0 <pvPortMalloc+0x198>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4a19      	ldr	r2, [pc, #100]	@ (8010ac8 <pvPortMalloc+0x1a0>)
 8010a64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a68:	685a      	ldr	r2, [r3, #4]
 8010a6a:	4b14      	ldr	r3, [pc, #80]	@ (8010abc <pvPortMalloc+0x194>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	431a      	orrs	r2, r3
 8010a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a76:	2200      	movs	r2, #0
 8010a78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a7a:	f7fe fb85 	bl	800f188 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d101      	bne.n	8010a88 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010a84:	f7ef ff42 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	f003 0307 	and.w	r3, r3, #7
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00d      	beq.n	8010aae <pvPortMalloc+0x186>
	__asm volatile
 8010a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a96:	b672      	cpsid	i
 8010a98:	f383 8811 	msr	BASEPRI, r3
 8010a9c:	f3bf 8f6f 	isb	sy
 8010aa0:	f3bf 8f4f 	dsb	sy
 8010aa4:	b662      	cpsie	i
 8010aa6:	60fb      	str	r3, [r7, #12]
}
 8010aa8:	bf00      	nop
 8010aaa:	bf00      	nop
 8010aac:	e7fd      	b.n	8010aaa <pvPortMalloc+0x182>
	return pvReturn;
 8010aae:	69fb      	ldr	r3, [r7, #28]
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3728      	adds	r7, #40	@ 0x28
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	20027094 	.word	0x20027094
 8010abc:	200270a0 	.word	0x200270a0
 8010ac0:	20027098 	.word	0x20027098
 8010ac4:	2002708c 	.word	0x2002708c
 8010ac8:	2002709c 	.word	0x2002709c

08010acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b086      	sub	sp, #24
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d04e      	beq.n	8010b7c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010ade:	2308      	movs	r3, #8
 8010ae0:	425b      	negs	r3, r3
 8010ae2:	697a      	ldr	r2, [r7, #20]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	4b24      	ldr	r3, [pc, #144]	@ (8010b84 <vPortFree+0xb8>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4013      	ands	r3, r2
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10d      	bne.n	8010b16 <vPortFree+0x4a>
	__asm volatile
 8010afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010afe:	b672      	cpsid	i
 8010b00:	f383 8811 	msr	BASEPRI, r3
 8010b04:	f3bf 8f6f 	isb	sy
 8010b08:	f3bf 8f4f 	dsb	sy
 8010b0c:	b662      	cpsie	i
 8010b0e:	60fb      	str	r3, [r7, #12]
}
 8010b10:	bf00      	nop
 8010b12:	bf00      	nop
 8010b14:	e7fd      	b.n	8010b12 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d00d      	beq.n	8010b3a <vPortFree+0x6e>
	__asm volatile
 8010b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b22:	b672      	cpsid	i
 8010b24:	f383 8811 	msr	BASEPRI, r3
 8010b28:	f3bf 8f6f 	isb	sy
 8010b2c:	f3bf 8f4f 	dsb	sy
 8010b30:	b662      	cpsie	i
 8010b32:	60bb      	str	r3, [r7, #8]
}
 8010b34:	bf00      	nop
 8010b36:	bf00      	nop
 8010b38:	e7fd      	b.n	8010b36 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	685a      	ldr	r2, [r3, #4]
 8010b3e:	4b11      	ldr	r3, [pc, #68]	@ (8010b84 <vPortFree+0xb8>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4013      	ands	r3, r2
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d019      	beq.n	8010b7c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d115      	bne.n	8010b7c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	685a      	ldr	r2, [r3, #4]
 8010b54:	4b0b      	ldr	r3, [pc, #44]	@ (8010b84 <vPortFree+0xb8>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	43db      	mvns	r3, r3
 8010b5a:	401a      	ands	r2, r3
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b60:	f7fe fb04 	bl	800f16c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	685a      	ldr	r2, [r3, #4]
 8010b68:	4b07      	ldr	r3, [pc, #28]	@ (8010b88 <vPortFree+0xbc>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	4a06      	ldr	r2, [pc, #24]	@ (8010b88 <vPortFree+0xbc>)
 8010b70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b72:	6938      	ldr	r0, [r7, #16]
 8010b74:	f000 f86c 	bl	8010c50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010b78:	f7fe fb06 	bl	800f188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b7c:	bf00      	nop
 8010b7e:	3718      	adds	r7, #24
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	200270a0 	.word	0x200270a0
 8010b88:	20027098 	.word	0x20027098

08010b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	b085      	sub	sp, #20
 8010b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b92:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8010b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b98:	4b27      	ldr	r3, [pc, #156]	@ (8010c38 <prvHeapInit+0xac>)
 8010b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f003 0307 	and.w	r3, r3, #7
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00c      	beq.n	8010bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	3307      	adds	r3, #7
 8010baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f023 0307 	bic.w	r3, r3, #7
 8010bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010bb4:	68ba      	ldr	r2, [r7, #8]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	1ad3      	subs	r3, r2, r3
 8010bba:	4a1f      	ldr	r2, [pc, #124]	@ (8010c38 <prvHeapInit+0xac>)
 8010bbc:	4413      	add	r3, r2
 8010bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8010c3c <prvHeapInit+0xb0>)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010bca:	4b1c      	ldr	r3, [pc, #112]	@ (8010c3c <prvHeapInit+0xb0>)
 8010bcc:	2200      	movs	r2, #0
 8010bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010bd8:	2208      	movs	r2, #8
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	1a9b      	subs	r3, r3, r2
 8010bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f023 0307 	bic.w	r3, r3, #7
 8010be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	4a15      	ldr	r2, [pc, #84]	@ (8010c40 <prvHeapInit+0xb4>)
 8010bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010bee:	4b14      	ldr	r3, [pc, #80]	@ (8010c40 <prvHeapInit+0xb4>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010bf6:	4b12      	ldr	r3, [pc, #72]	@ (8010c40 <prvHeapInit+0xb4>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	1ad2      	subs	r2, r2, r3
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8010c40 <prvHeapInit+0xb4>)
 8010c0e:	681a      	ldr	r2, [r3, #0]
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	4a0a      	ldr	r2, [pc, #40]	@ (8010c44 <prvHeapInit+0xb8>)
 8010c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	4a09      	ldr	r2, [pc, #36]	@ (8010c48 <prvHeapInit+0xbc>)
 8010c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c24:	4b09      	ldr	r3, [pc, #36]	@ (8010c4c <prvHeapInit+0xc0>)
 8010c26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010c2a:	601a      	str	r2, [r3, #0]
}
 8010c2c:	bf00      	nop
 8010c2e:	3714      	adds	r7, #20
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr
 8010c38:	2000f08c 	.word	0x2000f08c
 8010c3c:	2002708c 	.word	0x2002708c
 8010c40:	20027094 	.word	0x20027094
 8010c44:	2002709c 	.word	0x2002709c
 8010c48:	20027098 	.word	0x20027098
 8010c4c:	200270a0 	.word	0x200270a0

08010c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c58:	4b28      	ldr	r3, [pc, #160]	@ (8010cfc <prvInsertBlockIntoFreeList+0xac>)
 8010c5a:	60fb      	str	r3, [r7, #12]
 8010c5c:	e002      	b.n	8010c64 <prvInsertBlockIntoFreeList+0x14>
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	60fb      	str	r3, [r7, #12]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d8f7      	bhi.n	8010c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	4413      	add	r3, r2
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d108      	bne.n	8010c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	685a      	ldr	r2, [r3, #4]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	441a      	add	r2, r3
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	68ba      	ldr	r2, [r7, #8]
 8010c9c:	441a      	add	r2, r3
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d118      	bne.n	8010cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	4b15      	ldr	r3, [pc, #84]	@ (8010d00 <prvInsertBlockIntoFreeList+0xb0>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d00d      	beq.n	8010cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	685a      	ldr	r2, [r3, #4]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	441a      	add	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	601a      	str	r2, [r3, #0]
 8010ccc:	e008      	b.n	8010ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010cce:	4b0c      	ldr	r3, [pc, #48]	@ (8010d00 <prvInsertBlockIntoFreeList+0xb0>)
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	601a      	str	r2, [r3, #0]
 8010cd6:	e003      	b.n	8010ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ce0:	68fa      	ldr	r2, [r7, #12]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d002      	beq.n	8010cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cee:	bf00      	nop
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	2002708c 	.word	0x2002708c
 8010d00:	20027094 	.word	0x20027094

08010d04 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	330c      	adds	r3, #12
 8010d14:	461a      	mov	r2, r3
 8010d16:	6839      	ldr	r1, [r7, #0]
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f001 fff7 	bl	8012d0c <tcpip_send_msg_wait_sem>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d103      	bne.n	8010d32 <netconn_apimsg+0x2e>
    return apimsg->err;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010d30:	e001      	b.n	8010d36 <netconn_apimsg+0x32>
  }
  return err;
 8010d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
	...

08010d40 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b08c      	sub	sp, #48	@ 0x30
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	4603      	mov	r3, r0
 8010d48:	603a      	str	r2, [r7, #0]
 8010d4a:	71fb      	strb	r3, [r7, #7]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	6839      	ldr	r1, [r7, #0]
 8010d54:	4618      	mov	r0, r3
 8010d56:	f000 ff21 	bl	8011b9c <netconn_alloc>
 8010d5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8010d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d054      	beq.n	8010e0c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010d62:	79bb      	ldrb	r3, [r7, #6]
 8010d64:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d68:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010d6a:	f107 0308 	add.w	r3, r7, #8
 8010d6e:	4619      	mov	r1, r3
 8010d70:	4829      	ldr	r0, [pc, #164]	@ (8010e18 <netconn_new_with_proto_and_callback+0xd8>)
 8010d72:	f7ff ffc7 	bl	8010d04 <netconn_apimsg>
 8010d76:	4603      	mov	r3, r0
 8010d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8010d7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d043      	beq.n	8010e0c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d005      	beq.n	8010d98 <netconn_new_with_proto_and_callback+0x58>
 8010d8c:	4b23      	ldr	r3, [pc, #140]	@ (8010e1c <netconn_new_with_proto_and_callback+0xdc>)
 8010d8e:	22a3      	movs	r2, #163	@ 0xa3
 8010d90:	4923      	ldr	r1, [pc, #140]	@ (8010e20 <netconn_new_with_proto_and_callback+0xe0>)
 8010d92:	4824      	ldr	r0, [pc, #144]	@ (8010e24 <netconn_new_with_proto_and_callback+0xe4>)
 8010d94:	f00e ff2a 	bl	801fbec <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d9a:	3310      	adds	r3, #16
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f00d fba3 	bl	801e4e8 <sys_mbox_valid>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d105      	bne.n	8010db4 <netconn_new_with_proto_and_callback+0x74>
 8010da8:	4b1c      	ldr	r3, [pc, #112]	@ (8010e1c <netconn_new_with_proto_and_callback+0xdc>)
 8010daa:	22a4      	movs	r2, #164	@ 0xa4
 8010dac:	491e      	ldr	r1, [pc, #120]	@ (8010e28 <netconn_new_with_proto_and_callback+0xe8>)
 8010dae:	481d      	ldr	r0, [pc, #116]	@ (8010e24 <netconn_new_with_proto_and_callback+0xe4>)
 8010db0:	f00e ff1c 	bl	801fbec <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010db6:	3314      	adds	r3, #20
 8010db8:	4618      	mov	r0, r3
 8010dba:	f00d fb95 	bl	801e4e8 <sys_mbox_valid>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d005      	beq.n	8010dd0 <netconn_new_with_proto_and_callback+0x90>
 8010dc4:	4b15      	ldr	r3, [pc, #84]	@ (8010e1c <netconn_new_with_proto_and_callback+0xdc>)
 8010dc6:	22a6      	movs	r2, #166	@ 0xa6
 8010dc8:	4918      	ldr	r1, [pc, #96]	@ (8010e2c <netconn_new_with_proto_and_callback+0xec>)
 8010dca:	4816      	ldr	r0, [pc, #88]	@ (8010e24 <netconn_new_with_proto_and_callback+0xe4>)
 8010dcc:	f00e ff0e 	bl	801fbec <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dd2:	330c      	adds	r3, #12
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f00d fc41 	bl	801e65c <sys_sem_valid>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d105      	bne.n	8010dec <netconn_new_with_proto_and_callback+0xac>
 8010de0:	4b0e      	ldr	r3, [pc, #56]	@ (8010e1c <netconn_new_with_proto_and_callback+0xdc>)
 8010de2:	22a9      	movs	r2, #169	@ 0xa9
 8010de4:	4912      	ldr	r1, [pc, #72]	@ (8010e30 <netconn_new_with_proto_and_callback+0xf0>)
 8010de6:	480f      	ldr	r0, [pc, #60]	@ (8010e24 <netconn_new_with_proto_and_callback+0xe4>)
 8010de8:	f00e ff00 	bl	801fbec <iprintf>
      sys_sem_free(&conn->op_completed);
 8010dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dee:	330c      	adds	r3, #12
 8010df0:	4618      	mov	r0, r3
 8010df2:	f00d fc1b 	bl	801e62c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df8:	3310      	adds	r3, #16
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f00d fae0 	bl	801e3c0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010e00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e02:	2007      	movs	r0, #7
 8010e04:	f002 fdfc 	bl	8013a00 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	e000      	b.n	8010e0e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3730      	adds	r7, #48	@ 0x30
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	08011b71 	.word	0x08011b71
 8010e1c:	08020d08 	.word	0x08020d08
 8010e20:	08020d3c 	.word	0x08020d3c
 8010e24:	08020d60 	.word	0x08020d60
 8010e28:	08020d88 	.word	0x08020d88
 8010e2c:	08020da0 	.word	0x08020da0
 8010e30:	08020dc4 	.word	0x08020dc4

08010e34 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b08c      	sub	sp, #48	@ 0x30
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d101      	bne.n	8010e46 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010e42:	2300      	movs	r3, #0
 8010e44:	e014      	b.n	8010e70 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010e4a:	2329      	movs	r3, #41	@ 0x29
 8010e4c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010e4e:	f107 030c 	add.w	r3, r7, #12
 8010e52:	4619      	mov	r1, r3
 8010e54:	4808      	ldr	r0, [pc, #32]	@ (8010e78 <netconn_prepare_delete+0x44>)
 8010e56:	f7ff ff55 	bl	8010d04 <netconn_apimsg>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010e60:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d002      	beq.n	8010e6e <netconn_prepare_delete+0x3a>
    return err;
 8010e68:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010e6c:	e000      	b.n	8010e70 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3730      	adds	r7, #48	@ 0x30
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	080120dd 	.word	0x080120dd

08010e7c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d101      	bne.n	8010e8e <netconn_delete+0x12>
    return ERR_OK;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	e00d      	b.n	8010eaa <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f7ff ffd0 	bl	8010e34 <netconn_prepare_delete>
 8010e94:	4603      	mov	r3, r0
 8010e96:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d102      	bne.n	8010ea6 <netconn_delete+0x2a>
    netconn_free(conn);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 fee9 	bl	8011c78 <netconn_free>
  }
  return err;
 8010ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
	...

08010eb4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b08e      	sub	sp, #56	@ 0x38
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d109      	bne.n	8010edc <netconn_bind+0x28>
 8010ec8:	4b11      	ldr	r3, [pc, #68]	@ (8010f10 <netconn_bind+0x5c>)
 8010eca:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8010ece:	4911      	ldr	r1, [pc, #68]	@ (8010f14 <netconn_bind+0x60>)
 8010ed0:	4811      	ldr	r0, [pc, #68]	@ (8010f18 <netconn_bind+0x64>)
 8010ed2:	f00e fe8b 	bl	801fbec <iprintf>
 8010ed6:	f06f 030f 	mvn.w	r3, #15
 8010eda:	e015      	b.n	8010f08 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d101      	bne.n	8010ee6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8010ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8010f1c <netconn_bind+0x68>)
 8010ee4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010eee:	88fb      	ldrh	r3, [r7, #6]
 8010ef0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8010ef2:	f107 0314 	add.w	r3, r7, #20
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	4809      	ldr	r0, [pc, #36]	@ (8010f20 <netconn_bind+0x6c>)
 8010efa:	f7ff ff03 	bl	8010d04 <netconn_apimsg>
 8010efe:	4603      	mov	r3, r0
 8010f00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010f04:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3738      	adds	r7, #56	@ 0x38
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	08020d08 	.word	0x08020d08
 8010f14:	08020e40 	.word	0x08020e40
 8010f18:	08020d60 	.word	0x08020d60
 8010f1c:	08024960 	.word	0x08024960
 8010f20:	080122a5 	.word	0x080122a5

08010f24 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b088      	sub	sp, #32
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	4613      	mov	r3, r2
 8010f30:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8010f32:	2300      	movs	r3, #0
 8010f34:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d109      	bne.n	8010f50 <netconn_recv_data+0x2c>
 8010f3c:	4b58      	ldr	r3, [pc, #352]	@ (80110a0 <netconn_recv_data+0x17c>)
 8010f3e:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8010f42:	4958      	ldr	r1, [pc, #352]	@ (80110a4 <netconn_recv_data+0x180>)
 8010f44:	4858      	ldr	r0, [pc, #352]	@ (80110a8 <netconn_recv_data+0x184>)
 8010f46:	f00e fe51 	bl	801fbec <iprintf>
 8010f4a:	f06f 030f 	mvn.w	r3, #15
 8010f4e:	e0a2      	b.n	8011096 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	2200      	movs	r2, #0
 8010f54:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d109      	bne.n	8010f70 <netconn_recv_data+0x4c>
 8010f5c:	4b50      	ldr	r3, [pc, #320]	@ (80110a0 <netconn_recv_data+0x17c>)
 8010f5e:	f240 224a 	movw	r2, #586	@ 0x24a
 8010f62:	4952      	ldr	r1, [pc, #328]	@ (80110ac <netconn_recv_data+0x188>)
 8010f64:	4850      	ldr	r0, [pc, #320]	@ (80110a8 <netconn_recv_data+0x184>)
 8010f66:	f00e fe41 	bl	801fbec <iprintf>
 8010f6a:	f06f 030f 	mvn.w	r3, #15
 8010f6e:	e092      	b.n	8011096 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	3310      	adds	r3, #16
 8010f74:	4618      	mov	r0, r3
 8010f76:	f00d fab7 	bl	801e4e8 <sys_mbox_valid>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d10e      	bne.n	8010f9e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010f80:	68f8      	ldr	r0, [r7, #12]
 8010f82:	f000 fa45 	bl	8011410 <netconn_err>
 8010f86:	4603      	mov	r3, r0
 8010f88:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010f8a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d002      	beq.n	8010f98 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8010f92:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010f96:	e07e      	b.n	8011096 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010f98:	f06f 030a 	mvn.w	r3, #10
 8010f9c:	e07b      	b.n	8011096 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	7f1b      	ldrb	r3, [r3, #28]
 8010fa2:	f003 0302 	and.w	r3, r3, #2
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d10f      	bne.n	8010fca <netconn_recv_data+0xa6>
 8010faa:	79fb      	ldrb	r3, [r7, #7]
 8010fac:	f003 0304 	and.w	r3, r3, #4
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d10a      	bne.n	8010fca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	7f1b      	ldrb	r3, [r3, #28]
 8010fb8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d104      	bne.n	8010fca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d023      	beq.n	8011012 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	3310      	adds	r3, #16
 8010fce:	f107 0218 	add.w	r2, r7, #24
 8010fd2:	4611      	mov	r1, r2
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f00d fa70 	bl	801e4ba <sys_arch_mbox_tryfetch>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010fe0:	d11f      	bne.n	8011022 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8010fe2:	68f8      	ldr	r0, [r7, #12]
 8010fe4:	f000 fa14 	bl	8011410 <netconn_err>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010fec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d002      	beq.n	8010ffa <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8010ff4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010ff8:	e04d      	b.n	8011096 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	7f1b      	ldrb	r3, [r3, #28]
 8010ffe:	f003 0301 	and.w	r3, r3, #1
 8011002:	2b00      	cmp	r3, #0
 8011004:	d002      	beq.n	801100c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011006:	f06f 030a 	mvn.w	r3, #10
 801100a:	e044      	b.n	8011096 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 801100c:	f06f 0306 	mvn.w	r3, #6
 8011010:	e041      	b.n	8011096 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	3310      	adds	r3, #16
 8011016:	f107 0118 	add.w	r1, r7, #24
 801101a:	2200      	movs	r2, #0
 801101c:	4618      	mov	r0, r3
 801101e:	f00d fa1b 	bl	801e458 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801102a:	2b10      	cmp	r3, #16
 801102c:	d117      	bne.n	801105e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	f107 0217 	add.w	r2, r7, #23
 8011034:	4611      	mov	r1, r2
 8011036:	4618      	mov	r0, r3
 8011038:	f000 fa3c 	bl	80114b4 <lwip_netconn_is_err_msg>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d009      	beq.n	8011056 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011046:	f113 0f0f 	cmn.w	r3, #15
 801104a:	d101      	bne.n	8011050 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801104c:	2300      	movs	r3, #0
 801104e:	e022      	b.n	8011096 <netconn_recv_data+0x172>
      }
      return err;
 8011050:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011054:	e01f      	b.n	8011096 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011056:	69bb      	ldr	r3, [r7, #24]
 8011058:	891b      	ldrh	r3, [r3, #8]
 801105a:	83fb      	strh	r3, [r7, #30]
 801105c:	e00d      	b.n	801107a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d106      	bne.n	8011072 <netconn_recv_data+0x14e>
 8011064:	4b0e      	ldr	r3, [pc, #56]	@ (80110a0 <netconn_recv_data+0x17c>)
 8011066:	f240 2291 	movw	r2, #657	@ 0x291
 801106a:	4911      	ldr	r1, [pc, #68]	@ (80110b0 <netconn_recv_data+0x18c>)
 801106c:	480e      	ldr	r0, [pc, #56]	@ (80110a8 <netconn_recv_data+0x184>)
 801106e:	f00e fdbd 	bl	801fbec <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011072:	69bb      	ldr	r3, [r7, #24]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	891b      	ldrh	r3, [r3, #8]
 8011078:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801107e:	2b00      	cmp	r3, #0
 8011080:	d005      	beq.n	801108e <netconn_recv_data+0x16a>
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011086:	8bfa      	ldrh	r2, [r7, #30]
 8011088:	2101      	movs	r1, #1
 801108a:	68f8      	ldr	r0, [r7, #12]
 801108c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801108e:	69ba      	ldr	r2, [r7, #24]
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011094:	2300      	movs	r3, #0
}
 8011096:	4618      	mov	r0, r3
 8011098:	3720      	adds	r7, #32
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	08020d08 	.word	0x08020d08
 80110a4:	08020f20 	.word	0x08020f20
 80110a8:	08020d60 	.word	0x08020d60
 80110ac:	08020f40 	.word	0x08020f40
 80110b0:	08020f5c 	.word	0x08020f5c

080110b4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d005      	beq.n	80110d2 <netconn_tcp_recvd_msg+0x1e>
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80110ce:	2b10      	cmp	r3, #16
 80110d0:	d009      	beq.n	80110e6 <netconn_tcp_recvd_msg+0x32>
 80110d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011104 <netconn_tcp_recvd_msg+0x50>)
 80110d4:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80110d8:	490b      	ldr	r1, [pc, #44]	@ (8011108 <netconn_tcp_recvd_msg+0x54>)
 80110da:	480c      	ldr	r0, [pc, #48]	@ (801110c <netconn_tcp_recvd_msg+0x58>)
 80110dc:	f00e fd86 	bl	801fbec <iprintf>
 80110e0:	f06f 030f 	mvn.w	r3, #15
 80110e4:	e00a      	b.n	80110fc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	68ba      	ldr	r2, [r7, #8]
 80110f0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80110f2:	6879      	ldr	r1, [r7, #4]
 80110f4:	4806      	ldr	r0, [pc, #24]	@ (8011110 <netconn_tcp_recvd_msg+0x5c>)
 80110f6:	f7ff fe05 	bl	8010d04 <netconn_apimsg>
 80110fa:	4603      	mov	r3, r0
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3710      	adds	r7, #16
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	08020d08 	.word	0x08020d08
 8011108:	08020f68 	.word	0x08020f68
 801110c:	08020d60 	.word	0x08020d60
 8011110:	080123b3 	.word	0x080123b3

08011114 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b090      	sub	sp, #64	@ 0x40
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	4613      	mov	r3, r2
 8011120:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	3310      	adds	r3, #16
 8011126:	4618      	mov	r0, r3
 8011128:	f00d f9de 	bl	801e4e8 <sys_mbox_valid>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d102      	bne.n	8011138 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011132:	f06f 030a 	mvn.w	r3, #10
 8011136:	e06d      	b.n	8011214 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	7f1b      	ldrb	r3, [r3, #28]
 801113c:	b25b      	sxtb	r3, r3
 801113e:	2b00      	cmp	r3, #0
 8011140:	da07      	bge.n	8011152 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	7f1b      	ldrb	r3, [r3, #28]
 8011146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801114a:	b2da      	uxtb	r2, r3
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011150:	e039      	b.n	80111c6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011152:	79fb      	ldrb	r3, [r7, #7]
 8011154:	461a      	mov	r2, r3
 8011156:	68b9      	ldr	r1, [r7, #8]
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	f7ff fee3 	bl	8010f24 <netconn_recv_data>
 801115e:	4603      	mov	r3, r0
 8011160:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8011164:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011168:	2b00      	cmp	r3, #0
 801116a:	d002      	beq.n	8011172 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801116c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011170:	e050      	b.n	8011214 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011178:	79fb      	ldrb	r3, [r7, #7]
 801117a:	f003 0308 	and.w	r3, r3, #8
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10e      	bne.n	80111a0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011184:	2b00      	cmp	r3, #0
 8011186:	d002      	beq.n	801118e <netconn_recv_data_tcp+0x7a>
 8011188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801118a:	891b      	ldrh	r3, [r3, #8]
 801118c:	e000      	b.n	8011190 <netconn_recv_data_tcp+0x7c>
 801118e:	2301      	movs	r3, #1
 8011190:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011192:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011194:	f107 0214 	add.w	r2, r7, #20
 8011198:	4619      	mov	r1, r3
 801119a:	68f8      	ldr	r0, [r7, #12]
 801119c:	f7ff ff8a 	bl	80110b4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80111a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d134      	bne.n	8011210 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80111a6:	79fb      	ldrb	r3, [r7, #7]
 80111a8:	f003 0310 	and.w	r3, r3, #16
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d009      	beq.n	80111c4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	7f1b      	ldrb	r3, [r3, #28]
 80111b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80111b8:	b2da      	uxtb	r2, r3
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80111be:	f06f 0306 	mvn.w	r3, #6
 80111c2:	e027      	b.n	8011214 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80111c4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d005      	beq.n	80111da <netconn_recv_data_tcp+0xc6>
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111d2:	2200      	movs	r2, #0
 80111d4:	2101      	movs	r1, #1
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10f      	bne.n	8011202 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f000 f914 	bl	8011410 <netconn_err>
 80111e8:	4603      	mov	r3, r0
 80111ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80111ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d002      	beq.n	80111fc <netconn_recv_data_tcp+0xe8>
          return err;
 80111f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80111fa:	e00b      	b.n	8011214 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80111fc:	f06f 030d 	mvn.w	r3, #13
 8011200:	e008      	b.n	8011214 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011202:	2101      	movs	r1, #1
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f000 f8d3 	bl	80113b0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801120a:	f06f 030e 	mvn.w	r3, #14
 801120e:	e001      	b.n	8011214 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011210:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011214:	4618      	mov	r0, r3
 8011216:	3740      	adds	r7, #64	@ 0x40
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d109      	bne.n	8011244 <netconn_recv+0x28>
 8011230:	4b32      	ldr	r3, [pc, #200]	@ (80112fc <netconn_recv+0xe0>)
 8011232:	f240 3263 	movw	r2, #867	@ 0x363
 8011236:	4932      	ldr	r1, [pc, #200]	@ (8011300 <netconn_recv+0xe4>)
 8011238:	4832      	ldr	r0, [pc, #200]	@ (8011304 <netconn_recv+0xe8>)
 801123a:	f00e fcd7 	bl	801fbec <iprintf>
 801123e:	f06f 030f 	mvn.w	r3, #15
 8011242:	e056      	b.n	80112f2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	2200      	movs	r2, #0
 8011248:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d109      	bne.n	8011264 <netconn_recv+0x48>
 8011250:	4b2a      	ldr	r3, [pc, #168]	@ (80112fc <netconn_recv+0xe0>)
 8011252:	f240 3265 	movw	r2, #869	@ 0x365
 8011256:	492c      	ldr	r1, [pc, #176]	@ (8011308 <netconn_recv+0xec>)
 8011258:	482a      	ldr	r0, [pc, #168]	@ (8011304 <netconn_recv+0xe8>)
 801125a:	f00e fcc7 	bl	801fbec <iprintf>
 801125e:	f06f 030f 	mvn.w	r3, #15
 8011262:	e046      	b.n	80112f2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801126c:	2b10      	cmp	r3, #16
 801126e:	d13a      	bne.n	80112e6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011270:	2300      	movs	r3, #0
 8011272:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011274:	2006      	movs	r0, #6
 8011276:	f002 fb47 	bl	8013908 <memp_malloc>
 801127a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d102      	bne.n	8011288 <netconn_recv+0x6c>
      return ERR_MEM;
 8011282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011286:	e034      	b.n	80112f2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011288:	f107 030c 	add.w	r3, r7, #12
 801128c:	2200      	movs	r2, #0
 801128e:	4619      	mov	r1, r3
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f7ff ff3f 	bl	8011114 <netconn_recv_data_tcp>
 8011296:	4603      	mov	r3, r0
 8011298:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801129a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d006      	beq.n	80112b0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80112a2:	6979      	ldr	r1, [r7, #20]
 80112a4:	2006      	movs	r0, #6
 80112a6:	f002 fbab 	bl	8013a00 <memp_free>
      return err;
 80112aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112ae:	e020      	b.n	80112f2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d106      	bne.n	80112c4 <netconn_recv+0xa8>
 80112b6:	4b11      	ldr	r3, [pc, #68]	@ (80112fc <netconn_recv+0xe0>)
 80112b8:	f240 3279 	movw	r2, #889	@ 0x379
 80112bc:	4913      	ldr	r1, [pc, #76]	@ (801130c <netconn_recv+0xf0>)
 80112be:	4811      	ldr	r0, [pc, #68]	@ (8011304 <netconn_recv+0xe8>)
 80112c0:	f00e fc94 	bl	801fbec <iprintf>

    buf->p = p;
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80112ca:	68fa      	ldr	r2, [r7, #12]
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	2200      	movs	r2, #0
 80112d4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	2200      	movs	r2, #0
 80112da:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	697a      	ldr	r2, [r7, #20]
 80112e0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80112e2:	2300      	movs	r3, #0
 80112e4:	e005      	b.n	80112f2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80112e6:	2200      	movs	r2, #0
 80112e8:	6839      	ldr	r1, [r7, #0]
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f7ff fe1a 	bl	8010f24 <netconn_recv_data>
 80112f0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3718      	adds	r7, #24
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	08020d08 	.word	0x08020d08
 8011300:	08020f20 	.word	0x08020f20
 8011304:	08020d60 	.word	0x08020d60
 8011308:	08020f40 	.word	0x08020f40
 801130c:	08020fb8 	.word	0x08020fb8

08011310 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]
 801131c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d011      	beq.n	8011348 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d002      	beq.n	8011330 <netconn_sendto+0x20>
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	e000      	b.n	8011332 <netconn_sendto+0x22>
 8011330:	2300      	movs	r3, #0
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	887a      	ldrh	r2, [r7, #2]
 801133a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 801133c:	68b9      	ldr	r1, [r7, #8]
 801133e:	68f8      	ldr	r0, [r7, #12]
 8011340:	f000 f808 	bl	8011354 <netconn_send>
 8011344:	4603      	mov	r3, r0
 8011346:	e001      	b.n	801134c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8011348:	f06f 0305 	mvn.w	r3, #5
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b08c      	sub	sp, #48	@ 0x30
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d109      	bne.n	8011378 <netconn_send+0x24>
 8011364:	4b0e      	ldr	r3, [pc, #56]	@ (80113a0 <netconn_send+0x4c>)
 8011366:	f240 32b2 	movw	r2, #946	@ 0x3b2
 801136a:	490e      	ldr	r1, [pc, #56]	@ (80113a4 <netconn_send+0x50>)
 801136c:	480e      	ldr	r0, [pc, #56]	@ (80113a8 <netconn_send+0x54>)
 801136e:	f00e fc3d 	bl	801fbec <iprintf>
 8011372:	f06f 030f 	mvn.w	r3, #15
 8011376:	e00e      	b.n	8011396 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011380:	f107 030c 	add.w	r3, r7, #12
 8011384:	4619      	mov	r1, r3
 8011386:	4809      	ldr	r0, [pc, #36]	@ (80113ac <netconn_send+0x58>)
 8011388:	f7ff fcbc 	bl	8010d04 <netconn_apimsg>
 801138c:	4603      	mov	r3, r0
 801138e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011392:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011396:	4618      	mov	r0, r3
 8011398:	3730      	adds	r7, #48	@ 0x30
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	08020d08 	.word	0x08020d08
 80113a4:	08020fc4 	.word	0x08020fc4
 80113a8:	08020d60 	.word	0x08020d60
 80113ac:	08012319 	.word	0x08012319

080113b0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08c      	sub	sp, #48	@ 0x30
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	460b      	mov	r3, r1
 80113ba:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d109      	bne.n	80113d6 <netconn_close_shutdown+0x26>
 80113c2:	4b0f      	ldr	r3, [pc, #60]	@ (8011400 <netconn_close_shutdown+0x50>)
 80113c4:	f240 4247 	movw	r2, #1095	@ 0x447
 80113c8:	490e      	ldr	r1, [pc, #56]	@ (8011404 <netconn_close_shutdown+0x54>)
 80113ca:	480f      	ldr	r0, [pc, #60]	@ (8011408 <netconn_close_shutdown+0x58>)
 80113cc:	f00e fc0e 	bl	801fbec <iprintf>
 80113d0:	f06f 030f 	mvn.w	r3, #15
 80113d4:	e010      	b.n	80113f8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80113da:	78fb      	ldrb	r3, [r7, #3]
 80113dc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80113de:	2329      	movs	r3, #41	@ 0x29
 80113e0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80113e2:	f107 030c 	add.w	r3, r7, #12
 80113e6:	4619      	mov	r1, r3
 80113e8:	4808      	ldr	r0, [pc, #32]	@ (801140c <netconn_close_shutdown+0x5c>)
 80113ea:	f7ff fc8b 	bl	8010d04 <netconn_apimsg>
 80113ee:	4603      	mov	r3, r0
 80113f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80113f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3730      	adds	r7, #48	@ 0x30
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}
 8011400:	08020d08 	.word	0x08020d08
 8011404:	08021044 	.word	0x08021044
 8011408:	08020d60 	.word	0x08020d60
 801140c:	080127b5 	.word	0x080127b5

08011410 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d101      	bne.n	8011422 <netconn_err+0x12>
    return ERR_OK;
 801141e:	2300      	movs	r3, #0
 8011420:	e00d      	b.n	801143e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011422:	f00d f9b7 	bl	801e794 <sys_arch_protect>
 8011426:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	7a1b      	ldrb	r3, [r3, #8]
 801142c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f00d f9bb 	bl	801e7b0 <sys_arch_unprotect>
  return err;
 801143a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
	...

08011448 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	4603      	mov	r3, r0
 8011450:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011456:	f113 0f0d 	cmn.w	r3, #13
 801145a:	d009      	beq.n	8011470 <lwip_netconn_err_to_msg+0x28>
 801145c:	f113 0f0d 	cmn.w	r3, #13
 8011460:	dc0c      	bgt.n	801147c <lwip_netconn_err_to_msg+0x34>
 8011462:	f113 0f0f 	cmn.w	r3, #15
 8011466:	d007      	beq.n	8011478 <lwip_netconn_err_to_msg+0x30>
 8011468:	f113 0f0e 	cmn.w	r3, #14
 801146c:	d002      	beq.n	8011474 <lwip_netconn_err_to_msg+0x2c>
 801146e:	e005      	b.n	801147c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011470:	4b0a      	ldr	r3, [pc, #40]	@ (801149c <lwip_netconn_err_to_msg+0x54>)
 8011472:	e00e      	b.n	8011492 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011474:	4b0a      	ldr	r3, [pc, #40]	@ (80114a0 <lwip_netconn_err_to_msg+0x58>)
 8011476:	e00c      	b.n	8011492 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011478:	4b0a      	ldr	r3, [pc, #40]	@ (80114a4 <lwip_netconn_err_to_msg+0x5c>)
 801147a:	e00a      	b.n	8011492 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d005      	beq.n	8011490 <lwip_netconn_err_to_msg+0x48>
 8011484:	4b08      	ldr	r3, [pc, #32]	@ (80114a8 <lwip_netconn_err_to_msg+0x60>)
 8011486:	227d      	movs	r2, #125	@ 0x7d
 8011488:	4908      	ldr	r1, [pc, #32]	@ (80114ac <lwip_netconn_err_to_msg+0x64>)
 801148a:	4809      	ldr	r0, [pc, #36]	@ (80114b0 <lwip_netconn_err_to_msg+0x68>)
 801148c:	f00e fbae 	bl	801fbec <iprintf>
      return NULL;
 8011490:	2300      	movs	r3, #0
  }
}
 8011492:	4618      	mov	r0, r3
 8011494:	3708      	adds	r7, #8
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	08024818 	.word	0x08024818
 80114a0:	08024819 	.word	0x08024819
 80114a4:	0802481a 	.word	0x0802481a
 80114a8:	08021060 	.word	0x08021060
 80114ac:	08021094 	.word	0x08021094
 80114b0:	080210a4 	.word	0x080210a4

080114b4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d105      	bne.n	80114d0 <lwip_netconn_is_err_msg+0x1c>
 80114c4:	4b12      	ldr	r3, [pc, #72]	@ (8011510 <lwip_netconn_is_err_msg+0x5c>)
 80114c6:	2285      	movs	r2, #133	@ 0x85
 80114c8:	4912      	ldr	r1, [pc, #72]	@ (8011514 <lwip_netconn_is_err_msg+0x60>)
 80114ca:	4813      	ldr	r0, [pc, #76]	@ (8011518 <lwip_netconn_is_err_msg+0x64>)
 80114cc:	f00e fb8e 	bl	801fbec <iprintf>

  if (msg == &netconn_aborted) {
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	4a12      	ldr	r2, [pc, #72]	@ (801151c <lwip_netconn_is_err_msg+0x68>)
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d104      	bne.n	80114e2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	22f3      	movs	r2, #243	@ 0xf3
 80114dc:	701a      	strb	r2, [r3, #0]
    return 1;
 80114de:	2301      	movs	r3, #1
 80114e0:	e012      	b.n	8011508 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4a0e      	ldr	r2, [pc, #56]	@ (8011520 <lwip_netconn_is_err_msg+0x6c>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d104      	bne.n	80114f4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	22f2      	movs	r2, #242	@ 0xf2
 80114ee:	701a      	strb	r2, [r3, #0]
    return 1;
 80114f0:	2301      	movs	r3, #1
 80114f2:	e009      	b.n	8011508 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4a0b      	ldr	r2, [pc, #44]	@ (8011524 <lwip_netconn_is_err_msg+0x70>)
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d104      	bne.n	8011506 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	22f1      	movs	r2, #241	@ 0xf1
 8011500:	701a      	strb	r2, [r3, #0]
    return 1;
 8011502:	2301      	movs	r3, #1
 8011504:	e000      	b.n	8011508 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	08021060 	.word	0x08021060
 8011514:	080210cc 	.word	0x080210cc
 8011518:	080210a4 	.word	0x080210a4
 801151c:	08024818 	.word	0x08024818
 8011520:	08024819 	.word	0x08024819
 8011524:	0802481a 	.word	0x0802481a

08011528 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b088      	sub	sp, #32
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
 8011534:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d105      	bne.n	8011548 <recv_udp+0x20>
 801153c:	4b34      	ldr	r3, [pc, #208]	@ (8011610 <recv_udp+0xe8>)
 801153e:	22e5      	movs	r2, #229	@ 0xe5
 8011540:	4934      	ldr	r1, [pc, #208]	@ (8011614 <recv_udp+0xec>)
 8011542:	4835      	ldr	r0, [pc, #212]	@ (8011618 <recv_udp+0xf0>)
 8011544:	f00e fb52 	bl	801fbec <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d105      	bne.n	801155a <recv_udp+0x32>
 801154e:	4b30      	ldr	r3, [pc, #192]	@ (8011610 <recv_udp+0xe8>)
 8011550:	22e6      	movs	r2, #230	@ 0xe6
 8011552:	4932      	ldr	r1, [pc, #200]	@ (801161c <recv_udp+0xf4>)
 8011554:	4830      	ldr	r0, [pc, #192]	@ (8011618 <recv_udp+0xf0>)
 8011556:	f00e fb49 	bl	801fbec <iprintf>
  conn = (struct netconn *)arg;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d103      	bne.n	801156c <recv_udp+0x44>
    pbuf_free(p);
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f003 f8ef 	bl	8014748 <pbuf_free>
    return;
 801156a:	e04d      	b.n	8011608 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	68ba      	ldr	r2, [r7, #8]
 8011572:	429a      	cmp	r2, r3
 8011574:	d005      	beq.n	8011582 <recv_udp+0x5a>
 8011576:	4b26      	ldr	r3, [pc, #152]	@ (8011610 <recv_udp+0xe8>)
 8011578:	22ee      	movs	r2, #238	@ 0xee
 801157a:	4929      	ldr	r1, [pc, #164]	@ (8011620 <recv_udp+0xf8>)
 801157c:	4826      	ldr	r0, [pc, #152]	@ (8011618 <recv_udp+0xf0>)
 801157e:	f00e fb35 	bl	801fbec <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	3310      	adds	r3, #16
 8011586:	4618      	mov	r0, r3
 8011588:	f00c ffae 	bl	801e4e8 <sys_mbox_valid>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d103      	bne.n	801159a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f003 f8d8 	bl	8014748 <pbuf_free>
    return;
 8011598:	e036      	b.n	8011608 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801159a:	2006      	movs	r0, #6
 801159c:	f002 f9b4 	bl	8013908 <memp_malloc>
 80115a0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80115a2:	69bb      	ldr	r3, [r7, #24]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d103      	bne.n	80115b0 <recv_udp+0x88>
    pbuf_free(p);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f003 f8cd 	bl	8014748 <pbuf_free>
    return;
 80115ae:	e02b      	b.n	8011608 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d002      	beq.n	80115c8 <recv_udp+0xa0>
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	e000      	b.n	80115ca <recv_udp+0xa2>
 80115c8:	2300      	movs	r3, #0
 80115ca:	69ba      	ldr	r2, [r7, #24]
 80115cc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80115ce:	69bb      	ldr	r3, [r7, #24]
 80115d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80115d2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	891b      	ldrh	r3, [r3, #8]
 80115d8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	3310      	adds	r3, #16
 80115de:	69b9      	ldr	r1, [r7, #24]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f00c ff15 	bl	801e410 <sys_mbox_trypost>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d003      	beq.n	80115f4 <recv_udp+0xcc>
    netbuf_delete(buf);
 80115ec:	69b8      	ldr	r0, [r7, #24]
 80115ee:	f001 f981 	bl	80128f4 <netbuf_delete>
    return;
 80115f2:	e009      	b.n	8011608 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d005      	beq.n	8011608 <recv_udp+0xe0>
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011600:	8afa      	ldrh	r2, [r7, #22]
 8011602:	2100      	movs	r1, #0
 8011604:	69f8      	ldr	r0, [r7, #28]
 8011606:	4798      	blx	r3
  }
}
 8011608:	3720      	adds	r7, #32
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	08021060 	.word	0x08021060
 8011614:	080210d8 	.word	0x080210d8
 8011618:	080210a4 	.word	0x080210a4
 801161c:	080210fc 	.word	0x080210fc
 8011620:	0802111c 	.word	0x0802111c

08011624 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b088      	sub	sp, #32
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
 8011630:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d106      	bne.n	8011646 <recv_tcp+0x22>
 8011638:	4b36      	ldr	r3, [pc, #216]	@ (8011714 <recv_tcp+0xf0>)
 801163a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 801163e:	4936      	ldr	r1, [pc, #216]	@ (8011718 <recv_tcp+0xf4>)
 8011640:	4836      	ldr	r0, [pc, #216]	@ (801171c <recv_tcp+0xf8>)
 8011642:	f00e fad3 	bl	801fbec <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d106      	bne.n	801165a <recv_tcp+0x36>
 801164c:	4b31      	ldr	r3, [pc, #196]	@ (8011714 <recv_tcp+0xf0>)
 801164e:	f240 122d 	movw	r2, #301	@ 0x12d
 8011652:	4933      	ldr	r1, [pc, #204]	@ (8011720 <recv_tcp+0xfc>)
 8011654:	4831      	ldr	r0, [pc, #196]	@ (801171c <recv_tcp+0xf8>)
 8011656:	f00e fac9 	bl	801fbec <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801165a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d006      	beq.n	8011670 <recv_tcp+0x4c>
 8011662:	4b2c      	ldr	r3, [pc, #176]	@ (8011714 <recv_tcp+0xf0>)
 8011664:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011668:	492e      	ldr	r1, [pc, #184]	@ (8011724 <recv_tcp+0x100>)
 801166a:	482c      	ldr	r0, [pc, #176]	@ (801171c <recv_tcp+0xf8>)
 801166c:	f00e fabe 	bl	801fbec <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d102      	bne.n	8011680 <recv_tcp+0x5c>
    return ERR_VAL;
 801167a:	f06f 0305 	mvn.w	r3, #5
 801167e:	e045      	b.n	801170c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	68ba      	ldr	r2, [r7, #8]
 8011686:	429a      	cmp	r2, r3
 8011688:	d006      	beq.n	8011698 <recv_tcp+0x74>
 801168a:	4b22      	ldr	r3, [pc, #136]	@ (8011714 <recv_tcp+0xf0>)
 801168c:	f240 1235 	movw	r2, #309	@ 0x135
 8011690:	4925      	ldr	r1, [pc, #148]	@ (8011728 <recv_tcp+0x104>)
 8011692:	4822      	ldr	r0, [pc, #136]	@ (801171c <recv_tcp+0xf8>)
 8011694:	f00e faaa 	bl	801fbec <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	3310      	adds	r3, #16
 801169c:	4618      	mov	r0, r3
 801169e:	f00c ff23 	bl	801e4e8 <sys_mbox_valid>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d10d      	bne.n	80116c4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d008      	beq.n	80116c0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	891b      	ldrh	r3, [r3, #8]
 80116b2:	4619      	mov	r1, r3
 80116b4:	68b8      	ldr	r0, [r7, #8]
 80116b6:	f003 ff4d 	bl	8015554 <tcp_recved>
      pbuf_free(p);
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f003 f844 	bl	8014748 <pbuf_free>
    }
    return ERR_OK;
 80116c0:	2300      	movs	r3, #0
 80116c2:	e023      	b.n	801170c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d005      	beq.n	80116d6 <recv_tcp+0xb2>
    msg = p;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	891b      	ldrh	r3, [r3, #8]
 80116d2:	83fb      	strh	r3, [r7, #30]
 80116d4:	e003      	b.n	80116de <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80116d6:	4b15      	ldr	r3, [pc, #84]	@ (801172c <recv_tcp+0x108>)
 80116d8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80116da:	2300      	movs	r3, #0
 80116dc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	3310      	adds	r3, #16
 80116e2:	69b9      	ldr	r1, [r7, #24]
 80116e4:	4618      	mov	r0, r3
 80116e6:	f00c fe93 	bl	801e410 <sys_mbox_trypost>
 80116ea:	4603      	mov	r3, r0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d002      	beq.n	80116f6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80116f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80116f4:	e00a      	b.n	801170c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d005      	beq.n	801170a <recv_tcp+0xe6>
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011702:	8bfa      	ldrh	r2, [r7, #30]
 8011704:	2100      	movs	r1, #0
 8011706:	6978      	ldr	r0, [r7, #20]
 8011708:	4798      	blx	r3
  }

  return ERR_OK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3720      	adds	r7, #32
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	08021060 	.word	0x08021060
 8011718:	0802113c 	.word	0x0802113c
 801171c:	080210a4 	.word	0x080210a4
 8011720:	08021160 	.word	0x08021160
 8011724:	08021180 	.word	0x08021180
 8011728:	08021198 	.word	0x08021198
 801172c:	0802481a 	.word	0x0802481a

08011730 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b084      	sub	sp, #16
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d106      	bne.n	8011752 <poll_tcp+0x22>
 8011744:	4b29      	ldr	r3, [pc, #164]	@ (80117ec <poll_tcp+0xbc>)
 8011746:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 801174a:	4929      	ldr	r1, [pc, #164]	@ (80117f0 <poll_tcp+0xc0>)
 801174c:	4829      	ldr	r0, [pc, #164]	@ (80117f4 <poll_tcp+0xc4>)
 801174e:	f00e fa4d 	bl	801fbec <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	785b      	ldrb	r3, [r3, #1]
 8011756:	2b01      	cmp	r3, #1
 8011758:	d104      	bne.n	8011764 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801175a:	2101      	movs	r1, #1
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	f000 fe5d 	bl	801241c <lwip_netconn_do_writemore>
 8011762:	e016      	b.n	8011792 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	785b      	ldrb	r3, [r3, #1]
 8011768:	2b04      	cmp	r3, #4
 801176a:	d112      	bne.n	8011792 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6a1b      	ldr	r3, [r3, #32]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d00a      	beq.n	801178a <poll_tcp+0x5a>
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	6a1b      	ldr	r3, [r3, #32]
 8011778:	7a5b      	ldrb	r3, [r3, #9]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d005      	beq.n	801178a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	6a1b      	ldr	r3, [r3, #32]
 8011782:	7a5a      	ldrb	r2, [r3, #9]
 8011784:	3a01      	subs	r2, #1
 8011786:	b2d2      	uxtb	r2, r2
 8011788:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801178a:	2101      	movs	r1, #1
 801178c:	68f8      	ldr	r0, [r7, #12]
 801178e:	f000 fb3b 	bl	8011e08 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	7f1b      	ldrb	r3, [r3, #28]
 8011796:	f003 0310 	and.w	r3, r3, #16
 801179a:	2b00      	cmp	r3, #0
 801179c:	d021      	beq.n	80117e2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d01d      	beq.n	80117e2 <poll_tcp+0xb2>
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	685b      	ldr	r3, [r3, #4]
 80117aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80117ae:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80117b2:	d316      	bcc.n	80117e2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80117bc:	2b04      	cmp	r3, #4
 80117be:	d810      	bhi.n	80117e2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	7f1b      	ldrb	r3, [r3, #28]
 80117c4:	f023 0310 	bic.w	r3, r3, #16
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d005      	beq.n	80117e2 <poll_tcp+0xb2>
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117da:	2200      	movs	r2, #0
 80117dc:	2102      	movs	r1, #2
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3710      	adds	r7, #16
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	08021060 	.word	0x08021060
 80117f0:	080211b8 	.word	0x080211b8
 80117f4:	080210a4 	.word	0x080210a4

080117f8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b086      	sub	sp, #24
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	4613      	mov	r3, r2
 8011804:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d106      	bne.n	801181e <sent_tcp+0x26>
 8011810:	4b20      	ldr	r3, [pc, #128]	@ (8011894 <sent_tcp+0x9c>)
 8011812:	f240 1293 	movw	r2, #403	@ 0x193
 8011816:	4920      	ldr	r1, [pc, #128]	@ (8011898 <sent_tcp+0xa0>)
 8011818:	4820      	ldr	r0, [pc, #128]	@ (801189c <sent_tcp+0xa4>)
 801181a:	f00e f9e7 	bl	801fbec <iprintf>

  if (conn) {
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d032      	beq.n	801188a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	785b      	ldrb	r3, [r3, #1]
 8011828:	2b01      	cmp	r3, #1
 801182a:	d104      	bne.n	8011836 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801182c:	2101      	movs	r1, #1
 801182e:	6978      	ldr	r0, [r7, #20]
 8011830:	f000 fdf4 	bl	801241c <lwip_netconn_do_writemore>
 8011834:	e007      	b.n	8011846 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	785b      	ldrb	r3, [r3, #1]
 801183a:	2b04      	cmp	r3, #4
 801183c:	d103      	bne.n	8011846 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801183e:	2101      	movs	r1, #1
 8011840:	6978      	ldr	r0, [r7, #20]
 8011842:	f000 fae1 	bl	8011e08 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d01d      	beq.n	801188a <sent_tcp+0x92>
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011856:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801185a:	d316      	bcc.n	801188a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011864:	2b04      	cmp	r3, #4
 8011866:	d810      	bhi.n	801188a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	7f1b      	ldrb	r3, [r3, #28]
 801186c:	f023 0310 	bic.w	r3, r3, #16
 8011870:	b2da      	uxtb	r2, r3
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801187a:	2b00      	cmp	r3, #0
 801187c:	d005      	beq.n	801188a <sent_tcp+0x92>
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011882:	88fa      	ldrh	r2, [r7, #6]
 8011884:	2102      	movs	r1, #2
 8011886:	6978      	ldr	r0, [r7, #20]
 8011888:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801188a:	2300      	movs	r3, #0
}
 801188c:	4618      	mov	r0, r3
 801188e:	3718      	adds	r7, #24
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	08021060 	.word	0x08021060
 8011898:	080211b8 	.word	0x080211b8
 801189c:	080210a4 	.word	0x080210a4

080118a0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b088      	sub	sp, #32
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	460b      	mov	r3, r1
 80118aa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80118b0:	69fb      	ldr	r3, [r7, #28]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d106      	bne.n	80118c4 <err_tcp+0x24>
 80118b6:	4b5f      	ldr	r3, [pc, #380]	@ (8011a34 <err_tcp+0x194>)
 80118b8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80118bc:	495e      	ldr	r1, [pc, #376]	@ (8011a38 <err_tcp+0x198>)
 80118be:	485f      	ldr	r0, [pc, #380]	@ (8011a3c <err_tcp+0x19c>)
 80118c0:	f00e f994 	bl	801fbec <iprintf>

  SYS_ARCH_PROTECT(lev);
 80118c4:	f00c ff66 	bl	801e794 <sys_arch_protect>
 80118c8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	2200      	movs	r2, #0
 80118ce:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	78fa      	ldrb	r2, [r7, #3]
 80118d4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	7f1b      	ldrb	r3, [r3, #28]
 80118da:	f043 0301 	orr.w	r3, r3, #1
 80118de:	b2da      	uxtb	r2, r3
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	785b      	ldrb	r3, [r3, #1]
 80118e8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	2200      	movs	r2, #0
 80118ee:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80118f0:	69b8      	ldr	r0, [r7, #24]
 80118f2:	f00c ff5d 	bl	801e7b0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d005      	beq.n	801190a <err_tcp+0x6a>
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011902:	2200      	movs	r2, #0
 8011904:	2104      	movs	r1, #4
 8011906:	69f8      	ldr	r0, [r7, #28]
 8011908:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801190e:	2b00      	cmp	r3, #0
 8011910:	d005      	beq.n	801191e <err_tcp+0x7e>
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011916:	2200      	movs	r2, #0
 8011918:	2100      	movs	r1, #0
 801191a:	69f8      	ldr	r0, [r7, #28]
 801191c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011922:	2b00      	cmp	r3, #0
 8011924:	d005      	beq.n	8011932 <err_tcp+0x92>
 8011926:	69fb      	ldr	r3, [r7, #28]
 8011928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801192a:	2200      	movs	r2, #0
 801192c:	2102      	movs	r1, #2
 801192e:	69f8      	ldr	r0, [r7, #28]
 8011930:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff fd86 	bl	8011448 <lwip_netconn_err_to_msg>
 801193c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	3310      	adds	r3, #16
 8011942:	4618      	mov	r0, r3
 8011944:	f00c fdd0 	bl	801e4e8 <sys_mbox_valid>
 8011948:	4603      	mov	r3, r0
 801194a:	2b00      	cmp	r3, #0
 801194c:	d005      	beq.n	801195a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 801194e:	69fb      	ldr	r3, [r7, #28]
 8011950:	3310      	adds	r3, #16
 8011952:	6939      	ldr	r1, [r7, #16]
 8011954:	4618      	mov	r0, r3
 8011956:	f00c fd5b 	bl	801e410 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	3314      	adds	r3, #20
 801195e:	4618      	mov	r0, r3
 8011960:	f00c fdc2 	bl	801e4e8 <sys_mbox_valid>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d005      	beq.n	8011976 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	3314      	adds	r3, #20
 801196e:	6939      	ldr	r1, [r7, #16]
 8011970:	4618      	mov	r0, r3
 8011972:	f00c fd4d 	bl	801e410 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011976:	7dfb      	ldrb	r3, [r7, #23]
 8011978:	2b01      	cmp	r3, #1
 801197a:	d005      	beq.n	8011988 <err_tcp+0xe8>
 801197c:	7dfb      	ldrb	r3, [r7, #23]
 801197e:	2b04      	cmp	r3, #4
 8011980:	d002      	beq.n	8011988 <err_tcp+0xe8>
 8011982:	7dfb      	ldrb	r3, [r7, #23]
 8011984:	2b03      	cmp	r3, #3
 8011986:	d143      	bne.n	8011a10 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	7f1b      	ldrb	r3, [r3, #28]
 801198c:	f003 0304 	and.w	r3, r3, #4
 8011990:	2b00      	cmp	r3, #0
 8011992:	bf14      	ite	ne
 8011994:	2301      	movne	r3, #1
 8011996:	2300      	moveq	r3, #0
 8011998:	b2db      	uxtb	r3, r3
 801199a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	7f1b      	ldrb	r3, [r3, #28]
 80119a0:	f023 0304 	bic.w	r3, r3, #4
 80119a4:	b2da      	uxtb	r2, r3
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d13b      	bne.n	8011a28 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	6a1b      	ldr	r3, [r3, #32]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d106      	bne.n	80119c6 <err_tcp+0x126>
 80119b8:	4b1e      	ldr	r3, [pc, #120]	@ (8011a34 <err_tcp+0x194>)
 80119ba:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80119be:	4920      	ldr	r1, [pc, #128]	@ (8011a40 <err_tcp+0x1a0>)
 80119c0:	481e      	ldr	r0, [pc, #120]	@ (8011a3c <err_tcp+0x19c>)
 80119c2:	f00e f913 	bl	801fbec <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80119c6:	7dfb      	ldrb	r3, [r7, #23]
 80119c8:	2b04      	cmp	r3, #4
 80119ca:	d104      	bne.n	80119d6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80119cc:	69fb      	ldr	r3, [r7, #28]
 80119ce:	6a1b      	ldr	r3, [r3, #32]
 80119d0:	2200      	movs	r2, #0
 80119d2:	711a      	strb	r2, [r3, #4]
 80119d4:	e003      	b.n	80119de <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	6a1b      	ldr	r3, [r3, #32]
 80119da:	78fa      	ldrb	r2, [r7, #3]
 80119dc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	6a1b      	ldr	r3, [r3, #32]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	330c      	adds	r3, #12
 80119e6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80119e8:	68b8      	ldr	r0, [r7, #8]
 80119ea:	f00c fe37 	bl	801e65c <sys_sem_valid>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d106      	bne.n	8011a02 <err_tcp+0x162>
 80119f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011a34 <err_tcp+0x194>)
 80119f6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80119fa:	4912      	ldr	r1, [pc, #72]	@ (8011a44 <err_tcp+0x1a4>)
 80119fc:	480f      	ldr	r0, [pc, #60]	@ (8011a3c <err_tcp+0x19c>)
 80119fe:	f00e f8f5 	bl	801fbec <iprintf>
      conn->current_msg = NULL;
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	2200      	movs	r2, #0
 8011a06:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011a08:	68b8      	ldr	r0, [r7, #8]
 8011a0a:	f00c fe02 	bl	801e612 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011a0e:	e00b      	b.n	8011a28 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011a10:	69fb      	ldr	r3, [r7, #28]
 8011a12:	6a1b      	ldr	r3, [r3, #32]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d008      	beq.n	8011a2a <err_tcp+0x18a>
 8011a18:	4b06      	ldr	r3, [pc, #24]	@ (8011a34 <err_tcp+0x194>)
 8011a1a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8011a1e:	490a      	ldr	r1, [pc, #40]	@ (8011a48 <err_tcp+0x1a8>)
 8011a20:	4806      	ldr	r0, [pc, #24]	@ (8011a3c <err_tcp+0x19c>)
 8011a22:	f00e f8e3 	bl	801fbec <iprintf>
  }
}
 8011a26:	e000      	b.n	8011a2a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011a28:	bf00      	nop
}
 8011a2a:	bf00      	nop
 8011a2c:	3720      	adds	r7, #32
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	08021060 	.word	0x08021060
 8011a38:	080211b8 	.word	0x080211b8
 8011a3c:	080210a4 	.word	0x080210a4
 8011a40:	080211c8 	.word	0x080211c8
 8011a44:	080211e4 	.word	0x080211e4
 8011a48:	08021200 	.word	0x08021200

08011a4c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011a5a:	6879      	ldr	r1, [r7, #4]
 8011a5c:	68f8      	ldr	r0, [r7, #12]
 8011a5e:	f004 fc6b 	bl	8016338 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011a62:	490a      	ldr	r1, [pc, #40]	@ (8011a8c <setup_tcp+0x40>)
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f004 fc79 	bl	801635c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011a6a:	4909      	ldr	r1, [pc, #36]	@ (8011a90 <setup_tcp+0x44>)
 8011a6c:	68f8      	ldr	r0, [r7, #12]
 8011a6e:	f004 fc97 	bl	80163a0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011a72:	2202      	movs	r2, #2
 8011a74:	4907      	ldr	r1, [pc, #28]	@ (8011a94 <setup_tcp+0x48>)
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f004 fcee 	bl	8016458 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011a7c:	4906      	ldr	r1, [pc, #24]	@ (8011a98 <setup_tcp+0x4c>)
 8011a7e:	68f8      	ldr	r0, [r7, #12]
 8011a80:	f004 fcb0 	bl	80163e4 <tcp_err>
}
 8011a84:	bf00      	nop
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	08011625 	.word	0x08011625
 8011a90:	080117f9 	.word	0x080117f9
 8011a94:	08011731 	.word	0x08011731
 8011a98:	080118a1 	.word	0x080118a1

08011a9c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011a9c:	b590      	push	{r4, r7, lr}
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d006      	beq.n	8011ac0 <pcb_new+0x24>
 8011ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8011b60 <pcb_new+0xc4>)
 8011ab4:	f240 2265 	movw	r2, #613	@ 0x265
 8011ab8:	492a      	ldr	r1, [pc, #168]	@ (8011b64 <pcb_new+0xc8>)
 8011aba:	482b      	ldr	r0, [pc, #172]	@ (8011b68 <pcb_new+0xcc>)
 8011abc:	f00e f896 	bl	801fbec <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011aca:	2b10      	cmp	r3, #16
 8011acc:	d022      	beq.n	8011b14 <pcb_new+0x78>
 8011ace:	2b20      	cmp	r3, #32
 8011ad0:	d133      	bne.n	8011b3a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681c      	ldr	r4, [r3, #0]
 8011ad6:	7bfb      	ldrb	r3, [r7, #15]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f009 fff2 	bl	801bac2 <udp_new_ip_type>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d02a      	beq.n	8011b42 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	2b22      	cmp	r3, #34	@ 0x22
 8011af4:	d104      	bne.n	8011b00 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	2201      	movs	r2, #1
 8011afe:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	6858      	ldr	r0, [r3, #4]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	4917      	ldr	r1, [pc, #92]	@ (8011b6c <pcb_new+0xd0>)
 8011b0e:	f009 ff5f 	bl	801b9d0 <udp_recv>
      }
      break;
 8011b12:	e016      	b.n	8011b42 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681c      	ldr	r4, [r3, #0]
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f004 fbfe 	bl	801631c <tcp_new_ip_type>
 8011b20:	4603      	mov	r3, r0
 8011b22:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00b      	beq.n	8011b46 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7ff ff8a 	bl	8011a4c <setup_tcp>
      }
      break;
 8011b38:	e005      	b.n	8011b46 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	22fa      	movs	r2, #250	@ 0xfa
 8011b3e:	711a      	strb	r2, [r3, #4]
      return;
 8011b40:	e00a      	b.n	8011b58 <pcb_new+0xbc>
      break;
 8011b42:	bf00      	nop
 8011b44:	e000      	b.n	8011b48 <pcb_new+0xac>
      break;
 8011b46:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d102      	bne.n	8011b58 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	22ff      	movs	r2, #255	@ 0xff
 8011b56:	711a      	strb	r2, [r3, #4]
  }
}
 8011b58:	3714      	adds	r7, #20
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd90      	pop	{r4, r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	08021060 	.word	0x08021060
 8011b64:	08021244 	.word	0x08021244
 8011b68:	080210a4 	.word	0x080210a4
 8011b6c:	08011529 	.word	0x08011529

08011b70 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	685b      	ldr	r3, [r3, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d102      	bne.n	8011b92 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011b8c:	68f8      	ldr	r0, [r7, #12]
 8011b8e:	f7ff ff85 	bl	8011a9c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011b92:	bf00      	nop
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
	...

08011b9c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b086      	sub	sp, #24
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	6039      	str	r1, [r7, #0]
 8011ba6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011bac:	2007      	movs	r0, #7
 8011bae:	f001 feab 	bl	8013908 <memp_malloc>
 8011bb2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d101      	bne.n	8011bbe <netconn_alloc+0x22>
    return NULL;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	e052      	b.n	8011c64 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	79fa      	ldrb	r2, [r7, #7]
 8011bc8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011bd0:	79fb      	ldrb	r3, [r7, #7]
 8011bd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011bd6:	2b10      	cmp	r3, #16
 8011bd8:	d004      	beq.n	8011be4 <netconn_alloc+0x48>
 8011bda:	2b20      	cmp	r3, #32
 8011bdc:	d105      	bne.n	8011bea <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011bde:	2306      	movs	r3, #6
 8011be0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011be2:	e00a      	b.n	8011bfa <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011be4:	2306      	movs	r3, #6
 8011be6:	617b      	str	r3, [r7, #20]
      break;
 8011be8:	e007      	b.n	8011bfa <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011bea:	4b20      	ldr	r3, [pc, #128]	@ (8011c6c <netconn_alloc+0xd0>)
 8011bec:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8011bf0:	491f      	ldr	r1, [pc, #124]	@ (8011c70 <netconn_alloc+0xd4>)
 8011bf2:	4820      	ldr	r0, [pc, #128]	@ (8011c74 <netconn_alloc+0xd8>)
 8011bf4:	f00d fffa 	bl	801fbec <iprintf>
      goto free_and_return;
 8011bf8:	e02f      	b.n	8011c5a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	3310      	adds	r3, #16
 8011bfe:	6979      	ldr	r1, [r7, #20]
 8011c00:	4618      	mov	r0, r3
 8011c02:	f00c fbab 	bl	801e35c <sys_mbox_new>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d125      	bne.n	8011c58 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	330c      	adds	r3, #12
 8011c10:	2100      	movs	r1, #0
 8011c12:	4618      	mov	r0, r3
 8011c14:	f00c fc86 	bl	801e524 <sys_sem_new>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d005      	beq.n	8011c2a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	3310      	adds	r3, #16
 8011c22:	4618      	mov	r0, r3
 8011c24:	f00c fbcc 	bl	801e3c0 <sys_mbox_free>
    goto free_and_return;
 8011c28:	e017      	b.n	8011c5a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	3314      	adds	r3, #20
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f00c fc6b 	bl	801e50a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2200      	movs	r2, #0
 8011c38:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c40:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	683a      	ldr	r2, [r7, #0]
 8011c46:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	7cfa      	ldrb	r2, [r7, #19]
 8011c52:	771a      	strb	r2, [r3, #28]
  return conn;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	e005      	b.n	8011c64 <netconn_alloc+0xc8>
    goto free_and_return;
 8011c58:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011c5a:	68f9      	ldr	r1, [r7, #12]
 8011c5c:	2007      	movs	r0, #7
 8011c5e:	f001 fecf 	bl	8013a00 <memp_free>
  return NULL;
 8011c62:	2300      	movs	r3, #0
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3718      	adds	r7, #24
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	08021060 	.word	0x08021060
 8011c70:	08021264 	.word	0x08021264
 8011c74:	080210a4 	.word	0x080210a4

08011c78 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d006      	beq.n	8011c96 <netconn_free+0x1e>
 8011c88:	4b1b      	ldr	r3, [pc, #108]	@ (8011cf8 <netconn_free+0x80>)
 8011c8a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011c8e:	491b      	ldr	r1, [pc, #108]	@ (8011cfc <netconn_free+0x84>)
 8011c90:	481b      	ldr	r0, [pc, #108]	@ (8011d00 <netconn_free+0x88>)
 8011c92:	f00d ffab 	bl	801fbec <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	3310      	adds	r3, #16
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f00c fc24 	bl	801e4e8 <sys_mbox_valid>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d006      	beq.n	8011cb4 <netconn_free+0x3c>
 8011ca6:	4b14      	ldr	r3, [pc, #80]	@ (8011cf8 <netconn_free+0x80>)
 8011ca8:	f240 3223 	movw	r2, #803	@ 0x323
 8011cac:	4915      	ldr	r1, [pc, #84]	@ (8011d04 <netconn_free+0x8c>)
 8011cae:	4814      	ldr	r0, [pc, #80]	@ (8011d00 <netconn_free+0x88>)
 8011cb0:	f00d ff9c 	bl	801fbec <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	3314      	adds	r3, #20
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f00c fc15 	bl	801e4e8 <sys_mbox_valid>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d006      	beq.n	8011cd2 <netconn_free+0x5a>
 8011cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf8 <netconn_free+0x80>)
 8011cc6:	f240 3226 	movw	r2, #806	@ 0x326
 8011cca:	490f      	ldr	r1, [pc, #60]	@ (8011d08 <netconn_free+0x90>)
 8011ccc:	480c      	ldr	r0, [pc, #48]	@ (8011d00 <netconn_free+0x88>)
 8011cce:	f00d ff8d 	bl	801fbec <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	330c      	adds	r3, #12
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f00c fca8 	bl	801e62c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	330c      	adds	r3, #12
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f00c fccc 	bl	801e67e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011ce6:	6879      	ldr	r1, [r7, #4]
 8011ce8:	2007      	movs	r0, #7
 8011cea:	f001 fe89 	bl	8013a00 <memp_free>
}
 8011cee:	bf00      	nop
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	08021060 	.word	0x08021060
 8011cfc:	0802128c 	.word	0x0802128c
 8011d00:	080210a4 	.word	0x080210a4
 8011d04:	080212bc 	.word	0x080212bc
 8011d08:	080212f8 	.word	0x080212f8

08011d0c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b086      	sub	sp, #24
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	3310      	adds	r3, #16
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f00c fbe5 	bl	801e4e8 <sys_mbox_valid>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d02f      	beq.n	8011d84 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011d24:	e018      	b.n	8011d58 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011d2e:	2b10      	cmp	r3, #16
 8011d30:	d10e      	bne.n	8011d50 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	f107 020f 	add.w	r2, r7, #15
 8011d38:	4611      	mov	r1, r2
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff fbba 	bl	80114b4 <lwip_netconn_is_err_msg>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d108      	bne.n	8011d58 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f002 fcfd 	bl	8014748 <pbuf_free>
 8011d4e:	e003      	b.n	8011d58 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	4618      	mov	r0, r3
 8011d54:	f000 fdce 	bl	80128f4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	3310      	adds	r3, #16
 8011d5c:	f107 0210 	add.w	r2, r7, #16
 8011d60:	4611      	mov	r1, r2
 8011d62:	4618      	mov	r0, r3
 8011d64:	f00c fba9 	bl	801e4ba <sys_arch_mbox_tryfetch>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d6e:	d1da      	bne.n	8011d26 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	3310      	adds	r3, #16
 8011d74:	4618      	mov	r0, r3
 8011d76:	f00c fb23 	bl	801e3c0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	3310      	adds	r3, #16
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f00c fbc3 	bl	801e50a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	3314      	adds	r3, #20
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f00c fbad 	bl	801e4e8 <sys_mbox_valid>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d034      	beq.n	8011dfe <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011d94:	e01d      	b.n	8011dd2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	f107 020e 	add.w	r2, r7, #14
 8011d9c:	4611      	mov	r1, r2
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7ff fb88 	bl	80114b4 <lwip_netconn_is_err_msg>
 8011da4:	4603      	mov	r3, r0
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d113      	bne.n	8011dd2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011dae:	6978      	ldr	r0, [r7, #20]
 8011db0:	f7ff ffac 	bl	8011d0c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d007      	beq.n	8011dcc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f003 fac9 	bl	8015358 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011dcc:	6978      	ldr	r0, [r7, #20]
 8011dce:	f7ff ff53 	bl	8011c78 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	3314      	adds	r3, #20
 8011dd6:	f107 0210 	add.w	r2, r7, #16
 8011dda:	4611      	mov	r1, r2
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f00c fb6c 	bl	801e4ba <sys_arch_mbox_tryfetch>
 8011de2:	4603      	mov	r3, r0
 8011de4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011de8:	d1d5      	bne.n	8011d96 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	3314      	adds	r3, #20
 8011dee:	4618      	mov	r0, r3
 8011df0:	f00c fae6 	bl	801e3c0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	3314      	adds	r3, #20
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f00c fb86 	bl	801e50a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011dfe:	bf00      	nop
 8011e00:	3718      	adds	r7, #24
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
	...

08011e08 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b086      	sub	sp, #24
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	460b      	mov	r3, r1
 8011e12:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011e14:	2300      	movs	r3, #0
 8011e16:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d106      	bne.n	8011e2c <lwip_netconn_do_close_internal+0x24>
 8011e1e:	4b87      	ldr	r3, [pc, #540]	@ (801203c <lwip_netconn_do_close_internal+0x234>)
 8011e20:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8011e24:	4986      	ldr	r1, [pc, #536]	@ (8012040 <lwip_netconn_do_close_internal+0x238>)
 8011e26:	4887      	ldr	r0, [pc, #540]	@ (8012044 <lwip_netconn_do_close_internal+0x23c>)
 8011e28:	f00d fee0 	bl	801fbec <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011e34:	2b10      	cmp	r3, #16
 8011e36:	d006      	beq.n	8011e46 <lwip_netconn_do_close_internal+0x3e>
 8011e38:	4b80      	ldr	r3, [pc, #512]	@ (801203c <lwip_netconn_do_close_internal+0x234>)
 8011e3a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8011e3e:	4982      	ldr	r1, [pc, #520]	@ (8012048 <lwip_netconn_do_close_internal+0x240>)
 8011e40:	4880      	ldr	r0, [pc, #512]	@ (8012044 <lwip_netconn_do_close_internal+0x23c>)
 8011e42:	f00d fed3 	bl	801fbec <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	785b      	ldrb	r3, [r3, #1]
 8011e4a:	2b04      	cmp	r3, #4
 8011e4c:	d006      	beq.n	8011e5c <lwip_netconn_do_close_internal+0x54>
 8011e4e:	4b7b      	ldr	r3, [pc, #492]	@ (801203c <lwip_netconn_do_close_internal+0x234>)
 8011e50:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8011e54:	497d      	ldr	r1, [pc, #500]	@ (801204c <lwip_netconn_do_close_internal+0x244>)
 8011e56:	487b      	ldr	r0, [pc, #492]	@ (8012044 <lwip_netconn_do_close_internal+0x23c>)
 8011e58:	f00d fec8 	bl	801fbec <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d106      	bne.n	8011e72 <lwip_netconn_do_close_internal+0x6a>
 8011e64:	4b75      	ldr	r3, [pc, #468]	@ (801203c <lwip_netconn_do_close_internal+0x234>)
 8011e66:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8011e6a:	4979      	ldr	r1, [pc, #484]	@ (8012050 <lwip_netconn_do_close_internal+0x248>)
 8011e6c:	4875      	ldr	r0, [pc, #468]	@ (8012044 <lwip_netconn_do_close_internal+0x23c>)
 8011e6e:	f00d febd 	bl	801fbec <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6a1b      	ldr	r3, [r3, #32]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d106      	bne.n	8011e88 <lwip_netconn_do_close_internal+0x80>
 8011e7a:	4b70      	ldr	r3, [pc, #448]	@ (801203c <lwip_netconn_do_close_internal+0x234>)
 8011e7c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011e80:	4974      	ldr	r1, [pc, #464]	@ (8012054 <lwip_netconn_do_close_internal+0x24c>)
 8011e82:	4870      	ldr	r0, [pc, #448]	@ (8012044 <lwip_netconn_do_close_internal+0x23c>)
 8011e84:	f00d feb2 	bl	801fbec <iprintf>

  tpcb = conn->pcb.tcp;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6a1b      	ldr	r3, [r3, #32]
 8011e92:	7a1b      	ldrb	r3, [r3, #8]
 8011e94:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011e96:	7bfb      	ldrb	r3, [r7, #15]
 8011e98:	f003 0301 	and.w	r3, r3, #1
 8011e9c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011e9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ea0:	f003 0302 	and.w	r3, r3, #2
 8011ea4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011ea6:	7bfb      	ldrb	r3, [r7, #15]
 8011ea8:	2b03      	cmp	r3, #3
 8011eaa:	d102      	bne.n	8011eb2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011eac:	2301      	movs	r3, #1
 8011eae:	75bb      	strb	r3, [r7, #22]
 8011eb0:	e01f      	b.n	8011ef2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011eb2:	7bbb      	ldrb	r3, [r7, #14]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00e      	beq.n	8011ed6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011ebc:	2b05      	cmp	r3, #5
 8011ebe:	d007      	beq.n	8011ed0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011ec4:	2b06      	cmp	r3, #6
 8011ec6:	d003      	beq.n	8011ed0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011ecc:	2b08      	cmp	r3, #8
 8011ece:	d102      	bne.n	8011ed6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	75bb      	strb	r3, [r7, #22]
 8011ed4:	e00d      	b.n	8011ef2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011ed6:	7b7b      	ldrb	r3, [r7, #13]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d008      	beq.n	8011eee <lwip_netconn_do_close_internal+0xe6>
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	8b5b      	ldrh	r3, [r3, #26]
 8011ee0:	f003 0310 	and.w	r3, r3, #16
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d002      	beq.n	8011eee <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	75bb      	strb	r3, [r7, #22]
 8011eec:	e001      	b.n	8011ef2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011ef2:	7dbb      	ldrb	r3, [r7, #22]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d003      	beq.n	8011f00 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8011ef8:	2100      	movs	r1, #0
 8011efa:	6938      	ldr	r0, [r7, #16]
 8011efc:	f004 fa1c 	bl	8016338 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	7d1b      	ldrb	r3, [r3, #20]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d104      	bne.n	8011f12 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011f08:	2100      	movs	r1, #0
 8011f0a:	6938      	ldr	r0, [r7, #16]
 8011f0c:	f004 fa8c 	bl	8016428 <tcp_accept>
 8011f10:	e01d      	b.n	8011f4e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011f12:	7bbb      	ldrb	r3, [r7, #14]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d007      	beq.n	8011f28 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011f18:	2100      	movs	r1, #0
 8011f1a:	6938      	ldr	r0, [r7, #16]
 8011f1c:	f004 fa1e 	bl	801635c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011f20:	2100      	movs	r1, #0
 8011f22:	6938      	ldr	r0, [r7, #16]
 8011f24:	f004 fa80 	bl	8016428 <tcp_accept>
    }
    if (shut_tx) {
 8011f28:	7b7b      	ldrb	r3, [r7, #13]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d003      	beq.n	8011f36 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011f2e:	2100      	movs	r1, #0
 8011f30:	6938      	ldr	r0, [r7, #16]
 8011f32:	f004 fa35 	bl	80163a0 <tcp_sent>
    }
    if (shut_close) {
 8011f36:	7dbb      	ldrb	r3, [r7, #22]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d008      	beq.n	8011f4e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	2100      	movs	r1, #0
 8011f40:	6938      	ldr	r0, [r7, #16]
 8011f42:	f004 fa89 	bl	8016458 <tcp_poll>
      tcp_err(tpcb, NULL);
 8011f46:	2100      	movs	r1, #0
 8011f48:	6938      	ldr	r0, [r7, #16]
 8011f4a:	f004 fa4b 	bl	80163e4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011f4e:	7dbb      	ldrb	r3, [r7, #22]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d005      	beq.n	8011f60 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011f54:	6938      	ldr	r0, [r7, #16]
 8011f56:	f003 f8b9 	bl	80150cc <tcp_close>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	75fb      	strb	r3, [r7, #23]
 8011f5e:	e007      	b.n	8011f70 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011f60:	7bbb      	ldrb	r3, [r7, #14]
 8011f62:	7b7a      	ldrb	r2, [r7, #13]
 8011f64:	4619      	mov	r1, r3
 8011f66:	6938      	ldr	r0, [r7, #16]
 8011f68:	f003 f8dc 	bl	8015124 <tcp_shutdown>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d102      	bne.n	8011f7e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	757b      	strb	r3, [r7, #21]
 8011f7c:	e016      	b.n	8011fac <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f86:	d10f      	bne.n	8011fa8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6a1b      	ldr	r3, [r3, #32]
 8011f8c:	7a5b      	ldrb	r3, [r3, #9]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10c      	bne.n	8011fac <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011f92:	2301      	movs	r3, #1
 8011f94:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011f96:	7dbb      	ldrb	r3, [r7, #22]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d007      	beq.n	8011fac <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011f9c:	6938      	ldr	r0, [r7, #16]
 8011f9e:	f003 f9db 	bl	8015358 <tcp_abort>
          err = ERR_OK;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	75fb      	strb	r3, [r7, #23]
 8011fa6:	e001      	b.n	8011fac <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011fa8:	2301      	movs	r3, #1
 8011faa:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011fac:	7d7b      	ldrb	r3, [r7, #21]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d052      	beq.n	8012058 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6a1b      	ldr	r3, [r3, #32]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	330c      	adds	r3, #12
 8011fba:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6a1b      	ldr	r3, [r3, #32]
 8011fc0:	7dfa      	ldrb	r2, [r7, #23]
 8011fc2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d129      	bne.n	801202c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011fd8:	7dbb      	ldrb	r3, [r7, #22]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d00c      	beq.n	8011ff8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d005      	beq.n	8011ff8 <lwip_netconn_do_close_internal+0x1f0>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	2104      	movs	r1, #4
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	4798      	blx	r3
      }
      if (shut_rx) {
 8011ff8:	7bbb      	ldrb	r3, [r7, #14]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d009      	beq.n	8012012 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012002:	2b00      	cmp	r3, #0
 8012004:	d005      	beq.n	8012012 <lwip_netconn_do_close_internal+0x20a>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801200a:	2200      	movs	r2, #0
 801200c:	2100      	movs	r1, #0
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	4798      	blx	r3
      }
      if (shut_tx) {
 8012012:	7b7b      	ldrb	r3, [r7, #13]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d009      	beq.n	801202c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801201c:	2b00      	cmp	r3, #0
 801201e:	d005      	beq.n	801202c <lwip_netconn_do_close_internal+0x224>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012024:	2200      	movs	r2, #0
 8012026:	2102      	movs	r1, #2
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801202c:	78fb      	ldrb	r3, [r7, #3]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d002      	beq.n	8012038 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012032:	68b8      	ldr	r0, [r7, #8]
 8012034:	f00c faed 	bl	801e612 <sys_sem_signal>
    }
    return ERR_OK;
 8012038:	2300      	movs	r3, #0
 801203a:	e03c      	b.n	80120b6 <lwip_netconn_do_close_internal+0x2ae>
 801203c:	08021060 	.word	0x08021060
 8012040:	08021334 	.word	0x08021334
 8012044:	080210a4 	.word	0x080210a4
 8012048:	08021344 	.word	0x08021344
 801204c:	08021364 	.word	0x08021364
 8012050:	08021388 	.word	0x08021388
 8012054:	080211c8 	.word	0x080211c8
  }
  if (!close_finished) {
 8012058:	7d7b      	ldrb	r3, [r7, #21]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d11e      	bne.n	801209c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	7d1b      	ldrb	r3, [r3, #20]
 8012062:	2b01      	cmp	r3, #1
 8012064:	d106      	bne.n	8012074 <lwip_netconn_do_close_internal+0x26c>
 8012066:	4b16      	ldr	r3, [pc, #88]	@ (80120c0 <lwip_netconn_do_close_internal+0x2b8>)
 8012068:	f240 4241 	movw	r2, #1089	@ 0x441
 801206c:	4915      	ldr	r1, [pc, #84]	@ (80120c4 <lwip_netconn_do_close_internal+0x2bc>)
 801206e:	4816      	ldr	r0, [pc, #88]	@ (80120c8 <lwip_netconn_do_close_internal+0x2c0>)
 8012070:	f00d fdbc 	bl	801fbec <iprintf>
    if (shut_tx) {
 8012074:	7b7b      	ldrb	r3, [r7, #13]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d003      	beq.n	8012082 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801207a:	4914      	ldr	r1, [pc, #80]	@ (80120cc <lwip_netconn_do_close_internal+0x2c4>)
 801207c:	6938      	ldr	r0, [r7, #16]
 801207e:	f004 f98f 	bl	80163a0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012082:	2201      	movs	r2, #1
 8012084:	4912      	ldr	r1, [pc, #72]	@ (80120d0 <lwip_netconn_do_close_internal+0x2c8>)
 8012086:	6938      	ldr	r0, [r7, #16]
 8012088:	f004 f9e6 	bl	8016458 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 801208c:	4911      	ldr	r1, [pc, #68]	@ (80120d4 <lwip_netconn_do_close_internal+0x2cc>)
 801208e:	6938      	ldr	r0, [r7, #16]
 8012090:	f004 f9a8 	bl	80163e4 <tcp_err>
    tcp_arg(tpcb, conn);
 8012094:	6879      	ldr	r1, [r7, #4]
 8012096:	6938      	ldr	r0, [r7, #16]
 8012098:	f004 f94e 	bl	8016338 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 801209c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d106      	bne.n	80120b2 <lwip_netconn_do_close_internal+0x2aa>
 80120a4:	4b06      	ldr	r3, [pc, #24]	@ (80120c0 <lwip_netconn_do_close_internal+0x2b8>)
 80120a6:	f240 424d 	movw	r2, #1101	@ 0x44d
 80120aa:	490b      	ldr	r1, [pc, #44]	@ (80120d8 <lwip_netconn_do_close_internal+0x2d0>)
 80120ac:	4806      	ldr	r0, [pc, #24]	@ (80120c8 <lwip_netconn_do_close_internal+0x2c0>)
 80120ae:	f00d fd9d 	bl	801fbec <iprintf>
  return err;
 80120b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3718      	adds	r7, #24
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	08021060 	.word	0x08021060
 80120c4:	0802139c 	.word	0x0802139c
 80120c8:	080210a4 	.word	0x080210a4
 80120cc:	080117f9 	.word	0x080117f9
 80120d0:	08011731 	.word	0x08011731
 80120d4:	080118a1 	.word	0x080118a1
 80120d8:	080213c0 	.word	0x080213c0

080120dc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	785b      	ldrb	r3, [r3, #1]
 80120ee:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80120f0:	7afb      	ldrb	r3, [r7, #11]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d00d      	beq.n	8012112 <lwip_netconn_do_delconn+0x36>
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012100:	2b10      	cmp	r3, #16
 8012102:	d006      	beq.n	8012112 <lwip_netconn_do_delconn+0x36>
 8012104:	4b60      	ldr	r3, [pc, #384]	@ (8012288 <lwip_netconn_do_delconn+0x1ac>)
 8012106:	f240 425e 	movw	r2, #1118	@ 0x45e
 801210a:	4960      	ldr	r1, [pc, #384]	@ (801228c <lwip_netconn_do_delconn+0x1b0>)
 801210c:	4860      	ldr	r0, [pc, #384]	@ (8012290 <lwip_netconn_do_delconn+0x1b4>)
 801210e:	f00d fd6d 	bl	801fbec <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012112:	7afb      	ldrb	r3, [r7, #11]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d005      	beq.n	8012124 <lwip_netconn_do_delconn+0x48>
 8012118:	7afb      	ldrb	r3, [r7, #11]
 801211a:	2b02      	cmp	r3, #2
 801211c:	d002      	beq.n	8012124 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801211e:	7afb      	ldrb	r3, [r7, #11]
 8012120:	2b03      	cmp	r3, #3
 8012122:	d109      	bne.n	8012138 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012124:	7afb      	ldrb	r3, [r7, #11]
 8012126:	2b03      	cmp	r3, #3
 8012128:	d10a      	bne.n	8012140 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	7f1b      	ldrb	r3, [r3, #28]
 8012130:	f003 0304 	and.w	r3, r3, #4
 8012134:	2b00      	cmp	r3, #0
 8012136:	d103      	bne.n	8012140 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	22fb      	movs	r2, #251	@ 0xfb
 801213c:	711a      	strb	r2, [r3, #4]
 801213e:	e097      	b.n	8012270 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012140:	7afb      	ldrb	r3, [r7, #11]
 8012142:	2b03      	cmp	r3, #3
 8012144:	d10d      	bne.n	8012162 <lwip_netconn_do_delconn+0x86>
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	7f1b      	ldrb	r3, [r3, #28]
 801214c:	f003 0304 	and.w	r3, r3, #4
 8012150:	2b00      	cmp	r3, #0
 8012152:	d106      	bne.n	8012162 <lwip_netconn_do_delconn+0x86>
 8012154:	4b4c      	ldr	r3, [pc, #304]	@ (8012288 <lwip_netconn_do_delconn+0x1ac>)
 8012156:	f240 427a 	movw	r2, #1146	@ 0x47a
 801215a:	494e      	ldr	r1, [pc, #312]	@ (8012294 <lwip_netconn_do_delconn+0x1b8>)
 801215c:	484c      	ldr	r0, [pc, #304]	@ (8012290 <lwip_netconn_do_delconn+0x1b4>)
 801215e:	f00d fd45 	bl	801fbec <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2200      	movs	r2, #0
 8012166:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	4618      	mov	r0, r3
 801216e:	f7ff fdcd 	bl	8011d0c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	685b      	ldr	r3, [r3, #4]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d05f      	beq.n	801223c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012186:	2b10      	cmp	r3, #16
 8012188:	d00d      	beq.n	80121a6 <lwip_netconn_do_delconn+0xca>
 801218a:	2b20      	cmp	r3, #32
 801218c:	d151      	bne.n	8012232 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	4618      	mov	r0, r3
 80121a0:	f009 fc36 	bl	801ba10 <udp_remove>
          break;
 80121a4:	e046      	b.n	8012234 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	6a1b      	ldr	r3, [r3, #32]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d006      	beq.n	80121be <lwip_netconn_do_delconn+0xe2>
 80121b0:	4b35      	ldr	r3, [pc, #212]	@ (8012288 <lwip_netconn_do_delconn+0x1ac>)
 80121b2:	f240 4294 	movw	r2, #1172	@ 0x494
 80121b6:	4938      	ldr	r1, [pc, #224]	@ (8012298 <lwip_netconn_do_delconn+0x1bc>)
 80121b8:	4835      	ldr	r0, [pc, #212]	@ (8012290 <lwip_netconn_do_delconn+0x1b4>)
 80121ba:	f00d fd17 	bl	801fbec <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	2204      	movs	r2, #4
 80121c4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2203      	movs	r2, #3
 80121ca:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	68fa      	ldr	r2, [r7, #12]
 80121d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	2100      	movs	r1, #0
 80121da:	4618      	mov	r0, r3
 80121dc:	f7ff fe14 	bl	8011e08 <lwip_netconn_do_close_internal>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d04b      	beq.n	801227e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	785b      	ldrb	r3, [r3, #1]
 80121ec:	2b04      	cmp	r3, #4
 80121ee:	d006      	beq.n	80121fe <lwip_netconn_do_delconn+0x122>
 80121f0:	4b25      	ldr	r3, [pc, #148]	@ (8012288 <lwip_netconn_do_delconn+0x1ac>)
 80121f2:	f240 429a 	movw	r2, #1178	@ 0x49a
 80121f6:	4929      	ldr	r1, [pc, #164]	@ (801229c <lwip_netconn_do_delconn+0x1c0>)
 80121f8:	4825      	ldr	r0, [pc, #148]	@ (8012290 <lwip_netconn_do_delconn+0x1b4>)
 80121fa:	f00d fcf7 	bl	801fbec <iprintf>
            UNLOCK_TCPIP_CORE();
 80121fe:	4828      	ldr	r0, [pc, #160]	@ (80122a0 <lwip_netconn_do_delconn+0x1c4>)
 8012200:	f00c fa9b 	bl	801e73a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	330c      	adds	r3, #12
 801220a:	2100      	movs	r1, #0
 801220c:	4618      	mov	r0, r3
 801220e:	f00c f9cf 	bl	801e5b0 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012212:	4823      	ldr	r0, [pc, #140]	@ (80122a0 <lwip_netconn_do_delconn+0x1c4>)
 8012214:	f00c fa82 	bl	801e71c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	785b      	ldrb	r3, [r3, #1]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d02d      	beq.n	801227e <lwip_netconn_do_delconn+0x1a2>
 8012222:	4b19      	ldr	r3, [pc, #100]	@ (8012288 <lwip_netconn_do_delconn+0x1ac>)
 8012224:	f240 429e 	movw	r2, #1182	@ 0x49e
 8012228:	491c      	ldr	r1, [pc, #112]	@ (801229c <lwip_netconn_do_delconn+0x1c0>)
 801222a:	4819      	ldr	r0, [pc, #100]	@ (8012290 <lwip_netconn_do_delconn+0x1b4>)
 801222c:	f00d fcde 	bl	801fbec <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012230:	e025      	b.n	801227e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8012232:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2200      	movs	r2, #0
 801223a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012242:	2b00      	cmp	r3, #0
 8012244:	d007      	beq.n	8012256 <lwip_netconn_do_delconn+0x17a>
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	6810      	ldr	r0, [r2, #0]
 8012250:	2200      	movs	r2, #0
 8012252:	2100      	movs	r1, #0
 8012254:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801225c:	2b00      	cmp	r3, #0
 801225e:	d007      	beq.n	8012270 <lwip_netconn_do_delconn+0x194>
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	6810      	ldr	r0, [r2, #0]
 801226a:	2200      	movs	r2, #0
 801226c:	2102      	movs	r1, #2
 801226e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	330c      	adds	r3, #12
 8012276:	4618      	mov	r0, r3
 8012278:	f00c f9f0 	bl	801e65c <sys_sem_valid>
 801227c:	e000      	b.n	8012280 <lwip_netconn_do_delconn+0x1a4>
          return;
 801227e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012280:	3710      	adds	r7, #16
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	08021060 	.word	0x08021060
 801228c:	080213d0 	.word	0x080213d0
 8012290:	080210a4 	.word	0x080210a4
 8012294:	080213e4 	.word	0x080213e4
 8012298:	08021404 	.word	0x08021404
 801229c:	08021420 	.word	0x08021420
 80122a0:	200270b0 	.word	0x200270b0

080122a4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	685b      	ldr	r3, [r3, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d025      	beq.n	8012306 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80122c4:	2b10      	cmp	r3, #16
 80122c6:	d00e      	beq.n	80122e6 <lwip_netconn_do_bind+0x42>
 80122c8:	2b20      	cmp	r3, #32
 80122ca:	d119      	bne.n	8012300 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	6858      	ldr	r0, [r3, #4]
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	6899      	ldr	r1, [r3, #8]
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	899b      	ldrh	r3, [r3, #12]
 80122da:	461a      	mov	r2, r3
 80122dc:	f009 faf0 	bl	801b8c0 <udp_bind>
 80122e0:	4603      	mov	r3, r0
 80122e2:	73fb      	strb	r3, [r7, #15]
        break;
 80122e4:	e011      	b.n	801230a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	6858      	ldr	r0, [r3, #4]
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	6899      	ldr	r1, [r3, #8]
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	899b      	ldrh	r3, [r3, #12]
 80122f4:	461a      	mov	r2, r3
 80122f6:	f003 f83b 	bl	8015370 <tcp_bind>
 80122fa:	4603      	mov	r3, r0
 80122fc:	73fb      	strb	r3, [r7, #15]
        break;
 80122fe:	e004      	b.n	801230a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012300:	23fa      	movs	r3, #250	@ 0xfa
 8012302:	73fb      	strb	r3, [r7, #15]
        break;
 8012304:	e001      	b.n	801230a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8012306:	23fa      	movs	r3, #250	@ 0xfa
 8012308:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	7bfa      	ldrb	r2, [r7, #15]
 801230e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012310:	bf00      	nop
 8012312:	3710      	adds	r7, #16
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	4618      	mov	r0, r3
 801232a:	f7ff f871 	bl	8011410 <netconn_err>
 801232e:	4603      	mov	r3, r0
 8012330:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d134      	bne.n	80123a4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d02d      	beq.n	80123a0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801234e:	2b20      	cmp	r3, #32
 8012350:	d123      	bne.n	801239a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	689b      	ldr	r3, [r3, #8]
 8012356:	689b      	ldr	r3, [r3, #8]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d10c      	bne.n	8012376 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	685a      	ldr	r2, [r3, #4]
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	689b      	ldr	r3, [r3, #8]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	4619      	mov	r1, r3
 801236a:	4610      	mov	r0, r2
 801236c:	f009 f8aa 	bl	801b4c4 <udp_send>
 8012370:	4603      	mov	r3, r0
 8012372:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8012374:	e016      	b.n	80123a4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	6858      	ldr	r0, [r3, #4]
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	6819      	ldr	r1, [r3, #0]
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	689b      	ldr	r3, [r3, #8]
 8012386:	f103 0208 	add.w	r2, r3, #8
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	689b      	ldr	r3, [r3, #8]
 801238e:	899b      	ldrh	r3, [r3, #12]
 8012390:	f009 f8cc 	bl	801b52c <udp_sendto>
 8012394:	4603      	mov	r3, r0
 8012396:	73fb      	strb	r3, [r7, #15]
          break;
 8012398:	e004      	b.n	80123a4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 801239a:	23f5      	movs	r3, #245	@ 0xf5
 801239c:	73fb      	strb	r3, [r7, #15]
          break;
 801239e:	e001      	b.n	80123a4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80123a0:	23f5      	movs	r3, #245	@ 0xf5
 80123a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	7bfa      	ldrb	r2, [r7, #15]
 80123a8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80123aa:	bf00      	nop
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}

080123b2 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80123b2:	b580      	push	{r7, lr}
 80123b4:	b086      	sub	sp, #24
 80123b6:	af00      	add	r7, sp, #0
 80123b8:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	2200      	movs	r2, #0
 80123c2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d022      	beq.n	8012414 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80123d8:	2b10      	cmp	r3, #16
 80123da:	d11b      	bne.n	8012414 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	689b      	ldr	r3, [r3, #8]
 80123e0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80123e8:	d202      	bcs.n	80123f0 <lwip_netconn_do_recv+0x3e>
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	e001      	b.n	80123f4 <lwip_netconn_do_recv+0x42>
 80123f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80123f4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	89fa      	ldrh	r2, [r7, #14]
 80123fe:	4611      	mov	r1, r2
 8012400:	4618      	mov	r0, r3
 8012402:	f003 f8a7 	bl	8015554 <tcp_recved>
        remaining -= recved;
 8012406:	89fb      	ldrh	r3, [r7, #14]
 8012408:	697a      	ldr	r2, [r7, #20]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d1e6      	bne.n	80123e2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012414:	bf00      	nop
 8012416:	3718      	adds	r7, #24
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b088      	sub	sp, #32
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
 8012424:	460b      	mov	r3, r1
 8012426:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012428:	2300      	movs	r3, #0
 801242a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d106      	bne.n	8012440 <lwip_netconn_do_writemore+0x24>
 8012432:	4b96      	ldr	r3, [pc, #600]	@ (801268c <lwip_netconn_do_writemore+0x270>)
 8012434:	f240 6273 	movw	r2, #1651	@ 0x673
 8012438:	4995      	ldr	r1, [pc, #596]	@ (8012690 <lwip_netconn_do_writemore+0x274>)
 801243a:	4896      	ldr	r0, [pc, #600]	@ (8012694 <lwip_netconn_do_writemore+0x278>)
 801243c:	f00d fbd6 	bl	801fbec <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	785b      	ldrb	r3, [r3, #1]
 8012444:	2b01      	cmp	r3, #1
 8012446:	d006      	beq.n	8012456 <lwip_netconn_do_writemore+0x3a>
 8012448:	4b90      	ldr	r3, [pc, #576]	@ (801268c <lwip_netconn_do_writemore+0x270>)
 801244a:	f240 6274 	movw	r2, #1652	@ 0x674
 801244e:	4992      	ldr	r1, [pc, #584]	@ (8012698 <lwip_netconn_do_writemore+0x27c>)
 8012450:	4890      	ldr	r0, [pc, #576]	@ (8012694 <lwip_netconn_do_writemore+0x278>)
 8012452:	f00d fbcb 	bl	801fbec <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6a1b      	ldr	r3, [r3, #32]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d106      	bne.n	801246c <lwip_netconn_do_writemore+0x50>
 801245e:	4b8b      	ldr	r3, [pc, #556]	@ (801268c <lwip_netconn_do_writemore+0x270>)
 8012460:	f240 6275 	movw	r2, #1653	@ 0x675
 8012464:	498d      	ldr	r1, [pc, #564]	@ (801269c <lwip_netconn_do_writemore+0x280>)
 8012466:	488b      	ldr	r0, [pc, #556]	@ (8012694 <lwip_netconn_do_writemore+0x278>)
 8012468:	f00d fbc0 	bl	801fbec <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d106      	bne.n	8012482 <lwip_netconn_do_writemore+0x66>
 8012474:	4b85      	ldr	r3, [pc, #532]	@ (801268c <lwip_netconn_do_writemore+0x270>)
 8012476:	f240 6276 	movw	r2, #1654	@ 0x676
 801247a:	4989      	ldr	r1, [pc, #548]	@ (80126a0 <lwip_netconn_do_writemore+0x284>)
 801247c:	4885      	ldr	r0, [pc, #532]	@ (8012694 <lwip_netconn_do_writemore+0x278>)
 801247e:	f00d fbb5 	bl	801fbec <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6a1b      	ldr	r3, [r3, #32]
 8012486:	699a      	ldr	r2, [r3, #24]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6a1b      	ldr	r3, [r3, #32]
 801248c:	695b      	ldr	r3, [r3, #20]
 801248e:	429a      	cmp	r2, r3
 8012490:	d306      	bcc.n	80124a0 <lwip_netconn_do_writemore+0x84>
 8012492:	4b7e      	ldr	r3, [pc, #504]	@ (801268c <lwip_netconn_do_writemore+0x270>)
 8012494:	f240 6277 	movw	r2, #1655	@ 0x677
 8012498:	4982      	ldr	r1, [pc, #520]	@ (80126a4 <lwip_netconn_do_writemore+0x288>)
 801249a:	487e      	ldr	r0, [pc, #504]	@ (8012694 <lwip_netconn_do_writemore+0x278>)
 801249c:	f00d fba6 	bl	801fbec <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6a1b      	ldr	r3, [r3, #32]
 80124a4:	899b      	ldrh	r3, [r3, #12]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d106      	bne.n	80124b8 <lwip_netconn_do_writemore+0x9c>
 80124aa:	4b78      	ldr	r3, [pc, #480]	@ (801268c <lwip_netconn_do_writemore+0x270>)
 80124ac:	f240 6279 	movw	r2, #1657	@ 0x679
 80124b0:	497d      	ldr	r1, [pc, #500]	@ (80126a8 <lwip_netconn_do_writemore+0x28c>)
 80124b2:	4878      	ldr	r0, [pc, #480]	@ (8012694 <lwip_netconn_do_writemore+0x278>)
 80124b4:	f00d fb9a 	bl	801fbec <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6a1b      	ldr	r3, [r3, #32]
 80124bc:	7f1b      	ldrb	r3, [r3, #28]
 80124be:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	7f1b      	ldrb	r3, [r3, #28]
 80124c4:	f003 0302 	and.w	r3, r3, #2
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d104      	bne.n	80124d6 <lwip_netconn_do_writemore+0xba>
 80124cc:	7ebb      	ldrb	r3, [r7, #26]
 80124ce:	f003 0304 	and.w	r3, r3, #4
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d001      	beq.n	80124da <lwip_netconn_do_writemore+0xbe>
 80124d6:	2301      	movs	r3, #1
 80124d8:	e000      	b.n	80124dc <lwip_netconn_do_writemore+0xc0>
 80124da:	2300      	movs	r3, #0
 80124dc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6a1b      	ldr	r3, [r3, #32]
 80124e2:	689b      	ldr	r3, [r3, #8]
 80124e4:	681a      	ldr	r2, [r3, #0]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6a1b      	ldr	r3, [r3, #32]
 80124ea:	691b      	ldr	r3, [r3, #16]
 80124ec:	4413      	add	r3, r2
 80124ee:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6a1b      	ldr	r3, [r3, #32]
 80124f4:	689b      	ldr	r3, [r3, #8]
 80124f6:	685a      	ldr	r2, [r3, #4]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6a1b      	ldr	r3, [r3, #32]
 80124fc:	691b      	ldr	r3, [r3, #16]
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012508:	d307      	bcc.n	801251a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801250a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801250e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012510:	7ebb      	ldrb	r3, [r7, #26]
 8012512:	f043 0302 	orr.w	r3, r3, #2
 8012516:	76bb      	strb	r3, [r7, #26]
 8012518:	e001      	b.n	801251e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012526:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012528:	89fa      	ldrh	r2, [r7, #14]
 801252a:	8bbb      	ldrh	r3, [r7, #28]
 801252c:	429a      	cmp	r2, r3
 801252e:	d216      	bcs.n	801255e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012530:	89fb      	ldrh	r3, [r7, #14]
 8012532:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012534:	7e3b      	ldrb	r3, [r7, #24]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d00d      	beq.n	8012556 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801253a:	8bbb      	ldrh	r3, [r7, #28]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d10e      	bne.n	801255e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6a1b      	ldr	r3, [r3, #32]
 8012544:	699b      	ldr	r3, [r3, #24]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d102      	bne.n	8012550 <lwip_netconn_do_writemore+0x134>
 801254a:	f06f 0306 	mvn.w	r3, #6
 801254e:	e000      	b.n	8012552 <lwip_netconn_do_writemore+0x136>
 8012550:	2300      	movs	r3, #0
 8012552:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012554:	e07d      	b.n	8012652 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012556:	7ebb      	ldrb	r3, [r7, #26]
 8012558:	f043 0302 	orr.w	r3, r3, #2
 801255c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6a1b      	ldr	r3, [r3, #32]
 8012562:	691a      	ldr	r2, [r3, #16]
 8012564:	8bbb      	ldrh	r3, [r7, #28]
 8012566:	441a      	add	r2, r3
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6a1b      	ldr	r3, [r3, #32]
 801256c:	689b      	ldr	r3, [r3, #8]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	429a      	cmp	r2, r3
 8012572:	d906      	bls.n	8012582 <lwip_netconn_do_writemore+0x166>
 8012574:	4b45      	ldr	r3, [pc, #276]	@ (801268c <lwip_netconn_do_writemore+0x270>)
 8012576:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 801257a:	494c      	ldr	r1, [pc, #304]	@ (80126ac <lwip_netconn_do_writemore+0x290>)
 801257c:	4845      	ldr	r0, [pc, #276]	@ (8012694 <lwip_netconn_do_writemore+0x278>)
 801257e:	f00d fb35 	bl	801fbec <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012582:	8bbb      	ldrh	r3, [r7, #28]
 8012584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012588:	4293      	cmp	r3, r2
 801258a:	d103      	bne.n	8012594 <lwip_netconn_do_writemore+0x178>
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012592:	d209      	bcs.n	80125a8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012598:	8bba      	ldrh	r2, [r7, #28]
 801259a:	429a      	cmp	r2, r3
 801259c:	d10b      	bne.n	80125b6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6a1b      	ldr	r3, [r3, #32]
 80125a2:	899b      	ldrh	r3, [r3, #12]
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d906      	bls.n	80125b6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80125a8:	2301      	movs	r3, #1
 80125aa:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80125ac:	7ebb      	ldrb	r3, [r7, #26]
 80125ae:	f043 0302 	orr.w	r3, r3, #2
 80125b2:	76bb      	strb	r3, [r7, #26]
 80125b4:	e001      	b.n	80125ba <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80125b6:	2300      	movs	r3, #0
 80125b8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6858      	ldr	r0, [r3, #4]
 80125be:	7ebb      	ldrb	r3, [r7, #26]
 80125c0:	8bba      	ldrh	r2, [r7, #28]
 80125c2:	6979      	ldr	r1, [r7, #20]
 80125c4:	f006 fe6e 	bl	80192a4 <tcp_write>
 80125c8:	4603      	mov	r3, r0
 80125ca:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80125cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d12c      	bne.n	801262e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6a1b      	ldr	r3, [r3, #32]
 80125d8:	6999      	ldr	r1, [r3, #24]
 80125da:	8bba      	ldrh	r2, [r7, #28]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6a1b      	ldr	r3, [r3, #32]
 80125e0:	440a      	add	r2, r1
 80125e2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6a1b      	ldr	r3, [r3, #32]
 80125e8:	6919      	ldr	r1, [r3, #16]
 80125ea:	8bba      	ldrh	r2, [r7, #28]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a1b      	ldr	r3, [r3, #32]
 80125f0:	440a      	add	r2, r1
 80125f2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6a1b      	ldr	r3, [r3, #32]
 80125f8:	691a      	ldr	r2, [r3, #16]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6a1b      	ldr	r3, [r3, #32]
 80125fe:	689b      	ldr	r3, [r3, #8]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	429a      	cmp	r2, r3
 8012604:	d113      	bne.n	801262e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6a1b      	ldr	r3, [r3, #32]
 801260a:	899a      	ldrh	r2, [r3, #12]
 801260c:	3a01      	subs	r2, #1
 801260e:	b292      	uxth	r2, r2
 8012610:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6a1b      	ldr	r3, [r3, #32]
 8012616:	899b      	ldrh	r3, [r3, #12]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d008      	beq.n	801262e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6a1b      	ldr	r3, [r3, #32]
 8012620:	689a      	ldr	r2, [r3, #8]
 8012622:	3208      	adds	r2, #8
 8012624:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6a1b      	ldr	r3, [r3, #32]
 801262a:	2200      	movs	r2, #0
 801262c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801262e:	7e7b      	ldrb	r3, [r7, #25]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d004      	beq.n	801263e <lwip_netconn_do_writemore+0x222>
 8012634:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012638:	2b00      	cmp	r3, #0
 801263a:	f43f af50 	beq.w	80124de <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801263e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d004      	beq.n	8012650 <lwip_netconn_do_writemore+0x234>
 8012646:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801264a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801264e:	d146      	bne.n	80126de <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012650:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012652:	7e3b      	ldrb	r3, [r7, #24]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d02b      	beq.n	80126b0 <lwip_netconn_do_writemore+0x294>
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6a1b      	ldr	r3, [r3, #32]
 801265c:	699a      	ldr	r2, [r3, #24]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a1b      	ldr	r3, [r3, #32]
 8012662:	695b      	ldr	r3, [r3, #20]
 8012664:	429a      	cmp	r2, r3
 8012666:	d223      	bcs.n	80126b0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801266c:	2b00      	cmp	r3, #0
 801266e:	d005      	beq.n	801267c <lwip_netconn_do_writemore+0x260>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012674:	2200      	movs	r2, #0
 8012676:	2103      	movs	r1, #3
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	7f1b      	ldrb	r3, [r3, #28]
 8012680:	f043 0310 	orr.w	r3, r3, #16
 8012684:	b2da      	uxtb	r2, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	771a      	strb	r2, [r3, #28]
 801268a:	e028      	b.n	80126de <lwip_netconn_do_writemore+0x2c2>
 801268c:	08021060 	.word	0x08021060
 8012690:	080211b8 	.word	0x080211b8
 8012694:	080210a4 	.word	0x080210a4
 8012698:	080214c0 	.word	0x080214c0
 801269c:	080211c8 	.word	0x080211c8
 80126a0:	080214e0 	.word	0x080214e0
 80126a4:	080214f8 	.word	0x080214f8
 80126a8:	08021538 	.word	0x08021538
 80126ac:	08021560 	.word	0x08021560
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80126b8:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80126bc:	d305      	bcc.n	80126ca <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80126c6:	2b04      	cmp	r3, #4
 80126c8:	d909      	bls.n	80126de <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d005      	beq.n	80126de <lwip_netconn_do_writemore+0x2c2>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126d6:	2200      	movs	r2, #0
 80126d8:	2103      	movs	r1, #3
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80126de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d11d      	bne.n	8012722 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6a1b      	ldr	r3, [r3, #32]
 80126ea:	699a      	ldr	r2, [r3, #24]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6a1b      	ldr	r3, [r3, #32]
 80126f0:	695b      	ldr	r3, [r3, #20]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d002      	beq.n	80126fc <lwip_netconn_do_writemore+0x2e0>
 80126f6:	7e3b      	ldrb	r3, [r7, #24]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d001      	beq.n	8012700 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80126fc:	2301      	movs	r3, #1
 80126fe:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	4618      	mov	r0, r3
 8012706:	f007 fbdd 	bl	8019ec4 <tcp_output>
 801270a:	4603      	mov	r3, r0
 801270c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801270e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012712:	f113 0f04 	cmn.w	r3, #4
 8012716:	d12c      	bne.n	8012772 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012718:	7b3b      	ldrb	r3, [r7, #12]
 801271a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801271c:	2301      	movs	r3, #1
 801271e:	76fb      	strb	r3, [r7, #27]
 8012720:	e027      	b.n	8012772 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012722:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012726:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801272a:	d120      	bne.n	801276e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	4618      	mov	r0, r3
 8012732:	f007 fbc7 	bl	8019ec4 <tcp_output>
 8012736:	4603      	mov	r3, r0
 8012738:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801273a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801273e:	f113 0f04 	cmn.w	r3, #4
 8012742:	d104      	bne.n	801274e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012744:	7b7b      	ldrb	r3, [r7, #13]
 8012746:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012748:	2301      	movs	r3, #1
 801274a:	76fb      	strb	r3, [r7, #27]
 801274c:	e011      	b.n	8012772 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801274e:	7e3b      	ldrb	r3, [r7, #24]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00e      	beq.n	8012772 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6a1b      	ldr	r3, [r3, #32]
 8012758:	699b      	ldr	r3, [r3, #24]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d102      	bne.n	8012764 <lwip_netconn_do_writemore+0x348>
 801275e:	f06f 0306 	mvn.w	r3, #6
 8012762:	e000      	b.n	8012766 <lwip_netconn_do_writemore+0x34a>
 8012764:	2300      	movs	r3, #0
 8012766:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012768:	2301      	movs	r3, #1
 801276a:	76fb      	strb	r3, [r7, #27]
 801276c:	e001      	b.n	8012772 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801276e:	2301      	movs	r3, #1
 8012770:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012772:	7efb      	ldrb	r3, [r7, #27]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d015      	beq.n	80127a4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6a1b      	ldr	r3, [r3, #32]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	330c      	adds	r3, #12
 8012780:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6a1b      	ldr	r3, [r3, #32]
 8012786:	7ffa      	ldrb	r2, [r7, #31]
 8012788:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2200      	movs	r2, #0
 801278e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2200      	movs	r2, #0
 8012794:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012796:	78fb      	ldrb	r3, [r7, #3]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d006      	beq.n	80127aa <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 801279c:	68b8      	ldr	r0, [r7, #8]
 801279e:	f00b ff38 	bl	801e612 <sys_sem_signal>
 80127a2:	e002      	b.n	80127aa <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80127a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127a8:	e000      	b.n	80127ac <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80127aa:	2300      	movs	r3, #0
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3720      	adds	r7, #32
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	785b      	ldrb	r3, [r3, #1]
 80127c6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	685b      	ldr	r3, [r3, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d069      	beq.n	80128a6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80127dc:	2b10      	cmp	r3, #16
 80127de:	d162      	bne.n	80128a6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80127e4:	2b03      	cmp	r3, #3
 80127e6:	d002      	beq.n	80127ee <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80127e8:	7afb      	ldrb	r3, [r7, #11]
 80127ea:	2b02      	cmp	r3, #2
 80127ec:	d05b      	beq.n	80128a6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80127ee:	7afb      	ldrb	r3, [r7, #11]
 80127f0:	2b03      	cmp	r3, #3
 80127f2:	d103      	bne.n	80127fc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	22f5      	movs	r2, #245	@ 0xf5
 80127f8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80127fa:	e059      	b.n	80128b0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80127fc:	7afb      	ldrb	r3, [r7, #11]
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d103      	bne.n	801280a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	22fb      	movs	r2, #251	@ 0xfb
 8012806:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012808:	e052      	b.n	80128b0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	7a1b      	ldrb	r3, [r3, #8]
 801280e:	f003 0301 	and.w	r3, r3, #1
 8012812:	2b00      	cmp	r3, #0
 8012814:	d004      	beq.n	8012820 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4618      	mov	r0, r3
 801281c:	f7ff fa76 	bl	8011d0c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	6a1b      	ldr	r3, [r3, #32]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d006      	beq.n	8012838 <lwip_netconn_do_close+0x84>
 801282a:	4b23      	ldr	r3, [pc, #140]	@ (80128b8 <lwip_netconn_do_close+0x104>)
 801282c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8012830:	4922      	ldr	r1, [pc, #136]	@ (80128bc <lwip_netconn_do_close+0x108>)
 8012832:	4823      	ldr	r0, [pc, #140]	@ (80128c0 <lwip_netconn_do_close+0x10c>)
 8012834:	f00d f9da 	bl	801fbec <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	2204      	movs	r2, #4
 801283e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	68fa      	ldr	r2, [r7, #12]
 8012846:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	2100      	movs	r1, #0
 801284e:	4618      	mov	r0, r3
 8012850:	f7ff fada 	bl	8011e08 <lwip_netconn_do_close_internal>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d029      	beq.n	80128ae <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	785b      	ldrb	r3, [r3, #1]
 8012860:	2b04      	cmp	r3, #4
 8012862:	d006      	beq.n	8012872 <lwip_netconn_do_close+0xbe>
 8012864:	4b14      	ldr	r3, [pc, #80]	@ (80128b8 <lwip_netconn_do_close+0x104>)
 8012866:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 801286a:	4916      	ldr	r1, [pc, #88]	@ (80128c4 <lwip_netconn_do_close+0x110>)
 801286c:	4814      	ldr	r0, [pc, #80]	@ (80128c0 <lwip_netconn_do_close+0x10c>)
 801286e:	f00d f9bd 	bl	801fbec <iprintf>
        UNLOCK_TCPIP_CORE();
 8012872:	4815      	ldr	r0, [pc, #84]	@ (80128c8 <lwip_netconn_do_close+0x114>)
 8012874:	f00b ff61 	bl	801e73a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	330c      	adds	r3, #12
 801287e:	2100      	movs	r1, #0
 8012880:	4618      	mov	r0, r3
 8012882:	f00b fe95 	bl	801e5b0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012886:	4810      	ldr	r0, [pc, #64]	@ (80128c8 <lwip_netconn_do_close+0x114>)
 8012888:	f00b ff48 	bl	801e71c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	785b      	ldrb	r3, [r3, #1]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d00b      	beq.n	80128ae <lwip_netconn_do_close+0xfa>
 8012896:	4b08      	ldr	r3, [pc, #32]	@ (80128b8 <lwip_netconn_do_close+0x104>)
 8012898:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 801289c:	4909      	ldr	r1, [pc, #36]	@ (80128c4 <lwip_netconn_do_close+0x110>)
 801289e:	4808      	ldr	r0, [pc, #32]	@ (80128c0 <lwip_netconn_do_close+0x10c>)
 80128a0:	f00d f9a4 	bl	801fbec <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80128a4:	e003      	b.n	80128ae <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	22f5      	movs	r2, #245	@ 0xf5
 80128aa:	711a      	strb	r2, [r3, #4]
 80128ac:	e000      	b.n	80128b0 <lwip_netconn_do_close+0xfc>
      return;
 80128ae:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	08021060 	.word	0x08021060
 80128bc:	08021404 	.word	0x08021404
 80128c0:	080210a4 	.word	0x080210a4
 80128c4:	08021420 	.word	0x08021420
 80128c8:	200270b0 	.word	0x200270b0

080128cc <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80128d2:	2006      	movs	r0, #6
 80128d4:	f001 f818 	bl	8013908 <memp_malloc>
 80128d8:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d004      	beq.n	80128ea <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 80128e0:	2210      	movs	r2, #16
 80128e2:	2100      	movs	r1, #0
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f00d fad9 	bl	801fe9c <memset>
  }
  return buf;
 80128ea:	687b      	ldr	r3, [r7, #4]
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3708      	adds	r7, #8
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d013      	beq.n	801292a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00b      	beq.n	8012922 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	4618      	mov	r0, r3
 8012910:	f001 ff1a 	bl	8014748 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2200      	movs	r2, #0
 8012918:	605a      	str	r2, [r3, #4]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	685a      	ldr	r2, [r3, #4]
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012922:	6879      	ldr	r1, [r7, #4]
 8012924:	2006      	movs	r0, #6
 8012926:	f001 f86b 	bl	8013a00 <memp_free>
  }
}
 801292a:	bf00      	nop
 801292c:	3708      	adds	r7, #8
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
	...

08012934 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	460b      	mov	r3, r1
 801293e:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d107      	bne.n	8012956 <netbuf_alloc+0x22>
 8012946:	4b1c      	ldr	r3, [pc, #112]	@ (80129b8 <netbuf_alloc+0x84>)
 8012948:	2268      	movs	r2, #104	@ 0x68
 801294a:	491c      	ldr	r1, [pc, #112]	@ (80129bc <netbuf_alloc+0x88>)
 801294c:	481c      	ldr	r0, [pc, #112]	@ (80129c0 <netbuf_alloc+0x8c>)
 801294e:	f00d f94d 	bl	801fbec <iprintf>
 8012952:	2300      	movs	r3, #0
 8012954:	e02b      	b.n	80129ae <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d004      	beq.n	8012968 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	f001 fef0 	bl	8014748 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8012968:	887b      	ldrh	r3, [r7, #2]
 801296a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801296e:	4619      	mov	r1, r3
 8012970:	2036      	movs	r0, #54	@ 0x36
 8012972:	f001 fc05 	bl	8014180 <pbuf_alloc>
 8012976:	4602      	mov	r2, r0
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d101      	bne.n	8012988 <netbuf_alloc+0x54>
    return NULL;
 8012984:	2300      	movs	r3, #0
 8012986:	e012      	b.n	80129ae <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	895b      	ldrh	r3, [r3, #10]
 801298e:	887a      	ldrh	r2, [r7, #2]
 8012990:	429a      	cmp	r2, r3
 8012992:	d905      	bls.n	80129a0 <netbuf_alloc+0x6c>
 8012994:	4b08      	ldr	r3, [pc, #32]	@ (80129b8 <netbuf_alloc+0x84>)
 8012996:	2272      	movs	r2, #114	@ 0x72
 8012998:	490a      	ldr	r1, [pc, #40]	@ (80129c4 <netbuf_alloc+0x90>)
 801299a:	4809      	ldr	r0, [pc, #36]	@ (80129c0 <netbuf_alloc+0x8c>)
 801299c:	f00d f926 	bl	801fbec <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681a      	ldr	r2, [r3, #0]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	685b      	ldr	r3, [r3, #4]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3708      	adds	r7, #8
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
 80129b6:	bf00      	nop
 80129b8:	080215b8 	.word	0x080215b8
 80129bc:	080215ec 	.word	0x080215ec
 80129c0:	08021608 	.word	0x08021608
 80129c4:	08021630 	.word	0x08021630

080129c8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	60b9      	str	r1, [r7, #8]
 80129d2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d108      	bne.n	80129ec <netbuf_data+0x24>
 80129da:	4b1b      	ldr	r3, [pc, #108]	@ (8012a48 <netbuf_data+0x80>)
 80129dc:	22c6      	movs	r2, #198	@ 0xc6
 80129de:	491b      	ldr	r1, [pc, #108]	@ (8012a4c <netbuf_data+0x84>)
 80129e0:	481b      	ldr	r0, [pc, #108]	@ (8012a50 <netbuf_data+0x88>)
 80129e2:	f00d f903 	bl	801fbec <iprintf>
 80129e6:	f06f 030f 	mvn.w	r3, #15
 80129ea:	e029      	b.n	8012a40 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d108      	bne.n	8012a04 <netbuf_data+0x3c>
 80129f2:	4b15      	ldr	r3, [pc, #84]	@ (8012a48 <netbuf_data+0x80>)
 80129f4:	22c7      	movs	r2, #199	@ 0xc7
 80129f6:	4917      	ldr	r1, [pc, #92]	@ (8012a54 <netbuf_data+0x8c>)
 80129f8:	4815      	ldr	r0, [pc, #84]	@ (8012a50 <netbuf_data+0x88>)
 80129fa:	f00d f8f7 	bl	801fbec <iprintf>
 80129fe:	f06f 030f 	mvn.w	r3, #15
 8012a02:	e01d      	b.n	8012a40 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d108      	bne.n	8012a1c <netbuf_data+0x54>
 8012a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8012a48 <netbuf_data+0x80>)
 8012a0c:	22c8      	movs	r2, #200	@ 0xc8
 8012a0e:	4912      	ldr	r1, [pc, #72]	@ (8012a58 <netbuf_data+0x90>)
 8012a10:	480f      	ldr	r0, [pc, #60]	@ (8012a50 <netbuf_data+0x88>)
 8012a12:	f00d f8eb 	bl	801fbec <iprintf>
 8012a16:	f06f 030f 	mvn.w	r3, #15
 8012a1a:	e011      	b.n	8012a40 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d102      	bne.n	8012a2a <netbuf_data+0x62>
    return ERR_BUF;
 8012a24:	f06f 0301 	mvn.w	r3, #1
 8012a28:	e00a      	b.n	8012a40 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	685a      	ldr	r2, [r3, #4]
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	895a      	ldrh	r2, [r3, #10]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8012a3e:	2300      	movs	r3, #0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3710      	adds	r7, #16
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	080215b8 	.word	0x080215b8
 8012a4c:	080216c0 	.word	0x080216c0
 8012a50:	08021608 	.word	0x08021608
 8012a54:	080216dc 	.word	0x080216dc
 8012a58:	080216fc 	.word	0x080216fc

08012a5c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012a66:	f008 faf9 	bl	801b05c <sys_timeouts_sleeptime>
 8012a6a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012a72:	d10b      	bne.n	8012a8c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012a74:	4813      	ldr	r0, [pc, #76]	@ (8012ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a76:	f00b fe60 	bl	801e73a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	6839      	ldr	r1, [r7, #0]
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f00b fcea 	bl	801e458 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012a84:	480f      	ldr	r0, [pc, #60]	@ (8012ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a86:	f00b fe49 	bl	801e71c <sys_mutex_lock>
    return;
 8012a8a:	e018      	b.n	8012abe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d102      	bne.n	8012a98 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012a92:	f008 faa9 	bl	801afe8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012a96:	e7e6      	b.n	8012a66 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012a98:	480a      	ldr	r0, [pc, #40]	@ (8012ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a9a:	f00b fe4e 	bl	801e73a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	6839      	ldr	r1, [r7, #0]
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f00b fcd8 	bl	801e458 <sys_arch_mbox_fetch>
 8012aa8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012aaa:	4806      	ldr	r0, [pc, #24]	@ (8012ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8012aac:	f00b fe36 	bl	801e71c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ab6:	d102      	bne.n	8012abe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012ab8:	f008 fa96 	bl	801afe8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012abc:	e7d3      	b.n	8012a66 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012abe:	3710      	adds	r7, #16
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	200270b0 	.word	0x200270b0

08012ac8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012ad0:	4810      	ldr	r0, [pc, #64]	@ (8012b14 <tcpip_thread+0x4c>)
 8012ad2:	f00b fe23 	bl	801e71c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012ad6:	4b10      	ldr	r3, [pc, #64]	@ (8012b18 <tcpip_thread+0x50>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d005      	beq.n	8012aea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012ade:	4b0e      	ldr	r3, [pc, #56]	@ (8012b18 <tcpip_thread+0x50>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8012b1c <tcpip_thread+0x54>)
 8012ae4:	6812      	ldr	r2, [r2, #0]
 8012ae6:	4610      	mov	r0, r2
 8012ae8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012aea:	f107 030c 	add.w	r3, r7, #12
 8012aee:	4619      	mov	r1, r3
 8012af0:	480b      	ldr	r0, [pc, #44]	@ (8012b20 <tcpip_thread+0x58>)
 8012af2:	f7ff ffb3 	bl	8012a5c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d106      	bne.n	8012b0a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012afc:	4b09      	ldr	r3, [pc, #36]	@ (8012b24 <tcpip_thread+0x5c>)
 8012afe:	2291      	movs	r2, #145	@ 0x91
 8012b00:	4909      	ldr	r1, [pc, #36]	@ (8012b28 <tcpip_thread+0x60>)
 8012b02:	480a      	ldr	r0, [pc, #40]	@ (8012b2c <tcpip_thread+0x64>)
 8012b04:	f00d f872 	bl	801fbec <iprintf>
      continue;
 8012b08:	e003      	b.n	8012b12 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f000 f80f 	bl	8012b30 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012b12:	e7ea      	b.n	8012aea <tcpip_thread+0x22>
 8012b14:	200270b0 	.word	0x200270b0
 8012b18:	200270a4 	.word	0x200270a4
 8012b1c:	200270a8 	.word	0x200270a8
 8012b20:	200270ac 	.word	0x200270ac
 8012b24:	08021750 	.word	0x08021750
 8012b28:	08021780 	.word	0x08021780
 8012b2c:	080217a0 	.word	0x080217a0

08012b30 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	2b02      	cmp	r3, #2
 8012b3e:	d026      	beq.n	8012b8e <tcpip_thread_handle_msg+0x5e>
 8012b40:	2b02      	cmp	r3, #2
 8012b42:	dc2b      	bgt.n	8012b9c <tcpip_thread_handle_msg+0x6c>
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d002      	beq.n	8012b4e <tcpip_thread_handle_msg+0x1e>
 8012b48:	2b01      	cmp	r3, #1
 8012b4a:	d015      	beq.n	8012b78 <tcpip_thread_handle_msg+0x48>
 8012b4c:	e026      	b.n	8012b9c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	68db      	ldr	r3, [r3, #12]
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	6850      	ldr	r0, [r2, #4]
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	6892      	ldr	r2, [r2, #8]
 8012b5a:	4611      	mov	r1, r2
 8012b5c:	4798      	blx	r3
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d004      	beq.n	8012b6e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f001 fded 	bl	8014748 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012b6e:	6879      	ldr	r1, [r7, #4]
 8012b70:	2009      	movs	r0, #9
 8012b72:	f000 ff45 	bl	8013a00 <memp_free>
      break;
 8012b76:	e018      	b.n	8012baa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	6892      	ldr	r2, [r2, #8]
 8012b80:	4610      	mov	r0, r2
 8012b82:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012b84:	6879      	ldr	r1, [r7, #4]
 8012b86:	2008      	movs	r0, #8
 8012b88:	f000 ff3a 	bl	8013a00 <memp_free>
      break;
 8012b8c:	e00d      	b.n	8012baa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	6892      	ldr	r2, [r2, #8]
 8012b96:	4610      	mov	r0, r2
 8012b98:	4798      	blx	r3
      break;
 8012b9a:	e006      	b.n	8012baa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012b9c:	4b05      	ldr	r3, [pc, #20]	@ (8012bb4 <tcpip_thread_handle_msg+0x84>)
 8012b9e:	22cf      	movs	r2, #207	@ 0xcf
 8012ba0:	4905      	ldr	r1, [pc, #20]	@ (8012bb8 <tcpip_thread_handle_msg+0x88>)
 8012ba2:	4806      	ldr	r0, [pc, #24]	@ (8012bbc <tcpip_thread_handle_msg+0x8c>)
 8012ba4:	f00d f822 	bl	801fbec <iprintf>
      break;
 8012ba8:	bf00      	nop
  }
}
 8012baa:	bf00      	nop
 8012bac:	3708      	adds	r7, #8
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	08021750 	.word	0x08021750
 8012bb8:	08021780 	.word	0x08021780
 8012bbc:	080217a0 	.word	0x080217a0

08012bc0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b086      	sub	sp, #24
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012bcc:	481a      	ldr	r0, [pc, #104]	@ (8012c38 <tcpip_inpkt+0x78>)
 8012bce:	f00b fc8b 	bl	801e4e8 <sys_mbox_valid>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d105      	bne.n	8012be4 <tcpip_inpkt+0x24>
 8012bd8:	4b18      	ldr	r3, [pc, #96]	@ (8012c3c <tcpip_inpkt+0x7c>)
 8012bda:	22fc      	movs	r2, #252	@ 0xfc
 8012bdc:	4918      	ldr	r1, [pc, #96]	@ (8012c40 <tcpip_inpkt+0x80>)
 8012bde:	4819      	ldr	r0, [pc, #100]	@ (8012c44 <tcpip_inpkt+0x84>)
 8012be0:	f00d f804 	bl	801fbec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012be4:	2009      	movs	r0, #9
 8012be6:	f000 fe8f 	bl	8013908 <memp_malloc>
 8012bea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d102      	bne.n	8012bf8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012bf6:	e01a      	b.n	8012c2e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	68fa      	ldr	r2, [r7, #12]
 8012c02:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	68ba      	ldr	r2, [r7, #8]
 8012c08:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012c10:	6979      	ldr	r1, [r7, #20]
 8012c12:	4809      	ldr	r0, [pc, #36]	@ (8012c38 <tcpip_inpkt+0x78>)
 8012c14:	f00b fbfc 	bl	801e410 <sys_mbox_trypost>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d006      	beq.n	8012c2c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012c1e:	6979      	ldr	r1, [r7, #20]
 8012c20:	2009      	movs	r0, #9
 8012c22:	f000 feed 	bl	8013a00 <memp_free>
    return ERR_MEM;
 8012c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c2a:	e000      	b.n	8012c2e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012c2c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3718      	adds	r7, #24
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	bf00      	nop
 8012c38:	200270ac 	.word	0x200270ac
 8012c3c:	08021750 	.word	0x08021750
 8012c40:	080217c8 	.word	0x080217c8
 8012c44:	080217a0 	.word	0x080217a0

08012c48 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012c58:	f003 0318 	and.w	r3, r3, #24
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d006      	beq.n	8012c6e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012c60:	4a08      	ldr	r2, [pc, #32]	@ (8012c84 <tcpip_input+0x3c>)
 8012c62:	6839      	ldr	r1, [r7, #0]
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7ff ffab 	bl	8012bc0 <tcpip_inpkt>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	e005      	b.n	8012c7a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012c6e:	4a06      	ldr	r2, [pc, #24]	@ (8012c88 <tcpip_input+0x40>)
 8012c70:	6839      	ldr	r1, [r7, #0]
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f7ff ffa4 	bl	8012bc0 <tcpip_inpkt>
 8012c78:	4603      	mov	r3, r0
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	0801e159 	.word	0x0801e159
 8012c88:	0801cf35 	.word	0x0801cf35

08012c8c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012c96:	4819      	ldr	r0, [pc, #100]	@ (8012cfc <tcpip_try_callback+0x70>)
 8012c98:	f00b fc26 	bl	801e4e8 <sys_mbox_valid>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d106      	bne.n	8012cb0 <tcpip_try_callback+0x24>
 8012ca2:	4b17      	ldr	r3, [pc, #92]	@ (8012d00 <tcpip_try_callback+0x74>)
 8012ca4:	f240 125d 	movw	r2, #349	@ 0x15d
 8012ca8:	4916      	ldr	r1, [pc, #88]	@ (8012d04 <tcpip_try_callback+0x78>)
 8012caa:	4817      	ldr	r0, [pc, #92]	@ (8012d08 <tcpip_try_callback+0x7c>)
 8012cac:	f00c ff9e 	bl	801fbec <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012cb0:	2008      	movs	r0, #8
 8012cb2:	f000 fe29 	bl	8013908 <memp_malloc>
 8012cb6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d102      	bne.n	8012cc4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012cbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012cc2:	e017      	b.n	8012cf4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	687a      	ldr	r2, [r7, #4]
 8012cce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	683a      	ldr	r2, [r7, #0]
 8012cd4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012cd6:	68f9      	ldr	r1, [r7, #12]
 8012cd8:	4808      	ldr	r0, [pc, #32]	@ (8012cfc <tcpip_try_callback+0x70>)
 8012cda:	f00b fb99 	bl	801e410 <sys_mbox_trypost>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d006      	beq.n	8012cf2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012ce4:	68f9      	ldr	r1, [r7, #12]
 8012ce6:	2008      	movs	r0, #8
 8012ce8:	f000 fe8a 	bl	8013a00 <memp_free>
    return ERR_MEM;
 8012cec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012cf0:	e000      	b.n	8012cf4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012cf2:	2300      	movs	r3, #0
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3710      	adds	r7, #16
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	200270ac 	.word	0x200270ac
 8012d00:	08021750 	.word	0x08021750
 8012d04:	080217c8 	.word	0x080217c8
 8012d08:	080217a0 	.word	0x080217a0

08012d0c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012d18:	4806      	ldr	r0, [pc, #24]	@ (8012d34 <tcpip_send_msg_wait_sem+0x28>)
 8012d1a:	f00b fcff 	bl	801e71c <sys_mutex_lock>
  fn(apimsg);
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	68b8      	ldr	r0, [r7, #8]
 8012d22:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012d24:	4803      	ldr	r0, [pc, #12]	@ (8012d34 <tcpip_send_msg_wait_sem+0x28>)
 8012d26:	f00b fd08 	bl	801e73a <sys_mutex_unlock>
  return ERR_OK;
 8012d2a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3710      	adds	r7, #16
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	200270b0 	.word	0x200270b0

08012d38 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af02      	add	r7, sp, #8
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012d42:	f000 f872 	bl	8012e2a <lwip_init>

  tcpip_init_done = initfunc;
 8012d46:	4a17      	ldr	r2, [pc, #92]	@ (8012da4 <tcpip_init+0x6c>)
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012d4c:	4a16      	ldr	r2, [pc, #88]	@ (8012da8 <tcpip_init+0x70>)
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012d52:	2106      	movs	r1, #6
 8012d54:	4815      	ldr	r0, [pc, #84]	@ (8012dac <tcpip_init+0x74>)
 8012d56:	f00b fb01 	bl	801e35c <sys_mbox_new>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d006      	beq.n	8012d6e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012d60:	4b13      	ldr	r3, [pc, #76]	@ (8012db0 <tcpip_init+0x78>)
 8012d62:	f240 2261 	movw	r2, #609	@ 0x261
 8012d66:	4913      	ldr	r1, [pc, #76]	@ (8012db4 <tcpip_init+0x7c>)
 8012d68:	4813      	ldr	r0, [pc, #76]	@ (8012db8 <tcpip_init+0x80>)
 8012d6a:	f00c ff3f 	bl	801fbec <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012d6e:	4813      	ldr	r0, [pc, #76]	@ (8012dbc <tcpip_init+0x84>)
 8012d70:	f00b fc9e 	bl	801e6b0 <sys_mutex_new>
 8012d74:	4603      	mov	r3, r0
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d006      	beq.n	8012d88 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8012db0 <tcpip_init+0x78>)
 8012d7c:	f240 2265 	movw	r2, #613	@ 0x265
 8012d80:	490f      	ldr	r1, [pc, #60]	@ (8012dc0 <tcpip_init+0x88>)
 8012d82:	480d      	ldr	r0, [pc, #52]	@ (8012db8 <tcpip_init+0x80>)
 8012d84:	f00c ff32 	bl	801fbec <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012d88:	2318      	movs	r3, #24
 8012d8a:	9300      	str	r3, [sp, #0]
 8012d8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012d90:	2200      	movs	r2, #0
 8012d92:	490c      	ldr	r1, [pc, #48]	@ (8012dc4 <tcpip_init+0x8c>)
 8012d94:	480c      	ldr	r0, [pc, #48]	@ (8012dc8 <tcpip_init+0x90>)
 8012d96:	f00b fcdd 	bl	801e754 <sys_thread_new>
}
 8012d9a:	bf00      	nop
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	200270a4 	.word	0x200270a4
 8012da8:	200270a8 	.word	0x200270a8
 8012dac:	200270ac 	.word	0x200270ac
 8012db0:	08021750 	.word	0x08021750
 8012db4:	080217d8 	.word	0x080217d8
 8012db8:	080217a0 	.word	0x080217a0
 8012dbc:	200270b0 	.word	0x200270b0
 8012dc0:	080217fc 	.word	0x080217fc
 8012dc4:	08012ac9 	.word	0x08012ac9
 8012dc8:	08021820 	.word	0x08021820

08012dcc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	4603      	mov	r3, r0
 8012dd4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012dda:	021b      	lsls	r3, r3, #8
 8012ddc:	b21a      	sxth	r2, r3
 8012dde:	88fb      	ldrh	r3, [r7, #6]
 8012de0:	0a1b      	lsrs	r3, r3, #8
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	b21b      	sxth	r3, r3
 8012de6:	4313      	orrs	r3, r2
 8012de8:	b21b      	sxth	r3, r3
 8012dea:	b29b      	uxth	r3, r3
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	370c      	adds	r7, #12
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b083      	sub	sp, #12
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	061a      	lsls	r2, r3, #24
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	021b      	lsls	r3, r3, #8
 8012e08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012e0c:	431a      	orrs	r2, r3
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	0a1b      	lsrs	r3, r3, #8
 8012e12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012e16:	431a      	orrs	r2, r3
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	0e1b      	lsrs	r3, r3, #24
 8012e1c:	4313      	orrs	r3, r2
}
 8012e1e:	4618      	mov	r0, r3
 8012e20:	370c      	adds	r7, #12
 8012e22:	46bd      	mov	sp, r7
 8012e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e28:	4770      	bx	lr

08012e2a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012e2a:	b580      	push	{r7, lr}
 8012e2c:	b082      	sub	sp, #8
 8012e2e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012e30:	2300      	movs	r3, #0
 8012e32:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8012e34:	f001 ff32 	bl	8014c9c <stats_init>
#if !NO_SYS
  sys_init();
 8012e38:	f00b fc2e 	bl	801e698 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012e3c:	f000 f8d4 	bl	8012fe8 <mem_init>
  memp_init();
 8012e40:	f000 fccc 	bl	80137dc <memp_init>
  pbuf_init();
  netif_init();
 8012e44:	f000 fe06 	bl	8013a54 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012e48:	f008 f940 	bl	801b0cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012e4c:	f001 ff2e 	bl	8014cac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012e50:	f008 f882 	bl	801af58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012e54:	bf00      	nop
 8012e56:	3708      	adds	r7, #8
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012e5c:	b480      	push	{r7}
 8012e5e:	b083      	sub	sp, #12
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012e66:	4b05      	ldr	r3, [pc, #20]	@ (8012e7c <ptr_to_mem+0x20>)
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	88fb      	ldrh	r3, [r7, #6]
 8012e6c:	4413      	add	r3, r2
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	370c      	adds	r7, #12
 8012e72:	46bd      	mov	sp, r7
 8012e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e78:	4770      	bx	lr
 8012e7a:	bf00      	nop
 8012e7c:	200270cc 	.word	0x200270cc

08012e80 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012e80:	b480      	push	{r7}
 8012e82:	b083      	sub	sp, #12
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012e88:	4b05      	ldr	r3, [pc, #20]	@ (8012ea0 <mem_to_ptr+0x20>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	687a      	ldr	r2, [r7, #4]
 8012e8e:	1ad3      	subs	r3, r2, r3
 8012e90:	b29b      	uxth	r3, r3
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	370c      	adds	r7, #12
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
 8012e9e:	bf00      	nop
 8012ea0:	200270cc 	.word	0x200270cc

08012ea4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012ea4:	b590      	push	{r4, r7, lr}
 8012ea6:	b085      	sub	sp, #20
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012eac:	4b45      	ldr	r3, [pc, #276]	@ (8012fc4 <plug_holes+0x120>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	429a      	cmp	r2, r3
 8012eb4:	d206      	bcs.n	8012ec4 <plug_holes+0x20>
 8012eb6:	4b44      	ldr	r3, [pc, #272]	@ (8012fc8 <plug_holes+0x124>)
 8012eb8:	f240 12df 	movw	r2, #479	@ 0x1df
 8012ebc:	4943      	ldr	r1, [pc, #268]	@ (8012fcc <plug_holes+0x128>)
 8012ebe:	4844      	ldr	r0, [pc, #272]	@ (8012fd0 <plug_holes+0x12c>)
 8012ec0:	f00c fe94 	bl	801fbec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012ec4:	4b43      	ldr	r3, [pc, #268]	@ (8012fd4 <plug_holes+0x130>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	687a      	ldr	r2, [r7, #4]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d306      	bcc.n	8012edc <plug_holes+0x38>
 8012ece:	4b3e      	ldr	r3, [pc, #248]	@ (8012fc8 <plug_holes+0x124>)
 8012ed0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012ed4:	4940      	ldr	r1, [pc, #256]	@ (8012fd8 <plug_holes+0x134>)
 8012ed6:	483e      	ldr	r0, [pc, #248]	@ (8012fd0 <plug_holes+0x12c>)
 8012ed8:	f00c fe88 	bl	801fbec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	791b      	ldrb	r3, [r3, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d006      	beq.n	8012ef2 <plug_holes+0x4e>
 8012ee4:	4b38      	ldr	r3, [pc, #224]	@ (8012fc8 <plug_holes+0x124>)
 8012ee6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012eea:	493c      	ldr	r1, [pc, #240]	@ (8012fdc <plug_holes+0x138>)
 8012eec:	4838      	ldr	r0, [pc, #224]	@ (8012fd0 <plug_holes+0x12c>)
 8012eee:	f00c fe7d 	bl	801fbec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	881b      	ldrh	r3, [r3, #0]
 8012ef6:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012efa:	d906      	bls.n	8012f0a <plug_holes+0x66>
 8012efc:	4b32      	ldr	r3, [pc, #200]	@ (8012fc8 <plug_holes+0x124>)
 8012efe:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012f02:	4937      	ldr	r1, [pc, #220]	@ (8012fe0 <plug_holes+0x13c>)
 8012f04:	4832      	ldr	r0, [pc, #200]	@ (8012fd0 <plug_holes+0x12c>)
 8012f06:	f00c fe71 	bl	801fbec <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	881b      	ldrh	r3, [r3, #0]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7ff ffa4 	bl	8012e5c <ptr_to_mem>
 8012f14:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d024      	beq.n	8012f68 <plug_holes+0xc4>
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	791b      	ldrb	r3, [r3, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d120      	bne.n	8012f68 <plug_holes+0xc4>
 8012f26:	4b2b      	ldr	r3, [pc, #172]	@ (8012fd4 <plug_holes+0x130>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	68fa      	ldr	r2, [r7, #12]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d01b      	beq.n	8012f68 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012f30:	4b2c      	ldr	r3, [pc, #176]	@ (8012fe4 <plug_holes+0x140>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	68fa      	ldr	r2, [r7, #12]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d102      	bne.n	8012f40 <plug_holes+0x9c>
      lfree = mem;
 8012f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8012fe4 <plug_holes+0x140>)
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	881a      	ldrh	r2, [r3, #0]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	881b      	ldrh	r3, [r3, #0]
 8012f4c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012f50:	d00a      	beq.n	8012f68 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	881b      	ldrh	r3, [r3, #0]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7ff ff80 	bl	8012e5c <ptr_to_mem>
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f7ff ff8e 	bl	8012e80 <mem_to_ptr>
 8012f64:	4603      	mov	r3, r0
 8012f66:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	885b      	ldrh	r3, [r3, #2]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7ff ff75 	bl	8012e5c <ptr_to_mem>
 8012f72:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012f74:	68ba      	ldr	r2, [r7, #8]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d01f      	beq.n	8012fbc <plug_holes+0x118>
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	791b      	ldrb	r3, [r3, #4]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d11b      	bne.n	8012fbc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012f84:	4b17      	ldr	r3, [pc, #92]	@ (8012fe4 <plug_holes+0x140>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	687a      	ldr	r2, [r7, #4]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d102      	bne.n	8012f94 <plug_holes+0xf0>
      lfree = pmem;
 8012f8e:	4a15      	ldr	r2, [pc, #84]	@ (8012fe4 <plug_holes+0x140>)
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	881a      	ldrh	r2, [r3, #0]
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8012fa4:	d00a      	beq.n	8012fbc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	881b      	ldrh	r3, [r3, #0]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff ff56 	bl	8012e5c <ptr_to_mem>
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	68b8      	ldr	r0, [r7, #8]
 8012fb4:	f7ff ff64 	bl	8012e80 <mem_to_ptr>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012fbc:	bf00      	nop
 8012fbe:	3714      	adds	r7, #20
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd90      	pop	{r4, r7, pc}
 8012fc4:	200270cc 	.word	0x200270cc
 8012fc8:	08021830 	.word	0x08021830
 8012fcc:	08021860 	.word	0x08021860
 8012fd0:	08021878 	.word	0x08021878
 8012fd4:	200270d0 	.word	0x200270d0
 8012fd8:	080218a0 	.word	0x080218a0
 8012fdc:	080218bc 	.word	0x080218bc
 8012fe0:	080218d8 	.word	0x080218d8
 8012fe4:	200270d8 	.word	0x200270d8

08012fe8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012fee:	4b1f      	ldr	r3, [pc, #124]	@ (801306c <mem_init+0x84>)
 8012ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8013070 <mem_init+0x88>)
 8012ff2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012ff4:	4b1d      	ldr	r3, [pc, #116]	@ (801306c <mem_init+0x84>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013000:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2200      	movs	r2, #0
 8013006:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801300e:	f44f 40c8 	mov.w	r0, #25600	@ 0x6400
 8013012:	f7ff ff23 	bl	8012e5c <ptr_to_mem>
 8013016:	4603      	mov	r3, r0
 8013018:	4a16      	ldr	r2, [pc, #88]	@ (8013074 <mem_init+0x8c>)
 801301a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801301c:	4b15      	ldr	r3, [pc, #84]	@ (8013074 <mem_init+0x8c>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2201      	movs	r2, #1
 8013022:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013024:	4b13      	ldr	r3, [pc, #76]	@ (8013074 <mem_init+0x8c>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 801302c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801302e:	4b11      	ldr	r3, [pc, #68]	@ (8013074 <mem_init+0x8c>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013036:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013038:	4b0c      	ldr	r3, [pc, #48]	@ (801306c <mem_init+0x84>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	4a0e      	ldr	r2, [pc, #56]	@ (8013078 <mem_init+0x90>)
 801303e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013040:	4b0e      	ldr	r3, [pc, #56]	@ (801307c <mem_init+0x94>)
 8013042:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013046:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801304a:	480d      	ldr	r0, [pc, #52]	@ (8013080 <mem_init+0x98>)
 801304c:	f00b fb30 	bl	801e6b0 <sys_mutex_new>
 8013050:	4603      	mov	r3, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d006      	beq.n	8013064 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013056:	4b0b      	ldr	r3, [pc, #44]	@ (8013084 <mem_init+0x9c>)
 8013058:	f240 221f 	movw	r2, #543	@ 0x21f
 801305c:	490a      	ldr	r1, [pc, #40]	@ (8013088 <mem_init+0xa0>)
 801305e:	480b      	ldr	r0, [pc, #44]	@ (801308c <mem_init+0xa4>)
 8013060:	f00c fdc4 	bl	801fbec <iprintf>
  }
}
 8013064:	bf00      	nop
 8013066:	3708      	adds	r7, #8
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}
 801306c:	200270cc 	.word	0x200270cc
 8013070:	20048000 	.word	0x20048000
 8013074:	200270d0 	.word	0x200270d0
 8013078:	200270d8 	.word	0x200270d8
 801307c:	2002d2b0 	.word	0x2002d2b0
 8013080:	200270d4 	.word	0x200270d4
 8013084:	08021830 	.word	0x08021830
 8013088:	08021904 	.word	0x08021904
 801308c:	08021878 	.word	0x08021878

08013090 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f7ff fef1 	bl	8012e80 <mem_to_ptr>
 801309e:	4603      	mov	r3, r0
 80130a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	881b      	ldrh	r3, [r3, #0]
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7ff fed8 	bl	8012e5c <ptr_to_mem>
 80130ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	885b      	ldrh	r3, [r3, #2]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7ff fed2 	bl	8012e5c <ptr_to_mem>
 80130b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80130c2:	d818      	bhi.n	80130f6 <mem_link_valid+0x66>
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	885b      	ldrh	r3, [r3, #2]
 80130c8:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80130cc:	d813      	bhi.n	80130f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80130d2:	8afa      	ldrh	r2, [r7, #22]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d004      	beq.n	80130e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	881b      	ldrh	r3, [r3, #0]
 80130dc:	8afa      	ldrh	r2, [r7, #22]
 80130de:	429a      	cmp	r2, r3
 80130e0:	d109      	bne.n	80130f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80130e2:	4b08      	ldr	r3, [pc, #32]	@ (8013104 <mem_link_valid+0x74>)
 80130e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80130e6:	693a      	ldr	r2, [r7, #16]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d006      	beq.n	80130fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	885b      	ldrh	r3, [r3, #2]
 80130f0:	8afa      	ldrh	r2, [r7, #22]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d001      	beq.n	80130fa <mem_link_valid+0x6a>
    return 0;
 80130f6:	2300      	movs	r3, #0
 80130f8:	e000      	b.n	80130fc <mem_link_valid+0x6c>
  }
  return 1;
 80130fa:	2301      	movs	r3, #1
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3718      	adds	r7, #24
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	200270d0 	.word	0x200270d0

08013108 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b088      	sub	sp, #32
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	f000 80a2 	beq.w	801325c <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f003 0303 	and.w	r3, r3, #3
 801311e:	2b00      	cmp	r3, #0
 8013120:	d015      	beq.n	801314e <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013122:	4b50      	ldr	r3, [pc, #320]	@ (8013264 <mem_free+0x15c>)
 8013124:	f240 2273 	movw	r2, #627	@ 0x273
 8013128:	494f      	ldr	r1, [pc, #316]	@ (8013268 <mem_free+0x160>)
 801312a:	4850      	ldr	r0, [pc, #320]	@ (801326c <mem_free+0x164>)
 801312c:	f00c fd5e 	bl	801fbec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013130:	f00b fb30 	bl	801e794 <sys_arch_protect>
 8013134:	60f8      	str	r0, [r7, #12]
 8013136:	4b4e      	ldr	r3, [pc, #312]	@ (8013270 <mem_free+0x168>)
 8013138:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801313c:	3301      	adds	r3, #1
 801313e:	b29a      	uxth	r2, r3
 8013140:	4b4b      	ldr	r3, [pc, #300]	@ (8013270 <mem_free+0x168>)
 8013142:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013146:	68f8      	ldr	r0, [r7, #12]
 8013148:	f00b fb32 	bl	801e7b0 <sys_arch_unprotect>
    return;
 801314c:	e087      	b.n	801325e <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	3b08      	subs	r3, #8
 8013152:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013154:	4b47      	ldr	r3, [pc, #284]	@ (8013274 <mem_free+0x16c>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	69fa      	ldr	r2, [r7, #28]
 801315a:	429a      	cmp	r2, r3
 801315c:	d306      	bcc.n	801316c <mem_free+0x64>
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f103 020c 	add.w	r2, r3, #12
 8013164:	4b44      	ldr	r3, [pc, #272]	@ (8013278 <mem_free+0x170>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	429a      	cmp	r2, r3
 801316a:	d915      	bls.n	8013198 <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801316c:	4b3d      	ldr	r3, [pc, #244]	@ (8013264 <mem_free+0x15c>)
 801316e:	f240 227f 	movw	r2, #639	@ 0x27f
 8013172:	4942      	ldr	r1, [pc, #264]	@ (801327c <mem_free+0x174>)
 8013174:	483d      	ldr	r0, [pc, #244]	@ (801326c <mem_free+0x164>)
 8013176:	f00c fd39 	bl	801fbec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801317a:	f00b fb0b 	bl	801e794 <sys_arch_protect>
 801317e:	6138      	str	r0, [r7, #16]
 8013180:	4b3b      	ldr	r3, [pc, #236]	@ (8013270 <mem_free+0x168>)
 8013182:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013186:	3301      	adds	r3, #1
 8013188:	b29a      	uxth	r2, r3
 801318a:	4b39      	ldr	r3, [pc, #228]	@ (8013270 <mem_free+0x168>)
 801318c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013190:	6938      	ldr	r0, [r7, #16]
 8013192:	f00b fb0d 	bl	801e7b0 <sys_arch_unprotect>
    return;
 8013196:	e062      	b.n	801325e <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013198:	4839      	ldr	r0, [pc, #228]	@ (8013280 <mem_free+0x178>)
 801319a:	f00b fabf 	bl	801e71c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801319e:	69fb      	ldr	r3, [r7, #28]
 80131a0:	791b      	ldrb	r3, [r3, #4]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d118      	bne.n	80131d8 <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80131a6:	4b2f      	ldr	r3, [pc, #188]	@ (8013264 <mem_free+0x15c>)
 80131a8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80131ac:	4935      	ldr	r1, [pc, #212]	@ (8013284 <mem_free+0x17c>)
 80131ae:	482f      	ldr	r0, [pc, #188]	@ (801326c <mem_free+0x164>)
 80131b0:	f00c fd1c 	bl	801fbec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80131b4:	4832      	ldr	r0, [pc, #200]	@ (8013280 <mem_free+0x178>)
 80131b6:	f00b fac0 	bl	801e73a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80131ba:	f00b faeb 	bl	801e794 <sys_arch_protect>
 80131be:	6178      	str	r0, [r7, #20]
 80131c0:	4b2b      	ldr	r3, [pc, #172]	@ (8013270 <mem_free+0x168>)
 80131c2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80131c6:	3301      	adds	r3, #1
 80131c8:	b29a      	uxth	r2, r3
 80131ca:	4b29      	ldr	r3, [pc, #164]	@ (8013270 <mem_free+0x168>)
 80131cc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80131d0:	6978      	ldr	r0, [r7, #20]
 80131d2:	f00b faed 	bl	801e7b0 <sys_arch_unprotect>
    return;
 80131d6:	e042      	b.n	801325e <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 80131d8:	69f8      	ldr	r0, [r7, #28]
 80131da:	f7ff ff59 	bl	8013090 <mem_link_valid>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d118      	bne.n	8013216 <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80131e4:	4b1f      	ldr	r3, [pc, #124]	@ (8013264 <mem_free+0x15c>)
 80131e6:	f240 2295 	movw	r2, #661	@ 0x295
 80131ea:	4927      	ldr	r1, [pc, #156]	@ (8013288 <mem_free+0x180>)
 80131ec:	481f      	ldr	r0, [pc, #124]	@ (801326c <mem_free+0x164>)
 80131ee:	f00c fcfd 	bl	801fbec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80131f2:	4823      	ldr	r0, [pc, #140]	@ (8013280 <mem_free+0x178>)
 80131f4:	f00b faa1 	bl	801e73a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80131f8:	f00b facc 	bl	801e794 <sys_arch_protect>
 80131fc:	61b8      	str	r0, [r7, #24]
 80131fe:	4b1c      	ldr	r3, [pc, #112]	@ (8013270 <mem_free+0x168>)
 8013200:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013204:	3301      	adds	r3, #1
 8013206:	b29a      	uxth	r2, r3
 8013208:	4b19      	ldr	r3, [pc, #100]	@ (8013270 <mem_free+0x168>)
 801320a:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 801320e:	69b8      	ldr	r0, [r7, #24]
 8013210:	f00b face 	bl	801e7b0 <sys_arch_unprotect>
    return;
 8013214:	e023      	b.n	801325e <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	2200      	movs	r2, #0
 801321a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801321c:	4b1b      	ldr	r3, [pc, #108]	@ (801328c <mem_free+0x184>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	69fa      	ldr	r2, [r7, #28]
 8013222:	429a      	cmp	r2, r3
 8013224:	d202      	bcs.n	801322c <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013226:	4a19      	ldr	r2, [pc, #100]	@ (801328c <mem_free+0x184>)
 8013228:	69fb      	ldr	r3, [r7, #28]
 801322a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801322c:	4b10      	ldr	r3, [pc, #64]	@ (8013270 <mem_free+0x168>)
 801322e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013232:	4b10      	ldr	r3, [pc, #64]	@ (8013274 <mem_free+0x16c>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	69f9      	ldr	r1, [r7, #28]
 8013238:	1acb      	subs	r3, r1, r3
 801323a:	b299      	uxth	r1, r3
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	881b      	ldrh	r3, [r3, #0]
 8013240:	1acb      	subs	r3, r1, r3
 8013242:	b29b      	uxth	r3, r3
 8013244:	4413      	add	r3, r2
 8013246:	b29a      	uxth	r2, r3
 8013248:	4b09      	ldr	r3, [pc, #36]	@ (8013270 <mem_free+0x168>)
 801324a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801324e:	69f8      	ldr	r0, [r7, #28]
 8013250:	f7ff fe28 	bl	8012ea4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013254:	480a      	ldr	r0, [pc, #40]	@ (8013280 <mem_free+0x178>)
 8013256:	f00b fa70 	bl	801e73a <sys_mutex_unlock>
 801325a:	e000      	b.n	801325e <mem_free+0x156>
    return;
 801325c:	bf00      	nop
}
 801325e:	3720      	adds	r7, #32
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	08021830 	.word	0x08021830
 8013268:	08021920 	.word	0x08021920
 801326c:	08021878 	.word	0x08021878
 8013270:	2002d2b0 	.word	0x2002d2b0
 8013274:	200270cc 	.word	0x200270cc
 8013278:	200270d0 	.word	0x200270d0
 801327c:	08021944 	.word	0x08021944
 8013280:	200270d4 	.word	0x200270d4
 8013284:	08021960 	.word	0x08021960
 8013288:	08021988 	.word	0x08021988
 801328c:	200270d8 	.word	0x200270d8

08013290 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b088      	sub	sp, #32
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	460b      	mov	r3, r1
 801329a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801329c:	887b      	ldrh	r3, [r7, #2]
 801329e:	3303      	adds	r3, #3
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	f023 0303 	bic.w	r3, r3, #3
 80132a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80132a8:	8bfb      	ldrh	r3, [r7, #30]
 80132aa:	2b0b      	cmp	r3, #11
 80132ac:	d801      	bhi.n	80132b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80132ae:	230c      	movs	r3, #12
 80132b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80132b2:	8bfb      	ldrh	r3, [r7, #30]
 80132b4:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80132b8:	d803      	bhi.n	80132c2 <mem_trim+0x32>
 80132ba:	8bfa      	ldrh	r2, [r7, #30]
 80132bc:	887b      	ldrh	r3, [r7, #2]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d201      	bcs.n	80132c6 <mem_trim+0x36>
    return NULL;
 80132c2:	2300      	movs	r3, #0
 80132c4:	e0f8      	b.n	80134b8 <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80132c6:	4b7e      	ldr	r3, [pc, #504]	@ (80134c0 <mem_trim+0x230>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	687a      	ldr	r2, [r7, #4]
 80132cc:	429a      	cmp	r2, r3
 80132ce:	d304      	bcc.n	80132da <mem_trim+0x4a>
 80132d0:	4b7c      	ldr	r3, [pc, #496]	@ (80134c4 <mem_trim+0x234>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	687a      	ldr	r2, [r7, #4]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	d306      	bcc.n	80132e8 <mem_trim+0x58>
 80132da:	4b7b      	ldr	r3, [pc, #492]	@ (80134c8 <mem_trim+0x238>)
 80132dc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80132e0:	497a      	ldr	r1, [pc, #488]	@ (80134cc <mem_trim+0x23c>)
 80132e2:	487b      	ldr	r0, [pc, #492]	@ (80134d0 <mem_trim+0x240>)
 80132e4:	f00c fc82 	bl	801fbec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80132e8:	4b75      	ldr	r3, [pc, #468]	@ (80134c0 <mem_trim+0x230>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d304      	bcc.n	80132fc <mem_trim+0x6c>
 80132f2:	4b74      	ldr	r3, [pc, #464]	@ (80134c4 <mem_trim+0x234>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	429a      	cmp	r2, r3
 80132fa:	d30f      	bcc.n	801331c <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80132fc:	f00b fa4a 	bl	801e794 <sys_arch_protect>
 8013300:	60b8      	str	r0, [r7, #8]
 8013302:	4b74      	ldr	r3, [pc, #464]	@ (80134d4 <mem_trim+0x244>)
 8013304:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013308:	3301      	adds	r3, #1
 801330a:	b29a      	uxth	r2, r3
 801330c:	4b71      	ldr	r3, [pc, #452]	@ (80134d4 <mem_trim+0x244>)
 801330e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013312:	68b8      	ldr	r0, [r7, #8]
 8013314:	f00b fa4c 	bl	801e7b0 <sys_arch_unprotect>
    return rmem;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	e0cd      	b.n	80134b8 <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	3b08      	subs	r3, #8
 8013320:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013322:	69b8      	ldr	r0, [r7, #24]
 8013324:	f7ff fdac 	bl	8012e80 <mem_to_ptr>
 8013328:	4603      	mov	r3, r0
 801332a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801332c:	69bb      	ldr	r3, [r7, #24]
 801332e:	881a      	ldrh	r2, [r3, #0]
 8013330:	8afb      	ldrh	r3, [r7, #22]
 8013332:	1ad3      	subs	r3, r2, r3
 8013334:	b29b      	uxth	r3, r3
 8013336:	3b08      	subs	r3, #8
 8013338:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801333a:	8bfa      	ldrh	r2, [r7, #30]
 801333c:	8abb      	ldrh	r3, [r7, #20]
 801333e:	429a      	cmp	r2, r3
 8013340:	d906      	bls.n	8013350 <mem_trim+0xc0>
 8013342:	4b61      	ldr	r3, [pc, #388]	@ (80134c8 <mem_trim+0x238>)
 8013344:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013348:	4963      	ldr	r1, [pc, #396]	@ (80134d8 <mem_trim+0x248>)
 801334a:	4861      	ldr	r0, [pc, #388]	@ (80134d0 <mem_trim+0x240>)
 801334c:	f00c fc4e 	bl	801fbec <iprintf>
  if (newsize > size) {
 8013350:	8bfa      	ldrh	r2, [r7, #30]
 8013352:	8abb      	ldrh	r3, [r7, #20]
 8013354:	429a      	cmp	r2, r3
 8013356:	d901      	bls.n	801335c <mem_trim+0xcc>
    /* not supported */
    return NULL;
 8013358:	2300      	movs	r3, #0
 801335a:	e0ad      	b.n	80134b8 <mem_trim+0x228>
  }
  if (newsize == size) {
 801335c:	8bfa      	ldrh	r2, [r7, #30]
 801335e:	8abb      	ldrh	r3, [r7, #20]
 8013360:	429a      	cmp	r2, r3
 8013362:	d101      	bne.n	8013368 <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	e0a7      	b.n	80134b8 <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013368:	485c      	ldr	r0, [pc, #368]	@ (80134dc <mem_trim+0x24c>)
 801336a:	f00b f9d7 	bl	801e71c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801336e:	69bb      	ldr	r3, [r7, #24]
 8013370:	881b      	ldrh	r3, [r3, #0]
 8013372:	4618      	mov	r0, r3
 8013374:	f7ff fd72 	bl	8012e5c <ptr_to_mem>
 8013378:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801337a:	693b      	ldr	r3, [r7, #16]
 801337c:	791b      	ldrb	r3, [r3, #4]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d14b      	bne.n	801341a <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013382:	69bb      	ldr	r3, [r7, #24]
 8013384:	881b      	ldrh	r3, [r3, #0]
 8013386:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801338a:	d106      	bne.n	801339a <mem_trim+0x10a>
 801338c:	4b4e      	ldr	r3, [pc, #312]	@ (80134c8 <mem_trim+0x238>)
 801338e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8013392:	4953      	ldr	r1, [pc, #332]	@ (80134e0 <mem_trim+0x250>)
 8013394:	484e      	ldr	r0, [pc, #312]	@ (80134d0 <mem_trim+0x240>)
 8013396:	f00c fc29 	bl	801fbec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	881b      	ldrh	r3, [r3, #0]
 801339e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80133a0:	8afa      	ldrh	r2, [r7, #22]
 80133a2:	8bfb      	ldrh	r3, [r7, #30]
 80133a4:	4413      	add	r3, r2
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	3308      	adds	r3, #8
 80133aa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80133ac:	4b4d      	ldr	r3, [pc, #308]	@ (80134e4 <mem_trim+0x254>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	693a      	ldr	r2, [r7, #16]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d106      	bne.n	80133c4 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 80133b6:	89fb      	ldrh	r3, [r7, #14]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7ff fd4f 	bl	8012e5c <ptr_to_mem>
 80133be:	4603      	mov	r3, r0
 80133c0:	4a48      	ldr	r2, [pc, #288]	@ (80134e4 <mem_trim+0x254>)
 80133c2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80133c4:	89fb      	ldrh	r3, [r7, #14]
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7ff fd48 	bl	8012e5c <ptr_to_mem>
 80133cc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	2200      	movs	r2, #0
 80133d2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	89ba      	ldrh	r2, [r7, #12]
 80133d8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	8afa      	ldrh	r2, [r7, #22]
 80133de:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80133e0:	69bb      	ldr	r3, [r7, #24]
 80133e2:	89fa      	ldrh	r2, [r7, #14]
 80133e4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	881b      	ldrh	r3, [r3, #0]
 80133ea:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80133ee:	d007      	beq.n	8013400 <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	881b      	ldrh	r3, [r3, #0]
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7ff fd31 	bl	8012e5c <ptr_to_mem>
 80133fa:	4602      	mov	r2, r0
 80133fc:	89fb      	ldrh	r3, [r7, #14]
 80133fe:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013400:	4b34      	ldr	r3, [pc, #208]	@ (80134d4 <mem_trim+0x244>)
 8013402:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013406:	8bf9      	ldrh	r1, [r7, #30]
 8013408:	8abb      	ldrh	r3, [r7, #20]
 801340a:	1acb      	subs	r3, r1, r3
 801340c:	b29b      	uxth	r3, r3
 801340e:	4413      	add	r3, r2
 8013410:	b29a      	uxth	r2, r3
 8013412:	4b30      	ldr	r3, [pc, #192]	@ (80134d4 <mem_trim+0x244>)
 8013414:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013418:	e04a      	b.n	80134b0 <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801341a:	8bfb      	ldrh	r3, [r7, #30]
 801341c:	f103 0214 	add.w	r2, r3, #20
 8013420:	8abb      	ldrh	r3, [r7, #20]
 8013422:	429a      	cmp	r2, r3
 8013424:	d844      	bhi.n	80134b0 <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013426:	8afa      	ldrh	r2, [r7, #22]
 8013428:	8bfb      	ldrh	r3, [r7, #30]
 801342a:	4413      	add	r3, r2
 801342c:	b29b      	uxth	r3, r3
 801342e:	3308      	adds	r3, #8
 8013430:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	881b      	ldrh	r3, [r3, #0]
 8013436:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801343a:	d106      	bne.n	801344a <mem_trim+0x1ba>
 801343c:	4b22      	ldr	r3, [pc, #136]	@ (80134c8 <mem_trim+0x238>)
 801343e:	f240 3216 	movw	r2, #790	@ 0x316
 8013442:	4927      	ldr	r1, [pc, #156]	@ (80134e0 <mem_trim+0x250>)
 8013444:	4822      	ldr	r0, [pc, #136]	@ (80134d0 <mem_trim+0x240>)
 8013446:	f00c fbd1 	bl	801fbec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801344a:	89fb      	ldrh	r3, [r7, #14]
 801344c:	4618      	mov	r0, r3
 801344e:	f7ff fd05 	bl	8012e5c <ptr_to_mem>
 8013452:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013454:	4b23      	ldr	r3, [pc, #140]	@ (80134e4 <mem_trim+0x254>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	693a      	ldr	r2, [r7, #16]
 801345a:	429a      	cmp	r2, r3
 801345c:	d202      	bcs.n	8013464 <mem_trim+0x1d4>
      lfree = mem2;
 801345e:	4a21      	ldr	r2, [pc, #132]	@ (80134e4 <mem_trim+0x254>)
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	2200      	movs	r2, #0
 8013468:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	881a      	ldrh	r2, [r3, #0]
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	8afa      	ldrh	r2, [r7, #22]
 8013476:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	89fa      	ldrh	r2, [r7, #14]
 801347c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	881b      	ldrh	r3, [r3, #0]
 8013482:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013486:	d007      	beq.n	8013498 <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	881b      	ldrh	r3, [r3, #0]
 801348c:	4618      	mov	r0, r3
 801348e:	f7ff fce5 	bl	8012e5c <ptr_to_mem>
 8013492:	4602      	mov	r2, r0
 8013494:	89fb      	ldrh	r3, [r7, #14]
 8013496:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013498:	4b0e      	ldr	r3, [pc, #56]	@ (80134d4 <mem_trim+0x244>)
 801349a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 801349e:	8bf9      	ldrh	r1, [r7, #30]
 80134a0:	8abb      	ldrh	r3, [r7, #20]
 80134a2:	1acb      	subs	r3, r1, r3
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	4413      	add	r3, r2
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	4b0a      	ldr	r3, [pc, #40]	@ (80134d4 <mem_trim+0x244>)
 80134ac:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80134b0:	480a      	ldr	r0, [pc, #40]	@ (80134dc <mem_trim+0x24c>)
 80134b2:	f00b f942 	bl	801e73a <sys_mutex_unlock>
  return rmem;
 80134b6:	687b      	ldr	r3, [r7, #4]
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3720      	adds	r7, #32
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	200270cc 	.word	0x200270cc
 80134c4:	200270d0 	.word	0x200270d0
 80134c8:	08021830 	.word	0x08021830
 80134cc:	080219bc 	.word	0x080219bc
 80134d0:	08021878 	.word	0x08021878
 80134d4:	2002d2b0 	.word	0x2002d2b0
 80134d8:	080219d4 	.word	0x080219d4
 80134dc:	200270d4 	.word	0x200270d4
 80134e0:	080219f4 	.word	0x080219f4
 80134e4:	200270d8 	.word	0x200270d8

080134e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80134e8:	b590      	push	{r4, r7, lr}
 80134ea:	b089      	sub	sp, #36	@ 0x24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	4603      	mov	r3, r0
 80134f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80134f2:	88fb      	ldrh	r3, [r7, #6]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d101      	bne.n	80134fc <mem_malloc+0x14>
    return NULL;
 80134f8:	2300      	movs	r3, #0
 80134fa:	e121      	b.n	8013740 <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80134fc:	88fb      	ldrh	r3, [r7, #6]
 80134fe:	3303      	adds	r3, #3
 8013500:	b29b      	uxth	r3, r3
 8013502:	f023 0303 	bic.w	r3, r3, #3
 8013506:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013508:	8bbb      	ldrh	r3, [r7, #28]
 801350a:	2b0b      	cmp	r3, #11
 801350c:	d801      	bhi.n	8013512 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801350e:	230c      	movs	r3, #12
 8013510:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013512:	8bbb      	ldrh	r3, [r7, #28]
 8013514:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013518:	d803      	bhi.n	8013522 <mem_malloc+0x3a>
 801351a:	8bba      	ldrh	r2, [r7, #28]
 801351c:	88fb      	ldrh	r3, [r7, #6]
 801351e:	429a      	cmp	r2, r3
 8013520:	d201      	bcs.n	8013526 <mem_malloc+0x3e>
    return NULL;
 8013522:	2300      	movs	r3, #0
 8013524:	e10c      	b.n	8013740 <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013526:	4888      	ldr	r0, [pc, #544]	@ (8013748 <mem_malloc+0x260>)
 8013528:	f00b f8f8 	bl	801e71c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801352c:	4b87      	ldr	r3, [pc, #540]	@ (801374c <mem_malloc+0x264>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff fca5 	bl	8012e80 <mem_to_ptr>
 8013536:	4603      	mov	r3, r0
 8013538:	83fb      	strh	r3, [r7, #30]
 801353a:	e0ee      	b.n	801371a <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801353c:	8bfb      	ldrh	r3, [r7, #30]
 801353e:	4618      	mov	r0, r3
 8013540:	f7ff fc8c 	bl	8012e5c <ptr_to_mem>
 8013544:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	791b      	ldrb	r3, [r3, #4]
 801354a:	2b00      	cmp	r3, #0
 801354c:	f040 80de 	bne.w	801370c <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	881b      	ldrh	r3, [r3, #0]
 8013554:	461a      	mov	r2, r3
 8013556:	8bfb      	ldrh	r3, [r7, #30]
 8013558:	1ad3      	subs	r3, r2, r3
 801355a:	f1a3 0208 	sub.w	r2, r3, #8
 801355e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013560:	429a      	cmp	r2, r3
 8013562:	f0c0 80d3 	bcc.w	801370c <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	881b      	ldrh	r3, [r3, #0]
 801356a:	461a      	mov	r2, r3
 801356c:	8bfb      	ldrh	r3, [r7, #30]
 801356e:	1ad3      	subs	r3, r2, r3
 8013570:	f1a3 0208 	sub.w	r2, r3, #8
 8013574:	8bbb      	ldrh	r3, [r7, #28]
 8013576:	3314      	adds	r3, #20
 8013578:	429a      	cmp	r2, r3
 801357a:	d34c      	bcc.n	8013616 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801357c:	8bfa      	ldrh	r2, [r7, #30]
 801357e:	8bbb      	ldrh	r3, [r7, #28]
 8013580:	4413      	add	r3, r2
 8013582:	b29b      	uxth	r3, r3
 8013584:	3308      	adds	r3, #8
 8013586:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013588:	8a7b      	ldrh	r3, [r7, #18]
 801358a:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801358e:	d106      	bne.n	801359e <mem_malloc+0xb6>
 8013590:	4b6f      	ldr	r3, [pc, #444]	@ (8013750 <mem_malloc+0x268>)
 8013592:	f240 3287 	movw	r2, #903	@ 0x387
 8013596:	496f      	ldr	r1, [pc, #444]	@ (8013754 <mem_malloc+0x26c>)
 8013598:	486f      	ldr	r0, [pc, #444]	@ (8013758 <mem_malloc+0x270>)
 801359a:	f00c fb27 	bl	801fbec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801359e:	8a7b      	ldrh	r3, [r7, #18]
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7ff fc5b 	bl	8012e5c <ptr_to_mem>
 80135a6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2200      	movs	r2, #0
 80135ac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	881a      	ldrh	r2, [r3, #0]
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	8bfa      	ldrh	r2, [r7, #30]
 80135ba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	8a7a      	ldrh	r2, [r7, #18]
 80135c0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	2201      	movs	r2, #1
 80135c6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	881b      	ldrh	r3, [r3, #0]
 80135cc:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80135d0:	d007      	beq.n	80135e2 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	881b      	ldrh	r3, [r3, #0]
 80135d6:	4618      	mov	r0, r3
 80135d8:	f7ff fc40 	bl	8012e5c <ptr_to_mem>
 80135dc:	4602      	mov	r2, r0
 80135de:	8a7b      	ldrh	r3, [r7, #18]
 80135e0:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80135e2:	4b5e      	ldr	r3, [pc, #376]	@ (801375c <mem_malloc+0x274>)
 80135e4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80135e8:	8bbb      	ldrh	r3, [r7, #28]
 80135ea:	4413      	add	r3, r2
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	3308      	adds	r3, #8
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	4b5a      	ldr	r3, [pc, #360]	@ (801375c <mem_malloc+0x274>)
 80135f4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80135f8:	4b58      	ldr	r3, [pc, #352]	@ (801375c <mem_malloc+0x274>)
 80135fa:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	@ 0xae
 80135fe:	4b57      	ldr	r3, [pc, #348]	@ (801375c <mem_malloc+0x274>)
 8013600:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013604:	429a      	cmp	r2, r3
 8013606:	d227      	bcs.n	8013658 <mem_malloc+0x170>
 8013608:	4b54      	ldr	r3, [pc, #336]	@ (801375c <mem_malloc+0x274>)
 801360a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 801360e:	4b53      	ldr	r3, [pc, #332]	@ (801375c <mem_malloc+0x274>)
 8013610:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 8013614:	e020      	b.n	8013658 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	2201      	movs	r2, #1
 801361a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 801361c:	4b4f      	ldr	r3, [pc, #316]	@ (801375c <mem_malloc+0x274>)
 801361e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	881b      	ldrh	r3, [r3, #0]
 8013626:	4413      	add	r3, r2
 8013628:	b29c      	uxth	r4, r3
 801362a:	6978      	ldr	r0, [r7, #20]
 801362c:	f7ff fc28 	bl	8012e80 <mem_to_ptr>
 8013630:	4603      	mov	r3, r0
 8013632:	1ae3      	subs	r3, r4, r3
 8013634:	b29a      	uxth	r2, r3
 8013636:	4b49      	ldr	r3, [pc, #292]	@ (801375c <mem_malloc+0x274>)
 8013638:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801363c:	4b47      	ldr	r3, [pc, #284]	@ (801375c <mem_malloc+0x274>)
 801363e:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	@ 0xae
 8013642:	4b46      	ldr	r3, [pc, #280]	@ (801375c <mem_malloc+0x274>)
 8013644:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013648:	429a      	cmp	r2, r3
 801364a:	d205      	bcs.n	8013658 <mem_malloc+0x170>
 801364c:	4b43      	ldr	r3, [pc, #268]	@ (801375c <mem_malloc+0x274>)
 801364e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013652:	4b42      	ldr	r3, [pc, #264]	@ (801375c <mem_malloc+0x274>)
 8013654:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013658:	4b3c      	ldr	r3, [pc, #240]	@ (801374c <mem_malloc+0x264>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	697a      	ldr	r2, [r7, #20]
 801365e:	429a      	cmp	r2, r3
 8013660:	d127      	bne.n	80136b2 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 8013662:	4b3a      	ldr	r3, [pc, #232]	@ (801374c <mem_malloc+0x264>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013668:	e005      	b.n	8013676 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	881b      	ldrh	r3, [r3, #0]
 801366e:	4618      	mov	r0, r3
 8013670:	f7ff fbf4 	bl	8012e5c <ptr_to_mem>
 8013674:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	791b      	ldrb	r3, [r3, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d004      	beq.n	8013688 <mem_malloc+0x1a0>
 801367e:	4b38      	ldr	r3, [pc, #224]	@ (8013760 <mem_malloc+0x278>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	69ba      	ldr	r2, [r7, #24]
 8013684:	429a      	cmp	r2, r3
 8013686:	d1f0      	bne.n	801366a <mem_malloc+0x182>
          }
          lfree = cur;
 8013688:	4a30      	ldr	r2, [pc, #192]	@ (801374c <mem_malloc+0x264>)
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801368e:	4b2f      	ldr	r3, [pc, #188]	@ (801374c <mem_malloc+0x264>)
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	4b33      	ldr	r3, [pc, #204]	@ (8013760 <mem_malloc+0x278>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	429a      	cmp	r2, r3
 8013698:	d00b      	beq.n	80136b2 <mem_malloc+0x1ca>
 801369a:	4b2c      	ldr	r3, [pc, #176]	@ (801374c <mem_malloc+0x264>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	791b      	ldrb	r3, [r3, #4]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d006      	beq.n	80136b2 <mem_malloc+0x1ca>
 80136a4:	4b2a      	ldr	r3, [pc, #168]	@ (8013750 <mem_malloc+0x268>)
 80136a6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80136aa:	492e      	ldr	r1, [pc, #184]	@ (8013764 <mem_malloc+0x27c>)
 80136ac:	482a      	ldr	r0, [pc, #168]	@ (8013758 <mem_malloc+0x270>)
 80136ae:	f00c fa9d 	bl	801fbec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80136b2:	4825      	ldr	r0, [pc, #148]	@ (8013748 <mem_malloc+0x260>)
 80136b4:	f00b f841 	bl	801e73a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80136b8:	8bba      	ldrh	r2, [r7, #28]
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	4413      	add	r3, r2
 80136be:	3308      	adds	r3, #8
 80136c0:	4a27      	ldr	r2, [pc, #156]	@ (8013760 <mem_malloc+0x278>)
 80136c2:	6812      	ldr	r2, [r2, #0]
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d906      	bls.n	80136d6 <mem_malloc+0x1ee>
 80136c8:	4b21      	ldr	r3, [pc, #132]	@ (8013750 <mem_malloc+0x268>)
 80136ca:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80136ce:	4926      	ldr	r1, [pc, #152]	@ (8013768 <mem_malloc+0x280>)
 80136d0:	4821      	ldr	r0, [pc, #132]	@ (8013758 <mem_malloc+0x270>)
 80136d2:	f00c fa8b 	bl	801fbec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	f003 0303 	and.w	r3, r3, #3
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d006      	beq.n	80136ee <mem_malloc+0x206>
 80136e0:	4b1b      	ldr	r3, [pc, #108]	@ (8013750 <mem_malloc+0x268>)
 80136e2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80136e6:	4921      	ldr	r1, [pc, #132]	@ (801376c <mem_malloc+0x284>)
 80136e8:	481b      	ldr	r0, [pc, #108]	@ (8013758 <mem_malloc+0x270>)
 80136ea:	f00c fa7f 	bl	801fbec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	f003 0303 	and.w	r3, r3, #3
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d006      	beq.n	8013706 <mem_malloc+0x21e>
 80136f8:	4b15      	ldr	r3, [pc, #84]	@ (8013750 <mem_malloc+0x268>)
 80136fa:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80136fe:	491c      	ldr	r1, [pc, #112]	@ (8013770 <mem_malloc+0x288>)
 8013700:	4815      	ldr	r0, [pc, #84]	@ (8013758 <mem_malloc+0x270>)
 8013702:	f00c fa73 	bl	801fbec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	3308      	adds	r3, #8
 801370a:	e019      	b.n	8013740 <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 801370c:	8bfb      	ldrh	r3, [r7, #30]
 801370e:	4618      	mov	r0, r3
 8013710:	f7ff fba4 	bl	8012e5c <ptr_to_mem>
 8013714:	4603      	mov	r3, r0
 8013716:	881b      	ldrh	r3, [r3, #0]
 8013718:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801371a:	8bfa      	ldrh	r2, [r7, #30]
 801371c:	8bbb      	ldrh	r3, [r7, #28]
 801371e:	f5c3 43c8 	rsb	r3, r3, #25600	@ 0x6400
 8013722:	429a      	cmp	r2, r3
 8013724:	f4ff af0a 	bcc.w	801353c <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8013728:	4b0c      	ldr	r3, [pc, #48]	@ (801375c <mem_malloc+0x274>)
 801372a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 801372e:	3301      	adds	r3, #1
 8013730:	b29a      	uxth	r2, r3
 8013732:	4b0a      	ldr	r3, [pc, #40]	@ (801375c <mem_malloc+0x274>)
 8013734:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013738:	4803      	ldr	r0, [pc, #12]	@ (8013748 <mem_malloc+0x260>)
 801373a:	f00a fffe 	bl	801e73a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801373e:	2300      	movs	r3, #0
}
 8013740:	4618      	mov	r0, r3
 8013742:	3724      	adds	r7, #36	@ 0x24
 8013744:	46bd      	mov	sp, r7
 8013746:	bd90      	pop	{r4, r7, pc}
 8013748:	200270d4 	.word	0x200270d4
 801374c:	200270d8 	.word	0x200270d8
 8013750:	08021830 	.word	0x08021830
 8013754:	080219f4 	.word	0x080219f4
 8013758:	08021878 	.word	0x08021878
 801375c:	2002d2b0 	.word	0x2002d2b0
 8013760:	200270d0 	.word	0x200270d0
 8013764:	08021a08 	.word	0x08021a08
 8013768:	08021a24 	.word	0x08021a24
 801376c:	08021a54 	.word	0x08021a54
 8013770:	08021a84 	.word	0x08021a84

08013774 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013774:	b480      	push	{r7}
 8013776:	b085      	sub	sp, #20
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	2200      	movs	r2, #0
 8013782:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	689b      	ldr	r3, [r3, #8]
 8013788:	3303      	adds	r3, #3
 801378a:	f023 0303 	bic.w	r3, r3, #3
 801378e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013790:	2300      	movs	r3, #0
 8013792:	60fb      	str	r3, [r7, #12]
 8013794:	e011      	b.n	80137ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	68db      	ldr	r3, [r3, #12]
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	68db      	ldr	r3, [r3, #12]
 80137a4:	68ba      	ldr	r2, [r7, #8]
 80137a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	889b      	ldrh	r3, [r3, #4]
 80137ac:	461a      	mov	r2, r3
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	4413      	add	r3, r2
 80137b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	3301      	adds	r3, #1
 80137b8:	60fb      	str	r3, [r7, #12]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	88db      	ldrh	r3, [r3, #6]
 80137be:	461a      	mov	r2, r3
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	4293      	cmp	r3, r2
 80137c4:	dbe7      	blt.n	8013796 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	687a      	ldr	r2, [r7, #4]
 80137cc:	88d2      	ldrh	r2, [r2, #6]
 80137ce:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80137d0:	bf00      	nop
 80137d2:	3714      	adds	r7, #20
 80137d4:	46bd      	mov	sp, r7
 80137d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137da:	4770      	bx	lr

080137dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80137e2:	2300      	movs	r3, #0
 80137e4:	80fb      	strh	r3, [r7, #6]
 80137e6:	e014      	b.n	8013812 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 80137e8:	88fb      	ldrh	r3, [r7, #6]
 80137ea:	4a0e      	ldr	r2, [pc, #56]	@ (8013824 <memp_init+0x48>)
 80137ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7ff ffbf 	bl	8013774 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80137f6:	88fb      	ldrh	r3, [r7, #6]
 80137f8:	4a0a      	ldr	r2, [pc, #40]	@ (8013824 <memp_init+0x48>)
 80137fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80137fe:	88fb      	ldrh	r3, [r7, #6]
 8013800:	6812      	ldr	r2, [r2, #0]
 8013802:	4909      	ldr	r1, [pc, #36]	@ (8013828 <memp_init+0x4c>)
 8013804:	332c      	adds	r3, #44	@ 0x2c
 8013806:	009b      	lsls	r3, r3, #2
 8013808:	440b      	add	r3, r1
 801380a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801380c:	88fb      	ldrh	r3, [r7, #6]
 801380e:	3301      	adds	r3, #1
 8013810:	80fb      	strh	r3, [r7, #6]
 8013812:	88fb      	ldrh	r3, [r7, #6]
 8013814:	2b0c      	cmp	r3, #12
 8013816:	d9e7      	bls.n	80137e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013818:	bf00      	nop
 801381a:	bf00      	nop
 801381c:	3708      	adds	r7, #8
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
 8013822:	bf00      	nop
 8013824:	080248ec 	.word	0x080248ec
 8013828:	2002d2b0 	.word	0x2002d2b0

0801382c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b084      	sub	sp, #16
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013834:	f00a ffae 	bl	801e794 <sys_arch_protect>
 8013838:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d029      	beq.n	801389c <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	68ba      	ldr	r2, [r7, #8]
 801384e:	6812      	ldr	r2, [r2, #0]
 8013850:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	f003 0303 	and.w	r3, r3, #3
 8013858:	2b00      	cmp	r3, #0
 801385a:	d006      	beq.n	801386a <do_memp_malloc_pool+0x3e>
 801385c:	4b16      	ldr	r3, [pc, #88]	@ (80138b8 <do_memp_malloc_pool+0x8c>)
 801385e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013862:	4916      	ldr	r1, [pc, #88]	@ (80138bc <do_memp_malloc_pool+0x90>)
 8013864:	4816      	ldr	r0, [pc, #88]	@ (80138c0 <do_memp_malloc_pool+0x94>)
 8013866:	f00c f9c1 	bl	801fbec <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	889a      	ldrh	r2, [r3, #4]
 8013870:	3201      	adds	r2, #1
 8013872:	b292      	uxth	r2, r2
 8013874:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	889a      	ldrh	r2, [r3, #4]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	88db      	ldrh	r3, [r3, #6]
 8013882:	429a      	cmp	r2, r3
 8013884:	d905      	bls.n	8013892 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681a      	ldr	r2, [r3, #0]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	8892      	ldrh	r2, [r2, #4]
 8013890:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013892:	68f8      	ldr	r0, [r7, #12]
 8013894:	f00a ff8c 	bl	801e7b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	e009      	b.n	80138b0 <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	881a      	ldrh	r2, [r3, #0]
 80138a2:	3201      	adds	r2, #1
 80138a4:	b292      	uxth	r2, r2
 80138a6:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80138a8:	68f8      	ldr	r0, [r7, #12]
 80138aa:	f00a ff81 	bl	801e7b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80138ae:	2300      	movs	r3, #0
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3710      	adds	r7, #16
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}
 80138b8:	08021aa8 	.word	0x08021aa8
 80138bc:	08021ad8 	.word	0x08021ad8
 80138c0:	08021afc 	.word	0x08021afc

080138c4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d106      	bne.n	80138e0 <memp_malloc_pool+0x1c>
 80138d2:	4b0a      	ldr	r3, [pc, #40]	@ (80138fc <memp_malloc_pool+0x38>)
 80138d4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80138d8:	4909      	ldr	r1, [pc, #36]	@ (8013900 <memp_malloc_pool+0x3c>)
 80138da:	480a      	ldr	r0, [pc, #40]	@ (8013904 <memp_malloc_pool+0x40>)
 80138dc:	f00c f986 	bl	801fbec <iprintf>
  if (desc == NULL) {
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d101      	bne.n	80138ea <memp_malloc_pool+0x26>
    return NULL;
 80138e6:	2300      	movs	r3, #0
 80138e8:	e003      	b.n	80138f2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7ff ff9e 	bl	801382c <do_memp_malloc_pool>
 80138f0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3708      	adds	r7, #8
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
 80138fa:	bf00      	nop
 80138fc:	08021aa8 	.word	0x08021aa8
 8013900:	08021b24 	.word	0x08021b24
 8013904:	08021afc 	.word	0x08021afc

08013908 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
 801390e:	4603      	mov	r3, r0
 8013910:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	2b0c      	cmp	r3, #12
 8013916:	d908      	bls.n	801392a <memp_malloc+0x22>
 8013918:	4b0a      	ldr	r3, [pc, #40]	@ (8013944 <memp_malloc+0x3c>)
 801391a:	f240 1257 	movw	r2, #343	@ 0x157
 801391e:	490a      	ldr	r1, [pc, #40]	@ (8013948 <memp_malloc+0x40>)
 8013920:	480a      	ldr	r0, [pc, #40]	@ (801394c <memp_malloc+0x44>)
 8013922:	f00c f963 	bl	801fbec <iprintf>
 8013926:	2300      	movs	r3, #0
 8013928:	e008      	b.n	801393c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801392a:	79fb      	ldrb	r3, [r7, #7]
 801392c:	4a08      	ldr	r2, [pc, #32]	@ (8013950 <memp_malloc+0x48>)
 801392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff ff7a 	bl	801382c <do_memp_malloc_pool>
 8013938:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801393a:	68fb      	ldr	r3, [r7, #12]
}
 801393c:	4618      	mov	r0, r3
 801393e:	3710      	adds	r7, #16
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}
 8013944:	08021aa8 	.word	0x08021aa8
 8013948:	08021b38 	.word	0x08021b38
 801394c:	08021afc 	.word	0x08021afc
 8013950:	080248ec 	.word	0x080248ec

08013954 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	f003 0303 	and.w	r3, r3, #3
 8013964:	2b00      	cmp	r3, #0
 8013966:	d006      	beq.n	8013976 <do_memp_free_pool+0x22>
 8013968:	4b10      	ldr	r3, [pc, #64]	@ (80139ac <do_memp_free_pool+0x58>)
 801396a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801396e:	4910      	ldr	r1, [pc, #64]	@ (80139b0 <do_memp_free_pool+0x5c>)
 8013970:	4810      	ldr	r0, [pc, #64]	@ (80139b4 <do_memp_free_pool+0x60>)
 8013972:	f00c f93b 	bl	801fbec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801397a:	f00a ff0b 	bl	801e794 <sys_arch_protect>
 801397e:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	889a      	ldrh	r2, [r3, #4]
 8013986:	3a01      	subs	r2, #1
 8013988:	b292      	uxth	r2, r2
 801398a:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	68db      	ldr	r3, [r3, #12]
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	68db      	ldr	r3, [r3, #12]
 801399a:	68fa      	ldr	r2, [r7, #12]
 801399c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801399e:	68b8      	ldr	r0, [r7, #8]
 80139a0:	f00a ff06 	bl	801e7b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80139a4:	bf00      	nop
 80139a6:	3710      	adds	r7, #16
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	08021aa8 	.word	0x08021aa8
 80139b0:	08021b58 	.word	0x08021b58
 80139b4:	08021afc 	.word	0x08021afc

080139b8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d106      	bne.n	80139d6 <memp_free_pool+0x1e>
 80139c8:	4b0a      	ldr	r3, [pc, #40]	@ (80139f4 <memp_free_pool+0x3c>)
 80139ca:	f240 1295 	movw	r2, #405	@ 0x195
 80139ce:	490a      	ldr	r1, [pc, #40]	@ (80139f8 <memp_free_pool+0x40>)
 80139d0:	480a      	ldr	r0, [pc, #40]	@ (80139fc <memp_free_pool+0x44>)
 80139d2:	f00c f90b 	bl	801fbec <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d007      	beq.n	80139ec <memp_free_pool+0x34>
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d004      	beq.n	80139ec <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80139e2:	6839      	ldr	r1, [r7, #0]
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f7ff ffb5 	bl	8013954 <do_memp_free_pool>
 80139ea:	e000      	b.n	80139ee <memp_free_pool+0x36>
    return;
 80139ec:	bf00      	nop
}
 80139ee:	3708      	adds	r7, #8
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	08021aa8 	.word	0x08021aa8
 80139f8:	08021b24 	.word	0x08021b24
 80139fc:	08021afc 	.word	0x08021afc

08013a00 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	4603      	mov	r3, r0
 8013a08:	6039      	str	r1, [r7, #0]
 8013a0a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013a0c:	79fb      	ldrb	r3, [r7, #7]
 8013a0e:	2b0c      	cmp	r3, #12
 8013a10:	d907      	bls.n	8013a22 <memp_free+0x22>
 8013a12:	4b0c      	ldr	r3, [pc, #48]	@ (8013a44 <memp_free+0x44>)
 8013a14:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013a18:	490b      	ldr	r1, [pc, #44]	@ (8013a48 <memp_free+0x48>)
 8013a1a:	480c      	ldr	r0, [pc, #48]	@ (8013a4c <memp_free+0x4c>)
 8013a1c:	f00c f8e6 	bl	801fbec <iprintf>
 8013a20:	e00c      	b.n	8013a3c <memp_free+0x3c>

  if (mem == NULL) {
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d008      	beq.n	8013a3a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013a28:	79fb      	ldrb	r3, [r7, #7]
 8013a2a:	4a09      	ldr	r2, [pc, #36]	@ (8013a50 <memp_free+0x50>)
 8013a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a30:	6839      	ldr	r1, [r7, #0]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7ff ff8e 	bl	8013954 <do_memp_free_pool>
 8013a38:	e000      	b.n	8013a3c <memp_free+0x3c>
    return;
 8013a3a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	08021aa8 	.word	0x08021aa8
 8013a48:	08021b78 	.word	0x08021b78
 8013a4c:	08021afc 	.word	0x08021afc
 8013a50:	080248ec 	.word	0x080248ec

08013a54 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013a54:	b480      	push	{r7}
 8013a56:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013a58:	bf00      	nop
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr
	...

08013a64 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b086      	sub	sp, #24
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	607a      	str	r2, [r7, #4]
 8013a70:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d108      	bne.n	8013a8a <netif_add+0x26>
 8013a78:	4b57      	ldr	r3, [pc, #348]	@ (8013bd8 <netif_add+0x174>)
 8013a7a:	f240 1227 	movw	r2, #295	@ 0x127
 8013a7e:	4957      	ldr	r1, [pc, #348]	@ (8013bdc <netif_add+0x178>)
 8013a80:	4857      	ldr	r0, [pc, #348]	@ (8013be0 <netif_add+0x17c>)
 8013a82:	f00c f8b3 	bl	801fbec <iprintf>
 8013a86:	2300      	movs	r3, #0
 8013a88:	e0a2      	b.n	8013bd0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d108      	bne.n	8013aa2 <netif_add+0x3e>
 8013a90:	4b51      	ldr	r3, [pc, #324]	@ (8013bd8 <netif_add+0x174>)
 8013a92:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013a96:	4953      	ldr	r1, [pc, #332]	@ (8013be4 <netif_add+0x180>)
 8013a98:	4851      	ldr	r0, [pc, #324]	@ (8013be0 <netif_add+0x17c>)
 8013a9a:	f00c f8a7 	bl	801fbec <iprintf>
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	e096      	b.n	8013bd0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d101      	bne.n	8013aac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8013be8 <netif_add+0x184>)
 8013aaa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d101      	bne.n	8013ab6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8013be8 <netif_add+0x184>)
 8013ab4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d101      	bne.n	8013ac0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013abc:	4b4a      	ldr	r3, [pc, #296]	@ (8013be8 <netif_add+0x184>)
 8013abe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	4a45      	ldr	r2, [pc, #276]	@ (8013bec <netif_add+0x188>)
 8013ad6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2200      	movs	r2, #0
 8013adc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	6a3a      	ldr	r2, [r7, #32]
 8013af0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013af2:	4b3f      	ldr	r3, [pc, #252]	@ (8013bf0 <netif_add+0x18c>)
 8013af4:	781a      	ldrb	r2, [r3, #0]
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b00:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	68b9      	ldr	r1, [r7, #8]
 8013b08:	68f8      	ldr	r0, [r7, #12]
 8013b0a:	f000 f913 	bl	8013d34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	4798      	blx	r3
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d001      	beq.n	8013b1e <netif_add+0xba>
    return NULL;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	e058      	b.n	8013bd0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b24:	2bff      	cmp	r3, #255	@ 0xff
 8013b26:	d103      	bne.n	8013b30 <netif_add+0xcc>
        netif->num = 0;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013b30:	2300      	movs	r3, #0
 8013b32:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013b34:	4b2f      	ldr	r3, [pc, #188]	@ (8013bf4 <netif_add+0x190>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	617b      	str	r3, [r7, #20]
 8013b3a:	e02b      	b.n	8013b94 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013b3c:	697a      	ldr	r2, [r7, #20]
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d106      	bne.n	8013b52 <netif_add+0xee>
 8013b44:	4b24      	ldr	r3, [pc, #144]	@ (8013bd8 <netif_add+0x174>)
 8013b46:	f240 128b 	movw	r2, #395	@ 0x18b
 8013b4a:	492b      	ldr	r1, [pc, #172]	@ (8013bf8 <netif_add+0x194>)
 8013b4c:	4824      	ldr	r0, [pc, #144]	@ (8013be0 <netif_add+0x17c>)
 8013b4e:	f00c f84d 	bl	801fbec <iprintf>
        num_netifs++;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	3301      	adds	r3, #1
 8013b56:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	2bff      	cmp	r3, #255	@ 0xff
 8013b5c:	dd06      	ble.n	8013b6c <netif_add+0x108>
 8013b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8013bd8 <netif_add+0x174>)
 8013b60:	f240 128d 	movw	r2, #397	@ 0x18d
 8013b64:	4925      	ldr	r1, [pc, #148]	@ (8013bfc <netif_add+0x198>)
 8013b66:	481e      	ldr	r0, [pc, #120]	@ (8013be0 <netif_add+0x17c>)
 8013b68:	f00c f840 	bl	801fbec <iprintf>
        if (netif2->num == netif->num) {
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d108      	bne.n	8013b8e <netif_add+0x12a>
          netif->num++;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013b82:	3301      	adds	r3, #1
 8013b84:	b2da      	uxtb	r2, r3
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013b8c:	e005      	b.n	8013b9a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	617b      	str	r3, [r7, #20]
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d1d0      	bne.n	8013b3c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d1be      	bne.n	8013b1e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013ba6:	2bfe      	cmp	r3, #254	@ 0xfe
 8013ba8:	d103      	bne.n	8013bb2 <netif_add+0x14e>
    netif_num = 0;
 8013baa:	4b11      	ldr	r3, [pc, #68]	@ (8013bf0 <netif_add+0x18c>)
 8013bac:	2200      	movs	r2, #0
 8013bae:	701a      	strb	r2, [r3, #0]
 8013bb0:	e006      	b.n	8013bc0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013bb8:	3301      	adds	r3, #1
 8013bba:	b2da      	uxtb	r2, r3
 8013bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8013bf0 <netif_add+0x18c>)
 8013bbe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8013bf4 <netif_add+0x190>)
 8013bc2:	681a      	ldr	r2, [r3, #0]
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8013bf4 <netif_add+0x190>)
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013bce:	68fb      	ldr	r3, [r7, #12]
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3718      	adds	r7, #24
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}
 8013bd8:	08021b94 	.word	0x08021b94
 8013bdc:	08021c28 	.word	0x08021c28
 8013be0:	08021be4 	.word	0x08021be4
 8013be4:	08021c44 	.word	0x08021c44
 8013be8:	08024960 	.word	0x08024960
 8013bec:	0801400f 	.word	0x0801400f
 8013bf0:	2002d2ac 	.word	0x2002d2ac
 8013bf4:	2002d2a4 	.word	0x2002d2a4
 8013bf8:	08021c68 	.word	0x08021c68
 8013bfc:	08021c7c 	.word	0x08021c7c

08013c00 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b082      	sub	sp, #8
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013c0a:	6839      	ldr	r1, [r7, #0]
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f002 fdc9 	bl	80167a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013c12:	6839      	ldr	r1, [r7, #0]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f007 ff61 	bl	801badc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013c1a:	bf00      	nop
 8013c1c:	3708      	adds	r7, #8
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
	...

08013c24 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b086      	sub	sp, #24
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	60f8      	str	r0, [r7, #12]
 8013c2c:	60b9      	str	r1, [r7, #8]
 8013c2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d106      	bne.n	8013c44 <netif_do_set_ipaddr+0x20>
 8013c36:	4b1d      	ldr	r3, [pc, #116]	@ (8013cac <netif_do_set_ipaddr+0x88>)
 8013c38:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013c3c:	491c      	ldr	r1, [pc, #112]	@ (8013cb0 <netif_do_set_ipaddr+0x8c>)
 8013c3e:	481d      	ldr	r0, [pc, #116]	@ (8013cb4 <netif_do_set_ipaddr+0x90>)
 8013c40:	f00b ffd4 	bl	801fbec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d106      	bne.n	8013c58 <netif_do_set_ipaddr+0x34>
 8013c4a:	4b18      	ldr	r3, [pc, #96]	@ (8013cac <netif_do_set_ipaddr+0x88>)
 8013c4c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013c50:	4917      	ldr	r1, [pc, #92]	@ (8013cb0 <netif_do_set_ipaddr+0x8c>)
 8013c52:	4818      	ldr	r0, [pc, #96]	@ (8013cb4 <netif_do_set_ipaddr+0x90>)
 8013c54:	f00b ffca 	bl	801fbec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	3304      	adds	r3, #4
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	429a      	cmp	r2, r3
 8013c64:	d01c      	beq.n	8013ca0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	3304      	adds	r3, #4
 8013c70:	681a      	ldr	r2, [r3, #0]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013c76:	f107 0314 	add.w	r3, r7, #20
 8013c7a:	4619      	mov	r1, r3
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7ff ffbf 	bl	8013c00 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d002      	beq.n	8013c8e <netif_do_set_ipaddr+0x6a>
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	e000      	b.n	8013c90 <netif_do_set_ipaddr+0x6c>
 8013c8e:	2300      	movs	r3, #0
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013c94:	2101      	movs	r1, #1
 8013c96:	68f8      	ldr	r0, [r7, #12]
 8013c98:	f000 f8d2 	bl	8013e40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	e000      	b.n	8013ca2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3718      	adds	r7, #24
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	08021b94 	.word	0x08021b94
 8013cb0:	08021cac 	.word	0x08021cac
 8013cb4:	08021be4 	.word	0x08021be4

08013cb8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b085      	sub	sp, #20
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	60f8      	str	r0, [r7, #12]
 8013cc0:	60b9      	str	r1, [r7, #8]
 8013cc2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	3308      	adds	r3, #8
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d00a      	beq.n	8013ce8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d002      	beq.n	8013cde <netif_do_set_netmask+0x26>
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	e000      	b.n	8013ce0 <netif_do_set_netmask+0x28>
 8013cde:	2300      	movs	r3, #0
 8013ce0:	68fa      	ldr	r2, [r7, #12]
 8013ce2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	e000      	b.n	8013cea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013ce8:	2300      	movs	r3, #0
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3714      	adds	r7, #20
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf4:	4770      	bx	lr

08013cf6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013cf6:	b480      	push	{r7}
 8013cf8:	b085      	sub	sp, #20
 8013cfa:	af00      	add	r7, sp, #0
 8013cfc:	60f8      	str	r0, [r7, #12]
 8013cfe:	60b9      	str	r1, [r7, #8]
 8013d00:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	330c      	adds	r3, #12
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d00a      	beq.n	8013d26 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d002      	beq.n	8013d1c <netif_do_set_gw+0x26>
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	e000      	b.n	8013d1e <netif_do_set_gw+0x28>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	68fa      	ldr	r2, [r7, #12]
 8013d20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013d22:	2301      	movs	r3, #1
 8013d24:	e000      	b.n	8013d28 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013d26:	2300      	movs	r3, #0
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3714      	adds	r7, #20
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d32:	4770      	bx	lr

08013d34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b088      	sub	sp, #32
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
 8013d40:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013d42:	2300      	movs	r3, #0
 8013d44:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013d46:	2300      	movs	r3, #0
 8013d48:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d101      	bne.n	8013d54 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013d50:	4b1c      	ldr	r3, [pc, #112]	@ (8013dc4 <netif_set_addr+0x90>)
 8013d52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d101      	bne.n	8013d5e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8013dc4 <netif_set_addr+0x90>)
 8013d5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d101      	bne.n	8013d68 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013d64:	4b17      	ldr	r3, [pc, #92]	@ (8013dc4 <netif_set_addr+0x90>)
 8013d66:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d003      	beq.n	8013d76 <netif_set_addr+0x42>
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d101      	bne.n	8013d7a <netif_set_addr+0x46>
 8013d76:	2301      	movs	r3, #1
 8013d78:	e000      	b.n	8013d7c <netif_set_addr+0x48>
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d006      	beq.n	8013d92 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013d84:	f107 0310 	add.w	r3, r7, #16
 8013d88:	461a      	mov	r2, r3
 8013d8a:	68b9      	ldr	r1, [r7, #8]
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f7ff ff49 	bl	8013c24 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013d92:	69fa      	ldr	r2, [r7, #28]
 8013d94:	6879      	ldr	r1, [r7, #4]
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	f7ff ff8e 	bl	8013cb8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013d9c:	69ba      	ldr	r2, [r7, #24]
 8013d9e:	6839      	ldr	r1, [r7, #0]
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f7ff ffa8 	bl	8013cf6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d106      	bne.n	8013dba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013dac:	f107 0310 	add.w	r3, r7, #16
 8013db0:	461a      	mov	r2, r3
 8013db2:	68b9      	ldr	r1, [r7, #8]
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	f7ff ff35 	bl	8013c24 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013dba:	bf00      	nop
 8013dbc:	3720      	adds	r7, #32
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	08024960 	.word	0x08024960

08013dc8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013dd0:	4a04      	ldr	r2, [pc, #16]	@ (8013de4 <netif_set_default+0x1c>)
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013dd6:	bf00      	nop
 8013dd8:	370c      	adds	r7, #12
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de0:	4770      	bx	lr
 8013de2:	bf00      	nop
 8013de4:	2002d2a8 	.word	0x2002d2a8

08013de8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d107      	bne.n	8013e06 <netif_set_up+0x1e>
 8013df6:	4b0f      	ldr	r3, [pc, #60]	@ (8013e34 <netif_set_up+0x4c>)
 8013df8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013dfc:	490e      	ldr	r1, [pc, #56]	@ (8013e38 <netif_set_up+0x50>)
 8013dfe:	480f      	ldr	r0, [pc, #60]	@ (8013e3c <netif_set_up+0x54>)
 8013e00:	f00b fef4 	bl	801fbec <iprintf>
 8013e04:	e013      	b.n	8013e2e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e0c:	f003 0301 	and.w	r3, r3, #1
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d10c      	bne.n	8013e2e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e1a:	f043 0301 	orr.w	r3, r3, #1
 8013e1e:	b2da      	uxtb	r2, r3
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013e26:	2103      	movs	r1, #3
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f000 f809 	bl	8013e40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	08021b94 	.word	0x08021b94
 8013e38:	08021d1c 	.word	0x08021d1c
 8013e3c:	08021be4 	.word	0x08021be4

08013e40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	460b      	mov	r3, r1
 8013e4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d106      	bne.n	8013e60 <netif_issue_reports+0x20>
 8013e52:	4b18      	ldr	r3, [pc, #96]	@ (8013eb4 <netif_issue_reports+0x74>)
 8013e54:	f240 326d 	movw	r2, #877	@ 0x36d
 8013e58:	4917      	ldr	r1, [pc, #92]	@ (8013eb8 <netif_issue_reports+0x78>)
 8013e5a:	4818      	ldr	r0, [pc, #96]	@ (8013ebc <netif_issue_reports+0x7c>)
 8013e5c:	f00b fec6 	bl	801fbec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e66:	f003 0304 	and.w	r3, r3, #4
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d01e      	beq.n	8013eac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d017      	beq.n	8013eac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013e7c:	78fb      	ldrb	r3, [r7, #3]
 8013e7e:	f003 0301 	and.w	r3, r3, #1
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d013      	beq.n	8013eae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	3304      	adds	r3, #4
 8013e8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d00e      	beq.n	8013eae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e96:	f003 0308 	and.w	r3, r3, #8
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d007      	beq.n	8013eae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	3304      	adds	r3, #4
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f008 fdc3 	bl	801ca30 <etharp_request>
 8013eaa:	e000      	b.n	8013eae <netif_issue_reports+0x6e>
    return;
 8013eac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	08021b94 	.word	0x08021b94
 8013eb8:	08021d38 	.word	0x08021d38
 8013ebc:	08021be4 	.word	0x08021be4

08013ec0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d107      	bne.n	8013ede <netif_set_down+0x1e>
 8013ece:	4b12      	ldr	r3, [pc, #72]	@ (8013f18 <netif_set_down+0x58>)
 8013ed0:	f240 329b 	movw	r2, #923	@ 0x39b
 8013ed4:	4911      	ldr	r1, [pc, #68]	@ (8013f1c <netif_set_down+0x5c>)
 8013ed6:	4812      	ldr	r0, [pc, #72]	@ (8013f20 <netif_set_down+0x60>)
 8013ed8:	f00b fe88 	bl	801fbec <iprintf>
 8013edc:	e019      	b.n	8013f12 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ee4:	f003 0301 	and.w	r3, r3, #1
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d012      	beq.n	8013f12 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ef2:	f023 0301 	bic.w	r3, r3, #1
 8013ef6:	b2da      	uxtb	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f04:	f003 0308 	and.w	r3, r3, #8
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d002      	beq.n	8013f12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f008 f90d 	bl	801c12c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013f12:	3708      	adds	r7, #8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	08021b94 	.word	0x08021b94
 8013f1c:	08021d5c 	.word	0x08021d5c
 8013f20:	08021be4 	.word	0x08021be4

08013f24 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d107      	bne.n	8013f42 <netif_set_link_up+0x1e>
 8013f32:	4b13      	ldr	r3, [pc, #76]	@ (8013f80 <netif_set_link_up+0x5c>)
 8013f34:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8013f38:	4912      	ldr	r1, [pc, #72]	@ (8013f84 <netif_set_link_up+0x60>)
 8013f3a:	4813      	ldr	r0, [pc, #76]	@ (8013f88 <netif_set_link_up+0x64>)
 8013f3c:	f00b fe56 	bl	801fbec <iprintf>
 8013f40:	e01b      	b.n	8013f7a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f48:	f003 0304 	and.w	r3, r3, #4
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d114      	bne.n	8013f7a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f56:	f043 0304 	orr.w	r3, r3, #4
 8013f5a:	b2da      	uxtb	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013f62:	2103      	movs	r1, #3
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f7ff ff6b 	bl	8013e40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	69db      	ldr	r3, [r3, #28]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d003      	beq.n	8013f7a <netif_set_link_up+0x56>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	69db      	ldr	r3, [r3, #28]
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013f7a:	3708      	adds	r7, #8
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	08021b94 	.word	0x08021b94
 8013f84:	08021d7c 	.word	0x08021d7c
 8013f88:	08021be4 	.word	0x08021be4

08013f8c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d107      	bne.n	8013faa <netif_set_link_down+0x1e>
 8013f9a:	4b11      	ldr	r3, [pc, #68]	@ (8013fe0 <netif_set_link_down+0x54>)
 8013f9c:	f240 4206 	movw	r2, #1030	@ 0x406
 8013fa0:	4910      	ldr	r1, [pc, #64]	@ (8013fe4 <netif_set_link_down+0x58>)
 8013fa2:	4811      	ldr	r0, [pc, #68]	@ (8013fe8 <netif_set_link_down+0x5c>)
 8013fa4:	f00b fe22 	bl	801fbec <iprintf>
 8013fa8:	e017      	b.n	8013fda <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013fb0:	f003 0304 	and.w	r3, r3, #4
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d010      	beq.n	8013fda <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013fbe:	f023 0304 	bic.w	r3, r3, #4
 8013fc2:	b2da      	uxtb	r2, r3
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	69db      	ldr	r3, [r3, #28]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d003      	beq.n	8013fda <netif_set_link_down+0x4e>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	69db      	ldr	r3, [r3, #28]
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013fda:	3708      	adds	r7, #8
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	08021b94 	.word	0x08021b94
 8013fe4:	08021da0 	.word	0x08021da0
 8013fe8:	08021be4 	.word	0x08021be4

08013fec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d002      	beq.n	8014002 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	683a      	ldr	r2, [r7, #0]
 8014000:	61da      	str	r2, [r3, #28]
  }
}
 8014002:	bf00      	nop
 8014004:	370c      	adds	r7, #12
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr

0801400e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801400e:	b480      	push	{r7}
 8014010:	b085      	sub	sp, #20
 8014012:	af00      	add	r7, sp, #0
 8014014:	60f8      	str	r0, [r7, #12]
 8014016:	60b9      	str	r1, [r7, #8]
 8014018:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801401a:	f06f 030b 	mvn.w	r3, #11
}
 801401e:	4618      	mov	r0, r3
 8014020:	3714      	adds	r7, #20
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr
	...

0801402c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801402c:	b480      	push	{r7}
 801402e:	b085      	sub	sp, #20
 8014030:	af00      	add	r7, sp, #0
 8014032:	4603      	mov	r3, r0
 8014034:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014036:	79fb      	ldrb	r3, [r7, #7]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d013      	beq.n	8014064 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801403c:	4b0d      	ldr	r3, [pc, #52]	@ (8014074 <netif_get_by_index+0x48>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	60fb      	str	r3, [r7, #12]
 8014042:	e00c      	b.n	801405e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801404a:	3301      	adds	r3, #1
 801404c:	b2db      	uxtb	r3, r3
 801404e:	79fa      	ldrb	r2, [r7, #7]
 8014050:	429a      	cmp	r2, r3
 8014052:	d101      	bne.n	8014058 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	e006      	b.n	8014066 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	60fb      	str	r3, [r7, #12]
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1ef      	bne.n	8014044 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014064:	2300      	movs	r3, #0
}
 8014066:	4618      	mov	r0, r3
 8014068:	3714      	adds	r7, #20
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr
 8014072:	bf00      	nop
 8014074:	2002d2a4 	.word	0x2002d2a4

08014078 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801407e:	f00a fb89 	bl	801e794 <sys_arch_protect>
 8014082:	6038      	str	r0, [r7, #0]
 8014084:	4b0d      	ldr	r3, [pc, #52]	@ (80140bc <pbuf_free_ooseq+0x44>)
 8014086:	2200      	movs	r2, #0
 8014088:	701a      	strb	r2, [r3, #0]
 801408a:	6838      	ldr	r0, [r7, #0]
 801408c:	f00a fb90 	bl	801e7b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014090:	4b0b      	ldr	r3, [pc, #44]	@ (80140c0 <pbuf_free_ooseq+0x48>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	607b      	str	r3, [r7, #4]
 8014096:	e00a      	b.n	80140ae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801409c:	2b00      	cmp	r3, #0
 801409e:	d003      	beq.n	80140a8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f002 fbbd 	bl	8016820 <tcp_free_ooseq>
      return;
 80140a6:	e005      	b.n	80140b4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	68db      	ldr	r3, [r3, #12]
 80140ac:	607b      	str	r3, [r7, #4]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d1f1      	bne.n	8014098 <pbuf_free_ooseq+0x20>
    }
  }
}
 80140b4:	3708      	adds	r7, #8
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	2002d2ad 	.word	0x2002d2ad
 80140c0:	2002d3b8 	.word	0x2002d3b8

080140c4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80140cc:	f7ff ffd4 	bl	8014078 <pbuf_free_ooseq>
}
 80140d0:	bf00      	nop
 80140d2:	3708      	adds	r7, #8
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}

080140d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b082      	sub	sp, #8
 80140dc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80140de:	f00a fb59 	bl	801e794 <sys_arch_protect>
 80140e2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80140e4:	4b0f      	ldr	r3, [pc, #60]	@ (8014124 <pbuf_pool_is_empty+0x4c>)
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80140ea:	4b0e      	ldr	r3, [pc, #56]	@ (8014124 <pbuf_pool_is_empty+0x4c>)
 80140ec:	2201      	movs	r2, #1
 80140ee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f00a fb5d 	bl	801e7b0 <sys_arch_unprotect>

  if (!queued) {
 80140f6:	78fb      	ldrb	r3, [r7, #3]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d10f      	bne.n	801411c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80140fc:	2100      	movs	r1, #0
 80140fe:	480a      	ldr	r0, [pc, #40]	@ (8014128 <pbuf_pool_is_empty+0x50>)
 8014100:	f7fe fdc4 	bl	8012c8c <tcpip_try_callback>
 8014104:	4603      	mov	r3, r0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d008      	beq.n	801411c <pbuf_pool_is_empty+0x44>
 801410a:	f00a fb43 	bl	801e794 <sys_arch_protect>
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	4b04      	ldr	r3, [pc, #16]	@ (8014124 <pbuf_pool_is_empty+0x4c>)
 8014112:	2200      	movs	r2, #0
 8014114:	701a      	strb	r2, [r3, #0]
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f00a fb4a 	bl	801e7b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801411c:	bf00      	nop
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	2002d2ad 	.word	0x2002d2ad
 8014128:	080140c5 	.word	0x080140c5

0801412c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801412c:	b480      	push	{r7}
 801412e:	b085      	sub	sp, #20
 8014130:	af00      	add	r7, sp, #0
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	60b9      	str	r1, [r7, #8]
 8014136:	4611      	mov	r1, r2
 8014138:	461a      	mov	r2, r3
 801413a:	460b      	mov	r3, r1
 801413c:	80fb      	strh	r3, [r7, #6]
 801413e:	4613      	mov	r3, r2
 8014140:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	2200      	movs	r2, #0
 8014146:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	68ba      	ldr	r2, [r7, #8]
 801414c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	88fa      	ldrh	r2, [r7, #6]
 8014152:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	88ba      	ldrh	r2, [r7, #4]
 8014158:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801415a:	8b3b      	ldrh	r3, [r7, #24]
 801415c:	b2da      	uxtb	r2, r3
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	7f3a      	ldrb	r2, [r7, #28]
 8014166:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2201      	movs	r2, #1
 801416c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2200      	movs	r2, #0
 8014172:	73da      	strb	r2, [r3, #15]
}
 8014174:	bf00      	nop
 8014176:	3714      	adds	r7, #20
 8014178:	46bd      	mov	sp, r7
 801417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417e:	4770      	bx	lr

08014180 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b08c      	sub	sp, #48	@ 0x30
 8014184:	af02      	add	r7, sp, #8
 8014186:	4603      	mov	r3, r0
 8014188:	71fb      	strb	r3, [r7, #7]
 801418a:	460b      	mov	r3, r1
 801418c:	80bb      	strh	r3, [r7, #4]
 801418e:	4613      	mov	r3, r2
 8014190:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014192:	79fb      	ldrb	r3, [r7, #7]
 8014194:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014196:	887b      	ldrh	r3, [r7, #2]
 8014198:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801419c:	d07f      	beq.n	801429e <pbuf_alloc+0x11e>
 801419e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80141a2:	f300 80c8 	bgt.w	8014336 <pbuf_alloc+0x1b6>
 80141a6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80141aa:	d010      	beq.n	80141ce <pbuf_alloc+0x4e>
 80141ac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80141b0:	f300 80c1 	bgt.w	8014336 <pbuf_alloc+0x1b6>
 80141b4:	2b01      	cmp	r3, #1
 80141b6:	d002      	beq.n	80141be <pbuf_alloc+0x3e>
 80141b8:	2b41      	cmp	r3, #65	@ 0x41
 80141ba:	f040 80bc 	bne.w	8014336 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80141be:	887a      	ldrh	r2, [r7, #2]
 80141c0:	88bb      	ldrh	r3, [r7, #4]
 80141c2:	4619      	mov	r1, r3
 80141c4:	2000      	movs	r0, #0
 80141c6:	f000 f8d1 	bl	801436c <pbuf_alloc_reference>
 80141ca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80141cc:	e0bd      	b.n	801434a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80141ce:	2300      	movs	r3, #0
 80141d0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80141d2:	2300      	movs	r3, #0
 80141d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80141d6:	88bb      	ldrh	r3, [r7, #4]
 80141d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80141da:	200c      	movs	r0, #12
 80141dc:	f7ff fb94 	bl	8013908 <memp_malloc>
 80141e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80141e2:	693b      	ldr	r3, [r7, #16]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d109      	bne.n	80141fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80141e8:	f7ff ff76 	bl	80140d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80141ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d002      	beq.n	80141f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80141f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80141f4:	f000 faa8 	bl	8014748 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80141f8:	2300      	movs	r3, #0
 80141fa:	e0a7      	b.n	801434c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80141fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80141fe:	3303      	adds	r3, #3
 8014200:	b29b      	uxth	r3, r3
 8014202:	f023 0303 	bic.w	r3, r3, #3
 8014206:	b29b      	uxth	r3, r3
 8014208:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801420c:	b29b      	uxth	r3, r3
 801420e:	8b7a      	ldrh	r2, [r7, #26]
 8014210:	4293      	cmp	r3, r2
 8014212:	bf28      	it	cs
 8014214:	4613      	movcs	r3, r2
 8014216:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014218:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801421a:	3310      	adds	r3, #16
 801421c:	693a      	ldr	r2, [r7, #16]
 801421e:	4413      	add	r3, r2
 8014220:	3303      	adds	r3, #3
 8014222:	f023 0303 	bic.w	r3, r3, #3
 8014226:	4618      	mov	r0, r3
 8014228:	89f9      	ldrh	r1, [r7, #14]
 801422a:	8b7a      	ldrh	r2, [r7, #26]
 801422c:	2300      	movs	r3, #0
 801422e:	9301      	str	r3, [sp, #4]
 8014230:	887b      	ldrh	r3, [r7, #2]
 8014232:	9300      	str	r3, [sp, #0]
 8014234:	460b      	mov	r3, r1
 8014236:	4601      	mov	r1, r0
 8014238:	6938      	ldr	r0, [r7, #16]
 801423a:	f7ff ff77 	bl	801412c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	f003 0303 	and.w	r3, r3, #3
 8014246:	2b00      	cmp	r3, #0
 8014248:	d006      	beq.n	8014258 <pbuf_alloc+0xd8>
 801424a:	4b42      	ldr	r3, [pc, #264]	@ (8014354 <pbuf_alloc+0x1d4>)
 801424c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014250:	4941      	ldr	r1, [pc, #260]	@ (8014358 <pbuf_alloc+0x1d8>)
 8014252:	4842      	ldr	r0, [pc, #264]	@ (801435c <pbuf_alloc+0x1dc>)
 8014254:	f00b fcca 	bl	801fbec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014258:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801425a:	3303      	adds	r3, #3
 801425c:	f023 0303 	bic.w	r3, r3, #3
 8014260:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014264:	d106      	bne.n	8014274 <pbuf_alloc+0xf4>
 8014266:	4b3b      	ldr	r3, [pc, #236]	@ (8014354 <pbuf_alloc+0x1d4>)
 8014268:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801426c:	493c      	ldr	r1, [pc, #240]	@ (8014360 <pbuf_alloc+0x1e0>)
 801426e:	483b      	ldr	r0, [pc, #236]	@ (801435c <pbuf_alloc+0x1dc>)
 8014270:	f00b fcbc 	bl	801fbec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014276:	2b00      	cmp	r3, #0
 8014278:	d102      	bne.n	8014280 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	627b      	str	r3, [r7, #36]	@ 0x24
 801427e:	e002      	b.n	8014286 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	693a      	ldr	r2, [r7, #16]
 8014284:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801428a:	8b7a      	ldrh	r2, [r7, #26]
 801428c:	89fb      	ldrh	r3, [r7, #14]
 801428e:	1ad3      	subs	r3, r2, r3
 8014290:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014292:	2300      	movs	r3, #0
 8014294:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8014296:	8b7b      	ldrh	r3, [r7, #26]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d19e      	bne.n	80141da <pbuf_alloc+0x5a>
      break;
 801429c:	e055      	b.n	801434a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801429e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80142a0:	3303      	adds	r3, #3
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	f023 0303 	bic.w	r3, r3, #3
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	88bb      	ldrh	r3, [r7, #4]
 80142ac:	3303      	adds	r3, #3
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	f023 0303 	bic.w	r3, r3, #3
 80142b4:	b29b      	uxth	r3, r3
 80142b6:	4413      	add	r3, r2
 80142b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80142ba:	8b3b      	ldrh	r3, [r7, #24]
 80142bc:	3310      	adds	r3, #16
 80142be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80142c0:	8b3a      	ldrh	r2, [r7, #24]
 80142c2:	88bb      	ldrh	r3, [r7, #4]
 80142c4:	3303      	adds	r3, #3
 80142c6:	f023 0303 	bic.w	r3, r3, #3
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d306      	bcc.n	80142dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80142ce:	8afa      	ldrh	r2, [r7, #22]
 80142d0:	88bb      	ldrh	r3, [r7, #4]
 80142d2:	3303      	adds	r3, #3
 80142d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80142d8:	429a      	cmp	r2, r3
 80142da:	d201      	bcs.n	80142e0 <pbuf_alloc+0x160>
        return NULL;
 80142dc:	2300      	movs	r3, #0
 80142de:	e035      	b.n	801434c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80142e0:	8afb      	ldrh	r3, [r7, #22]
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7ff f900 	bl	80134e8 <mem_malloc>
 80142e8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80142ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d101      	bne.n	80142f4 <pbuf_alloc+0x174>
        return NULL;
 80142f0:	2300      	movs	r3, #0
 80142f2:	e02b      	b.n	801434c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80142f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80142f6:	3310      	adds	r3, #16
 80142f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142fa:	4413      	add	r3, r2
 80142fc:	3303      	adds	r3, #3
 80142fe:	f023 0303 	bic.w	r3, r3, #3
 8014302:	4618      	mov	r0, r3
 8014304:	88b9      	ldrh	r1, [r7, #4]
 8014306:	88ba      	ldrh	r2, [r7, #4]
 8014308:	2300      	movs	r3, #0
 801430a:	9301      	str	r3, [sp, #4]
 801430c:	887b      	ldrh	r3, [r7, #2]
 801430e:	9300      	str	r3, [sp, #0]
 8014310:	460b      	mov	r3, r1
 8014312:	4601      	mov	r1, r0
 8014314:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014316:	f7ff ff09 	bl	801412c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801431c:	685b      	ldr	r3, [r3, #4]
 801431e:	f003 0303 	and.w	r3, r3, #3
 8014322:	2b00      	cmp	r3, #0
 8014324:	d010      	beq.n	8014348 <pbuf_alloc+0x1c8>
 8014326:	4b0b      	ldr	r3, [pc, #44]	@ (8014354 <pbuf_alloc+0x1d4>)
 8014328:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801432c:	490d      	ldr	r1, [pc, #52]	@ (8014364 <pbuf_alloc+0x1e4>)
 801432e:	480b      	ldr	r0, [pc, #44]	@ (801435c <pbuf_alloc+0x1dc>)
 8014330:	f00b fc5c 	bl	801fbec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014334:	e008      	b.n	8014348 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014336:	4b07      	ldr	r3, [pc, #28]	@ (8014354 <pbuf_alloc+0x1d4>)
 8014338:	f240 1227 	movw	r2, #295	@ 0x127
 801433c:	490a      	ldr	r1, [pc, #40]	@ (8014368 <pbuf_alloc+0x1e8>)
 801433e:	4807      	ldr	r0, [pc, #28]	@ (801435c <pbuf_alloc+0x1dc>)
 8014340:	f00b fc54 	bl	801fbec <iprintf>
      return NULL;
 8014344:	2300      	movs	r3, #0
 8014346:	e001      	b.n	801434c <pbuf_alloc+0x1cc>
      break;
 8014348:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801434c:	4618      	mov	r0, r3
 801434e:	3728      	adds	r7, #40	@ 0x28
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	08021dc4 	.word	0x08021dc4
 8014358:	08021df4 	.word	0x08021df4
 801435c:	08021e24 	.word	0x08021e24
 8014360:	08021e4c 	.word	0x08021e4c
 8014364:	08021e80 	.word	0x08021e80
 8014368:	08021eac 	.word	0x08021eac

0801436c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b086      	sub	sp, #24
 8014370:	af02      	add	r7, sp, #8
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	460b      	mov	r3, r1
 8014376:	807b      	strh	r3, [r7, #2]
 8014378:	4613      	mov	r3, r2
 801437a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801437c:	883b      	ldrh	r3, [r7, #0]
 801437e:	2b41      	cmp	r3, #65	@ 0x41
 8014380:	d009      	beq.n	8014396 <pbuf_alloc_reference+0x2a>
 8014382:	883b      	ldrh	r3, [r7, #0]
 8014384:	2b01      	cmp	r3, #1
 8014386:	d006      	beq.n	8014396 <pbuf_alloc_reference+0x2a>
 8014388:	4b0f      	ldr	r3, [pc, #60]	@ (80143c8 <pbuf_alloc_reference+0x5c>)
 801438a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801438e:	490f      	ldr	r1, [pc, #60]	@ (80143cc <pbuf_alloc_reference+0x60>)
 8014390:	480f      	ldr	r0, [pc, #60]	@ (80143d0 <pbuf_alloc_reference+0x64>)
 8014392:	f00b fc2b 	bl	801fbec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014396:	200b      	movs	r0, #11
 8014398:	f7ff fab6 	bl	8013908 <memp_malloc>
 801439c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d101      	bne.n	80143a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80143a4:	2300      	movs	r3, #0
 80143a6:	e00b      	b.n	80143c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80143a8:	8879      	ldrh	r1, [r7, #2]
 80143aa:	887a      	ldrh	r2, [r7, #2]
 80143ac:	2300      	movs	r3, #0
 80143ae:	9301      	str	r3, [sp, #4]
 80143b0:	883b      	ldrh	r3, [r7, #0]
 80143b2:	9300      	str	r3, [sp, #0]
 80143b4:	460b      	mov	r3, r1
 80143b6:	6879      	ldr	r1, [r7, #4]
 80143b8:	68f8      	ldr	r0, [r7, #12]
 80143ba:	f7ff feb7 	bl	801412c <pbuf_init_alloced_pbuf>
  return p;
 80143be:	68fb      	ldr	r3, [r7, #12]
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	3710      	adds	r7, #16
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}
 80143c8:	08021dc4 	.word	0x08021dc4
 80143cc:	08021ec8 	.word	0x08021ec8
 80143d0:	08021e24 	.word	0x08021e24

080143d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b088      	sub	sp, #32
 80143d8:	af02      	add	r7, sp, #8
 80143da:	607b      	str	r3, [r7, #4]
 80143dc:	4603      	mov	r3, r0
 80143de:	73fb      	strb	r3, [r7, #15]
 80143e0:	460b      	mov	r3, r1
 80143e2:	81bb      	strh	r3, [r7, #12]
 80143e4:	4613      	mov	r3, r2
 80143e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80143e8:	7bfb      	ldrb	r3, [r7, #15]
 80143ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80143ec:	8a7b      	ldrh	r3, [r7, #18]
 80143ee:	3303      	adds	r3, #3
 80143f0:	f023 0203 	bic.w	r2, r3, #3
 80143f4:	89bb      	ldrh	r3, [r7, #12]
 80143f6:	441a      	add	r2, r3
 80143f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d901      	bls.n	8014402 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80143fe:	2300      	movs	r3, #0
 8014400:	e018      	b.n	8014434 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014402:	6a3b      	ldr	r3, [r7, #32]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d007      	beq.n	8014418 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014408:	8a7b      	ldrh	r3, [r7, #18]
 801440a:	3303      	adds	r3, #3
 801440c:	f023 0303 	bic.w	r3, r3, #3
 8014410:	6a3a      	ldr	r2, [r7, #32]
 8014412:	4413      	add	r3, r2
 8014414:	617b      	str	r3, [r7, #20]
 8014416:	e001      	b.n	801441c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014418:	2300      	movs	r3, #0
 801441a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	89b9      	ldrh	r1, [r7, #12]
 8014420:	89ba      	ldrh	r2, [r7, #12]
 8014422:	2302      	movs	r3, #2
 8014424:	9301      	str	r3, [sp, #4]
 8014426:	897b      	ldrh	r3, [r7, #10]
 8014428:	9300      	str	r3, [sp, #0]
 801442a:	460b      	mov	r3, r1
 801442c:	6979      	ldr	r1, [r7, #20]
 801442e:	f7ff fe7d 	bl	801412c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014432:	687b      	ldr	r3, [r7, #4]
}
 8014434:	4618      	mov	r0, r3
 8014436:	3718      	adds	r7, #24
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b084      	sub	sp, #16
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
 8014444:	460b      	mov	r3, r1
 8014446:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d106      	bne.n	801445c <pbuf_realloc+0x20>
 801444e:	4b3a      	ldr	r3, [pc, #232]	@ (8014538 <pbuf_realloc+0xfc>)
 8014450:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014454:	4939      	ldr	r1, [pc, #228]	@ (801453c <pbuf_realloc+0x100>)
 8014456:	483a      	ldr	r0, [pc, #232]	@ (8014540 <pbuf_realloc+0x104>)
 8014458:	f00b fbc8 	bl	801fbec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	891b      	ldrh	r3, [r3, #8]
 8014460:	887a      	ldrh	r2, [r7, #2]
 8014462:	429a      	cmp	r2, r3
 8014464:	d263      	bcs.n	801452e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	891a      	ldrh	r2, [r3, #8]
 801446a:	887b      	ldrh	r3, [r7, #2]
 801446c:	1ad3      	subs	r3, r2, r3
 801446e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014470:	887b      	ldrh	r3, [r7, #2]
 8014472:	817b      	strh	r3, [r7, #10]
  q = p;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014478:	e018      	b.n	80144ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	895b      	ldrh	r3, [r3, #10]
 801447e:	897a      	ldrh	r2, [r7, #10]
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	891a      	ldrh	r2, [r3, #8]
 8014488:	893b      	ldrh	r3, [r7, #8]
 801448a:	1ad3      	subs	r3, r2, r3
 801448c:	b29a      	uxth	r2, r3
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d106      	bne.n	80144ac <pbuf_realloc+0x70>
 801449e:	4b26      	ldr	r3, [pc, #152]	@ (8014538 <pbuf_realloc+0xfc>)
 80144a0:	f240 12af 	movw	r2, #431	@ 0x1af
 80144a4:	4927      	ldr	r1, [pc, #156]	@ (8014544 <pbuf_realloc+0x108>)
 80144a6:	4826      	ldr	r0, [pc, #152]	@ (8014540 <pbuf_realloc+0x104>)
 80144a8:	f00b fba0 	bl	801fbec <iprintf>
  while (rem_len > q->len) {
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	895b      	ldrh	r3, [r3, #10]
 80144b0:	897a      	ldrh	r2, [r7, #10]
 80144b2:	429a      	cmp	r2, r3
 80144b4:	d8e1      	bhi.n	801447a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	7b1b      	ldrb	r3, [r3, #12]
 80144ba:	f003 030f 	and.w	r3, r3, #15
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d121      	bne.n	8014506 <pbuf_realloc+0xca>
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	895b      	ldrh	r3, [r3, #10]
 80144c6:	897a      	ldrh	r2, [r7, #10]
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d01c      	beq.n	8014506 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	7b5b      	ldrb	r3, [r3, #13]
 80144d0:	f003 0302 	and.w	r3, r3, #2
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d116      	bne.n	8014506 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	685a      	ldr	r2, [r3, #4]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	1ad3      	subs	r3, r2, r3
 80144e0:	b29a      	uxth	r2, r3
 80144e2:	897b      	ldrh	r3, [r7, #10]
 80144e4:	4413      	add	r3, r2
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	4619      	mov	r1, r3
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f7fe fed0 	bl	8013290 <mem_trim>
 80144f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d106      	bne.n	8014506 <pbuf_realloc+0xca>
 80144f8:	4b0f      	ldr	r3, [pc, #60]	@ (8014538 <pbuf_realloc+0xfc>)
 80144fa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80144fe:	4912      	ldr	r1, [pc, #72]	@ (8014548 <pbuf_realloc+0x10c>)
 8014500:	480f      	ldr	r0, [pc, #60]	@ (8014540 <pbuf_realloc+0x104>)
 8014502:	f00b fb73 	bl	801fbec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	897a      	ldrh	r2, [r7, #10]
 801450a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	895a      	ldrh	r2, [r3, #10]
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d004      	beq.n	8014526 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4618      	mov	r0, r3
 8014522:	f000 f911 	bl	8014748 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	2200      	movs	r2, #0
 801452a:	601a      	str	r2, [r3, #0]
 801452c:	e000      	b.n	8014530 <pbuf_realloc+0xf4>
    return;
 801452e:	bf00      	nop

}
 8014530:	3710      	adds	r7, #16
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	08021dc4 	.word	0x08021dc4
 801453c:	08021edc 	.word	0x08021edc
 8014540:	08021e24 	.word	0x08021e24
 8014544:	08021ef4 	.word	0x08021ef4
 8014548:	08021f0c 	.word	0x08021f0c

0801454c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b086      	sub	sp, #24
 8014550:	af00      	add	r7, sp, #0
 8014552:	60f8      	str	r0, [r7, #12]
 8014554:	60b9      	str	r1, [r7, #8]
 8014556:	4613      	mov	r3, r2
 8014558:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d106      	bne.n	801456e <pbuf_add_header_impl+0x22>
 8014560:	4b2b      	ldr	r3, [pc, #172]	@ (8014610 <pbuf_add_header_impl+0xc4>)
 8014562:	f240 12df 	movw	r2, #479	@ 0x1df
 8014566:	492b      	ldr	r1, [pc, #172]	@ (8014614 <pbuf_add_header_impl+0xc8>)
 8014568:	482b      	ldr	r0, [pc, #172]	@ (8014618 <pbuf_add_header_impl+0xcc>)
 801456a:	f00b fb3f 	bl	801fbec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d003      	beq.n	801457c <pbuf_add_header_impl+0x30>
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801457a:	d301      	bcc.n	8014580 <pbuf_add_header_impl+0x34>
    return 1;
 801457c:	2301      	movs	r3, #1
 801457e:	e043      	b.n	8014608 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d101      	bne.n	801458a <pbuf_add_header_impl+0x3e>
    return 0;
 8014586:	2300      	movs	r3, #0
 8014588:	e03e      	b.n	8014608 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	891a      	ldrh	r2, [r3, #8]
 8014592:	8a7b      	ldrh	r3, [r7, #18]
 8014594:	4413      	add	r3, r2
 8014596:	b29b      	uxth	r3, r3
 8014598:	8a7a      	ldrh	r2, [r7, #18]
 801459a:	429a      	cmp	r2, r3
 801459c:	d901      	bls.n	80145a2 <pbuf_add_header_impl+0x56>
    return 1;
 801459e:	2301      	movs	r3, #1
 80145a0:	e032      	b.n	8014608 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	7b1b      	ldrb	r3, [r3, #12]
 80145a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80145a8:	8a3b      	ldrh	r3, [r7, #16]
 80145aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d00c      	beq.n	80145cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	685a      	ldr	r2, [r3, #4]
 80145b6:	68bb      	ldr	r3, [r7, #8]
 80145b8:	425b      	negs	r3, r3
 80145ba:	4413      	add	r3, r2
 80145bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	3310      	adds	r3, #16
 80145c2:	697a      	ldr	r2, [r7, #20]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d20d      	bcs.n	80145e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80145c8:	2301      	movs	r3, #1
 80145ca:	e01d      	b.n	8014608 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80145cc:	79fb      	ldrb	r3, [r7, #7]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d006      	beq.n	80145e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	685a      	ldr	r2, [r3, #4]
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	425b      	negs	r3, r3
 80145da:	4413      	add	r3, r2
 80145dc:	617b      	str	r3, [r7, #20]
 80145de:	e001      	b.n	80145e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80145e0:	2301      	movs	r3, #1
 80145e2:	e011      	b.n	8014608 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	697a      	ldr	r2, [r7, #20]
 80145e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	895a      	ldrh	r2, [r3, #10]
 80145ee:	8a7b      	ldrh	r3, [r7, #18]
 80145f0:	4413      	add	r3, r2
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	891a      	ldrh	r2, [r3, #8]
 80145fc:	8a7b      	ldrh	r3, [r7, #18]
 80145fe:	4413      	add	r3, r2
 8014600:	b29a      	uxth	r2, r3
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	811a      	strh	r2, [r3, #8]


  return 0;
 8014606:	2300      	movs	r3, #0
}
 8014608:	4618      	mov	r0, r3
 801460a:	3718      	adds	r7, #24
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}
 8014610:	08021dc4 	.word	0x08021dc4
 8014614:	08021f28 	.word	0x08021f28
 8014618:	08021e24 	.word	0x08021e24

0801461c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014626:	2200      	movs	r2, #0
 8014628:	6839      	ldr	r1, [r7, #0]
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7ff ff8e 	bl	801454c <pbuf_add_header_impl>
 8014630:	4603      	mov	r3, r0
}
 8014632:	4618      	mov	r0, r3
 8014634:	3708      	adds	r7, #8
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
	...

0801463c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b084      	sub	sp, #16
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d106      	bne.n	801465a <pbuf_remove_header+0x1e>
 801464c:	4b20      	ldr	r3, [pc, #128]	@ (80146d0 <pbuf_remove_header+0x94>)
 801464e:	f240 224b 	movw	r2, #587	@ 0x24b
 8014652:	4920      	ldr	r1, [pc, #128]	@ (80146d4 <pbuf_remove_header+0x98>)
 8014654:	4820      	ldr	r0, [pc, #128]	@ (80146d8 <pbuf_remove_header+0x9c>)
 8014656:	f00b fac9 	bl	801fbec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d003      	beq.n	8014668 <pbuf_remove_header+0x2c>
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014666:	d301      	bcc.n	801466c <pbuf_remove_header+0x30>
    return 1;
 8014668:	2301      	movs	r3, #1
 801466a:	e02c      	b.n	80146c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d101      	bne.n	8014676 <pbuf_remove_header+0x3a>
    return 0;
 8014672:	2300      	movs	r3, #0
 8014674:	e027      	b.n	80146c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	895b      	ldrh	r3, [r3, #10]
 801467e:	89fa      	ldrh	r2, [r7, #14]
 8014680:	429a      	cmp	r2, r3
 8014682:	d908      	bls.n	8014696 <pbuf_remove_header+0x5a>
 8014684:	4b12      	ldr	r3, [pc, #72]	@ (80146d0 <pbuf_remove_header+0x94>)
 8014686:	f240 2255 	movw	r2, #597	@ 0x255
 801468a:	4914      	ldr	r1, [pc, #80]	@ (80146dc <pbuf_remove_header+0xa0>)
 801468c:	4812      	ldr	r0, [pc, #72]	@ (80146d8 <pbuf_remove_header+0x9c>)
 801468e:	f00b faad 	bl	801fbec <iprintf>
 8014692:	2301      	movs	r3, #1
 8014694:	e017      	b.n	80146c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	685a      	ldr	r2, [r3, #4]
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	441a      	add	r2, r3
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	895a      	ldrh	r2, [r3, #10]
 80146ac:	89fb      	ldrh	r3, [r7, #14]
 80146ae:	1ad3      	subs	r3, r2, r3
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	891a      	ldrh	r2, [r3, #8]
 80146ba:	89fb      	ldrh	r3, [r7, #14]
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	b29a      	uxth	r2, r3
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80146c4:	2300      	movs	r3, #0
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	3710      	adds	r7, #16
 80146ca:	46bd      	mov	sp, r7
 80146cc:	bd80      	pop	{r7, pc}
 80146ce:	bf00      	nop
 80146d0:	08021dc4 	.word	0x08021dc4
 80146d4:	08021f28 	.word	0x08021f28
 80146d8:	08021e24 	.word	0x08021e24
 80146dc:	08021f34 	.word	0x08021f34

080146e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	460b      	mov	r3, r1
 80146ea:	807b      	strh	r3, [r7, #2]
 80146ec:	4613      	mov	r3, r2
 80146ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80146f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	da08      	bge.n	801470a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80146f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80146fc:	425b      	negs	r3, r3
 80146fe:	4619      	mov	r1, r3
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f7ff ff9b 	bl	801463c <pbuf_remove_header>
 8014706:	4603      	mov	r3, r0
 8014708:	e007      	b.n	801471a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801470a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801470e:	787a      	ldrb	r2, [r7, #1]
 8014710:	4619      	mov	r1, r3
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f7ff ff1a 	bl	801454c <pbuf_add_header_impl>
 8014718:	4603      	mov	r3, r0
  }
}
 801471a:	4618      	mov	r0, r3
 801471c:	3708      	adds	r7, #8
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014722:	b580      	push	{r7, lr}
 8014724:	b082      	sub	sp, #8
 8014726:	af00      	add	r7, sp, #0
 8014728:	6078      	str	r0, [r7, #4]
 801472a:	460b      	mov	r3, r1
 801472c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801472e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014732:	2201      	movs	r2, #1
 8014734:	4619      	mov	r1, r3
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f7ff ffd2 	bl	80146e0 <pbuf_header_impl>
 801473c:	4603      	mov	r3, r0
}
 801473e:	4618      	mov	r0, r3
 8014740:	3708      	adds	r7, #8
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
	...

08014748 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b088      	sub	sp, #32
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d10b      	bne.n	801476e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d106      	bne.n	801476a <pbuf_free+0x22>
 801475c:	4b3b      	ldr	r3, [pc, #236]	@ (801484c <pbuf_free+0x104>)
 801475e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014762:	493b      	ldr	r1, [pc, #236]	@ (8014850 <pbuf_free+0x108>)
 8014764:	483b      	ldr	r0, [pc, #236]	@ (8014854 <pbuf_free+0x10c>)
 8014766:	f00b fa41 	bl	801fbec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801476a:	2300      	movs	r3, #0
 801476c:	e069      	b.n	8014842 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801476e:	2300      	movs	r3, #0
 8014770:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014772:	e062      	b.n	801483a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014774:	f00a f80e 	bl	801e794 <sys_arch_protect>
 8014778:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	7b9b      	ldrb	r3, [r3, #14]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d106      	bne.n	8014790 <pbuf_free+0x48>
 8014782:	4b32      	ldr	r3, [pc, #200]	@ (801484c <pbuf_free+0x104>)
 8014784:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014788:	4933      	ldr	r1, [pc, #204]	@ (8014858 <pbuf_free+0x110>)
 801478a:	4832      	ldr	r0, [pc, #200]	@ (8014854 <pbuf_free+0x10c>)
 801478c:	f00b fa2e 	bl	801fbec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	7b9b      	ldrb	r3, [r3, #14]
 8014794:	3b01      	subs	r3, #1
 8014796:	b2da      	uxtb	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	739a      	strb	r2, [r3, #14]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	7b9b      	ldrb	r3, [r3, #14]
 80147a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80147a2:	69b8      	ldr	r0, [r7, #24]
 80147a4:	f00a f804 	bl	801e7b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80147a8:	7dfb      	ldrb	r3, [r7, #23]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d143      	bne.n	8014836 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	7b1b      	ldrb	r3, [r3, #12]
 80147b8:	f003 030f 	and.w	r3, r3, #15
 80147bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	7b5b      	ldrb	r3, [r3, #13]
 80147c2:	f003 0302 	and.w	r3, r3, #2
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d011      	beq.n	80147ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	691b      	ldr	r3, [r3, #16]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d106      	bne.n	80147e4 <pbuf_free+0x9c>
 80147d6:	4b1d      	ldr	r3, [pc, #116]	@ (801484c <pbuf_free+0x104>)
 80147d8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80147dc:	491f      	ldr	r1, [pc, #124]	@ (801485c <pbuf_free+0x114>)
 80147de:	481d      	ldr	r0, [pc, #116]	@ (8014854 <pbuf_free+0x10c>)
 80147e0:	f00b fa04 	bl	801fbec <iprintf>
        pc->custom_free_function(p);
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	691b      	ldr	r3, [r3, #16]
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	4798      	blx	r3
 80147ec:	e01d      	b.n	801482a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80147ee:	7bfb      	ldrb	r3, [r7, #15]
 80147f0:	2b02      	cmp	r3, #2
 80147f2:	d104      	bne.n	80147fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80147f4:	6879      	ldr	r1, [r7, #4]
 80147f6:	200c      	movs	r0, #12
 80147f8:	f7ff f902 	bl	8013a00 <memp_free>
 80147fc:	e015      	b.n	801482a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80147fe:	7bfb      	ldrb	r3, [r7, #15]
 8014800:	2b01      	cmp	r3, #1
 8014802:	d104      	bne.n	801480e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014804:	6879      	ldr	r1, [r7, #4]
 8014806:	200b      	movs	r0, #11
 8014808:	f7ff f8fa 	bl	8013a00 <memp_free>
 801480c:	e00d      	b.n	801482a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801480e:	7bfb      	ldrb	r3, [r7, #15]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d103      	bne.n	801481c <pbuf_free+0xd4>
          mem_free(p);
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7fe fc77 	bl	8013108 <mem_free>
 801481a:	e006      	b.n	801482a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801481c:	4b0b      	ldr	r3, [pc, #44]	@ (801484c <pbuf_free+0x104>)
 801481e:	f240 320f 	movw	r2, #783	@ 0x30f
 8014822:	490f      	ldr	r1, [pc, #60]	@ (8014860 <pbuf_free+0x118>)
 8014824:	480b      	ldr	r0, [pc, #44]	@ (8014854 <pbuf_free+0x10c>)
 8014826:	f00b f9e1 	bl	801fbec <iprintf>
        }
      }
      count++;
 801482a:	7ffb      	ldrb	r3, [r7, #31]
 801482c:	3301      	adds	r3, #1
 801482e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	607b      	str	r3, [r7, #4]
 8014834:	e001      	b.n	801483a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014836:	2300      	movs	r3, #0
 8014838:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d199      	bne.n	8014774 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014840:	7ffb      	ldrb	r3, [r7, #31]
}
 8014842:	4618      	mov	r0, r3
 8014844:	3720      	adds	r7, #32
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
 801484a:	bf00      	nop
 801484c:	08021dc4 	.word	0x08021dc4
 8014850:	08021f28 	.word	0x08021f28
 8014854:	08021e24 	.word	0x08021e24
 8014858:	08021f54 	.word	0x08021f54
 801485c:	08021f6c 	.word	0x08021f6c
 8014860:	08021f90 	.word	0x08021f90

08014864 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014864:	b480      	push	{r7}
 8014866:	b085      	sub	sp, #20
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801486c:	2300      	movs	r3, #0
 801486e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014870:	e005      	b.n	801487e <pbuf_clen+0x1a>
    ++len;
 8014872:	89fb      	ldrh	r3, [r7, #14]
 8014874:	3301      	adds	r3, #1
 8014876:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d1f6      	bne.n	8014872 <pbuf_clen+0xe>
  }
  return len;
 8014884:	89fb      	ldrh	r3, [r7, #14]
}
 8014886:	4618      	mov	r0, r3
 8014888:	3714      	adds	r7, #20
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr
	...

08014894 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d016      	beq.n	80148d0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80148a2:	f009 ff77 	bl	801e794 <sys_arch_protect>
 80148a6:	60f8      	str	r0, [r7, #12]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	7b9b      	ldrb	r3, [r3, #14]
 80148ac:	3301      	adds	r3, #1
 80148ae:	b2da      	uxtb	r2, r3
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	739a      	strb	r2, [r3, #14]
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	f009 ff7b 	bl	801e7b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	7b9b      	ldrb	r3, [r3, #14]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d106      	bne.n	80148d0 <pbuf_ref+0x3c>
 80148c2:	4b05      	ldr	r3, [pc, #20]	@ (80148d8 <pbuf_ref+0x44>)
 80148c4:	f240 3242 	movw	r2, #834	@ 0x342
 80148c8:	4904      	ldr	r1, [pc, #16]	@ (80148dc <pbuf_ref+0x48>)
 80148ca:	4805      	ldr	r0, [pc, #20]	@ (80148e0 <pbuf_ref+0x4c>)
 80148cc:	f00b f98e 	bl	801fbec <iprintf>
  }
}
 80148d0:	bf00      	nop
 80148d2:	3710      	adds	r7, #16
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	08021dc4 	.word	0x08021dc4
 80148dc:	08021fa4 	.word	0x08021fa4
 80148e0:	08021e24 	.word	0x08021e24

080148e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d002      	beq.n	80148fa <pbuf_cat+0x16>
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d107      	bne.n	801490a <pbuf_cat+0x26>
 80148fa:	4b20      	ldr	r3, [pc, #128]	@ (801497c <pbuf_cat+0x98>)
 80148fc:	f240 3259 	movw	r2, #857	@ 0x359
 8014900:	491f      	ldr	r1, [pc, #124]	@ (8014980 <pbuf_cat+0x9c>)
 8014902:	4820      	ldr	r0, [pc, #128]	@ (8014984 <pbuf_cat+0xa0>)
 8014904:	f00b f972 	bl	801fbec <iprintf>
 8014908:	e034      	b.n	8014974 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	60fb      	str	r3, [r7, #12]
 801490e:	e00a      	b.n	8014926 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	891a      	ldrh	r2, [r3, #8]
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	891b      	ldrh	r3, [r3, #8]
 8014918:	4413      	add	r3, r2
 801491a:	b29a      	uxth	r2, r3
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	60fb      	str	r3, [r7, #12]
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d1f0      	bne.n	8014910 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	891a      	ldrh	r2, [r3, #8]
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	895b      	ldrh	r3, [r3, #10]
 8014936:	429a      	cmp	r2, r3
 8014938:	d006      	beq.n	8014948 <pbuf_cat+0x64>
 801493a:	4b10      	ldr	r3, [pc, #64]	@ (801497c <pbuf_cat+0x98>)
 801493c:	f240 3262 	movw	r2, #866	@ 0x362
 8014940:	4911      	ldr	r1, [pc, #68]	@ (8014988 <pbuf_cat+0xa4>)
 8014942:	4810      	ldr	r0, [pc, #64]	@ (8014984 <pbuf_cat+0xa0>)
 8014944:	f00b f952 	bl	801fbec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d006      	beq.n	801495e <pbuf_cat+0x7a>
 8014950:	4b0a      	ldr	r3, [pc, #40]	@ (801497c <pbuf_cat+0x98>)
 8014952:	f240 3263 	movw	r2, #867	@ 0x363
 8014956:	490d      	ldr	r1, [pc, #52]	@ (801498c <pbuf_cat+0xa8>)
 8014958:	480a      	ldr	r0, [pc, #40]	@ (8014984 <pbuf_cat+0xa0>)
 801495a:	f00b f947 	bl	801fbec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	891a      	ldrh	r2, [r3, #8]
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	891b      	ldrh	r3, [r3, #8]
 8014966:	4413      	add	r3, r2
 8014968:	b29a      	uxth	r2, r3
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	683a      	ldr	r2, [r7, #0]
 8014972:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	08021dc4 	.word	0x08021dc4
 8014980:	08021fb8 	.word	0x08021fb8
 8014984:	08021e24 	.word	0x08021e24
 8014988:	08021ff0 	.word	0x08021ff0
 801498c:	08022020 	.word	0x08022020

08014990 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801499a:	6839      	ldr	r1, [r7, #0]
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7ff ffa1 	bl	80148e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80149a2:	6838      	ldr	r0, [r7, #0]
 80149a4:	f7ff ff76 	bl	8014894 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80149a8:	bf00      	nop
 80149aa:	3708      	adds	r7, #8
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}

080149b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80149ba:	2300      	movs	r3, #0
 80149bc:	617b      	str	r3, [r7, #20]
 80149be:	2300      	movs	r3, #0
 80149c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d008      	beq.n	80149da <pbuf_copy+0x2a>
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d005      	beq.n	80149da <pbuf_copy+0x2a>
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	891a      	ldrh	r2, [r3, #8]
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	891b      	ldrh	r3, [r3, #8]
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d209      	bcs.n	80149ee <pbuf_copy+0x3e>
 80149da:	4b57      	ldr	r3, [pc, #348]	@ (8014b38 <pbuf_copy+0x188>)
 80149dc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80149e0:	4956      	ldr	r1, [pc, #344]	@ (8014b3c <pbuf_copy+0x18c>)
 80149e2:	4857      	ldr	r0, [pc, #348]	@ (8014b40 <pbuf_copy+0x190>)
 80149e4:	f00b f902 	bl	801fbec <iprintf>
 80149e8:	f06f 030f 	mvn.w	r3, #15
 80149ec:	e09f      	b.n	8014b2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	895b      	ldrh	r3, [r3, #10]
 80149f2:	461a      	mov	r2, r3
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	1ad2      	subs	r2, r2, r3
 80149f8:	683b      	ldr	r3, [r7, #0]
 80149fa:	895b      	ldrh	r3, [r3, #10]
 80149fc:	4619      	mov	r1, r3
 80149fe:	693b      	ldr	r3, [r7, #16]
 8014a00:	1acb      	subs	r3, r1, r3
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d306      	bcc.n	8014a14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	895b      	ldrh	r3, [r3, #10]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	1ad3      	subs	r3, r2, r3
 8014a10:	60fb      	str	r3, [r7, #12]
 8014a12:	e005      	b.n	8014a20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	895b      	ldrh	r3, [r3, #10]
 8014a18:	461a      	mov	r2, r3
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	1ad3      	subs	r3, r2, r3
 8014a1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	685a      	ldr	r2, [r3, #4]
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	18d0      	adds	r0, r2, r3
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	685a      	ldr	r2, [r3, #4]
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	4413      	add	r3, r2
 8014a30:	68fa      	ldr	r2, [r7, #12]
 8014a32:	4619      	mov	r1, r3
 8014a34:	f00b fb05 	bl	8020042 <memcpy>
    offset_to += len;
 8014a38:	697a      	ldr	r2, [r7, #20]
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	4413      	add	r3, r2
 8014a3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014a40:	693a      	ldr	r2, [r7, #16]
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	4413      	add	r3, r2
 8014a46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	895b      	ldrh	r3, [r3, #10]
 8014a4c:	461a      	mov	r2, r3
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	4293      	cmp	r3, r2
 8014a52:	d906      	bls.n	8014a62 <pbuf_copy+0xb2>
 8014a54:	4b38      	ldr	r3, [pc, #224]	@ (8014b38 <pbuf_copy+0x188>)
 8014a56:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8014a5a:	493a      	ldr	r1, [pc, #232]	@ (8014b44 <pbuf_copy+0x194>)
 8014a5c:	4838      	ldr	r0, [pc, #224]	@ (8014b40 <pbuf_copy+0x190>)
 8014a5e:	f00b f8c5 	bl	801fbec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	895b      	ldrh	r3, [r3, #10]
 8014a66:	461a      	mov	r2, r3
 8014a68:	693b      	ldr	r3, [r7, #16]
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	d906      	bls.n	8014a7c <pbuf_copy+0xcc>
 8014a6e:	4b32      	ldr	r3, [pc, #200]	@ (8014b38 <pbuf_copy+0x188>)
 8014a70:	f240 32da 	movw	r2, #986	@ 0x3da
 8014a74:	4934      	ldr	r1, [pc, #208]	@ (8014b48 <pbuf_copy+0x198>)
 8014a76:	4832      	ldr	r0, [pc, #200]	@ (8014b40 <pbuf_copy+0x190>)
 8014a78:	f00b f8b8 	bl	801fbec <iprintf>
    if (offset_from >= p_from->len) {
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	895b      	ldrh	r3, [r3, #10]
 8014a80:	461a      	mov	r2, r3
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	4293      	cmp	r3, r2
 8014a86:	d304      	bcc.n	8014a92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	895b      	ldrh	r3, [r3, #10]
 8014a96:	461a      	mov	r2, r3
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	4293      	cmp	r3, r2
 8014a9c:	d114      	bne.n	8014ac8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d10c      	bne.n	8014ac8 <pbuf_copy+0x118>
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d009      	beq.n	8014ac8 <pbuf_copy+0x118>
 8014ab4:	4b20      	ldr	r3, [pc, #128]	@ (8014b38 <pbuf_copy+0x188>)
 8014ab6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8014aba:	4924      	ldr	r1, [pc, #144]	@ (8014b4c <pbuf_copy+0x19c>)
 8014abc:	4820      	ldr	r0, [pc, #128]	@ (8014b40 <pbuf_copy+0x190>)
 8014abe:	f00b f895 	bl	801fbec <iprintf>
 8014ac2:	f06f 030f 	mvn.w	r3, #15
 8014ac6:	e032      	b.n	8014b2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d013      	beq.n	8014af6 <pbuf_copy+0x146>
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	895a      	ldrh	r2, [r3, #10]
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	891b      	ldrh	r3, [r3, #8]
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d10d      	bne.n	8014af6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d009      	beq.n	8014af6 <pbuf_copy+0x146>
 8014ae2:	4b15      	ldr	r3, [pc, #84]	@ (8014b38 <pbuf_copy+0x188>)
 8014ae4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8014ae8:	4919      	ldr	r1, [pc, #100]	@ (8014b50 <pbuf_copy+0x1a0>)
 8014aea:	4815      	ldr	r0, [pc, #84]	@ (8014b40 <pbuf_copy+0x190>)
 8014aec:	f00b f87e 	bl	801fbec <iprintf>
 8014af0:	f06f 0305 	mvn.w	r3, #5
 8014af4:	e01b      	b.n	8014b2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d013      	beq.n	8014b24 <pbuf_copy+0x174>
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	895a      	ldrh	r2, [r3, #10]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	891b      	ldrh	r3, [r3, #8]
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d10d      	bne.n	8014b24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d009      	beq.n	8014b24 <pbuf_copy+0x174>
 8014b10:	4b09      	ldr	r3, [pc, #36]	@ (8014b38 <pbuf_copy+0x188>)
 8014b12:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8014b16:	490e      	ldr	r1, [pc, #56]	@ (8014b50 <pbuf_copy+0x1a0>)
 8014b18:	4809      	ldr	r0, [pc, #36]	@ (8014b40 <pbuf_copy+0x190>)
 8014b1a:	f00b f867 	bl	801fbec <iprintf>
 8014b1e:	f06f 0305 	mvn.w	r3, #5
 8014b22:	e004      	b.n	8014b2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f47f af61 	bne.w	80149ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014b2c:	2300      	movs	r3, #0
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3718      	adds	r7, #24
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	08021dc4 	.word	0x08021dc4
 8014b3c:	0802206c 	.word	0x0802206c
 8014b40:	08021e24 	.word	0x08021e24
 8014b44:	0802209c 	.word	0x0802209c
 8014b48:	080220b4 	.word	0x080220b4
 8014b4c:	080220d0 	.word	0x080220d0
 8014b50:	080220e0 	.word	0x080220e0

08014b54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b088      	sub	sp, #32
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	60b9      	str	r1, [r7, #8]
 8014b5e:	4611      	mov	r1, r2
 8014b60:	461a      	mov	r2, r3
 8014b62:	460b      	mov	r3, r1
 8014b64:	80fb      	strh	r3, [r7, #6]
 8014b66:	4613      	mov	r3, r2
 8014b68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d108      	bne.n	8014b8a <pbuf_copy_partial+0x36>
 8014b78:	4b2b      	ldr	r3, [pc, #172]	@ (8014c28 <pbuf_copy_partial+0xd4>)
 8014b7a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014b7e:	492b      	ldr	r1, [pc, #172]	@ (8014c2c <pbuf_copy_partial+0xd8>)
 8014b80:	482b      	ldr	r0, [pc, #172]	@ (8014c30 <pbuf_copy_partial+0xdc>)
 8014b82:	f00b f833 	bl	801fbec <iprintf>
 8014b86:	2300      	movs	r3, #0
 8014b88:	e04a      	b.n	8014c20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d108      	bne.n	8014ba2 <pbuf_copy_partial+0x4e>
 8014b90:	4b25      	ldr	r3, [pc, #148]	@ (8014c28 <pbuf_copy_partial+0xd4>)
 8014b92:	f240 420b 	movw	r2, #1035	@ 0x40b
 8014b96:	4927      	ldr	r1, [pc, #156]	@ (8014c34 <pbuf_copy_partial+0xe0>)
 8014b98:	4825      	ldr	r0, [pc, #148]	@ (8014c30 <pbuf_copy_partial+0xdc>)
 8014b9a:	f00b f827 	bl	801fbec <iprintf>
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	e03e      	b.n	8014c20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	61fb      	str	r3, [r7, #28]
 8014ba6:	e034      	b.n	8014c12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014ba8:	88bb      	ldrh	r3, [r7, #4]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d00a      	beq.n	8014bc4 <pbuf_copy_partial+0x70>
 8014bae:	69fb      	ldr	r3, [r7, #28]
 8014bb0:	895b      	ldrh	r3, [r3, #10]
 8014bb2:	88ba      	ldrh	r2, [r7, #4]
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	d305      	bcc.n	8014bc4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	895b      	ldrh	r3, [r3, #10]
 8014bbc:	88ba      	ldrh	r2, [r7, #4]
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	80bb      	strh	r3, [r7, #4]
 8014bc2:	e023      	b.n	8014c0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	895a      	ldrh	r2, [r3, #10]
 8014bc8:	88bb      	ldrh	r3, [r7, #4]
 8014bca:	1ad3      	subs	r3, r2, r3
 8014bcc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014bce:	8b3a      	ldrh	r2, [r7, #24]
 8014bd0:	88fb      	ldrh	r3, [r7, #6]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d901      	bls.n	8014bda <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014bd6:	88fb      	ldrh	r3, [r7, #6]
 8014bd8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014bda:	8b7b      	ldrh	r3, [r7, #26]
 8014bdc:	68ba      	ldr	r2, [r7, #8]
 8014bde:	18d0      	adds	r0, r2, r3
 8014be0:	69fb      	ldr	r3, [r7, #28]
 8014be2:	685a      	ldr	r2, [r3, #4]
 8014be4:	88bb      	ldrh	r3, [r7, #4]
 8014be6:	4413      	add	r3, r2
 8014be8:	8b3a      	ldrh	r2, [r7, #24]
 8014bea:	4619      	mov	r1, r3
 8014bec:	f00b fa29 	bl	8020042 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014bf0:	8afa      	ldrh	r2, [r7, #22]
 8014bf2:	8b3b      	ldrh	r3, [r7, #24]
 8014bf4:	4413      	add	r3, r2
 8014bf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014bf8:	8b7a      	ldrh	r2, [r7, #26]
 8014bfa:	8b3b      	ldrh	r3, [r7, #24]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014c00:	88fa      	ldrh	r2, [r7, #6]
 8014c02:	8b3b      	ldrh	r3, [r7, #24]
 8014c04:	1ad3      	subs	r3, r2, r3
 8014c06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	61fb      	str	r3, [r7, #28]
 8014c12:	88fb      	ldrh	r3, [r7, #6]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d002      	beq.n	8014c1e <pbuf_copy_partial+0xca>
 8014c18:	69fb      	ldr	r3, [r7, #28]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d1c4      	bne.n	8014ba8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014c1e:	8afb      	ldrh	r3, [r7, #22]
}
 8014c20:	4618      	mov	r0, r3
 8014c22:	3720      	adds	r7, #32
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}
 8014c28:	08021dc4 	.word	0x08021dc4
 8014c2c:	0802210c 	.word	0x0802210c
 8014c30:	08021e24 	.word	0x08021e24
 8014c34:	0802212c 	.word	0x0802212c

08014c38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	4603      	mov	r3, r0
 8014c40:	603a      	str	r2, [r7, #0]
 8014c42:	71fb      	strb	r3, [r7, #7]
 8014c44:	460b      	mov	r3, r1
 8014c46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	8919      	ldrh	r1, [r3, #8]
 8014c4c:	88ba      	ldrh	r2, [r7, #4]
 8014c4e:	79fb      	ldrb	r3, [r7, #7]
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7ff fa95 	bl	8014180 <pbuf_alloc>
 8014c56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d101      	bne.n	8014c62 <pbuf_clone+0x2a>
    return NULL;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	e011      	b.n	8014c86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014c62:	6839      	ldr	r1, [r7, #0]
 8014c64:	68f8      	ldr	r0, [r7, #12]
 8014c66:	f7ff fea3 	bl	80149b0 <pbuf_copy>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014c6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d006      	beq.n	8014c84 <pbuf_clone+0x4c>
 8014c76:	4b06      	ldr	r3, [pc, #24]	@ (8014c90 <pbuf_clone+0x58>)
 8014c78:	f240 5224 	movw	r2, #1316	@ 0x524
 8014c7c:	4905      	ldr	r1, [pc, #20]	@ (8014c94 <pbuf_clone+0x5c>)
 8014c7e:	4806      	ldr	r0, [pc, #24]	@ (8014c98 <pbuf_clone+0x60>)
 8014c80:	f00a ffb4 	bl	801fbec <iprintf>
  return q;
 8014c84:	68fb      	ldr	r3, [r7, #12]
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	3710      	adds	r7, #16
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	08021dc4 	.word	0x08021dc4
 8014c94:	08022238 	.word	0x08022238
 8014c98:	08021e24 	.word	0x08021e24

08014c9c <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8014ca0:	bf00      	nop
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca8:	4770      	bx	lr
	...

08014cac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014cb0:	f00a fe9c 	bl	801f9ec <rand>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	b29b      	uxth	r3, r3
 8014cb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	4b01      	ldr	r3, [pc, #4]	@ (8014ccc <tcp_init+0x20>)
 8014cc6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014cc8:	bf00      	nop
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	20000024 	.word	0x20000024

08014cd0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b082      	sub	sp, #8
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	7d1b      	ldrb	r3, [r3, #20]
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	d105      	bne.n	8014cec <tcp_free+0x1c>
 8014ce0:	4b06      	ldr	r3, [pc, #24]	@ (8014cfc <tcp_free+0x2c>)
 8014ce2:	22d4      	movs	r2, #212	@ 0xd4
 8014ce4:	4906      	ldr	r1, [pc, #24]	@ (8014d00 <tcp_free+0x30>)
 8014ce6:	4807      	ldr	r0, [pc, #28]	@ (8014d04 <tcp_free+0x34>)
 8014ce8:	f00a ff80 	bl	801fbec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014cec:	6879      	ldr	r1, [r7, #4]
 8014cee:	2001      	movs	r0, #1
 8014cf0:	f7fe fe86 	bl	8013a00 <memp_free>
}
 8014cf4:	bf00      	nop
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	080222c4 	.word	0x080222c4
 8014d00:	080222f4 	.word	0x080222f4
 8014d04:	08022308 	.word	0x08022308

08014d08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	7d1b      	ldrb	r3, [r3, #20]
 8014d14:	2b01      	cmp	r3, #1
 8014d16:	d105      	bne.n	8014d24 <tcp_free_listen+0x1c>
 8014d18:	4b06      	ldr	r3, [pc, #24]	@ (8014d34 <tcp_free_listen+0x2c>)
 8014d1a:	22df      	movs	r2, #223	@ 0xdf
 8014d1c:	4906      	ldr	r1, [pc, #24]	@ (8014d38 <tcp_free_listen+0x30>)
 8014d1e:	4807      	ldr	r0, [pc, #28]	@ (8014d3c <tcp_free_listen+0x34>)
 8014d20:	f00a ff64 	bl	801fbec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014d24:	6879      	ldr	r1, [r7, #4]
 8014d26:	2002      	movs	r0, #2
 8014d28:	f7fe fe6a 	bl	8013a00 <memp_free>
}
 8014d2c:	bf00      	nop
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	080222c4 	.word	0x080222c4
 8014d38:	08022330 	.word	0x08022330
 8014d3c:	08022308 	.word	0x08022308

08014d40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014d44:	f000 ffde 	bl	8015d04 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014d48:	4b07      	ldr	r3, [pc, #28]	@ (8014d68 <tcp_tmr+0x28>)
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	3301      	adds	r3, #1
 8014d4e:	b2da      	uxtb	r2, r3
 8014d50:	4b05      	ldr	r3, [pc, #20]	@ (8014d68 <tcp_tmr+0x28>)
 8014d52:	701a      	strb	r2, [r3, #0]
 8014d54:	4b04      	ldr	r3, [pc, #16]	@ (8014d68 <tcp_tmr+0x28>)
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	f003 0301 	and.w	r3, r3, #1
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d001      	beq.n	8014d64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014d60:	f000 fc8e 	bl	8015680 <tcp_slowtmr>
  }
}
 8014d64:	bf00      	nop
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	2002d3c1 	.word	0x2002d3c1

08014d6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d105      	bne.n	8014d88 <tcp_remove_listener+0x1c>
 8014d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8014db4 <tcp_remove_listener+0x48>)
 8014d7e:	22ff      	movs	r2, #255	@ 0xff
 8014d80:	490d      	ldr	r1, [pc, #52]	@ (8014db8 <tcp_remove_listener+0x4c>)
 8014d82:	480e      	ldr	r0, [pc, #56]	@ (8014dbc <tcp_remove_listener+0x50>)
 8014d84:	f00a ff32 	bl	801fbec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	60fb      	str	r3, [r7, #12]
 8014d8c:	e00a      	b.n	8014da4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014d92:	683a      	ldr	r2, [r7, #0]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d102      	bne.n	8014d9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	68db      	ldr	r3, [r3, #12]
 8014da2:	60fb      	str	r3, [r7, #12]
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d1f1      	bne.n	8014d8e <tcp_remove_listener+0x22>
    }
  }
}
 8014daa:	bf00      	nop
 8014dac:	bf00      	nop
 8014dae:	3710      	adds	r7, #16
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	080222c4 	.word	0x080222c4
 8014db8:	0802234c 	.word	0x0802234c
 8014dbc:	08022308 	.word	0x08022308

08014dc0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b084      	sub	sp, #16
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d106      	bne.n	8014ddc <tcp_listen_closed+0x1c>
 8014dce:	4b14      	ldr	r3, [pc, #80]	@ (8014e20 <tcp_listen_closed+0x60>)
 8014dd0:	f240 1211 	movw	r2, #273	@ 0x111
 8014dd4:	4913      	ldr	r1, [pc, #76]	@ (8014e24 <tcp_listen_closed+0x64>)
 8014dd6:	4814      	ldr	r0, [pc, #80]	@ (8014e28 <tcp_listen_closed+0x68>)
 8014dd8:	f00a ff08 	bl	801fbec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	7d1b      	ldrb	r3, [r3, #20]
 8014de0:	2b01      	cmp	r3, #1
 8014de2:	d006      	beq.n	8014df2 <tcp_listen_closed+0x32>
 8014de4:	4b0e      	ldr	r3, [pc, #56]	@ (8014e20 <tcp_listen_closed+0x60>)
 8014de6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8014dea:	4910      	ldr	r1, [pc, #64]	@ (8014e2c <tcp_listen_closed+0x6c>)
 8014dec:	480e      	ldr	r0, [pc, #56]	@ (8014e28 <tcp_listen_closed+0x68>)
 8014dee:	f00a fefd 	bl	801fbec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014df2:	2301      	movs	r3, #1
 8014df4:	60fb      	str	r3, [r7, #12]
 8014df6:	e00b      	b.n	8014e10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014df8:	4a0d      	ldr	r2, [pc, #52]	@ (8014e30 <tcp_listen_closed+0x70>)
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	6879      	ldr	r1, [r7, #4]
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7ff ffb1 	bl	8014d6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	60fb      	str	r3, [r7, #12]
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2b03      	cmp	r3, #3
 8014e14:	d9f0      	bls.n	8014df8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014e16:	bf00      	nop
 8014e18:	bf00      	nop
 8014e1a:	3710      	adds	r7, #16
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bd80      	pop	{r7, pc}
 8014e20:	080222c4 	.word	0x080222c4
 8014e24:	08022374 	.word	0x08022374
 8014e28:	08022308 	.word	0x08022308
 8014e2c:	08022380 	.word	0x08022380
 8014e30:	08024938 	.word	0x08024938

08014e34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014e34:	b5b0      	push	{r4, r5, r7, lr}
 8014e36:	b088      	sub	sp, #32
 8014e38:	af04      	add	r7, sp, #16
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d106      	bne.n	8014e54 <tcp_close_shutdown+0x20>
 8014e46:	4b63      	ldr	r3, [pc, #396]	@ (8014fd4 <tcp_close_shutdown+0x1a0>)
 8014e48:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014e4c:	4962      	ldr	r1, [pc, #392]	@ (8014fd8 <tcp_close_shutdown+0x1a4>)
 8014e4e:	4863      	ldr	r0, [pc, #396]	@ (8014fdc <tcp_close_shutdown+0x1a8>)
 8014e50:	f00a fecc 	bl	801fbec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014e54:	78fb      	ldrb	r3, [r7, #3]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d066      	beq.n	8014f28 <tcp_close_shutdown+0xf4>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	7d1b      	ldrb	r3, [r3, #20]
 8014e5e:	2b04      	cmp	r3, #4
 8014e60:	d003      	beq.n	8014e6a <tcp_close_shutdown+0x36>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	7d1b      	ldrb	r3, [r3, #20]
 8014e66:	2b07      	cmp	r3, #7
 8014e68:	d15e      	bne.n	8014f28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d104      	bne.n	8014e7c <tcp_close_shutdown+0x48>
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e76:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014e7a:	d055      	beq.n	8014f28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	8b5b      	ldrh	r3, [r3, #26]
 8014e80:	f003 0310 	and.w	r3, r3, #16
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d106      	bne.n	8014e96 <tcp_close_shutdown+0x62>
 8014e88:	4b52      	ldr	r3, [pc, #328]	@ (8014fd4 <tcp_close_shutdown+0x1a0>)
 8014e8a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014e8e:	4954      	ldr	r1, [pc, #336]	@ (8014fe0 <tcp_close_shutdown+0x1ac>)
 8014e90:	4852      	ldr	r0, [pc, #328]	@ (8014fdc <tcp_close_shutdown+0x1a8>)
 8014e92:	f00a feab 	bl	801fbec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014e9e:	687d      	ldr	r5, [r7, #4]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	3304      	adds	r3, #4
 8014ea4:	687a      	ldr	r2, [r7, #4]
 8014ea6:	8ad2      	ldrh	r2, [r2, #22]
 8014ea8:	6879      	ldr	r1, [r7, #4]
 8014eaa:	8b09      	ldrh	r1, [r1, #24]
 8014eac:	9102      	str	r1, [sp, #8]
 8014eae:	9201      	str	r2, [sp, #4]
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	462b      	mov	r3, r5
 8014eb4:	4622      	mov	r2, r4
 8014eb6:	4601      	mov	r1, r0
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f005 fdcb 	bl	801aa54 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f001 fafa 	bl	80164b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014ec4:	4b47      	ldr	r3, [pc, #284]	@ (8014fe4 <tcp_close_shutdown+0x1b0>)
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	687a      	ldr	r2, [r7, #4]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d105      	bne.n	8014eda <tcp_close_shutdown+0xa6>
 8014ece:	4b45      	ldr	r3, [pc, #276]	@ (8014fe4 <tcp_close_shutdown+0x1b0>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	68db      	ldr	r3, [r3, #12]
 8014ed4:	4a43      	ldr	r2, [pc, #268]	@ (8014fe4 <tcp_close_shutdown+0x1b0>)
 8014ed6:	6013      	str	r3, [r2, #0]
 8014ed8:	e013      	b.n	8014f02 <tcp_close_shutdown+0xce>
 8014eda:	4b42      	ldr	r3, [pc, #264]	@ (8014fe4 <tcp_close_shutdown+0x1b0>)
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	60fb      	str	r3, [r7, #12]
 8014ee0:	e00c      	b.n	8014efc <tcp_close_shutdown+0xc8>
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	68db      	ldr	r3, [r3, #12]
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d104      	bne.n	8014ef6 <tcp_close_shutdown+0xc2>
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	68da      	ldr	r2, [r3, #12]
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	60da      	str	r2, [r3, #12]
 8014ef4:	e005      	b.n	8014f02 <tcp_close_shutdown+0xce>
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	60fb      	str	r3, [r7, #12]
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d1ef      	bne.n	8014ee2 <tcp_close_shutdown+0xae>
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	2200      	movs	r2, #0
 8014f06:	60da      	str	r2, [r3, #12]
 8014f08:	4b37      	ldr	r3, [pc, #220]	@ (8014fe8 <tcp_close_shutdown+0x1b4>)
 8014f0a:	2201      	movs	r2, #1
 8014f0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014f0e:	4b37      	ldr	r3, [pc, #220]	@ (8014fec <tcp_close_shutdown+0x1b8>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	687a      	ldr	r2, [r7, #4]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d102      	bne.n	8014f1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014f18:	f003 fff4 	bl	8018f04 <tcp_trigger_input_pcb_close>
 8014f1c:	e002      	b.n	8014f24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f7ff fed6 	bl	8014cd0 <tcp_free>
      }
      return ERR_OK;
 8014f24:	2300      	movs	r3, #0
 8014f26:	e050      	b.n	8014fca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	7d1b      	ldrb	r3, [r3, #20]
 8014f2c:	2b02      	cmp	r3, #2
 8014f2e:	d03b      	beq.n	8014fa8 <tcp_close_shutdown+0x174>
 8014f30:	2b02      	cmp	r3, #2
 8014f32:	dc44      	bgt.n	8014fbe <tcp_close_shutdown+0x18a>
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d002      	beq.n	8014f3e <tcp_close_shutdown+0x10a>
 8014f38:	2b01      	cmp	r3, #1
 8014f3a:	d02a      	beq.n	8014f92 <tcp_close_shutdown+0x15e>
 8014f3c:	e03f      	b.n	8014fbe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	8adb      	ldrh	r3, [r3, #22]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d021      	beq.n	8014f8a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014f46:	4b2a      	ldr	r3, [pc, #168]	@ (8014ff0 <tcp_close_shutdown+0x1bc>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d105      	bne.n	8014f5c <tcp_close_shutdown+0x128>
 8014f50:	4b27      	ldr	r3, [pc, #156]	@ (8014ff0 <tcp_close_shutdown+0x1bc>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	68db      	ldr	r3, [r3, #12]
 8014f56:	4a26      	ldr	r2, [pc, #152]	@ (8014ff0 <tcp_close_shutdown+0x1bc>)
 8014f58:	6013      	str	r3, [r2, #0]
 8014f5a:	e013      	b.n	8014f84 <tcp_close_shutdown+0x150>
 8014f5c:	4b24      	ldr	r3, [pc, #144]	@ (8014ff0 <tcp_close_shutdown+0x1bc>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	60bb      	str	r3, [r7, #8]
 8014f62:	e00c      	b.n	8014f7e <tcp_close_shutdown+0x14a>
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	68db      	ldr	r3, [r3, #12]
 8014f68:	687a      	ldr	r2, [r7, #4]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d104      	bne.n	8014f78 <tcp_close_shutdown+0x144>
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	68da      	ldr	r2, [r3, #12]
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	60da      	str	r2, [r3, #12]
 8014f76:	e005      	b.n	8014f84 <tcp_close_shutdown+0x150>
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	68db      	ldr	r3, [r3, #12]
 8014f7c:	60bb      	str	r3, [r7, #8]
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d1ef      	bne.n	8014f64 <tcp_close_shutdown+0x130>
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2200      	movs	r2, #0
 8014f88:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f7ff fea0 	bl	8014cd0 <tcp_free>
      break;
 8014f90:	e01a      	b.n	8014fc8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f7ff ff14 	bl	8014dc0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014f98:	6879      	ldr	r1, [r7, #4]
 8014f9a:	4816      	ldr	r0, [pc, #88]	@ (8014ff4 <tcp_close_shutdown+0x1c0>)
 8014f9c:	f001 fadc 	bl	8016558 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f7ff feb1 	bl	8014d08 <tcp_free_listen>
      break;
 8014fa6:	e00f      	b.n	8014fc8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014fa8:	6879      	ldr	r1, [r7, #4]
 8014faa:	480e      	ldr	r0, [pc, #56]	@ (8014fe4 <tcp_close_shutdown+0x1b0>)
 8014fac:	f001 fad4 	bl	8016558 <tcp_pcb_remove>
 8014fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8014fe8 <tcp_close_shutdown+0x1b4>)
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f7ff fe8a 	bl	8014cd0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014fbc:	e004      	b.n	8014fc8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f000 f81a 	bl	8014ff8 <tcp_close_shutdown_fin>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	e000      	b.n	8014fca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014fc8:	2300      	movs	r3, #0
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	080222c4 	.word	0x080222c4
 8014fd8:	08022398 	.word	0x08022398
 8014fdc:	08022308 	.word	0x08022308
 8014fe0:	080223b8 	.word	0x080223b8
 8014fe4:	2002d3b8 	.word	0x2002d3b8
 8014fe8:	2002d3c0 	.word	0x2002d3c0
 8014fec:	2002d3f8 	.word	0x2002d3f8
 8014ff0:	2002d3b0 	.word	0x2002d3b0
 8014ff4:	2002d3b4 	.word	0x2002d3b4

08014ff8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d106      	bne.n	8015014 <tcp_close_shutdown_fin+0x1c>
 8015006:	4b2e      	ldr	r3, [pc, #184]	@ (80150c0 <tcp_close_shutdown_fin+0xc8>)
 8015008:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801500c:	492d      	ldr	r1, [pc, #180]	@ (80150c4 <tcp_close_shutdown_fin+0xcc>)
 801500e:	482e      	ldr	r0, [pc, #184]	@ (80150c8 <tcp_close_shutdown_fin+0xd0>)
 8015010:	f00a fdec 	bl	801fbec <iprintf>

  switch (pcb->state) {
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	7d1b      	ldrb	r3, [r3, #20]
 8015018:	2b07      	cmp	r3, #7
 801501a:	d020      	beq.n	801505e <tcp_close_shutdown_fin+0x66>
 801501c:	2b07      	cmp	r3, #7
 801501e:	dc2b      	bgt.n	8015078 <tcp_close_shutdown_fin+0x80>
 8015020:	2b03      	cmp	r3, #3
 8015022:	d002      	beq.n	801502a <tcp_close_shutdown_fin+0x32>
 8015024:	2b04      	cmp	r3, #4
 8015026:	d00d      	beq.n	8015044 <tcp_close_shutdown_fin+0x4c>
 8015028:	e026      	b.n	8015078 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f004 fdfa 	bl	8019c24 <tcp_send_fin>
 8015030:	4603      	mov	r3, r0
 8015032:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d11f      	bne.n	801507c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2205      	movs	r2, #5
 8015040:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015042:	e01b      	b.n	801507c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f004 fded 	bl	8019c24 <tcp_send_fin>
 801504a:	4603      	mov	r3, r0
 801504c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801504e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d114      	bne.n	8015080 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2205      	movs	r2, #5
 801505a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801505c:	e010      	b.n	8015080 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f004 fde0 	bl	8019c24 <tcp_send_fin>
 8015064:	4603      	mov	r3, r0
 8015066:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d109      	bne.n	8015084 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2209      	movs	r2, #9
 8015074:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015076:	e005      	b.n	8015084 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015078:	2300      	movs	r3, #0
 801507a:	e01c      	b.n	80150b6 <tcp_close_shutdown_fin+0xbe>
      break;
 801507c:	bf00      	nop
 801507e:	e002      	b.n	8015086 <tcp_close_shutdown_fin+0x8e>
      break;
 8015080:	bf00      	nop
 8015082:	e000      	b.n	8015086 <tcp_close_shutdown_fin+0x8e>
      break;
 8015084:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d103      	bne.n	8015096 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f004 ff18 	bl	8019ec4 <tcp_output>
 8015094:	e00d      	b.n	80150b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801509a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801509e:	d108      	bne.n	80150b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	8b5b      	ldrh	r3, [r3, #26]
 80150a4:	f043 0308 	orr.w	r3, r3, #8
 80150a8:	b29a      	uxth	r2, r3
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80150ae:	2300      	movs	r3, #0
 80150b0:	e001      	b.n	80150b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80150b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3710      	adds	r7, #16
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	080222c4 	.word	0x080222c4
 80150c4:	08022374 	.word	0x08022374
 80150c8:	08022308 	.word	0x08022308

080150cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d109      	bne.n	80150ee <tcp_close+0x22>
 80150da:	4b0f      	ldr	r3, [pc, #60]	@ (8015118 <tcp_close+0x4c>)
 80150dc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80150e0:	490e      	ldr	r1, [pc, #56]	@ (801511c <tcp_close+0x50>)
 80150e2:	480f      	ldr	r0, [pc, #60]	@ (8015120 <tcp_close+0x54>)
 80150e4:	f00a fd82 	bl	801fbec <iprintf>
 80150e8:	f06f 030f 	mvn.w	r3, #15
 80150ec:	e00f      	b.n	801510e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	7d1b      	ldrb	r3, [r3, #20]
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d006      	beq.n	8015104 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	8b5b      	ldrh	r3, [r3, #26]
 80150fa:	f043 0310 	orr.w	r3, r3, #16
 80150fe:	b29a      	uxth	r2, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015104:	2101      	movs	r1, #1
 8015106:	6878      	ldr	r0, [r7, #4]
 8015108:	f7ff fe94 	bl	8014e34 <tcp_close_shutdown>
 801510c:	4603      	mov	r3, r0
}
 801510e:	4618      	mov	r0, r3
 8015110:	3708      	adds	r7, #8
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	080222c4 	.word	0x080222c4
 801511c:	080223d4 	.word	0x080223d4
 8015120:	08022308 	.word	0x08022308

08015124 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b084      	sub	sp, #16
 8015128:	af00      	add	r7, sp, #0
 801512a:	60f8      	str	r0, [r7, #12]
 801512c:	60b9      	str	r1, [r7, #8]
 801512e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d109      	bne.n	801514a <tcp_shutdown+0x26>
 8015136:	4b26      	ldr	r3, [pc, #152]	@ (80151d0 <tcp_shutdown+0xac>)
 8015138:	f240 2207 	movw	r2, #519	@ 0x207
 801513c:	4925      	ldr	r1, [pc, #148]	@ (80151d4 <tcp_shutdown+0xb0>)
 801513e:	4826      	ldr	r0, [pc, #152]	@ (80151d8 <tcp_shutdown+0xb4>)
 8015140:	f00a fd54 	bl	801fbec <iprintf>
 8015144:	f06f 030f 	mvn.w	r3, #15
 8015148:	e03d      	b.n	80151c6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	7d1b      	ldrb	r3, [r3, #20]
 801514e:	2b01      	cmp	r3, #1
 8015150:	d102      	bne.n	8015158 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015152:	f06f 030a 	mvn.w	r3, #10
 8015156:	e036      	b.n	80151c6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d01b      	beq.n	8015196 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	8b5b      	ldrh	r3, [r3, #26]
 8015162:	f043 0310 	orr.w	r3, r3, #16
 8015166:	b29a      	uxth	r2, r3
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d005      	beq.n	801517e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8015172:	2101      	movs	r1, #1
 8015174:	68f8      	ldr	r0, [r7, #12]
 8015176:	f7ff fe5d 	bl	8014e34 <tcp_close_shutdown>
 801517a:	4603      	mov	r3, r0
 801517c:	e023      	b.n	80151c6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015182:	2b00      	cmp	r3, #0
 8015184:	d007      	beq.n	8015196 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801518a:	4618      	mov	r0, r3
 801518c:	f7ff fadc 	bl	8014748 <pbuf_free>
      pcb->refused_data = NULL;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2200      	movs	r2, #0
 8015194:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d013      	beq.n	80151c4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	7d1b      	ldrb	r3, [r3, #20]
 80151a0:	2b04      	cmp	r3, #4
 80151a2:	dc02      	bgt.n	80151aa <tcp_shutdown+0x86>
 80151a4:	2b03      	cmp	r3, #3
 80151a6:	da02      	bge.n	80151ae <tcp_shutdown+0x8a>
 80151a8:	e009      	b.n	80151be <tcp_shutdown+0x9a>
 80151aa:	2b07      	cmp	r3, #7
 80151ac:	d107      	bne.n	80151be <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	4619      	mov	r1, r3
 80151b4:	68f8      	ldr	r0, [r7, #12]
 80151b6:	f7ff fe3d 	bl	8014e34 <tcp_close_shutdown>
 80151ba:	4603      	mov	r3, r0
 80151bc:	e003      	b.n	80151c6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80151be:	f06f 030a 	mvn.w	r3, #10
 80151c2:	e000      	b.n	80151c6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80151c4:	2300      	movs	r3, #0
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	3710      	adds	r7, #16
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	bf00      	nop
 80151d0:	080222c4 	.word	0x080222c4
 80151d4:	080223ec 	.word	0x080223ec
 80151d8:	08022308 	.word	0x08022308

080151dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b08e      	sub	sp, #56	@ 0x38
 80151e0:	af04      	add	r7, sp, #16
 80151e2:	6078      	str	r0, [r7, #4]
 80151e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d107      	bne.n	80151fc <tcp_abandon+0x20>
 80151ec:	4b52      	ldr	r3, [pc, #328]	@ (8015338 <tcp_abandon+0x15c>)
 80151ee:	f240 223d 	movw	r2, #573	@ 0x23d
 80151f2:	4952      	ldr	r1, [pc, #328]	@ (801533c <tcp_abandon+0x160>)
 80151f4:	4852      	ldr	r0, [pc, #328]	@ (8015340 <tcp_abandon+0x164>)
 80151f6:	f00a fcf9 	bl	801fbec <iprintf>
 80151fa:	e099      	b.n	8015330 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	7d1b      	ldrb	r3, [r3, #20]
 8015200:	2b01      	cmp	r3, #1
 8015202:	d106      	bne.n	8015212 <tcp_abandon+0x36>
 8015204:	4b4c      	ldr	r3, [pc, #304]	@ (8015338 <tcp_abandon+0x15c>)
 8015206:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801520a:	494e      	ldr	r1, [pc, #312]	@ (8015344 <tcp_abandon+0x168>)
 801520c:	484c      	ldr	r0, [pc, #304]	@ (8015340 <tcp_abandon+0x164>)
 801520e:	f00a fced 	bl	801fbec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	7d1b      	ldrb	r3, [r3, #20]
 8015216:	2b0a      	cmp	r3, #10
 8015218:	d107      	bne.n	801522a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801521a:	6879      	ldr	r1, [r7, #4]
 801521c:	484a      	ldr	r0, [pc, #296]	@ (8015348 <tcp_abandon+0x16c>)
 801521e:	f001 f99b 	bl	8016558 <tcp_pcb_remove>
    tcp_free(pcb);
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f7ff fd54 	bl	8014cd0 <tcp_free>
 8015228:	e082      	b.n	8015330 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801522a:	2300      	movs	r3, #0
 801522c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801522e:	2300      	movs	r3, #0
 8015230:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015236:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801523c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015244:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	691b      	ldr	r3, [r3, #16]
 801524a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	7d1b      	ldrb	r3, [r3, #20]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d126      	bne.n	80152a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	8adb      	ldrh	r3, [r3, #22]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d02e      	beq.n	80152ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801525c:	4b3b      	ldr	r3, [pc, #236]	@ (801534c <tcp_abandon+0x170>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	687a      	ldr	r2, [r7, #4]
 8015262:	429a      	cmp	r2, r3
 8015264:	d105      	bne.n	8015272 <tcp_abandon+0x96>
 8015266:	4b39      	ldr	r3, [pc, #228]	@ (801534c <tcp_abandon+0x170>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	68db      	ldr	r3, [r3, #12]
 801526c:	4a37      	ldr	r2, [pc, #220]	@ (801534c <tcp_abandon+0x170>)
 801526e:	6013      	str	r3, [r2, #0]
 8015270:	e013      	b.n	801529a <tcp_abandon+0xbe>
 8015272:	4b36      	ldr	r3, [pc, #216]	@ (801534c <tcp_abandon+0x170>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	61fb      	str	r3, [r7, #28]
 8015278:	e00c      	b.n	8015294 <tcp_abandon+0xb8>
 801527a:	69fb      	ldr	r3, [r7, #28]
 801527c:	68db      	ldr	r3, [r3, #12]
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	429a      	cmp	r2, r3
 8015282:	d104      	bne.n	801528e <tcp_abandon+0xb2>
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	68da      	ldr	r2, [r3, #12]
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	60da      	str	r2, [r3, #12]
 801528c:	e005      	b.n	801529a <tcp_abandon+0xbe>
 801528e:	69fb      	ldr	r3, [r7, #28]
 8015290:	68db      	ldr	r3, [r3, #12]
 8015292:	61fb      	str	r3, [r7, #28]
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d1ef      	bne.n	801527a <tcp_abandon+0x9e>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	2200      	movs	r2, #0
 801529e:	60da      	str	r2, [r3, #12]
 80152a0:	e00b      	b.n	80152ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80152a2:	683b      	ldr	r3, [r7, #0]
 80152a4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	8adb      	ldrh	r3, [r3, #22]
 80152aa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80152ac:	6879      	ldr	r1, [r7, #4]
 80152ae:	4828      	ldr	r0, [pc, #160]	@ (8015350 <tcp_abandon+0x174>)
 80152b0:	f001 f952 	bl	8016558 <tcp_pcb_remove>
 80152b4:	4b27      	ldr	r3, [pc, #156]	@ (8015354 <tcp_abandon+0x178>)
 80152b6:	2201      	movs	r2, #1
 80152b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d004      	beq.n	80152cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80152c6:	4618      	mov	r0, r3
 80152c8:	f000 fdfc 	bl	8015ec4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d004      	beq.n	80152de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152d8:	4618      	mov	r0, r3
 80152da:	f000 fdf3 	bl	8015ec4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d004      	beq.n	80152f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80152ea:	4618      	mov	r0, r3
 80152ec:	f000 fdea 	bl	8015ec4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80152f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d00e      	beq.n	8015314 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80152f6:	6879      	ldr	r1, [r7, #4]
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	3304      	adds	r3, #4
 80152fc:	687a      	ldr	r2, [r7, #4]
 80152fe:	8b12      	ldrh	r2, [r2, #24]
 8015300:	9202      	str	r2, [sp, #8]
 8015302:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015304:	9201      	str	r2, [sp, #4]
 8015306:	9300      	str	r3, [sp, #0]
 8015308:	460b      	mov	r3, r1
 801530a:	697a      	ldr	r2, [r7, #20]
 801530c:	69b9      	ldr	r1, [r7, #24]
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f005 fba0 	bl	801aa54 <tcp_rst>
    }
    last_state = pcb->state;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	7d1b      	ldrb	r3, [r3, #20]
 8015318:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f7ff fcd8 	bl	8014cd0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d004      	beq.n	8015330 <tcp_abandon+0x154>
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	f06f 010c 	mvn.w	r1, #12
 801532c:	68f8      	ldr	r0, [r7, #12]
 801532e:	4798      	blx	r3
  }
}
 8015330:	3728      	adds	r7, #40	@ 0x28
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	080222c4 	.word	0x080222c4
 801533c:	08022408 	.word	0x08022408
 8015340:	08022308 	.word	0x08022308
 8015344:	08022424 	.word	0x08022424
 8015348:	2002d3bc 	.word	0x2002d3bc
 801534c:	2002d3b0 	.word	0x2002d3b0
 8015350:	2002d3b8 	.word	0x2002d3b8
 8015354:	2002d3c0 	.word	0x2002d3c0

08015358 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b082      	sub	sp, #8
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015360:	2101      	movs	r1, #1
 8015362:	6878      	ldr	r0, [r7, #4]
 8015364:	f7ff ff3a 	bl	80151dc <tcp_abandon>
}
 8015368:	bf00      	nop
 801536a:	3708      	adds	r7, #8
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b088      	sub	sp, #32
 8015374:	af00      	add	r7, sp, #0
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	4613      	mov	r3, r2
 801537c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801537e:	2304      	movs	r3, #4
 8015380:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d101      	bne.n	801538c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015388:	4b3e      	ldr	r3, [pc, #248]	@ (8015484 <tcp_bind+0x114>)
 801538a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d109      	bne.n	80153a6 <tcp_bind+0x36>
 8015392:	4b3d      	ldr	r3, [pc, #244]	@ (8015488 <tcp_bind+0x118>)
 8015394:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8015398:	493c      	ldr	r1, [pc, #240]	@ (801548c <tcp_bind+0x11c>)
 801539a:	483d      	ldr	r0, [pc, #244]	@ (8015490 <tcp_bind+0x120>)
 801539c:	f00a fc26 	bl	801fbec <iprintf>
 80153a0:	f06f 030f 	mvn.w	r3, #15
 80153a4:	e06a      	b.n	801547c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	7d1b      	ldrb	r3, [r3, #20]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d009      	beq.n	80153c2 <tcp_bind+0x52>
 80153ae:	4b36      	ldr	r3, [pc, #216]	@ (8015488 <tcp_bind+0x118>)
 80153b0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80153b4:	4937      	ldr	r1, [pc, #220]	@ (8015494 <tcp_bind+0x124>)
 80153b6:	4836      	ldr	r0, [pc, #216]	@ (8015490 <tcp_bind+0x120>)
 80153b8:	f00a fc18 	bl	801fbec <iprintf>
 80153bc:	f06f 0305 	mvn.w	r3, #5
 80153c0:	e05c      	b.n	801547c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80153c2:	88fb      	ldrh	r3, [r7, #6]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d109      	bne.n	80153dc <tcp_bind+0x6c>
    port = tcp_new_port();
 80153c8:	f000 f914 	bl	80155f4 <tcp_new_port>
 80153cc:	4603      	mov	r3, r0
 80153ce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80153d0:	88fb      	ldrh	r3, [r7, #6]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d135      	bne.n	8015442 <tcp_bind+0xd2>
      return ERR_BUF;
 80153d6:	f06f 0301 	mvn.w	r3, #1
 80153da:	e04f      	b.n	801547c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80153dc:	2300      	movs	r3, #0
 80153de:	61fb      	str	r3, [r7, #28]
 80153e0:	e02b      	b.n	801543a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80153e2:	4a2d      	ldr	r2, [pc, #180]	@ (8015498 <tcp_bind+0x128>)
 80153e4:	69fb      	ldr	r3, [r7, #28]
 80153e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	61bb      	str	r3, [r7, #24]
 80153ee:	e01e      	b.n	801542e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80153f0:	69bb      	ldr	r3, [r7, #24]
 80153f2:	8adb      	ldrh	r3, [r3, #22]
 80153f4:	88fa      	ldrh	r2, [r7, #6]
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d116      	bne.n	8015428 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80153fa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d010      	beq.n	8015422 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d00c      	beq.n	8015422 <tcp_bind+0xb2>
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d009      	beq.n	8015422 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d005      	beq.n	8015422 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015416:	69bb      	ldr	r3, [r7, #24]
 8015418:	681a      	ldr	r2, [r3, #0]
 801541a:	68bb      	ldr	r3, [r7, #8]
 801541c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801541e:	429a      	cmp	r2, r3
 8015420:	d102      	bne.n	8015428 <tcp_bind+0xb8>
              return ERR_USE;
 8015422:	f06f 0307 	mvn.w	r3, #7
 8015426:	e029      	b.n	801547c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	68db      	ldr	r3, [r3, #12]
 801542c:	61bb      	str	r3, [r7, #24]
 801542e:	69bb      	ldr	r3, [r7, #24]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d1dd      	bne.n	80153f0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	3301      	adds	r3, #1
 8015438:	61fb      	str	r3, [r7, #28]
 801543a:	69fa      	ldr	r2, [r7, #28]
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	429a      	cmp	r2, r3
 8015440:	dbcf      	blt.n	80153e2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015442:	68bb      	ldr	r3, [r7, #8]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d00c      	beq.n	8015462 <tcp_bind+0xf2>
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d008      	beq.n	8015462 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d002      	beq.n	801545c <tcp_bind+0xec>
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	e000      	b.n	801545e <tcp_bind+0xee>
 801545c:	2300      	movs	r3, #0
 801545e:	68fa      	ldr	r2, [r7, #12]
 8015460:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	88fa      	ldrh	r2, [r7, #6]
 8015466:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015468:	4b0c      	ldr	r3, [pc, #48]	@ (801549c <tcp_bind+0x12c>)
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	60da      	str	r2, [r3, #12]
 8015470:	4a0a      	ldr	r2, [pc, #40]	@ (801549c <tcp_bind+0x12c>)
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	6013      	str	r3, [r2, #0]
 8015476:	f005 fcaf 	bl	801add8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801547a:	2300      	movs	r3, #0
}
 801547c:	4618      	mov	r0, r3
 801547e:	3720      	adds	r7, #32
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}
 8015484:	08024960 	.word	0x08024960
 8015488:	080222c4 	.word	0x080222c4
 801548c:	08022458 	.word	0x08022458
 8015490:	08022308 	.word	0x08022308
 8015494:	08022470 	.word	0x08022470
 8015498:	08024938 	.word	0x08024938
 801549c:	2002d3b0 	.word	0x2002d3b0

080154a0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d106      	bne.n	80154bc <tcp_update_rcv_ann_wnd+0x1c>
 80154ae:	4b25      	ldr	r3, [pc, #148]	@ (8015544 <tcp_update_rcv_ann_wnd+0xa4>)
 80154b0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80154b4:	4924      	ldr	r1, [pc, #144]	@ (8015548 <tcp_update_rcv_ann_wnd+0xa8>)
 80154b6:	4825      	ldr	r0, [pc, #148]	@ (801554c <tcp_update_rcv_ann_wnd+0xac>)
 80154b8:	f00a fb98 	bl	801fbec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154c0:	687a      	ldr	r2, [r7, #4]
 80154c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80154c4:	4413      	add	r3, r2
 80154c6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154cc:	687a      	ldr	r2, [r7, #4]
 80154ce:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80154d0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80154d4:	bf28      	it	cs
 80154d6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80154da:	b292      	uxth	r2, r2
 80154dc:	4413      	add	r3, r2
 80154de:	68fa      	ldr	r2, [r7, #12]
 80154e0:	1ad3      	subs	r3, r2, r3
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	db08      	blt.n	80154f8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154f2:	68fa      	ldr	r2, [r7, #12]
 80154f4:	1ad3      	subs	r3, r2, r3
 80154f6:	e020      	b.n	801553a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015500:	1ad3      	subs	r3, r2, r3
 8015502:	2b00      	cmp	r3, #0
 8015504:	dd03      	ble.n	801550e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2200      	movs	r2, #0
 801550a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801550c:	e014      	b.n	8015538 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015516:	1ad3      	subs	r3, r2, r3
 8015518:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015520:	d306      	bcc.n	8015530 <tcp_update_rcv_ann_wnd+0x90>
 8015522:	4b08      	ldr	r3, [pc, #32]	@ (8015544 <tcp_update_rcv_ann_wnd+0xa4>)
 8015524:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8015528:	4909      	ldr	r1, [pc, #36]	@ (8015550 <tcp_update_rcv_ann_wnd+0xb0>)
 801552a:	4808      	ldr	r0, [pc, #32]	@ (801554c <tcp_update_rcv_ann_wnd+0xac>)
 801552c:	f00a fb5e 	bl	801fbec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	b29a      	uxth	r2, r3
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015538:	2300      	movs	r3, #0
  }
}
 801553a:	4618      	mov	r0, r3
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	080222c4 	.word	0x080222c4
 8015548:	08022520 	.word	0x08022520
 801554c:	08022308 	.word	0x08022308
 8015550:	08022544 	.word	0x08022544

08015554 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b084      	sub	sp, #16
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	460b      	mov	r3, r1
 801555e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d107      	bne.n	8015576 <tcp_recved+0x22>
 8015566:	4b1f      	ldr	r3, [pc, #124]	@ (80155e4 <tcp_recved+0x90>)
 8015568:	f240 32cf 	movw	r2, #975	@ 0x3cf
 801556c:	491e      	ldr	r1, [pc, #120]	@ (80155e8 <tcp_recved+0x94>)
 801556e:	481f      	ldr	r0, [pc, #124]	@ (80155ec <tcp_recved+0x98>)
 8015570:	f00a fb3c 	bl	801fbec <iprintf>
 8015574:	e032      	b.n	80155dc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	7d1b      	ldrb	r3, [r3, #20]
 801557a:	2b01      	cmp	r3, #1
 801557c:	d106      	bne.n	801558c <tcp_recved+0x38>
 801557e:	4b19      	ldr	r3, [pc, #100]	@ (80155e4 <tcp_recved+0x90>)
 8015580:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015584:	491a      	ldr	r1, [pc, #104]	@ (80155f0 <tcp_recved+0x9c>)
 8015586:	4819      	ldr	r0, [pc, #100]	@ (80155ec <tcp_recved+0x98>)
 8015588:	f00a fb30 	bl	801fbec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015590:	887b      	ldrh	r3, [r7, #2]
 8015592:	4413      	add	r3, r2
 8015594:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015596:	89fb      	ldrh	r3, [r7, #14]
 8015598:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801559c:	d804      	bhi.n	80155a8 <tcp_recved+0x54>
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155a2:	89fa      	ldrh	r2, [r7, #14]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d204      	bcs.n	80155b2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80155ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80155b0:	e002      	b.n	80155b8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	89fa      	ldrh	r2, [r7, #14]
 80155b6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f7ff ff71 	bl	80154a0 <tcp_update_rcv_ann_wnd>
 80155be:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80155c6:	d309      	bcc.n	80155dc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	8b5b      	ldrh	r3, [r3, #26]
 80155cc:	f043 0302 	orr.w	r3, r3, #2
 80155d0:	b29a      	uxth	r2, r3
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80155d6:	6878      	ldr	r0, [r7, #4]
 80155d8:	f004 fc74 	bl	8019ec4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80155dc:	3710      	adds	r7, #16
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}
 80155e2:	bf00      	nop
 80155e4:	080222c4 	.word	0x080222c4
 80155e8:	08022560 	.word	0x08022560
 80155ec:	08022308 	.word	0x08022308
 80155f0:	08022578 	.word	0x08022578

080155f4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80155f4:	b480      	push	{r7}
 80155f6:	b083      	sub	sp, #12
 80155f8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80155fa:	2300      	movs	r3, #0
 80155fc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80155fe:	4b1e      	ldr	r3, [pc, #120]	@ (8015678 <tcp_new_port+0x84>)
 8015600:	881b      	ldrh	r3, [r3, #0]
 8015602:	3301      	adds	r3, #1
 8015604:	b29a      	uxth	r2, r3
 8015606:	4b1c      	ldr	r3, [pc, #112]	@ (8015678 <tcp_new_port+0x84>)
 8015608:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801560a:	4b1b      	ldr	r3, [pc, #108]	@ (8015678 <tcp_new_port+0x84>)
 801560c:	881b      	ldrh	r3, [r3, #0]
 801560e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015612:	4293      	cmp	r3, r2
 8015614:	d103      	bne.n	801561e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015616:	4b18      	ldr	r3, [pc, #96]	@ (8015678 <tcp_new_port+0x84>)
 8015618:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801561c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801561e:	2300      	movs	r3, #0
 8015620:	71fb      	strb	r3, [r7, #7]
 8015622:	e01e      	b.n	8015662 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015624:	79fb      	ldrb	r3, [r7, #7]
 8015626:	4a15      	ldr	r2, [pc, #84]	@ (801567c <tcp_new_port+0x88>)
 8015628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	603b      	str	r3, [r7, #0]
 8015630:	e011      	b.n	8015656 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	8ada      	ldrh	r2, [r3, #22]
 8015636:	4b10      	ldr	r3, [pc, #64]	@ (8015678 <tcp_new_port+0x84>)
 8015638:	881b      	ldrh	r3, [r3, #0]
 801563a:	429a      	cmp	r2, r3
 801563c:	d108      	bne.n	8015650 <tcp_new_port+0x5c>
        n++;
 801563e:	88bb      	ldrh	r3, [r7, #4]
 8015640:	3301      	adds	r3, #1
 8015642:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015644:	88bb      	ldrh	r3, [r7, #4]
 8015646:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801564a:	d3d8      	bcc.n	80155fe <tcp_new_port+0xa>
          return 0;
 801564c:	2300      	movs	r3, #0
 801564e:	e00d      	b.n	801566c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	68db      	ldr	r3, [r3, #12]
 8015654:	603b      	str	r3, [r7, #0]
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d1ea      	bne.n	8015632 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801565c:	79fb      	ldrb	r3, [r7, #7]
 801565e:	3301      	adds	r3, #1
 8015660:	71fb      	strb	r3, [r7, #7]
 8015662:	79fb      	ldrb	r3, [r7, #7]
 8015664:	2b03      	cmp	r3, #3
 8015666:	d9dd      	bls.n	8015624 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015668:	4b03      	ldr	r3, [pc, #12]	@ (8015678 <tcp_new_port+0x84>)
 801566a:	881b      	ldrh	r3, [r3, #0]
}
 801566c:	4618      	mov	r0, r3
 801566e:	370c      	adds	r7, #12
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr
 8015678:	20000024 	.word	0x20000024
 801567c:	08024938 	.word	0x08024938

08015680 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015680:	b5b0      	push	{r4, r5, r7, lr}
 8015682:	b090      	sub	sp, #64	@ 0x40
 8015684:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015686:	2300      	movs	r3, #0
 8015688:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801568c:	4b95      	ldr	r3, [pc, #596]	@ (80158e4 <tcp_slowtmr+0x264>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	3301      	adds	r3, #1
 8015692:	4a94      	ldr	r2, [pc, #592]	@ (80158e4 <tcp_slowtmr+0x264>)
 8015694:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015696:	4b94      	ldr	r3, [pc, #592]	@ (80158e8 <tcp_slowtmr+0x268>)
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	3301      	adds	r3, #1
 801569c:	b2da      	uxtb	r2, r3
 801569e:	4b92      	ldr	r3, [pc, #584]	@ (80158e8 <tcp_slowtmr+0x268>)
 80156a0:	701a      	strb	r2, [r3, #0]
 80156a2:	e000      	b.n	80156a6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80156a4:	bf00      	nop
  prev = NULL;
 80156a6:	2300      	movs	r3, #0
 80156a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80156aa:	4b90      	ldr	r3, [pc, #576]	@ (80158ec <tcp_slowtmr+0x26c>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80156b0:	e29d      	b.n	8015bee <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80156b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156b4:	7d1b      	ldrb	r3, [r3, #20]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d106      	bne.n	80156c8 <tcp_slowtmr+0x48>
 80156ba:	4b8d      	ldr	r3, [pc, #564]	@ (80158f0 <tcp_slowtmr+0x270>)
 80156bc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80156c0:	498c      	ldr	r1, [pc, #560]	@ (80158f4 <tcp_slowtmr+0x274>)
 80156c2:	488d      	ldr	r0, [pc, #564]	@ (80158f8 <tcp_slowtmr+0x278>)
 80156c4:	f00a fa92 	bl	801fbec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80156c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156ca:	7d1b      	ldrb	r3, [r3, #20]
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d106      	bne.n	80156de <tcp_slowtmr+0x5e>
 80156d0:	4b87      	ldr	r3, [pc, #540]	@ (80158f0 <tcp_slowtmr+0x270>)
 80156d2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80156d6:	4989      	ldr	r1, [pc, #548]	@ (80158fc <tcp_slowtmr+0x27c>)
 80156d8:	4887      	ldr	r0, [pc, #540]	@ (80158f8 <tcp_slowtmr+0x278>)
 80156da:	f00a fa87 	bl	801fbec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80156de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156e0:	7d1b      	ldrb	r3, [r3, #20]
 80156e2:	2b0a      	cmp	r3, #10
 80156e4:	d106      	bne.n	80156f4 <tcp_slowtmr+0x74>
 80156e6:	4b82      	ldr	r3, [pc, #520]	@ (80158f0 <tcp_slowtmr+0x270>)
 80156e8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80156ec:	4984      	ldr	r1, [pc, #528]	@ (8015900 <tcp_slowtmr+0x280>)
 80156ee:	4882      	ldr	r0, [pc, #520]	@ (80158f8 <tcp_slowtmr+0x278>)
 80156f0:	f00a fa7c 	bl	801fbec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80156f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156f6:	7f9a      	ldrb	r2, [r3, #30]
 80156f8:	4b7b      	ldr	r3, [pc, #492]	@ (80158e8 <tcp_slowtmr+0x268>)
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d105      	bne.n	801570c <tcp_slowtmr+0x8c>
      prev = pcb;
 8015700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015702:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015706:	68db      	ldr	r3, [r3, #12]
 8015708:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801570a:	e270      	b.n	8015bee <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801570c:	4b76      	ldr	r3, [pc, #472]	@ (80158e8 <tcp_slowtmr+0x268>)
 801570e:	781a      	ldrb	r2, [r3, #0]
 8015710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015712:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015714:	2300      	movs	r3, #0
 8015716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801571a:	2300      	movs	r3, #0
 801571c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015722:	7d1b      	ldrb	r3, [r3, #20]
 8015724:	2b02      	cmp	r3, #2
 8015726:	d10a      	bne.n	801573e <tcp_slowtmr+0xbe>
 8015728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801572a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801572e:	2b05      	cmp	r3, #5
 8015730:	d905      	bls.n	801573e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015732:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015736:	3301      	adds	r3, #1
 8015738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801573c:	e11e      	b.n	801597c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015744:	2b0b      	cmp	r3, #11
 8015746:	d905      	bls.n	8015754 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801574c:	3301      	adds	r3, #1
 801574e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015752:	e113      	b.n	801597c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015756:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801575a:	2b00      	cmp	r3, #0
 801575c:	d075      	beq.n	801584a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801575e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015762:	2b00      	cmp	r3, #0
 8015764:	d006      	beq.n	8015774 <tcp_slowtmr+0xf4>
 8015766:	4b62      	ldr	r3, [pc, #392]	@ (80158f0 <tcp_slowtmr+0x270>)
 8015768:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801576c:	4965      	ldr	r1, [pc, #404]	@ (8015904 <tcp_slowtmr+0x284>)
 801576e:	4862      	ldr	r0, [pc, #392]	@ (80158f8 <tcp_slowtmr+0x278>)
 8015770:	f00a fa3c 	bl	801fbec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015778:	2b00      	cmp	r3, #0
 801577a:	d106      	bne.n	801578a <tcp_slowtmr+0x10a>
 801577c:	4b5c      	ldr	r3, [pc, #368]	@ (80158f0 <tcp_slowtmr+0x270>)
 801577e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015782:	4961      	ldr	r1, [pc, #388]	@ (8015908 <tcp_slowtmr+0x288>)
 8015784:	485c      	ldr	r0, [pc, #368]	@ (80158f8 <tcp_slowtmr+0x278>)
 8015786:	f00a fa31 	bl	801fbec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801578c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015790:	2b0b      	cmp	r3, #11
 8015792:	d905      	bls.n	80157a0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015798:	3301      	adds	r3, #1
 801579a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801579e:	e0ed      	b.n	801597c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80157a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80157a6:	3b01      	subs	r3, #1
 80157a8:	4a58      	ldr	r2, [pc, #352]	@ (801590c <tcp_slowtmr+0x28c>)
 80157aa:	5cd3      	ldrb	r3, [r2, r3]
 80157ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80157ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80157b4:	7c7a      	ldrb	r2, [r7, #17]
 80157b6:	429a      	cmp	r2, r3
 80157b8:	d907      	bls.n	80157ca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80157ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80157c0:	3301      	adds	r3, #1
 80157c2:	b2da      	uxtb	r2, r3
 80157c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80157ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80157d0:	7c7a      	ldrb	r2, [r7, #17]
 80157d2:	429a      	cmp	r2, r3
 80157d4:	f200 80d2 	bhi.w	801597c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80157d8:	2301      	movs	r3, #1
 80157da:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80157dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d108      	bne.n	80157f8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80157e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80157e8:	f005 fa28 	bl	801ac3c <tcp_zero_window_probe>
 80157ec:	4603      	mov	r3, r0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d014      	beq.n	801581c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80157f2:	2300      	movs	r3, #0
 80157f4:	623b      	str	r3, [r7, #32]
 80157f6:	e011      	b.n	801581c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80157f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80157fe:	4619      	mov	r1, r3
 8015800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015802:	f004 f8bd 	bl	8019980 <tcp_split_unsent_seg>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d107      	bne.n	801581c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801580c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801580e:	f004 fb59 	bl	8019ec4 <tcp_output>
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	d101      	bne.n	801581c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015818:	2300      	movs	r3, #0
 801581a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801581c:	6a3b      	ldr	r3, [r7, #32]
 801581e:	2b00      	cmp	r3, #0
 8015820:	f000 80ac 	beq.w	801597c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015826:	2200      	movs	r2, #0
 8015828:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801582c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801582e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015832:	2b06      	cmp	r3, #6
 8015834:	f200 80a2 	bhi.w	801597c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801583a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801583e:	3301      	adds	r3, #1
 8015840:	b2da      	uxtb	r2, r3
 8015842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015844:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015848:	e098      	b.n	801597c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801584c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015850:	2b00      	cmp	r3, #0
 8015852:	db0f      	blt.n	8015874 <tcp_slowtmr+0x1f4>
 8015854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015856:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801585a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801585e:	4293      	cmp	r3, r2
 8015860:	d008      	beq.n	8015874 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015864:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015868:	b29b      	uxth	r3, r3
 801586a:	3301      	adds	r3, #1
 801586c:	b29b      	uxth	r3, r3
 801586e:	b21a      	sxth	r2, r3
 8015870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015872:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015876:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801587c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015880:	429a      	cmp	r2, r3
 8015882:	db7b      	blt.n	801597c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015884:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015886:	f004 fe1b 	bl	801a4c0 <tcp_rexmit_rto_prepare>
 801588a:	4603      	mov	r3, r0
 801588c:	2b00      	cmp	r3, #0
 801588e:	d007      	beq.n	80158a0 <tcp_slowtmr+0x220>
 8015890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015894:	2b00      	cmp	r3, #0
 8015896:	d171      	bne.n	801597c <tcp_slowtmr+0x2fc>
 8015898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801589a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801589c:	2b00      	cmp	r3, #0
 801589e:	d06d      	beq.n	801597c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80158a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158a2:	7d1b      	ldrb	r3, [r3, #20]
 80158a4:	2b02      	cmp	r3, #2
 80158a6:	d03a      	beq.n	801591e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80158a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80158ae:	2b0c      	cmp	r3, #12
 80158b0:	bf28      	it	cs
 80158b2:	230c      	movcs	r3, #12
 80158b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80158b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80158bc:	10db      	asrs	r3, r3, #3
 80158be:	b21b      	sxth	r3, r3
 80158c0:	461a      	mov	r2, r3
 80158c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80158c8:	4413      	add	r3, r2
 80158ca:	7efa      	ldrb	r2, [r7, #27]
 80158cc:	4910      	ldr	r1, [pc, #64]	@ (8015910 <tcp_slowtmr+0x290>)
 80158ce:	5c8a      	ldrb	r2, [r1, r2]
 80158d0:	4093      	lsls	r3, r2
 80158d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80158da:	4293      	cmp	r3, r2
 80158dc:	dc1a      	bgt.n	8015914 <tcp_slowtmr+0x294>
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	b21a      	sxth	r2, r3
 80158e2:	e019      	b.n	8015918 <tcp_slowtmr+0x298>
 80158e4:	2002d3ac 	.word	0x2002d3ac
 80158e8:	2002d3c2 	.word	0x2002d3c2
 80158ec:	2002d3b8 	.word	0x2002d3b8
 80158f0:	080222c4 	.word	0x080222c4
 80158f4:	08022608 	.word	0x08022608
 80158f8:	08022308 	.word	0x08022308
 80158fc:	08022634 	.word	0x08022634
 8015900:	08022660 	.word	0x08022660
 8015904:	08022690 	.word	0x08022690
 8015908:	080226c4 	.word	0x080226c4
 801590c:	08024930 	.word	0x08024930
 8015910:	08024920 	.word	0x08024920
 8015914:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801591a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801591e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015920:	2200      	movs	r2, #0
 8015922:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015926:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801592a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801592c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015930:	4293      	cmp	r3, r2
 8015932:	bf28      	it	cs
 8015934:	4613      	movcs	r3, r2
 8015936:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015938:	8a7b      	ldrh	r3, [r7, #18]
 801593a:	085b      	lsrs	r3, r3, #1
 801593c:	b29a      	uxth	r2, r3
 801593e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015940:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015946:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801594a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801594c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801594e:	005b      	lsls	r3, r3, #1
 8015950:	b29b      	uxth	r3, r3
 8015952:	429a      	cmp	r2, r3
 8015954:	d206      	bcs.n	8015964 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015958:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801595a:	005b      	lsls	r3, r3, #1
 801595c:	b29a      	uxth	r2, r3
 801595e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015960:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015966:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801596a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801596e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015970:	2200      	movs	r2, #0
 8015972:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015978:	f004 fe12 	bl	801a5a0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801597e:	7d1b      	ldrb	r3, [r3, #20]
 8015980:	2b06      	cmp	r3, #6
 8015982:	d111      	bne.n	80159a8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015986:	8b5b      	ldrh	r3, [r3, #26]
 8015988:	f003 0310 	and.w	r3, r3, #16
 801598c:	2b00      	cmp	r3, #0
 801598e:	d00b      	beq.n	80159a8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015990:	4b9c      	ldr	r3, [pc, #624]	@ (8015c04 <tcp_slowtmr+0x584>)
 8015992:	681a      	ldr	r2, [r3, #0]
 8015994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015996:	6a1b      	ldr	r3, [r3, #32]
 8015998:	1ad3      	subs	r3, r2, r3
 801599a:	2b28      	cmp	r3, #40	@ 0x28
 801599c:	d904      	bls.n	80159a8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801599e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159a2:	3301      	adds	r3, #1
 80159a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80159a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159aa:	7a5b      	ldrb	r3, [r3, #9]
 80159ac:	f003 0308 	and.w	r3, r3, #8
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d04a      	beq.n	8015a4a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80159b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159b6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80159b8:	2b04      	cmp	r3, #4
 80159ba:	d003      	beq.n	80159c4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80159bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159be:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80159c0:	2b07      	cmp	r3, #7
 80159c2:	d142      	bne.n	8015a4a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80159c4:	4b8f      	ldr	r3, [pc, #572]	@ (8015c04 <tcp_slowtmr+0x584>)
 80159c6:	681a      	ldr	r2, [r3, #0]
 80159c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ca:	6a1b      	ldr	r3, [r3, #32]
 80159cc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80159ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159d0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80159d4:	4b8c      	ldr	r3, [pc, #560]	@ (8015c08 <tcp_slowtmr+0x588>)
 80159d6:	440b      	add	r3, r1
 80159d8:	498c      	ldr	r1, [pc, #560]	@ (8015c0c <tcp_slowtmr+0x58c>)
 80159da:	fba1 1303 	umull	r1, r3, r1, r3
 80159de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80159e0:	429a      	cmp	r2, r3
 80159e2:	d90a      	bls.n	80159fa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80159e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159e8:	3301      	adds	r3, #1
 80159ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80159ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80159f2:	3301      	adds	r3, #1
 80159f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80159f8:	e027      	b.n	8015a4a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80159fa:	4b82      	ldr	r3, [pc, #520]	@ (8015c04 <tcp_slowtmr+0x584>)
 80159fc:	681a      	ldr	r2, [r3, #0]
 80159fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a00:	6a1b      	ldr	r3, [r3, #32]
 8015a02:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a06:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a0c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015a10:	4618      	mov	r0, r3
 8015a12:	4b7f      	ldr	r3, [pc, #508]	@ (8015c10 <tcp_slowtmr+0x590>)
 8015a14:	fb00 f303 	mul.w	r3, r0, r3
 8015a18:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015a1a:	497c      	ldr	r1, [pc, #496]	@ (8015c0c <tcp_slowtmr+0x58c>)
 8015a1c:	fba1 1303 	umull	r1, r3, r1, r3
 8015a20:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d911      	bls.n	8015a4a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015a26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015a28:	f005 f8c8 	bl	801abbc <tcp_keepalive>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015a32:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d107      	bne.n	8015a4a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8015a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a3c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015a40:	3301      	adds	r3, #1
 8015a42:	b2da      	uxtb	r2, r3
 8015a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a46:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8015a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d011      	beq.n	8015a76 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015a52:	4b6c      	ldr	r3, [pc, #432]	@ (8015c04 <tcp_slowtmr+0x584>)
 8015a54:	681a      	ldr	r2, [r3, #0]
 8015a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a58:	6a1b      	ldr	r3, [r3, #32]
 8015a5a:	1ad2      	subs	r2, r2, r3
 8015a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015a62:	4619      	mov	r1, r3
 8015a64:	460b      	mov	r3, r1
 8015a66:	005b      	lsls	r3, r3, #1
 8015a68:	440b      	add	r3, r1
 8015a6a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d302      	bcc.n	8015a76 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8015a70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015a72:	f000 fed5 	bl	8016820 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8015a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a78:	7d1b      	ldrb	r3, [r3, #20]
 8015a7a:	2b03      	cmp	r3, #3
 8015a7c:	d10b      	bne.n	8015a96 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015a7e:	4b61      	ldr	r3, [pc, #388]	@ (8015c04 <tcp_slowtmr+0x584>)
 8015a80:	681a      	ldr	r2, [r3, #0]
 8015a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a84:	6a1b      	ldr	r3, [r3, #32]
 8015a86:	1ad3      	subs	r3, r2, r3
 8015a88:	2b28      	cmp	r3, #40	@ 0x28
 8015a8a:	d904      	bls.n	8015a96 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8015a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a90:	3301      	adds	r3, #1
 8015a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8015a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a98:	7d1b      	ldrb	r3, [r3, #20]
 8015a9a:	2b09      	cmp	r3, #9
 8015a9c:	d10b      	bne.n	8015ab6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015a9e:	4b59      	ldr	r3, [pc, #356]	@ (8015c04 <tcp_slowtmr+0x584>)
 8015aa0:	681a      	ldr	r2, [r3, #0]
 8015aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aa4:	6a1b      	ldr	r3, [r3, #32]
 8015aa6:	1ad3      	subs	r3, r2, r3
 8015aa8:	2bf0      	cmp	r3, #240	@ 0xf0
 8015aaa:	d904      	bls.n	8015ab6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ab0:	3301      	adds	r3, #1
 8015ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8015ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d060      	beq.n	8015b80 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8015abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015ac4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8015ac6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015ac8:	f000 fcf6 	bl	80164b8 <tcp_pcb_purge>
      if (prev != NULL) {
 8015acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d010      	beq.n	8015af4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015ad2:	4b50      	ldr	r3, [pc, #320]	@ (8015c14 <tcp_slowtmr+0x594>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d106      	bne.n	8015aea <tcp_slowtmr+0x46a>
 8015adc:	4b4e      	ldr	r3, [pc, #312]	@ (8015c18 <tcp_slowtmr+0x598>)
 8015ade:	f240 526d 	movw	r2, #1389	@ 0x56d
 8015ae2:	494e      	ldr	r1, [pc, #312]	@ (8015c1c <tcp_slowtmr+0x59c>)
 8015ae4:	484e      	ldr	r0, [pc, #312]	@ (8015c20 <tcp_slowtmr+0x5a0>)
 8015ae6:	f00a f881 	bl	801fbec <iprintf>
        prev->next = pcb->next;
 8015aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aec:	68da      	ldr	r2, [r3, #12]
 8015aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015af0:	60da      	str	r2, [r3, #12]
 8015af2:	e00f      	b.n	8015b14 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015af4:	4b47      	ldr	r3, [pc, #284]	@ (8015c14 <tcp_slowtmr+0x594>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d006      	beq.n	8015b0c <tcp_slowtmr+0x48c>
 8015afe:	4b46      	ldr	r3, [pc, #280]	@ (8015c18 <tcp_slowtmr+0x598>)
 8015b00:	f240 5271 	movw	r2, #1393	@ 0x571
 8015b04:	4947      	ldr	r1, [pc, #284]	@ (8015c24 <tcp_slowtmr+0x5a4>)
 8015b06:	4846      	ldr	r0, [pc, #280]	@ (8015c20 <tcp_slowtmr+0x5a0>)
 8015b08:	f00a f870 	bl	801fbec <iprintf>
        tcp_active_pcbs = pcb->next;
 8015b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b0e:	68db      	ldr	r3, [r3, #12]
 8015b10:	4a40      	ldr	r2, [pc, #256]	@ (8015c14 <tcp_slowtmr+0x594>)
 8015b12:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015b14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d013      	beq.n	8015b44 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b1e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b22:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015b24:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b28:	3304      	adds	r3, #4
 8015b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015b2c:	8ad2      	ldrh	r2, [r2, #22]
 8015b2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015b30:	8b09      	ldrh	r1, [r1, #24]
 8015b32:	9102      	str	r1, [sp, #8]
 8015b34:	9201      	str	r2, [sp, #4]
 8015b36:	9300      	str	r3, [sp, #0]
 8015b38:	462b      	mov	r3, r5
 8015b3a:	4622      	mov	r2, r4
 8015b3c:	4601      	mov	r1, r0
 8015b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b40:	f004 ff88 	bl	801aa54 <tcp_rst>
      err_arg = pcb->callback_arg;
 8015b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b46:	691b      	ldr	r3, [r3, #16]
 8015b48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b4c:	7d1b      	ldrb	r3, [r3, #20]
 8015b4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b56:	68db      	ldr	r3, [r3, #12]
 8015b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015b5a:	6838      	ldr	r0, [r7, #0]
 8015b5c:	f7ff f8b8 	bl	8014cd0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015b60:	4b31      	ldr	r3, [pc, #196]	@ (8015c28 <tcp_slowtmr+0x5a8>)
 8015b62:	2200      	movs	r2, #0
 8015b64:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d004      	beq.n	8015b76 <tcp_slowtmr+0x4f6>
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	f06f 010c 	mvn.w	r1, #12
 8015b72:	68b8      	ldr	r0, [r7, #8]
 8015b74:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015b76:	4b2c      	ldr	r3, [pc, #176]	@ (8015c28 <tcp_slowtmr+0x5a8>)
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d037      	beq.n	8015bee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8015b7e:	e592      	b.n	80156a6 <tcp_slowtmr+0x26>
      prev = pcb;
 8015b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b82:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b86:	68db      	ldr	r3, [r3, #12]
 8015b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8015b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b8c:	7f1b      	ldrb	r3, [r3, #28]
 8015b8e:	3301      	adds	r3, #1
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b94:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b98:	7f1a      	ldrb	r2, [r3, #28]
 8015b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b9c:	7f5b      	ldrb	r3, [r3, #29]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d325      	bcc.n	8015bee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8015c28 <tcp_slowtmr+0x5a8>)
 8015baa:	2200      	movs	r2, #0
 8015bac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d00b      	beq.n	8015bd0 <tcp_slowtmr+0x550>
 8015bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015bc0:	6912      	ldr	r2, [r2, #16]
 8015bc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015bc4:	4610      	mov	r0, r2
 8015bc6:	4798      	blx	r3
 8015bc8:	4603      	mov	r3, r0
 8015bca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015bce:	e002      	b.n	8015bd6 <tcp_slowtmr+0x556>
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8015bd6:	4b14      	ldr	r3, [pc, #80]	@ (8015c28 <tcp_slowtmr+0x5a8>)
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	f47f ad62 	bne.w	80156a4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015be0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d102      	bne.n	8015bee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015be8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015bea:	f004 f96b 	bl	8019ec4 <tcp_output>
  while (pcb != NULL) {
 8015bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	f47f ad5e 	bne.w	80156b2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8015bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8015c2c <tcp_slowtmr+0x5ac>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015c00:	e069      	b.n	8015cd6 <tcp_slowtmr+0x656>
 8015c02:	bf00      	nop
 8015c04:	2002d3ac 	.word	0x2002d3ac
 8015c08:	000a4cb8 	.word	0x000a4cb8
 8015c0c:	10624dd3 	.word	0x10624dd3
 8015c10:	000124f8 	.word	0x000124f8
 8015c14:	2002d3b8 	.word	0x2002d3b8
 8015c18:	080222c4 	.word	0x080222c4
 8015c1c:	080226fc 	.word	0x080226fc
 8015c20:	08022308 	.word	0x08022308
 8015c24:	08022728 	.word	0x08022728
 8015c28:	2002d3c0 	.word	0x2002d3c0
 8015c2c:	2002d3bc 	.word	0x2002d3bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c32:	7d1b      	ldrb	r3, [r3, #20]
 8015c34:	2b0a      	cmp	r3, #10
 8015c36:	d006      	beq.n	8015c46 <tcp_slowtmr+0x5c6>
 8015c38:	4b2b      	ldr	r3, [pc, #172]	@ (8015ce8 <tcp_slowtmr+0x668>)
 8015c3a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8015c3e:	492b      	ldr	r1, [pc, #172]	@ (8015cec <tcp_slowtmr+0x66c>)
 8015c40:	482b      	ldr	r0, [pc, #172]	@ (8015cf0 <tcp_slowtmr+0x670>)
 8015c42:	f009 ffd3 	bl	801fbec <iprintf>
    pcb_remove = 0;
 8015c46:	2300      	movs	r3, #0
 8015c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015c4c:	4b29      	ldr	r3, [pc, #164]	@ (8015cf4 <tcp_slowtmr+0x674>)
 8015c4e:	681a      	ldr	r2, [r3, #0]
 8015c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c52:	6a1b      	ldr	r3, [r3, #32]
 8015c54:	1ad3      	subs	r3, r2, r3
 8015c56:	2bf0      	cmp	r3, #240	@ 0xf0
 8015c58:	d904      	bls.n	8015c64 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8015c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c5e:	3301      	adds	r3, #1
 8015c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d02f      	beq.n	8015ccc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015c6e:	f000 fc23 	bl	80164b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d010      	beq.n	8015c9a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015c78:	4b1f      	ldr	r3, [pc, #124]	@ (8015cf8 <tcp_slowtmr+0x678>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015c7e:	429a      	cmp	r2, r3
 8015c80:	d106      	bne.n	8015c90 <tcp_slowtmr+0x610>
 8015c82:	4b19      	ldr	r3, [pc, #100]	@ (8015ce8 <tcp_slowtmr+0x668>)
 8015c84:	f240 52af 	movw	r2, #1455	@ 0x5af
 8015c88:	491c      	ldr	r1, [pc, #112]	@ (8015cfc <tcp_slowtmr+0x67c>)
 8015c8a:	4819      	ldr	r0, [pc, #100]	@ (8015cf0 <tcp_slowtmr+0x670>)
 8015c8c:	f009 ffae 	bl	801fbec <iprintf>
        prev->next = pcb->next;
 8015c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c92:	68da      	ldr	r2, [r3, #12]
 8015c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c96:	60da      	str	r2, [r3, #12]
 8015c98:	e00f      	b.n	8015cba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015c9a:	4b17      	ldr	r3, [pc, #92]	@ (8015cf8 <tcp_slowtmr+0x678>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d006      	beq.n	8015cb2 <tcp_slowtmr+0x632>
 8015ca4:	4b10      	ldr	r3, [pc, #64]	@ (8015ce8 <tcp_slowtmr+0x668>)
 8015ca6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8015caa:	4915      	ldr	r1, [pc, #84]	@ (8015d00 <tcp_slowtmr+0x680>)
 8015cac:	4810      	ldr	r0, [pc, #64]	@ (8015cf0 <tcp_slowtmr+0x670>)
 8015cae:	f009 ff9d 	bl	801fbec <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb4:	68db      	ldr	r3, [r3, #12]
 8015cb6:	4a10      	ldr	r2, [pc, #64]	@ (8015cf8 <tcp_slowtmr+0x678>)
 8015cb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cbc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc0:	68db      	ldr	r3, [r3, #12]
 8015cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015cc4:	69f8      	ldr	r0, [r7, #28]
 8015cc6:	f7ff f803 	bl	8014cd0 <tcp_free>
 8015cca:	e004      	b.n	8015cd6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8015ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cd2:	68db      	ldr	r3, [r3, #12]
 8015cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d1a9      	bne.n	8015c30 <tcp_slowtmr+0x5b0>
    }
  }
}
 8015cdc:	bf00      	nop
 8015cde:	bf00      	nop
 8015ce0:	3730      	adds	r7, #48	@ 0x30
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8015ce6:	bf00      	nop
 8015ce8:	080222c4 	.word	0x080222c4
 8015cec:	08022754 	.word	0x08022754
 8015cf0:	08022308 	.word	0x08022308
 8015cf4:	2002d3ac 	.word	0x2002d3ac
 8015cf8:	2002d3bc 	.word	0x2002d3bc
 8015cfc:	08022784 	.word	0x08022784
 8015d00:	080227ac 	.word	0x080227ac

08015d04 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8015dc0 <tcp_fasttmr+0xbc>)
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	3301      	adds	r3, #1
 8015d10:	b2da      	uxtb	r2, r3
 8015d12:	4b2b      	ldr	r3, [pc, #172]	@ (8015dc0 <tcp_fasttmr+0xbc>)
 8015d14:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015d16:	4b2b      	ldr	r3, [pc, #172]	@ (8015dc4 <tcp_fasttmr+0xc0>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015d1c:	e048      	b.n	8015db0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	7f9a      	ldrb	r2, [r3, #30]
 8015d22:	4b27      	ldr	r3, [pc, #156]	@ (8015dc0 <tcp_fasttmr+0xbc>)
 8015d24:	781b      	ldrb	r3, [r3, #0]
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d03f      	beq.n	8015daa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015d2a:	4b25      	ldr	r3, [pc, #148]	@ (8015dc0 <tcp_fasttmr+0xbc>)
 8015d2c:	781a      	ldrb	r2, [r3, #0]
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	8b5b      	ldrh	r3, [r3, #26]
 8015d36:	f003 0301 	and.w	r3, r3, #1
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d010      	beq.n	8015d60 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	8b5b      	ldrh	r3, [r3, #26]
 8015d42:	f043 0302 	orr.w	r3, r3, #2
 8015d46:	b29a      	uxth	r2, r3
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f004 f8b9 	bl	8019ec4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	8b5b      	ldrh	r3, [r3, #26]
 8015d56:	f023 0303 	bic.w	r3, r3, #3
 8015d5a:	b29a      	uxth	r2, r3
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	8b5b      	ldrh	r3, [r3, #26]
 8015d64:	f003 0308 	and.w	r3, r3, #8
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d009      	beq.n	8015d80 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	8b5b      	ldrh	r3, [r3, #26]
 8015d70:	f023 0308 	bic.w	r3, r3, #8
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f7ff f93c 	bl	8014ff8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d00a      	beq.n	8015da4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8015dc8 <tcp_fasttmr+0xc4>)
 8015d90:	2200      	movs	r2, #0
 8015d92:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f000 f819 	bl	8015dcc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8015dc8 <tcp_fasttmr+0xc4>)
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d000      	beq.n	8015da4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015da2:	e7b8      	b.n	8015d16 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	607b      	str	r3, [r7, #4]
 8015da8:	e002      	b.n	8015db0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	68db      	ldr	r3, [r3, #12]
 8015dae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d1b3      	bne.n	8015d1e <tcp_fasttmr+0x1a>
    }
  }
}
 8015db6:	bf00      	nop
 8015db8:	bf00      	nop
 8015dba:	3708      	adds	r7, #8
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}
 8015dc0:	2002d3c2 	.word	0x2002d3c2
 8015dc4:	2002d3b8 	.word	0x2002d3b8
 8015dc8:	2002d3c0 	.word	0x2002d3c0

08015dcc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015dcc:	b590      	push	{r4, r7, lr}
 8015dce:	b085      	sub	sp, #20
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d109      	bne.n	8015dee <tcp_process_refused_data+0x22>
 8015dda:	4b37      	ldr	r3, [pc, #220]	@ (8015eb8 <tcp_process_refused_data+0xec>)
 8015ddc:	f240 6209 	movw	r2, #1545	@ 0x609
 8015de0:	4936      	ldr	r1, [pc, #216]	@ (8015ebc <tcp_process_refused_data+0xf0>)
 8015de2:	4837      	ldr	r0, [pc, #220]	@ (8015ec0 <tcp_process_refused_data+0xf4>)
 8015de4:	f009 ff02 	bl	801fbec <iprintf>
 8015de8:	f06f 030f 	mvn.w	r3, #15
 8015dec:	e060      	b.n	8015eb0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015df2:	7b5b      	ldrb	r3, [r3, #13]
 8015df4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015dfa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d00b      	beq.n	8015e24 <tcp_process_refused_data+0x58>
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6918      	ldr	r0, [r3, #16]
 8015e16:	2300      	movs	r3, #0
 8015e18:	68ba      	ldr	r2, [r7, #8]
 8015e1a:	6879      	ldr	r1, [r7, #4]
 8015e1c:	47a0      	blx	r4
 8015e1e:	4603      	mov	r3, r0
 8015e20:	73fb      	strb	r3, [r7, #15]
 8015e22:	e007      	b.n	8015e34 <tcp_process_refused_data+0x68>
 8015e24:	2300      	movs	r3, #0
 8015e26:	68ba      	ldr	r2, [r7, #8]
 8015e28:	6879      	ldr	r1, [r7, #4]
 8015e2a:	2000      	movs	r0, #0
 8015e2c:	f000 f8a4 	bl	8015f78 <tcp_recv_null>
 8015e30:	4603      	mov	r3, r0
 8015e32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d12a      	bne.n	8015e92 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015e3c:	7bbb      	ldrb	r3, [r7, #14]
 8015e3e:	f003 0320 	and.w	r3, r3, #32
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d033      	beq.n	8015eae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e4a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015e4e:	d005      	beq.n	8015e5c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e54:	3301      	adds	r3, #1
 8015e56:	b29a      	uxth	r2, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d00b      	beq.n	8015e7e <tcp_process_refused_data+0xb2>
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	6918      	ldr	r0, [r3, #16]
 8015e70:	2300      	movs	r3, #0
 8015e72:	2200      	movs	r2, #0
 8015e74:	6879      	ldr	r1, [r7, #4]
 8015e76:	47a0      	blx	r4
 8015e78:	4603      	mov	r3, r0
 8015e7a:	73fb      	strb	r3, [r7, #15]
 8015e7c:	e001      	b.n	8015e82 <tcp_process_refused_data+0xb6>
 8015e7e:	2300      	movs	r3, #0
 8015e80:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e86:	f113 0f0d 	cmn.w	r3, #13
 8015e8a:	d110      	bne.n	8015eae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015e8c:	f06f 030c 	mvn.w	r3, #12
 8015e90:	e00e      	b.n	8015eb0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e96:	f113 0f0d 	cmn.w	r3, #13
 8015e9a:	d102      	bne.n	8015ea2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015e9c:	f06f 030c 	mvn.w	r3, #12
 8015ea0:	e006      	b.n	8015eb0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	68ba      	ldr	r2, [r7, #8]
 8015ea6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8015ea8:	f06f 0304 	mvn.w	r3, #4
 8015eac:	e000      	b.n	8015eb0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015eae:	2300      	movs	r3, #0
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3714      	adds	r7, #20
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd90      	pop	{r4, r7, pc}
 8015eb8:	080222c4 	.word	0x080222c4
 8015ebc:	080227d4 	.word	0x080227d4
 8015ec0:	08022308 	.word	0x08022308

08015ec4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015ecc:	e007      	b.n	8015ede <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f000 f80a 	bl	8015eee <tcp_seg_free>
    seg = next;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d1f4      	bne.n	8015ece <tcp_segs_free+0xa>
  }
}
 8015ee4:	bf00      	nop
 8015ee6:	bf00      	nop
 8015ee8:	3710      	adds	r7, #16
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}

08015eee <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015eee:	b580      	push	{r7, lr}
 8015ef0:	b082      	sub	sp, #8
 8015ef2:	af00      	add	r7, sp, #0
 8015ef4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d00c      	beq.n	8015f16 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	685b      	ldr	r3, [r3, #4]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d004      	beq.n	8015f0e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f7fe fc1d 	bl	8014748 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015f0e:	6879      	ldr	r1, [r7, #4]
 8015f10:	2003      	movs	r0, #3
 8015f12:	f7fd fd75 	bl	8013a00 <memp_free>
  }
}
 8015f16:	bf00      	nop
 8015f18:	3708      	adds	r7, #8
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
	...

08015f20 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b084      	sub	sp, #16
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d106      	bne.n	8015f3c <tcp_seg_copy+0x1c>
 8015f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8015f6c <tcp_seg_copy+0x4c>)
 8015f30:	f240 6282 	movw	r2, #1666	@ 0x682
 8015f34:	490e      	ldr	r1, [pc, #56]	@ (8015f70 <tcp_seg_copy+0x50>)
 8015f36:	480f      	ldr	r0, [pc, #60]	@ (8015f74 <tcp_seg_copy+0x54>)
 8015f38:	f009 fe58 	bl	801fbec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015f3c:	2003      	movs	r0, #3
 8015f3e:	f7fd fce3 	bl	8013908 <memp_malloc>
 8015f42:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d101      	bne.n	8015f4e <tcp_seg_copy+0x2e>
    return NULL;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	e00a      	b.n	8015f64 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015f4e:	2210      	movs	r2, #16
 8015f50:	6879      	ldr	r1, [r7, #4]
 8015f52:	68f8      	ldr	r0, [r7, #12]
 8015f54:	f00a f875 	bl	8020042 <memcpy>
  pbuf_ref(cseg->p);
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	685b      	ldr	r3, [r3, #4]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7fe fc99 	bl	8014894 <pbuf_ref>
  return cseg;
 8015f62:	68fb      	ldr	r3, [r7, #12]
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3710      	adds	r7, #16
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}
 8015f6c:	080222c4 	.word	0x080222c4
 8015f70:	08022818 	.word	0x08022818
 8015f74:	08022308 	.word	0x08022308

08015f78 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b084      	sub	sp, #16
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	60f8      	str	r0, [r7, #12]
 8015f80:	60b9      	str	r1, [r7, #8]
 8015f82:	607a      	str	r2, [r7, #4]
 8015f84:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f86:	68bb      	ldr	r3, [r7, #8]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d109      	bne.n	8015fa0 <tcp_recv_null+0x28>
 8015f8c:	4b12      	ldr	r3, [pc, #72]	@ (8015fd8 <tcp_recv_null+0x60>)
 8015f8e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015f92:	4912      	ldr	r1, [pc, #72]	@ (8015fdc <tcp_recv_null+0x64>)
 8015f94:	4812      	ldr	r0, [pc, #72]	@ (8015fe0 <tcp_recv_null+0x68>)
 8015f96:	f009 fe29 	bl	801fbec <iprintf>
 8015f9a:	f06f 030f 	mvn.w	r3, #15
 8015f9e:	e016      	b.n	8015fce <tcp_recv_null+0x56>

  if (p != NULL) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d009      	beq.n	8015fba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	891b      	ldrh	r3, [r3, #8]
 8015faa:	4619      	mov	r1, r3
 8015fac:	68b8      	ldr	r0, [r7, #8]
 8015fae:	f7ff fad1 	bl	8015554 <tcp_recved>
    pbuf_free(p);
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f7fe fbc8 	bl	8014748 <pbuf_free>
 8015fb8:	e008      	b.n	8015fcc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d104      	bne.n	8015fcc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015fc2:	68b8      	ldr	r0, [r7, #8]
 8015fc4:	f7ff f882 	bl	80150cc <tcp_close>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	e000      	b.n	8015fce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015fcc:	2300      	movs	r3, #0
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	080222c4 	.word	0x080222c4
 8015fdc:	08022834 	.word	0x08022834
 8015fe0:	08022308 	.word	0x08022308

08015fe4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b086      	sub	sp, #24
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	4603      	mov	r3, r0
 8015fec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	db01      	blt.n	8015ffa <tcp_kill_prio+0x16>
 8015ff6:	79fb      	ldrb	r3, [r7, #7]
 8015ff8:	e000      	b.n	8015ffc <tcp_kill_prio+0x18>
 8015ffa:	237f      	movs	r3, #127	@ 0x7f
 8015ffc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015ffe:	7afb      	ldrb	r3, [r7, #11]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d034      	beq.n	801606e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016004:	7afb      	ldrb	r3, [r7, #11]
 8016006:	3b01      	subs	r3, #1
 8016008:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801600a:	2300      	movs	r3, #0
 801600c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801600e:	2300      	movs	r3, #0
 8016010:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016012:	4b19      	ldr	r3, [pc, #100]	@ (8016078 <tcp_kill_prio+0x94>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	617b      	str	r3, [r7, #20]
 8016018:	e01f      	b.n	801605a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801601a:	697b      	ldr	r3, [r7, #20]
 801601c:	7d5b      	ldrb	r3, [r3, #21]
 801601e:	7afa      	ldrb	r2, [r7, #11]
 8016020:	429a      	cmp	r2, r3
 8016022:	d80c      	bhi.n	801603e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016028:	7afa      	ldrb	r2, [r7, #11]
 801602a:	429a      	cmp	r2, r3
 801602c:	d112      	bne.n	8016054 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801602e:	4b13      	ldr	r3, [pc, #76]	@ (801607c <tcp_kill_prio+0x98>)
 8016030:	681a      	ldr	r2, [r3, #0]
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	6a1b      	ldr	r3, [r3, #32]
 8016036:	1ad3      	subs	r3, r2, r3
 8016038:	68fa      	ldr	r2, [r7, #12]
 801603a:	429a      	cmp	r2, r3
 801603c:	d80a      	bhi.n	8016054 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801603e:	4b0f      	ldr	r3, [pc, #60]	@ (801607c <tcp_kill_prio+0x98>)
 8016040:	681a      	ldr	r2, [r3, #0]
 8016042:	697b      	ldr	r3, [r7, #20]
 8016044:	6a1b      	ldr	r3, [r3, #32]
 8016046:	1ad3      	subs	r3, r2, r3
 8016048:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	7d5b      	ldrb	r3, [r3, #21]
 8016052:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	68db      	ldr	r3, [r3, #12]
 8016058:	617b      	str	r3, [r7, #20]
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d1dc      	bne.n	801601a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d004      	beq.n	8016070 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016066:	6938      	ldr	r0, [r7, #16]
 8016068:	f7ff f976 	bl	8015358 <tcp_abort>
 801606c:	e000      	b.n	8016070 <tcp_kill_prio+0x8c>
    return;
 801606e:	bf00      	nop
  }
}
 8016070:	3718      	adds	r7, #24
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	2002d3b8 	.word	0x2002d3b8
 801607c:	2002d3ac 	.word	0x2002d3ac

08016080 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b086      	sub	sp, #24
 8016084:	af00      	add	r7, sp, #0
 8016086:	4603      	mov	r3, r0
 8016088:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801608a:	79fb      	ldrb	r3, [r7, #7]
 801608c:	2b08      	cmp	r3, #8
 801608e:	d009      	beq.n	80160a4 <tcp_kill_state+0x24>
 8016090:	79fb      	ldrb	r3, [r7, #7]
 8016092:	2b09      	cmp	r3, #9
 8016094:	d006      	beq.n	80160a4 <tcp_kill_state+0x24>
 8016096:	4b1a      	ldr	r3, [pc, #104]	@ (8016100 <tcp_kill_state+0x80>)
 8016098:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801609c:	4919      	ldr	r1, [pc, #100]	@ (8016104 <tcp_kill_state+0x84>)
 801609e:	481a      	ldr	r0, [pc, #104]	@ (8016108 <tcp_kill_state+0x88>)
 80160a0:	f009 fda4 	bl	801fbec <iprintf>

  inactivity = 0;
 80160a4:	2300      	movs	r3, #0
 80160a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80160a8:	2300      	movs	r3, #0
 80160aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80160ac:	4b17      	ldr	r3, [pc, #92]	@ (801610c <tcp_kill_state+0x8c>)
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	617b      	str	r3, [r7, #20]
 80160b2:	e017      	b.n	80160e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80160b4:	697b      	ldr	r3, [r7, #20]
 80160b6:	7d1b      	ldrb	r3, [r3, #20]
 80160b8:	79fa      	ldrb	r2, [r7, #7]
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d10f      	bne.n	80160de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80160be:	4b14      	ldr	r3, [pc, #80]	@ (8016110 <tcp_kill_state+0x90>)
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	697b      	ldr	r3, [r7, #20]
 80160c4:	6a1b      	ldr	r3, [r3, #32]
 80160c6:	1ad3      	subs	r3, r2, r3
 80160c8:	68fa      	ldr	r2, [r7, #12]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d807      	bhi.n	80160de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80160ce:	4b10      	ldr	r3, [pc, #64]	@ (8016110 <tcp_kill_state+0x90>)
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	6a1b      	ldr	r3, [r3, #32]
 80160d6:	1ad3      	subs	r3, r2, r3
 80160d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80160da:	697b      	ldr	r3, [r7, #20]
 80160dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80160de:	697b      	ldr	r3, [r7, #20]
 80160e0:	68db      	ldr	r3, [r3, #12]
 80160e2:	617b      	str	r3, [r7, #20]
 80160e4:	697b      	ldr	r3, [r7, #20]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d1e4      	bne.n	80160b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80160ea:	693b      	ldr	r3, [r7, #16]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d003      	beq.n	80160f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80160f0:	2100      	movs	r1, #0
 80160f2:	6938      	ldr	r0, [r7, #16]
 80160f4:	f7ff f872 	bl	80151dc <tcp_abandon>
  }
}
 80160f8:	bf00      	nop
 80160fa:	3718      	adds	r7, #24
 80160fc:	46bd      	mov	sp, r7
 80160fe:	bd80      	pop	{r7, pc}
 8016100:	080222c4 	.word	0x080222c4
 8016104:	08022850 	.word	0x08022850
 8016108:	08022308 	.word	0x08022308
 801610c:	2002d3b8 	.word	0x2002d3b8
 8016110:	2002d3ac 	.word	0x2002d3ac

08016114 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b084      	sub	sp, #16
 8016118:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801611a:	2300      	movs	r3, #0
 801611c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801611e:	2300      	movs	r3, #0
 8016120:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016122:	4b12      	ldr	r3, [pc, #72]	@ (801616c <tcp_kill_timewait+0x58>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	60fb      	str	r3, [r7, #12]
 8016128:	e012      	b.n	8016150 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801612a:	4b11      	ldr	r3, [pc, #68]	@ (8016170 <tcp_kill_timewait+0x5c>)
 801612c:	681a      	ldr	r2, [r3, #0]
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	6a1b      	ldr	r3, [r3, #32]
 8016132:	1ad3      	subs	r3, r2, r3
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	429a      	cmp	r2, r3
 8016138:	d807      	bhi.n	801614a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801613a:	4b0d      	ldr	r3, [pc, #52]	@ (8016170 <tcp_kill_timewait+0x5c>)
 801613c:	681a      	ldr	r2, [r3, #0]
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	6a1b      	ldr	r3, [r3, #32]
 8016142:	1ad3      	subs	r3, r2, r3
 8016144:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	68db      	ldr	r3, [r3, #12]
 801614e:	60fb      	str	r3, [r7, #12]
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d1e9      	bne.n	801612a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d002      	beq.n	8016162 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801615c:	68b8      	ldr	r0, [r7, #8]
 801615e:	f7ff f8fb 	bl	8015358 <tcp_abort>
  }
}
 8016162:	bf00      	nop
 8016164:	3710      	adds	r7, #16
 8016166:	46bd      	mov	sp, r7
 8016168:	bd80      	pop	{r7, pc}
 801616a:	bf00      	nop
 801616c:	2002d3bc 	.word	0x2002d3bc
 8016170:	2002d3ac 	.word	0x2002d3ac

08016174 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801617a:	4b10      	ldr	r3, [pc, #64]	@ (80161bc <tcp_handle_closepend+0x48>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016180:	e014      	b.n	80161ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	68db      	ldr	r3, [r3, #12]
 8016186:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	8b5b      	ldrh	r3, [r3, #26]
 801618c:	f003 0308 	and.w	r3, r3, #8
 8016190:	2b00      	cmp	r3, #0
 8016192:	d009      	beq.n	80161a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	8b5b      	ldrh	r3, [r3, #26]
 8016198:	f023 0308 	bic.w	r3, r3, #8
 801619c:	b29a      	uxth	r2, r3
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f7fe ff28 	bl	8014ff8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d1e7      	bne.n	8016182 <tcp_handle_closepend+0xe>
  }
}
 80161b2:	bf00      	nop
 80161b4:	bf00      	nop
 80161b6:	3708      	adds	r7, #8
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}
 80161bc:	2002d3b8 	.word	0x2002d3b8

080161c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b084      	sub	sp, #16
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	4603      	mov	r3, r0
 80161c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80161ca:	2001      	movs	r0, #1
 80161cc:	f7fd fb9c 	bl	8013908 <memp_malloc>
 80161d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d14e      	bne.n	8016276 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80161d8:	f7ff ffcc 	bl	8016174 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80161dc:	f7ff ff9a 	bl	8016114 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80161e0:	2001      	movs	r0, #1
 80161e2:	f7fd fb91 	bl	8013908 <memp_malloc>
 80161e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d139      	bne.n	8016262 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80161ee:	2009      	movs	r0, #9
 80161f0:	f7ff ff46 	bl	8016080 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80161f4:	2001      	movs	r0, #1
 80161f6:	f7fd fb87 	bl	8013908 <memp_malloc>
 80161fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d125      	bne.n	801624e <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016202:	2008      	movs	r0, #8
 8016204:	f7ff ff3c 	bl	8016080 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016208:	2001      	movs	r0, #1
 801620a:	f7fd fb7d 	bl	8013908 <memp_malloc>
 801620e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d111      	bne.n	801623a <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016216:	79fb      	ldrb	r3, [r7, #7]
 8016218:	4618      	mov	r0, r3
 801621a:	f7ff fee3 	bl	8015fe4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801621e:	2001      	movs	r0, #1
 8016220:	f7fd fb72 	bl	8013908 <memp_malloc>
 8016224:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d006      	beq.n	801623a <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801622c:	4b36      	ldr	r3, [pc, #216]	@ (8016308 <tcp_alloc+0x148>)
 801622e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016232:	881a      	ldrh	r2, [r3, #0]
 8016234:	3a01      	subs	r2, #1
 8016236:	b292      	uxth	r2, r2
 8016238:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d006      	beq.n	801624e <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016240:	4b31      	ldr	r3, [pc, #196]	@ (8016308 <tcp_alloc+0x148>)
 8016242:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016246:	881a      	ldrh	r2, [r3, #0]
 8016248:	3a01      	subs	r2, #1
 801624a:	b292      	uxth	r2, r2
 801624c:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d006      	beq.n	8016262 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016254:	4b2c      	ldr	r3, [pc, #176]	@ (8016308 <tcp_alloc+0x148>)
 8016256:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801625a:	881a      	ldrh	r2, [r3, #0]
 801625c:	3a01      	subs	r2, #1
 801625e:	b292      	uxth	r2, r2
 8016260:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d006      	beq.n	8016276 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016268:	4b27      	ldr	r3, [pc, #156]	@ (8016308 <tcp_alloc+0x148>)
 801626a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801626e:	881a      	ldrh	r2, [r3, #0]
 8016270:	3a01      	subs	r2, #1
 8016272:	b292      	uxth	r2, r2
 8016274:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d03f      	beq.n	80162fc <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801627c:	229c      	movs	r2, #156	@ 0x9c
 801627e:	2100      	movs	r1, #0
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	f009 fe0b 	bl	801fe9c <memset>
    pcb->prio = prio;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	79fa      	ldrb	r2, [r7, #7]
 801628a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016292:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801629c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	22ff      	movs	r2, #255	@ 0xff
 80162aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80162b2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	2206      	movs	r2, #6
 80162b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2206      	movs	r2, #6
 80162c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80162c8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	2201      	movs	r2, #1
 80162ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80162d2:	4b0e      	ldr	r3, [pc, #56]	@ (801630c <tcp_alloc+0x14c>)
 80162d4:	681a      	ldr	r2, [r3, #0]
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80162da:	4b0d      	ldr	r3, [pc, #52]	@ (8016310 <tcp_alloc+0x150>)
 80162dc:	781a      	ldrb	r2, [r3, #0]
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80162e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	4a09      	ldr	r2, [pc, #36]	@ (8016314 <tcp_alloc+0x154>)
 80162f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	4a08      	ldr	r2, [pc, #32]	@ (8016318 <tcp_alloc+0x158>)
 80162f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80162fc:	68fb      	ldr	r3, [r7, #12]
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3710      	adds	r7, #16
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	2002d2b0 	.word	0x2002d2b0
 801630c:	2002d3ac 	.word	0x2002d3ac
 8016310:	2002d3c2 	.word	0x2002d3c2
 8016314:	08015f79 	.word	0x08015f79
 8016318:	006ddd00 	.word	0x006ddd00

0801631c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b084      	sub	sp, #16
 8016320:	af00      	add	r7, sp, #0
 8016322:	4603      	mov	r3, r0
 8016324:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016326:	2040      	movs	r0, #64	@ 0x40
 8016328:	f7ff ff4a 	bl	80161c0 <tcp_alloc>
 801632c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801632e:	68fb      	ldr	r3, [r7, #12]
}
 8016330:	4618      	mov	r0, r3
 8016332:	3710      	adds	r7, #16
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}

08016338 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016338:	b480      	push	{r7}
 801633a:	b083      	sub	sp, #12
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d002      	beq.n	801634e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	683a      	ldr	r2, [r7, #0]
 801634c:	611a      	str	r2, [r3, #16]
  }
}
 801634e:	bf00      	nop
 8016350:	370c      	adds	r7, #12
 8016352:	46bd      	mov	sp, r7
 8016354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016358:	4770      	bx	lr
	...

0801635c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d00e      	beq.n	801638a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	7d1b      	ldrb	r3, [r3, #20]
 8016370:	2b01      	cmp	r3, #1
 8016372:	d106      	bne.n	8016382 <tcp_recv+0x26>
 8016374:	4b07      	ldr	r3, [pc, #28]	@ (8016394 <tcp_recv+0x38>)
 8016376:	f240 72df 	movw	r2, #2015	@ 0x7df
 801637a:	4907      	ldr	r1, [pc, #28]	@ (8016398 <tcp_recv+0x3c>)
 801637c:	4807      	ldr	r0, [pc, #28]	@ (801639c <tcp_recv+0x40>)
 801637e:	f009 fc35 	bl	801fbec <iprintf>
    pcb->recv = recv;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	683a      	ldr	r2, [r7, #0]
 8016386:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801638a:	bf00      	nop
 801638c:	3708      	adds	r7, #8
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}
 8016392:	bf00      	nop
 8016394:	080222c4 	.word	0x080222c4
 8016398:	08022860 	.word	0x08022860
 801639c:	08022308 	.word	0x08022308

080163a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d00e      	beq.n	80163ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	7d1b      	ldrb	r3, [r3, #20]
 80163b4:	2b01      	cmp	r3, #1
 80163b6:	d106      	bne.n	80163c6 <tcp_sent+0x26>
 80163b8:	4b07      	ldr	r3, [pc, #28]	@ (80163d8 <tcp_sent+0x38>)
 80163ba:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80163be:	4907      	ldr	r1, [pc, #28]	@ (80163dc <tcp_sent+0x3c>)
 80163c0:	4807      	ldr	r0, [pc, #28]	@ (80163e0 <tcp_sent+0x40>)
 80163c2:	f009 fc13 	bl	801fbec <iprintf>
    pcb->sent = sent;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	683a      	ldr	r2, [r7, #0]
 80163ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80163ce:	bf00      	nop
 80163d0:	3708      	adds	r7, #8
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}
 80163d6:	bf00      	nop
 80163d8:	080222c4 	.word	0x080222c4
 80163dc:	08022888 	.word	0x08022888
 80163e0:	08022308 	.word	0x08022308

080163e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d00e      	beq.n	8016412 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	7d1b      	ldrb	r3, [r3, #20]
 80163f8:	2b01      	cmp	r3, #1
 80163fa:	d106      	bne.n	801640a <tcp_err+0x26>
 80163fc:	4b07      	ldr	r3, [pc, #28]	@ (801641c <tcp_err+0x38>)
 80163fe:	f640 020d 	movw	r2, #2061	@ 0x80d
 8016402:	4907      	ldr	r1, [pc, #28]	@ (8016420 <tcp_err+0x3c>)
 8016404:	4807      	ldr	r0, [pc, #28]	@ (8016424 <tcp_err+0x40>)
 8016406:	f009 fbf1 	bl	801fbec <iprintf>
    pcb->errf = err;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	683a      	ldr	r2, [r7, #0]
 801640e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8016412:	bf00      	nop
 8016414:	3708      	adds	r7, #8
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	080222c4 	.word	0x080222c4
 8016420:	080228b0 	.word	0x080228b0
 8016424:	08022308 	.word	0x08022308

08016428 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016428:	b480      	push	{r7}
 801642a:	b085      	sub	sp, #20
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
 8016430:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d008      	beq.n	801644a <tcp_accept+0x22>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	7d1b      	ldrb	r3, [r3, #20]
 801643c:	2b01      	cmp	r3, #1
 801643e:	d104      	bne.n	801644a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	683a      	ldr	r2, [r7, #0]
 8016448:	619a      	str	r2, [r3, #24]
  }
}
 801644a:	bf00      	nop
 801644c:	3714      	adds	r7, #20
 801644e:	46bd      	mov	sp, r7
 8016450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016454:	4770      	bx	lr
	...

08016458 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b084      	sub	sp, #16
 801645c:	af00      	add	r7, sp, #0
 801645e:	60f8      	str	r0, [r7, #12]
 8016460:	60b9      	str	r1, [r7, #8]
 8016462:	4613      	mov	r3, r2
 8016464:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d107      	bne.n	801647c <tcp_poll+0x24>
 801646c:	4b0e      	ldr	r3, [pc, #56]	@ (80164a8 <tcp_poll+0x50>)
 801646e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8016472:	490e      	ldr	r1, [pc, #56]	@ (80164ac <tcp_poll+0x54>)
 8016474:	480e      	ldr	r0, [pc, #56]	@ (80164b0 <tcp_poll+0x58>)
 8016476:	f009 fbb9 	bl	801fbec <iprintf>
 801647a:	e011      	b.n	80164a0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	7d1b      	ldrb	r3, [r3, #20]
 8016480:	2b01      	cmp	r3, #1
 8016482:	d106      	bne.n	8016492 <tcp_poll+0x3a>
 8016484:	4b08      	ldr	r3, [pc, #32]	@ (80164a8 <tcp_poll+0x50>)
 8016486:	f640 023e 	movw	r2, #2110	@ 0x83e
 801648a:	490a      	ldr	r1, [pc, #40]	@ (80164b4 <tcp_poll+0x5c>)
 801648c:	4808      	ldr	r0, [pc, #32]	@ (80164b0 <tcp_poll+0x58>)
 801648e:	f009 fbad 	bl	801fbec <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	68ba      	ldr	r2, [r7, #8]
 8016496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	79fa      	ldrb	r2, [r7, #7]
 801649e:	775a      	strb	r2, [r3, #29]
}
 80164a0:	3710      	adds	r7, #16
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
 80164a6:	bf00      	nop
 80164a8:	080222c4 	.word	0x080222c4
 80164ac:	080228d8 	.word	0x080228d8
 80164b0:	08022308 	.word	0x08022308
 80164b4:	080228f0 	.word	0x080228f0

080164b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d107      	bne.n	80164d6 <tcp_pcb_purge+0x1e>
 80164c6:	4b21      	ldr	r3, [pc, #132]	@ (801654c <tcp_pcb_purge+0x94>)
 80164c8:	f640 0251 	movw	r2, #2129	@ 0x851
 80164cc:	4920      	ldr	r1, [pc, #128]	@ (8016550 <tcp_pcb_purge+0x98>)
 80164ce:	4821      	ldr	r0, [pc, #132]	@ (8016554 <tcp_pcb_purge+0x9c>)
 80164d0:	f009 fb8c 	bl	801fbec <iprintf>
 80164d4:	e037      	b.n	8016546 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	7d1b      	ldrb	r3, [r3, #20]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d033      	beq.n	8016546 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80164e2:	2b0a      	cmp	r3, #10
 80164e4:	d02f      	beq.n	8016546 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80164ea:	2b01      	cmp	r3, #1
 80164ec:	d02b      	beq.n	8016546 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d007      	beq.n	8016506 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7fe f924 	bl	8014748 <pbuf_free>
      pcb->refused_data = NULL;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2200      	movs	r2, #0
 8016504:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801650a:	2b00      	cmp	r3, #0
 801650c:	d002      	beq.n	8016514 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801650e:	6878      	ldr	r0, [r7, #4]
 8016510:	f000 f986 	bl	8016820 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801651a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016520:	4618      	mov	r0, r3
 8016522:	f7ff fccf 	bl	8015ec4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801652a:	4618      	mov	r0, r3
 801652c:	f7ff fcca 	bl	8015ec4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	2200      	movs	r2, #0
 8016534:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	2200      	movs	r2, #0
 8016542:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016546:	3708      	adds	r7, #8
 8016548:	46bd      	mov	sp, r7
 801654a:	bd80      	pop	{r7, pc}
 801654c:	080222c4 	.word	0x080222c4
 8016550:	08022910 	.word	0x08022910
 8016554:	08022308 	.word	0x08022308

08016558 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b084      	sub	sp, #16
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
 8016560:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d106      	bne.n	8016576 <tcp_pcb_remove+0x1e>
 8016568:	4b3e      	ldr	r3, [pc, #248]	@ (8016664 <tcp_pcb_remove+0x10c>)
 801656a:	f640 0283 	movw	r2, #2179	@ 0x883
 801656e:	493e      	ldr	r1, [pc, #248]	@ (8016668 <tcp_pcb_remove+0x110>)
 8016570:	483e      	ldr	r0, [pc, #248]	@ (801666c <tcp_pcb_remove+0x114>)
 8016572:	f009 fb3b 	bl	801fbec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d106      	bne.n	801658a <tcp_pcb_remove+0x32>
 801657c:	4b39      	ldr	r3, [pc, #228]	@ (8016664 <tcp_pcb_remove+0x10c>)
 801657e:	f640 0284 	movw	r2, #2180	@ 0x884
 8016582:	493b      	ldr	r1, [pc, #236]	@ (8016670 <tcp_pcb_remove+0x118>)
 8016584:	4839      	ldr	r0, [pc, #228]	@ (801666c <tcp_pcb_remove+0x114>)
 8016586:	f009 fb31 	bl	801fbec <iprintf>

  TCP_RMV(pcblist, pcb);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	683a      	ldr	r2, [r7, #0]
 8016590:	429a      	cmp	r2, r3
 8016592:	d105      	bne.n	80165a0 <tcp_pcb_remove+0x48>
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	68da      	ldr	r2, [r3, #12]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	601a      	str	r2, [r3, #0]
 801659e:	e013      	b.n	80165c8 <tcp_pcb_remove+0x70>
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	60fb      	str	r3, [r7, #12]
 80165a6:	e00c      	b.n	80165c2 <tcp_pcb_remove+0x6a>
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	68db      	ldr	r3, [r3, #12]
 80165ac:	683a      	ldr	r2, [r7, #0]
 80165ae:	429a      	cmp	r2, r3
 80165b0:	d104      	bne.n	80165bc <tcp_pcb_remove+0x64>
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	68da      	ldr	r2, [r3, #12]
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	60da      	str	r2, [r3, #12]
 80165ba:	e005      	b.n	80165c8 <tcp_pcb_remove+0x70>
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	60fb      	str	r3, [r7, #12]
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d1ef      	bne.n	80165a8 <tcp_pcb_remove+0x50>
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	2200      	movs	r2, #0
 80165cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80165ce:	6838      	ldr	r0, [r7, #0]
 80165d0:	f7ff ff72 	bl	80164b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	7d1b      	ldrb	r3, [r3, #20]
 80165d8:	2b0a      	cmp	r3, #10
 80165da:	d013      	beq.n	8016604 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d00f      	beq.n	8016604 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80165e4:	683b      	ldr	r3, [r7, #0]
 80165e6:	8b5b      	ldrh	r3, [r3, #26]
 80165e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d009      	beq.n	8016604 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	8b5b      	ldrh	r3, [r3, #26]
 80165f4:	f043 0302 	orr.w	r3, r3, #2
 80165f8:	b29a      	uxth	r2, r3
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80165fe:	6838      	ldr	r0, [r7, #0]
 8016600:	f003 fc60 	bl	8019ec4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016604:	683b      	ldr	r3, [r7, #0]
 8016606:	7d1b      	ldrb	r3, [r3, #20]
 8016608:	2b01      	cmp	r3, #1
 801660a:	d020      	beq.n	801664e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016610:	2b00      	cmp	r3, #0
 8016612:	d006      	beq.n	8016622 <tcp_pcb_remove+0xca>
 8016614:	4b13      	ldr	r3, [pc, #76]	@ (8016664 <tcp_pcb_remove+0x10c>)
 8016616:	f640 0293 	movw	r2, #2195	@ 0x893
 801661a:	4916      	ldr	r1, [pc, #88]	@ (8016674 <tcp_pcb_remove+0x11c>)
 801661c:	4813      	ldr	r0, [pc, #76]	@ (801666c <tcp_pcb_remove+0x114>)
 801661e:	f009 fae5 	bl	801fbec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016626:	2b00      	cmp	r3, #0
 8016628:	d006      	beq.n	8016638 <tcp_pcb_remove+0xe0>
 801662a:	4b0e      	ldr	r3, [pc, #56]	@ (8016664 <tcp_pcb_remove+0x10c>)
 801662c:	f640 0294 	movw	r2, #2196	@ 0x894
 8016630:	4911      	ldr	r1, [pc, #68]	@ (8016678 <tcp_pcb_remove+0x120>)
 8016632:	480e      	ldr	r0, [pc, #56]	@ (801666c <tcp_pcb_remove+0x114>)
 8016634:	f009 fada 	bl	801fbec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801663c:	2b00      	cmp	r3, #0
 801663e:	d006      	beq.n	801664e <tcp_pcb_remove+0xf6>
 8016640:	4b08      	ldr	r3, [pc, #32]	@ (8016664 <tcp_pcb_remove+0x10c>)
 8016642:	f640 0296 	movw	r2, #2198	@ 0x896
 8016646:	490d      	ldr	r1, [pc, #52]	@ (801667c <tcp_pcb_remove+0x124>)
 8016648:	4808      	ldr	r0, [pc, #32]	@ (801666c <tcp_pcb_remove+0x114>)
 801664a:	f009 facf 	bl	801fbec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	2200      	movs	r2, #0
 8016652:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	2200      	movs	r2, #0
 8016658:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801665a:	bf00      	nop
 801665c:	3710      	adds	r7, #16
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}
 8016662:	bf00      	nop
 8016664:	080222c4 	.word	0x080222c4
 8016668:	0802292c 	.word	0x0802292c
 801666c:	08022308 	.word	0x08022308
 8016670:	08022948 	.word	0x08022948
 8016674:	08022968 	.word	0x08022968
 8016678:	08022980 	.word	0x08022980
 801667c:	0802299c 	.word	0x0802299c

08016680 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d106      	bne.n	801669c <tcp_next_iss+0x1c>
 801668e:	4b0a      	ldr	r3, [pc, #40]	@ (80166b8 <tcp_next_iss+0x38>)
 8016690:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016694:	4909      	ldr	r1, [pc, #36]	@ (80166bc <tcp_next_iss+0x3c>)
 8016696:	480a      	ldr	r0, [pc, #40]	@ (80166c0 <tcp_next_iss+0x40>)
 8016698:	f009 faa8 	bl	801fbec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801669c:	4b09      	ldr	r3, [pc, #36]	@ (80166c4 <tcp_next_iss+0x44>)
 801669e:	681a      	ldr	r2, [r3, #0]
 80166a0:	4b09      	ldr	r3, [pc, #36]	@ (80166c8 <tcp_next_iss+0x48>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	4413      	add	r3, r2
 80166a6:	4a07      	ldr	r2, [pc, #28]	@ (80166c4 <tcp_next_iss+0x44>)
 80166a8:	6013      	str	r3, [r2, #0]
  return iss;
 80166aa:	4b06      	ldr	r3, [pc, #24]	@ (80166c4 <tcp_next_iss+0x44>)
 80166ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	080222c4 	.word	0x080222c4
 80166bc:	080229b4 	.word	0x080229b4
 80166c0:	08022308 	.word	0x08022308
 80166c4:	20000028 	.word	0x20000028
 80166c8:	2002d3ac 	.word	0x2002d3ac

080166cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	4603      	mov	r3, r0
 80166d4:	60b9      	str	r1, [r7, #8]
 80166d6:	607a      	str	r2, [r7, #4]
 80166d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d106      	bne.n	80166ee <tcp_eff_send_mss_netif+0x22>
 80166e0:	4b14      	ldr	r3, [pc, #80]	@ (8016734 <tcp_eff_send_mss_netif+0x68>)
 80166e2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80166e6:	4914      	ldr	r1, [pc, #80]	@ (8016738 <tcp_eff_send_mss_netif+0x6c>)
 80166e8:	4814      	ldr	r0, [pc, #80]	@ (801673c <tcp_eff_send_mss_netif+0x70>)
 80166ea:	f009 fa7f 	bl	801fbec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80166ee:	68bb      	ldr	r3, [r7, #8]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d101      	bne.n	80166f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80166f4:	89fb      	ldrh	r3, [r7, #14]
 80166f6:	e019      	b.n	801672c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80166fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80166fe:	8afb      	ldrh	r3, [r7, #22]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d012      	beq.n	801672a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016704:	2328      	movs	r3, #40	@ 0x28
 8016706:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016708:	8afa      	ldrh	r2, [r7, #22]
 801670a:	8abb      	ldrh	r3, [r7, #20]
 801670c:	429a      	cmp	r2, r3
 801670e:	d904      	bls.n	801671a <tcp_eff_send_mss_netif+0x4e>
 8016710:	8afa      	ldrh	r2, [r7, #22]
 8016712:	8abb      	ldrh	r3, [r7, #20]
 8016714:	1ad3      	subs	r3, r2, r3
 8016716:	b29b      	uxth	r3, r3
 8016718:	e000      	b.n	801671c <tcp_eff_send_mss_netif+0x50>
 801671a:	2300      	movs	r3, #0
 801671c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801671e:	8a7a      	ldrh	r2, [r7, #18]
 8016720:	89fb      	ldrh	r3, [r7, #14]
 8016722:	4293      	cmp	r3, r2
 8016724:	bf28      	it	cs
 8016726:	4613      	movcs	r3, r2
 8016728:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801672a:	89fb      	ldrh	r3, [r7, #14]
}
 801672c:	4618      	mov	r0, r3
 801672e:	3718      	adds	r7, #24
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}
 8016734:	080222c4 	.word	0x080222c4
 8016738:	080229d0 	.word	0x080229d0
 801673c:	08022308 	.word	0x08022308

08016740 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d119      	bne.n	8016788 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016754:	4b10      	ldr	r3, [pc, #64]	@ (8016798 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016756:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801675a:	4910      	ldr	r1, [pc, #64]	@ (801679c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801675c:	4810      	ldr	r0, [pc, #64]	@ (80167a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801675e:	f009 fa45 	bl	801fbec <iprintf>

  while (pcb != NULL) {
 8016762:	e011      	b.n	8016788 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	681a      	ldr	r2, [r3, #0]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	429a      	cmp	r2, r3
 801676e:	d108      	bne.n	8016782 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	68db      	ldr	r3, [r3, #12]
 8016774:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016776:	68f8      	ldr	r0, [r7, #12]
 8016778:	f7fe fdee 	bl	8015358 <tcp_abort>
      pcb = next;
 801677c:	68bb      	ldr	r3, [r7, #8]
 801677e:	60fb      	str	r3, [r7, #12]
 8016780:	e002      	b.n	8016788 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	68db      	ldr	r3, [r3, #12]
 8016786:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d1ea      	bne.n	8016764 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801678e:	bf00      	nop
 8016790:	bf00      	nop
 8016792:	3710      	adds	r7, #16
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}
 8016798:	080222c4 	.word	0x080222c4
 801679c:	080229f8 	.word	0x080229f8
 80167a0:	08022308 	.word	0x08022308

080167a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b084      	sub	sp, #16
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
 80167ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d02a      	beq.n	801680a <tcp_netif_ip_addr_changed+0x66>
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d026      	beq.n	801680a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80167bc:	4b15      	ldr	r3, [pc, #84]	@ (8016814 <tcp_netif_ip_addr_changed+0x70>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4619      	mov	r1, r3
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f7ff ffbc 	bl	8016740 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80167c8:	4b13      	ldr	r3, [pc, #76]	@ (8016818 <tcp_netif_ip_addr_changed+0x74>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	4619      	mov	r1, r3
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f7ff ffb6 	bl	8016740 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80167d4:	683b      	ldr	r3, [r7, #0]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d017      	beq.n	801680a <tcp_netif_ip_addr_changed+0x66>
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d013      	beq.n	801680a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80167e2:	4b0e      	ldr	r3, [pc, #56]	@ (801681c <tcp_netif_ip_addr_changed+0x78>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	60fb      	str	r3, [r7, #12]
 80167e8:	e00c      	b.n	8016804 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	681a      	ldr	r2, [r3, #0]
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d103      	bne.n	80167fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80167f6:	683b      	ldr	r3, [r7, #0]
 80167f8:	681a      	ldr	r2, [r3, #0]
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	68db      	ldr	r3, [r3, #12]
 8016802:	60fb      	str	r3, [r7, #12]
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d1ef      	bne.n	80167ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801680a:	bf00      	nop
 801680c:	3710      	adds	r7, #16
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}
 8016812:	bf00      	nop
 8016814:	2002d3b8 	.word	0x2002d3b8
 8016818:	2002d3b0 	.word	0x2002d3b0
 801681c:	2002d3b4 	.word	0x2002d3b4

08016820 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801682c:	2b00      	cmp	r3, #0
 801682e:	d007      	beq.n	8016840 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016834:	4618      	mov	r0, r3
 8016836:	f7ff fb45 	bl	8015ec4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2200      	movs	r2, #0
 801683e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016840:	bf00      	nop
 8016842:	3708      	adds	r7, #8
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}

08016848 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016848:	b590      	push	{r4, r7, lr}
 801684a:	b08d      	sub	sp, #52	@ 0x34
 801684c:	af04      	add	r7, sp, #16
 801684e:	6078      	str	r0, [r7, #4]
 8016850:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d105      	bne.n	8016864 <tcp_input+0x1c>
 8016858:	4b9b      	ldr	r3, [pc, #620]	@ (8016ac8 <tcp_input+0x280>)
 801685a:	2283      	movs	r2, #131	@ 0x83
 801685c:	499b      	ldr	r1, [pc, #620]	@ (8016acc <tcp_input+0x284>)
 801685e:	489c      	ldr	r0, [pc, #624]	@ (8016ad0 <tcp_input+0x288>)
 8016860:	f009 f9c4 	bl	801fbec <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8016864:	4b9b      	ldr	r3, [pc, #620]	@ (8016ad4 <tcp_input+0x28c>)
 8016866:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 801686a:	3301      	adds	r3, #1
 801686c:	b29a      	uxth	r2, r3
 801686e:	4b99      	ldr	r3, [pc, #612]	@ (8016ad4 <tcp_input+0x28c>)
 8016870:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	4a97      	ldr	r2, [pc, #604]	@ (8016ad8 <tcp_input+0x290>)
 801687a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	895b      	ldrh	r3, [r3, #10]
 8016880:	2b13      	cmp	r3, #19
 8016882:	d809      	bhi.n	8016898 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8016884:	4b93      	ldr	r3, [pc, #588]	@ (8016ad4 <tcp_input+0x28c>)
 8016886:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801688a:	3301      	adds	r3, #1
 801688c:	b29a      	uxth	r2, r3
 801688e:	4b91      	ldr	r3, [pc, #580]	@ (8016ad4 <tcp_input+0x28c>)
 8016890:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016894:	f000 bc1c 	b.w	80170d0 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016898:	4b90      	ldr	r3, [pc, #576]	@ (8016adc <tcp_input+0x294>)
 801689a:	695b      	ldr	r3, [r3, #20]
 801689c:	4a8f      	ldr	r2, [pc, #572]	@ (8016adc <tcp_input+0x294>)
 801689e:	6812      	ldr	r2, [r2, #0]
 80168a0:	4611      	mov	r1, r2
 80168a2:	4618      	mov	r0, r3
 80168a4:	f006 fdaa 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d105      	bne.n	80168ba <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80168ae:	4b8b      	ldr	r3, [pc, #556]	@ (8016adc <tcp_input+0x294>)
 80168b0:	695b      	ldr	r3, [r3, #20]
 80168b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80168b6:	2be0      	cmp	r3, #224	@ 0xe0
 80168b8:	d109      	bne.n	80168ce <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 80168ba:	4b86      	ldr	r3, [pc, #536]	@ (8016ad4 <tcp_input+0x28c>)
 80168bc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80168c0:	3301      	adds	r3, #1
 80168c2:	b29a      	uxth	r2, r3
 80168c4:	4b83      	ldr	r3, [pc, #524]	@ (8016ad4 <tcp_input+0x28c>)
 80168c6:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 80168ca:	f000 bc01 	b.w	80170d0 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80168ce:	4b82      	ldr	r3, [pc, #520]	@ (8016ad8 <tcp_input+0x290>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	899b      	ldrh	r3, [r3, #12]
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7fc fa78 	bl	8012dcc <lwip_htons>
 80168dc:	4603      	mov	r3, r0
 80168de:	0b1b      	lsrs	r3, r3, #12
 80168e0:	b29b      	uxth	r3, r3
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	009b      	lsls	r3, r3, #2
 80168e6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80168e8:	7cbb      	ldrb	r3, [r7, #18]
 80168ea:	2b13      	cmp	r3, #19
 80168ec:	d905      	bls.n	80168fa <tcp_input+0xb2>
 80168ee:	7cbb      	ldrb	r3, [r7, #18]
 80168f0:	b29a      	uxth	r2, r3
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	891b      	ldrh	r3, [r3, #8]
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d908      	bls.n	801690c <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 80168fa:	4b76      	ldr	r3, [pc, #472]	@ (8016ad4 <tcp_input+0x28c>)
 80168fc:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016900:	3301      	adds	r3, #1
 8016902:	b29a      	uxth	r2, r3
 8016904:	4b73      	ldr	r3, [pc, #460]	@ (8016ad4 <tcp_input+0x28c>)
 8016906:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 801690a:	e3e1      	b.n	80170d0 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801690c:	7cbb      	ldrb	r3, [r7, #18]
 801690e:	b29b      	uxth	r3, r3
 8016910:	3b14      	subs	r3, #20
 8016912:	b29a      	uxth	r2, r3
 8016914:	4b72      	ldr	r3, [pc, #456]	@ (8016ae0 <tcp_input+0x298>)
 8016916:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016918:	4b72      	ldr	r3, [pc, #456]	@ (8016ae4 <tcp_input+0x29c>)
 801691a:	2200      	movs	r2, #0
 801691c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	895a      	ldrh	r2, [r3, #10]
 8016922:	7cbb      	ldrb	r3, [r7, #18]
 8016924:	b29b      	uxth	r3, r3
 8016926:	429a      	cmp	r2, r3
 8016928:	d309      	bcc.n	801693e <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801692a:	4b6d      	ldr	r3, [pc, #436]	@ (8016ae0 <tcp_input+0x298>)
 801692c:	881a      	ldrh	r2, [r3, #0]
 801692e:	4b6e      	ldr	r3, [pc, #440]	@ (8016ae8 <tcp_input+0x2a0>)
 8016930:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016932:	7cbb      	ldrb	r3, [r7, #18]
 8016934:	4619      	mov	r1, r3
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f7fd fe80 	bl	801463c <pbuf_remove_header>
 801693c:	e056      	b.n	80169ec <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d105      	bne.n	8016952 <tcp_input+0x10a>
 8016946:	4b60      	ldr	r3, [pc, #384]	@ (8016ac8 <tcp_input+0x280>)
 8016948:	22c2      	movs	r2, #194	@ 0xc2
 801694a:	4968      	ldr	r1, [pc, #416]	@ (8016aec <tcp_input+0x2a4>)
 801694c:	4860      	ldr	r0, [pc, #384]	@ (8016ad0 <tcp_input+0x288>)
 801694e:	f009 f94d 	bl	801fbec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016952:	2114      	movs	r1, #20
 8016954:	6878      	ldr	r0, [r7, #4]
 8016956:	f7fd fe71 	bl	801463c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	895a      	ldrh	r2, [r3, #10]
 801695e:	4b62      	ldr	r3, [pc, #392]	@ (8016ae8 <tcp_input+0x2a0>)
 8016960:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016962:	4b5f      	ldr	r3, [pc, #380]	@ (8016ae0 <tcp_input+0x298>)
 8016964:	881a      	ldrh	r2, [r3, #0]
 8016966:	4b60      	ldr	r3, [pc, #384]	@ (8016ae8 <tcp_input+0x2a0>)
 8016968:	881b      	ldrh	r3, [r3, #0]
 801696a:	1ad3      	subs	r3, r2, r3
 801696c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801696e:	4b5e      	ldr	r3, [pc, #376]	@ (8016ae8 <tcp_input+0x2a0>)
 8016970:	881b      	ldrh	r3, [r3, #0]
 8016972:	4619      	mov	r1, r3
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	f7fd fe61 	bl	801463c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	895b      	ldrh	r3, [r3, #10]
 8016980:	8a3a      	ldrh	r2, [r7, #16]
 8016982:	429a      	cmp	r2, r3
 8016984:	d908      	bls.n	8016998 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8016986:	4b53      	ldr	r3, [pc, #332]	@ (8016ad4 <tcp_input+0x28c>)
 8016988:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801698c:	3301      	adds	r3, #1
 801698e:	b29a      	uxth	r2, r3
 8016990:	4b50      	ldr	r3, [pc, #320]	@ (8016ad4 <tcp_input+0x28c>)
 8016992:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016996:	e39b      	b.n	80170d0 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	685b      	ldr	r3, [r3, #4]
 801699e:	4a51      	ldr	r2, [pc, #324]	@ (8016ae4 <tcp_input+0x29c>)
 80169a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	8a3a      	ldrh	r2, [r7, #16]
 80169a8:	4611      	mov	r1, r2
 80169aa:	4618      	mov	r0, r3
 80169ac:	f7fd fe46 	bl	801463c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	891a      	ldrh	r2, [r3, #8]
 80169b4:	8a3b      	ldrh	r3, [r7, #16]
 80169b6:	1ad3      	subs	r3, r2, r3
 80169b8:	b29a      	uxth	r2, r3
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	895b      	ldrh	r3, [r3, #10]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d005      	beq.n	80169d2 <tcp_input+0x18a>
 80169c6:	4b40      	ldr	r3, [pc, #256]	@ (8016ac8 <tcp_input+0x280>)
 80169c8:	22df      	movs	r2, #223	@ 0xdf
 80169ca:	4949      	ldr	r1, [pc, #292]	@ (8016af0 <tcp_input+0x2a8>)
 80169cc:	4840      	ldr	r0, [pc, #256]	@ (8016ad0 <tcp_input+0x288>)
 80169ce:	f009 f90d 	bl	801fbec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	891a      	ldrh	r2, [r3, #8]
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	891b      	ldrh	r3, [r3, #8]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d005      	beq.n	80169ec <tcp_input+0x1a4>
 80169e0:	4b39      	ldr	r3, [pc, #228]	@ (8016ac8 <tcp_input+0x280>)
 80169e2:	22e0      	movs	r2, #224	@ 0xe0
 80169e4:	4943      	ldr	r1, [pc, #268]	@ (8016af4 <tcp_input+0x2ac>)
 80169e6:	483a      	ldr	r0, [pc, #232]	@ (8016ad0 <tcp_input+0x288>)
 80169e8:	f009 f900 	bl	801fbec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80169ec:	4b3a      	ldr	r3, [pc, #232]	@ (8016ad8 <tcp_input+0x290>)
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	881b      	ldrh	r3, [r3, #0]
 80169f2:	b29b      	uxth	r3, r3
 80169f4:	4a38      	ldr	r2, [pc, #224]	@ (8016ad8 <tcp_input+0x290>)
 80169f6:	6814      	ldr	r4, [r2, #0]
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7fc f9e7 	bl	8012dcc <lwip_htons>
 80169fe:	4603      	mov	r3, r0
 8016a00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016a02:	4b35      	ldr	r3, [pc, #212]	@ (8016ad8 <tcp_input+0x290>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	885b      	ldrh	r3, [r3, #2]
 8016a08:	b29b      	uxth	r3, r3
 8016a0a:	4a33      	ldr	r2, [pc, #204]	@ (8016ad8 <tcp_input+0x290>)
 8016a0c:	6814      	ldr	r4, [r2, #0]
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7fc f9dc 	bl	8012dcc <lwip_htons>
 8016a14:	4603      	mov	r3, r0
 8016a16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016a18:	4b2f      	ldr	r3, [pc, #188]	@ (8016ad8 <tcp_input+0x290>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8016ad8 <tcp_input+0x290>)
 8016a20:	6814      	ldr	r4, [r2, #0]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7fc f9e8 	bl	8012df8 <lwip_htonl>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	6063      	str	r3, [r4, #4]
 8016a2c:	6863      	ldr	r3, [r4, #4]
 8016a2e:	4a32      	ldr	r2, [pc, #200]	@ (8016af8 <tcp_input+0x2b0>)
 8016a30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016a32:	4b29      	ldr	r3, [pc, #164]	@ (8016ad8 <tcp_input+0x290>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	689b      	ldr	r3, [r3, #8]
 8016a38:	4a27      	ldr	r2, [pc, #156]	@ (8016ad8 <tcp_input+0x290>)
 8016a3a:	6814      	ldr	r4, [r2, #0]
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7fc f9db 	bl	8012df8 <lwip_htonl>
 8016a42:	4603      	mov	r3, r0
 8016a44:	60a3      	str	r3, [r4, #8]
 8016a46:	68a3      	ldr	r3, [r4, #8]
 8016a48:	4a2c      	ldr	r2, [pc, #176]	@ (8016afc <tcp_input+0x2b4>)
 8016a4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016a4c:	4b22      	ldr	r3, [pc, #136]	@ (8016ad8 <tcp_input+0x290>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	89db      	ldrh	r3, [r3, #14]
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	4a20      	ldr	r2, [pc, #128]	@ (8016ad8 <tcp_input+0x290>)
 8016a56:	6814      	ldr	r4, [r2, #0]
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7fc f9b7 	bl	8012dcc <lwip_htons>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016a62:	4b1d      	ldr	r3, [pc, #116]	@ (8016ad8 <tcp_input+0x290>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	899b      	ldrh	r3, [r3, #12]
 8016a68:	b29b      	uxth	r3, r3
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7fc f9ae 	bl	8012dcc <lwip_htons>
 8016a70:	4603      	mov	r3, r0
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016a78:	b2da      	uxtb	r2, r3
 8016a7a:	4b21      	ldr	r3, [pc, #132]	@ (8016b00 <tcp_input+0x2b8>)
 8016a7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	891a      	ldrh	r2, [r3, #8]
 8016a82:	4b20      	ldr	r3, [pc, #128]	@ (8016b04 <tcp_input+0x2bc>)
 8016a84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016a86:	4b1e      	ldr	r3, [pc, #120]	@ (8016b00 <tcp_input+0x2b8>)
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	f003 0303 	and.w	r3, r3, #3
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d014      	beq.n	8016abc <tcp_input+0x274>
    tcplen++;
 8016a92:	4b1c      	ldr	r3, [pc, #112]	@ (8016b04 <tcp_input+0x2bc>)
 8016a94:	881b      	ldrh	r3, [r3, #0]
 8016a96:	3301      	adds	r3, #1
 8016a98:	b29a      	uxth	r2, r3
 8016a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8016b04 <tcp_input+0x2bc>)
 8016a9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	891a      	ldrh	r2, [r3, #8]
 8016aa2:	4b18      	ldr	r3, [pc, #96]	@ (8016b04 <tcp_input+0x2bc>)
 8016aa4:	881b      	ldrh	r3, [r3, #0]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d908      	bls.n	8016abc <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8016aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8016ad4 <tcp_input+0x28c>)
 8016aac:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	b29a      	uxth	r2, r3
 8016ab4:	4b07      	ldr	r3, [pc, #28]	@ (8016ad4 <tcp_input+0x28c>)
 8016ab6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016aba:	e309      	b.n	80170d0 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016abc:	2300      	movs	r3, #0
 8016abe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ac0:	4b11      	ldr	r3, [pc, #68]	@ (8016b08 <tcp_input+0x2c0>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	61fb      	str	r3, [r7, #28]
 8016ac6:	e0a1      	b.n	8016c0c <tcp_input+0x3c4>
 8016ac8:	08022a2c 	.word	0x08022a2c
 8016acc:	08022a60 	.word	0x08022a60
 8016ad0:	08022a78 	.word	0x08022a78
 8016ad4:	2002d2b0 	.word	0x2002d2b0
 8016ad8:	2002d3d4 	.word	0x2002d3d4
 8016adc:	200270b4 	.word	0x200270b4
 8016ae0:	2002d3d8 	.word	0x2002d3d8
 8016ae4:	2002d3dc 	.word	0x2002d3dc
 8016ae8:	2002d3da 	.word	0x2002d3da
 8016aec:	08022aa0 	.word	0x08022aa0
 8016af0:	08022ab0 	.word	0x08022ab0
 8016af4:	08022abc 	.word	0x08022abc
 8016af8:	2002d3e4 	.word	0x2002d3e4
 8016afc:	2002d3e8 	.word	0x2002d3e8
 8016b00:	2002d3f0 	.word	0x2002d3f0
 8016b04:	2002d3ee 	.word	0x2002d3ee
 8016b08:	2002d3b8 	.word	0x2002d3b8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016b0c:	69fb      	ldr	r3, [r7, #28]
 8016b0e:	7d1b      	ldrb	r3, [r3, #20]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d105      	bne.n	8016b20 <tcp_input+0x2d8>
 8016b14:	4b8a      	ldr	r3, [pc, #552]	@ (8016d40 <tcp_input+0x4f8>)
 8016b16:	22fb      	movs	r2, #251	@ 0xfb
 8016b18:	498a      	ldr	r1, [pc, #552]	@ (8016d44 <tcp_input+0x4fc>)
 8016b1a:	488b      	ldr	r0, [pc, #556]	@ (8016d48 <tcp_input+0x500>)
 8016b1c:	f009 f866 	bl	801fbec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016b20:	69fb      	ldr	r3, [r7, #28]
 8016b22:	7d1b      	ldrb	r3, [r3, #20]
 8016b24:	2b0a      	cmp	r3, #10
 8016b26:	d105      	bne.n	8016b34 <tcp_input+0x2ec>
 8016b28:	4b85      	ldr	r3, [pc, #532]	@ (8016d40 <tcp_input+0x4f8>)
 8016b2a:	22fc      	movs	r2, #252	@ 0xfc
 8016b2c:	4987      	ldr	r1, [pc, #540]	@ (8016d4c <tcp_input+0x504>)
 8016b2e:	4886      	ldr	r0, [pc, #536]	@ (8016d48 <tcp_input+0x500>)
 8016b30:	f009 f85c 	bl	801fbec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016b34:	69fb      	ldr	r3, [r7, #28]
 8016b36:	7d1b      	ldrb	r3, [r3, #20]
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d105      	bne.n	8016b48 <tcp_input+0x300>
 8016b3c:	4b80      	ldr	r3, [pc, #512]	@ (8016d40 <tcp_input+0x4f8>)
 8016b3e:	22fd      	movs	r2, #253	@ 0xfd
 8016b40:	4983      	ldr	r1, [pc, #524]	@ (8016d50 <tcp_input+0x508>)
 8016b42:	4881      	ldr	r0, [pc, #516]	@ (8016d48 <tcp_input+0x500>)
 8016b44:	f009 f852 	bl	801fbec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b48:	69fb      	ldr	r3, [r7, #28]
 8016b4a:	7a1b      	ldrb	r3, [r3, #8]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d00c      	beq.n	8016b6a <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016b50:	69fb      	ldr	r3, [r7, #28]
 8016b52:	7a1a      	ldrb	r2, [r3, #8]
 8016b54:	4b7f      	ldr	r3, [pc, #508]	@ (8016d54 <tcp_input+0x50c>)
 8016b56:	685b      	ldr	r3, [r3, #4]
 8016b58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d002      	beq.n	8016b6a <tcp_input+0x322>
      prev = pcb;
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	61bb      	str	r3, [r7, #24]
      continue;
 8016b68:	e04d      	b.n	8016c06 <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	8b1a      	ldrh	r2, [r3, #24]
 8016b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8016d58 <tcp_input+0x510>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	881b      	ldrh	r3, [r3, #0]
 8016b74:	b29b      	uxth	r3, r3
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d143      	bne.n	8016c02 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8016b7a:	69fb      	ldr	r3, [r7, #28]
 8016b7c:	8ada      	ldrh	r2, [r3, #22]
 8016b7e:	4b76      	ldr	r3, [pc, #472]	@ (8016d58 <tcp_input+0x510>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	885b      	ldrh	r3, [r3, #2]
 8016b84:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d13b      	bne.n	8016c02 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b8a:	69fb      	ldr	r3, [r7, #28]
 8016b8c:	685a      	ldr	r2, [r3, #4]
 8016b8e:	4b71      	ldr	r3, [pc, #452]	@ (8016d54 <tcp_input+0x50c>)
 8016b90:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016b92:	429a      	cmp	r2, r3
 8016b94:	d135      	bne.n	8016c02 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b96:	69fb      	ldr	r3, [r7, #28]
 8016b98:	681a      	ldr	r2, [r3, #0]
 8016b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8016d54 <tcp_input+0x50c>)
 8016b9c:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d12f      	bne.n	8016c02 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	68db      	ldr	r3, [r3, #12]
 8016ba6:	69fa      	ldr	r2, [r7, #28]
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d106      	bne.n	8016bba <tcp_input+0x372>
 8016bac:	4b64      	ldr	r3, [pc, #400]	@ (8016d40 <tcp_input+0x4f8>)
 8016bae:	f240 120d 	movw	r2, #269	@ 0x10d
 8016bb2:	496a      	ldr	r1, [pc, #424]	@ (8016d5c <tcp_input+0x514>)
 8016bb4:	4864      	ldr	r0, [pc, #400]	@ (8016d48 <tcp_input+0x500>)
 8016bb6:	f009 f819 	bl	801fbec <iprintf>
      if (prev != NULL) {
 8016bba:	69bb      	ldr	r3, [r7, #24]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d00b      	beq.n	8016bd8 <tcp_input+0x390>
        prev->next = pcb->next;
 8016bc0:	69fb      	ldr	r3, [r7, #28]
 8016bc2:	68da      	ldr	r2, [r3, #12]
 8016bc4:	69bb      	ldr	r3, [r7, #24]
 8016bc6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016bc8:	4b65      	ldr	r3, [pc, #404]	@ (8016d60 <tcp_input+0x518>)
 8016bca:	681a      	ldr	r2, [r3, #0]
 8016bcc:	69fb      	ldr	r3, [r7, #28]
 8016bce:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016bd0:	4a63      	ldr	r2, [pc, #396]	@ (8016d60 <tcp_input+0x518>)
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	6013      	str	r3, [r2, #0]
 8016bd6:	e007      	b.n	8016be8 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8016bd8:	4b62      	ldr	r3, [pc, #392]	@ (8016d64 <tcp_input+0x51c>)
 8016bda:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8016bde:	3301      	adds	r3, #1
 8016be0:	b29a      	uxth	r2, r3
 8016be2:	4b60      	ldr	r3, [pc, #384]	@ (8016d64 <tcp_input+0x51c>)
 8016be4:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016be8:	69fb      	ldr	r3, [r7, #28]
 8016bea:	68db      	ldr	r3, [r3, #12]
 8016bec:	69fa      	ldr	r2, [r7, #28]
 8016bee:	429a      	cmp	r2, r3
 8016bf0:	d111      	bne.n	8016c16 <tcp_input+0x3ce>
 8016bf2:	4b53      	ldr	r3, [pc, #332]	@ (8016d40 <tcp_input+0x4f8>)
 8016bf4:	f240 1215 	movw	r2, #277	@ 0x115
 8016bf8:	495b      	ldr	r1, [pc, #364]	@ (8016d68 <tcp_input+0x520>)
 8016bfa:	4853      	ldr	r0, [pc, #332]	@ (8016d48 <tcp_input+0x500>)
 8016bfc:	f008 fff6 	bl	801fbec <iprintf>
      break;
 8016c00:	e009      	b.n	8016c16 <tcp_input+0x3ce>
    }
    prev = pcb;
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c06:	69fb      	ldr	r3, [r7, #28]
 8016c08:	68db      	ldr	r3, [r3, #12]
 8016c0a:	61fb      	str	r3, [r7, #28]
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f47f af7c 	bne.w	8016b0c <tcp_input+0x2c4>
 8016c14:	e000      	b.n	8016c18 <tcp_input+0x3d0>
      break;
 8016c16:	bf00      	nop
  }

  if (pcb == NULL) {
 8016c18:	69fb      	ldr	r3, [r7, #28]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f040 80bb 	bne.w	8016d96 <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c20:	4b52      	ldr	r3, [pc, #328]	@ (8016d6c <tcp_input+0x524>)
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	61fb      	str	r3, [r7, #28]
 8016c26:	e03f      	b.n	8016ca8 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016c28:	69fb      	ldr	r3, [r7, #28]
 8016c2a:	7d1b      	ldrb	r3, [r3, #20]
 8016c2c:	2b0a      	cmp	r3, #10
 8016c2e:	d006      	beq.n	8016c3e <tcp_input+0x3f6>
 8016c30:	4b43      	ldr	r3, [pc, #268]	@ (8016d40 <tcp_input+0x4f8>)
 8016c32:	f240 121f 	movw	r2, #287	@ 0x11f
 8016c36:	494e      	ldr	r1, [pc, #312]	@ (8016d70 <tcp_input+0x528>)
 8016c38:	4843      	ldr	r0, [pc, #268]	@ (8016d48 <tcp_input+0x500>)
 8016c3a:	f008 ffd7 	bl	801fbec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016c3e:	69fb      	ldr	r3, [r7, #28]
 8016c40:	7a1b      	ldrb	r3, [r3, #8]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d009      	beq.n	8016c5a <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	7a1a      	ldrb	r2, [r3, #8]
 8016c4a:	4b42      	ldr	r3, [pc, #264]	@ (8016d54 <tcp_input+0x50c>)
 8016c4c:	685b      	ldr	r3, [r3, #4]
 8016c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016c52:	3301      	adds	r3, #1
 8016c54:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016c56:	429a      	cmp	r2, r3
 8016c58:	d122      	bne.n	8016ca0 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016c5a:	69fb      	ldr	r3, [r7, #28]
 8016c5c:	8b1a      	ldrh	r2, [r3, #24]
 8016c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8016d58 <tcp_input+0x510>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	881b      	ldrh	r3, [r3, #0]
 8016c64:	b29b      	uxth	r3, r3
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d11b      	bne.n	8016ca2 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 8016c6a:	69fb      	ldr	r3, [r7, #28]
 8016c6c:	8ada      	ldrh	r2, [r3, #22]
 8016c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8016d58 <tcp_input+0x510>)
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	885b      	ldrh	r3, [r3, #2]
 8016c74:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d113      	bne.n	8016ca2 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016c7a:	69fb      	ldr	r3, [r7, #28]
 8016c7c:	685a      	ldr	r2, [r3, #4]
 8016c7e:	4b35      	ldr	r3, [pc, #212]	@ (8016d54 <tcp_input+0x50c>)
 8016c80:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d10d      	bne.n	8016ca2 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016c86:	69fb      	ldr	r3, [r7, #28]
 8016c88:	681a      	ldr	r2, [r3, #0]
 8016c8a:	4b32      	ldr	r3, [pc, #200]	@ (8016d54 <tcp_input+0x50c>)
 8016c8c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d107      	bne.n	8016ca2 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016c92:	69f8      	ldr	r0, [r7, #28]
 8016c94:	f000 fb88 	bl	80173a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016c98:	6878      	ldr	r0, [r7, #4]
 8016c9a:	f7fd fd55 	bl	8014748 <pbuf_free>
        return;
 8016c9e:	e224      	b.n	80170ea <tcp_input+0x8a2>
        continue;
 8016ca0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ca2:	69fb      	ldr	r3, [r7, #28]
 8016ca4:	68db      	ldr	r3, [r3, #12]
 8016ca6:	61fb      	str	r3, [r7, #28]
 8016ca8:	69fb      	ldr	r3, [r7, #28]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d1bc      	bne.n	8016c28 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016cb2:	4b30      	ldr	r3, [pc, #192]	@ (8016d74 <tcp_input+0x52c>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	617b      	str	r3, [r7, #20]
 8016cb8:	e02a      	b.n	8016d10 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016cba:	697b      	ldr	r3, [r7, #20]
 8016cbc:	7a1b      	ldrb	r3, [r3, #8]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d00c      	beq.n	8016cdc <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	7a1a      	ldrb	r2, [r3, #8]
 8016cc6:	4b23      	ldr	r3, [pc, #140]	@ (8016d54 <tcp_input+0x50c>)
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016cce:	3301      	adds	r3, #1
 8016cd0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d002      	beq.n	8016cdc <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	61bb      	str	r3, [r7, #24]
        continue;
 8016cda:	e016      	b.n	8016d0a <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	8ada      	ldrh	r2, [r3, #22]
 8016ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8016d58 <tcp_input+0x510>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	885b      	ldrh	r3, [r3, #2]
 8016ce6:	b29b      	uxth	r3, r3
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d10c      	bne.n	8016d06 <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016cec:	697b      	ldr	r3, [r7, #20]
 8016cee:	681a      	ldr	r2, [r3, #0]
 8016cf0:	4b18      	ldr	r3, [pc, #96]	@ (8016d54 <tcp_input+0x50c>)
 8016cf2:	695b      	ldr	r3, [r3, #20]
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d00f      	beq.n	8016d18 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016cf8:	697b      	ldr	r3, [r7, #20]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d00d      	beq.n	8016d1a <tcp_input+0x4d2>
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d009      	beq.n	8016d1a <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	68db      	ldr	r3, [r3, #12]
 8016d0e:	617b      	str	r3, [r7, #20]
 8016d10:	697b      	ldr	r3, [r7, #20]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d1d1      	bne.n	8016cba <tcp_input+0x472>
 8016d16:	e000      	b.n	8016d1a <tcp_input+0x4d2>
            break;
 8016d18:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d03a      	beq.n	8016d96 <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016d20:	69bb      	ldr	r3, [r7, #24]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d028      	beq.n	8016d78 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016d26:	697b      	ldr	r3, [r7, #20]
 8016d28:	68da      	ldr	r2, [r3, #12]
 8016d2a:	69bb      	ldr	r3, [r7, #24]
 8016d2c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016d2e:	4b11      	ldr	r3, [pc, #68]	@ (8016d74 <tcp_input+0x52c>)
 8016d30:	681a      	ldr	r2, [r3, #0]
 8016d32:	697b      	ldr	r3, [r7, #20]
 8016d34:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016d36:	4a0f      	ldr	r2, [pc, #60]	@ (8016d74 <tcp_input+0x52c>)
 8016d38:	697b      	ldr	r3, [r7, #20]
 8016d3a:	6013      	str	r3, [r2, #0]
 8016d3c:	e024      	b.n	8016d88 <tcp_input+0x540>
 8016d3e:	bf00      	nop
 8016d40:	08022a2c 	.word	0x08022a2c
 8016d44:	08022adc 	.word	0x08022adc
 8016d48:	08022a78 	.word	0x08022a78
 8016d4c:	08022b04 	.word	0x08022b04
 8016d50:	08022b30 	.word	0x08022b30
 8016d54:	200270b4 	.word	0x200270b4
 8016d58:	2002d3d4 	.word	0x2002d3d4
 8016d5c:	08022b58 	.word	0x08022b58
 8016d60:	2002d3b8 	.word	0x2002d3b8
 8016d64:	2002d2b0 	.word	0x2002d2b0
 8016d68:	08022b84 	.word	0x08022b84
 8016d6c:	2002d3bc 	.word	0x2002d3bc
 8016d70:	08022bb0 	.word	0x08022bb0
 8016d74:	2002d3b4 	.word	0x2002d3b4
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8016d78:	4ba0      	ldr	r3, [pc, #640]	@ (8016ffc <tcp_input+0x7b4>)
 8016d7a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8016d7e:	3301      	adds	r3, #1
 8016d80:	b29a      	uxth	r2, r3
 8016d82:	4b9e      	ldr	r3, [pc, #632]	@ (8016ffc <tcp_input+0x7b4>)
 8016d84:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016d88:	6978      	ldr	r0, [r7, #20]
 8016d8a:	f000 fa05 	bl	8017198 <tcp_listen_input>
      }
      pbuf_free(p);
 8016d8e:	6878      	ldr	r0, [r7, #4]
 8016d90:	f7fd fcda 	bl	8014748 <pbuf_free>
      return;
 8016d94:	e1a9      	b.n	80170ea <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016d96:	69fb      	ldr	r3, [r7, #28]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	f000 815f 	beq.w	801705c <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016d9e:	4b98      	ldr	r3, [pc, #608]	@ (8017000 <tcp_input+0x7b8>)
 8016da0:	2200      	movs	r2, #0
 8016da2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	891a      	ldrh	r2, [r3, #8]
 8016da8:	4b95      	ldr	r3, [pc, #596]	@ (8017000 <tcp_input+0x7b8>)
 8016daa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016dac:	4a94      	ldr	r2, [pc, #592]	@ (8017000 <tcp_input+0x7b8>)
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016db2:	4b94      	ldr	r3, [pc, #592]	@ (8017004 <tcp_input+0x7bc>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	4a92      	ldr	r2, [pc, #584]	@ (8017000 <tcp_input+0x7b8>)
 8016db8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016dba:	4b93      	ldr	r3, [pc, #588]	@ (8017008 <tcp_input+0x7c0>)
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016dc0:	4b92      	ldr	r3, [pc, #584]	@ (801700c <tcp_input+0x7c4>)
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016dc6:	4b92      	ldr	r3, [pc, #584]	@ (8017010 <tcp_input+0x7c8>)
 8016dc8:	2200      	movs	r2, #0
 8016dca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016dcc:	4b91      	ldr	r3, [pc, #580]	@ (8017014 <tcp_input+0x7cc>)
 8016dce:	781b      	ldrb	r3, [r3, #0]
 8016dd0:	f003 0308 	and.w	r3, r3, #8
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d006      	beq.n	8016de6 <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	7b5b      	ldrb	r3, [r3, #13]
 8016ddc:	f043 0301 	orr.w	r3, r3, #1
 8016de0:	b2da      	uxtb	r2, r3
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016de6:	69fb      	ldr	r3, [r7, #28]
 8016de8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d01e      	beq.n	8016e2c <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016dee:	69f8      	ldr	r0, [r7, #28]
 8016df0:	f7fe ffec 	bl	8015dcc <tcp_process_refused_data>
 8016df4:	4603      	mov	r3, r0
 8016df6:	f113 0f0d 	cmn.w	r3, #13
 8016dfa:	d007      	beq.n	8016e0c <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016dfc:	69fb      	ldr	r3, [r7, #28]
 8016dfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d013      	beq.n	8016e2c <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016e04:	4b84      	ldr	r3, [pc, #528]	@ (8017018 <tcp_input+0x7d0>)
 8016e06:	881b      	ldrh	r3, [r3, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d00f      	beq.n	8016e2c <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016e0c:	69fb      	ldr	r3, [r7, #28]
 8016e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d102      	bne.n	8016e1a <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016e14:	69f8      	ldr	r0, [r7, #28]
 8016e16:	f003 fe6f 	bl	801aaf8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8016e1a:	4b78      	ldr	r3, [pc, #480]	@ (8016ffc <tcp_input+0x7b4>)
 8016e1c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8016e20:	3301      	adds	r3, #1
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	4b75      	ldr	r3, [pc, #468]	@ (8016ffc <tcp_input+0x7b4>)
 8016e26:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016e2a:	e104      	b.n	8017036 <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 8016e2c:	4a7b      	ldr	r2, [pc, #492]	@ (801701c <tcp_input+0x7d4>)
 8016e2e:	69fb      	ldr	r3, [r7, #28]
 8016e30:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016e32:	69f8      	ldr	r0, [r7, #28]
 8016e34:	f000 fb32 	bl	801749c <tcp_process>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016e3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e40:	f113 0f0d 	cmn.w	r3, #13
 8016e44:	f000 80d1 	beq.w	8016fea <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8016e48:	4b70      	ldr	r3, [pc, #448]	@ (801700c <tcp_input+0x7c4>)
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	f003 0308 	and.w	r3, r3, #8
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d015      	beq.n	8016e80 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016e54:	69fb      	ldr	r3, [r7, #28]
 8016e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d008      	beq.n	8016e70 <tcp_input+0x628>
 8016e5e:	69fb      	ldr	r3, [r7, #28]
 8016e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e64:	69fa      	ldr	r2, [r7, #28]
 8016e66:	6912      	ldr	r2, [r2, #16]
 8016e68:	f06f 010d 	mvn.w	r1, #13
 8016e6c:	4610      	mov	r0, r2
 8016e6e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016e70:	69f9      	ldr	r1, [r7, #28]
 8016e72:	486b      	ldr	r0, [pc, #428]	@ (8017020 <tcp_input+0x7d8>)
 8016e74:	f7ff fb70 	bl	8016558 <tcp_pcb_remove>
        tcp_free(pcb);
 8016e78:	69f8      	ldr	r0, [r7, #28]
 8016e7a:	f7fd ff29 	bl	8014cd0 <tcp_free>
 8016e7e:	e0da      	b.n	8017036 <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 8016e80:	2300      	movs	r3, #0
 8016e82:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016e84:	4b62      	ldr	r3, [pc, #392]	@ (8017010 <tcp_input+0x7c8>)
 8016e86:	881b      	ldrh	r3, [r3, #0]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d01d      	beq.n	8016ec8 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016e8c:	4b60      	ldr	r3, [pc, #384]	@ (8017010 <tcp_input+0x7c8>)
 8016e8e:	881b      	ldrh	r3, [r3, #0]
 8016e90:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016e92:	69fb      	ldr	r3, [r7, #28]
 8016e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d00a      	beq.n	8016eb2 <tcp_input+0x66a>
 8016e9c:	69fb      	ldr	r3, [r7, #28]
 8016e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016ea2:	69fa      	ldr	r2, [r7, #28]
 8016ea4:	6910      	ldr	r0, [r2, #16]
 8016ea6:	89fa      	ldrh	r2, [r7, #14]
 8016ea8:	69f9      	ldr	r1, [r7, #28]
 8016eaa:	4798      	blx	r3
 8016eac:	4603      	mov	r3, r0
 8016eae:	74fb      	strb	r3, [r7, #19]
 8016eb0:	e001      	b.n	8016eb6 <tcp_input+0x66e>
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016eb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016eba:	f113 0f0d 	cmn.w	r3, #13
 8016ebe:	f000 8096 	beq.w	8016fee <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016ec2:	4b53      	ldr	r3, [pc, #332]	@ (8017010 <tcp_input+0x7c8>)
 8016ec4:	2200      	movs	r2, #0
 8016ec6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016ec8:	69f8      	ldr	r0, [r7, #28]
 8016eca:	f000 f925 	bl	8017118 <tcp_input_delayed_close>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	f040 808e 	bne.w	8016ff2 <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8017008 <tcp_input+0x7c0>)
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d041      	beq.n	8016f62 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016ede:	69fb      	ldr	r3, [r7, #28]
 8016ee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d006      	beq.n	8016ef4 <tcp_input+0x6ac>
 8016ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8017024 <tcp_input+0x7dc>)
 8016ee8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016eec:	494e      	ldr	r1, [pc, #312]	@ (8017028 <tcp_input+0x7e0>)
 8016eee:	484f      	ldr	r0, [pc, #316]	@ (801702c <tcp_input+0x7e4>)
 8016ef0:	f008 fe7c 	bl	801fbec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016ef4:	69fb      	ldr	r3, [r7, #28]
 8016ef6:	8b5b      	ldrh	r3, [r3, #26]
 8016ef8:	f003 0310 	and.w	r3, r3, #16
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d008      	beq.n	8016f12 <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016f00:	4b41      	ldr	r3, [pc, #260]	@ (8017008 <tcp_input+0x7c0>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7fd fc1f 	bl	8014748 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016f0a:	69f8      	ldr	r0, [r7, #28]
 8016f0c:	f7fe fa24 	bl	8015358 <tcp_abort>
            goto aborted;
 8016f10:	e091      	b.n	8017036 <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016f12:	69fb      	ldr	r3, [r7, #28]
 8016f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d00c      	beq.n	8016f36 <tcp_input+0x6ee>
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016f22:	69fb      	ldr	r3, [r7, #28]
 8016f24:	6918      	ldr	r0, [r3, #16]
 8016f26:	4b38      	ldr	r3, [pc, #224]	@ (8017008 <tcp_input+0x7c0>)
 8016f28:	681a      	ldr	r2, [r3, #0]
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	69f9      	ldr	r1, [r7, #28]
 8016f2e:	47a0      	blx	r4
 8016f30:	4603      	mov	r3, r0
 8016f32:	74fb      	strb	r3, [r7, #19]
 8016f34:	e008      	b.n	8016f48 <tcp_input+0x700>
 8016f36:	4b34      	ldr	r3, [pc, #208]	@ (8017008 <tcp_input+0x7c0>)
 8016f38:	681a      	ldr	r2, [r3, #0]
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	69f9      	ldr	r1, [r7, #28]
 8016f3e:	2000      	movs	r0, #0
 8016f40:	f7ff f81a 	bl	8015f78 <tcp_recv_null>
 8016f44:	4603      	mov	r3, r0
 8016f46:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016f48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f4c:	f113 0f0d 	cmn.w	r3, #13
 8016f50:	d051      	beq.n	8016ff6 <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016f52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d003      	beq.n	8016f62 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8017008 <tcp_input+0x7c0>)
 8016f5c:	681a      	ldr	r2, [r3, #0]
 8016f5e:	69fb      	ldr	r3, [r7, #28]
 8016f60:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016f62:	4b2a      	ldr	r3, [pc, #168]	@ (801700c <tcp_input+0x7c4>)
 8016f64:	781b      	ldrb	r3, [r3, #0]
 8016f66:	f003 0320 	and.w	r3, r3, #32
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d030      	beq.n	8016fd0 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 8016f6e:	69fb      	ldr	r3, [r7, #28]
 8016f70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d009      	beq.n	8016f8a <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016f76:	69fb      	ldr	r3, [r7, #28]
 8016f78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016f7a:	7b5a      	ldrb	r2, [r3, #13]
 8016f7c:	69fb      	ldr	r3, [r7, #28]
 8016f7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016f80:	f042 0220 	orr.w	r2, r2, #32
 8016f84:	b2d2      	uxtb	r2, r2
 8016f86:	735a      	strb	r2, [r3, #13]
 8016f88:	e022      	b.n	8016fd0 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f8e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016f92:	d005      	beq.n	8016fa0 <tcp_input+0x758>
              pcb->rcv_wnd++;
 8016f94:	69fb      	ldr	r3, [r7, #28]
 8016f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f98:	3301      	adds	r3, #1
 8016f9a:	b29a      	uxth	r2, r3
 8016f9c:	69fb      	ldr	r3, [r7, #28]
 8016f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016fa0:	69fb      	ldr	r3, [r7, #28]
 8016fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d00b      	beq.n	8016fc2 <tcp_input+0x77a>
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016fb0:	69fb      	ldr	r3, [r7, #28]
 8016fb2:	6918      	ldr	r0, [r3, #16]
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	69f9      	ldr	r1, [r7, #28]
 8016fba:	47a0      	blx	r4
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	74fb      	strb	r3, [r7, #19]
 8016fc0:	e001      	b.n	8016fc6 <tcp_input+0x77e>
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016fc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016fca:	f113 0f0d 	cmn.w	r3, #13
 8016fce:	d02f      	beq.n	8017030 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016fd0:	4b12      	ldr	r3, [pc, #72]	@ (801701c <tcp_input+0x7d4>)
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016fd6:	69f8      	ldr	r0, [r7, #28]
 8016fd8:	f000 f89e 	bl	8017118 <tcp_input_delayed_close>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d128      	bne.n	8017034 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016fe2:	69f8      	ldr	r0, [r7, #28]
 8016fe4:	f002 ff6e 	bl	8019ec4 <tcp_output>
 8016fe8:	e025      	b.n	8017036 <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016fea:	bf00      	nop
 8016fec:	e023      	b.n	8017036 <tcp_input+0x7ee>
              goto aborted;
 8016fee:	bf00      	nop
 8016ff0:	e021      	b.n	8017036 <tcp_input+0x7ee>
          goto aborted;
 8016ff2:	bf00      	nop
 8016ff4:	e01f      	b.n	8017036 <tcp_input+0x7ee>
            goto aborted;
 8016ff6:	bf00      	nop
 8016ff8:	e01d      	b.n	8017036 <tcp_input+0x7ee>
 8016ffa:	bf00      	nop
 8016ffc:	2002d2b0 	.word	0x2002d2b0
 8017000:	2002d3c4 	.word	0x2002d3c4
 8017004:	2002d3d4 	.word	0x2002d3d4
 8017008:	2002d3f4 	.word	0x2002d3f4
 801700c:	2002d3f1 	.word	0x2002d3f1
 8017010:	2002d3ec 	.word	0x2002d3ec
 8017014:	2002d3f0 	.word	0x2002d3f0
 8017018:	2002d3ee 	.word	0x2002d3ee
 801701c:	2002d3f8 	.word	0x2002d3f8
 8017020:	2002d3b8 	.word	0x2002d3b8
 8017024:	08022a2c 	.word	0x08022a2c
 8017028:	08022be0 	.word	0x08022be0
 801702c:	08022a78 	.word	0x08022a78
              goto aborted;
 8017030:	bf00      	nop
 8017032:	e000      	b.n	8017036 <tcp_input+0x7ee>
          goto aborted;
 8017034:	bf00      	nop
    tcp_input_pcb = NULL;
 8017036:	4b2e      	ldr	r3, [pc, #184]	@ (80170f0 <tcp_input+0x8a8>)
 8017038:	2200      	movs	r2, #0
 801703a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801703c:	4b2d      	ldr	r3, [pc, #180]	@ (80170f4 <tcp_input+0x8ac>)
 801703e:	2200      	movs	r2, #0
 8017040:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017042:	4b2d      	ldr	r3, [pc, #180]	@ (80170f8 <tcp_input+0x8b0>)
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d04e      	beq.n	80170e8 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 801704a:	4b2b      	ldr	r3, [pc, #172]	@ (80170f8 <tcp_input+0x8b0>)
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	4618      	mov	r0, r3
 8017050:	f7fd fb7a 	bl	8014748 <pbuf_free>
      inseg.p = NULL;
 8017054:	4b28      	ldr	r3, [pc, #160]	@ (80170f8 <tcp_input+0x8b0>)
 8017056:	2200      	movs	r2, #0
 8017058:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801705a:	e045      	b.n	80170e8 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801705c:	4b27      	ldr	r3, [pc, #156]	@ (80170fc <tcp_input+0x8b4>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	899b      	ldrh	r3, [r3, #12]
 8017062:	b29b      	uxth	r3, r3
 8017064:	4618      	mov	r0, r3
 8017066:	f7fb feb1 	bl	8012dcc <lwip_htons>
 801706a:	4603      	mov	r3, r0
 801706c:	b2db      	uxtb	r3, r3
 801706e:	f003 0304 	and.w	r3, r3, #4
 8017072:	2b00      	cmp	r3, #0
 8017074:	d128      	bne.n	80170c8 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 8017076:	4b22      	ldr	r3, [pc, #136]	@ (8017100 <tcp_input+0x8b8>)
 8017078:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 801707c:	3301      	adds	r3, #1
 801707e:	b29a      	uxth	r2, r3
 8017080:	4b1f      	ldr	r3, [pc, #124]	@ (8017100 <tcp_input+0x8b8>)
 8017082:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 8017086:	4b1e      	ldr	r3, [pc, #120]	@ (8017100 <tcp_input+0x8b8>)
 8017088:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801708c:	3301      	adds	r3, #1
 801708e:	b29a      	uxth	r2, r3
 8017090:	4b1b      	ldr	r3, [pc, #108]	@ (8017100 <tcp_input+0x8b8>)
 8017092:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017096:	4b1b      	ldr	r3, [pc, #108]	@ (8017104 <tcp_input+0x8bc>)
 8017098:	6819      	ldr	r1, [r3, #0]
 801709a:	4b1b      	ldr	r3, [pc, #108]	@ (8017108 <tcp_input+0x8c0>)
 801709c:	881b      	ldrh	r3, [r3, #0]
 801709e:	461a      	mov	r2, r3
 80170a0:	4b1a      	ldr	r3, [pc, #104]	@ (801710c <tcp_input+0x8c4>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80170a6:	4b15      	ldr	r3, [pc, #84]	@ (80170fc <tcp_input+0x8b4>)
 80170a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80170aa:	885b      	ldrh	r3, [r3, #2]
 80170ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80170ae:	4a13      	ldr	r2, [pc, #76]	@ (80170fc <tcp_input+0x8b4>)
 80170b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80170b2:	8812      	ldrh	r2, [r2, #0]
 80170b4:	b292      	uxth	r2, r2
 80170b6:	9202      	str	r2, [sp, #8]
 80170b8:	9301      	str	r3, [sp, #4]
 80170ba:	4b15      	ldr	r3, [pc, #84]	@ (8017110 <tcp_input+0x8c8>)
 80170bc:	9300      	str	r3, [sp, #0]
 80170be:	4b15      	ldr	r3, [pc, #84]	@ (8017114 <tcp_input+0x8cc>)
 80170c0:	4602      	mov	r2, r0
 80170c2:	2000      	movs	r0, #0
 80170c4:	f003 fcc6 	bl	801aa54 <tcp_rst>
    pbuf_free(p);
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f7fd fb3d 	bl	8014748 <pbuf_free>
  return;
 80170ce:	e00b      	b.n	80170e8 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 80170d0:	4b0b      	ldr	r3, [pc, #44]	@ (8017100 <tcp_input+0x8b8>)
 80170d2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80170d6:	3301      	adds	r3, #1
 80170d8:	b29a      	uxth	r2, r3
 80170da:	4b09      	ldr	r3, [pc, #36]	@ (8017100 <tcp_input+0x8b8>)
 80170dc:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	f7fd fb31 	bl	8014748 <pbuf_free>
 80170e6:	e000      	b.n	80170ea <tcp_input+0x8a2>
  return;
 80170e8:	bf00      	nop
}
 80170ea:	3724      	adds	r7, #36	@ 0x24
 80170ec:	46bd      	mov	sp, r7
 80170ee:	bd90      	pop	{r4, r7, pc}
 80170f0:	2002d3f8 	.word	0x2002d3f8
 80170f4:	2002d3f4 	.word	0x2002d3f4
 80170f8:	2002d3c4 	.word	0x2002d3c4
 80170fc:	2002d3d4 	.word	0x2002d3d4
 8017100:	2002d2b0 	.word	0x2002d2b0
 8017104:	2002d3e8 	.word	0x2002d3e8
 8017108:	2002d3ee 	.word	0x2002d3ee
 801710c:	2002d3e4 	.word	0x2002d3e4
 8017110:	200270c4 	.word	0x200270c4
 8017114:	200270c8 	.word	0x200270c8

08017118 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d106      	bne.n	8017134 <tcp_input_delayed_close+0x1c>
 8017126:	4b17      	ldr	r3, [pc, #92]	@ (8017184 <tcp_input_delayed_close+0x6c>)
 8017128:	f240 225a 	movw	r2, #602	@ 0x25a
 801712c:	4916      	ldr	r1, [pc, #88]	@ (8017188 <tcp_input_delayed_close+0x70>)
 801712e:	4817      	ldr	r0, [pc, #92]	@ (801718c <tcp_input_delayed_close+0x74>)
 8017130:	f008 fd5c 	bl	801fbec <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017134:	4b16      	ldr	r3, [pc, #88]	@ (8017190 <tcp_input_delayed_close+0x78>)
 8017136:	781b      	ldrb	r3, [r3, #0]
 8017138:	f003 0310 	and.w	r3, r3, #16
 801713c:	2b00      	cmp	r3, #0
 801713e:	d01c      	beq.n	801717a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	8b5b      	ldrh	r3, [r3, #26]
 8017144:	f003 0310 	and.w	r3, r3, #16
 8017148:	2b00      	cmp	r3, #0
 801714a:	d10d      	bne.n	8017168 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017152:	2b00      	cmp	r3, #0
 8017154:	d008      	beq.n	8017168 <tcp_input_delayed_close+0x50>
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801715c:	687a      	ldr	r2, [r7, #4]
 801715e:	6912      	ldr	r2, [r2, #16]
 8017160:	f06f 010e 	mvn.w	r1, #14
 8017164:	4610      	mov	r0, r2
 8017166:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017168:	6879      	ldr	r1, [r7, #4]
 801716a:	480a      	ldr	r0, [pc, #40]	@ (8017194 <tcp_input_delayed_close+0x7c>)
 801716c:	f7ff f9f4 	bl	8016558 <tcp_pcb_remove>
    tcp_free(pcb);
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f7fd fdad 	bl	8014cd0 <tcp_free>
    return 1;
 8017176:	2301      	movs	r3, #1
 8017178:	e000      	b.n	801717c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801717a:	2300      	movs	r3, #0
}
 801717c:	4618      	mov	r0, r3
 801717e:	3708      	adds	r7, #8
 8017180:	46bd      	mov	sp, r7
 8017182:	bd80      	pop	{r7, pc}
 8017184:	08022a2c 	.word	0x08022a2c
 8017188:	08022bfc 	.word	0x08022bfc
 801718c:	08022a78 	.word	0x08022a78
 8017190:	2002d3f1 	.word	0x2002d3f1
 8017194:	2002d3b8 	.word	0x2002d3b8

08017198 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017198:	b590      	push	{r4, r7, lr}
 801719a:	b08b      	sub	sp, #44	@ 0x2c
 801719c:	af04      	add	r7, sp, #16
 801719e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80171a0:	4b73      	ldr	r3, [pc, #460]	@ (8017370 <tcp_listen_input+0x1d8>)
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	f003 0304 	and.w	r3, r3, #4
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	f040 80da 	bne.w	8017362 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d106      	bne.n	80171c2 <tcp_listen_input+0x2a>
 80171b4:	4b6f      	ldr	r3, [pc, #444]	@ (8017374 <tcp_listen_input+0x1dc>)
 80171b6:	f240 2281 	movw	r2, #641	@ 0x281
 80171ba:	496f      	ldr	r1, [pc, #444]	@ (8017378 <tcp_listen_input+0x1e0>)
 80171bc:	486f      	ldr	r0, [pc, #444]	@ (801737c <tcp_listen_input+0x1e4>)
 80171be:	f008 fd15 	bl	801fbec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80171c2:	4b6b      	ldr	r3, [pc, #428]	@ (8017370 <tcp_listen_input+0x1d8>)
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	f003 0310 	and.w	r3, r3, #16
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d019      	beq.n	8017202 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171ce:	4b6c      	ldr	r3, [pc, #432]	@ (8017380 <tcp_listen_input+0x1e8>)
 80171d0:	6819      	ldr	r1, [r3, #0]
 80171d2:	4b6c      	ldr	r3, [pc, #432]	@ (8017384 <tcp_listen_input+0x1ec>)
 80171d4:	881b      	ldrh	r3, [r3, #0]
 80171d6:	461a      	mov	r2, r3
 80171d8:	4b6b      	ldr	r3, [pc, #428]	@ (8017388 <tcp_listen_input+0x1f0>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171de:	4b6b      	ldr	r3, [pc, #428]	@ (801738c <tcp_listen_input+0x1f4>)
 80171e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171e2:	885b      	ldrh	r3, [r3, #2]
 80171e4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171e6:	4a69      	ldr	r2, [pc, #420]	@ (801738c <tcp_listen_input+0x1f4>)
 80171e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171ea:	8812      	ldrh	r2, [r2, #0]
 80171ec:	b292      	uxth	r2, r2
 80171ee:	9202      	str	r2, [sp, #8]
 80171f0:	9301      	str	r3, [sp, #4]
 80171f2:	4b67      	ldr	r3, [pc, #412]	@ (8017390 <tcp_listen_input+0x1f8>)
 80171f4:	9300      	str	r3, [sp, #0]
 80171f6:	4b67      	ldr	r3, [pc, #412]	@ (8017394 <tcp_listen_input+0x1fc>)
 80171f8:	4602      	mov	r2, r0
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f003 fc2a 	bl	801aa54 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017200:	e0b1      	b.n	8017366 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 8017202:	4b5b      	ldr	r3, [pc, #364]	@ (8017370 <tcp_listen_input+0x1d8>)
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	f003 0302 	and.w	r3, r3, #2
 801720a:	2b00      	cmp	r3, #0
 801720c:	f000 80ab 	beq.w	8017366 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	7d5b      	ldrb	r3, [r3, #21]
 8017214:	4618      	mov	r0, r3
 8017216:	f7fe ffd3 	bl	80161c0 <tcp_alloc>
 801721a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801721c:	697b      	ldr	r3, [r7, #20]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d119      	bne.n	8017256 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8017222:	4b5d      	ldr	r3, [pc, #372]	@ (8017398 <tcp_listen_input+0x200>)
 8017224:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8017228:	3301      	adds	r3, #1
 801722a:	b29a      	uxth	r2, r3
 801722c:	4b5a      	ldr	r3, [pc, #360]	@ (8017398 <tcp_listen_input+0x200>)
 801722e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	699b      	ldr	r3, [r3, #24]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d00a      	beq.n	8017250 <tcp_listen_input+0xb8>
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	699b      	ldr	r3, [r3, #24]
 801723e:	687a      	ldr	r2, [r7, #4]
 8017240:	6910      	ldr	r0, [r2, #16]
 8017242:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017246:	2100      	movs	r1, #0
 8017248:	4798      	blx	r3
 801724a:	4603      	mov	r3, r0
 801724c:	73bb      	strb	r3, [r7, #14]
      return;
 801724e:	e08b      	b.n	8017368 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017250:	23f0      	movs	r3, #240	@ 0xf0
 8017252:	73bb      	strb	r3, [r7, #14]
      return;
 8017254:	e088      	b.n	8017368 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017256:	4b51      	ldr	r3, [pc, #324]	@ (801739c <tcp_listen_input+0x204>)
 8017258:	695a      	ldr	r2, [r3, #20]
 801725a:	697b      	ldr	r3, [r7, #20]
 801725c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801725e:	4b4f      	ldr	r3, [pc, #316]	@ (801739c <tcp_listen_input+0x204>)
 8017260:	691a      	ldr	r2, [r3, #16]
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	8ada      	ldrh	r2, [r3, #22]
 801726a:	697b      	ldr	r3, [r7, #20]
 801726c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801726e:	4b47      	ldr	r3, [pc, #284]	@ (801738c <tcp_listen_input+0x1f4>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	881b      	ldrh	r3, [r3, #0]
 8017274:	b29a      	uxth	r2, r3
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801727a:	697b      	ldr	r3, [r7, #20]
 801727c:	2203      	movs	r2, #3
 801727e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017280:	4b41      	ldr	r3, [pc, #260]	@ (8017388 <tcp_listen_input+0x1f0>)
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	1c5a      	adds	r2, r3, #1
 8017286:	697b      	ldr	r3, [r7, #20]
 8017288:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801728e:	697b      	ldr	r3, [r7, #20]
 8017290:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8017292:	6978      	ldr	r0, [r7, #20]
 8017294:	f7ff f9f4 	bl	8016680 <tcp_next_iss>
 8017298:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801729a:	697b      	ldr	r3, [r7, #20]
 801729c:	693a      	ldr	r2, [r7, #16]
 801729e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	693a      	ldr	r2, [r7, #16]
 80172a4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80172a6:	697b      	ldr	r3, [r7, #20]
 80172a8:	693a      	ldr	r2, [r7, #16]
 80172aa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80172ac:	697b      	ldr	r3, [r7, #20]
 80172ae:	693a      	ldr	r2, [r7, #16]
 80172b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80172b2:	4b35      	ldr	r3, [pc, #212]	@ (8017388 <tcp_listen_input+0x1f0>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	1e5a      	subs	r2, r3, #1
 80172b8:	697b      	ldr	r3, [r7, #20]
 80172ba:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	691a      	ldr	r2, [r3, #16]
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80172c4:	697b      	ldr	r3, [r7, #20]
 80172c6:	687a      	ldr	r2, [r7, #4]
 80172c8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	7a5b      	ldrb	r3, [r3, #9]
 80172ce:	f003 030c 	and.w	r3, r3, #12
 80172d2:	b2da      	uxtb	r2, r3
 80172d4:	697b      	ldr	r3, [r7, #20]
 80172d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	7a1a      	ldrb	r2, [r3, #8]
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80172e0:	4b2f      	ldr	r3, [pc, #188]	@ (80173a0 <tcp_listen_input+0x208>)
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	697b      	ldr	r3, [r7, #20]
 80172e6:	60da      	str	r2, [r3, #12]
 80172e8:	4a2d      	ldr	r2, [pc, #180]	@ (80173a0 <tcp_listen_input+0x208>)
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	6013      	str	r3, [r2, #0]
 80172ee:	f003 fd73 	bl	801add8 <tcp_timer_needed>
 80172f2:	4b2c      	ldr	r3, [pc, #176]	@ (80173a4 <tcp_listen_input+0x20c>)
 80172f4:	2201      	movs	r2, #1
 80172f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80172f8:	6978      	ldr	r0, [r7, #20]
 80172fa:	f001 fd8d 	bl	8018e18 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80172fe:	4b23      	ldr	r3, [pc, #140]	@ (801738c <tcp_listen_input+0x1f4>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	89db      	ldrh	r3, [r3, #14]
 8017304:	b29a      	uxth	r2, r3
 8017306:	697b      	ldr	r3, [r7, #20]
 8017308:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017312:	697b      	ldr	r3, [r7, #20]
 8017314:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801731c:	697b      	ldr	r3, [r7, #20]
 801731e:	3304      	adds	r3, #4
 8017320:	4618      	mov	r0, r3
 8017322:	f005 fd63 	bl	801cdec <ip4_route>
 8017326:	4601      	mov	r1, r0
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	3304      	adds	r3, #4
 801732c:	461a      	mov	r2, r3
 801732e:	4620      	mov	r0, r4
 8017330:	f7ff f9cc 	bl	80166cc <tcp_eff_send_mss_netif>
 8017334:	4603      	mov	r3, r0
 8017336:	461a      	mov	r2, r3
 8017338:	697b      	ldr	r3, [r7, #20]
 801733a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801733c:	2112      	movs	r1, #18
 801733e:	6978      	ldr	r0, [r7, #20]
 8017340:	f002 fcc0 	bl	8019cc4 <tcp_enqueue_flags>
 8017344:	4603      	mov	r3, r0
 8017346:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d004      	beq.n	801735a <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8017350:	2100      	movs	r1, #0
 8017352:	6978      	ldr	r0, [r7, #20]
 8017354:	f7fd ff42 	bl	80151dc <tcp_abandon>
      return;
 8017358:	e006      	b.n	8017368 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 801735a:	6978      	ldr	r0, [r7, #20]
 801735c:	f002 fdb2 	bl	8019ec4 <tcp_output>
  return;
 8017360:	e001      	b.n	8017366 <tcp_listen_input+0x1ce>
    return;
 8017362:	bf00      	nop
 8017364:	e000      	b.n	8017368 <tcp_listen_input+0x1d0>
  return;
 8017366:	bf00      	nop
}
 8017368:	371c      	adds	r7, #28
 801736a:	46bd      	mov	sp, r7
 801736c:	bd90      	pop	{r4, r7, pc}
 801736e:	bf00      	nop
 8017370:	2002d3f0 	.word	0x2002d3f0
 8017374:	08022a2c 	.word	0x08022a2c
 8017378:	08022c24 	.word	0x08022c24
 801737c:	08022a78 	.word	0x08022a78
 8017380:	2002d3e8 	.word	0x2002d3e8
 8017384:	2002d3ee 	.word	0x2002d3ee
 8017388:	2002d3e4 	.word	0x2002d3e4
 801738c:	2002d3d4 	.word	0x2002d3d4
 8017390:	200270c4 	.word	0x200270c4
 8017394:	200270c8 	.word	0x200270c8
 8017398:	2002d2b0 	.word	0x2002d2b0
 801739c:	200270b4 	.word	0x200270b4
 80173a0:	2002d3b8 	.word	0x2002d3b8
 80173a4:	2002d3c0 	.word	0x2002d3c0

080173a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b086      	sub	sp, #24
 80173ac:	af04      	add	r7, sp, #16
 80173ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80173b0:	4b2f      	ldr	r3, [pc, #188]	@ (8017470 <tcp_timewait_input+0xc8>)
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	f003 0304 	and.w	r3, r3, #4
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d153      	bne.n	8017464 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d106      	bne.n	80173d0 <tcp_timewait_input+0x28>
 80173c2:	4b2c      	ldr	r3, [pc, #176]	@ (8017474 <tcp_timewait_input+0xcc>)
 80173c4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80173c8:	492b      	ldr	r1, [pc, #172]	@ (8017478 <tcp_timewait_input+0xd0>)
 80173ca:	482c      	ldr	r0, [pc, #176]	@ (801747c <tcp_timewait_input+0xd4>)
 80173cc:	f008 fc0e 	bl	801fbec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80173d0:	4b27      	ldr	r3, [pc, #156]	@ (8017470 <tcp_timewait_input+0xc8>)
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	f003 0302 	and.w	r3, r3, #2
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d02a      	beq.n	8017432 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80173dc:	4b28      	ldr	r3, [pc, #160]	@ (8017480 <tcp_timewait_input+0xd8>)
 80173de:	681a      	ldr	r2, [r3, #0]
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173e4:	1ad3      	subs	r3, r2, r3
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	db2d      	blt.n	8017446 <tcp_timewait_input+0x9e>
 80173ea:	4b25      	ldr	r3, [pc, #148]	@ (8017480 <tcp_timewait_input+0xd8>)
 80173ec:	681a      	ldr	r2, [r3, #0]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173f2:	6879      	ldr	r1, [r7, #4]
 80173f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80173f6:	440b      	add	r3, r1
 80173f8:	1ad3      	subs	r3, r2, r3
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	dc23      	bgt.n	8017446 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80173fe:	4b21      	ldr	r3, [pc, #132]	@ (8017484 <tcp_timewait_input+0xdc>)
 8017400:	6819      	ldr	r1, [r3, #0]
 8017402:	4b21      	ldr	r3, [pc, #132]	@ (8017488 <tcp_timewait_input+0xe0>)
 8017404:	881b      	ldrh	r3, [r3, #0]
 8017406:	461a      	mov	r2, r3
 8017408:	4b1d      	ldr	r3, [pc, #116]	@ (8017480 <tcp_timewait_input+0xd8>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801740e:	4b1f      	ldr	r3, [pc, #124]	@ (801748c <tcp_timewait_input+0xe4>)
 8017410:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017412:	885b      	ldrh	r3, [r3, #2]
 8017414:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017416:	4a1d      	ldr	r2, [pc, #116]	@ (801748c <tcp_timewait_input+0xe4>)
 8017418:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801741a:	8812      	ldrh	r2, [r2, #0]
 801741c:	b292      	uxth	r2, r2
 801741e:	9202      	str	r2, [sp, #8]
 8017420:	9301      	str	r3, [sp, #4]
 8017422:	4b1b      	ldr	r3, [pc, #108]	@ (8017490 <tcp_timewait_input+0xe8>)
 8017424:	9300      	str	r3, [sp, #0]
 8017426:	4b1b      	ldr	r3, [pc, #108]	@ (8017494 <tcp_timewait_input+0xec>)
 8017428:	4602      	mov	r2, r0
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f003 fb12 	bl	801aa54 <tcp_rst>
      return;
 8017430:	e01b      	b.n	801746a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017432:	4b0f      	ldr	r3, [pc, #60]	@ (8017470 <tcp_timewait_input+0xc8>)
 8017434:	781b      	ldrb	r3, [r3, #0]
 8017436:	f003 0301 	and.w	r3, r3, #1
 801743a:	2b00      	cmp	r3, #0
 801743c:	d003      	beq.n	8017446 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801743e:	4b16      	ldr	r3, [pc, #88]	@ (8017498 <tcp_timewait_input+0xf0>)
 8017440:	681a      	ldr	r2, [r3, #0]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017446:	4b10      	ldr	r3, [pc, #64]	@ (8017488 <tcp_timewait_input+0xe0>)
 8017448:	881b      	ldrh	r3, [r3, #0]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00c      	beq.n	8017468 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	8b5b      	ldrh	r3, [r3, #26]
 8017452:	f043 0302 	orr.w	r3, r3, #2
 8017456:	b29a      	uxth	r2, r3
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	f002 fd31 	bl	8019ec4 <tcp_output>
  }
  return;
 8017462:	e001      	b.n	8017468 <tcp_timewait_input+0xc0>
    return;
 8017464:	bf00      	nop
 8017466:	e000      	b.n	801746a <tcp_timewait_input+0xc2>
  return;
 8017468:	bf00      	nop
}
 801746a:	3708      	adds	r7, #8
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}
 8017470:	2002d3f0 	.word	0x2002d3f0
 8017474:	08022a2c 	.word	0x08022a2c
 8017478:	08022c44 	.word	0x08022c44
 801747c:	08022a78 	.word	0x08022a78
 8017480:	2002d3e4 	.word	0x2002d3e4
 8017484:	2002d3e8 	.word	0x2002d3e8
 8017488:	2002d3ee 	.word	0x2002d3ee
 801748c:	2002d3d4 	.word	0x2002d3d4
 8017490:	200270c4 	.word	0x200270c4
 8017494:	200270c8 	.word	0x200270c8
 8017498:	2002d3ac 	.word	0x2002d3ac

0801749c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801749c:	b590      	push	{r4, r7, lr}
 801749e:	b08d      	sub	sp, #52	@ 0x34
 80174a0:	af04      	add	r7, sp, #16
 80174a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80174a4:	2300      	movs	r3, #0
 80174a6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80174a8:	2300      	movs	r3, #0
 80174aa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d106      	bne.n	80174c0 <tcp_process+0x24>
 80174b2:	4b9d      	ldr	r3, [pc, #628]	@ (8017728 <tcp_process+0x28c>)
 80174b4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80174b8:	499c      	ldr	r1, [pc, #624]	@ (801772c <tcp_process+0x290>)
 80174ba:	489d      	ldr	r0, [pc, #628]	@ (8017730 <tcp_process+0x294>)
 80174bc:	f008 fb96 	bl	801fbec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80174c0:	4b9c      	ldr	r3, [pc, #624]	@ (8017734 <tcp_process+0x298>)
 80174c2:	781b      	ldrb	r3, [r3, #0]
 80174c4:	f003 0304 	and.w	r3, r3, #4
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d04e      	beq.n	801756a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	7d1b      	ldrb	r3, [r3, #20]
 80174d0:	2b02      	cmp	r3, #2
 80174d2:	d108      	bne.n	80174e6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80174d8:	4b97      	ldr	r3, [pc, #604]	@ (8017738 <tcp_process+0x29c>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	429a      	cmp	r2, r3
 80174de:	d123      	bne.n	8017528 <tcp_process+0x8c>
        acceptable = 1;
 80174e0:	2301      	movs	r3, #1
 80174e2:	76fb      	strb	r3, [r7, #27]
 80174e4:	e020      	b.n	8017528 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80174ea:	4b94      	ldr	r3, [pc, #592]	@ (801773c <tcp_process+0x2a0>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	429a      	cmp	r2, r3
 80174f0:	d102      	bne.n	80174f8 <tcp_process+0x5c>
        acceptable = 1;
 80174f2:	2301      	movs	r3, #1
 80174f4:	76fb      	strb	r3, [r7, #27]
 80174f6:	e017      	b.n	8017528 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80174f8:	4b90      	ldr	r3, [pc, #576]	@ (801773c <tcp_process+0x2a0>)
 80174fa:	681a      	ldr	r2, [r3, #0]
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017500:	1ad3      	subs	r3, r2, r3
 8017502:	2b00      	cmp	r3, #0
 8017504:	db10      	blt.n	8017528 <tcp_process+0x8c>
 8017506:	4b8d      	ldr	r3, [pc, #564]	@ (801773c <tcp_process+0x2a0>)
 8017508:	681a      	ldr	r2, [r3, #0]
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801750e:	6879      	ldr	r1, [r7, #4]
 8017510:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017512:	440b      	add	r3, r1
 8017514:	1ad3      	subs	r3, r2, r3
 8017516:	2b00      	cmp	r3, #0
 8017518:	dc06      	bgt.n	8017528 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	8b5b      	ldrh	r3, [r3, #26]
 801751e:	f043 0302 	orr.w	r3, r3, #2
 8017522:	b29a      	uxth	r2, r3
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017528:	7efb      	ldrb	r3, [r7, #27]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d01b      	beq.n	8017566 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	7d1b      	ldrb	r3, [r3, #20]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d106      	bne.n	8017544 <tcp_process+0xa8>
 8017536:	4b7c      	ldr	r3, [pc, #496]	@ (8017728 <tcp_process+0x28c>)
 8017538:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801753c:	4980      	ldr	r1, [pc, #512]	@ (8017740 <tcp_process+0x2a4>)
 801753e:	487c      	ldr	r0, [pc, #496]	@ (8017730 <tcp_process+0x294>)
 8017540:	f008 fb54 	bl	801fbec <iprintf>
      recv_flags |= TF_RESET;
 8017544:	4b7f      	ldr	r3, [pc, #508]	@ (8017744 <tcp_process+0x2a8>)
 8017546:	781b      	ldrb	r3, [r3, #0]
 8017548:	f043 0308 	orr.w	r3, r3, #8
 801754c:	b2da      	uxtb	r2, r3
 801754e:	4b7d      	ldr	r3, [pc, #500]	@ (8017744 <tcp_process+0x2a8>)
 8017550:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	8b5b      	ldrh	r3, [r3, #26]
 8017556:	f023 0301 	bic.w	r3, r3, #1
 801755a:	b29a      	uxth	r2, r3
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017560:	f06f 030d 	mvn.w	r3, #13
 8017564:	e37a      	b.n	8017c5c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017566:	2300      	movs	r3, #0
 8017568:	e378      	b.n	8017c5c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801756a:	4b72      	ldr	r3, [pc, #456]	@ (8017734 <tcp_process+0x298>)
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	f003 0302 	and.w	r3, r3, #2
 8017572:	2b00      	cmp	r3, #0
 8017574:	d010      	beq.n	8017598 <tcp_process+0xfc>
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	7d1b      	ldrb	r3, [r3, #20]
 801757a:	2b02      	cmp	r3, #2
 801757c:	d00c      	beq.n	8017598 <tcp_process+0xfc>
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	7d1b      	ldrb	r3, [r3, #20]
 8017582:	2b03      	cmp	r3, #3
 8017584:	d008      	beq.n	8017598 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	8b5b      	ldrh	r3, [r3, #26]
 801758a:	f043 0302 	orr.w	r3, r3, #2
 801758e:	b29a      	uxth	r2, r3
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017594:	2300      	movs	r3, #0
 8017596:	e361      	b.n	8017c5c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	8b5b      	ldrh	r3, [r3, #26]
 801759c:	f003 0310 	and.w	r3, r3, #16
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d103      	bne.n	80175ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80175a4:	4b68      	ldr	r3, [pc, #416]	@ (8017748 <tcp_process+0x2ac>)
 80175a6:	681a      	ldr	r2, [r3, #0]
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2200      	movs	r2, #0
 80175b0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2200      	movs	r2, #0
 80175b8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f001 fc2b 	bl	8018e18 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	7d1b      	ldrb	r3, [r3, #20]
 80175c6:	3b02      	subs	r3, #2
 80175c8:	2b07      	cmp	r3, #7
 80175ca:	f200 8337 	bhi.w	8017c3c <tcp_process+0x7a0>
 80175ce:	a201      	add	r2, pc, #4	@ (adr r2, 80175d4 <tcp_process+0x138>)
 80175d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175d4:	080175f5 	.word	0x080175f5
 80175d8:	08017825 	.word	0x08017825
 80175dc:	0801799d 	.word	0x0801799d
 80175e0:	080179c7 	.word	0x080179c7
 80175e4:	08017aeb 	.word	0x08017aeb
 80175e8:	0801799d 	.word	0x0801799d
 80175ec:	08017b77 	.word	0x08017b77
 80175f0:	08017c07 	.word	0x08017c07
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80175f4:	4b4f      	ldr	r3, [pc, #316]	@ (8017734 <tcp_process+0x298>)
 80175f6:	781b      	ldrb	r3, [r3, #0]
 80175f8:	f003 0310 	and.w	r3, r3, #16
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	f000 80e4 	beq.w	80177ca <tcp_process+0x32e>
 8017602:	4b4c      	ldr	r3, [pc, #304]	@ (8017734 <tcp_process+0x298>)
 8017604:	781b      	ldrb	r3, [r3, #0]
 8017606:	f003 0302 	and.w	r3, r3, #2
 801760a:	2b00      	cmp	r3, #0
 801760c:	f000 80dd 	beq.w	80177ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017614:	1c5a      	adds	r2, r3, #1
 8017616:	4b48      	ldr	r3, [pc, #288]	@ (8017738 <tcp_process+0x29c>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	429a      	cmp	r2, r3
 801761c:	f040 80d5 	bne.w	80177ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017620:	4b46      	ldr	r3, [pc, #280]	@ (801773c <tcp_process+0x2a0>)
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	1c5a      	adds	r2, r3, #1
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8017632:	4b41      	ldr	r3, [pc, #260]	@ (8017738 <tcp_process+0x29c>)
 8017634:	681a      	ldr	r2, [r3, #0]
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801763a:	4b44      	ldr	r3, [pc, #272]	@ (801774c <tcp_process+0x2b0>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	89db      	ldrh	r3, [r3, #14]
 8017640:	b29a      	uxth	r2, r3
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017654:	4b39      	ldr	r3, [pc, #228]	@ (801773c <tcp_process+0x2a0>)
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	1e5a      	subs	r2, r3, #1
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	2204      	movs	r2, #4
 8017662:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	3304      	adds	r3, #4
 801766c:	4618      	mov	r0, r3
 801766e:	f005 fbbd 	bl	801cdec <ip4_route>
 8017672:	4601      	mov	r1, r0
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	3304      	adds	r3, #4
 8017678:	461a      	mov	r2, r3
 801767a:	4620      	mov	r0, r4
 801767c:	f7ff f826 	bl	80166cc <tcp_eff_send_mss_netif>
 8017680:	4603      	mov	r3, r0
 8017682:	461a      	mov	r2, r3
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801768c:	009a      	lsls	r2, r3, #2
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017692:	005b      	lsls	r3, r3, #1
 8017694:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017698:	428b      	cmp	r3, r1
 801769a:	bf38      	it	cc
 801769c:	460b      	movcc	r3, r1
 801769e:	429a      	cmp	r2, r3
 80176a0:	d204      	bcs.n	80176ac <tcp_process+0x210>
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176a6:	009b      	lsls	r3, r3, #2
 80176a8:	b29b      	uxth	r3, r3
 80176aa:	e00d      	b.n	80176c8 <tcp_process+0x22c>
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176b0:	005b      	lsls	r3, r3, #1
 80176b2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80176b6:	4293      	cmp	r3, r2
 80176b8:	d904      	bls.n	80176c4 <tcp_process+0x228>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176be:	005b      	lsls	r3, r3, #1
 80176c0:	b29b      	uxth	r3, r3
 80176c2:	e001      	b.n	80176c8 <tcp_process+0x22c>
 80176c4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d106      	bne.n	80176e6 <tcp_process+0x24a>
 80176d8:	4b13      	ldr	r3, [pc, #76]	@ (8017728 <tcp_process+0x28c>)
 80176da:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80176de:	491c      	ldr	r1, [pc, #112]	@ (8017750 <tcp_process+0x2b4>)
 80176e0:	4813      	ldr	r0, [pc, #76]	@ (8017730 <tcp_process+0x294>)
 80176e2:	f008 fa83 	bl	801fbec <iprintf>
        --pcb->snd_queuelen;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80176ec:	3b01      	subs	r3, #1
 80176ee:	b29a      	uxth	r2, r3
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80176fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80176fc:	69fb      	ldr	r3, [r7, #28]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d12a      	bne.n	8017758 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017706:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017708:	69fb      	ldr	r3, [r7, #28]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d106      	bne.n	801771c <tcp_process+0x280>
 801770e:	4b06      	ldr	r3, [pc, #24]	@ (8017728 <tcp_process+0x28c>)
 8017710:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017714:	490f      	ldr	r1, [pc, #60]	@ (8017754 <tcp_process+0x2b8>)
 8017716:	4806      	ldr	r0, [pc, #24]	@ (8017730 <tcp_process+0x294>)
 8017718:	f008 fa68 	bl	801fbec <iprintf>
          pcb->unsent = rseg->next;
 801771c:	69fb      	ldr	r3, [r7, #28]
 801771e:	681a      	ldr	r2, [r3, #0]
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017724:	e01c      	b.n	8017760 <tcp_process+0x2c4>
 8017726:	bf00      	nop
 8017728:	08022a2c 	.word	0x08022a2c
 801772c:	08022c64 	.word	0x08022c64
 8017730:	08022a78 	.word	0x08022a78
 8017734:	2002d3f0 	.word	0x2002d3f0
 8017738:	2002d3e8 	.word	0x2002d3e8
 801773c:	2002d3e4 	.word	0x2002d3e4
 8017740:	08022c80 	.word	0x08022c80
 8017744:	2002d3f1 	.word	0x2002d3f1
 8017748:	2002d3ac 	.word	0x2002d3ac
 801774c:	2002d3d4 	.word	0x2002d3d4
 8017750:	08022ca0 	.word	0x08022ca0
 8017754:	08022cb8 	.word	0x08022cb8
        } else {
          pcb->unacked = rseg->next;
 8017758:	69fb      	ldr	r3, [r7, #28]
 801775a:	681a      	ldr	r2, [r3, #0]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017760:	69f8      	ldr	r0, [r7, #28]
 8017762:	f7fe fbc4 	bl	8015eee <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801776a:	2b00      	cmp	r3, #0
 801776c:	d104      	bne.n	8017778 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017774:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017776:	e006      	b.n	8017786 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	2200      	movs	r2, #0
 801777c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2200      	movs	r2, #0
 8017782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801778c:	2b00      	cmp	r3, #0
 801778e:	d00a      	beq.n	80177a6 <tcp_process+0x30a>
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017796:	687a      	ldr	r2, [r7, #4]
 8017798:	6910      	ldr	r0, [r2, #16]
 801779a:	2200      	movs	r2, #0
 801779c:	6879      	ldr	r1, [r7, #4]
 801779e:	4798      	blx	r3
 80177a0:	4603      	mov	r3, r0
 80177a2:	76bb      	strb	r3, [r7, #26]
 80177a4:	e001      	b.n	80177aa <tcp_process+0x30e>
 80177a6:	2300      	movs	r3, #0
 80177a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80177aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80177ae:	f113 0f0d 	cmn.w	r3, #13
 80177b2:	d102      	bne.n	80177ba <tcp_process+0x31e>
          return ERR_ABRT;
 80177b4:	f06f 030c 	mvn.w	r3, #12
 80177b8:	e250      	b.n	8017c5c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	8b5b      	ldrh	r3, [r3, #26]
 80177be:	f043 0302 	orr.w	r3, r3, #2
 80177c2:	b29a      	uxth	r2, r3
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80177c8:	e23a      	b.n	8017c40 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80177ca:	4b98      	ldr	r3, [pc, #608]	@ (8017a2c <tcp_process+0x590>)
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	f003 0310 	and.w	r3, r3, #16
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f000 8234 	beq.w	8017c40 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177d8:	4b95      	ldr	r3, [pc, #596]	@ (8017a30 <tcp_process+0x594>)
 80177da:	6819      	ldr	r1, [r3, #0]
 80177dc:	4b95      	ldr	r3, [pc, #596]	@ (8017a34 <tcp_process+0x598>)
 80177de:	881b      	ldrh	r3, [r3, #0]
 80177e0:	461a      	mov	r2, r3
 80177e2:	4b95      	ldr	r3, [pc, #596]	@ (8017a38 <tcp_process+0x59c>)
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177e8:	4b94      	ldr	r3, [pc, #592]	@ (8017a3c <tcp_process+0x5a0>)
 80177ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177ec:	885b      	ldrh	r3, [r3, #2]
 80177ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177f0:	4a92      	ldr	r2, [pc, #584]	@ (8017a3c <tcp_process+0x5a0>)
 80177f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177f4:	8812      	ldrh	r2, [r2, #0]
 80177f6:	b292      	uxth	r2, r2
 80177f8:	9202      	str	r2, [sp, #8]
 80177fa:	9301      	str	r3, [sp, #4]
 80177fc:	4b90      	ldr	r3, [pc, #576]	@ (8017a40 <tcp_process+0x5a4>)
 80177fe:	9300      	str	r3, [sp, #0]
 8017800:	4b90      	ldr	r3, [pc, #576]	@ (8017a44 <tcp_process+0x5a8>)
 8017802:	4602      	mov	r2, r0
 8017804:	6878      	ldr	r0, [r7, #4]
 8017806:	f003 f925 	bl	801aa54 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017810:	2b05      	cmp	r3, #5
 8017812:	f200 8215 	bhi.w	8017c40 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	2200      	movs	r2, #0
 801781a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f002 fee7 	bl	801a5f0 <tcp_rexmit_rto>
      break;
 8017822:	e20d      	b.n	8017c40 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017824:	4b81      	ldr	r3, [pc, #516]	@ (8017a2c <tcp_process+0x590>)
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	f003 0310 	and.w	r3, r3, #16
 801782c:	2b00      	cmp	r3, #0
 801782e:	f000 80a1 	beq.w	8017974 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017832:	4b7f      	ldr	r3, [pc, #508]	@ (8017a30 <tcp_process+0x594>)
 8017834:	681a      	ldr	r2, [r3, #0]
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801783a:	1ad3      	subs	r3, r2, r3
 801783c:	3b01      	subs	r3, #1
 801783e:	2b00      	cmp	r3, #0
 8017840:	db7e      	blt.n	8017940 <tcp_process+0x4a4>
 8017842:	4b7b      	ldr	r3, [pc, #492]	@ (8017a30 <tcp_process+0x594>)
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	2b00      	cmp	r3, #0
 801784e:	dc77      	bgt.n	8017940 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	2204      	movs	r2, #4
 8017854:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801785a:	2b00      	cmp	r3, #0
 801785c:	d102      	bne.n	8017864 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801785e:	23fa      	movs	r3, #250	@ 0xfa
 8017860:	76bb      	strb	r3, [r7, #26]
 8017862:	e01d      	b.n	80178a0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017868:	699b      	ldr	r3, [r3, #24]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d106      	bne.n	801787c <tcp_process+0x3e0>
 801786e:	4b76      	ldr	r3, [pc, #472]	@ (8017a48 <tcp_process+0x5ac>)
 8017870:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017874:	4975      	ldr	r1, [pc, #468]	@ (8017a4c <tcp_process+0x5b0>)
 8017876:	4876      	ldr	r0, [pc, #472]	@ (8017a50 <tcp_process+0x5b4>)
 8017878:	f008 f9b8 	bl	801fbec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017880:	699b      	ldr	r3, [r3, #24]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d00a      	beq.n	801789c <tcp_process+0x400>
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801788a:	699b      	ldr	r3, [r3, #24]
 801788c:	687a      	ldr	r2, [r7, #4]
 801788e:	6910      	ldr	r0, [r2, #16]
 8017890:	2200      	movs	r2, #0
 8017892:	6879      	ldr	r1, [r7, #4]
 8017894:	4798      	blx	r3
 8017896:	4603      	mov	r3, r0
 8017898:	76bb      	strb	r3, [r7, #26]
 801789a:	e001      	b.n	80178a0 <tcp_process+0x404>
 801789c:	23f0      	movs	r3, #240	@ 0xf0
 801789e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80178a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d00a      	beq.n	80178be <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80178a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80178ac:	f113 0f0d 	cmn.w	r3, #13
 80178b0:	d002      	beq.n	80178b8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7fd fd50 	bl	8015358 <tcp_abort>
            }
            return ERR_ABRT;
 80178b8:	f06f 030c 	mvn.w	r3, #12
 80178bc:	e1ce      	b.n	8017c5c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f000 fae0 	bl	8017e84 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80178c4:	4b63      	ldr	r3, [pc, #396]	@ (8017a54 <tcp_process+0x5b8>)
 80178c6:	881b      	ldrh	r3, [r3, #0]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d005      	beq.n	80178d8 <tcp_process+0x43c>
            recv_acked--;
 80178cc:	4b61      	ldr	r3, [pc, #388]	@ (8017a54 <tcp_process+0x5b8>)
 80178ce:	881b      	ldrh	r3, [r3, #0]
 80178d0:	3b01      	subs	r3, #1
 80178d2:	b29a      	uxth	r2, r3
 80178d4:	4b5f      	ldr	r3, [pc, #380]	@ (8017a54 <tcp_process+0x5b8>)
 80178d6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80178dc:	009a      	lsls	r2, r3, #2
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80178e2:	005b      	lsls	r3, r3, #1
 80178e4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80178e8:	428b      	cmp	r3, r1
 80178ea:	bf38      	it	cc
 80178ec:	460b      	movcc	r3, r1
 80178ee:	429a      	cmp	r2, r3
 80178f0:	d204      	bcs.n	80178fc <tcp_process+0x460>
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80178f6:	009b      	lsls	r3, r3, #2
 80178f8:	b29b      	uxth	r3, r3
 80178fa:	e00d      	b.n	8017918 <tcp_process+0x47c>
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017900:	005b      	lsls	r3, r3, #1
 8017902:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017906:	4293      	cmp	r3, r2
 8017908:	d904      	bls.n	8017914 <tcp_process+0x478>
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801790e:	005b      	lsls	r3, r3, #1
 8017910:	b29b      	uxth	r3, r3
 8017912:	e001      	b.n	8017918 <tcp_process+0x47c>
 8017914:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017918:	687a      	ldr	r2, [r7, #4]
 801791a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801791e:	4b4e      	ldr	r3, [pc, #312]	@ (8017a58 <tcp_process+0x5bc>)
 8017920:	781b      	ldrb	r3, [r3, #0]
 8017922:	f003 0320 	and.w	r3, r3, #32
 8017926:	2b00      	cmp	r3, #0
 8017928:	d037      	beq.n	801799a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	8b5b      	ldrh	r3, [r3, #26]
 801792e:	f043 0302 	orr.w	r3, r3, #2
 8017932:	b29a      	uxth	r2, r3
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2207      	movs	r2, #7
 801793c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801793e:	e02c      	b.n	801799a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017940:	4b3b      	ldr	r3, [pc, #236]	@ (8017a30 <tcp_process+0x594>)
 8017942:	6819      	ldr	r1, [r3, #0]
 8017944:	4b3b      	ldr	r3, [pc, #236]	@ (8017a34 <tcp_process+0x598>)
 8017946:	881b      	ldrh	r3, [r3, #0]
 8017948:	461a      	mov	r2, r3
 801794a:	4b3b      	ldr	r3, [pc, #236]	@ (8017a38 <tcp_process+0x59c>)
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017950:	4b3a      	ldr	r3, [pc, #232]	@ (8017a3c <tcp_process+0x5a0>)
 8017952:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017954:	885b      	ldrh	r3, [r3, #2]
 8017956:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017958:	4a38      	ldr	r2, [pc, #224]	@ (8017a3c <tcp_process+0x5a0>)
 801795a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801795c:	8812      	ldrh	r2, [r2, #0]
 801795e:	b292      	uxth	r2, r2
 8017960:	9202      	str	r2, [sp, #8]
 8017962:	9301      	str	r3, [sp, #4]
 8017964:	4b36      	ldr	r3, [pc, #216]	@ (8017a40 <tcp_process+0x5a4>)
 8017966:	9300      	str	r3, [sp, #0]
 8017968:	4b36      	ldr	r3, [pc, #216]	@ (8017a44 <tcp_process+0x5a8>)
 801796a:	4602      	mov	r2, r0
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f003 f871 	bl	801aa54 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017972:	e167      	b.n	8017c44 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017974:	4b2d      	ldr	r3, [pc, #180]	@ (8017a2c <tcp_process+0x590>)
 8017976:	781b      	ldrb	r3, [r3, #0]
 8017978:	f003 0302 	and.w	r3, r3, #2
 801797c:	2b00      	cmp	r3, #0
 801797e:	f000 8161 	beq.w	8017c44 <tcp_process+0x7a8>
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017986:	1e5a      	subs	r2, r3, #1
 8017988:	4b2b      	ldr	r3, [pc, #172]	@ (8017a38 <tcp_process+0x59c>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	429a      	cmp	r2, r3
 801798e:	f040 8159 	bne.w	8017c44 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f002 fe4e 	bl	801a634 <tcp_rexmit>
      break;
 8017998:	e154      	b.n	8017c44 <tcp_process+0x7a8>
 801799a:	e153      	b.n	8017c44 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f000 fa71 	bl	8017e84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80179a2:	4b2d      	ldr	r3, [pc, #180]	@ (8017a58 <tcp_process+0x5bc>)
 80179a4:	781b      	ldrb	r3, [r3, #0]
 80179a6:	f003 0320 	and.w	r3, r3, #32
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	f000 814c 	beq.w	8017c48 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	8b5b      	ldrh	r3, [r3, #26]
 80179b4:	f043 0302 	orr.w	r3, r3, #2
 80179b8:	b29a      	uxth	r2, r3
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	2207      	movs	r2, #7
 80179c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80179c4:	e140      	b.n	8017c48 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80179c6:	6878      	ldr	r0, [r7, #4]
 80179c8:	f000 fa5c 	bl	8017e84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80179cc:	4b22      	ldr	r3, [pc, #136]	@ (8017a58 <tcp_process+0x5bc>)
 80179ce:	781b      	ldrb	r3, [r3, #0]
 80179d0:	f003 0320 	and.w	r3, r3, #32
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d071      	beq.n	8017abc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80179d8:	4b14      	ldr	r3, [pc, #80]	@ (8017a2c <tcp_process+0x590>)
 80179da:	781b      	ldrb	r3, [r3, #0]
 80179dc:	f003 0310 	and.w	r3, r3, #16
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d060      	beq.n	8017aa6 <tcp_process+0x60a>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80179e8:	4b11      	ldr	r3, [pc, #68]	@ (8017a30 <tcp_process+0x594>)
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d15a      	bne.n	8017aa6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d156      	bne.n	8017aa6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	8b5b      	ldrh	r3, [r3, #26]
 80179fc:	f043 0302 	orr.w	r3, r3, #2
 8017a00:	b29a      	uxth	r2, r3
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f7fe fd56 	bl	80164b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017a0c:	4b13      	ldr	r3, [pc, #76]	@ (8017a5c <tcp_process+0x5c0>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	687a      	ldr	r2, [r7, #4]
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d105      	bne.n	8017a22 <tcp_process+0x586>
 8017a16:	4b11      	ldr	r3, [pc, #68]	@ (8017a5c <tcp_process+0x5c0>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	68db      	ldr	r3, [r3, #12]
 8017a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8017a5c <tcp_process+0x5c0>)
 8017a1e:	6013      	str	r3, [r2, #0]
 8017a20:	e02e      	b.n	8017a80 <tcp_process+0x5e4>
 8017a22:	4b0e      	ldr	r3, [pc, #56]	@ (8017a5c <tcp_process+0x5c0>)
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	617b      	str	r3, [r7, #20]
 8017a28:	e027      	b.n	8017a7a <tcp_process+0x5de>
 8017a2a:	bf00      	nop
 8017a2c:	2002d3f0 	.word	0x2002d3f0
 8017a30:	2002d3e8 	.word	0x2002d3e8
 8017a34:	2002d3ee 	.word	0x2002d3ee
 8017a38:	2002d3e4 	.word	0x2002d3e4
 8017a3c:	2002d3d4 	.word	0x2002d3d4
 8017a40:	200270c4 	.word	0x200270c4
 8017a44:	200270c8 	.word	0x200270c8
 8017a48:	08022a2c 	.word	0x08022a2c
 8017a4c:	08022ccc 	.word	0x08022ccc
 8017a50:	08022a78 	.word	0x08022a78
 8017a54:	2002d3ec 	.word	0x2002d3ec
 8017a58:	2002d3f1 	.word	0x2002d3f1
 8017a5c:	2002d3b8 	.word	0x2002d3b8
 8017a60:	697b      	ldr	r3, [r7, #20]
 8017a62:	68db      	ldr	r3, [r3, #12]
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	429a      	cmp	r2, r3
 8017a68:	d104      	bne.n	8017a74 <tcp_process+0x5d8>
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	68da      	ldr	r2, [r3, #12]
 8017a6e:	697b      	ldr	r3, [r7, #20]
 8017a70:	60da      	str	r2, [r3, #12]
 8017a72:	e005      	b.n	8017a80 <tcp_process+0x5e4>
 8017a74:	697b      	ldr	r3, [r7, #20]
 8017a76:	68db      	ldr	r3, [r3, #12]
 8017a78:	617b      	str	r3, [r7, #20]
 8017a7a:	697b      	ldr	r3, [r7, #20]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d1ef      	bne.n	8017a60 <tcp_process+0x5c4>
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2200      	movs	r2, #0
 8017a84:	60da      	str	r2, [r3, #12]
 8017a86:	4b77      	ldr	r3, [pc, #476]	@ (8017c64 <tcp_process+0x7c8>)
 8017a88:	2201      	movs	r2, #1
 8017a8a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	220a      	movs	r2, #10
 8017a90:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017a92:	4b75      	ldr	r3, [pc, #468]	@ (8017c68 <tcp_process+0x7cc>)
 8017a94:	681a      	ldr	r2, [r3, #0]
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	60da      	str	r2, [r3, #12]
 8017a9a:	4a73      	ldr	r2, [pc, #460]	@ (8017c68 <tcp_process+0x7cc>)
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	6013      	str	r3, [r2, #0]
 8017aa0:	f003 f99a 	bl	801add8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017aa4:	e0d2      	b.n	8017c4c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	8b5b      	ldrh	r3, [r3, #26]
 8017aaa:	f043 0302 	orr.w	r3, r3, #2
 8017aae:	b29a      	uxth	r2, r3
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2208      	movs	r2, #8
 8017ab8:	751a      	strb	r2, [r3, #20]
      break;
 8017aba:	e0c7      	b.n	8017c4c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017abc:	4b6b      	ldr	r3, [pc, #428]	@ (8017c6c <tcp_process+0x7d0>)
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	f003 0310 	and.w	r3, r3, #16
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	f000 80c1 	beq.w	8017c4c <tcp_process+0x7b0>
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ace:	4b68      	ldr	r3, [pc, #416]	@ (8017c70 <tcp_process+0x7d4>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	f040 80ba 	bne.w	8017c4c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	f040 80b5 	bne.w	8017c4c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	2206      	movs	r2, #6
 8017ae6:	751a      	strb	r2, [r3, #20]
      break;
 8017ae8:	e0b0      	b.n	8017c4c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017aea:	6878      	ldr	r0, [r7, #4]
 8017aec:	f000 f9ca 	bl	8017e84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017af0:	4b60      	ldr	r3, [pc, #384]	@ (8017c74 <tcp_process+0x7d8>)
 8017af2:	781b      	ldrb	r3, [r3, #0]
 8017af4:	f003 0320 	and.w	r3, r3, #32
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	f000 80a9 	beq.w	8017c50 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	8b5b      	ldrh	r3, [r3, #26]
 8017b02:	f043 0302 	orr.w	r3, r3, #2
 8017b06:	b29a      	uxth	r2, r3
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017b0c:	6878      	ldr	r0, [r7, #4]
 8017b0e:	f7fe fcd3 	bl	80164b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017b12:	4b59      	ldr	r3, [pc, #356]	@ (8017c78 <tcp_process+0x7dc>)
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	687a      	ldr	r2, [r7, #4]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d105      	bne.n	8017b28 <tcp_process+0x68c>
 8017b1c:	4b56      	ldr	r3, [pc, #344]	@ (8017c78 <tcp_process+0x7dc>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	68db      	ldr	r3, [r3, #12]
 8017b22:	4a55      	ldr	r2, [pc, #340]	@ (8017c78 <tcp_process+0x7dc>)
 8017b24:	6013      	str	r3, [r2, #0]
 8017b26:	e013      	b.n	8017b50 <tcp_process+0x6b4>
 8017b28:	4b53      	ldr	r3, [pc, #332]	@ (8017c78 <tcp_process+0x7dc>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	613b      	str	r3, [r7, #16]
 8017b2e:	e00c      	b.n	8017b4a <tcp_process+0x6ae>
 8017b30:	693b      	ldr	r3, [r7, #16]
 8017b32:	68db      	ldr	r3, [r3, #12]
 8017b34:	687a      	ldr	r2, [r7, #4]
 8017b36:	429a      	cmp	r2, r3
 8017b38:	d104      	bne.n	8017b44 <tcp_process+0x6a8>
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	68da      	ldr	r2, [r3, #12]
 8017b3e:	693b      	ldr	r3, [r7, #16]
 8017b40:	60da      	str	r2, [r3, #12]
 8017b42:	e005      	b.n	8017b50 <tcp_process+0x6b4>
 8017b44:	693b      	ldr	r3, [r7, #16]
 8017b46:	68db      	ldr	r3, [r3, #12]
 8017b48:	613b      	str	r3, [r7, #16]
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d1ef      	bne.n	8017b30 <tcp_process+0x694>
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	2200      	movs	r2, #0
 8017b54:	60da      	str	r2, [r3, #12]
 8017b56:	4b43      	ldr	r3, [pc, #268]	@ (8017c64 <tcp_process+0x7c8>)
 8017b58:	2201      	movs	r2, #1
 8017b5a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	220a      	movs	r2, #10
 8017b60:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017b62:	4b41      	ldr	r3, [pc, #260]	@ (8017c68 <tcp_process+0x7cc>)
 8017b64:	681a      	ldr	r2, [r3, #0]
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	60da      	str	r2, [r3, #12]
 8017b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8017c68 <tcp_process+0x7cc>)
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	6013      	str	r3, [r2, #0]
 8017b70:	f003 f932 	bl	801add8 <tcp_timer_needed>
      }
      break;
 8017b74:	e06c      	b.n	8017c50 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f000 f984 	bl	8017e84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8017c6c <tcp_process+0x7d0>)
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	f003 0310 	and.w	r3, r3, #16
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d065      	beq.n	8017c54 <tcp_process+0x7b8>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017b8c:	4b38      	ldr	r3, [pc, #224]	@ (8017c70 <tcp_process+0x7d4>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d15f      	bne.n	8017c54 <tcp_process+0x7b8>
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d15b      	bne.n	8017c54 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017b9c:	6878      	ldr	r0, [r7, #4]
 8017b9e:	f7fe fc8b 	bl	80164b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017ba2:	4b35      	ldr	r3, [pc, #212]	@ (8017c78 <tcp_process+0x7dc>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	687a      	ldr	r2, [r7, #4]
 8017ba8:	429a      	cmp	r2, r3
 8017baa:	d105      	bne.n	8017bb8 <tcp_process+0x71c>
 8017bac:	4b32      	ldr	r3, [pc, #200]	@ (8017c78 <tcp_process+0x7dc>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	68db      	ldr	r3, [r3, #12]
 8017bb2:	4a31      	ldr	r2, [pc, #196]	@ (8017c78 <tcp_process+0x7dc>)
 8017bb4:	6013      	str	r3, [r2, #0]
 8017bb6:	e013      	b.n	8017be0 <tcp_process+0x744>
 8017bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8017c78 <tcp_process+0x7dc>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	60fb      	str	r3, [r7, #12]
 8017bbe:	e00c      	b.n	8017bda <tcp_process+0x73e>
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	68db      	ldr	r3, [r3, #12]
 8017bc4:	687a      	ldr	r2, [r7, #4]
 8017bc6:	429a      	cmp	r2, r3
 8017bc8:	d104      	bne.n	8017bd4 <tcp_process+0x738>
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	68da      	ldr	r2, [r3, #12]
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	60da      	str	r2, [r3, #12]
 8017bd2:	e005      	b.n	8017be0 <tcp_process+0x744>
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	68db      	ldr	r3, [r3, #12]
 8017bd8:	60fb      	str	r3, [r7, #12]
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d1ef      	bne.n	8017bc0 <tcp_process+0x724>
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	2200      	movs	r2, #0
 8017be4:	60da      	str	r2, [r3, #12]
 8017be6:	4b1f      	ldr	r3, [pc, #124]	@ (8017c64 <tcp_process+0x7c8>)
 8017be8:	2201      	movs	r2, #1
 8017bea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	220a      	movs	r2, #10
 8017bf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8017c68 <tcp_process+0x7cc>)
 8017bf4:	681a      	ldr	r2, [r3, #0]
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	60da      	str	r2, [r3, #12]
 8017bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8017c68 <tcp_process+0x7cc>)
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	6013      	str	r3, [r2, #0]
 8017c00:	f003 f8ea 	bl	801add8 <tcp_timer_needed>
      }
      break;
 8017c04:	e026      	b.n	8017c54 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017c06:	6878      	ldr	r0, [r7, #4]
 8017c08:	f000 f93c 	bl	8017e84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017c0c:	4b17      	ldr	r3, [pc, #92]	@ (8017c6c <tcp_process+0x7d0>)
 8017c0e:	781b      	ldrb	r3, [r3, #0]
 8017c10:	f003 0310 	and.w	r3, r3, #16
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d01f      	beq.n	8017c58 <tcp_process+0x7bc>
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017c1c:	4b14      	ldr	r3, [pc, #80]	@ (8017c70 <tcp_process+0x7d4>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d119      	bne.n	8017c58 <tcp_process+0x7bc>
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d115      	bne.n	8017c58 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017c2c:	4b11      	ldr	r3, [pc, #68]	@ (8017c74 <tcp_process+0x7d8>)
 8017c2e:	781b      	ldrb	r3, [r3, #0]
 8017c30:	f043 0310 	orr.w	r3, r3, #16
 8017c34:	b2da      	uxtb	r2, r3
 8017c36:	4b0f      	ldr	r3, [pc, #60]	@ (8017c74 <tcp_process+0x7d8>)
 8017c38:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017c3a:	e00d      	b.n	8017c58 <tcp_process+0x7bc>
    default:
      break;
 8017c3c:	bf00      	nop
 8017c3e:	e00c      	b.n	8017c5a <tcp_process+0x7be>
      break;
 8017c40:	bf00      	nop
 8017c42:	e00a      	b.n	8017c5a <tcp_process+0x7be>
      break;
 8017c44:	bf00      	nop
 8017c46:	e008      	b.n	8017c5a <tcp_process+0x7be>
      break;
 8017c48:	bf00      	nop
 8017c4a:	e006      	b.n	8017c5a <tcp_process+0x7be>
      break;
 8017c4c:	bf00      	nop
 8017c4e:	e004      	b.n	8017c5a <tcp_process+0x7be>
      break;
 8017c50:	bf00      	nop
 8017c52:	e002      	b.n	8017c5a <tcp_process+0x7be>
      break;
 8017c54:	bf00      	nop
 8017c56:	e000      	b.n	8017c5a <tcp_process+0x7be>
      break;
 8017c58:	bf00      	nop
  }
  return ERR_OK;
 8017c5a:	2300      	movs	r3, #0
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3724      	adds	r7, #36	@ 0x24
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd90      	pop	{r4, r7, pc}
 8017c64:	2002d3c0 	.word	0x2002d3c0
 8017c68:	2002d3bc 	.word	0x2002d3bc
 8017c6c:	2002d3f0 	.word	0x2002d3f0
 8017c70:	2002d3e8 	.word	0x2002d3e8
 8017c74:	2002d3f1 	.word	0x2002d3f1
 8017c78:	2002d3b8 	.word	0x2002d3b8

08017c7c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017c7c:	b590      	push	{r4, r7, lr}
 8017c7e:	b085      	sub	sp, #20
 8017c80:	af00      	add	r7, sp, #0
 8017c82:	6078      	str	r0, [r7, #4]
 8017c84:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d106      	bne.n	8017c9a <tcp_oos_insert_segment+0x1e>
 8017c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8017d7c <tcp_oos_insert_segment+0x100>)
 8017c8e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8017c92:	493b      	ldr	r1, [pc, #236]	@ (8017d80 <tcp_oos_insert_segment+0x104>)
 8017c94:	483b      	ldr	r0, [pc, #236]	@ (8017d84 <tcp_oos_insert_segment+0x108>)
 8017c96:	f007 ffa9 	bl	801fbec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	899b      	ldrh	r3, [r3, #12]
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7fb f892 	bl	8012dcc <lwip_htons>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	b2db      	uxtb	r3, r3
 8017cac:	f003 0301 	and.w	r3, r3, #1
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d028      	beq.n	8017d06 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017cb4:	6838      	ldr	r0, [r7, #0]
 8017cb6:	f7fe f905 	bl	8015ec4 <tcp_segs_free>
    next = NULL;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	603b      	str	r3, [r7, #0]
 8017cbe:	e056      	b.n	8017d6e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	68db      	ldr	r3, [r3, #12]
 8017cc4:	899b      	ldrh	r3, [r3, #12]
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7fb f87f 	bl	8012dcc <lwip_htons>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	b2db      	uxtb	r3, r3
 8017cd2:	f003 0301 	and.w	r3, r3, #1
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d00d      	beq.n	8017cf6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	68db      	ldr	r3, [r3, #12]
 8017cde:	899b      	ldrh	r3, [r3, #12]
 8017ce0:	b29c      	uxth	r4, r3
 8017ce2:	2001      	movs	r0, #1
 8017ce4:	f7fb f872 	bl	8012dcc <lwip_htons>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	461a      	mov	r2, r3
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	68db      	ldr	r3, [r3, #12]
 8017cf0:	4322      	orrs	r2, r4
 8017cf2:	b292      	uxth	r2, r2
 8017cf4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017d00:	68f8      	ldr	r0, [r7, #12]
 8017d02:	f7fe f8f4 	bl	8015eee <tcp_seg_free>
    while (next &&
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d00e      	beq.n	8017d2a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	891b      	ldrh	r3, [r3, #8]
 8017d10:	461a      	mov	r2, r3
 8017d12:	4b1d      	ldr	r3, [pc, #116]	@ (8017d88 <tcp_oos_insert_segment+0x10c>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	441a      	add	r2, r3
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	68db      	ldr	r3, [r3, #12]
 8017d1c:	685b      	ldr	r3, [r3, #4]
 8017d1e:	6839      	ldr	r1, [r7, #0]
 8017d20:	8909      	ldrh	r1, [r1, #8]
 8017d22:	440b      	add	r3, r1
 8017d24:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	daca      	bge.n	8017cc0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d01e      	beq.n	8017d6e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	891b      	ldrh	r3, [r3, #8]
 8017d34:	461a      	mov	r2, r3
 8017d36:	4b14      	ldr	r3, [pc, #80]	@ (8017d88 <tcp_oos_insert_segment+0x10c>)
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	441a      	add	r2, r3
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	68db      	ldr	r3, [r3, #12]
 8017d40:	685b      	ldr	r3, [r3, #4]
 8017d42:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	dd12      	ble.n	8017d6e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	68db      	ldr	r3, [r3, #12]
 8017d4c:	685b      	ldr	r3, [r3, #4]
 8017d4e:	b29a      	uxth	r2, r3
 8017d50:	4b0d      	ldr	r3, [pc, #52]	@ (8017d88 <tcp_oos_insert_segment+0x10c>)
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	1ad3      	subs	r3, r2, r3
 8017d58:	b29a      	uxth	r2, r3
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	685a      	ldr	r2, [r3, #4]
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	891b      	ldrh	r3, [r3, #8]
 8017d66:	4619      	mov	r1, r3
 8017d68:	4610      	mov	r0, r2
 8017d6a:	f7fc fb67 	bl	801443c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	683a      	ldr	r2, [r7, #0]
 8017d72:	601a      	str	r2, [r3, #0]
}
 8017d74:	bf00      	nop
 8017d76:	3714      	adds	r7, #20
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	bd90      	pop	{r4, r7, pc}
 8017d7c:	08022a2c 	.word	0x08022a2c
 8017d80:	08022cec 	.word	0x08022cec
 8017d84:	08022a78 	.word	0x08022a78
 8017d88:	2002d3e4 	.word	0x2002d3e4

08017d8c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017d8c:	b5b0      	push	{r4, r5, r7, lr}
 8017d8e:	b086      	sub	sp, #24
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	60f8      	str	r0, [r7, #12]
 8017d94:	60b9      	str	r1, [r7, #8]
 8017d96:	607a      	str	r2, [r7, #4]
 8017d98:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017d9a:	e03e      	b.n	8017e1a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017da0:	68bb      	ldr	r3, [r7, #8]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017da6:	697b      	ldr	r3, [r7, #20]
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7fc fd5a 	bl	8014864 <pbuf_clen>
 8017db0:	4603      	mov	r3, r0
 8017db2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017dba:	8a7a      	ldrh	r2, [r7, #18]
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	d906      	bls.n	8017dce <tcp_free_acked_segments+0x42>
 8017dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8017e6c <tcp_free_acked_segments+0xe0>)
 8017dc2:	f240 4257 	movw	r2, #1111	@ 0x457
 8017dc6:	492a      	ldr	r1, [pc, #168]	@ (8017e70 <tcp_free_acked_segments+0xe4>)
 8017dc8:	482a      	ldr	r0, [pc, #168]	@ (8017e74 <tcp_free_acked_segments+0xe8>)
 8017dca:	f007 ff0f 	bl	801fbec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017dd4:	8a7b      	ldrh	r3, [r7, #18]
 8017dd6:	1ad3      	subs	r3, r2, r3
 8017dd8:	b29a      	uxth	r2, r3
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	891a      	ldrh	r2, [r3, #8]
 8017de4:	4b24      	ldr	r3, [pc, #144]	@ (8017e78 <tcp_free_acked_segments+0xec>)
 8017de6:	881b      	ldrh	r3, [r3, #0]
 8017de8:	4413      	add	r3, r2
 8017dea:	b29a      	uxth	r2, r3
 8017dec:	4b22      	ldr	r3, [pc, #136]	@ (8017e78 <tcp_free_acked_segments+0xec>)
 8017dee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017df0:	6978      	ldr	r0, [r7, #20]
 8017df2:	f7fe f87c 	bl	8015eee <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d00c      	beq.n	8017e1a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d109      	bne.n	8017e1a <tcp_free_acked_segments+0x8e>
 8017e06:	683b      	ldr	r3, [r7, #0]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d106      	bne.n	8017e1a <tcp_free_acked_segments+0x8e>
 8017e0c:	4b17      	ldr	r3, [pc, #92]	@ (8017e6c <tcp_free_acked_segments+0xe0>)
 8017e0e:	f240 4261 	movw	r2, #1121	@ 0x461
 8017e12:	491a      	ldr	r1, [pc, #104]	@ (8017e7c <tcp_free_acked_segments+0xf0>)
 8017e14:	4817      	ldr	r0, [pc, #92]	@ (8017e74 <tcp_free_acked_segments+0xe8>)
 8017e16:	f007 fee9 	bl	801fbec <iprintf>
  while (seg_list != NULL &&
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d020      	beq.n	8017e62 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	68db      	ldr	r3, [r3, #12]
 8017e24:	685b      	ldr	r3, [r3, #4]
 8017e26:	4618      	mov	r0, r3
 8017e28:	f7fa ffe6 	bl	8012df8 <lwip_htonl>
 8017e2c:	4604      	mov	r4, r0
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	891b      	ldrh	r3, [r3, #8]
 8017e32:	461d      	mov	r5, r3
 8017e34:	68bb      	ldr	r3, [r7, #8]
 8017e36:	68db      	ldr	r3, [r3, #12]
 8017e38:	899b      	ldrh	r3, [r3, #12]
 8017e3a:	b29b      	uxth	r3, r3
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f7fa ffc5 	bl	8012dcc <lwip_htons>
 8017e42:	4603      	mov	r3, r0
 8017e44:	b2db      	uxtb	r3, r3
 8017e46:	f003 0303 	and.w	r3, r3, #3
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d001      	beq.n	8017e52 <tcp_free_acked_segments+0xc6>
 8017e4e:	2301      	movs	r3, #1
 8017e50:	e000      	b.n	8017e54 <tcp_free_acked_segments+0xc8>
 8017e52:	2300      	movs	r3, #0
 8017e54:	442b      	add	r3, r5
 8017e56:	18e2      	adds	r2, r4, r3
 8017e58:	4b09      	ldr	r3, [pc, #36]	@ (8017e80 <tcp_free_acked_segments+0xf4>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	dd9c      	ble.n	8017d9c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017e62:	68bb      	ldr	r3, [r7, #8]
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	3718      	adds	r7, #24
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8017e6c:	08022a2c 	.word	0x08022a2c
 8017e70:	08022d14 	.word	0x08022d14
 8017e74:	08022a78 	.word	0x08022a78
 8017e78:	2002d3ec 	.word	0x2002d3ec
 8017e7c:	08022d3c 	.word	0x08022d3c
 8017e80:	2002d3e8 	.word	0x2002d3e8

08017e84 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017e84:	b5b0      	push	{r4, r5, r7, lr}
 8017e86:	b094      	sub	sp, #80	@ 0x50
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d106      	bne.n	8017ea4 <tcp_receive+0x20>
 8017e96:	4b91      	ldr	r3, [pc, #580]	@ (80180dc <tcp_receive+0x258>)
 8017e98:	f240 427b 	movw	r2, #1147	@ 0x47b
 8017e9c:	4990      	ldr	r1, [pc, #576]	@ (80180e0 <tcp_receive+0x25c>)
 8017e9e:	4891      	ldr	r0, [pc, #580]	@ (80180e4 <tcp_receive+0x260>)
 8017ea0:	f007 fea4 	bl	801fbec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	7d1b      	ldrb	r3, [r3, #20]
 8017ea8:	2b03      	cmp	r3, #3
 8017eaa:	d806      	bhi.n	8017eba <tcp_receive+0x36>
 8017eac:	4b8b      	ldr	r3, [pc, #556]	@ (80180dc <tcp_receive+0x258>)
 8017eae:	f240 427c 	movw	r2, #1148	@ 0x47c
 8017eb2:	498d      	ldr	r1, [pc, #564]	@ (80180e8 <tcp_receive+0x264>)
 8017eb4:	488b      	ldr	r0, [pc, #556]	@ (80180e4 <tcp_receive+0x260>)
 8017eb6:	f007 fe99 	bl	801fbec <iprintf>

  if (flags & TCP_ACK) {
 8017eba:	4b8c      	ldr	r3, [pc, #560]	@ (80180ec <tcp_receive+0x268>)
 8017ebc:	781b      	ldrb	r3, [r3, #0]
 8017ebe:	f003 0310 	and.w	r3, r3, #16
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	f000 8264 	beq.w	8018390 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017ece:	461a      	mov	r2, r3
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ed4:	4413      	add	r3, r2
 8017ed6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017edc:	4b84      	ldr	r3, [pc, #528]	@ (80180f0 <tcp_receive+0x26c>)
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	1ad3      	subs	r3, r2, r3
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	db1b      	blt.n	8017f1e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017eea:	4b81      	ldr	r3, [pc, #516]	@ (80180f0 <tcp_receive+0x26c>)
 8017eec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d106      	bne.n	8017f00 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80180f4 <tcp_receive+0x270>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	1ad3      	subs	r3, r2, r3
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	db0e      	blt.n	8017f1e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017f04:	4b7b      	ldr	r3, [pc, #492]	@ (80180f4 <tcp_receive+0x270>)
 8017f06:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017f08:	429a      	cmp	r2, r3
 8017f0a:	d125      	bne.n	8017f58 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017f0c:	4b7a      	ldr	r3, [pc, #488]	@ (80180f8 <tcp_receive+0x274>)
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	89db      	ldrh	r3, [r3, #14]
 8017f12:	b29a      	uxth	r2, r3
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d91c      	bls.n	8017f58 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017f1e:	4b76      	ldr	r3, [pc, #472]	@ (80180f8 <tcp_receive+0x274>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	89db      	ldrh	r3, [r3, #14]
 8017f24:	b29a      	uxth	r2, r3
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d205      	bcs.n	8017f48 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8017f48:	4b69      	ldr	r3, [pc, #420]	@ (80180f0 <tcp_receive+0x26c>)
 8017f4a:	681a      	ldr	r2, [r3, #0]
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8017f50:	4b68      	ldr	r3, [pc, #416]	@ (80180f4 <tcp_receive+0x270>)
 8017f52:	681a      	ldr	r2, [r3, #0]
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017f58:	4b66      	ldr	r3, [pc, #408]	@ (80180f4 <tcp_receive+0x270>)
 8017f5a:	681a      	ldr	r2, [r3, #0]
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017f60:	1ad3      	subs	r3, r2, r3
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	dc58      	bgt.n	8018018 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017f66:	4b65      	ldr	r3, [pc, #404]	@ (80180fc <tcp_receive+0x278>)
 8017f68:	881b      	ldrh	r3, [r3, #0]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d14b      	bne.n	8018006 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8017f78:	4413      	add	r3, r2
 8017f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f7c:	429a      	cmp	r2, r3
 8017f7e:	d142      	bne.n	8018006 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	db3d      	blt.n	8018006 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017f8e:	4b59      	ldr	r3, [pc, #356]	@ (80180f4 <tcp_receive+0x270>)
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	429a      	cmp	r2, r3
 8017f94:	d137      	bne.n	8018006 <tcp_receive+0x182>
              found_dupack = 1;
 8017f96:	2301      	movs	r3, #1
 8017f98:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017fa0:	2bff      	cmp	r3, #255	@ 0xff
 8017fa2:	d007      	beq.n	8017fb4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017faa:	3301      	adds	r3, #1
 8017fac:	b2da      	uxtb	r2, r3
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017fba:	2b03      	cmp	r3, #3
 8017fbc:	d91b      	bls.n	8017ff6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017fc8:	4413      	add	r3, r2
 8017fca:	b29a      	uxth	r2, r3
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d30a      	bcc.n	8017fec <tcp_receive+0x168>
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017fe0:	4413      	add	r3, r2
 8017fe2:	b29a      	uxth	r2, r3
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017fea:	e004      	b.n	8017ff6 <tcp_receive+0x172>
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017ffc:	2b02      	cmp	r3, #2
 8017ffe:	d902      	bls.n	8018006 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018000:	6878      	ldr	r0, [r7, #4]
 8018002:	f002 fb83 	bl	801a70c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018008:	2b00      	cmp	r3, #0
 801800a:	f040 8161 	bne.w	80182d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	2200      	movs	r2, #0
 8018012:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018016:	e15b      	b.n	80182d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018018:	4b36      	ldr	r3, [pc, #216]	@ (80180f4 <tcp_receive+0x270>)
 801801a:	681a      	ldr	r2, [r3, #0]
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018020:	1ad3      	subs	r3, r2, r3
 8018022:	3b01      	subs	r3, #1
 8018024:	2b00      	cmp	r3, #0
 8018026:	f2c0 814e 	blt.w	80182c6 <tcp_receive+0x442>
 801802a:	4b32      	ldr	r3, [pc, #200]	@ (80180f4 <tcp_receive+0x270>)
 801802c:	681a      	ldr	r2, [r3, #0]
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018032:	1ad3      	subs	r3, r2, r3
 8018034:	2b00      	cmp	r3, #0
 8018036:	f300 8146 	bgt.w	80182c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	8b5b      	ldrh	r3, [r3, #26]
 801803e:	f003 0304 	and.w	r3, r3, #4
 8018042:	2b00      	cmp	r3, #0
 8018044:	d010      	beq.n	8018068 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	8b5b      	ldrh	r3, [r3, #26]
 801804a:	f023 0304 	bic.w	r3, r3, #4
 801804e:	b29a      	uxth	r2, r3
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	2200      	movs	r2, #0
 8018064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	2200      	movs	r2, #0
 801806c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018076:	10db      	asrs	r3, r3, #3
 8018078:	b21b      	sxth	r3, r3
 801807a:	b29a      	uxth	r2, r3
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018082:	b29b      	uxth	r3, r3
 8018084:	4413      	add	r3, r2
 8018086:	b29b      	uxth	r3, r3
 8018088:	b21a      	sxth	r2, r3
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018090:	4b18      	ldr	r3, [pc, #96]	@ (80180f4 <tcp_receive+0x270>)
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	b29a      	uxth	r2, r3
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801809a:	b29b      	uxth	r3, r3
 801809c:	1ad3      	subs	r3, r2, r3
 801809e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	2200      	movs	r2, #0
 80180a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80180a8:	4b12      	ldr	r3, [pc, #72]	@ (80180f4 <tcp_receive+0x270>)
 80180aa:	681a      	ldr	r2, [r3, #0]
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	7d1b      	ldrb	r3, [r3, #20]
 80180b4:	2b03      	cmp	r3, #3
 80180b6:	f240 8097 	bls.w	80181e8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d245      	bcs.n	8018156 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	8b5b      	ldrh	r3, [r3, #26]
 80180ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d014      	beq.n	8018100 <tcp_receive+0x27c>
 80180d6:	2301      	movs	r3, #1
 80180d8:	e013      	b.n	8018102 <tcp_receive+0x27e>
 80180da:	bf00      	nop
 80180dc:	08022a2c 	.word	0x08022a2c
 80180e0:	08022d5c 	.word	0x08022d5c
 80180e4:	08022a78 	.word	0x08022a78
 80180e8:	08022d78 	.word	0x08022d78
 80180ec:	2002d3f0 	.word	0x2002d3f0
 80180f0:	2002d3e4 	.word	0x2002d3e4
 80180f4:	2002d3e8 	.word	0x2002d3e8
 80180f8:	2002d3d4 	.word	0x2002d3d4
 80180fc:	2002d3ee 	.word	0x2002d3ee
 8018100:	2302      	movs	r3, #2
 8018102:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018106:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801810a:	b29a      	uxth	r2, r3
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018110:	fb12 f303 	smulbb	r3, r2, r3
 8018114:	b29b      	uxth	r3, r3
 8018116:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018118:	4293      	cmp	r3, r2
 801811a:	bf28      	it	cs
 801811c:	4613      	movcs	r3, r2
 801811e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018126:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018128:	4413      	add	r3, r2
 801812a:	b29a      	uxth	r2, r3
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018132:	429a      	cmp	r2, r3
 8018134:	d309      	bcc.n	801814a <tcp_receive+0x2c6>
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801813c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801813e:	4413      	add	r3, r2
 8018140:	b29a      	uxth	r2, r3
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018148:	e04e      	b.n	80181e8 <tcp_receive+0x364>
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018150:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018154:	e048      	b.n	80181e8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801815c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801815e:	4413      	add	r3, r2
 8018160:	b29a      	uxth	r2, r3
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018168:	429a      	cmp	r2, r3
 801816a:	d309      	bcc.n	8018180 <tcp_receive+0x2fc>
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018172:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018174:	4413      	add	r3, r2
 8018176:	b29a      	uxth	r2, r3
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801817e:	e004      	b.n	801818a <tcp_receive+0x306>
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018186:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018196:	429a      	cmp	r2, r3
 8018198:	d326      	bcc.n	80181e8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80181a6:	1ad3      	subs	r3, r2, r3
 80181a8:	b29a      	uxth	r2, r3
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80181ba:	4413      	add	r3, r2
 80181bc:	b29a      	uxth	r2, r3
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d30a      	bcc.n	80181de <tcp_receive+0x35a>
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80181d2:	4413      	add	r3, r2
 80181d4:	b29a      	uxth	r2, r3
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80181dc:	e004      	b.n	80181e8 <tcp_receive+0x364>
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80181e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80181f0:	4a98      	ldr	r2, [pc, #608]	@ (8018454 <tcp_receive+0x5d0>)
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	f7ff fdca 	bl	8017d8c <tcp_free_acked_segments>
 80181f8:	4602      	mov	r2, r0
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018206:	4a94      	ldr	r2, [pc, #592]	@ (8018458 <tcp_receive+0x5d4>)
 8018208:	6878      	ldr	r0, [r7, #4]
 801820a:	f7ff fdbf 	bl	8017d8c <tcp_free_acked_segments>
 801820e:	4602      	mov	r2, r0
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018218:	2b00      	cmp	r3, #0
 801821a:	d104      	bne.n	8018226 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018222:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018224:	e002      	b.n	801822c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	2200      	movs	r2, #0
 801822a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2200      	movs	r2, #0
 8018230:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018236:	2b00      	cmp	r3, #0
 8018238:	d103      	bne.n	8018242 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	2200      	movs	r2, #0
 801823e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018248:	4b84      	ldr	r3, [pc, #528]	@ (801845c <tcp_receive+0x5d8>)
 801824a:	881b      	ldrh	r3, [r3, #0]
 801824c:	4413      	add	r3, r2
 801824e:	b29a      	uxth	r2, r3
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	8b5b      	ldrh	r3, [r3, #26]
 801825a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801825e:	2b00      	cmp	r3, #0
 8018260:	d035      	beq.n	80182ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018266:	2b00      	cmp	r3, #0
 8018268:	d118      	bne.n	801829c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801826e:	2b00      	cmp	r3, #0
 8018270:	d00c      	beq.n	801828c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801827a:	68db      	ldr	r3, [r3, #12]
 801827c:	685b      	ldr	r3, [r3, #4]
 801827e:	4618      	mov	r0, r3
 8018280:	f7fa fdba 	bl	8012df8 <lwip_htonl>
 8018284:	4603      	mov	r3, r0
 8018286:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018288:	2b00      	cmp	r3, #0
 801828a:	dc20      	bgt.n	80182ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	8b5b      	ldrh	r3, [r3, #26]
 8018290:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018294:	b29a      	uxth	r2, r3
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801829a:	e018      	b.n	80182ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80182a4:	68db      	ldr	r3, [r3, #12]
 80182a6:	685b      	ldr	r3, [r3, #4]
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7fa fda5 	bl	8012df8 <lwip_htonl>
 80182ae:	4603      	mov	r3, r0
 80182b0:	1ae3      	subs	r3, r4, r3
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	dc0b      	bgt.n	80182ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	8b5b      	ldrh	r3, [r3, #26]
 80182ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80182be:	b29a      	uxth	r2, r3
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80182c4:	e003      	b.n	80182ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80182c6:	6878      	ldr	r0, [r7, #4]
 80182c8:	f002 fc16 	bl	801aaf8 <tcp_send_empty_ack>
 80182cc:	e000      	b.n	80182d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80182ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d05b      	beq.n	8018390 <tcp_receive+0x50c>
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80182dc:	4b60      	ldr	r3, [pc, #384]	@ (8018460 <tcp_receive+0x5dc>)
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	1ad3      	subs	r3, r2, r3
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	da54      	bge.n	8018390 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80182e6:	4b5f      	ldr	r3, [pc, #380]	@ (8018464 <tcp_receive+0x5e0>)
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	b29a      	uxth	r2, r3
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80182f0:	b29b      	uxth	r3, r3
 80182f2:	1ad3      	subs	r3, r2, r3
 80182f4:	b29b      	uxth	r3, r3
 80182f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80182fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018304:	10db      	asrs	r3, r3, #3
 8018306:	b21b      	sxth	r3, r3
 8018308:	b29b      	uxth	r3, r3
 801830a:	1ad3      	subs	r3, r2, r3
 801830c:	b29b      	uxth	r3, r3
 801830e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018318:	b29a      	uxth	r2, r3
 801831a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801831e:	4413      	add	r3, r2
 8018320:	b29b      	uxth	r3, r3
 8018322:	b21a      	sxth	r2, r3
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018328:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801832c:	2b00      	cmp	r3, #0
 801832e:	da05      	bge.n	801833c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018330:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018334:	425b      	negs	r3, r3
 8018336:	b29b      	uxth	r3, r3
 8018338:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801833c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018346:	109b      	asrs	r3, r3, #2
 8018348:	b21b      	sxth	r3, r3
 801834a:	b29b      	uxth	r3, r3
 801834c:	1ad3      	subs	r3, r2, r3
 801834e:	b29b      	uxth	r3, r3
 8018350:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801835a:	b29a      	uxth	r2, r3
 801835c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018360:	4413      	add	r3, r2
 8018362:	b29b      	uxth	r3, r3
 8018364:	b21a      	sxth	r2, r3
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018370:	10db      	asrs	r3, r3, #3
 8018372:	b21b      	sxth	r3, r3
 8018374:	b29a      	uxth	r2, r3
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801837c:	b29b      	uxth	r3, r3
 801837e:	4413      	add	r3, r2
 8018380:	b29b      	uxth	r3, r3
 8018382:	b21a      	sxth	r2, r3
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	2200      	movs	r2, #0
 801838e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018390:	4b35      	ldr	r3, [pc, #212]	@ (8018468 <tcp_receive+0x5e4>)
 8018392:	881b      	ldrh	r3, [r3, #0]
 8018394:	2b00      	cmp	r3, #0
 8018396:	f000 84df 	beq.w	8018d58 <tcp_receive+0xed4>
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	7d1b      	ldrb	r3, [r3, #20]
 801839e:	2b06      	cmp	r3, #6
 80183a0:	f200 84da 	bhi.w	8018d58 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80183a8:	4b30      	ldr	r3, [pc, #192]	@ (801846c <tcp_receive+0x5e8>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	1ad3      	subs	r3, r2, r3
 80183ae:	3b01      	subs	r3, #1
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	f2c0 808f 	blt.w	80184d4 <tcp_receive+0x650>
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80183ba:	4b2b      	ldr	r3, [pc, #172]	@ (8018468 <tcp_receive+0x5e4>)
 80183bc:	881b      	ldrh	r3, [r3, #0]
 80183be:	4619      	mov	r1, r3
 80183c0:	4b2a      	ldr	r3, [pc, #168]	@ (801846c <tcp_receive+0x5e8>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	440b      	add	r3, r1
 80183c6:	1ad3      	subs	r3, r2, r3
 80183c8:	3301      	adds	r3, #1
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	f300 8082 	bgt.w	80184d4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80183d0:	4b27      	ldr	r3, [pc, #156]	@ (8018470 <tcp_receive+0x5ec>)
 80183d2:	685b      	ldr	r3, [r3, #4]
 80183d4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80183da:	4b24      	ldr	r3, [pc, #144]	@ (801846c <tcp_receive+0x5e8>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	1ad3      	subs	r3, r2, r3
 80183e0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80183e2:	4b23      	ldr	r3, [pc, #140]	@ (8018470 <tcp_receive+0x5ec>)
 80183e4:	685b      	ldr	r3, [r3, #4]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d106      	bne.n	80183f8 <tcp_receive+0x574>
 80183ea:	4b22      	ldr	r3, [pc, #136]	@ (8018474 <tcp_receive+0x5f0>)
 80183ec:	f240 5294 	movw	r2, #1428	@ 0x594
 80183f0:	4921      	ldr	r1, [pc, #132]	@ (8018478 <tcp_receive+0x5f4>)
 80183f2:	4822      	ldr	r0, [pc, #136]	@ (801847c <tcp_receive+0x5f8>)
 80183f4:	f007 fbfa 	bl	801fbec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80183f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80183fe:	4293      	cmp	r3, r2
 8018400:	d906      	bls.n	8018410 <tcp_receive+0x58c>
 8018402:	4b1c      	ldr	r3, [pc, #112]	@ (8018474 <tcp_receive+0x5f0>)
 8018404:	f240 5295 	movw	r2, #1429	@ 0x595
 8018408:	491d      	ldr	r1, [pc, #116]	@ (8018480 <tcp_receive+0x5fc>)
 801840a:	481c      	ldr	r0, [pc, #112]	@ (801847c <tcp_receive+0x5f8>)
 801840c:	f007 fbee 	bl	801fbec <iprintf>
      off = (u16_t)off32;
 8018410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018412:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018416:	4b16      	ldr	r3, [pc, #88]	@ (8018470 <tcp_receive+0x5ec>)
 8018418:	685b      	ldr	r3, [r3, #4]
 801841a:	891b      	ldrh	r3, [r3, #8]
 801841c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018420:	429a      	cmp	r2, r3
 8018422:	d906      	bls.n	8018432 <tcp_receive+0x5ae>
 8018424:	4b13      	ldr	r3, [pc, #76]	@ (8018474 <tcp_receive+0x5f0>)
 8018426:	f240 5297 	movw	r2, #1431	@ 0x597
 801842a:	4916      	ldr	r1, [pc, #88]	@ (8018484 <tcp_receive+0x600>)
 801842c:	4813      	ldr	r0, [pc, #76]	@ (801847c <tcp_receive+0x5f8>)
 801842e:	f007 fbdd 	bl	801fbec <iprintf>
      inseg.len -= off;
 8018432:	4b0f      	ldr	r3, [pc, #60]	@ (8018470 <tcp_receive+0x5ec>)
 8018434:	891a      	ldrh	r2, [r3, #8]
 8018436:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801843a:	1ad3      	subs	r3, r2, r3
 801843c:	b29a      	uxth	r2, r3
 801843e:	4b0c      	ldr	r3, [pc, #48]	@ (8018470 <tcp_receive+0x5ec>)
 8018440:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018442:	4b0b      	ldr	r3, [pc, #44]	@ (8018470 <tcp_receive+0x5ec>)
 8018444:	685b      	ldr	r3, [r3, #4]
 8018446:	891a      	ldrh	r2, [r3, #8]
 8018448:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801844c:	1ad3      	subs	r3, r2, r3
 801844e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8018450:	e02a      	b.n	80184a8 <tcp_receive+0x624>
 8018452:	bf00      	nop
 8018454:	08022d94 	.word	0x08022d94
 8018458:	08022d9c 	.word	0x08022d9c
 801845c:	2002d3ec 	.word	0x2002d3ec
 8018460:	2002d3e8 	.word	0x2002d3e8
 8018464:	2002d3ac 	.word	0x2002d3ac
 8018468:	2002d3ee 	.word	0x2002d3ee
 801846c:	2002d3e4 	.word	0x2002d3e4
 8018470:	2002d3c4 	.word	0x2002d3c4
 8018474:	08022a2c 	.word	0x08022a2c
 8018478:	08022da4 	.word	0x08022da4
 801847c:	08022a78 	.word	0x08022a78
 8018480:	08022db4 	.word	0x08022db4
 8018484:	08022dc4 	.word	0x08022dc4
        off -= p->len;
 8018488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801848a:	895b      	ldrh	r3, [r3, #10]
 801848c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018490:	1ad3      	subs	r3, r2, r3
 8018492:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018498:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801849a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801849c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801849e:	2200      	movs	r2, #0
 80184a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80184a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80184a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184aa:	895b      	ldrh	r3, [r3, #10]
 80184ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80184b0:	429a      	cmp	r2, r3
 80184b2:	d8e9      	bhi.n	8018488 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80184b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80184b8:	4619      	mov	r1, r3
 80184ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80184bc:	f7fc f8be 	bl	801463c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184c4:	4a90      	ldr	r2, [pc, #576]	@ (8018708 <tcp_receive+0x884>)
 80184c6:	6013      	str	r3, [r2, #0]
 80184c8:	4b90      	ldr	r3, [pc, #576]	@ (801870c <tcp_receive+0x888>)
 80184ca:	68db      	ldr	r3, [r3, #12]
 80184cc:	4a8e      	ldr	r2, [pc, #568]	@ (8018708 <tcp_receive+0x884>)
 80184ce:	6812      	ldr	r2, [r2, #0]
 80184d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80184d2:	e00d      	b.n	80184f0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80184d4:	4b8c      	ldr	r3, [pc, #560]	@ (8018708 <tcp_receive+0x884>)
 80184d6:	681a      	ldr	r2, [r3, #0]
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184dc:	1ad3      	subs	r3, r2, r3
 80184de:	2b00      	cmp	r3, #0
 80184e0:	da06      	bge.n	80184f0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	8b5b      	ldrh	r3, [r3, #26]
 80184e6:	f043 0302 	orr.w	r3, r3, #2
 80184ea:	b29a      	uxth	r2, r3
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80184f0:	4b85      	ldr	r3, [pc, #532]	@ (8018708 <tcp_receive+0x884>)
 80184f2:	681a      	ldr	r2, [r3, #0]
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184f8:	1ad3      	subs	r3, r2, r3
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	f2c0 8427 	blt.w	8018d4e <tcp_receive+0xeca>
 8018500:	4b81      	ldr	r3, [pc, #516]	@ (8018708 <tcp_receive+0x884>)
 8018502:	681a      	ldr	r2, [r3, #0]
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018508:	6879      	ldr	r1, [r7, #4]
 801850a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801850c:	440b      	add	r3, r1
 801850e:	1ad3      	subs	r3, r2, r3
 8018510:	3301      	adds	r3, #1
 8018512:	2b00      	cmp	r3, #0
 8018514:	f300 841b 	bgt.w	8018d4e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801851c:	4b7a      	ldr	r3, [pc, #488]	@ (8018708 <tcp_receive+0x884>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	429a      	cmp	r2, r3
 8018522:	f040 8298 	bne.w	8018a56 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018526:	4b79      	ldr	r3, [pc, #484]	@ (801870c <tcp_receive+0x888>)
 8018528:	891c      	ldrh	r4, [r3, #8]
 801852a:	4b78      	ldr	r3, [pc, #480]	@ (801870c <tcp_receive+0x888>)
 801852c:	68db      	ldr	r3, [r3, #12]
 801852e:	899b      	ldrh	r3, [r3, #12]
 8018530:	b29b      	uxth	r3, r3
 8018532:	4618      	mov	r0, r3
 8018534:	f7fa fc4a 	bl	8012dcc <lwip_htons>
 8018538:	4603      	mov	r3, r0
 801853a:	b2db      	uxtb	r3, r3
 801853c:	f003 0303 	and.w	r3, r3, #3
 8018540:	2b00      	cmp	r3, #0
 8018542:	d001      	beq.n	8018548 <tcp_receive+0x6c4>
 8018544:	2301      	movs	r3, #1
 8018546:	e000      	b.n	801854a <tcp_receive+0x6c6>
 8018548:	2300      	movs	r3, #0
 801854a:	4423      	add	r3, r4
 801854c:	b29a      	uxth	r2, r3
 801854e:	4b70      	ldr	r3, [pc, #448]	@ (8018710 <tcp_receive+0x88c>)
 8018550:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018556:	4b6e      	ldr	r3, [pc, #440]	@ (8018710 <tcp_receive+0x88c>)
 8018558:	881b      	ldrh	r3, [r3, #0]
 801855a:	429a      	cmp	r2, r3
 801855c:	d274      	bcs.n	8018648 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801855e:	4b6b      	ldr	r3, [pc, #428]	@ (801870c <tcp_receive+0x888>)
 8018560:	68db      	ldr	r3, [r3, #12]
 8018562:	899b      	ldrh	r3, [r3, #12]
 8018564:	b29b      	uxth	r3, r3
 8018566:	4618      	mov	r0, r3
 8018568:	f7fa fc30 	bl	8012dcc <lwip_htons>
 801856c:	4603      	mov	r3, r0
 801856e:	b2db      	uxtb	r3, r3
 8018570:	f003 0301 	and.w	r3, r3, #1
 8018574:	2b00      	cmp	r3, #0
 8018576:	d01e      	beq.n	80185b6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018578:	4b64      	ldr	r3, [pc, #400]	@ (801870c <tcp_receive+0x888>)
 801857a:	68db      	ldr	r3, [r3, #12]
 801857c:	899b      	ldrh	r3, [r3, #12]
 801857e:	b29b      	uxth	r3, r3
 8018580:	b21b      	sxth	r3, r3
 8018582:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018586:	b21c      	sxth	r4, r3
 8018588:	4b60      	ldr	r3, [pc, #384]	@ (801870c <tcp_receive+0x888>)
 801858a:	68db      	ldr	r3, [r3, #12]
 801858c:	899b      	ldrh	r3, [r3, #12]
 801858e:	b29b      	uxth	r3, r3
 8018590:	4618      	mov	r0, r3
 8018592:	f7fa fc1b 	bl	8012dcc <lwip_htons>
 8018596:	4603      	mov	r3, r0
 8018598:	b2db      	uxtb	r3, r3
 801859a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801859e:	b29b      	uxth	r3, r3
 80185a0:	4618      	mov	r0, r3
 80185a2:	f7fa fc13 	bl	8012dcc <lwip_htons>
 80185a6:	4603      	mov	r3, r0
 80185a8:	b21b      	sxth	r3, r3
 80185aa:	4323      	orrs	r3, r4
 80185ac:	b21a      	sxth	r2, r3
 80185ae:	4b57      	ldr	r3, [pc, #348]	@ (801870c <tcp_receive+0x888>)
 80185b0:	68db      	ldr	r3, [r3, #12]
 80185b2:	b292      	uxth	r2, r2
 80185b4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80185ba:	4b54      	ldr	r3, [pc, #336]	@ (801870c <tcp_receive+0x888>)
 80185bc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80185be:	4b53      	ldr	r3, [pc, #332]	@ (801870c <tcp_receive+0x888>)
 80185c0:	68db      	ldr	r3, [r3, #12]
 80185c2:	899b      	ldrh	r3, [r3, #12]
 80185c4:	b29b      	uxth	r3, r3
 80185c6:	4618      	mov	r0, r3
 80185c8:	f7fa fc00 	bl	8012dcc <lwip_htons>
 80185cc:	4603      	mov	r3, r0
 80185ce:	b2db      	uxtb	r3, r3
 80185d0:	f003 0302 	and.w	r3, r3, #2
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d005      	beq.n	80185e4 <tcp_receive+0x760>
            inseg.len -= 1;
 80185d8:	4b4c      	ldr	r3, [pc, #304]	@ (801870c <tcp_receive+0x888>)
 80185da:	891b      	ldrh	r3, [r3, #8]
 80185dc:	3b01      	subs	r3, #1
 80185de:	b29a      	uxth	r2, r3
 80185e0:	4b4a      	ldr	r3, [pc, #296]	@ (801870c <tcp_receive+0x888>)
 80185e2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80185e4:	4b49      	ldr	r3, [pc, #292]	@ (801870c <tcp_receive+0x888>)
 80185e6:	685b      	ldr	r3, [r3, #4]
 80185e8:	4a48      	ldr	r2, [pc, #288]	@ (801870c <tcp_receive+0x888>)
 80185ea:	8912      	ldrh	r2, [r2, #8]
 80185ec:	4611      	mov	r1, r2
 80185ee:	4618      	mov	r0, r3
 80185f0:	f7fb ff24 	bl	801443c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80185f4:	4b45      	ldr	r3, [pc, #276]	@ (801870c <tcp_receive+0x888>)
 80185f6:	891c      	ldrh	r4, [r3, #8]
 80185f8:	4b44      	ldr	r3, [pc, #272]	@ (801870c <tcp_receive+0x888>)
 80185fa:	68db      	ldr	r3, [r3, #12]
 80185fc:	899b      	ldrh	r3, [r3, #12]
 80185fe:	b29b      	uxth	r3, r3
 8018600:	4618      	mov	r0, r3
 8018602:	f7fa fbe3 	bl	8012dcc <lwip_htons>
 8018606:	4603      	mov	r3, r0
 8018608:	b2db      	uxtb	r3, r3
 801860a:	f003 0303 	and.w	r3, r3, #3
 801860e:	2b00      	cmp	r3, #0
 8018610:	d001      	beq.n	8018616 <tcp_receive+0x792>
 8018612:	2301      	movs	r3, #1
 8018614:	e000      	b.n	8018618 <tcp_receive+0x794>
 8018616:	2300      	movs	r3, #0
 8018618:	4423      	add	r3, r4
 801861a:	b29a      	uxth	r2, r3
 801861c:	4b3c      	ldr	r3, [pc, #240]	@ (8018710 <tcp_receive+0x88c>)
 801861e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018620:	4b3b      	ldr	r3, [pc, #236]	@ (8018710 <tcp_receive+0x88c>)
 8018622:	881b      	ldrh	r3, [r3, #0]
 8018624:	461a      	mov	r2, r3
 8018626:	4b38      	ldr	r3, [pc, #224]	@ (8018708 <tcp_receive+0x884>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	441a      	add	r2, r3
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018630:	6879      	ldr	r1, [r7, #4]
 8018632:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018634:	440b      	add	r3, r1
 8018636:	429a      	cmp	r2, r3
 8018638:	d006      	beq.n	8018648 <tcp_receive+0x7c4>
 801863a:	4b36      	ldr	r3, [pc, #216]	@ (8018714 <tcp_receive+0x890>)
 801863c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018640:	4935      	ldr	r1, [pc, #212]	@ (8018718 <tcp_receive+0x894>)
 8018642:	4836      	ldr	r0, [pc, #216]	@ (801871c <tcp_receive+0x898>)
 8018644:	f007 fad2 	bl	801fbec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801864c:	2b00      	cmp	r3, #0
 801864e:	f000 80e6 	beq.w	801881e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018652:	4b2e      	ldr	r3, [pc, #184]	@ (801870c <tcp_receive+0x888>)
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	899b      	ldrh	r3, [r3, #12]
 8018658:	b29b      	uxth	r3, r3
 801865a:	4618      	mov	r0, r3
 801865c:	f7fa fbb6 	bl	8012dcc <lwip_htons>
 8018660:	4603      	mov	r3, r0
 8018662:	b2db      	uxtb	r3, r3
 8018664:	f003 0301 	and.w	r3, r3, #1
 8018668:	2b00      	cmp	r3, #0
 801866a:	d010      	beq.n	801868e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801866c:	e00a      	b.n	8018684 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018672:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018678:	681a      	ldr	r2, [r3, #0]
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801867e:	68f8      	ldr	r0, [r7, #12]
 8018680:	f7fd fc35 	bl	8015eee <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018688:	2b00      	cmp	r3, #0
 801868a:	d1f0      	bne.n	801866e <tcp_receive+0x7ea>
 801868c:	e0c7      	b.n	801881e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018692:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018694:	e051      	b.n	801873a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018698:	68db      	ldr	r3, [r3, #12]
 801869a:	899b      	ldrh	r3, [r3, #12]
 801869c:	b29b      	uxth	r3, r3
 801869e:	4618      	mov	r0, r3
 80186a0:	f7fa fb94 	bl	8012dcc <lwip_htons>
 80186a4:	4603      	mov	r3, r0
 80186a6:	b2db      	uxtb	r3, r3
 80186a8:	f003 0301 	and.w	r3, r3, #1
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d03c      	beq.n	801872a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80186b0:	4b16      	ldr	r3, [pc, #88]	@ (801870c <tcp_receive+0x888>)
 80186b2:	68db      	ldr	r3, [r3, #12]
 80186b4:	899b      	ldrh	r3, [r3, #12]
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7fa fb87 	bl	8012dcc <lwip_htons>
 80186be:	4603      	mov	r3, r0
 80186c0:	b2db      	uxtb	r3, r3
 80186c2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d12f      	bne.n	801872a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80186ca:	4b10      	ldr	r3, [pc, #64]	@ (801870c <tcp_receive+0x888>)
 80186cc:	68db      	ldr	r3, [r3, #12]
 80186ce:	899b      	ldrh	r3, [r3, #12]
 80186d0:	b29c      	uxth	r4, r3
 80186d2:	2001      	movs	r0, #1
 80186d4:	f7fa fb7a 	bl	8012dcc <lwip_htons>
 80186d8:	4603      	mov	r3, r0
 80186da:	461a      	mov	r2, r3
 80186dc:	4b0b      	ldr	r3, [pc, #44]	@ (801870c <tcp_receive+0x888>)
 80186de:	68db      	ldr	r3, [r3, #12]
 80186e0:	4322      	orrs	r2, r4
 80186e2:	b292      	uxth	r2, r2
 80186e4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80186e6:	4b09      	ldr	r3, [pc, #36]	@ (801870c <tcp_receive+0x888>)
 80186e8:	891c      	ldrh	r4, [r3, #8]
 80186ea:	4b08      	ldr	r3, [pc, #32]	@ (801870c <tcp_receive+0x888>)
 80186ec:	68db      	ldr	r3, [r3, #12]
 80186ee:	899b      	ldrh	r3, [r3, #12]
 80186f0:	b29b      	uxth	r3, r3
 80186f2:	4618      	mov	r0, r3
 80186f4:	f7fa fb6a 	bl	8012dcc <lwip_htons>
 80186f8:	4603      	mov	r3, r0
 80186fa:	b2db      	uxtb	r3, r3
 80186fc:	f003 0303 	and.w	r3, r3, #3
 8018700:	2b00      	cmp	r3, #0
 8018702:	d00d      	beq.n	8018720 <tcp_receive+0x89c>
 8018704:	2301      	movs	r3, #1
 8018706:	e00c      	b.n	8018722 <tcp_receive+0x89e>
 8018708:	2002d3e4 	.word	0x2002d3e4
 801870c:	2002d3c4 	.word	0x2002d3c4
 8018710:	2002d3ee 	.word	0x2002d3ee
 8018714:	08022a2c 	.word	0x08022a2c
 8018718:	08022dd4 	.word	0x08022dd4
 801871c:	08022a78 	.word	0x08022a78
 8018720:	2300      	movs	r3, #0
 8018722:	4423      	add	r3, r4
 8018724:	b29a      	uxth	r2, r3
 8018726:	4b98      	ldr	r3, [pc, #608]	@ (8018988 <tcp_receive+0xb04>)
 8018728:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801872a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801872c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801872e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018734:	6938      	ldr	r0, [r7, #16]
 8018736:	f7fd fbda 	bl	8015eee <tcp_seg_free>
            while (next &&
 801873a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801873c:	2b00      	cmp	r3, #0
 801873e:	d00e      	beq.n	801875e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018740:	4b91      	ldr	r3, [pc, #580]	@ (8018988 <tcp_receive+0xb04>)
 8018742:	881b      	ldrh	r3, [r3, #0]
 8018744:	461a      	mov	r2, r3
 8018746:	4b91      	ldr	r3, [pc, #580]	@ (801898c <tcp_receive+0xb08>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	441a      	add	r2, r3
 801874c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801874e:	68db      	ldr	r3, [r3, #12]
 8018750:	685b      	ldr	r3, [r3, #4]
 8018752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018754:	8909      	ldrh	r1, [r1, #8]
 8018756:	440b      	add	r3, r1
 8018758:	1ad3      	subs	r3, r2, r3
            while (next &&
 801875a:	2b00      	cmp	r3, #0
 801875c:	da9b      	bge.n	8018696 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801875e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018760:	2b00      	cmp	r3, #0
 8018762:	d059      	beq.n	8018818 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018764:	4b88      	ldr	r3, [pc, #544]	@ (8018988 <tcp_receive+0xb04>)
 8018766:	881b      	ldrh	r3, [r3, #0]
 8018768:	461a      	mov	r2, r3
 801876a:	4b88      	ldr	r3, [pc, #544]	@ (801898c <tcp_receive+0xb08>)
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	441a      	add	r2, r3
 8018770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018772:	68db      	ldr	r3, [r3, #12]
 8018774:	685b      	ldr	r3, [r3, #4]
 8018776:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018778:	2b00      	cmp	r3, #0
 801877a:	dd4d      	ble.n	8018818 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801877c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801877e:	68db      	ldr	r3, [r3, #12]
 8018780:	685b      	ldr	r3, [r3, #4]
 8018782:	b29a      	uxth	r2, r3
 8018784:	4b81      	ldr	r3, [pc, #516]	@ (801898c <tcp_receive+0xb08>)
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	b29b      	uxth	r3, r3
 801878a:	1ad3      	subs	r3, r2, r3
 801878c:	b29a      	uxth	r2, r3
 801878e:	4b80      	ldr	r3, [pc, #512]	@ (8018990 <tcp_receive+0xb0c>)
 8018790:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018792:	4b7f      	ldr	r3, [pc, #508]	@ (8018990 <tcp_receive+0xb0c>)
 8018794:	68db      	ldr	r3, [r3, #12]
 8018796:	899b      	ldrh	r3, [r3, #12]
 8018798:	b29b      	uxth	r3, r3
 801879a:	4618      	mov	r0, r3
 801879c:	f7fa fb16 	bl	8012dcc <lwip_htons>
 80187a0:	4603      	mov	r3, r0
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	f003 0302 	and.w	r3, r3, #2
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d005      	beq.n	80187b8 <tcp_receive+0x934>
                inseg.len -= 1;
 80187ac:	4b78      	ldr	r3, [pc, #480]	@ (8018990 <tcp_receive+0xb0c>)
 80187ae:	891b      	ldrh	r3, [r3, #8]
 80187b0:	3b01      	subs	r3, #1
 80187b2:	b29a      	uxth	r2, r3
 80187b4:	4b76      	ldr	r3, [pc, #472]	@ (8018990 <tcp_receive+0xb0c>)
 80187b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80187b8:	4b75      	ldr	r3, [pc, #468]	@ (8018990 <tcp_receive+0xb0c>)
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	4a74      	ldr	r2, [pc, #464]	@ (8018990 <tcp_receive+0xb0c>)
 80187be:	8912      	ldrh	r2, [r2, #8]
 80187c0:	4611      	mov	r1, r2
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7fb fe3a 	bl	801443c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80187c8:	4b71      	ldr	r3, [pc, #452]	@ (8018990 <tcp_receive+0xb0c>)
 80187ca:	891c      	ldrh	r4, [r3, #8]
 80187cc:	4b70      	ldr	r3, [pc, #448]	@ (8018990 <tcp_receive+0xb0c>)
 80187ce:	68db      	ldr	r3, [r3, #12]
 80187d0:	899b      	ldrh	r3, [r3, #12]
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7fa faf9 	bl	8012dcc <lwip_htons>
 80187da:	4603      	mov	r3, r0
 80187dc:	b2db      	uxtb	r3, r3
 80187de:	f003 0303 	and.w	r3, r3, #3
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d001      	beq.n	80187ea <tcp_receive+0x966>
 80187e6:	2301      	movs	r3, #1
 80187e8:	e000      	b.n	80187ec <tcp_receive+0x968>
 80187ea:	2300      	movs	r3, #0
 80187ec:	4423      	add	r3, r4
 80187ee:	b29a      	uxth	r2, r3
 80187f0:	4b65      	ldr	r3, [pc, #404]	@ (8018988 <tcp_receive+0xb04>)
 80187f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80187f4:	4b64      	ldr	r3, [pc, #400]	@ (8018988 <tcp_receive+0xb04>)
 80187f6:	881b      	ldrh	r3, [r3, #0]
 80187f8:	461a      	mov	r2, r3
 80187fa:	4b64      	ldr	r3, [pc, #400]	@ (801898c <tcp_receive+0xb08>)
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	441a      	add	r2, r3
 8018800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018802:	68db      	ldr	r3, [r3, #12]
 8018804:	685b      	ldr	r3, [r3, #4]
 8018806:	429a      	cmp	r2, r3
 8018808:	d006      	beq.n	8018818 <tcp_receive+0x994>
 801880a:	4b62      	ldr	r3, [pc, #392]	@ (8018994 <tcp_receive+0xb10>)
 801880c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018810:	4961      	ldr	r1, [pc, #388]	@ (8018998 <tcp_receive+0xb14>)
 8018812:	4862      	ldr	r0, [pc, #392]	@ (801899c <tcp_receive+0xb18>)
 8018814:	f007 f9ea 	bl	801fbec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801881c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801881e:	4b5a      	ldr	r3, [pc, #360]	@ (8018988 <tcp_receive+0xb04>)
 8018820:	881b      	ldrh	r3, [r3, #0]
 8018822:	461a      	mov	r2, r3
 8018824:	4b59      	ldr	r3, [pc, #356]	@ (801898c <tcp_receive+0xb08>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	441a      	add	r2, r3
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018832:	4b55      	ldr	r3, [pc, #340]	@ (8018988 <tcp_receive+0xb04>)
 8018834:	881b      	ldrh	r3, [r3, #0]
 8018836:	429a      	cmp	r2, r3
 8018838:	d206      	bcs.n	8018848 <tcp_receive+0x9c4>
 801883a:	4b56      	ldr	r3, [pc, #344]	@ (8018994 <tcp_receive+0xb10>)
 801883c:	f240 6207 	movw	r2, #1543	@ 0x607
 8018840:	4957      	ldr	r1, [pc, #348]	@ (80189a0 <tcp_receive+0xb1c>)
 8018842:	4856      	ldr	r0, [pc, #344]	@ (801899c <tcp_receive+0xb18>)
 8018844:	f007 f9d2 	bl	801fbec <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801884c:	4b4e      	ldr	r3, [pc, #312]	@ (8018988 <tcp_receive+0xb04>)
 801884e:	881b      	ldrh	r3, [r3, #0]
 8018850:	1ad3      	subs	r3, r2, r3
 8018852:	b29a      	uxth	r2, r3
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018858:	6878      	ldr	r0, [r7, #4]
 801885a:	f7fc fe21 	bl	80154a0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801885e:	4b4c      	ldr	r3, [pc, #304]	@ (8018990 <tcp_receive+0xb0c>)
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	891b      	ldrh	r3, [r3, #8]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d006      	beq.n	8018876 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018868:	4b49      	ldr	r3, [pc, #292]	@ (8018990 <tcp_receive+0xb0c>)
 801886a:	685b      	ldr	r3, [r3, #4]
 801886c:	4a4d      	ldr	r2, [pc, #308]	@ (80189a4 <tcp_receive+0xb20>)
 801886e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018870:	4b47      	ldr	r3, [pc, #284]	@ (8018990 <tcp_receive+0xb0c>)
 8018872:	2200      	movs	r2, #0
 8018874:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018876:	4b46      	ldr	r3, [pc, #280]	@ (8018990 <tcp_receive+0xb0c>)
 8018878:	68db      	ldr	r3, [r3, #12]
 801887a:	899b      	ldrh	r3, [r3, #12]
 801887c:	b29b      	uxth	r3, r3
 801887e:	4618      	mov	r0, r3
 8018880:	f7fa faa4 	bl	8012dcc <lwip_htons>
 8018884:	4603      	mov	r3, r0
 8018886:	b2db      	uxtb	r3, r3
 8018888:	f003 0301 	and.w	r3, r3, #1
 801888c:	2b00      	cmp	r3, #0
 801888e:	f000 80b8 	beq.w	8018a02 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018892:	4b45      	ldr	r3, [pc, #276]	@ (80189a8 <tcp_receive+0xb24>)
 8018894:	781b      	ldrb	r3, [r3, #0]
 8018896:	f043 0320 	orr.w	r3, r3, #32
 801889a:	b2da      	uxtb	r2, r3
 801889c:	4b42      	ldr	r3, [pc, #264]	@ (80189a8 <tcp_receive+0xb24>)
 801889e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80188a0:	e0af      	b.n	8018a02 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80188a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80188ac:	68db      	ldr	r3, [r3, #12]
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	4a36      	ldr	r2, [pc, #216]	@ (801898c <tcp_receive+0xb08>)
 80188b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	891b      	ldrh	r3, [r3, #8]
 80188b8:	461c      	mov	r4, r3
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	68db      	ldr	r3, [r3, #12]
 80188be:	899b      	ldrh	r3, [r3, #12]
 80188c0:	b29b      	uxth	r3, r3
 80188c2:	4618      	mov	r0, r3
 80188c4:	f7fa fa82 	bl	8012dcc <lwip_htons>
 80188c8:	4603      	mov	r3, r0
 80188ca:	b2db      	uxtb	r3, r3
 80188cc:	f003 0303 	and.w	r3, r3, #3
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d001      	beq.n	80188d8 <tcp_receive+0xa54>
 80188d4:	2301      	movs	r3, #1
 80188d6:	e000      	b.n	80188da <tcp_receive+0xa56>
 80188d8:	2300      	movs	r3, #0
 80188da:	191a      	adds	r2, r3, r4
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188e0:	441a      	add	r2, r3
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80188ea:	461c      	mov	r4, r3
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	891b      	ldrh	r3, [r3, #8]
 80188f0:	461d      	mov	r5, r3
 80188f2:	68bb      	ldr	r3, [r7, #8]
 80188f4:	68db      	ldr	r3, [r3, #12]
 80188f6:	899b      	ldrh	r3, [r3, #12]
 80188f8:	b29b      	uxth	r3, r3
 80188fa:	4618      	mov	r0, r3
 80188fc:	f7fa fa66 	bl	8012dcc <lwip_htons>
 8018900:	4603      	mov	r3, r0
 8018902:	b2db      	uxtb	r3, r3
 8018904:	f003 0303 	and.w	r3, r3, #3
 8018908:	2b00      	cmp	r3, #0
 801890a:	d001      	beq.n	8018910 <tcp_receive+0xa8c>
 801890c:	2301      	movs	r3, #1
 801890e:	e000      	b.n	8018912 <tcp_receive+0xa8e>
 8018910:	2300      	movs	r3, #0
 8018912:	442b      	add	r3, r5
 8018914:	429c      	cmp	r4, r3
 8018916:	d206      	bcs.n	8018926 <tcp_receive+0xaa2>
 8018918:	4b1e      	ldr	r3, [pc, #120]	@ (8018994 <tcp_receive+0xb10>)
 801891a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801891e:	4923      	ldr	r1, [pc, #140]	@ (80189ac <tcp_receive+0xb28>)
 8018920:	481e      	ldr	r0, [pc, #120]	@ (801899c <tcp_receive+0xb18>)
 8018922:	f007 f963 	bl	801fbec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	891b      	ldrh	r3, [r3, #8]
 801892a:	461c      	mov	r4, r3
 801892c:	68bb      	ldr	r3, [r7, #8]
 801892e:	68db      	ldr	r3, [r3, #12]
 8018930:	899b      	ldrh	r3, [r3, #12]
 8018932:	b29b      	uxth	r3, r3
 8018934:	4618      	mov	r0, r3
 8018936:	f7fa fa49 	bl	8012dcc <lwip_htons>
 801893a:	4603      	mov	r3, r0
 801893c:	b2db      	uxtb	r3, r3
 801893e:	f003 0303 	and.w	r3, r3, #3
 8018942:	2b00      	cmp	r3, #0
 8018944:	d001      	beq.n	801894a <tcp_receive+0xac6>
 8018946:	2301      	movs	r3, #1
 8018948:	e000      	b.n	801894c <tcp_receive+0xac8>
 801894a:	2300      	movs	r3, #0
 801894c:	1919      	adds	r1, r3, r4
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018952:	b28b      	uxth	r3, r1
 8018954:	1ad3      	subs	r3, r2, r3
 8018956:	b29a      	uxth	r2, r3
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f7fc fd9f 	bl	80154a0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018962:	68bb      	ldr	r3, [r7, #8]
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	891b      	ldrh	r3, [r3, #8]
 8018968:	2b00      	cmp	r3, #0
 801896a:	d028      	beq.n	80189be <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801896c:	4b0d      	ldr	r3, [pc, #52]	@ (80189a4 <tcp_receive+0xb20>)
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d01d      	beq.n	80189b0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018974:	4b0b      	ldr	r3, [pc, #44]	@ (80189a4 <tcp_receive+0xb20>)
 8018976:	681a      	ldr	r2, [r3, #0]
 8018978:	68bb      	ldr	r3, [r7, #8]
 801897a:	685b      	ldr	r3, [r3, #4]
 801897c:	4619      	mov	r1, r3
 801897e:	4610      	mov	r0, r2
 8018980:	f7fb ffb0 	bl	80148e4 <pbuf_cat>
 8018984:	e018      	b.n	80189b8 <tcp_receive+0xb34>
 8018986:	bf00      	nop
 8018988:	2002d3ee 	.word	0x2002d3ee
 801898c:	2002d3e4 	.word	0x2002d3e4
 8018990:	2002d3c4 	.word	0x2002d3c4
 8018994:	08022a2c 	.word	0x08022a2c
 8018998:	08022e0c 	.word	0x08022e0c
 801899c:	08022a78 	.word	0x08022a78
 80189a0:	08022e48 	.word	0x08022e48
 80189a4:	2002d3f4 	.word	0x2002d3f4
 80189a8:	2002d3f1 	.word	0x2002d3f1
 80189ac:	08022e68 	.word	0x08022e68
            } else {
              recv_data = cseg->p;
 80189b0:	68bb      	ldr	r3, [r7, #8]
 80189b2:	685b      	ldr	r3, [r3, #4]
 80189b4:	4a70      	ldr	r2, [pc, #448]	@ (8018b78 <tcp_receive+0xcf4>)
 80189b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	2200      	movs	r2, #0
 80189bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80189be:	68bb      	ldr	r3, [r7, #8]
 80189c0:	68db      	ldr	r3, [r3, #12]
 80189c2:	899b      	ldrh	r3, [r3, #12]
 80189c4:	b29b      	uxth	r3, r3
 80189c6:	4618      	mov	r0, r3
 80189c8:	f7fa fa00 	bl	8012dcc <lwip_htons>
 80189cc:	4603      	mov	r3, r0
 80189ce:	b2db      	uxtb	r3, r3
 80189d0:	f003 0301 	and.w	r3, r3, #1
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d00d      	beq.n	80189f4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80189d8:	4b68      	ldr	r3, [pc, #416]	@ (8018b7c <tcp_receive+0xcf8>)
 80189da:	781b      	ldrb	r3, [r3, #0]
 80189dc:	f043 0320 	orr.w	r3, r3, #32
 80189e0:	b2da      	uxtb	r2, r3
 80189e2:	4b66      	ldr	r3, [pc, #408]	@ (8018b7c <tcp_receive+0xcf8>)
 80189e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	7d1b      	ldrb	r3, [r3, #20]
 80189ea:	2b04      	cmp	r3, #4
 80189ec:	d102      	bne.n	80189f4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2207      	movs	r2, #7
 80189f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	681a      	ldr	r2, [r3, #0]
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80189fc:	68b8      	ldr	r0, [r7, #8]
 80189fe:	f7fd fa76 	bl	8015eee <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d008      	beq.n	8018a1c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a0e:	68db      	ldr	r3, [r3, #12]
 8018a10:	685a      	ldr	r2, [r3, #4]
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018a16:	429a      	cmp	r2, r3
 8018a18:	f43f af43 	beq.w	80188a2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	8b5b      	ldrh	r3, [r3, #26]
 8018a20:	f003 0301 	and.w	r3, r3, #1
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d00e      	beq.n	8018a46 <tcp_receive+0xbc2>
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	8b5b      	ldrh	r3, [r3, #26]
 8018a2c:	f023 0301 	bic.w	r3, r3, #1
 8018a30:	b29a      	uxth	r2, r3
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	835a      	strh	r2, [r3, #26]
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	8b5b      	ldrh	r3, [r3, #26]
 8018a3a:	f043 0302 	orr.w	r3, r3, #2
 8018a3e:	b29a      	uxth	r2, r3
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018a44:	e187      	b.n	8018d56 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	8b5b      	ldrh	r3, [r3, #26]
 8018a4a:	f043 0301 	orr.w	r3, r3, #1
 8018a4e:	b29a      	uxth	r2, r3
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018a54:	e17f      	b.n	8018d56 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d106      	bne.n	8018a6c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018a5e:	4848      	ldr	r0, [pc, #288]	@ (8018b80 <tcp_receive+0xcfc>)
 8018a60:	f7fd fa5e 	bl	8015f20 <tcp_seg_copy>
 8018a64:	4602      	mov	r2, r0
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	675a      	str	r2, [r3, #116]	@ 0x74
 8018a6a:	e16c      	b.n	8018d46 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018a76:	e156      	b.n	8018d26 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8018a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	685a      	ldr	r2, [r3, #4]
 8018a7e:	4b41      	ldr	r3, [pc, #260]	@ (8018b84 <tcp_receive+0xd00>)
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	429a      	cmp	r2, r3
 8018a84:	d11d      	bne.n	8018ac2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018a86:	4b3e      	ldr	r3, [pc, #248]	@ (8018b80 <tcp_receive+0xcfc>)
 8018a88:	891a      	ldrh	r2, [r3, #8]
 8018a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a8c:	891b      	ldrh	r3, [r3, #8]
 8018a8e:	429a      	cmp	r2, r3
 8018a90:	f240 814e 	bls.w	8018d30 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018a94:	483a      	ldr	r0, [pc, #232]	@ (8018b80 <tcp_receive+0xcfc>)
 8018a96:	f7fd fa43 	bl	8015f20 <tcp_seg_copy>
 8018a9a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018a9c:	697b      	ldr	r3, [r7, #20]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	f000 8148 	beq.w	8018d34 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8018aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d003      	beq.n	8018ab2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8018aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018aac:	697a      	ldr	r2, [r7, #20]
 8018aae:	601a      	str	r2, [r3, #0]
 8018ab0:	e002      	b.n	8018ab8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	697a      	ldr	r2, [r7, #20]
 8018ab6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018ab8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018aba:	6978      	ldr	r0, [r7, #20]
 8018abc:	f7ff f8de 	bl	8017c7c <tcp_oos_insert_segment>
                }
                break;
 8018ac0:	e138      	b.n	8018d34 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d117      	bne.n	8018af8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8018b84 <tcp_receive+0xd00>)
 8018aca:	681a      	ldr	r2, [r3, #0]
 8018acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ace:	68db      	ldr	r3, [r3, #12]
 8018ad0:	685b      	ldr	r3, [r3, #4]
 8018ad2:	1ad3      	subs	r3, r2, r3
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	da57      	bge.n	8018b88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018ad8:	4829      	ldr	r0, [pc, #164]	@ (8018b80 <tcp_receive+0xcfc>)
 8018ada:	f7fd fa21 	bl	8015f20 <tcp_seg_copy>
 8018ade:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018ae0:	69bb      	ldr	r3, [r7, #24]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	f000 8128 	beq.w	8018d38 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	69ba      	ldr	r2, [r7, #24]
 8018aec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018aee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018af0:	69b8      	ldr	r0, [r7, #24]
 8018af2:	f7ff f8c3 	bl	8017c7c <tcp_oos_insert_segment>
                  }
                  break;
 8018af6:	e11f      	b.n	8018d38 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018af8:	4b22      	ldr	r3, [pc, #136]	@ (8018b84 <tcp_receive+0xd00>)
 8018afa:	681a      	ldr	r2, [r3, #0]
 8018afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018afe:	68db      	ldr	r3, [r3, #12]
 8018b00:	685b      	ldr	r3, [r3, #4]
 8018b02:	1ad3      	subs	r3, r2, r3
 8018b04:	3b01      	subs	r3, #1
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	db3e      	blt.n	8018b88 <tcp_receive+0xd04>
 8018b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8018b84 <tcp_receive+0xd00>)
 8018b0c:	681a      	ldr	r2, [r3, #0]
 8018b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b10:	68db      	ldr	r3, [r3, #12]
 8018b12:	685b      	ldr	r3, [r3, #4]
 8018b14:	1ad3      	subs	r3, r2, r3
 8018b16:	3301      	adds	r3, #1
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	dc35      	bgt.n	8018b88 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018b1c:	4818      	ldr	r0, [pc, #96]	@ (8018b80 <tcp_receive+0xcfc>)
 8018b1e:	f7fd f9ff 	bl	8015f20 <tcp_seg_copy>
 8018b22:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018b24:	69fb      	ldr	r3, [r7, #28]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	f000 8108 	beq.w	8018d3c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b2e:	68db      	ldr	r3, [r3, #12]
 8018b30:	685b      	ldr	r3, [r3, #4]
 8018b32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018b34:	8912      	ldrh	r2, [r2, #8]
 8018b36:	441a      	add	r2, r3
 8018b38:	4b12      	ldr	r3, [pc, #72]	@ (8018b84 <tcp_receive+0xd00>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	1ad3      	subs	r3, r2, r3
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	dd12      	ble.n	8018b68 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018b42:	4b10      	ldr	r3, [pc, #64]	@ (8018b84 <tcp_receive+0xd00>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	b29a      	uxth	r2, r3
 8018b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b4a:	68db      	ldr	r3, [r3, #12]
 8018b4c:	685b      	ldr	r3, [r3, #4]
 8018b4e:	b29b      	uxth	r3, r3
 8018b50:	1ad3      	subs	r3, r2, r3
 8018b52:	b29a      	uxth	r2, r3
 8018b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b56:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b5a:	685a      	ldr	r2, [r3, #4]
 8018b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b5e:	891b      	ldrh	r3, [r3, #8]
 8018b60:	4619      	mov	r1, r3
 8018b62:	4610      	mov	r0, r2
 8018b64:	f7fb fc6a 	bl	801443c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b6a:	69fa      	ldr	r2, [r7, #28]
 8018b6c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018b6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018b70:	69f8      	ldr	r0, [r7, #28]
 8018b72:	f7ff f883 	bl	8017c7c <tcp_oos_insert_segment>
                  }
                  break;
 8018b76:	e0e1      	b.n	8018d3c <tcp_receive+0xeb8>
 8018b78:	2002d3f4 	.word	0x2002d3f4
 8018b7c:	2002d3f1 	.word	0x2002d3f1
 8018b80:	2002d3c4 	.word	0x2002d3c4
 8018b84:	2002d3e4 	.word	0x2002d3e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b8a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	f040 80c5 	bne.w	8018d20 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018b96:	4b7f      	ldr	r3, [pc, #508]	@ (8018d94 <tcp_receive+0xf10>)
 8018b98:	681a      	ldr	r2, [r3, #0]
 8018b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b9c:	68db      	ldr	r3, [r3, #12]
 8018b9e:	685b      	ldr	r3, [r3, #4]
 8018ba0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	f340 80bc 	ble.w	8018d20 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018baa:	68db      	ldr	r3, [r3, #12]
 8018bac:	899b      	ldrh	r3, [r3, #12]
 8018bae:	b29b      	uxth	r3, r3
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7fa f90b 	bl	8012dcc <lwip_htons>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	b2db      	uxtb	r3, r3
 8018bba:	f003 0301 	and.w	r3, r3, #1
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	f040 80be 	bne.w	8018d40 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018bc4:	4874      	ldr	r0, [pc, #464]	@ (8018d98 <tcp_receive+0xf14>)
 8018bc6:	f7fd f9ab 	bl	8015f20 <tcp_seg_copy>
 8018bca:	4602      	mov	r2, r0
 8018bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	f000 80b5 	beq.w	8018d44 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	685b      	ldr	r3, [r3, #4]
 8018be0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018be2:	8912      	ldrh	r2, [r2, #8]
 8018be4:	441a      	add	r2, r3
 8018be6:	4b6b      	ldr	r3, [pc, #428]	@ (8018d94 <tcp_receive+0xf10>)
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	1ad3      	subs	r3, r2, r3
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	dd12      	ble.n	8018c16 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018bf0:	4b68      	ldr	r3, [pc, #416]	@ (8018d94 <tcp_receive+0xf10>)
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	b29a      	uxth	r2, r3
 8018bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bf8:	68db      	ldr	r3, [r3, #12]
 8018bfa:	685b      	ldr	r3, [r3, #4]
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	1ad3      	subs	r3, r2, r3
 8018c00:	b29a      	uxth	r2, r3
 8018c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c04:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c08:	685a      	ldr	r2, [r3, #4]
 8018c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c0c:	891b      	ldrh	r3, [r3, #8]
 8018c0e:	4619      	mov	r1, r3
 8018c10:	4610      	mov	r0, r2
 8018c12:	f7fb fc13 	bl	801443c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018c16:	4b61      	ldr	r3, [pc, #388]	@ (8018d9c <tcp_receive+0xf18>)
 8018c18:	881b      	ldrh	r3, [r3, #0]
 8018c1a:	461a      	mov	r2, r3
 8018c1c:	4b5d      	ldr	r3, [pc, #372]	@ (8018d94 <tcp_receive+0xf10>)
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	441a      	add	r2, r3
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c26:	6879      	ldr	r1, [r7, #4]
 8018c28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018c2a:	440b      	add	r3, r1
 8018c2c:	1ad3      	subs	r3, r2, r3
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	f340 8088 	ble.w	8018d44 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	68db      	ldr	r3, [r3, #12]
 8018c3a:	899b      	ldrh	r3, [r3, #12]
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f7fa f8c4 	bl	8012dcc <lwip_htons>
 8018c44:	4603      	mov	r3, r0
 8018c46:	b2db      	uxtb	r3, r3
 8018c48:	f003 0301 	and.w	r3, r3, #1
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d021      	beq.n	8018c94 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	68db      	ldr	r3, [r3, #12]
 8018c56:	899b      	ldrh	r3, [r3, #12]
 8018c58:	b29b      	uxth	r3, r3
 8018c5a:	b21b      	sxth	r3, r3
 8018c5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018c60:	b21c      	sxth	r4, r3
 8018c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	68db      	ldr	r3, [r3, #12]
 8018c68:	899b      	ldrh	r3, [r3, #12]
 8018c6a:	b29b      	uxth	r3, r3
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7fa f8ad 	bl	8012dcc <lwip_htons>
 8018c72:	4603      	mov	r3, r0
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018c7a:	b29b      	uxth	r3, r3
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	f7fa f8a5 	bl	8012dcc <lwip_htons>
 8018c82:	4603      	mov	r3, r0
 8018c84:	b21b      	sxth	r3, r3
 8018c86:	4323      	orrs	r3, r4
 8018c88:	b21a      	sxth	r2, r3
 8018c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	68db      	ldr	r3, [r3, #12]
 8018c90:	b292      	uxth	r2, r2
 8018c92:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c98:	b29a      	uxth	r2, r3
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018c9e:	4413      	add	r3, r2
 8018ca0:	b299      	uxth	r1, r3
 8018ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8018d94 <tcp_receive+0xf10>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	b29a      	uxth	r2, r3
 8018ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	1a8a      	subs	r2, r1, r2
 8018cae:	b292      	uxth	r2, r2
 8018cb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	685a      	ldr	r2, [r3, #4]
 8018cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	891b      	ldrh	r3, [r3, #8]
 8018cbe:	4619      	mov	r1, r3
 8018cc0:	4610      	mov	r0, r2
 8018cc2:	f7fb fbbb 	bl	801443c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	891c      	ldrh	r4, [r3, #8]
 8018ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	68db      	ldr	r3, [r3, #12]
 8018cd2:	899b      	ldrh	r3, [r3, #12]
 8018cd4:	b29b      	uxth	r3, r3
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7fa f878 	bl	8012dcc <lwip_htons>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	f003 0303 	and.w	r3, r3, #3
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d001      	beq.n	8018cec <tcp_receive+0xe68>
 8018ce8:	2301      	movs	r3, #1
 8018cea:	e000      	b.n	8018cee <tcp_receive+0xe6a>
 8018cec:	2300      	movs	r3, #0
 8018cee:	4423      	add	r3, r4
 8018cf0:	b29a      	uxth	r2, r3
 8018cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8018d9c <tcp_receive+0xf18>)
 8018cf4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018cf6:	4b29      	ldr	r3, [pc, #164]	@ (8018d9c <tcp_receive+0xf18>)
 8018cf8:	881b      	ldrh	r3, [r3, #0]
 8018cfa:	461a      	mov	r2, r3
 8018cfc:	4b25      	ldr	r3, [pc, #148]	@ (8018d94 <tcp_receive+0xf10>)
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	441a      	add	r2, r3
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d06:	6879      	ldr	r1, [r7, #4]
 8018d08:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018d0a:	440b      	add	r3, r1
 8018d0c:	429a      	cmp	r2, r3
 8018d0e:	d019      	beq.n	8018d44 <tcp_receive+0xec0>
 8018d10:	4b23      	ldr	r3, [pc, #140]	@ (8018da0 <tcp_receive+0xf1c>)
 8018d12:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8018d16:	4923      	ldr	r1, [pc, #140]	@ (8018da4 <tcp_receive+0xf20>)
 8018d18:	4823      	ldr	r0, [pc, #140]	@ (8018da8 <tcp_receive+0xf24>)
 8018d1a:	f006 ff67 	bl	801fbec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018d1e:	e011      	b.n	8018d44 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	f47f aea5 	bne.w	8018a78 <tcp_receive+0xbf4>
 8018d2e:	e00a      	b.n	8018d46 <tcp_receive+0xec2>
                break;
 8018d30:	bf00      	nop
 8018d32:	e008      	b.n	8018d46 <tcp_receive+0xec2>
                break;
 8018d34:	bf00      	nop
 8018d36:	e006      	b.n	8018d46 <tcp_receive+0xec2>
                  break;
 8018d38:	bf00      	nop
 8018d3a:	e004      	b.n	8018d46 <tcp_receive+0xec2>
                  break;
 8018d3c:	bf00      	nop
 8018d3e:	e002      	b.n	8018d46 <tcp_receive+0xec2>
                  break;
 8018d40:	bf00      	nop
 8018d42:	e000      	b.n	8018d46 <tcp_receive+0xec2>
                break;
 8018d44:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	f001 fed6 	bl	801aaf8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018d4c:	e003      	b.n	8018d56 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f001 fed2 	bl	801aaf8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018d54:	e01a      	b.n	8018d8c <tcp_receive+0xf08>
 8018d56:	e019      	b.n	8018d8c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018d58:	4b0e      	ldr	r3, [pc, #56]	@ (8018d94 <tcp_receive+0xf10>)
 8018d5a:	681a      	ldr	r2, [r3, #0]
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d60:	1ad3      	subs	r3, r2, r3
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	db0a      	blt.n	8018d7c <tcp_receive+0xef8>
 8018d66:	4b0b      	ldr	r3, [pc, #44]	@ (8018d94 <tcp_receive+0xf10>)
 8018d68:	681a      	ldr	r2, [r3, #0]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d6e:	6879      	ldr	r1, [r7, #4]
 8018d70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018d72:	440b      	add	r3, r1
 8018d74:	1ad3      	subs	r3, r2, r3
 8018d76:	3301      	adds	r3, #1
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	dd07      	ble.n	8018d8c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	8b5b      	ldrh	r3, [r3, #26]
 8018d80:	f043 0302 	orr.w	r3, r3, #2
 8018d84:	b29a      	uxth	r2, r3
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018d8a:	e7ff      	b.n	8018d8c <tcp_receive+0xf08>
 8018d8c:	bf00      	nop
 8018d8e:	3750      	adds	r7, #80	@ 0x50
 8018d90:	46bd      	mov	sp, r7
 8018d92:	bdb0      	pop	{r4, r5, r7, pc}
 8018d94:	2002d3e4 	.word	0x2002d3e4
 8018d98:	2002d3c4 	.word	0x2002d3c4
 8018d9c:	2002d3ee 	.word	0x2002d3ee
 8018da0:	08022a2c 	.word	0x08022a2c
 8018da4:	08022dd4 	.word	0x08022dd4
 8018da8:	08022a78 	.word	0x08022a78

08018dac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018dac:	b480      	push	{r7}
 8018dae:	b083      	sub	sp, #12
 8018db0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018db2:	4b15      	ldr	r3, [pc, #84]	@ (8018e08 <tcp_get_next_optbyte+0x5c>)
 8018db4:	881b      	ldrh	r3, [r3, #0]
 8018db6:	1c5a      	adds	r2, r3, #1
 8018db8:	b291      	uxth	r1, r2
 8018dba:	4a13      	ldr	r2, [pc, #76]	@ (8018e08 <tcp_get_next_optbyte+0x5c>)
 8018dbc:	8011      	strh	r1, [r2, #0]
 8018dbe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018dc0:	4b12      	ldr	r3, [pc, #72]	@ (8018e0c <tcp_get_next_optbyte+0x60>)
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d004      	beq.n	8018dd2 <tcp_get_next_optbyte+0x26>
 8018dc8:	4b11      	ldr	r3, [pc, #68]	@ (8018e10 <tcp_get_next_optbyte+0x64>)
 8018dca:	881b      	ldrh	r3, [r3, #0]
 8018dcc:	88fa      	ldrh	r2, [r7, #6]
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d208      	bcs.n	8018de4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018dd2:	4b10      	ldr	r3, [pc, #64]	@ (8018e14 <tcp_get_next_optbyte+0x68>)
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	3314      	adds	r3, #20
 8018dd8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018dda:	88fb      	ldrh	r3, [r7, #6]
 8018ddc:	683a      	ldr	r2, [r7, #0]
 8018dde:	4413      	add	r3, r2
 8018de0:	781b      	ldrb	r3, [r3, #0]
 8018de2:	e00b      	b.n	8018dfc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018de4:	88fb      	ldrh	r3, [r7, #6]
 8018de6:	b2da      	uxtb	r2, r3
 8018de8:	4b09      	ldr	r3, [pc, #36]	@ (8018e10 <tcp_get_next_optbyte+0x64>)
 8018dea:	881b      	ldrh	r3, [r3, #0]
 8018dec:	b2db      	uxtb	r3, r3
 8018dee:	1ad3      	subs	r3, r2, r3
 8018df0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018df2:	4b06      	ldr	r3, [pc, #24]	@ (8018e0c <tcp_get_next_optbyte+0x60>)
 8018df4:	681a      	ldr	r2, [r3, #0]
 8018df6:	797b      	ldrb	r3, [r7, #5]
 8018df8:	4413      	add	r3, r2
 8018dfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018dfc:	4618      	mov	r0, r3
 8018dfe:	370c      	adds	r7, #12
 8018e00:	46bd      	mov	sp, r7
 8018e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e06:	4770      	bx	lr
 8018e08:	2002d3e0 	.word	0x2002d3e0
 8018e0c:	2002d3dc 	.word	0x2002d3dc
 8018e10:	2002d3da 	.word	0x2002d3da
 8018e14:	2002d3d4 	.word	0x2002d3d4

08018e18 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b084      	sub	sp, #16
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d106      	bne.n	8018e34 <tcp_parseopt+0x1c>
 8018e26:	4b32      	ldr	r3, [pc, #200]	@ (8018ef0 <tcp_parseopt+0xd8>)
 8018e28:	f240 727d 	movw	r2, #1917	@ 0x77d
 8018e2c:	4931      	ldr	r1, [pc, #196]	@ (8018ef4 <tcp_parseopt+0xdc>)
 8018e2e:	4832      	ldr	r0, [pc, #200]	@ (8018ef8 <tcp_parseopt+0xe0>)
 8018e30:	f006 fedc 	bl	801fbec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018e34:	4b31      	ldr	r3, [pc, #196]	@ (8018efc <tcp_parseopt+0xe4>)
 8018e36:	881b      	ldrh	r3, [r3, #0]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d056      	beq.n	8018eea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018e3c:	4b30      	ldr	r3, [pc, #192]	@ (8018f00 <tcp_parseopt+0xe8>)
 8018e3e:	2200      	movs	r2, #0
 8018e40:	801a      	strh	r2, [r3, #0]
 8018e42:	e046      	b.n	8018ed2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018e44:	f7ff ffb2 	bl	8018dac <tcp_get_next_optbyte>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018e4c:	7bfb      	ldrb	r3, [r7, #15]
 8018e4e:	2b02      	cmp	r3, #2
 8018e50:	d006      	beq.n	8018e60 <tcp_parseopt+0x48>
 8018e52:	2b02      	cmp	r3, #2
 8018e54:	dc2a      	bgt.n	8018eac <tcp_parseopt+0x94>
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d042      	beq.n	8018ee0 <tcp_parseopt+0xc8>
 8018e5a:	2b01      	cmp	r3, #1
 8018e5c:	d038      	beq.n	8018ed0 <tcp_parseopt+0xb8>
 8018e5e:	e025      	b.n	8018eac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018e60:	f7ff ffa4 	bl	8018dac <tcp_get_next_optbyte>
 8018e64:	4603      	mov	r3, r0
 8018e66:	2b04      	cmp	r3, #4
 8018e68:	d13c      	bne.n	8018ee4 <tcp_parseopt+0xcc>
 8018e6a:	4b25      	ldr	r3, [pc, #148]	@ (8018f00 <tcp_parseopt+0xe8>)
 8018e6c:	881b      	ldrh	r3, [r3, #0]
 8018e6e:	3301      	adds	r3, #1
 8018e70:	4a22      	ldr	r2, [pc, #136]	@ (8018efc <tcp_parseopt+0xe4>)
 8018e72:	8812      	ldrh	r2, [r2, #0]
 8018e74:	4293      	cmp	r3, r2
 8018e76:	da35      	bge.n	8018ee4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018e78:	f7ff ff98 	bl	8018dac <tcp_get_next_optbyte>
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	021b      	lsls	r3, r3, #8
 8018e80:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018e82:	f7ff ff93 	bl	8018dac <tcp_get_next_optbyte>
 8018e86:	4603      	mov	r3, r0
 8018e88:	461a      	mov	r2, r3
 8018e8a:	89bb      	ldrh	r3, [r7, #12]
 8018e8c:	4313      	orrs	r3, r2
 8018e8e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018e90:	89bb      	ldrh	r3, [r7, #12]
 8018e92:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8018e96:	d804      	bhi.n	8018ea2 <tcp_parseopt+0x8a>
 8018e98:	89bb      	ldrh	r3, [r7, #12]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d001      	beq.n	8018ea2 <tcp_parseopt+0x8a>
 8018e9e:	89ba      	ldrh	r2, [r7, #12]
 8018ea0:	e001      	b.n	8018ea6 <tcp_parseopt+0x8e>
 8018ea2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8018eaa:	e012      	b.n	8018ed2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018eac:	f7ff ff7e 	bl	8018dac <tcp_get_next_optbyte>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018eb4:	7afb      	ldrb	r3, [r7, #11]
 8018eb6:	2b01      	cmp	r3, #1
 8018eb8:	d916      	bls.n	8018ee8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018eba:	7afb      	ldrb	r3, [r7, #11]
 8018ebc:	b29a      	uxth	r2, r3
 8018ebe:	4b10      	ldr	r3, [pc, #64]	@ (8018f00 <tcp_parseopt+0xe8>)
 8018ec0:	881b      	ldrh	r3, [r3, #0]
 8018ec2:	4413      	add	r3, r2
 8018ec4:	b29b      	uxth	r3, r3
 8018ec6:	3b02      	subs	r3, #2
 8018ec8:	b29a      	uxth	r2, r3
 8018eca:	4b0d      	ldr	r3, [pc, #52]	@ (8018f00 <tcp_parseopt+0xe8>)
 8018ecc:	801a      	strh	r2, [r3, #0]
 8018ece:	e000      	b.n	8018ed2 <tcp_parseopt+0xba>
          break;
 8018ed0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8018f00 <tcp_parseopt+0xe8>)
 8018ed4:	881a      	ldrh	r2, [r3, #0]
 8018ed6:	4b09      	ldr	r3, [pc, #36]	@ (8018efc <tcp_parseopt+0xe4>)
 8018ed8:	881b      	ldrh	r3, [r3, #0]
 8018eda:	429a      	cmp	r2, r3
 8018edc:	d3b2      	bcc.n	8018e44 <tcp_parseopt+0x2c>
 8018ede:	e004      	b.n	8018eea <tcp_parseopt+0xd2>
          return;
 8018ee0:	bf00      	nop
 8018ee2:	e002      	b.n	8018eea <tcp_parseopt+0xd2>
            return;
 8018ee4:	bf00      	nop
 8018ee6:	e000      	b.n	8018eea <tcp_parseopt+0xd2>
            return;
 8018ee8:	bf00      	nop
      }
    }
  }
}
 8018eea:	3710      	adds	r7, #16
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}
 8018ef0:	08022a2c 	.word	0x08022a2c
 8018ef4:	08022e90 	.word	0x08022e90
 8018ef8:	08022a78 	.word	0x08022a78
 8018efc:	2002d3d8 	.word	0x2002d3d8
 8018f00:	2002d3e0 	.word	0x2002d3e0

08018f04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018f04:	b480      	push	{r7}
 8018f06:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018f08:	4b05      	ldr	r3, [pc, #20]	@ (8018f20 <tcp_trigger_input_pcb_close+0x1c>)
 8018f0a:	781b      	ldrb	r3, [r3, #0]
 8018f0c:	f043 0310 	orr.w	r3, r3, #16
 8018f10:	b2da      	uxtb	r2, r3
 8018f12:	4b03      	ldr	r3, [pc, #12]	@ (8018f20 <tcp_trigger_input_pcb_close+0x1c>)
 8018f14:	701a      	strb	r2, [r3, #0]
}
 8018f16:	bf00      	nop
 8018f18:	46bd      	mov	sp, r7
 8018f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1e:	4770      	bx	lr
 8018f20:	2002d3f1 	.word	0x2002d3f1

08018f24 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b084      	sub	sp, #16
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	60f8      	str	r0, [r7, #12]
 8018f2c:	60b9      	str	r1, [r7, #8]
 8018f2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d00a      	beq.n	8018f4c <tcp_route+0x28>
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	7a1b      	ldrb	r3, [r3, #8]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d006      	beq.n	8018f4c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	7a1b      	ldrb	r3, [r3, #8]
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7fb f872 	bl	801402c <netif_get_by_index>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	e003      	b.n	8018f54 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	f003 ff4d 	bl	801cdec <ip4_route>
 8018f52:	4603      	mov	r3, r0
  }
}
 8018f54:	4618      	mov	r0, r3
 8018f56:	3710      	adds	r7, #16
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bd80      	pop	{r7, pc}

08018f5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018f5c:	b590      	push	{r4, r7, lr}
 8018f5e:	b087      	sub	sp, #28
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	60f8      	str	r0, [r7, #12]
 8018f64:	60b9      	str	r1, [r7, #8]
 8018f66:	603b      	str	r3, [r7, #0]
 8018f68:	4613      	mov	r3, r2
 8018f6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d105      	bne.n	8018f7e <tcp_create_segment+0x22>
 8018f72:	4b47      	ldr	r3, [pc, #284]	@ (8019090 <tcp_create_segment+0x134>)
 8018f74:	22a3      	movs	r2, #163	@ 0xa3
 8018f76:	4947      	ldr	r1, [pc, #284]	@ (8019094 <tcp_create_segment+0x138>)
 8018f78:	4847      	ldr	r0, [pc, #284]	@ (8019098 <tcp_create_segment+0x13c>)
 8018f7a:	f006 fe37 	bl	801fbec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018f7e:	68bb      	ldr	r3, [r7, #8]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d105      	bne.n	8018f90 <tcp_create_segment+0x34>
 8018f84:	4b42      	ldr	r3, [pc, #264]	@ (8019090 <tcp_create_segment+0x134>)
 8018f86:	22a4      	movs	r2, #164	@ 0xa4
 8018f88:	4944      	ldr	r1, [pc, #272]	@ (801909c <tcp_create_segment+0x140>)
 8018f8a:	4843      	ldr	r0, [pc, #268]	@ (8019098 <tcp_create_segment+0x13c>)
 8018f8c:	f006 fe2e 	bl	801fbec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018f90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018f94:	009b      	lsls	r3, r3, #2
 8018f96:	b2db      	uxtb	r3, r3
 8018f98:	f003 0304 	and.w	r3, r3, #4
 8018f9c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018f9e:	2003      	movs	r0, #3
 8018fa0:	f7fa fcb2 	bl	8013908 <memp_malloc>
 8018fa4:	6138      	str	r0, [r7, #16]
 8018fa6:	693b      	ldr	r3, [r7, #16]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d104      	bne.n	8018fb6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018fac:	68b8      	ldr	r0, [r7, #8]
 8018fae:	f7fb fbcb 	bl	8014748 <pbuf_free>
    return NULL;
 8018fb2:	2300      	movs	r3, #0
 8018fb4:	e068      	b.n	8019088 <tcp_create_segment+0x12c>
  }
  seg->flags = optflags;
 8018fb6:	693b      	ldr	r3, [r7, #16]
 8018fb8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018fbc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018fbe:	693b      	ldr	r3, [r7, #16]
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018fc4:	693b      	ldr	r3, [r7, #16]
 8018fc6:	68ba      	ldr	r2, [r7, #8]
 8018fc8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018fca:	68bb      	ldr	r3, [r7, #8]
 8018fcc:	891a      	ldrh	r2, [r3, #8]
 8018fce:	7dfb      	ldrb	r3, [r7, #23]
 8018fd0:	b29b      	uxth	r3, r3
 8018fd2:	429a      	cmp	r2, r3
 8018fd4:	d205      	bcs.n	8018fe2 <tcp_create_segment+0x86>
 8018fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8019090 <tcp_create_segment+0x134>)
 8018fd8:	22b0      	movs	r2, #176	@ 0xb0
 8018fda:	4931      	ldr	r1, [pc, #196]	@ (80190a0 <tcp_create_segment+0x144>)
 8018fdc:	482e      	ldr	r0, [pc, #184]	@ (8019098 <tcp_create_segment+0x13c>)
 8018fde:	f006 fe05 	bl	801fbec <iprintf>
  seg->len = p->tot_len - optlen;
 8018fe2:	68bb      	ldr	r3, [r7, #8]
 8018fe4:	891a      	ldrh	r2, [r3, #8]
 8018fe6:	7dfb      	ldrb	r3, [r7, #23]
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	1ad3      	subs	r3, r2, r3
 8018fec:	b29a      	uxth	r2, r3
 8018fee:	693b      	ldr	r3, [r7, #16]
 8018ff0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018ff2:	2114      	movs	r1, #20
 8018ff4:	68b8      	ldr	r0, [r7, #8]
 8018ff6:	f7fb fb11 	bl	801461c <pbuf_add_header>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d00c      	beq.n	801901a <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8019000:	4b28      	ldr	r3, [pc, #160]	@ (80190a4 <tcp_create_segment+0x148>)
 8019002:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8019006:	3301      	adds	r3, #1
 8019008:	b29a      	uxth	r2, r3
 801900a:	4b26      	ldr	r3, [pc, #152]	@ (80190a4 <tcp_create_segment+0x148>)
 801900c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 8019010:	6938      	ldr	r0, [r7, #16]
 8019012:	f7fc ff6c 	bl	8015eee <tcp_seg_free>
    return NULL;
 8019016:	2300      	movs	r3, #0
 8019018:	e036      	b.n	8019088 <tcp_create_segment+0x12c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801901a:	693b      	ldr	r3, [r7, #16]
 801901c:	685b      	ldr	r3, [r3, #4]
 801901e:	685a      	ldr	r2, [r3, #4]
 8019020:	693b      	ldr	r3, [r7, #16]
 8019022:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	8ada      	ldrh	r2, [r3, #22]
 8019028:	693b      	ldr	r3, [r7, #16]
 801902a:	68dc      	ldr	r4, [r3, #12]
 801902c:	4610      	mov	r0, r2
 801902e:	f7f9 fecd 	bl	8012dcc <lwip_htons>
 8019032:	4603      	mov	r3, r0
 8019034:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	8b1a      	ldrh	r2, [r3, #24]
 801903a:	693b      	ldr	r3, [r7, #16]
 801903c:	68dc      	ldr	r4, [r3, #12]
 801903e:	4610      	mov	r0, r2
 8019040:	f7f9 fec4 	bl	8012dcc <lwip_htons>
 8019044:	4603      	mov	r3, r0
 8019046:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019048:	693b      	ldr	r3, [r7, #16]
 801904a:	68dc      	ldr	r4, [r3, #12]
 801904c:	6838      	ldr	r0, [r7, #0]
 801904e:	f7f9 fed3 	bl	8012df8 <lwip_htonl>
 8019052:	4603      	mov	r3, r0
 8019054:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019056:	7dfb      	ldrb	r3, [r7, #23]
 8019058:	089b      	lsrs	r3, r3, #2
 801905a:	b2db      	uxtb	r3, r3
 801905c:	3305      	adds	r3, #5
 801905e:	b29b      	uxth	r3, r3
 8019060:	031b      	lsls	r3, r3, #12
 8019062:	b29a      	uxth	r2, r3
 8019064:	79fb      	ldrb	r3, [r7, #7]
 8019066:	b29b      	uxth	r3, r3
 8019068:	4313      	orrs	r3, r2
 801906a:	b29a      	uxth	r2, r3
 801906c:	693b      	ldr	r3, [r7, #16]
 801906e:	68dc      	ldr	r4, [r3, #12]
 8019070:	4610      	mov	r0, r2
 8019072:	f7f9 feab 	bl	8012dcc <lwip_htons>
 8019076:	4603      	mov	r3, r0
 8019078:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801907a:	693b      	ldr	r3, [r7, #16]
 801907c:	68db      	ldr	r3, [r3, #12]
 801907e:	2200      	movs	r2, #0
 8019080:	749a      	strb	r2, [r3, #18]
 8019082:	2200      	movs	r2, #0
 8019084:	74da      	strb	r2, [r3, #19]
  return seg;
 8019086:	693b      	ldr	r3, [r7, #16]
}
 8019088:	4618      	mov	r0, r3
 801908a:	371c      	adds	r7, #28
 801908c:	46bd      	mov	sp, r7
 801908e:	bd90      	pop	{r4, r7, pc}
 8019090:	08022eac 	.word	0x08022eac
 8019094:	08022ee0 	.word	0x08022ee0
 8019098:	08022f00 	.word	0x08022f00
 801909c:	08022f28 	.word	0x08022f28
 80190a0:	08022f4c 	.word	0x08022f4c
 80190a4:	2002d2b0 	.word	0x2002d2b0

080190a8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b086      	sub	sp, #24
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	607b      	str	r3, [r7, #4]
 80190b0:	4603      	mov	r3, r0
 80190b2:	73fb      	strb	r3, [r7, #15]
 80190b4:	460b      	mov	r3, r1
 80190b6:	81bb      	strh	r3, [r7, #12]
 80190b8:	4613      	mov	r3, r2
 80190ba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80190bc:	89bb      	ldrh	r3, [r7, #12]
 80190be:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d105      	bne.n	80190d2 <tcp_pbuf_prealloc+0x2a>
 80190c6:	4b30      	ldr	r3, [pc, #192]	@ (8019188 <tcp_pbuf_prealloc+0xe0>)
 80190c8:	22e8      	movs	r2, #232	@ 0xe8
 80190ca:	4930      	ldr	r1, [pc, #192]	@ (801918c <tcp_pbuf_prealloc+0xe4>)
 80190cc:	4830      	ldr	r0, [pc, #192]	@ (8019190 <tcp_pbuf_prealloc+0xe8>)
 80190ce:	f006 fd8d 	bl	801fbec <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80190d2:	6a3b      	ldr	r3, [r7, #32]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d105      	bne.n	80190e4 <tcp_pbuf_prealloc+0x3c>
 80190d8:	4b2b      	ldr	r3, [pc, #172]	@ (8019188 <tcp_pbuf_prealloc+0xe0>)
 80190da:	22e9      	movs	r2, #233	@ 0xe9
 80190dc:	492d      	ldr	r1, [pc, #180]	@ (8019194 <tcp_pbuf_prealloc+0xec>)
 80190de:	482c      	ldr	r0, [pc, #176]	@ (8019190 <tcp_pbuf_prealloc+0xe8>)
 80190e0:	f006 fd84 	bl	801fbec <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80190e4:	89ba      	ldrh	r2, [r7, #12]
 80190e6:	897b      	ldrh	r3, [r7, #10]
 80190e8:	429a      	cmp	r2, r3
 80190ea:	d221      	bcs.n	8019130 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80190ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80190f0:	f003 0302 	and.w	r3, r3, #2
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d111      	bne.n	801911c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80190f8:	6a3b      	ldr	r3, [r7, #32]
 80190fa:	8b5b      	ldrh	r3, [r3, #26]
 80190fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019100:	2b00      	cmp	r3, #0
 8019102:	d115      	bne.n	8019130 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019104:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019108:	2b00      	cmp	r3, #0
 801910a:	d007      	beq.n	801911c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801910c:	6a3b      	ldr	r3, [r7, #32]
 801910e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019110:	2b00      	cmp	r3, #0
 8019112:	d103      	bne.n	801911c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019114:	6a3b      	ldr	r3, [r7, #32]
 8019116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8019118:	2b00      	cmp	r3, #0
 801911a:	d009      	beq.n	8019130 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801911c:	89bb      	ldrh	r3, [r7, #12]
 801911e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019122:	f023 0203 	bic.w	r2, r3, #3
 8019126:	897b      	ldrh	r3, [r7, #10]
 8019128:	4293      	cmp	r3, r2
 801912a:	bf28      	it	cs
 801912c:	4613      	movcs	r3, r2
 801912e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019130:	8af9      	ldrh	r1, [r7, #22]
 8019132:	7bfb      	ldrb	r3, [r7, #15]
 8019134:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019138:	4618      	mov	r0, r3
 801913a:	f7fb f821 	bl	8014180 <pbuf_alloc>
 801913e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d101      	bne.n	801914a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019146:	2300      	movs	r3, #0
 8019148:	e019      	b.n	801917e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801914a:	693b      	ldr	r3, [r7, #16]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d006      	beq.n	8019160 <tcp_pbuf_prealloc+0xb8>
 8019152:	4b0d      	ldr	r3, [pc, #52]	@ (8019188 <tcp_pbuf_prealloc+0xe0>)
 8019154:	f240 120b 	movw	r2, #267	@ 0x10b
 8019158:	490f      	ldr	r1, [pc, #60]	@ (8019198 <tcp_pbuf_prealloc+0xf0>)
 801915a:	480d      	ldr	r0, [pc, #52]	@ (8019190 <tcp_pbuf_prealloc+0xe8>)
 801915c:	f006 fd46 	bl	801fbec <iprintf>
  *oversize = p->len - length;
 8019160:	693b      	ldr	r3, [r7, #16]
 8019162:	895a      	ldrh	r2, [r3, #10]
 8019164:	89bb      	ldrh	r3, [r7, #12]
 8019166:	1ad3      	subs	r3, r2, r3
 8019168:	b29a      	uxth	r2, r3
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	89ba      	ldrh	r2, [r7, #12]
 8019172:	811a      	strh	r2, [r3, #8]
 8019174:	693b      	ldr	r3, [r7, #16]
 8019176:	891a      	ldrh	r2, [r3, #8]
 8019178:	693b      	ldr	r3, [r7, #16]
 801917a:	815a      	strh	r2, [r3, #10]
  return p;
 801917c:	693b      	ldr	r3, [r7, #16]
}
 801917e:	4618      	mov	r0, r3
 8019180:	3718      	adds	r7, #24
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}
 8019186:	bf00      	nop
 8019188:	08022eac 	.word	0x08022eac
 801918c:	08022f64 	.word	0x08022f64
 8019190:	08022f00 	.word	0x08022f00
 8019194:	08022f88 	.word	0x08022f88
 8019198:	08022fa8 	.word	0x08022fa8

0801919c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b082      	sub	sp, #8
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	6078      	str	r0, [r7, #4]
 80191a4:	460b      	mov	r3, r1
 80191a6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d106      	bne.n	80191bc <tcp_write_checks+0x20>
 80191ae:	4b37      	ldr	r3, [pc, #220]	@ (801928c <tcp_write_checks+0xf0>)
 80191b0:	f240 1233 	movw	r2, #307	@ 0x133
 80191b4:	4936      	ldr	r1, [pc, #216]	@ (8019290 <tcp_write_checks+0xf4>)
 80191b6:	4837      	ldr	r0, [pc, #220]	@ (8019294 <tcp_write_checks+0xf8>)
 80191b8:	f006 fd18 	bl	801fbec <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	7d1b      	ldrb	r3, [r3, #20]
 80191c0:	2b04      	cmp	r3, #4
 80191c2:	d00e      	beq.n	80191e2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80191c8:	2b07      	cmp	r3, #7
 80191ca:	d00a      	beq.n	80191e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80191d0:	2b02      	cmp	r3, #2
 80191d2:	d006      	beq.n	80191e2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80191d8:	2b03      	cmp	r3, #3
 80191da:	d002      	beq.n	80191e2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80191dc:	f06f 030a 	mvn.w	r3, #10
 80191e0:	e050      	b.n	8019284 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 80191e2:	887b      	ldrh	r3, [r7, #2]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d101      	bne.n	80191ec <tcp_write_checks+0x50>
    return ERR_OK;
 80191e8:	2300      	movs	r3, #0
 80191ea:	e04b      	b.n	8019284 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80191f2:	887a      	ldrh	r2, [r7, #2]
 80191f4:	429a      	cmp	r2, r3
 80191f6:	d909      	bls.n	801920c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	8b5b      	ldrh	r3, [r3, #26]
 80191fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019200:	b29a      	uxth	r2, r3
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801920a:	e03b      	b.n	8019284 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019212:	2b08      	cmp	r3, #8
 8019214:	d911      	bls.n	801923a <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8019216:	4b20      	ldr	r3, [pc, #128]	@ (8019298 <tcp_write_checks+0xfc>)
 8019218:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801921c:	3301      	adds	r3, #1
 801921e:	b29a      	uxth	r2, r3
 8019220:	4b1d      	ldr	r3, [pc, #116]	@ (8019298 <tcp_write_checks+0xfc>)
 8019222:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	8b5b      	ldrh	r3, [r3, #26]
 801922a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801922e:	b29a      	uxth	r2, r3
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019238:	e024      	b.n	8019284 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019240:	2b00      	cmp	r3, #0
 8019242:	d00f      	beq.n	8019264 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019248:	2b00      	cmp	r3, #0
 801924a:	d11a      	bne.n	8019282 <tcp_write_checks+0xe6>
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019250:	2b00      	cmp	r3, #0
 8019252:	d116      	bne.n	8019282 <tcp_write_checks+0xe6>
 8019254:	4b0d      	ldr	r3, [pc, #52]	@ (801928c <tcp_write_checks+0xf0>)
 8019256:	f240 1255 	movw	r2, #341	@ 0x155
 801925a:	4910      	ldr	r1, [pc, #64]	@ (801929c <tcp_write_checks+0x100>)
 801925c:	480d      	ldr	r0, [pc, #52]	@ (8019294 <tcp_write_checks+0xf8>)
 801925e:	f006 fcc5 	bl	801fbec <iprintf>
 8019262:	e00e      	b.n	8019282 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019268:	2b00      	cmp	r3, #0
 801926a:	d103      	bne.n	8019274 <tcp_write_checks+0xd8>
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019270:	2b00      	cmp	r3, #0
 8019272:	d006      	beq.n	8019282 <tcp_write_checks+0xe6>
 8019274:	4b05      	ldr	r3, [pc, #20]	@ (801928c <tcp_write_checks+0xf0>)
 8019276:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801927a:	4909      	ldr	r1, [pc, #36]	@ (80192a0 <tcp_write_checks+0x104>)
 801927c:	4805      	ldr	r0, [pc, #20]	@ (8019294 <tcp_write_checks+0xf8>)
 801927e:	f006 fcb5 	bl	801fbec <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019282:	2300      	movs	r3, #0
}
 8019284:	4618      	mov	r0, r3
 8019286:	3708      	adds	r7, #8
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}
 801928c:	08022eac 	.word	0x08022eac
 8019290:	08022fbc 	.word	0x08022fbc
 8019294:	08022f00 	.word	0x08022f00
 8019298:	2002d2b0 	.word	0x2002d2b0
 801929c:	08022fdc 	.word	0x08022fdc
 80192a0:	08023018 	.word	0x08023018

080192a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80192a4:	b590      	push	{r4, r7, lr}
 80192a6:	b09b      	sub	sp, #108	@ 0x6c
 80192a8:	af04      	add	r7, sp, #16
 80192aa:	60f8      	str	r0, [r7, #12]
 80192ac:	60b9      	str	r1, [r7, #8]
 80192ae:	4611      	mov	r1, r2
 80192b0:	461a      	mov	r2, r3
 80192b2:	460b      	mov	r3, r1
 80192b4:	80fb      	strh	r3, [r7, #6]
 80192b6:	4613      	mov	r3, r2
 80192b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80192ba:	2300      	movs	r3, #0
 80192bc:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80192be:	2300      	movs	r3, #0
 80192c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80192c2:	2300      	movs	r3, #0
 80192c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80192c6:	2300      	movs	r3, #0
 80192c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80192ca:	2300      	movs	r3, #0
 80192cc:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80192ce:	2300      	movs	r3, #0
 80192d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80192d4:	2300      	movs	r3, #0
 80192d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80192da:	2300      	movs	r3, #0
 80192dc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80192de:	2300      	movs	r3, #0
 80192e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80192e2:	2300      	movs	r3, #0
 80192e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d109      	bne.n	8019300 <tcp_write+0x5c>
 80192ec:	4ba4      	ldr	r3, [pc, #656]	@ (8019580 <tcp_write+0x2dc>)
 80192ee:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80192f2:	49a4      	ldr	r1, [pc, #656]	@ (8019584 <tcp_write+0x2e0>)
 80192f4:	48a4      	ldr	r0, [pc, #656]	@ (8019588 <tcp_write+0x2e4>)
 80192f6:	f006 fc79 	bl	801fbec <iprintf>
 80192fa:	f06f 030f 	mvn.w	r3, #15
 80192fe:	e332      	b.n	8019966 <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019306:	085b      	lsrs	r3, r3, #1
 8019308:	b29a      	uxth	r2, r3
 801930a:	68fb      	ldr	r3, [r7, #12]
 801930c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801930e:	4293      	cmp	r3, r2
 8019310:	bf28      	it	cs
 8019312:	4613      	movcs	r3, r2
 8019314:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019318:	2b00      	cmp	r3, #0
 801931a:	d102      	bne.n	8019322 <tcp_write+0x7e>
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019320:	e000      	b.n	8019324 <tcp_write+0x80>
 8019322:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019324:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019326:	68bb      	ldr	r3, [r7, #8]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d109      	bne.n	8019340 <tcp_write+0x9c>
 801932c:	4b94      	ldr	r3, [pc, #592]	@ (8019580 <tcp_write+0x2dc>)
 801932e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8019332:	4996      	ldr	r1, [pc, #600]	@ (801958c <tcp_write+0x2e8>)
 8019334:	4894      	ldr	r0, [pc, #592]	@ (8019588 <tcp_write+0x2e4>)
 8019336:	f006 fc59 	bl	801fbec <iprintf>
 801933a:	f06f 030f 	mvn.w	r3, #15
 801933e:	e312      	b.n	8019966 <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019340:	88fb      	ldrh	r3, [r7, #6]
 8019342:	4619      	mov	r1, r3
 8019344:	68f8      	ldr	r0, [r7, #12]
 8019346:	f7ff ff29 	bl	801919c <tcp_write_checks>
 801934a:	4603      	mov	r3, r0
 801934c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8019350:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8019354:	2b00      	cmp	r3, #0
 8019356:	d002      	beq.n	801935e <tcp_write+0xba>
    return err;
 8019358:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801935c:	e303      	b.n	8019966 <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019364:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019368:	2300      	movs	r3, #0
 801936a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019372:	2b00      	cmp	r3, #0
 8019374:	f000 80f6 	beq.w	8019564 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801937c:	653b      	str	r3, [r7, #80]	@ 0x50
 801937e:	e002      	b.n	8019386 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d1f8      	bne.n	8019380 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801938e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019390:	7a9b      	ldrb	r3, [r3, #10]
 8019392:	009b      	lsls	r3, r3, #2
 8019394:	b29b      	uxth	r3, r3
 8019396:	f003 0304 	and.w	r3, r3, #4
 801939a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801939c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801939e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193a0:	891b      	ldrh	r3, [r3, #8]
 80193a2:	4619      	mov	r1, r3
 80193a4:	8c3b      	ldrh	r3, [r7, #32]
 80193a6:	440b      	add	r3, r1
 80193a8:	429a      	cmp	r2, r3
 80193aa:	da06      	bge.n	80193ba <tcp_write+0x116>
 80193ac:	4b74      	ldr	r3, [pc, #464]	@ (8019580 <tcp_write+0x2dc>)
 80193ae:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80193b2:	4977      	ldr	r1, [pc, #476]	@ (8019590 <tcp_write+0x2ec>)
 80193b4:	4874      	ldr	r0, [pc, #464]	@ (8019588 <tcp_write+0x2e4>)
 80193b6:	f006 fc19 	bl	801fbec <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80193ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193bc:	891a      	ldrh	r2, [r3, #8]
 80193be:	8c3b      	ldrh	r3, [r7, #32]
 80193c0:	4413      	add	r3, r2
 80193c2:	b29b      	uxth	r3, r3
 80193c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80193c6:	1ad3      	subs	r3, r2, r3
 80193c8:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80193ca:	68fb      	ldr	r3, [r7, #12]
 80193cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80193d0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80193d2:	8a7b      	ldrh	r3, [r7, #18]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d026      	beq.n	8019426 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80193d8:	8a7b      	ldrh	r3, [r7, #18]
 80193da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80193dc:	429a      	cmp	r2, r3
 80193de:	d206      	bcs.n	80193ee <tcp_write+0x14a>
 80193e0:	4b67      	ldr	r3, [pc, #412]	@ (8019580 <tcp_write+0x2dc>)
 80193e2:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80193e6:	496b      	ldr	r1, [pc, #428]	@ (8019594 <tcp_write+0x2f0>)
 80193e8:	4867      	ldr	r0, [pc, #412]	@ (8019588 <tcp_write+0x2e4>)
 80193ea:	f006 fbff 	bl	801fbec <iprintf>
      seg = last_unsent;
 80193ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80193f2:	8a7b      	ldrh	r3, [r7, #18]
 80193f4:	88fa      	ldrh	r2, [r7, #6]
 80193f6:	4293      	cmp	r3, r2
 80193f8:	bf28      	it	cs
 80193fa:	4613      	movcs	r3, r2
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019400:	4293      	cmp	r3, r2
 8019402:	bf28      	it	cs
 8019404:	4613      	movcs	r3, r2
 8019406:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8019408:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801940c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801940e:	4413      	add	r3, r2
 8019410:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8019414:	8a7a      	ldrh	r2, [r7, #18]
 8019416:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019418:	1ad3      	subs	r3, r2, r3
 801941a:	b29b      	uxth	r3, r3
 801941c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801941e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019420:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019422:	1ad3      	subs	r3, r2, r3
 8019424:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019426:	8a7b      	ldrh	r3, [r7, #18]
 8019428:	2b00      	cmp	r3, #0
 801942a:	d00b      	beq.n	8019444 <tcp_write+0x1a0>
 801942c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019430:	88fb      	ldrh	r3, [r7, #6]
 8019432:	429a      	cmp	r2, r3
 8019434:	d006      	beq.n	8019444 <tcp_write+0x1a0>
 8019436:	4b52      	ldr	r3, [pc, #328]	@ (8019580 <tcp_write+0x2dc>)
 8019438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801943c:	4956      	ldr	r1, [pc, #344]	@ (8019598 <tcp_write+0x2f4>)
 801943e:	4852      	ldr	r0, [pc, #328]	@ (8019588 <tcp_write+0x2e4>)
 8019440:	f006 fbd4 	bl	801fbec <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019444:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019448:	88fb      	ldrh	r3, [r7, #6]
 801944a:	429a      	cmp	r2, r3
 801944c:	f080 8167 	bcs.w	801971e <tcp_write+0x47a>
 8019450:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019452:	2b00      	cmp	r3, #0
 8019454:	f000 8163 	beq.w	801971e <tcp_write+0x47a>
 8019458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801945a:	891b      	ldrh	r3, [r3, #8]
 801945c:	2b00      	cmp	r3, #0
 801945e:	f000 815e 	beq.w	801971e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019462:	88fa      	ldrh	r2, [r7, #6]
 8019464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019468:	1ad2      	subs	r2, r2, r3
 801946a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801946c:	4293      	cmp	r3, r2
 801946e:	bfa8      	it	ge
 8019470:	4613      	movge	r3, r2
 8019472:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019476:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019478:	797b      	ldrb	r3, [r7, #5]
 801947a:	f003 0301 	and.w	r3, r3, #1
 801947e:	2b00      	cmp	r3, #0
 8019480:	d027      	beq.n	80194d2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019482:	f107 0012 	add.w	r0, r7, #18
 8019486:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019488:	8bf9      	ldrh	r1, [r7, #30]
 801948a:	2301      	movs	r3, #1
 801948c:	9302      	str	r3, [sp, #8]
 801948e:	797b      	ldrb	r3, [r7, #5]
 8019490:	9301      	str	r3, [sp, #4]
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	9300      	str	r3, [sp, #0]
 8019496:	4603      	mov	r3, r0
 8019498:	2000      	movs	r0, #0
 801949a:	f7ff fe05 	bl	80190a8 <tcp_pbuf_prealloc>
 801949e:	6578      	str	r0, [r7, #84]	@ 0x54
 80194a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	f000 8225 	beq.w	80198f2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80194a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194aa:	6858      	ldr	r0, [r3, #4]
 80194ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80194b0:	68ba      	ldr	r2, [r7, #8]
 80194b2:	4413      	add	r3, r2
 80194b4:	8bfa      	ldrh	r2, [r7, #30]
 80194b6:	4619      	mov	r1, r3
 80194b8:	f006 fdc3 	bl	8020042 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80194bc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80194be:	f7fb f9d1 	bl	8014864 <pbuf_clen>
 80194c2:	4603      	mov	r3, r0
 80194c4:	461a      	mov	r2, r3
 80194c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80194ca:	4413      	add	r3, r2
 80194cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80194d0:	e041      	b.n	8019556 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80194d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194d4:	685b      	ldr	r3, [r3, #4]
 80194d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80194d8:	e002      	b.n	80194e0 <tcp_write+0x23c>
 80194da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	637b      	str	r3, [r7, #52]	@ 0x34
 80194e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d1f8      	bne.n	80194da <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80194e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194ea:	7b1b      	ldrb	r3, [r3, #12]
 80194ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d115      	bne.n	8019520 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80194f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194f6:	685b      	ldr	r3, [r3, #4]
 80194f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80194fa:	8952      	ldrh	r2, [r2, #10]
 80194fc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80194fe:	68ba      	ldr	r2, [r7, #8]
 8019500:	429a      	cmp	r2, r3
 8019502:	d10d      	bne.n	8019520 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019504:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019508:	2b00      	cmp	r3, #0
 801950a:	d006      	beq.n	801951a <tcp_write+0x276>
 801950c:	4b1c      	ldr	r3, [pc, #112]	@ (8019580 <tcp_write+0x2dc>)
 801950e:	f240 2231 	movw	r2, #561	@ 0x231
 8019512:	4922      	ldr	r1, [pc, #136]	@ (801959c <tcp_write+0x2f8>)
 8019514:	481c      	ldr	r0, [pc, #112]	@ (8019588 <tcp_write+0x2e4>)
 8019516:	f006 fb69 	bl	801fbec <iprintf>
          extendlen = seglen;
 801951a:	8bfb      	ldrh	r3, [r7, #30]
 801951c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801951e:	e01a      	b.n	8019556 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019520:	8bfb      	ldrh	r3, [r7, #30]
 8019522:	2201      	movs	r2, #1
 8019524:	4619      	mov	r1, r3
 8019526:	2000      	movs	r0, #0
 8019528:	f7fa fe2a 	bl	8014180 <pbuf_alloc>
 801952c:	6578      	str	r0, [r7, #84]	@ 0x54
 801952e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019530:	2b00      	cmp	r3, #0
 8019532:	f000 81e0 	beq.w	80198f6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019536:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801953a:	68ba      	ldr	r2, [r7, #8]
 801953c:	441a      	add	r2, r3
 801953e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019540:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019542:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019544:	f7fb f98e 	bl	8014864 <pbuf_clen>
 8019548:	4603      	mov	r3, r0
 801954a:	461a      	mov	r2, r3
 801954c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019550:	4413      	add	r3, r2
 8019552:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019556:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801955a:	8bfb      	ldrh	r3, [r7, #30]
 801955c:	4413      	add	r3, r2
 801955e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8019562:	e0dc      	b.n	801971e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801956a:	2b00      	cmp	r3, #0
 801956c:	f000 80d7 	beq.w	801971e <tcp_write+0x47a>
 8019570:	4b03      	ldr	r3, [pc, #12]	@ (8019580 <tcp_write+0x2dc>)
 8019572:	f240 224a 	movw	r2, #586	@ 0x24a
 8019576:	490a      	ldr	r1, [pc, #40]	@ (80195a0 <tcp_write+0x2fc>)
 8019578:	4803      	ldr	r0, [pc, #12]	@ (8019588 <tcp_write+0x2e4>)
 801957a:	f006 fb37 	bl	801fbec <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801957e:	e0ce      	b.n	801971e <tcp_write+0x47a>
 8019580:	08022eac 	.word	0x08022eac
 8019584:	0802304c 	.word	0x0802304c
 8019588:	08022f00 	.word	0x08022f00
 801958c:	08023064 	.word	0x08023064
 8019590:	08023098 	.word	0x08023098
 8019594:	080230b0 	.word	0x080230b0
 8019598:	080230d0 	.word	0x080230d0
 801959c:	080230f0 	.word	0x080230f0
 80195a0:	0802311c 	.word	0x0802311c
    struct pbuf *p;
    u16_t left = len - pos;
 80195a4:	88fa      	ldrh	r2, [r7, #6]
 80195a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80195aa:	1ad3      	subs	r3, r2, r3
 80195ac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80195ae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80195b2:	b29b      	uxth	r3, r3
 80195b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80195b6:	1ad3      	subs	r3, r2, r3
 80195b8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80195ba:	8b7a      	ldrh	r2, [r7, #26]
 80195bc:	8bbb      	ldrh	r3, [r7, #28]
 80195be:	4293      	cmp	r3, r2
 80195c0:	bf28      	it	cs
 80195c2:	4613      	movcs	r3, r2
 80195c4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80195c6:	797b      	ldrb	r3, [r7, #5]
 80195c8:	f003 0301 	and.w	r3, r3, #1
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d036      	beq.n	801963e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80195d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80195d4:	b29a      	uxth	r2, r3
 80195d6:	8b3b      	ldrh	r3, [r7, #24]
 80195d8:	4413      	add	r3, r2
 80195da:	b299      	uxth	r1, r3
 80195dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195de:	2b00      	cmp	r3, #0
 80195e0:	bf0c      	ite	eq
 80195e2:	2301      	moveq	r3, #1
 80195e4:	2300      	movne	r3, #0
 80195e6:	b2db      	uxtb	r3, r3
 80195e8:	f107 0012 	add.w	r0, r7, #18
 80195ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80195ee:	9302      	str	r3, [sp, #8]
 80195f0:	797b      	ldrb	r3, [r7, #5]
 80195f2:	9301      	str	r3, [sp, #4]
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	9300      	str	r3, [sp, #0]
 80195f8:	4603      	mov	r3, r0
 80195fa:	2036      	movs	r0, #54	@ 0x36
 80195fc:	f7ff fd54 	bl	80190a8 <tcp_pbuf_prealloc>
 8019600:	6338      	str	r0, [r7, #48]	@ 0x30
 8019602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019604:	2b00      	cmp	r3, #0
 8019606:	f000 8178 	beq.w	80198fa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801960c:	895b      	ldrh	r3, [r3, #10]
 801960e:	8b3a      	ldrh	r2, [r7, #24]
 8019610:	429a      	cmp	r2, r3
 8019612:	d906      	bls.n	8019622 <tcp_write+0x37e>
 8019614:	4b8c      	ldr	r3, [pc, #560]	@ (8019848 <tcp_write+0x5a4>)
 8019616:	f240 2266 	movw	r2, #614	@ 0x266
 801961a:	498c      	ldr	r1, [pc, #560]	@ (801984c <tcp_write+0x5a8>)
 801961c:	488c      	ldr	r0, [pc, #560]	@ (8019850 <tcp_write+0x5ac>)
 801961e:	f006 fae5 	bl	801fbec <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019624:	685a      	ldr	r2, [r3, #4]
 8019626:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801962a:	18d0      	adds	r0, r2, r3
 801962c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019630:	68ba      	ldr	r2, [r7, #8]
 8019632:	4413      	add	r3, r2
 8019634:	8b3a      	ldrh	r2, [r7, #24]
 8019636:	4619      	mov	r1, r3
 8019638:	f006 fd03 	bl	8020042 <memcpy>
 801963c:	e02f      	b.n	801969e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801963e:	8a7b      	ldrh	r3, [r7, #18]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d006      	beq.n	8019652 <tcp_write+0x3ae>
 8019644:	4b80      	ldr	r3, [pc, #512]	@ (8019848 <tcp_write+0x5a4>)
 8019646:	f240 2271 	movw	r2, #625	@ 0x271
 801964a:	4982      	ldr	r1, [pc, #520]	@ (8019854 <tcp_write+0x5b0>)
 801964c:	4880      	ldr	r0, [pc, #512]	@ (8019850 <tcp_write+0x5ac>)
 801964e:	f006 facd 	bl	801fbec <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019652:	8b3b      	ldrh	r3, [r7, #24]
 8019654:	2201      	movs	r2, #1
 8019656:	4619      	mov	r1, r3
 8019658:	2036      	movs	r0, #54	@ 0x36
 801965a:	f7fa fd91 	bl	8014180 <pbuf_alloc>
 801965e:	6178      	str	r0, [r7, #20]
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	2b00      	cmp	r3, #0
 8019664:	f000 814b 	beq.w	80198fe <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019668:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801966c:	68ba      	ldr	r2, [r7, #8]
 801966e:	441a      	add	r2, r3
 8019670:	697b      	ldr	r3, [r7, #20]
 8019672:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019674:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019678:	b29b      	uxth	r3, r3
 801967a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801967e:	4619      	mov	r1, r3
 8019680:	2036      	movs	r0, #54	@ 0x36
 8019682:	f7fa fd7d 	bl	8014180 <pbuf_alloc>
 8019686:	6338      	str	r0, [r7, #48]	@ 0x30
 8019688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801968a:	2b00      	cmp	r3, #0
 801968c:	d103      	bne.n	8019696 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801968e:	6978      	ldr	r0, [r7, #20]
 8019690:	f7fb f85a 	bl	8014748 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019694:	e136      	b.n	8019904 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019696:	6979      	ldr	r1, [r7, #20]
 8019698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801969a:	f7fb f923 	bl	80148e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801969e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80196a0:	f7fb f8e0 	bl	8014864 <pbuf_clen>
 80196a4:	4603      	mov	r3, r0
 80196a6:	461a      	mov	r2, r3
 80196a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80196ac:	4413      	add	r3, r2
 80196ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80196b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80196b6:	2b09      	cmp	r3, #9
 80196b8:	d903      	bls.n	80196c2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80196ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80196bc:	f7fb f844 	bl	8014748 <pbuf_free>
      goto memerr;
 80196c0:	e120      	b.n	8019904 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80196c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80196ca:	441a      	add	r2, r3
 80196cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80196d0:	9300      	str	r3, [sp, #0]
 80196d2:	4613      	mov	r3, r2
 80196d4:	2200      	movs	r2, #0
 80196d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80196d8:	68f8      	ldr	r0, [r7, #12]
 80196da:	f7ff fc3f 	bl	8018f5c <tcp_create_segment>
 80196de:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80196e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	f000 810d 	beq.w	8019902 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80196e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d102      	bne.n	80196f4 <tcp_write+0x450>
      queue = seg;
 80196ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80196f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80196f2:	e00c      	b.n	801970e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80196f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d106      	bne.n	8019708 <tcp_write+0x464>
 80196fa:	4b53      	ldr	r3, [pc, #332]	@ (8019848 <tcp_write+0x5a4>)
 80196fc:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019700:	4955      	ldr	r1, [pc, #340]	@ (8019858 <tcp_write+0x5b4>)
 8019702:	4853      	ldr	r0, [pc, #332]	@ (8019850 <tcp_write+0x5ac>)
 8019704:	f006 fa72 	bl	801fbec <iprintf>
      prev_seg->next = seg;
 8019708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801970a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801970c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801970e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019710:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019712:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019716:	8b3b      	ldrh	r3, [r7, #24]
 8019718:	4413      	add	r3, r2
 801971a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801971e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019722:	88fb      	ldrh	r3, [r7, #6]
 8019724:	429a      	cmp	r2, r3
 8019726:	f4ff af3d 	bcc.w	80195a4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801972a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801972c:	2b00      	cmp	r3, #0
 801972e:	d02c      	beq.n	801978a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019732:	685b      	ldr	r3, [r3, #4]
 8019734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019736:	e01e      	b.n	8019776 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801973a:	891a      	ldrh	r2, [r3, #8]
 801973c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801973e:	4413      	add	r3, r2
 8019740:	b29a      	uxth	r2, r3
 8019742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019744:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d110      	bne.n	8019770 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801974e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019750:	685b      	ldr	r3, [r3, #4]
 8019752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019754:	8952      	ldrh	r2, [r2, #10]
 8019756:	4413      	add	r3, r2
 8019758:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801975a:	68b9      	ldr	r1, [r7, #8]
 801975c:	4618      	mov	r0, r3
 801975e:	f006 fc70 	bl	8020042 <memcpy>
        p->len += oversize_used;
 8019762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019764:	895a      	ldrh	r2, [r3, #10]
 8019766:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019768:	4413      	add	r3, r2
 801976a:	b29a      	uxth	r2, r3
 801976c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801976e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019778:	2b00      	cmp	r3, #0
 801977a:	d1dd      	bne.n	8019738 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801977c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801977e:	891a      	ldrh	r2, [r3, #8]
 8019780:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019782:	4413      	add	r3, r2
 8019784:	b29a      	uxth	r2, r3
 8019786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019788:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801978a:	8a7a      	ldrh	r2, [r7, #18]
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019794:	2b00      	cmp	r3, #0
 8019796:	d018      	beq.n	80197ca <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801979a:	2b00      	cmp	r3, #0
 801979c:	d106      	bne.n	80197ac <tcp_write+0x508>
 801979e:	4b2a      	ldr	r3, [pc, #168]	@ (8019848 <tcp_write+0x5a4>)
 80197a0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80197a4:	492d      	ldr	r1, [pc, #180]	@ (801985c <tcp_write+0x5b8>)
 80197a6:	482a      	ldr	r0, [pc, #168]	@ (8019850 <tcp_write+0x5ac>)
 80197a8:	f006 fa20 	bl	801fbec <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80197ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197ae:	685b      	ldr	r3, [r3, #4]
 80197b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7fb f896 	bl	80148e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80197b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197ba:	891a      	ldrh	r2, [r3, #8]
 80197bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197be:	891b      	ldrh	r3, [r3, #8]
 80197c0:	4413      	add	r3, r2
 80197c2:	b29a      	uxth	r2, r3
 80197c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197c6:	811a      	strh	r2, [r3, #8]
 80197c8:	e037      	b.n	801983a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80197ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d034      	beq.n	801983a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80197d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d003      	beq.n	80197de <tcp_write+0x53a>
 80197d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197d8:	685b      	ldr	r3, [r3, #4]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d106      	bne.n	80197ec <tcp_write+0x548>
 80197de:	4b1a      	ldr	r3, [pc, #104]	@ (8019848 <tcp_write+0x5a4>)
 80197e0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80197e4:	491e      	ldr	r1, [pc, #120]	@ (8019860 <tcp_write+0x5bc>)
 80197e6:	481a      	ldr	r0, [pc, #104]	@ (8019850 <tcp_write+0x5ac>)
 80197e8:	f006 fa00 	bl	801fbec <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80197ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197ee:	685b      	ldr	r3, [r3, #4]
 80197f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80197f2:	e009      	b.n	8019808 <tcp_write+0x564>
      p->tot_len += extendlen;
 80197f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197f6:	891a      	ldrh	r2, [r3, #8]
 80197f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80197fa:	4413      	add	r3, r2
 80197fc:	b29a      	uxth	r2, r3
 80197fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019800:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d1f1      	bne.n	80197f4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019812:	891a      	ldrh	r2, [r3, #8]
 8019814:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019816:	4413      	add	r3, r2
 8019818:	b29a      	uxth	r2, r3
 801981a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801981c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801981e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019820:	895a      	ldrh	r2, [r3, #10]
 8019822:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019824:	4413      	add	r3, r2
 8019826:	b29a      	uxth	r2, r3
 8019828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801982a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801982c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801982e:	891a      	ldrh	r2, [r3, #8]
 8019830:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019832:	4413      	add	r3, r2
 8019834:	b29a      	uxth	r2, r3
 8019836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019838:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801983a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801983c:	2b00      	cmp	r3, #0
 801983e:	d111      	bne.n	8019864 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019844:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019846:	e010      	b.n	801986a <tcp_write+0x5c6>
 8019848:	08022eac 	.word	0x08022eac
 801984c:	0802314c 	.word	0x0802314c
 8019850:	08022f00 	.word	0x08022f00
 8019854:	0802318c 	.word	0x0802318c
 8019858:	0802319c 	.word	0x0802319c
 801985c:	080231b0 	.word	0x080231b0
 8019860:	080231e8 	.word	0x080231e8
  } else {
    last_unsent->next = queue;
 8019864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019868:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801986e:	88fb      	ldrh	r3, [r7, #6]
 8019870:	441a      	add	r2, r3
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801987c:	88fb      	ldrh	r3, [r7, #6]
 801987e:	1ad3      	subs	r3, r2, r3
 8019880:	b29a      	uxth	r2, r3
 8019882:	68fb      	ldr	r3, [r7, #12]
 8019884:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801988e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019898:	2b00      	cmp	r3, #0
 801989a:	d00e      	beq.n	80198ba <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d10a      	bne.n	80198ba <tcp_write+0x616>
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d106      	bne.n	80198ba <tcp_write+0x616>
 80198ac:	4b30      	ldr	r3, [pc, #192]	@ (8019970 <tcp_write+0x6cc>)
 80198ae:	f240 3212 	movw	r2, #786	@ 0x312
 80198b2:	4930      	ldr	r1, [pc, #192]	@ (8019974 <tcp_write+0x6d0>)
 80198b4:	4830      	ldr	r0, [pc, #192]	@ (8019978 <tcp_write+0x6d4>)
 80198b6:	f006 f999 	bl	801fbec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80198ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d016      	beq.n	80198ee <tcp_write+0x64a>
 80198c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198c2:	68db      	ldr	r3, [r3, #12]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d012      	beq.n	80198ee <tcp_write+0x64a>
 80198c8:	797b      	ldrb	r3, [r7, #5]
 80198ca:	f003 0302 	and.w	r3, r3, #2
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d10d      	bne.n	80198ee <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80198d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198d4:	68db      	ldr	r3, [r3, #12]
 80198d6:	899b      	ldrh	r3, [r3, #12]
 80198d8:	b29c      	uxth	r4, r3
 80198da:	2008      	movs	r0, #8
 80198dc:	f7f9 fa76 	bl	8012dcc <lwip_htons>
 80198e0:	4603      	mov	r3, r0
 80198e2:	461a      	mov	r2, r3
 80198e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80198e6:	68db      	ldr	r3, [r3, #12]
 80198e8:	4322      	orrs	r2, r4
 80198ea:	b292      	uxth	r2, r2
 80198ec:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80198ee:	2300      	movs	r3, #0
 80198f0:	e039      	b.n	8019966 <tcp_write+0x6c2>
          goto memerr;
 80198f2:	bf00      	nop
 80198f4:	e006      	b.n	8019904 <tcp_write+0x660>
            goto memerr;
 80198f6:	bf00      	nop
 80198f8:	e004      	b.n	8019904 <tcp_write+0x660>
        goto memerr;
 80198fa:	bf00      	nop
 80198fc:	e002      	b.n	8019904 <tcp_write+0x660>
        goto memerr;
 80198fe:	bf00      	nop
 8019900:	e000      	b.n	8019904 <tcp_write+0x660>
      goto memerr;
 8019902:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	8b5b      	ldrh	r3, [r3, #26]
 8019908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801990c:	b29a      	uxth	r2, r3
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8019912:	4b1a      	ldr	r3, [pc, #104]	@ (801997c <tcp_write+0x6d8>)
 8019914:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019918:	3301      	adds	r3, #1
 801991a:	b29a      	uxth	r2, r3
 801991c:	4b17      	ldr	r3, [pc, #92]	@ (801997c <tcp_write+0x6d8>)
 801991e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 8019922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019924:	2b00      	cmp	r3, #0
 8019926:	d002      	beq.n	801992e <tcp_write+0x68a>
    pbuf_free(concat_p);
 8019928:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801992a:	f7fa ff0d 	bl	8014748 <pbuf_free>
  }
  if (queue != NULL) {
 801992e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019930:	2b00      	cmp	r3, #0
 8019932:	d002      	beq.n	801993a <tcp_write+0x696>
    tcp_segs_free(queue);
 8019934:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019936:	f7fc fac5 	bl	8015ec4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019940:	2b00      	cmp	r3, #0
 8019942:	d00e      	beq.n	8019962 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019948:	2b00      	cmp	r3, #0
 801994a:	d10a      	bne.n	8019962 <tcp_write+0x6be>
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019950:	2b00      	cmp	r3, #0
 8019952:	d106      	bne.n	8019962 <tcp_write+0x6be>
 8019954:	4b06      	ldr	r3, [pc, #24]	@ (8019970 <tcp_write+0x6cc>)
 8019956:	f240 3227 	movw	r2, #807	@ 0x327
 801995a:	4906      	ldr	r1, [pc, #24]	@ (8019974 <tcp_write+0x6d0>)
 801995c:	4806      	ldr	r0, [pc, #24]	@ (8019978 <tcp_write+0x6d4>)
 801995e:	f006 f945 	bl	801fbec <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019966:	4618      	mov	r0, r3
 8019968:	375c      	adds	r7, #92	@ 0x5c
 801996a:	46bd      	mov	sp, r7
 801996c:	bd90      	pop	{r4, r7, pc}
 801996e:	bf00      	nop
 8019970:	08022eac 	.word	0x08022eac
 8019974:	08023220 	.word	0x08023220
 8019978:	08022f00 	.word	0x08022f00
 801997c:	2002d2b0 	.word	0x2002d2b0

08019980 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019980:	b590      	push	{r4, r7, lr}
 8019982:	b08b      	sub	sp, #44	@ 0x2c
 8019984:	af02      	add	r7, sp, #8
 8019986:	6078      	str	r0, [r7, #4]
 8019988:	460b      	mov	r3, r1
 801998a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801998c:	2300      	movs	r3, #0
 801998e:	61fb      	str	r3, [r7, #28]
 8019990:	2300      	movs	r3, #0
 8019992:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019994:	2300      	movs	r3, #0
 8019996:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d106      	bne.n	80199ac <tcp_split_unsent_seg+0x2c>
 801999e:	4b99      	ldr	r3, [pc, #612]	@ (8019c04 <tcp_split_unsent_seg+0x284>)
 80199a0:	f240 324b 	movw	r2, #843	@ 0x34b
 80199a4:	4998      	ldr	r1, [pc, #608]	@ (8019c08 <tcp_split_unsent_seg+0x288>)
 80199a6:	4899      	ldr	r0, [pc, #612]	@ (8019c0c <tcp_split_unsent_seg+0x28c>)
 80199a8:	f006 f920 	bl	801fbec <iprintf>

  useg = pcb->unsent;
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80199b2:	697b      	ldr	r3, [r7, #20]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d102      	bne.n	80199be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80199b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80199bc:	e11e      	b.n	8019bfc <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 80199be:	887b      	ldrh	r3, [r7, #2]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d109      	bne.n	80199d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80199c4:	4b8f      	ldr	r3, [pc, #572]	@ (8019c04 <tcp_split_unsent_seg+0x284>)
 80199c6:	f240 3253 	movw	r2, #851	@ 0x353
 80199ca:	4991      	ldr	r1, [pc, #580]	@ (8019c10 <tcp_split_unsent_seg+0x290>)
 80199cc:	488f      	ldr	r0, [pc, #572]	@ (8019c0c <tcp_split_unsent_seg+0x28c>)
 80199ce:	f006 f90d 	bl	801fbec <iprintf>
    return ERR_VAL;
 80199d2:	f06f 0305 	mvn.w	r3, #5
 80199d6:	e111      	b.n	8019bfc <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 80199d8:	697b      	ldr	r3, [r7, #20]
 80199da:	891b      	ldrh	r3, [r3, #8]
 80199dc:	887a      	ldrh	r2, [r7, #2]
 80199de:	429a      	cmp	r2, r3
 80199e0:	d301      	bcc.n	80199e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80199e2:	2300      	movs	r3, #0
 80199e4:	e10a      	b.n	8019bfc <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80199ea:	887a      	ldrh	r2, [r7, #2]
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d906      	bls.n	80199fe <tcp_split_unsent_seg+0x7e>
 80199f0:	4b84      	ldr	r3, [pc, #528]	@ (8019c04 <tcp_split_unsent_seg+0x284>)
 80199f2:	f240 325b 	movw	r2, #859	@ 0x35b
 80199f6:	4987      	ldr	r1, [pc, #540]	@ (8019c14 <tcp_split_unsent_seg+0x294>)
 80199f8:	4884      	ldr	r0, [pc, #528]	@ (8019c0c <tcp_split_unsent_seg+0x28c>)
 80199fa:	f006 f8f7 	bl	801fbec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80199fe:	697b      	ldr	r3, [r7, #20]
 8019a00:	891b      	ldrh	r3, [r3, #8]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d106      	bne.n	8019a14 <tcp_split_unsent_seg+0x94>
 8019a06:	4b7f      	ldr	r3, [pc, #508]	@ (8019c04 <tcp_split_unsent_seg+0x284>)
 8019a08:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019a0c:	4982      	ldr	r1, [pc, #520]	@ (8019c18 <tcp_split_unsent_seg+0x298>)
 8019a0e:	487f      	ldr	r0, [pc, #508]	@ (8019c0c <tcp_split_unsent_seg+0x28c>)
 8019a10:	f006 f8ec 	bl	801fbec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019a14:	697b      	ldr	r3, [r7, #20]
 8019a16:	7a9b      	ldrb	r3, [r3, #10]
 8019a18:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019a1a:	7bfb      	ldrb	r3, [r7, #15]
 8019a1c:	009b      	lsls	r3, r3, #2
 8019a1e:	b2db      	uxtb	r3, r3
 8019a20:	f003 0304 	and.w	r3, r3, #4
 8019a24:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019a26:	697b      	ldr	r3, [r7, #20]
 8019a28:	891a      	ldrh	r2, [r3, #8]
 8019a2a:	887b      	ldrh	r3, [r7, #2]
 8019a2c:	1ad3      	subs	r3, r2, r3
 8019a2e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019a30:	7bbb      	ldrb	r3, [r7, #14]
 8019a32:	b29a      	uxth	r2, r3
 8019a34:	89bb      	ldrh	r3, [r7, #12]
 8019a36:	4413      	add	r3, r2
 8019a38:	b29b      	uxth	r3, r3
 8019a3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019a3e:	4619      	mov	r1, r3
 8019a40:	2036      	movs	r0, #54	@ 0x36
 8019a42:	f7fa fb9d 	bl	8014180 <pbuf_alloc>
 8019a46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	f000 80b7 	beq.w	8019bbe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019a50:	697b      	ldr	r3, [r7, #20]
 8019a52:	685b      	ldr	r3, [r3, #4]
 8019a54:	891a      	ldrh	r2, [r3, #8]
 8019a56:	697b      	ldr	r3, [r7, #20]
 8019a58:	891b      	ldrh	r3, [r3, #8]
 8019a5a:	1ad3      	subs	r3, r2, r3
 8019a5c:	b29a      	uxth	r2, r3
 8019a5e:	887b      	ldrh	r3, [r7, #2]
 8019a60:	4413      	add	r3, r2
 8019a62:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019a64:	697b      	ldr	r3, [r7, #20]
 8019a66:	6858      	ldr	r0, [r3, #4]
 8019a68:	693b      	ldr	r3, [r7, #16]
 8019a6a:	685a      	ldr	r2, [r3, #4]
 8019a6c:	7bbb      	ldrb	r3, [r7, #14]
 8019a6e:	18d1      	adds	r1, r2, r3
 8019a70:	897b      	ldrh	r3, [r7, #10]
 8019a72:	89ba      	ldrh	r2, [r7, #12]
 8019a74:	f7fb f86e 	bl	8014b54 <pbuf_copy_partial>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	461a      	mov	r2, r3
 8019a7c:	89bb      	ldrh	r3, [r7, #12]
 8019a7e:	4293      	cmp	r3, r2
 8019a80:	f040 809f 	bne.w	8019bc2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019a84:	697b      	ldr	r3, [r7, #20]
 8019a86:	68db      	ldr	r3, [r3, #12]
 8019a88:	899b      	ldrh	r3, [r3, #12]
 8019a8a:	b29b      	uxth	r3, r3
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7f9 f99d 	bl	8012dcc <lwip_htons>
 8019a92:	4603      	mov	r3, r0
 8019a94:	b2db      	uxtb	r3, r3
 8019a96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019a9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019aa0:	7efb      	ldrb	r3, [r7, #27]
 8019aa2:	f003 0308 	and.w	r3, r3, #8
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d007      	beq.n	8019aba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019aaa:	7efb      	ldrb	r3, [r7, #27]
 8019aac:	f023 0308 	bic.w	r3, r3, #8
 8019ab0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019ab2:	7ebb      	ldrb	r3, [r7, #26]
 8019ab4:	f043 0308 	orr.w	r3, r3, #8
 8019ab8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8019aba:	7efb      	ldrb	r3, [r7, #27]
 8019abc:	f003 0301 	and.w	r3, r3, #1
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d007      	beq.n	8019ad4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019ac4:	7efb      	ldrb	r3, [r7, #27]
 8019ac6:	f023 0301 	bic.w	r3, r3, #1
 8019aca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019acc:	7ebb      	ldrb	r3, [r7, #26]
 8019ace:	f043 0301 	orr.w	r3, r3, #1
 8019ad2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019ad4:	697b      	ldr	r3, [r7, #20]
 8019ad6:	68db      	ldr	r3, [r3, #12]
 8019ad8:	685b      	ldr	r3, [r3, #4]
 8019ada:	4618      	mov	r0, r3
 8019adc:	f7f9 f98c 	bl	8012df8 <lwip_htonl>
 8019ae0:	4602      	mov	r2, r0
 8019ae2:	887b      	ldrh	r3, [r7, #2]
 8019ae4:	18d1      	adds	r1, r2, r3
 8019ae6:	7eba      	ldrb	r2, [r7, #26]
 8019ae8:	7bfb      	ldrb	r3, [r7, #15]
 8019aea:	9300      	str	r3, [sp, #0]
 8019aec:	460b      	mov	r3, r1
 8019aee:	6939      	ldr	r1, [r7, #16]
 8019af0:	6878      	ldr	r0, [r7, #4]
 8019af2:	f7ff fa33 	bl	8018f5c <tcp_create_segment>
 8019af6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d063      	beq.n	8019bc6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019afe:	697b      	ldr	r3, [r7, #20]
 8019b00:	685b      	ldr	r3, [r3, #4]
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7fa feae 	bl	8014864 <pbuf_clen>
 8019b08:	4603      	mov	r3, r0
 8019b0a:	461a      	mov	r2, r3
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019b12:	1a9b      	subs	r3, r3, r2
 8019b14:	b29a      	uxth	r2, r3
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019b1c:	697b      	ldr	r3, [r7, #20]
 8019b1e:	6858      	ldr	r0, [r3, #4]
 8019b20:	697b      	ldr	r3, [r7, #20]
 8019b22:	685b      	ldr	r3, [r3, #4]
 8019b24:	891a      	ldrh	r2, [r3, #8]
 8019b26:	89bb      	ldrh	r3, [r7, #12]
 8019b28:	1ad3      	subs	r3, r2, r3
 8019b2a:	b29b      	uxth	r3, r3
 8019b2c:	4619      	mov	r1, r3
 8019b2e:	f7fa fc85 	bl	801443c <pbuf_realloc>
  useg->len -= remainder;
 8019b32:	697b      	ldr	r3, [r7, #20]
 8019b34:	891a      	ldrh	r2, [r3, #8]
 8019b36:	89bb      	ldrh	r3, [r7, #12]
 8019b38:	1ad3      	subs	r3, r2, r3
 8019b3a:	b29a      	uxth	r2, r3
 8019b3c:	697b      	ldr	r3, [r7, #20]
 8019b3e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019b40:	697b      	ldr	r3, [r7, #20]
 8019b42:	68db      	ldr	r3, [r3, #12]
 8019b44:	899b      	ldrh	r3, [r3, #12]
 8019b46:	b29c      	uxth	r4, r3
 8019b48:	7efb      	ldrb	r3, [r7, #27]
 8019b4a:	b29b      	uxth	r3, r3
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	f7f9 f93d 	bl	8012dcc <lwip_htons>
 8019b52:	4603      	mov	r3, r0
 8019b54:	461a      	mov	r2, r3
 8019b56:	697b      	ldr	r3, [r7, #20]
 8019b58:	68db      	ldr	r3, [r3, #12]
 8019b5a:	4322      	orrs	r2, r4
 8019b5c:	b292      	uxth	r2, r2
 8019b5e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019b60:	697b      	ldr	r3, [r7, #20]
 8019b62:	685b      	ldr	r3, [r3, #4]
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7fa fe7d 	bl	8014864 <pbuf_clen>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	461a      	mov	r2, r3
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019b74:	4413      	add	r3, r2
 8019b76:	b29a      	uxth	r2, r3
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019b7e:	69fb      	ldr	r3, [r7, #28]
 8019b80:	685b      	ldr	r3, [r3, #4]
 8019b82:	4618      	mov	r0, r3
 8019b84:	f7fa fe6e 	bl	8014864 <pbuf_clen>
 8019b88:	4603      	mov	r3, r0
 8019b8a:	461a      	mov	r2, r3
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019b92:	4413      	add	r3, r2
 8019b94:	b29a      	uxth	r2, r3
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019b9c:	697b      	ldr	r3, [r7, #20]
 8019b9e:	681a      	ldr	r2, [r3, #0]
 8019ba0:	69fb      	ldr	r3, [r7, #28]
 8019ba2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019ba4:	697b      	ldr	r3, [r7, #20]
 8019ba6:	69fa      	ldr	r2, [r7, #28]
 8019ba8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8019baa:	69fb      	ldr	r3, [r7, #28]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d103      	bne.n	8019bba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	2200      	movs	r2, #0
 8019bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8019bba:	2300      	movs	r3, #0
 8019bbc:	e01e      	b.n	8019bfc <tcp_split_unsent_seg+0x27c>
    goto memerr;
 8019bbe:	bf00      	nop
 8019bc0:	e002      	b.n	8019bc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019bc2:	bf00      	nop
 8019bc4:	e000      	b.n	8019bc8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019bc6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 8019bc8:	4b14      	ldr	r3, [pc, #80]	@ (8019c1c <tcp_split_unsent_seg+0x29c>)
 8019bca:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019bce:	3301      	adds	r3, #1
 8019bd0:	b29a      	uxth	r2, r3
 8019bd2:	4b12      	ldr	r3, [pc, #72]	@ (8019c1c <tcp_split_unsent_seg+0x29c>)
 8019bd4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019bd8:	69fb      	ldr	r3, [r7, #28]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d006      	beq.n	8019bec <tcp_split_unsent_seg+0x26c>
 8019bde:	4b09      	ldr	r3, [pc, #36]	@ (8019c04 <tcp_split_unsent_seg+0x284>)
 8019be0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8019be4:	490e      	ldr	r1, [pc, #56]	@ (8019c20 <tcp_split_unsent_seg+0x2a0>)
 8019be6:	4809      	ldr	r0, [pc, #36]	@ (8019c0c <tcp_split_unsent_seg+0x28c>)
 8019be8:	f006 f800 	bl	801fbec <iprintf>
  if (p != NULL) {
 8019bec:	693b      	ldr	r3, [r7, #16]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d002      	beq.n	8019bf8 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 8019bf2:	6938      	ldr	r0, [r7, #16]
 8019bf4:	f7fa fda8 	bl	8014748 <pbuf_free>
  }

  return ERR_MEM;
 8019bf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019bfc:	4618      	mov	r0, r3
 8019bfe:	3724      	adds	r7, #36	@ 0x24
 8019c00:	46bd      	mov	sp, r7
 8019c02:	bd90      	pop	{r4, r7, pc}
 8019c04:	08022eac 	.word	0x08022eac
 8019c08:	08023240 	.word	0x08023240
 8019c0c:	08022f00 	.word	0x08022f00
 8019c10:	08023264 	.word	0x08023264
 8019c14:	08023288 	.word	0x08023288
 8019c18:	08023298 	.word	0x08023298
 8019c1c:	2002d2b0 	.word	0x2002d2b0
 8019c20:	080232a8 	.word	0x080232a8

08019c24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019c24:	b590      	push	{r4, r7, lr}
 8019c26:	b085      	sub	sp, #20
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d106      	bne.n	8019c40 <tcp_send_fin+0x1c>
 8019c32:	4b21      	ldr	r3, [pc, #132]	@ (8019cb8 <tcp_send_fin+0x94>)
 8019c34:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8019c38:	4920      	ldr	r1, [pc, #128]	@ (8019cbc <tcp_send_fin+0x98>)
 8019c3a:	4821      	ldr	r0, [pc, #132]	@ (8019cc0 <tcp_send_fin+0x9c>)
 8019c3c:	f005 ffd6 	bl	801fbec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d02e      	beq.n	8019ca6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019c4c:	60fb      	str	r3, [r7, #12]
 8019c4e:	e002      	b.n	8019c56 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d1f8      	bne.n	8019c50 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	68db      	ldr	r3, [r3, #12]
 8019c62:	899b      	ldrh	r3, [r3, #12]
 8019c64:	b29b      	uxth	r3, r3
 8019c66:	4618      	mov	r0, r3
 8019c68:	f7f9 f8b0 	bl	8012dcc <lwip_htons>
 8019c6c:	4603      	mov	r3, r0
 8019c6e:	b2db      	uxtb	r3, r3
 8019c70:	f003 0307 	and.w	r3, r3, #7
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d116      	bne.n	8019ca6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	68db      	ldr	r3, [r3, #12]
 8019c7c:	899b      	ldrh	r3, [r3, #12]
 8019c7e:	b29c      	uxth	r4, r3
 8019c80:	2001      	movs	r0, #1
 8019c82:	f7f9 f8a3 	bl	8012dcc <lwip_htons>
 8019c86:	4603      	mov	r3, r0
 8019c88:	461a      	mov	r2, r3
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	68db      	ldr	r3, [r3, #12]
 8019c8e:	4322      	orrs	r2, r4
 8019c90:	b292      	uxth	r2, r2
 8019c92:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	8b5b      	ldrh	r3, [r3, #26]
 8019c98:	f043 0320 	orr.w	r3, r3, #32
 8019c9c:	b29a      	uxth	r2, r3
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	e004      	b.n	8019cb0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019ca6:	2101      	movs	r1, #1
 8019ca8:	6878      	ldr	r0, [r7, #4]
 8019caa:	f000 f80b 	bl	8019cc4 <tcp_enqueue_flags>
 8019cae:	4603      	mov	r3, r0
}
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	3714      	adds	r7, #20
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	bd90      	pop	{r4, r7, pc}
 8019cb8:	08022eac 	.word	0x08022eac
 8019cbc:	080232b4 	.word	0x080232b4
 8019cc0:	08022f00 	.word	0x08022f00

08019cc4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b08a      	sub	sp, #40	@ 0x28
 8019cc8:	af02      	add	r7, sp, #8
 8019cca:	6078      	str	r0, [r7, #4]
 8019ccc:	460b      	mov	r3, r1
 8019cce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019cd8:	78fb      	ldrb	r3, [r7, #3]
 8019cda:	f003 0303 	and.w	r3, r3, #3
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d106      	bne.n	8019cf0 <tcp_enqueue_flags+0x2c>
 8019ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8019ea0 <tcp_enqueue_flags+0x1dc>)
 8019ce4:	f240 4211 	movw	r2, #1041	@ 0x411
 8019ce8:	496e      	ldr	r1, [pc, #440]	@ (8019ea4 <tcp_enqueue_flags+0x1e0>)
 8019cea:	486f      	ldr	r0, [pc, #444]	@ (8019ea8 <tcp_enqueue_flags+0x1e4>)
 8019cec:	f005 ff7e 	bl	801fbec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d106      	bne.n	8019d04 <tcp_enqueue_flags+0x40>
 8019cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8019ea0 <tcp_enqueue_flags+0x1dc>)
 8019cf8:	f240 4213 	movw	r2, #1043	@ 0x413
 8019cfc:	496b      	ldr	r1, [pc, #428]	@ (8019eac <tcp_enqueue_flags+0x1e8>)
 8019cfe:	486a      	ldr	r0, [pc, #424]	@ (8019ea8 <tcp_enqueue_flags+0x1e4>)
 8019d00:	f005 ff74 	bl	801fbec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019d04:	78fb      	ldrb	r3, [r7, #3]
 8019d06:	f003 0302 	and.w	r3, r3, #2
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d001      	beq.n	8019d12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019d0e:	2301      	movs	r3, #1
 8019d10:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019d12:	7ffb      	ldrb	r3, [r7, #31]
 8019d14:	009b      	lsls	r3, r3, #2
 8019d16:	b2db      	uxtb	r3, r3
 8019d18:	f003 0304 	and.w	r3, r3, #4
 8019d1c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019d1e:	7dfb      	ldrb	r3, [r7, #23]
 8019d20:	b29b      	uxth	r3, r3
 8019d22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019d26:	4619      	mov	r1, r3
 8019d28:	2036      	movs	r0, #54	@ 0x36
 8019d2a:	f7fa fa29 	bl	8014180 <pbuf_alloc>
 8019d2e:	6138      	str	r0, [r7, #16]
 8019d30:	693b      	ldr	r3, [r7, #16]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d111      	bne.n	8019d5a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	8b5b      	ldrh	r3, [r3, #26]
 8019d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d3e:	b29a      	uxth	r2, r3
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8019d44:	4b5a      	ldr	r3, [pc, #360]	@ (8019eb0 <tcp_enqueue_flags+0x1ec>)
 8019d46:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019d4a:	3301      	adds	r3, #1
 8019d4c:	b29a      	uxth	r2, r3
 8019d4e:	4b58      	ldr	r3, [pc, #352]	@ (8019eb0 <tcp_enqueue_flags+0x1ec>)
 8019d50:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 8019d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019d58:	e09d      	b.n	8019e96 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019d5a:	693b      	ldr	r3, [r7, #16]
 8019d5c:	895a      	ldrh	r2, [r3, #10]
 8019d5e:	7dfb      	ldrb	r3, [r7, #23]
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d206      	bcs.n	8019d74 <tcp_enqueue_flags+0xb0>
 8019d66:	4b4e      	ldr	r3, [pc, #312]	@ (8019ea0 <tcp_enqueue_flags+0x1dc>)
 8019d68:	f240 4239 	movw	r2, #1081	@ 0x439
 8019d6c:	4951      	ldr	r1, [pc, #324]	@ (8019eb4 <tcp_enqueue_flags+0x1f0>)
 8019d6e:	484e      	ldr	r0, [pc, #312]	@ (8019ea8 <tcp_enqueue_flags+0x1e4>)
 8019d70:	f005 ff3c 	bl	801fbec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019d78:	78fa      	ldrb	r2, [r7, #3]
 8019d7a:	7ffb      	ldrb	r3, [r7, #31]
 8019d7c:	9300      	str	r3, [sp, #0]
 8019d7e:	460b      	mov	r3, r1
 8019d80:	6939      	ldr	r1, [r7, #16]
 8019d82:	6878      	ldr	r0, [r7, #4]
 8019d84:	f7ff f8ea 	bl	8018f5c <tcp_create_segment>
 8019d88:	60f8      	str	r0, [r7, #12]
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d111      	bne.n	8019db4 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	8b5b      	ldrh	r3, [r3, #26]
 8019d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d98:	b29a      	uxth	r2, r3
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8019d9e:	4b44      	ldr	r3, [pc, #272]	@ (8019eb0 <tcp_enqueue_flags+0x1ec>)
 8019da0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019da4:	3301      	adds	r3, #1
 8019da6:	b29a      	uxth	r2, r3
 8019da8:	4b41      	ldr	r3, [pc, #260]	@ (8019eb0 <tcp_enqueue_flags+0x1ec>)
 8019daa:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 8019dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019db2:	e070      	b.n	8019e96 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	68db      	ldr	r3, [r3, #12]
 8019db8:	f003 0303 	and.w	r3, r3, #3
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d006      	beq.n	8019dce <tcp_enqueue_flags+0x10a>
 8019dc0:	4b37      	ldr	r3, [pc, #220]	@ (8019ea0 <tcp_enqueue_flags+0x1dc>)
 8019dc2:	f240 4242 	movw	r2, #1090	@ 0x442
 8019dc6:	493c      	ldr	r1, [pc, #240]	@ (8019eb8 <tcp_enqueue_flags+0x1f4>)
 8019dc8:	4837      	ldr	r0, [pc, #220]	@ (8019ea8 <tcp_enqueue_flags+0x1e4>)
 8019dca:	f005 ff0f 	bl	801fbec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	891b      	ldrh	r3, [r3, #8]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d006      	beq.n	8019de4 <tcp_enqueue_flags+0x120>
 8019dd6:	4b32      	ldr	r3, [pc, #200]	@ (8019ea0 <tcp_enqueue_flags+0x1dc>)
 8019dd8:	f240 4243 	movw	r2, #1091	@ 0x443
 8019ddc:	4937      	ldr	r1, [pc, #220]	@ (8019ebc <tcp_enqueue_flags+0x1f8>)
 8019dde:	4832      	ldr	r0, [pc, #200]	@ (8019ea8 <tcp_enqueue_flags+0x1e4>)
 8019de0:	f005 ff04 	bl	801fbec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d103      	bne.n	8019df4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	68fa      	ldr	r2, [r7, #12]
 8019df0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019df2:	e00d      	b.n	8019e10 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019df8:	61bb      	str	r3, [r7, #24]
 8019dfa:	e002      	b.n	8019e02 <tcp_enqueue_flags+0x13e>
 8019dfc:	69bb      	ldr	r3, [r7, #24]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	61bb      	str	r3, [r7, #24]
 8019e02:	69bb      	ldr	r3, [r7, #24]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d1f8      	bne.n	8019dfc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8019e0a:	69bb      	ldr	r3, [r7, #24]
 8019e0c:	68fa      	ldr	r2, [r7, #12]
 8019e0e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	2200      	movs	r2, #0
 8019e14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019e18:	78fb      	ldrb	r3, [r7, #3]
 8019e1a:	f003 0302 	and.w	r3, r3, #2
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d104      	bne.n	8019e2c <tcp_enqueue_flags+0x168>
 8019e22:	78fb      	ldrb	r3, [r7, #3]
 8019e24:	f003 0301 	and.w	r3, r3, #1
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d004      	beq.n	8019e36 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019e30:	1c5a      	adds	r2, r3, #1
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019e36:	78fb      	ldrb	r3, [r7, #3]
 8019e38:	f003 0301 	and.w	r3, r3, #1
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d006      	beq.n	8019e4e <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	8b5b      	ldrh	r3, [r3, #26]
 8019e44:	f043 0320 	orr.w	r3, r3, #32
 8019e48:	b29a      	uxth	r2, r3
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	685b      	ldr	r3, [r3, #4]
 8019e52:	4618      	mov	r0, r3
 8019e54:	f7fa fd06 	bl	8014864 <pbuf_clen>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	461a      	mov	r2, r3
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019e62:	4413      	add	r3, r2
 8019e64:	b29a      	uxth	r2, r3
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d00e      	beq.n	8019e94 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d10a      	bne.n	8019e94 <tcp_enqueue_flags+0x1d0>
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d106      	bne.n	8019e94 <tcp_enqueue_flags+0x1d0>
 8019e86:	4b06      	ldr	r3, [pc, #24]	@ (8019ea0 <tcp_enqueue_flags+0x1dc>)
 8019e88:	f240 4265 	movw	r2, #1125	@ 0x465
 8019e8c:	490c      	ldr	r1, [pc, #48]	@ (8019ec0 <tcp_enqueue_flags+0x1fc>)
 8019e8e:	4806      	ldr	r0, [pc, #24]	@ (8019ea8 <tcp_enqueue_flags+0x1e4>)
 8019e90:	f005 feac 	bl	801fbec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019e94:	2300      	movs	r3, #0
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	3720      	adds	r7, #32
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	bd80      	pop	{r7, pc}
 8019e9e:	bf00      	nop
 8019ea0:	08022eac 	.word	0x08022eac
 8019ea4:	080232d0 	.word	0x080232d0
 8019ea8:	08022f00 	.word	0x08022f00
 8019eac:	08023328 	.word	0x08023328
 8019eb0:	2002d2b0 	.word	0x2002d2b0
 8019eb4:	08023348 	.word	0x08023348
 8019eb8:	08023384 	.word	0x08023384
 8019ebc:	0802339c 	.word	0x0802339c
 8019ec0:	080233c8 	.word	0x080233c8

08019ec4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019ec4:	b5b0      	push	{r4, r5, r7, lr}
 8019ec6:	b08a      	sub	sp, #40	@ 0x28
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d106      	bne.n	8019ee0 <tcp_output+0x1c>
 8019ed2:	4b8a      	ldr	r3, [pc, #552]	@ (801a0fc <tcp_output+0x238>)
 8019ed4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8019ed8:	4989      	ldr	r1, [pc, #548]	@ (801a100 <tcp_output+0x23c>)
 8019eda:	488a      	ldr	r0, [pc, #552]	@ (801a104 <tcp_output+0x240>)
 8019edc:	f005 fe86 	bl	801fbec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	7d1b      	ldrb	r3, [r3, #20]
 8019ee4:	2b01      	cmp	r3, #1
 8019ee6:	d106      	bne.n	8019ef6 <tcp_output+0x32>
 8019ee8:	4b84      	ldr	r3, [pc, #528]	@ (801a0fc <tcp_output+0x238>)
 8019eea:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8019eee:	4986      	ldr	r1, [pc, #536]	@ (801a108 <tcp_output+0x244>)
 8019ef0:	4884      	ldr	r0, [pc, #528]	@ (801a104 <tcp_output+0x240>)
 8019ef2:	f005 fe7b 	bl	801fbec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019ef6:	4b85      	ldr	r3, [pc, #532]	@ (801a10c <tcp_output+0x248>)
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	687a      	ldr	r2, [r7, #4]
 8019efc:	429a      	cmp	r2, r3
 8019efe:	d101      	bne.n	8019f04 <tcp_output+0x40>
    return ERR_OK;
 8019f00:	2300      	movs	r3, #0
 8019f02:	e1ce      	b.n	801a2a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019f10:	4293      	cmp	r3, r2
 8019f12:	bf28      	it	cs
 8019f14:	4613      	movcs	r3, r2
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8019f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d10b      	bne.n	8019f3e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	8b5b      	ldrh	r3, [r3, #26]
 8019f2a:	f003 0302 	and.w	r3, r3, #2
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	f000 81aa 	beq.w	801a288 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019f34:	6878      	ldr	r0, [r7, #4]
 8019f36:	f000 fddf 	bl	801aaf8 <tcp_send_empty_ack>
 8019f3a:	4603      	mov	r3, r0
 8019f3c:	e1b1      	b.n	801a2a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019f3e:	6879      	ldr	r1, [r7, #4]
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	3304      	adds	r3, #4
 8019f44:	461a      	mov	r2, r3
 8019f46:	6878      	ldr	r0, [r7, #4]
 8019f48:	f7fe ffec 	bl	8018f24 <tcp_route>
 8019f4c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019f4e:	697b      	ldr	r3, [r7, #20]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d102      	bne.n	8019f5a <tcp_output+0x96>
    return ERR_RTE;
 8019f54:	f06f 0303 	mvn.w	r3, #3
 8019f58:	e1a3      	b.n	801a2a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d003      	beq.n	8019f68 <tcp_output+0xa4>
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d111      	bne.n	8019f8c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019f68:	697b      	ldr	r3, [r7, #20]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d002      	beq.n	8019f74 <tcp_output+0xb0>
 8019f6e:	697b      	ldr	r3, [r7, #20]
 8019f70:	3304      	adds	r3, #4
 8019f72:	e000      	b.n	8019f76 <tcp_output+0xb2>
 8019f74:	2300      	movs	r3, #0
 8019f76:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019f78:	693b      	ldr	r3, [r7, #16]
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d102      	bne.n	8019f84 <tcp_output+0xc0>
      return ERR_RTE;
 8019f7e:	f06f 0303 	mvn.w	r3, #3
 8019f82:	e18e      	b.n	801a2a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019f84:	693b      	ldr	r3, [r7, #16]
 8019f86:	681a      	ldr	r2, [r3, #0]
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f8e:	68db      	ldr	r3, [r3, #12]
 8019f90:	685b      	ldr	r3, [r3, #4]
 8019f92:	4618      	mov	r0, r3
 8019f94:	f7f8 ff30 	bl	8012df8 <lwip_htonl>
 8019f98:	4602      	mov	r2, r0
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019f9e:	1ad3      	subs	r3, r2, r3
 8019fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019fa2:	8912      	ldrh	r2, [r2, #8]
 8019fa4:	4413      	add	r3, r2
 8019fa6:	69ba      	ldr	r2, [r7, #24]
 8019fa8:	429a      	cmp	r2, r3
 8019faa:	d227      	bcs.n	8019ffc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019fb2:	461a      	mov	r2, r3
 8019fb4:	69bb      	ldr	r3, [r7, #24]
 8019fb6:	4293      	cmp	r3, r2
 8019fb8:	d114      	bne.n	8019fe4 <tcp_output+0x120>
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d110      	bne.n	8019fe4 <tcp_output+0x120>
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d10b      	bne.n	8019fe4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	2200      	movs	r2, #0
 8019fd0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	2201      	movs	r2, #1
 8019fd8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	2200      	movs	r2, #0
 8019fe0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	8b5b      	ldrh	r3, [r3, #26]
 8019fe8:	f003 0302 	and.w	r3, r3, #2
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	f000 814d 	beq.w	801a28c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019ff2:	6878      	ldr	r0, [r7, #4]
 8019ff4:	f000 fd80 	bl	801aaf8 <tcp_send_empty_ack>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	e152      	b.n	801a2a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	2200      	movs	r2, #0
 801a000:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a008:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a00a:	6a3b      	ldr	r3, [r7, #32]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	f000 811c 	beq.w	801a24a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801a012:	e002      	b.n	801a01a <tcp_output+0x156>
 801a014:	6a3b      	ldr	r3, [r7, #32]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	623b      	str	r3, [r7, #32]
 801a01a:	6a3b      	ldr	r3, [r7, #32]
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d1f8      	bne.n	801a014 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a022:	e112      	b.n	801a24a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a026:	68db      	ldr	r3, [r3, #12]
 801a028:	899b      	ldrh	r3, [r3, #12]
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	4618      	mov	r0, r3
 801a02e:	f7f8 fecd 	bl	8012dcc <lwip_htons>
 801a032:	4603      	mov	r3, r0
 801a034:	b2db      	uxtb	r3, r3
 801a036:	f003 0304 	and.w	r3, r3, #4
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d006      	beq.n	801a04c <tcp_output+0x188>
 801a03e:	4b2f      	ldr	r3, [pc, #188]	@ (801a0fc <tcp_output+0x238>)
 801a040:	f240 5236 	movw	r2, #1334	@ 0x536
 801a044:	4932      	ldr	r1, [pc, #200]	@ (801a110 <tcp_output+0x24c>)
 801a046:	482f      	ldr	r0, [pc, #188]	@ (801a104 <tcp_output+0x240>)
 801a048:	f005 fdd0 	bl	801fbec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a050:	2b00      	cmp	r3, #0
 801a052:	d01f      	beq.n	801a094 <tcp_output+0x1d0>
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	8b5b      	ldrh	r3, [r3, #26]
 801a058:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d119      	bne.n	801a094 <tcp_output+0x1d0>
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a064:	2b00      	cmp	r3, #0
 801a066:	d00b      	beq.n	801a080 <tcp_output+0x1bc>
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d110      	bne.n	801a094 <tcp_output+0x1d0>
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a076:	891a      	ldrh	r2, [r3, #8]
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a07c:	429a      	cmp	r2, r3
 801a07e:	d209      	bcs.n	801a094 <tcp_output+0x1d0>
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a086:	2b00      	cmp	r3, #0
 801a088:	d004      	beq.n	801a094 <tcp_output+0x1d0>
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a090:	2b08      	cmp	r3, #8
 801a092:	d901      	bls.n	801a098 <tcp_output+0x1d4>
 801a094:	2301      	movs	r3, #1
 801a096:	e000      	b.n	801a09a <tcp_output+0x1d6>
 801a098:	2300      	movs	r3, #0
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d106      	bne.n	801a0ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	8b5b      	ldrh	r3, [r3, #26]
 801a0a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	f000 80e4 	beq.w	801a274 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	7d1b      	ldrb	r3, [r3, #20]
 801a0b0:	2b02      	cmp	r3, #2
 801a0b2:	d00d      	beq.n	801a0d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0b6:	68db      	ldr	r3, [r3, #12]
 801a0b8:	899b      	ldrh	r3, [r3, #12]
 801a0ba:	b29c      	uxth	r4, r3
 801a0bc:	2010      	movs	r0, #16
 801a0be:	f7f8 fe85 	bl	8012dcc <lwip_htons>
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	461a      	mov	r2, r3
 801a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0c8:	68db      	ldr	r3, [r3, #12]
 801a0ca:	4322      	orrs	r2, r4
 801a0cc:	b292      	uxth	r2, r2
 801a0ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a0d0:	697a      	ldr	r2, [r7, #20]
 801a0d2:	6879      	ldr	r1, [r7, #4]
 801a0d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a0d6:	f000 f909 	bl	801a2ec <tcp_output_segment>
 801a0da:	4603      	mov	r3, r0
 801a0dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0e2:	2b00      	cmp	r3, #0
 801a0e4:	d016      	beq.n	801a114 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	8b5b      	ldrh	r3, [r3, #26]
 801a0ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a0ee:	b29a      	uxth	r2, r3
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	835a      	strh	r2, [r3, #26]
      return err;
 801a0f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0f8:	e0d3      	b.n	801a2a2 <tcp_output+0x3de>
 801a0fa:	bf00      	nop
 801a0fc:	08022eac 	.word	0x08022eac
 801a100:	080233f0 	.word	0x080233f0
 801a104:	08022f00 	.word	0x08022f00
 801a108:	08023408 	.word	0x08023408
 801a10c:	2002d3f8 	.word	0x2002d3f8
 801a110:	08023430 	.word	0x08023430
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a116:	681a      	ldr	r2, [r3, #0]
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	7d1b      	ldrb	r3, [r3, #20]
 801a120:	2b02      	cmp	r3, #2
 801a122:	d006      	beq.n	801a132 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	8b5b      	ldrh	r3, [r3, #26]
 801a128:	f023 0303 	bic.w	r3, r3, #3
 801a12c:	b29a      	uxth	r2, r3
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a134:	68db      	ldr	r3, [r3, #12]
 801a136:	685b      	ldr	r3, [r3, #4]
 801a138:	4618      	mov	r0, r3
 801a13a:	f7f8 fe5d 	bl	8012df8 <lwip_htonl>
 801a13e:	4604      	mov	r4, r0
 801a140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a142:	891b      	ldrh	r3, [r3, #8]
 801a144:	461d      	mov	r5, r3
 801a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	899b      	ldrh	r3, [r3, #12]
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	4618      	mov	r0, r3
 801a150:	f7f8 fe3c 	bl	8012dcc <lwip_htons>
 801a154:	4603      	mov	r3, r0
 801a156:	b2db      	uxtb	r3, r3
 801a158:	f003 0303 	and.w	r3, r3, #3
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d001      	beq.n	801a164 <tcp_output+0x2a0>
 801a160:	2301      	movs	r3, #1
 801a162:	e000      	b.n	801a166 <tcp_output+0x2a2>
 801a164:	2300      	movs	r3, #0
 801a166:	442b      	add	r3, r5
 801a168:	4423      	add	r3, r4
 801a16a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	1ad3      	subs	r3, r2, r3
 801a174:	2b00      	cmp	r3, #0
 801a176:	da02      	bge.n	801a17e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	68ba      	ldr	r2, [r7, #8]
 801a17c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a180:	891b      	ldrh	r3, [r3, #8]
 801a182:	461c      	mov	r4, r3
 801a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a186:	68db      	ldr	r3, [r3, #12]
 801a188:	899b      	ldrh	r3, [r3, #12]
 801a18a:	b29b      	uxth	r3, r3
 801a18c:	4618      	mov	r0, r3
 801a18e:	f7f8 fe1d 	bl	8012dcc <lwip_htons>
 801a192:	4603      	mov	r3, r0
 801a194:	b2db      	uxtb	r3, r3
 801a196:	f003 0303 	and.w	r3, r3, #3
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d001      	beq.n	801a1a2 <tcp_output+0x2de>
 801a19e:	2301      	movs	r3, #1
 801a1a0:	e000      	b.n	801a1a4 <tcp_output+0x2e0>
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	4423      	add	r3, r4
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d049      	beq.n	801a23e <tcp_output+0x37a>
      seg->next = NULL;
 801a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d105      	bne.n	801a1c4 <tcp_output+0x300>
        pcb->unacked = seg;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a1bc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1c0:	623b      	str	r3, [r7, #32]
 801a1c2:	e03f      	b.n	801a244 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1c6:	68db      	ldr	r3, [r3, #12]
 801a1c8:	685b      	ldr	r3, [r3, #4]
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7f8 fe14 	bl	8012df8 <lwip_htonl>
 801a1d0:	4604      	mov	r4, r0
 801a1d2:	6a3b      	ldr	r3, [r7, #32]
 801a1d4:	68db      	ldr	r3, [r3, #12]
 801a1d6:	685b      	ldr	r3, [r3, #4]
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7f8 fe0d 	bl	8012df8 <lwip_htonl>
 801a1de:	4603      	mov	r3, r0
 801a1e0:	1ae3      	subs	r3, r4, r3
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	da24      	bge.n	801a230 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	3370      	adds	r3, #112	@ 0x70
 801a1ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a1ec:	e002      	b.n	801a1f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a1ee:	69fb      	ldr	r3, [r7, #28]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a1f4:	69fb      	ldr	r3, [r7, #28]
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d011      	beq.n	801a220 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a1fc:	69fb      	ldr	r3, [r7, #28]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	68db      	ldr	r3, [r3, #12]
 801a202:	685b      	ldr	r3, [r3, #4]
 801a204:	4618      	mov	r0, r3
 801a206:	f7f8 fdf7 	bl	8012df8 <lwip_htonl>
 801a20a:	4604      	mov	r4, r0
 801a20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a20e:	68db      	ldr	r3, [r3, #12]
 801a210:	685b      	ldr	r3, [r3, #4]
 801a212:	4618      	mov	r0, r3
 801a214:	f7f8 fdf0 	bl	8012df8 <lwip_htonl>
 801a218:	4603      	mov	r3, r0
 801a21a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	dbe6      	blt.n	801a1ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801a220:	69fb      	ldr	r3, [r7, #28]
 801a222:	681a      	ldr	r2, [r3, #0]
 801a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a226:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a228:	69fb      	ldr	r3, [r7, #28]
 801a22a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a22c:	601a      	str	r2, [r3, #0]
 801a22e:	e009      	b.n	801a244 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a230:	6a3b      	ldr	r3, [r7, #32]
 801a232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a234:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a236:	6a3b      	ldr	r3, [r7, #32]
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	623b      	str	r3, [r7, #32]
 801a23c:	e002      	b.n	801a244 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a23e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a240:	f7fb fe55 	bl	8015eee <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a248:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d012      	beq.n	801a276 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a252:	68db      	ldr	r3, [r3, #12]
 801a254:	685b      	ldr	r3, [r3, #4]
 801a256:	4618      	mov	r0, r3
 801a258:	f7f8 fdce 	bl	8012df8 <lwip_htonl>
 801a25c:	4602      	mov	r2, r0
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a262:	1ad3      	subs	r3, r2, r3
 801a264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a266:	8912      	ldrh	r2, [r2, #8]
 801a268:	4413      	add	r3, r2
  while (seg != NULL &&
 801a26a:	69ba      	ldr	r2, [r7, #24]
 801a26c:	429a      	cmp	r2, r3
 801a26e:	f4bf aed9 	bcs.w	801a024 <tcp_output+0x160>
 801a272:	e000      	b.n	801a276 <tcp_output+0x3b2>
      break;
 801a274:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d108      	bne.n	801a290 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	2200      	movs	r2, #0
 801a282:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a286:	e004      	b.n	801a292 <tcp_output+0x3ce>
    goto output_done;
 801a288:	bf00      	nop
 801a28a:	e002      	b.n	801a292 <tcp_output+0x3ce>
    goto output_done;
 801a28c:	bf00      	nop
 801a28e:	e000      	b.n	801a292 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a290:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	8b5b      	ldrh	r3, [r3, #26]
 801a296:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a29a:	b29a      	uxth	r2, r3
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a2a0:	2300      	movs	r3, #0
}
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	3728      	adds	r7, #40	@ 0x28
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bdb0      	pop	{r4, r5, r7, pc}
 801a2aa:	bf00      	nop

0801a2ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b082      	sub	sp, #8
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d106      	bne.n	801a2c8 <tcp_output_segment_busy+0x1c>
 801a2ba:	4b09      	ldr	r3, [pc, #36]	@ (801a2e0 <tcp_output_segment_busy+0x34>)
 801a2bc:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a2c0:	4908      	ldr	r1, [pc, #32]	@ (801a2e4 <tcp_output_segment_busy+0x38>)
 801a2c2:	4809      	ldr	r0, [pc, #36]	@ (801a2e8 <tcp_output_segment_busy+0x3c>)
 801a2c4:	f005 fc92 	bl	801fbec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	685b      	ldr	r3, [r3, #4]
 801a2cc:	7b9b      	ldrb	r3, [r3, #14]
 801a2ce:	2b01      	cmp	r3, #1
 801a2d0:	d001      	beq.n	801a2d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	e000      	b.n	801a2d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a2d6:	2300      	movs	r3, #0
}
 801a2d8:	4618      	mov	r0, r3
 801a2da:	3708      	adds	r7, #8
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd80      	pop	{r7, pc}
 801a2e0:	08022eac 	.word	0x08022eac
 801a2e4:	08023448 	.word	0x08023448
 801a2e8:	08022f00 	.word	0x08022f00

0801a2ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a2ec:	b5b0      	push	{r4, r5, r7, lr}
 801a2ee:	b08c      	sub	sp, #48	@ 0x30
 801a2f0:	af04      	add	r7, sp, #16
 801a2f2:	60f8      	str	r0, [r7, #12]
 801a2f4:	60b9      	str	r1, [r7, #8]
 801a2f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d106      	bne.n	801a30c <tcp_output_segment+0x20>
 801a2fe:	4b68      	ldr	r3, [pc, #416]	@ (801a4a0 <tcp_output_segment+0x1b4>)
 801a300:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a304:	4967      	ldr	r1, [pc, #412]	@ (801a4a4 <tcp_output_segment+0x1b8>)
 801a306:	4868      	ldr	r0, [pc, #416]	@ (801a4a8 <tcp_output_segment+0x1bc>)
 801a308:	f005 fc70 	bl	801fbec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d106      	bne.n	801a320 <tcp_output_segment+0x34>
 801a312:	4b63      	ldr	r3, [pc, #396]	@ (801a4a0 <tcp_output_segment+0x1b4>)
 801a314:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a318:	4964      	ldr	r1, [pc, #400]	@ (801a4ac <tcp_output_segment+0x1c0>)
 801a31a:	4863      	ldr	r0, [pc, #396]	@ (801a4a8 <tcp_output_segment+0x1bc>)
 801a31c:	f005 fc66 	bl	801fbec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d106      	bne.n	801a334 <tcp_output_segment+0x48>
 801a326:	4b5e      	ldr	r3, [pc, #376]	@ (801a4a0 <tcp_output_segment+0x1b4>)
 801a328:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a32c:	4960      	ldr	r1, [pc, #384]	@ (801a4b0 <tcp_output_segment+0x1c4>)
 801a32e:	485e      	ldr	r0, [pc, #376]	@ (801a4a8 <tcp_output_segment+0x1bc>)
 801a330:	f005 fc5c 	bl	801fbec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a334:	68f8      	ldr	r0, [r7, #12]
 801a336:	f7ff ffb9 	bl	801a2ac <tcp_output_segment_busy>
 801a33a:	4603      	mov	r3, r0
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d001      	beq.n	801a344 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a340:	2300      	movs	r3, #0
 801a342:	e0a9      	b.n	801a498 <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a344:	68bb      	ldr	r3, [r7, #8]
 801a346:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	68dc      	ldr	r4, [r3, #12]
 801a34c:	4610      	mov	r0, r2
 801a34e:	f7f8 fd53 	bl	8012df8 <lwip_htonl>
 801a352:	4603      	mov	r3, r0
 801a354:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	68dc      	ldr	r4, [r3, #12]
 801a35e:	4610      	mov	r0, r2
 801a360:	f7f8 fd34 	bl	8012dcc <lwip_htons>
 801a364:	4603      	mov	r3, r0
 801a366:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a368:	68bb      	ldr	r3, [r7, #8]
 801a36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a36c:	68ba      	ldr	r2, [r7, #8]
 801a36e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a370:	441a      	add	r2, r3
 801a372:	68bb      	ldr	r3, [r7, #8]
 801a374:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	68db      	ldr	r3, [r3, #12]
 801a37a:	3314      	adds	r3, #20
 801a37c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	7a9b      	ldrb	r3, [r3, #10]
 801a382:	f003 0301 	and.w	r3, r3, #1
 801a386:	2b00      	cmp	r3, #0
 801a388:	d015      	beq.n	801a3b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a38a:	68bb      	ldr	r3, [r7, #8]
 801a38c:	3304      	adds	r3, #4
 801a38e:	461a      	mov	r2, r3
 801a390:	6879      	ldr	r1, [r7, #4]
 801a392:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801a396:	f7fc f999 	bl	80166cc <tcp_eff_send_mss_netif>
 801a39a:	4603      	mov	r3, r0
 801a39c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a39e:	8b7b      	ldrh	r3, [r7, #26]
 801a3a0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	f7f8 fd27 	bl	8012df8 <lwip_htonl>
 801a3aa:	4602      	mov	r2, r0
 801a3ac:	69fb      	ldr	r3, [r7, #28]
 801a3ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a3b0:	69fb      	ldr	r3, [r7, #28]
 801a3b2:	3304      	adds	r3, #4
 801a3b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	da02      	bge.n	801a3c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d10c      	bne.n	801a3e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a3ce:	4b39      	ldr	r3, [pc, #228]	@ (801a4b4 <tcp_output_segment+0x1c8>)
 801a3d0:	681a      	ldr	r2, [r3, #0]
 801a3d2:	68bb      	ldr	r3, [r7, #8]
 801a3d4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	68db      	ldr	r3, [r3, #12]
 801a3da:	685b      	ldr	r3, [r3, #4]
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f7f8 fd0b 	bl	8012df8 <lwip_htonl>
 801a3e2:	4602      	mov	r2, r0
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	68da      	ldr	r2, [r3, #12]
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	685b      	ldr	r3, [r3, #4]
 801a3f0:	685b      	ldr	r3, [r3, #4]
 801a3f2:	1ad3      	subs	r3, r2, r3
 801a3f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	685b      	ldr	r3, [r3, #4]
 801a3fa:	8959      	ldrh	r1, [r3, #10]
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	685b      	ldr	r3, [r3, #4]
 801a400:	8b3a      	ldrh	r2, [r7, #24]
 801a402:	1a8a      	subs	r2, r1, r2
 801a404:	b292      	uxth	r2, r2
 801a406:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	685b      	ldr	r3, [r3, #4]
 801a40c:	8919      	ldrh	r1, [r3, #8]
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	685b      	ldr	r3, [r3, #4]
 801a412:	8b3a      	ldrh	r2, [r7, #24]
 801a414:	1a8a      	subs	r2, r1, r2
 801a416:	b292      	uxth	r2, r2
 801a418:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	685b      	ldr	r3, [r3, #4]
 801a41e:	68fa      	ldr	r2, [r7, #12]
 801a420:	68d2      	ldr	r2, [r2, #12]
 801a422:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	68db      	ldr	r3, [r3, #12]
 801a428:	2200      	movs	r2, #0
 801a42a:	741a      	strb	r2, [r3, #16]
 801a42c:	2200      	movs	r2, #0
 801a42e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	68da      	ldr	r2, [r3, #12]
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	7a9b      	ldrb	r3, [r3, #10]
 801a438:	f003 0301 	and.w	r3, r3, #1
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d001      	beq.n	801a444 <tcp_output_segment+0x158>
 801a440:	2318      	movs	r3, #24
 801a442:	e000      	b.n	801a446 <tcp_output_segment+0x15a>
 801a444:	2314      	movs	r3, #20
 801a446:	4413      	add	r3, r2
 801a448:	69fa      	ldr	r2, [r7, #28]
 801a44a:	429a      	cmp	r2, r3
 801a44c:	d006      	beq.n	801a45c <tcp_output_segment+0x170>
 801a44e:	4b14      	ldr	r3, [pc, #80]	@ (801a4a0 <tcp_output_segment+0x1b4>)
 801a450:	f240 621c 	movw	r2, #1564	@ 0x61c
 801a454:	4918      	ldr	r1, [pc, #96]	@ (801a4b8 <tcp_output_segment+0x1cc>)
 801a456:	4814      	ldr	r0, [pc, #80]	@ (801a4a8 <tcp_output_segment+0x1bc>)
 801a458:	f005 fbc8 	bl	801fbec <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801a45c:	4b17      	ldr	r3, [pc, #92]	@ (801a4bc <tcp_output_segment+0x1d0>)
 801a45e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801a462:	3301      	adds	r3, #1
 801a464:	b29a      	uxth	r2, r3
 801a466:	4b15      	ldr	r3, [pc, #84]	@ (801a4bc <tcp_output_segment+0x1d0>)
 801a468:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	6858      	ldr	r0, [r3, #4]
 801a470:	68b9      	ldr	r1, [r7, #8]
 801a472:	68bb      	ldr	r3, [r7, #8]
 801a474:	1d1c      	adds	r4, r3, #4
 801a476:	68bb      	ldr	r3, [r7, #8]
 801a478:	7add      	ldrb	r5, [r3, #11]
 801a47a:	68bb      	ldr	r3, [r7, #8]
 801a47c:	7a9b      	ldrb	r3, [r3, #10]
 801a47e:	687a      	ldr	r2, [r7, #4]
 801a480:	9202      	str	r2, [sp, #8]
 801a482:	2206      	movs	r2, #6
 801a484:	9201      	str	r2, [sp, #4]
 801a486:	9300      	str	r3, [sp, #0]
 801a488:	462b      	mov	r3, r5
 801a48a:	4622      	mov	r2, r4
 801a48c:	f002 fec4 	bl	801d218 <ip4_output_if>
 801a490:	4603      	mov	r3, r0
 801a492:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a494:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a498:	4618      	mov	r0, r3
 801a49a:	3720      	adds	r7, #32
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bdb0      	pop	{r4, r5, r7, pc}
 801a4a0:	08022eac 	.word	0x08022eac
 801a4a4:	08023470 	.word	0x08023470
 801a4a8:	08022f00 	.word	0x08022f00
 801a4ac:	08023490 	.word	0x08023490
 801a4b0:	080234b0 	.word	0x080234b0
 801a4b4:	2002d3ac 	.word	0x2002d3ac
 801a4b8:	080234d4 	.word	0x080234d4
 801a4bc:	2002d2b0 	.word	0x2002d2b0

0801a4c0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a4c0:	b5b0      	push	{r4, r5, r7, lr}
 801a4c2:	b084      	sub	sp, #16
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d106      	bne.n	801a4dc <tcp_rexmit_rto_prepare+0x1c>
 801a4ce:	4b31      	ldr	r3, [pc, #196]	@ (801a594 <tcp_rexmit_rto_prepare+0xd4>)
 801a4d0:	f240 6263 	movw	r2, #1635	@ 0x663
 801a4d4:	4930      	ldr	r1, [pc, #192]	@ (801a598 <tcp_rexmit_rto_prepare+0xd8>)
 801a4d6:	4831      	ldr	r0, [pc, #196]	@ (801a59c <tcp_rexmit_rto_prepare+0xdc>)
 801a4d8:	f005 fb88 	bl	801fbec <iprintf>

  if (pcb->unacked == NULL) {
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d102      	bne.n	801a4ea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a4e4:	f06f 0305 	mvn.w	r3, #5
 801a4e8:	e050      	b.n	801a58c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a4ee:	60fb      	str	r3, [r7, #12]
 801a4f0:	e00b      	b.n	801a50a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a4f2:	68f8      	ldr	r0, [r7, #12]
 801a4f4:	f7ff feda 	bl	801a2ac <tcp_output_segment_busy>
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d002      	beq.n	801a504 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a4fe:	f06f 0305 	mvn.w	r3, #5
 801a502:	e043      	b.n	801a58c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	60fb      	str	r3, [r7, #12]
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d1ef      	bne.n	801a4f2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a512:	68f8      	ldr	r0, [r7, #12]
 801a514:	f7ff feca 	bl	801a2ac <tcp_output_segment_busy>
 801a518:	4603      	mov	r3, r0
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d002      	beq.n	801a524 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a51e:	f06f 0305 	mvn.w	r3, #5
 801a522:	e033      	b.n	801a58c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	2200      	movs	r2, #0
 801a538:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	8b5b      	ldrh	r3, [r3, #26]
 801a53e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801a542:	b29a      	uxth	r2, r3
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	68db      	ldr	r3, [r3, #12]
 801a54c:	685b      	ldr	r3, [r3, #4]
 801a54e:	4618      	mov	r0, r3
 801a550:	f7f8 fc52 	bl	8012df8 <lwip_htonl>
 801a554:	4604      	mov	r4, r0
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	891b      	ldrh	r3, [r3, #8]
 801a55a:	461d      	mov	r5, r3
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	68db      	ldr	r3, [r3, #12]
 801a560:	899b      	ldrh	r3, [r3, #12]
 801a562:	b29b      	uxth	r3, r3
 801a564:	4618      	mov	r0, r3
 801a566:	f7f8 fc31 	bl	8012dcc <lwip_htons>
 801a56a:	4603      	mov	r3, r0
 801a56c:	b2db      	uxtb	r3, r3
 801a56e:	f003 0303 	and.w	r3, r3, #3
 801a572:	2b00      	cmp	r3, #0
 801a574:	d001      	beq.n	801a57a <tcp_rexmit_rto_prepare+0xba>
 801a576:	2301      	movs	r3, #1
 801a578:	e000      	b.n	801a57c <tcp_rexmit_rto_prepare+0xbc>
 801a57a:	2300      	movs	r3, #0
 801a57c:	442b      	add	r3, r5
 801a57e:	18e2      	adds	r2, r4, r3
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	2200      	movs	r2, #0
 801a588:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801a58a:	2300      	movs	r3, #0
}
 801a58c:	4618      	mov	r0, r3
 801a58e:	3710      	adds	r7, #16
 801a590:	46bd      	mov	sp, r7
 801a592:	bdb0      	pop	{r4, r5, r7, pc}
 801a594:	08022eac 	.word	0x08022eac
 801a598:	080234e8 	.word	0x080234e8
 801a59c:	08022f00 	.word	0x08022f00

0801a5a0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a5a0:	b580      	push	{r7, lr}
 801a5a2:	b082      	sub	sp, #8
 801a5a4:	af00      	add	r7, sp, #0
 801a5a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d106      	bne.n	801a5bc <tcp_rexmit_rto_commit+0x1c>
 801a5ae:	4b0d      	ldr	r3, [pc, #52]	@ (801a5e4 <tcp_rexmit_rto_commit+0x44>)
 801a5b0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801a5b4:	490c      	ldr	r1, [pc, #48]	@ (801a5e8 <tcp_rexmit_rto_commit+0x48>)
 801a5b6:	480d      	ldr	r0, [pc, #52]	@ (801a5ec <tcp_rexmit_rto_commit+0x4c>)
 801a5b8:	f005 fb18 	bl	801fbec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a5c2:	2bff      	cmp	r3, #255	@ 0xff
 801a5c4:	d007      	beq.n	801a5d6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a5cc:	3301      	adds	r3, #1
 801a5ce:	b2da      	uxtb	r2, r3
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a5d6:	6878      	ldr	r0, [r7, #4]
 801a5d8:	f7ff fc74 	bl	8019ec4 <tcp_output>
}
 801a5dc:	bf00      	nop
 801a5de:	3708      	adds	r7, #8
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd80      	pop	{r7, pc}
 801a5e4:	08022eac 	.word	0x08022eac
 801a5e8:	0802350c 	.word	0x0802350c
 801a5ec:	08022f00 	.word	0x08022f00

0801a5f0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b082      	sub	sp, #8
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d106      	bne.n	801a60c <tcp_rexmit_rto+0x1c>
 801a5fe:	4b0a      	ldr	r3, [pc, #40]	@ (801a628 <tcp_rexmit_rto+0x38>)
 801a600:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801a604:	4909      	ldr	r1, [pc, #36]	@ (801a62c <tcp_rexmit_rto+0x3c>)
 801a606:	480a      	ldr	r0, [pc, #40]	@ (801a630 <tcp_rexmit_rto+0x40>)
 801a608:	f005 faf0 	bl	801fbec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a60c:	6878      	ldr	r0, [r7, #4]
 801a60e:	f7ff ff57 	bl	801a4c0 <tcp_rexmit_rto_prepare>
 801a612:	4603      	mov	r3, r0
 801a614:	2b00      	cmp	r3, #0
 801a616:	d102      	bne.n	801a61e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a618:	6878      	ldr	r0, [r7, #4]
 801a61a:	f7ff ffc1 	bl	801a5a0 <tcp_rexmit_rto_commit>
  }
}
 801a61e:	bf00      	nop
 801a620:	3708      	adds	r7, #8
 801a622:	46bd      	mov	sp, r7
 801a624:	bd80      	pop	{r7, pc}
 801a626:	bf00      	nop
 801a628:	08022eac 	.word	0x08022eac
 801a62c:	08023530 	.word	0x08023530
 801a630:	08022f00 	.word	0x08022f00

0801a634 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a634:	b590      	push	{r4, r7, lr}
 801a636:	b085      	sub	sp, #20
 801a638:	af00      	add	r7, sp, #0
 801a63a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d106      	bne.n	801a650 <tcp_rexmit+0x1c>
 801a642:	4b2f      	ldr	r3, [pc, #188]	@ (801a700 <tcp_rexmit+0xcc>)
 801a644:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801a648:	492e      	ldr	r1, [pc, #184]	@ (801a704 <tcp_rexmit+0xd0>)
 801a64a:	482f      	ldr	r0, [pc, #188]	@ (801a708 <tcp_rexmit+0xd4>)
 801a64c:	f005 face 	bl	801fbec <iprintf>

  if (pcb->unacked == NULL) {
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a654:	2b00      	cmp	r3, #0
 801a656:	d102      	bne.n	801a65e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a658:	f06f 0305 	mvn.w	r3, #5
 801a65c:	e04c      	b.n	801a6f8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a662:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a664:	68b8      	ldr	r0, [r7, #8]
 801a666:	f7ff fe21 	bl	801a2ac <tcp_output_segment_busy>
 801a66a:	4603      	mov	r3, r0
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d002      	beq.n	801a676 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a670:	f06f 0305 	mvn.w	r3, #5
 801a674:	e040      	b.n	801a6f8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a676:	68bb      	ldr	r3, [r7, #8]
 801a678:	681a      	ldr	r2, [r3, #0]
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	336c      	adds	r3, #108	@ 0x6c
 801a682:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a684:	e002      	b.n	801a68c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d011      	beq.n	801a6b8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	68db      	ldr	r3, [r3, #12]
 801a69a:	685b      	ldr	r3, [r3, #4]
 801a69c:	4618      	mov	r0, r3
 801a69e:	f7f8 fbab 	bl	8012df8 <lwip_htonl>
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	68db      	ldr	r3, [r3, #12]
 801a6a8:	685b      	ldr	r3, [r3, #4]
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	f7f8 fba4 	bl	8012df8 <lwip_htonl>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	dbe6      	blt.n	801a686 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	681a      	ldr	r2, [r3, #0]
 801a6bc:	68bb      	ldr	r3, [r7, #8]
 801a6be:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	68ba      	ldr	r2, [r7, #8]
 801a6c4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a6c6:	68bb      	ldr	r3, [r7, #8]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	d103      	bne.n	801a6d6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a6dc:	2bff      	cmp	r3, #255	@ 0xff
 801a6de:	d007      	beq.n	801a6f0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	b2da      	uxtb	r2, r3
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a6f6:	2300      	movs	r3, #0
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	3714      	adds	r7, #20
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd90      	pop	{r4, r7, pc}
 801a700:	08022eac 	.word	0x08022eac
 801a704:	0802354c 	.word	0x0802354c
 801a708:	08022f00 	.word	0x08022f00

0801a70c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b082      	sub	sp, #8
 801a710:	af00      	add	r7, sp, #0
 801a712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d106      	bne.n	801a728 <tcp_rexmit_fast+0x1c>
 801a71a:	4b2a      	ldr	r3, [pc, #168]	@ (801a7c4 <tcp_rexmit_fast+0xb8>)
 801a71c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801a720:	4929      	ldr	r1, [pc, #164]	@ (801a7c8 <tcp_rexmit_fast+0xbc>)
 801a722:	482a      	ldr	r0, [pc, #168]	@ (801a7cc <tcp_rexmit_fast+0xc0>)
 801a724:	f005 fa62 	bl	801fbec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d045      	beq.n	801a7bc <tcp_rexmit_fast+0xb0>
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	8b5b      	ldrh	r3, [r3, #26]
 801a734:	f003 0304 	and.w	r3, r3, #4
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d13f      	bne.n	801a7bc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a73c:	6878      	ldr	r0, [r7, #4]
 801a73e:	f7ff ff79 	bl	801a634 <tcp_rexmit>
 801a742:	4603      	mov	r3, r0
 801a744:	2b00      	cmp	r3, #0
 801a746:	d139      	bne.n	801a7bc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801a754:	4293      	cmp	r3, r2
 801a756:	bf28      	it	cs
 801a758:	4613      	movcs	r3, r2
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	da00      	bge.n	801a762 <tcp_rexmit_fast+0x56>
 801a760:	3301      	adds	r3, #1
 801a762:	105b      	asrs	r3, r3, #1
 801a764:	b29a      	uxth	r2, r3
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801a772:	461a      	mov	r2, r3
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a778:	005b      	lsls	r3, r3, #1
 801a77a:	429a      	cmp	r2, r3
 801a77c:	d206      	bcs.n	801a78c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a782:	005b      	lsls	r3, r3, #1
 801a784:	b29a      	uxth	r2, r3
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a796:	4619      	mov	r1, r3
 801a798:	0049      	lsls	r1, r1, #1
 801a79a:	440b      	add	r3, r1
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	4413      	add	r3, r2
 801a7a0:	b29a      	uxth	r2, r3
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	8b5b      	ldrh	r3, [r3, #26]
 801a7ac:	f043 0304 	orr.w	r3, r3, #4
 801a7b0:	b29a      	uxth	r2, r3
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	2200      	movs	r2, #0
 801a7ba:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801a7bc:	bf00      	nop
 801a7be:	3708      	adds	r7, #8
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	bd80      	pop	{r7, pc}
 801a7c4:	08022eac 	.word	0x08022eac
 801a7c8:	08023564 	.word	0x08023564
 801a7cc:	08022f00 	.word	0x08022f00

0801a7d0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b086      	sub	sp, #24
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	60f8      	str	r0, [r7, #12]
 801a7d8:	607b      	str	r3, [r7, #4]
 801a7da:	460b      	mov	r3, r1
 801a7dc:	817b      	strh	r3, [r7, #10]
 801a7de:	4613      	mov	r3, r2
 801a7e0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a7e2:	897a      	ldrh	r2, [r7, #10]
 801a7e4:	893b      	ldrh	r3, [r7, #8]
 801a7e6:	4413      	add	r3, r2
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	3314      	adds	r3, #20
 801a7ec:	b29b      	uxth	r3, r3
 801a7ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a7f2:	4619      	mov	r1, r3
 801a7f4:	2022      	movs	r0, #34	@ 0x22
 801a7f6:	f7f9 fcc3 	bl	8014180 <pbuf_alloc>
 801a7fa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a7fc:	697b      	ldr	r3, [r7, #20]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d04d      	beq.n	801a89e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a802:	897b      	ldrh	r3, [r7, #10]
 801a804:	3313      	adds	r3, #19
 801a806:	697a      	ldr	r2, [r7, #20]
 801a808:	8952      	ldrh	r2, [r2, #10]
 801a80a:	4293      	cmp	r3, r2
 801a80c:	db06      	blt.n	801a81c <tcp_output_alloc_header_common+0x4c>
 801a80e:	4b26      	ldr	r3, [pc, #152]	@ (801a8a8 <tcp_output_alloc_header_common+0xd8>)
 801a810:	f240 7223 	movw	r2, #1827	@ 0x723
 801a814:	4925      	ldr	r1, [pc, #148]	@ (801a8ac <tcp_output_alloc_header_common+0xdc>)
 801a816:	4826      	ldr	r0, [pc, #152]	@ (801a8b0 <tcp_output_alloc_header_common+0xe0>)
 801a818:	f005 f9e8 	bl	801fbec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a81c:	697b      	ldr	r3, [r7, #20]
 801a81e:	685b      	ldr	r3, [r3, #4]
 801a820:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a822:	8c3b      	ldrh	r3, [r7, #32]
 801a824:	4618      	mov	r0, r3
 801a826:	f7f8 fad1 	bl	8012dcc <lwip_htons>
 801a82a:	4603      	mov	r3, r0
 801a82c:	461a      	mov	r2, r3
 801a82e:	693b      	ldr	r3, [r7, #16]
 801a830:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a832:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a834:	4618      	mov	r0, r3
 801a836:	f7f8 fac9 	bl	8012dcc <lwip_htons>
 801a83a:	4603      	mov	r3, r0
 801a83c:	461a      	mov	r2, r3
 801a83e:	693b      	ldr	r3, [r7, #16]
 801a840:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a842:	693b      	ldr	r3, [r7, #16]
 801a844:	687a      	ldr	r2, [r7, #4]
 801a846:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a848:	68f8      	ldr	r0, [r7, #12]
 801a84a:	f7f8 fad5 	bl	8012df8 <lwip_htonl>
 801a84e:	4602      	mov	r2, r0
 801a850:	693b      	ldr	r3, [r7, #16]
 801a852:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a854:	897b      	ldrh	r3, [r7, #10]
 801a856:	089b      	lsrs	r3, r3, #2
 801a858:	b29b      	uxth	r3, r3
 801a85a:	3305      	adds	r3, #5
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	031b      	lsls	r3, r3, #12
 801a860:	b29a      	uxth	r2, r3
 801a862:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a866:	b29b      	uxth	r3, r3
 801a868:	4313      	orrs	r3, r2
 801a86a:	b29b      	uxth	r3, r3
 801a86c:	4618      	mov	r0, r3
 801a86e:	f7f8 faad 	bl	8012dcc <lwip_htons>
 801a872:	4603      	mov	r3, r0
 801a874:	461a      	mov	r2, r3
 801a876:	693b      	ldr	r3, [r7, #16]
 801a878:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a87a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a87c:	4618      	mov	r0, r3
 801a87e:	f7f8 faa5 	bl	8012dcc <lwip_htons>
 801a882:	4603      	mov	r3, r0
 801a884:	461a      	mov	r2, r3
 801a886:	693b      	ldr	r3, [r7, #16]
 801a888:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a88a:	693b      	ldr	r3, [r7, #16]
 801a88c:	2200      	movs	r2, #0
 801a88e:	741a      	strb	r2, [r3, #16]
 801a890:	2200      	movs	r2, #0
 801a892:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a894:	693b      	ldr	r3, [r7, #16]
 801a896:	2200      	movs	r2, #0
 801a898:	749a      	strb	r2, [r3, #18]
 801a89a:	2200      	movs	r2, #0
 801a89c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a89e:	697b      	ldr	r3, [r7, #20]
}
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	3718      	adds	r7, #24
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	bd80      	pop	{r7, pc}
 801a8a8:	08022eac 	.word	0x08022eac
 801a8ac:	08023584 	.word	0x08023584
 801a8b0:	08022f00 	.word	0x08022f00

0801a8b4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a8b4:	b5b0      	push	{r4, r5, r7, lr}
 801a8b6:	b08a      	sub	sp, #40	@ 0x28
 801a8b8:	af04      	add	r7, sp, #16
 801a8ba:	60f8      	str	r0, [r7, #12]
 801a8bc:	607b      	str	r3, [r7, #4]
 801a8be:	460b      	mov	r3, r1
 801a8c0:	817b      	strh	r3, [r7, #10]
 801a8c2:	4613      	mov	r3, r2
 801a8c4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d106      	bne.n	801a8da <tcp_output_alloc_header+0x26>
 801a8cc:	4b15      	ldr	r3, [pc, #84]	@ (801a924 <tcp_output_alloc_header+0x70>)
 801a8ce:	f240 7242 	movw	r2, #1858	@ 0x742
 801a8d2:	4915      	ldr	r1, [pc, #84]	@ (801a928 <tcp_output_alloc_header+0x74>)
 801a8d4:	4815      	ldr	r0, [pc, #84]	@ (801a92c <tcp_output_alloc_header+0x78>)
 801a8d6:	f005 f989 	bl	801fbec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	8adb      	ldrh	r3, [r3, #22]
 801a8e2:	68fa      	ldr	r2, [r7, #12]
 801a8e4:	8b12      	ldrh	r2, [r2, #24]
 801a8e6:	68f9      	ldr	r1, [r7, #12]
 801a8e8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801a8ea:	893d      	ldrh	r5, [r7, #8]
 801a8ec:	897c      	ldrh	r4, [r7, #10]
 801a8ee:	9103      	str	r1, [sp, #12]
 801a8f0:	2110      	movs	r1, #16
 801a8f2:	9102      	str	r1, [sp, #8]
 801a8f4:	9201      	str	r2, [sp, #4]
 801a8f6:	9300      	str	r3, [sp, #0]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	462a      	mov	r2, r5
 801a8fc:	4621      	mov	r1, r4
 801a8fe:	f7ff ff67 	bl	801a7d0 <tcp_output_alloc_header_common>
 801a902:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a904:	697b      	ldr	r3, [r7, #20]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d006      	beq.n	801a918 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a90e:	68fa      	ldr	r2, [r7, #12]
 801a910:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a912:	441a      	add	r2, r3
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a918:	697b      	ldr	r3, [r7, #20]
}
 801a91a:	4618      	mov	r0, r3
 801a91c:	3718      	adds	r7, #24
 801a91e:	46bd      	mov	sp, r7
 801a920:	bdb0      	pop	{r4, r5, r7, pc}
 801a922:	bf00      	nop
 801a924:	08022eac 	.word	0x08022eac
 801a928:	080235b4 	.word	0x080235b4
 801a92c:	08022f00 	.word	0x08022f00

0801a930 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b088      	sub	sp, #32
 801a934:	af00      	add	r7, sp, #0
 801a936:	60f8      	str	r0, [r7, #12]
 801a938:	60b9      	str	r1, [r7, #8]
 801a93a:	4611      	mov	r1, r2
 801a93c:	461a      	mov	r2, r3
 801a93e:	460b      	mov	r3, r1
 801a940:	71fb      	strb	r3, [r7, #7]
 801a942:	4613      	mov	r3, r2
 801a944:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a946:	2300      	movs	r3, #0
 801a948:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a94a:	68bb      	ldr	r3, [r7, #8]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d106      	bne.n	801a95e <tcp_output_fill_options+0x2e>
 801a950:	4b12      	ldr	r3, [pc, #72]	@ (801a99c <tcp_output_fill_options+0x6c>)
 801a952:	f240 7256 	movw	r2, #1878	@ 0x756
 801a956:	4912      	ldr	r1, [pc, #72]	@ (801a9a0 <tcp_output_fill_options+0x70>)
 801a958:	4812      	ldr	r0, [pc, #72]	@ (801a9a4 <tcp_output_fill_options+0x74>)
 801a95a:	f005 f947 	bl	801fbec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	685b      	ldr	r3, [r3, #4]
 801a962:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a964:	69bb      	ldr	r3, [r7, #24]
 801a966:	3314      	adds	r3, #20
 801a968:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a96a:	8bfb      	ldrh	r3, [r7, #30]
 801a96c:	009b      	lsls	r3, r3, #2
 801a96e:	461a      	mov	r2, r3
 801a970:	79fb      	ldrb	r3, [r7, #7]
 801a972:	009b      	lsls	r3, r3, #2
 801a974:	f003 0304 	and.w	r3, r3, #4
 801a978:	4413      	add	r3, r2
 801a97a:	3314      	adds	r3, #20
 801a97c:	69ba      	ldr	r2, [r7, #24]
 801a97e:	4413      	add	r3, r2
 801a980:	697a      	ldr	r2, [r7, #20]
 801a982:	429a      	cmp	r2, r3
 801a984:	d006      	beq.n	801a994 <tcp_output_fill_options+0x64>
 801a986:	4b05      	ldr	r3, [pc, #20]	@ (801a99c <tcp_output_fill_options+0x6c>)
 801a988:	f240 7275 	movw	r2, #1909	@ 0x775
 801a98c:	4906      	ldr	r1, [pc, #24]	@ (801a9a8 <tcp_output_fill_options+0x78>)
 801a98e:	4805      	ldr	r0, [pc, #20]	@ (801a9a4 <tcp_output_fill_options+0x74>)
 801a990:	f005 f92c 	bl	801fbec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a994:	bf00      	nop
 801a996:	3720      	adds	r7, #32
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}
 801a99c:	08022eac 	.word	0x08022eac
 801a9a0:	080235dc 	.word	0x080235dc
 801a9a4:	08022f00 	.word	0x08022f00
 801a9a8:	080234d4 	.word	0x080234d4

0801a9ac <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b08a      	sub	sp, #40	@ 0x28
 801a9b0:	af04      	add	r7, sp, #16
 801a9b2:	60f8      	str	r0, [r7, #12]
 801a9b4:	60b9      	str	r1, [r7, #8]
 801a9b6:	607a      	str	r2, [r7, #4]
 801a9b8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a9ba:	68bb      	ldr	r3, [r7, #8]
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d106      	bne.n	801a9ce <tcp_output_control_segment+0x22>
 801a9c0:	4b20      	ldr	r3, [pc, #128]	@ (801aa44 <tcp_output_control_segment+0x98>)
 801a9c2:	f240 7287 	movw	r2, #1927	@ 0x787
 801a9c6:	4920      	ldr	r1, [pc, #128]	@ (801aa48 <tcp_output_control_segment+0x9c>)
 801a9c8:	4820      	ldr	r0, [pc, #128]	@ (801aa4c <tcp_output_control_segment+0xa0>)
 801a9ca:	f005 f90f 	bl	801fbec <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a9ce:	683a      	ldr	r2, [r7, #0]
 801a9d0:	6879      	ldr	r1, [r7, #4]
 801a9d2:	68f8      	ldr	r0, [r7, #12]
 801a9d4:	f7fe faa6 	bl	8018f24 <tcp_route>
 801a9d8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a9da:	693b      	ldr	r3, [r7, #16]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d102      	bne.n	801a9e6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a9e0:	23fc      	movs	r3, #252	@ 0xfc
 801a9e2:	75fb      	strb	r3, [r7, #23]
 801a9e4:	e024      	b.n	801aa30 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d006      	beq.n	801a9fa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	7adb      	ldrb	r3, [r3, #11]
 801a9f0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	7a9b      	ldrb	r3, [r3, #10]
 801a9f6:	757b      	strb	r3, [r7, #21]
 801a9f8:	e003      	b.n	801aa02 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a9fa:	23ff      	movs	r3, #255	@ 0xff
 801a9fc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a9fe:	2300      	movs	r3, #0
 801aa00:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801aa02:	4b13      	ldr	r3, [pc, #76]	@ (801aa50 <tcp_output_control_segment+0xa4>)
 801aa04:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801aa08:	3301      	adds	r3, #1
 801aa0a:	b29a      	uxth	r2, r3
 801aa0c:	4b10      	ldr	r3, [pc, #64]	@ (801aa50 <tcp_output_control_segment+0xa4>)
 801aa0e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801aa12:	7dba      	ldrb	r2, [r7, #22]
 801aa14:	693b      	ldr	r3, [r7, #16]
 801aa16:	9302      	str	r3, [sp, #8]
 801aa18:	2306      	movs	r3, #6
 801aa1a:	9301      	str	r3, [sp, #4]
 801aa1c:	7d7b      	ldrb	r3, [r7, #21]
 801aa1e:	9300      	str	r3, [sp, #0]
 801aa20:	4613      	mov	r3, r2
 801aa22:	683a      	ldr	r2, [r7, #0]
 801aa24:	6879      	ldr	r1, [r7, #4]
 801aa26:	68b8      	ldr	r0, [r7, #8]
 801aa28:	f002 fbf6 	bl	801d218 <ip4_output_if>
 801aa2c:	4603      	mov	r3, r0
 801aa2e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801aa30:	68b8      	ldr	r0, [r7, #8]
 801aa32:	f7f9 fe89 	bl	8014748 <pbuf_free>
  return err;
 801aa36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	3718      	adds	r7, #24
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	bd80      	pop	{r7, pc}
 801aa42:	bf00      	nop
 801aa44:	08022eac 	.word	0x08022eac
 801aa48:	08023604 	.word	0x08023604
 801aa4c:	08022f00 	.word	0x08022f00
 801aa50:	2002d2b0 	.word	0x2002d2b0

0801aa54 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801aa54:	b590      	push	{r4, r7, lr}
 801aa56:	b08b      	sub	sp, #44	@ 0x2c
 801aa58:	af04      	add	r7, sp, #16
 801aa5a:	60f8      	str	r0, [r7, #12]
 801aa5c:	60b9      	str	r1, [r7, #8]
 801aa5e:	607a      	str	r2, [r7, #4]
 801aa60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d106      	bne.n	801aa76 <tcp_rst+0x22>
 801aa68:	4b1f      	ldr	r3, [pc, #124]	@ (801aae8 <tcp_rst+0x94>)
 801aa6a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801aa6e:	491f      	ldr	r1, [pc, #124]	@ (801aaec <tcp_rst+0x98>)
 801aa70:	481f      	ldr	r0, [pc, #124]	@ (801aaf0 <tcp_rst+0x9c>)
 801aa72:	f005 f8bb 	bl	801fbec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801aa76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d106      	bne.n	801aa8a <tcp_rst+0x36>
 801aa7c:	4b1a      	ldr	r3, [pc, #104]	@ (801aae8 <tcp_rst+0x94>)
 801aa7e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801aa82:	491c      	ldr	r1, [pc, #112]	@ (801aaf4 <tcp_rst+0xa0>)
 801aa84:	481a      	ldr	r0, [pc, #104]	@ (801aaf0 <tcp_rst+0x9c>)
 801aa86:	f005 f8b1 	bl	801fbec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801aa8e:	f246 0308 	movw	r3, #24584	@ 0x6008
 801aa92:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801aa94:	7dfb      	ldrb	r3, [r7, #23]
 801aa96:	b29c      	uxth	r4, r3
 801aa98:	68b8      	ldr	r0, [r7, #8]
 801aa9a:	f7f8 f9ad 	bl	8012df8 <lwip_htonl>
 801aa9e:	4602      	mov	r2, r0
 801aaa0:	8abb      	ldrh	r3, [r7, #20]
 801aaa2:	9303      	str	r3, [sp, #12]
 801aaa4:	2314      	movs	r3, #20
 801aaa6:	9302      	str	r3, [sp, #8]
 801aaa8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801aaaa:	9301      	str	r3, [sp, #4]
 801aaac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801aaae:	9300      	str	r3, [sp, #0]
 801aab0:	4613      	mov	r3, r2
 801aab2:	2200      	movs	r2, #0
 801aab4:	4621      	mov	r1, r4
 801aab6:	6878      	ldr	r0, [r7, #4]
 801aab8:	f7ff fe8a 	bl	801a7d0 <tcp_output_alloc_header_common>
 801aabc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801aabe:	693b      	ldr	r3, [r7, #16]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d00c      	beq.n	801aade <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aac4:	7dfb      	ldrb	r3, [r7, #23]
 801aac6:	2200      	movs	r2, #0
 801aac8:	6939      	ldr	r1, [r7, #16]
 801aaca:	68f8      	ldr	r0, [r7, #12]
 801aacc:	f7ff ff30 	bl	801a930 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801aad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aad2:	683a      	ldr	r2, [r7, #0]
 801aad4:	6939      	ldr	r1, [r7, #16]
 801aad6:	68f8      	ldr	r0, [r7, #12]
 801aad8:	f7ff ff68 	bl	801a9ac <tcp_output_control_segment>
 801aadc:	e000      	b.n	801aae0 <tcp_rst+0x8c>
    return;
 801aade:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801aae0:	371c      	adds	r7, #28
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd90      	pop	{r4, r7, pc}
 801aae6:	bf00      	nop
 801aae8:	08022eac 	.word	0x08022eac
 801aaec:	08023630 	.word	0x08023630
 801aaf0:	08022f00 	.word	0x08022f00
 801aaf4:	0802364c 	.word	0x0802364c

0801aaf8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801aaf8:	b590      	push	{r4, r7, lr}
 801aafa:	b087      	sub	sp, #28
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801ab00:	2300      	movs	r3, #0
 801ab02:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801ab04:	2300      	movs	r3, #0
 801ab06:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d106      	bne.n	801ab1c <tcp_send_empty_ack+0x24>
 801ab0e:	4b28      	ldr	r3, [pc, #160]	@ (801abb0 <tcp_send_empty_ack+0xb8>)
 801ab10:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801ab14:	4927      	ldr	r1, [pc, #156]	@ (801abb4 <tcp_send_empty_ack+0xbc>)
 801ab16:	4828      	ldr	r0, [pc, #160]	@ (801abb8 <tcp_send_empty_ack+0xc0>)
 801ab18:	f005 f868 	bl	801fbec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ab1c:	7dfb      	ldrb	r3, [r7, #23]
 801ab1e:	009b      	lsls	r3, r3, #2
 801ab20:	b2db      	uxtb	r3, r3
 801ab22:	f003 0304 	and.w	r3, r3, #4
 801ab26:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ab28:	7d7b      	ldrb	r3, [r7, #21]
 801ab2a:	b29c      	uxth	r4, r3
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ab30:	4618      	mov	r0, r3
 801ab32:	f7f8 f961 	bl	8012df8 <lwip_htonl>
 801ab36:	4603      	mov	r3, r0
 801ab38:	2200      	movs	r2, #0
 801ab3a:	4621      	mov	r1, r4
 801ab3c:	6878      	ldr	r0, [r7, #4]
 801ab3e:	f7ff feb9 	bl	801a8b4 <tcp_output_alloc_header>
 801ab42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ab44:	693b      	ldr	r3, [r7, #16]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d109      	bne.n	801ab5e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	8b5b      	ldrh	r3, [r3, #26]
 801ab4e:	f043 0303 	orr.w	r3, r3, #3
 801ab52:	b29a      	uxth	r2, r3
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801ab58:	f06f 0301 	mvn.w	r3, #1
 801ab5c:	e023      	b.n	801aba6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801ab5e:	7dbb      	ldrb	r3, [r7, #22]
 801ab60:	7dfa      	ldrb	r2, [r7, #23]
 801ab62:	6939      	ldr	r1, [r7, #16]
 801ab64:	6878      	ldr	r0, [r7, #4]
 801ab66:	f7ff fee3 	bl	801a930 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ab6a:	687a      	ldr	r2, [r7, #4]
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	3304      	adds	r3, #4
 801ab70:	6939      	ldr	r1, [r7, #16]
 801ab72:	6878      	ldr	r0, [r7, #4]
 801ab74:	f7ff ff1a 	bl	801a9ac <tcp_output_control_segment>
 801ab78:	4603      	mov	r3, r0
 801ab7a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801ab7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d007      	beq.n	801ab94 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	8b5b      	ldrh	r3, [r3, #26]
 801ab88:	f043 0303 	orr.w	r3, r3, #3
 801ab8c:	b29a      	uxth	r2, r3
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	835a      	strh	r2, [r3, #26]
 801ab92:	e006      	b.n	801aba2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	8b5b      	ldrh	r3, [r3, #26]
 801ab98:	f023 0303 	bic.w	r3, r3, #3
 801ab9c:	b29a      	uxth	r2, r3
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801aba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aba6:	4618      	mov	r0, r3
 801aba8:	371c      	adds	r7, #28
 801abaa:	46bd      	mov	sp, r7
 801abac:	bd90      	pop	{r4, r7, pc}
 801abae:	bf00      	nop
 801abb0:	08022eac 	.word	0x08022eac
 801abb4:	08023668 	.word	0x08023668
 801abb8:	08022f00 	.word	0x08022f00

0801abbc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801abbc:	b590      	push	{r4, r7, lr}
 801abbe:	b087      	sub	sp, #28
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801abc4:	2300      	movs	r3, #0
 801abc6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d106      	bne.n	801abdc <tcp_keepalive+0x20>
 801abce:	4b18      	ldr	r3, [pc, #96]	@ (801ac30 <tcp_keepalive+0x74>)
 801abd0:	f640 0224 	movw	r2, #2084	@ 0x824
 801abd4:	4917      	ldr	r1, [pc, #92]	@ (801ac34 <tcp_keepalive+0x78>)
 801abd6:	4818      	ldr	r0, [pc, #96]	@ (801ac38 <tcp_keepalive+0x7c>)
 801abd8:	f005 f808 	bl	801fbec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801abdc:	7dfb      	ldrb	r3, [r7, #23]
 801abde:	b29c      	uxth	r4, r3
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801abe4:	3b01      	subs	r3, #1
 801abe6:	4618      	mov	r0, r3
 801abe8:	f7f8 f906 	bl	8012df8 <lwip_htonl>
 801abec:	4603      	mov	r3, r0
 801abee:	2200      	movs	r2, #0
 801abf0:	4621      	mov	r1, r4
 801abf2:	6878      	ldr	r0, [r7, #4]
 801abf4:	f7ff fe5e 	bl	801a8b4 <tcp_output_alloc_header>
 801abf8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801abfa:	693b      	ldr	r3, [r7, #16]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d102      	bne.n	801ac06 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801ac00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ac04:	e010      	b.n	801ac28 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ac06:	7dfb      	ldrb	r3, [r7, #23]
 801ac08:	2200      	movs	r2, #0
 801ac0a:	6939      	ldr	r1, [r7, #16]
 801ac0c:	6878      	ldr	r0, [r7, #4]
 801ac0e:	f7ff fe8f 	bl	801a930 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ac12:	687a      	ldr	r2, [r7, #4]
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	3304      	adds	r3, #4
 801ac18:	6939      	ldr	r1, [r7, #16]
 801ac1a:	6878      	ldr	r0, [r7, #4]
 801ac1c:	f7ff fec6 	bl	801a9ac <tcp_output_control_segment>
 801ac20:	4603      	mov	r3, r0
 801ac22:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ac24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ac28:	4618      	mov	r0, r3
 801ac2a:	371c      	adds	r7, #28
 801ac2c:	46bd      	mov	sp, r7
 801ac2e:	bd90      	pop	{r4, r7, pc}
 801ac30:	08022eac 	.word	0x08022eac
 801ac34:	08023688 	.word	0x08023688
 801ac38:	08022f00 	.word	0x08022f00

0801ac3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801ac3c:	b590      	push	{r4, r7, lr}
 801ac3e:	b08b      	sub	sp, #44	@ 0x2c
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ac44:	2300      	movs	r3, #0
 801ac46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d106      	bne.n	801ac5e <tcp_zero_window_probe+0x22>
 801ac50:	4b4c      	ldr	r3, [pc, #304]	@ (801ad84 <tcp_zero_window_probe+0x148>)
 801ac52:	f640 024f 	movw	r2, #2127	@ 0x84f
 801ac56:	494c      	ldr	r1, [pc, #304]	@ (801ad88 <tcp_zero_window_probe+0x14c>)
 801ac58:	484c      	ldr	r0, [pc, #304]	@ (801ad8c <tcp_zero_window_probe+0x150>)
 801ac5a:	f004 ffc7 	bl	801fbec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac62:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801ac64:	6a3b      	ldr	r3, [r7, #32]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d101      	bne.n	801ac6e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	e086      	b.n	801ad7c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801ac74:	2bff      	cmp	r3, #255	@ 0xff
 801ac76:	d007      	beq.n	801ac88 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801ac7e:	3301      	adds	r3, #1
 801ac80:	b2da      	uxtb	r2, r3
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801ac88:	6a3b      	ldr	r3, [r7, #32]
 801ac8a:	68db      	ldr	r3, [r3, #12]
 801ac8c:	899b      	ldrh	r3, [r3, #12]
 801ac8e:	b29b      	uxth	r3, r3
 801ac90:	4618      	mov	r0, r3
 801ac92:	f7f8 f89b 	bl	8012dcc <lwip_htons>
 801ac96:	4603      	mov	r3, r0
 801ac98:	b2db      	uxtb	r3, r3
 801ac9a:	f003 0301 	and.w	r3, r3, #1
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d005      	beq.n	801acae <tcp_zero_window_probe+0x72>
 801aca2:	6a3b      	ldr	r3, [r7, #32]
 801aca4:	891b      	ldrh	r3, [r3, #8]
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d101      	bne.n	801acae <tcp_zero_window_probe+0x72>
 801acaa:	2301      	movs	r3, #1
 801acac:	e000      	b.n	801acb0 <tcp_zero_window_probe+0x74>
 801acae:	2300      	movs	r3, #0
 801acb0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801acb2:	7ffb      	ldrb	r3, [r7, #31]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	bf0c      	ite	eq
 801acb8:	2301      	moveq	r3, #1
 801acba:	2300      	movne	r3, #0
 801acbc:	b2db      	uxtb	r3, r3
 801acbe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801acc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801acc4:	b299      	uxth	r1, r3
 801acc6:	6a3b      	ldr	r3, [r7, #32]
 801acc8:	68db      	ldr	r3, [r3, #12]
 801acca:	685b      	ldr	r3, [r3, #4]
 801accc:	8bba      	ldrh	r2, [r7, #28]
 801acce:	6878      	ldr	r0, [r7, #4]
 801acd0:	f7ff fdf0 	bl	801a8b4 <tcp_output_alloc_header>
 801acd4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801acd6:	69bb      	ldr	r3, [r7, #24]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d102      	bne.n	801ace2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801acdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ace0:	e04c      	b.n	801ad7c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ace2:	69bb      	ldr	r3, [r7, #24]
 801ace4:	685b      	ldr	r3, [r3, #4]
 801ace6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801ace8:	7ffb      	ldrb	r3, [r7, #31]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d011      	beq.n	801ad12 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801acee:	697b      	ldr	r3, [r7, #20]
 801acf0:	899b      	ldrh	r3, [r3, #12]
 801acf2:	b29b      	uxth	r3, r3
 801acf4:	b21b      	sxth	r3, r3
 801acf6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801acfa:	b21c      	sxth	r4, r3
 801acfc:	2011      	movs	r0, #17
 801acfe:	f7f8 f865 	bl	8012dcc <lwip_htons>
 801ad02:	4603      	mov	r3, r0
 801ad04:	b21b      	sxth	r3, r3
 801ad06:	4323      	orrs	r3, r4
 801ad08:	b21b      	sxth	r3, r3
 801ad0a:	b29a      	uxth	r2, r3
 801ad0c:	697b      	ldr	r3, [r7, #20]
 801ad0e:	819a      	strh	r2, [r3, #12]
 801ad10:	e010      	b.n	801ad34 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801ad12:	69bb      	ldr	r3, [r7, #24]
 801ad14:	685b      	ldr	r3, [r3, #4]
 801ad16:	3314      	adds	r3, #20
 801ad18:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ad1a:	6a3b      	ldr	r3, [r7, #32]
 801ad1c:	6858      	ldr	r0, [r3, #4]
 801ad1e:	6a3b      	ldr	r3, [r7, #32]
 801ad20:	685b      	ldr	r3, [r3, #4]
 801ad22:	891a      	ldrh	r2, [r3, #8]
 801ad24:	6a3b      	ldr	r3, [r7, #32]
 801ad26:	891b      	ldrh	r3, [r3, #8]
 801ad28:	1ad3      	subs	r3, r2, r3
 801ad2a:	b29b      	uxth	r3, r3
 801ad2c:	2201      	movs	r2, #1
 801ad2e:	6939      	ldr	r1, [r7, #16]
 801ad30:	f7f9 ff10 	bl	8014b54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801ad34:	6a3b      	ldr	r3, [r7, #32]
 801ad36:	68db      	ldr	r3, [r3, #12]
 801ad38:	685b      	ldr	r3, [r3, #4]
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	f7f8 f85c 	bl	8012df8 <lwip_htonl>
 801ad40:	4603      	mov	r3, r0
 801ad42:	3301      	adds	r3, #1
 801ad44:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	1ad3      	subs	r3, r2, r3
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	da02      	bge.n	801ad58 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	68fa      	ldr	r2, [r7, #12]
 801ad56:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ad58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	69b9      	ldr	r1, [r7, #24]
 801ad60:	6878      	ldr	r0, [r7, #4]
 801ad62:	f7ff fde5 	bl	801a930 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ad66:	687a      	ldr	r2, [r7, #4]
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	3304      	adds	r3, #4
 801ad6c:	69b9      	ldr	r1, [r7, #24]
 801ad6e:	6878      	ldr	r0, [r7, #4]
 801ad70:	f7ff fe1c 	bl	801a9ac <tcp_output_control_segment>
 801ad74:	4603      	mov	r3, r0
 801ad76:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ad78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	372c      	adds	r7, #44	@ 0x2c
 801ad80:	46bd      	mov	sp, r7
 801ad82:	bd90      	pop	{r4, r7, pc}
 801ad84:	08022eac 	.word	0x08022eac
 801ad88:	080236a4 	.word	0x080236a4
 801ad8c:	08022f00 	.word	0x08022f00

0801ad90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b082      	sub	sp, #8
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801ad98:	f7f9 ffd2 	bl	8014d40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801ad9c:	4b0a      	ldr	r3, [pc, #40]	@ (801adc8 <tcpip_tcp_timer+0x38>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d103      	bne.n	801adac <tcpip_tcp_timer+0x1c>
 801ada4:	4b09      	ldr	r3, [pc, #36]	@ (801adcc <tcpip_tcp_timer+0x3c>)
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d005      	beq.n	801adb8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801adac:	2200      	movs	r2, #0
 801adae:	4908      	ldr	r1, [pc, #32]	@ (801add0 <tcpip_tcp_timer+0x40>)
 801adb0:	20fa      	movs	r0, #250	@ 0xfa
 801adb2:	f000 f8f3 	bl	801af9c <sys_timeout>
 801adb6:	e003      	b.n	801adc0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801adb8:	4b06      	ldr	r3, [pc, #24]	@ (801add4 <tcpip_tcp_timer+0x44>)
 801adba:	2200      	movs	r2, #0
 801adbc:	601a      	str	r2, [r3, #0]
  }
}
 801adbe:	bf00      	nop
 801adc0:	bf00      	nop
 801adc2:	3708      	adds	r7, #8
 801adc4:	46bd      	mov	sp, r7
 801adc6:	bd80      	pop	{r7, pc}
 801adc8:	2002d3b8 	.word	0x2002d3b8
 801adcc:	2002d3bc 	.word	0x2002d3bc
 801add0:	0801ad91 	.word	0x0801ad91
 801add4:	2002d404 	.word	0x2002d404

0801add8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801add8:	b580      	push	{r7, lr}
 801adda:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801addc:	4b0a      	ldr	r3, [pc, #40]	@ (801ae08 <tcp_timer_needed+0x30>)
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d10f      	bne.n	801ae04 <tcp_timer_needed+0x2c>
 801ade4:	4b09      	ldr	r3, [pc, #36]	@ (801ae0c <tcp_timer_needed+0x34>)
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d103      	bne.n	801adf4 <tcp_timer_needed+0x1c>
 801adec:	4b08      	ldr	r3, [pc, #32]	@ (801ae10 <tcp_timer_needed+0x38>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d007      	beq.n	801ae04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801adf4:	4b04      	ldr	r3, [pc, #16]	@ (801ae08 <tcp_timer_needed+0x30>)
 801adf6:	2201      	movs	r2, #1
 801adf8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801adfa:	2200      	movs	r2, #0
 801adfc:	4905      	ldr	r1, [pc, #20]	@ (801ae14 <tcp_timer_needed+0x3c>)
 801adfe:	20fa      	movs	r0, #250	@ 0xfa
 801ae00:	f000 f8cc 	bl	801af9c <sys_timeout>
  }
}
 801ae04:	bf00      	nop
 801ae06:	bd80      	pop	{r7, pc}
 801ae08:	2002d404 	.word	0x2002d404
 801ae0c:	2002d3b8 	.word	0x2002d3b8
 801ae10:	2002d3bc 	.word	0x2002d3bc
 801ae14:	0801ad91 	.word	0x0801ad91

0801ae18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b086      	sub	sp, #24
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	60f8      	str	r0, [r7, #12]
 801ae20:	60b9      	str	r1, [r7, #8]
 801ae22:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ae24:	200a      	movs	r0, #10
 801ae26:	f7f8 fd6f 	bl	8013908 <memp_malloc>
 801ae2a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801ae2c:	693b      	ldr	r3, [r7, #16]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d109      	bne.n	801ae46 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ae32:	693b      	ldr	r3, [r7, #16]
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d151      	bne.n	801aedc <sys_timeout_abs+0xc4>
 801ae38:	4b2a      	ldr	r3, [pc, #168]	@ (801aee4 <sys_timeout_abs+0xcc>)
 801ae3a:	22be      	movs	r2, #190	@ 0xbe
 801ae3c:	492a      	ldr	r1, [pc, #168]	@ (801aee8 <sys_timeout_abs+0xd0>)
 801ae3e:	482b      	ldr	r0, [pc, #172]	@ (801aeec <sys_timeout_abs+0xd4>)
 801ae40:	f004 fed4 	bl	801fbec <iprintf>
    return;
 801ae44:	e04a      	b.n	801aedc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ae46:	693b      	ldr	r3, [r7, #16]
 801ae48:	2200      	movs	r2, #0
 801ae4a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ae4c:	693b      	ldr	r3, [r7, #16]
 801ae4e:	68ba      	ldr	r2, [r7, #8]
 801ae50:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ae52:	693b      	ldr	r3, [r7, #16]
 801ae54:	687a      	ldr	r2, [r7, #4]
 801ae56:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ae58:	693b      	ldr	r3, [r7, #16]
 801ae5a:	68fa      	ldr	r2, [r7, #12]
 801ae5c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ae5e:	4b24      	ldr	r3, [pc, #144]	@ (801aef0 <sys_timeout_abs+0xd8>)
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d103      	bne.n	801ae6e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ae66:	4a22      	ldr	r2, [pc, #136]	@ (801aef0 <sys_timeout_abs+0xd8>)
 801ae68:	693b      	ldr	r3, [r7, #16]
 801ae6a:	6013      	str	r3, [r2, #0]
    return;
 801ae6c:	e037      	b.n	801aede <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ae6e:	693b      	ldr	r3, [r7, #16]
 801ae70:	685a      	ldr	r2, [r3, #4]
 801ae72:	4b1f      	ldr	r3, [pc, #124]	@ (801aef0 <sys_timeout_abs+0xd8>)
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	685b      	ldr	r3, [r3, #4]
 801ae78:	1ad3      	subs	r3, r2, r3
 801ae7a:	0fdb      	lsrs	r3, r3, #31
 801ae7c:	f003 0301 	and.w	r3, r3, #1
 801ae80:	b2db      	uxtb	r3, r3
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d007      	beq.n	801ae96 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801ae86:	4b1a      	ldr	r3, [pc, #104]	@ (801aef0 <sys_timeout_abs+0xd8>)
 801ae88:	681a      	ldr	r2, [r3, #0]
 801ae8a:	693b      	ldr	r3, [r7, #16]
 801ae8c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801ae8e:	4a18      	ldr	r2, [pc, #96]	@ (801aef0 <sys_timeout_abs+0xd8>)
 801ae90:	693b      	ldr	r3, [r7, #16]
 801ae92:	6013      	str	r3, [r2, #0]
 801ae94:	e023      	b.n	801aede <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ae96:	4b16      	ldr	r3, [pc, #88]	@ (801aef0 <sys_timeout_abs+0xd8>)
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	617b      	str	r3, [r7, #20]
 801ae9c:	e01a      	b.n	801aed4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ae9e:	697b      	ldr	r3, [r7, #20]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d00b      	beq.n	801aebe <sys_timeout_abs+0xa6>
 801aea6:	693b      	ldr	r3, [r7, #16]
 801aea8:	685a      	ldr	r2, [r3, #4]
 801aeaa:	697b      	ldr	r3, [r7, #20]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	685b      	ldr	r3, [r3, #4]
 801aeb0:	1ad3      	subs	r3, r2, r3
 801aeb2:	0fdb      	lsrs	r3, r3, #31
 801aeb4:	f003 0301 	and.w	r3, r3, #1
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d007      	beq.n	801aece <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801aebe:	697b      	ldr	r3, [r7, #20]
 801aec0:	681a      	ldr	r2, [r3, #0]
 801aec2:	693b      	ldr	r3, [r7, #16]
 801aec4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801aec6:	697b      	ldr	r3, [r7, #20]
 801aec8:	693a      	ldr	r2, [r7, #16]
 801aeca:	601a      	str	r2, [r3, #0]
        break;
 801aecc:	e007      	b.n	801aede <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	617b      	str	r3, [r7, #20]
 801aed4:	697b      	ldr	r3, [r7, #20]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d1e1      	bne.n	801ae9e <sys_timeout_abs+0x86>
 801aeda:	e000      	b.n	801aede <sys_timeout_abs+0xc6>
    return;
 801aedc:	bf00      	nop
      }
    }
  }
}
 801aede:	3718      	adds	r7, #24
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}
 801aee4:	080236c8 	.word	0x080236c8
 801aee8:	080236fc 	.word	0x080236fc
 801aeec:	0802373c 	.word	0x0802373c
 801aef0:	2002d3fc 	.word	0x2002d3fc

0801aef4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b086      	sub	sp, #24
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801af00:	697b      	ldr	r3, [r7, #20]
 801af02:	685b      	ldr	r3, [r3, #4]
 801af04:	4798      	blx	r3

  now = sys_now();
 801af06:	f7f1 fba5 	bl	800c654 <sys_now>
 801af0a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801af0c:	697b      	ldr	r3, [r7, #20]
 801af0e:	681a      	ldr	r2, [r3, #0]
 801af10:	4b0f      	ldr	r3, [pc, #60]	@ (801af50 <lwip_cyclic_timer+0x5c>)
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	4413      	add	r3, r2
 801af16:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801af18:	68fa      	ldr	r2, [r7, #12]
 801af1a:	693b      	ldr	r3, [r7, #16]
 801af1c:	1ad3      	subs	r3, r2, r3
 801af1e:	0fdb      	lsrs	r3, r3, #31
 801af20:	f003 0301 	and.w	r3, r3, #1
 801af24:	b2db      	uxtb	r3, r3
 801af26:	2b00      	cmp	r3, #0
 801af28:	d009      	beq.n	801af3e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801af2a:	697b      	ldr	r3, [r7, #20]
 801af2c:	681a      	ldr	r2, [r3, #0]
 801af2e:	693b      	ldr	r3, [r7, #16]
 801af30:	4413      	add	r3, r2
 801af32:	687a      	ldr	r2, [r7, #4]
 801af34:	4907      	ldr	r1, [pc, #28]	@ (801af54 <lwip_cyclic_timer+0x60>)
 801af36:	4618      	mov	r0, r3
 801af38:	f7ff ff6e 	bl	801ae18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801af3c:	e004      	b.n	801af48 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801af3e:	687a      	ldr	r2, [r7, #4]
 801af40:	4904      	ldr	r1, [pc, #16]	@ (801af54 <lwip_cyclic_timer+0x60>)
 801af42:	68f8      	ldr	r0, [r7, #12]
 801af44:	f7ff ff68 	bl	801ae18 <sys_timeout_abs>
}
 801af48:	bf00      	nop
 801af4a:	3718      	adds	r7, #24
 801af4c:	46bd      	mov	sp, r7
 801af4e:	bd80      	pop	{r7, pc}
 801af50:	2002d400 	.word	0x2002d400
 801af54:	0801aef5 	.word	0x0801aef5

0801af58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b082      	sub	sp, #8
 801af5c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801af5e:	2301      	movs	r3, #1
 801af60:	607b      	str	r3, [r7, #4]
 801af62:	e00e      	b.n	801af82 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801af64:	4a0b      	ldr	r2, [pc, #44]	@ (801af94 <sys_timeouts_init+0x3c>)
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	00db      	lsls	r3, r3, #3
 801af70:	4a08      	ldr	r2, [pc, #32]	@ (801af94 <sys_timeouts_init+0x3c>)
 801af72:	4413      	add	r3, r2
 801af74:	461a      	mov	r2, r3
 801af76:	4908      	ldr	r1, [pc, #32]	@ (801af98 <sys_timeouts_init+0x40>)
 801af78:	f000 f810 	bl	801af9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	3301      	adds	r3, #1
 801af80:	607b      	str	r3, [r7, #4]
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	2b02      	cmp	r3, #2
 801af86:	d9ed      	bls.n	801af64 <sys_timeouts_init+0xc>
  }
}
 801af88:	bf00      	nop
 801af8a:	bf00      	nop
 801af8c:	3708      	adds	r7, #8
 801af8e:	46bd      	mov	sp, r7
 801af90:	bd80      	pop	{r7, pc}
 801af92:	bf00      	nop
 801af94:	08024948 	.word	0x08024948
 801af98:	0801aef5 	.word	0x0801aef5

0801af9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b086      	sub	sp, #24
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	60f8      	str	r0, [r7, #12]
 801afa4:	60b9      	str	r1, [r7, #8]
 801afa6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801afae:	d306      	bcc.n	801afbe <sys_timeout+0x22>
 801afb0:	4b0a      	ldr	r3, [pc, #40]	@ (801afdc <sys_timeout+0x40>)
 801afb2:	f240 1229 	movw	r2, #297	@ 0x129
 801afb6:	490a      	ldr	r1, [pc, #40]	@ (801afe0 <sys_timeout+0x44>)
 801afb8:	480a      	ldr	r0, [pc, #40]	@ (801afe4 <sys_timeout+0x48>)
 801afba:	f004 fe17 	bl	801fbec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801afbe:	f7f1 fb49 	bl	800c654 <sys_now>
 801afc2:	4602      	mov	r2, r0
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	4413      	add	r3, r2
 801afc8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801afca:	687a      	ldr	r2, [r7, #4]
 801afcc:	68b9      	ldr	r1, [r7, #8]
 801afce:	6978      	ldr	r0, [r7, #20]
 801afd0:	f7ff ff22 	bl	801ae18 <sys_timeout_abs>
#endif
}
 801afd4:	bf00      	nop
 801afd6:	3718      	adds	r7, #24
 801afd8:	46bd      	mov	sp, r7
 801afda:	bd80      	pop	{r7, pc}
 801afdc:	080236c8 	.word	0x080236c8
 801afe0:	08023764 	.word	0x08023764
 801afe4:	0802373c 	.word	0x0802373c

0801afe8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b084      	sub	sp, #16
 801afec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801afee:	f7f1 fb31 	bl	800c654 <sys_now>
 801aff2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801aff4:	4b17      	ldr	r3, [pc, #92]	@ (801b054 <sys_check_timeouts+0x6c>)
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801affa:	68bb      	ldr	r3, [r7, #8]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d022      	beq.n	801b046 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b000:	68bb      	ldr	r3, [r7, #8]
 801b002:	685b      	ldr	r3, [r3, #4]
 801b004:	68fa      	ldr	r2, [r7, #12]
 801b006:	1ad3      	subs	r3, r2, r3
 801b008:	0fdb      	lsrs	r3, r3, #31
 801b00a:	f003 0301 	and.w	r3, r3, #1
 801b00e:	b2db      	uxtb	r3, r3
 801b010:	2b00      	cmp	r3, #0
 801b012:	d11a      	bne.n	801b04a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b014:	68bb      	ldr	r3, [r7, #8]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	4a0e      	ldr	r2, [pc, #56]	@ (801b054 <sys_check_timeouts+0x6c>)
 801b01a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b01c:	68bb      	ldr	r3, [r7, #8]
 801b01e:	689b      	ldr	r3, [r3, #8]
 801b020:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b022:	68bb      	ldr	r3, [r7, #8]
 801b024:	68db      	ldr	r3, [r3, #12]
 801b026:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	685b      	ldr	r3, [r3, #4]
 801b02c:	4a0a      	ldr	r2, [pc, #40]	@ (801b058 <sys_check_timeouts+0x70>)
 801b02e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b030:	68b9      	ldr	r1, [r7, #8]
 801b032:	200a      	movs	r0, #10
 801b034:	f7f8 fce4 	bl	8013a00 <memp_free>
    if (handler != NULL) {
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d0da      	beq.n	801aff4 <sys_check_timeouts+0xc>
      handler(arg);
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	6838      	ldr	r0, [r7, #0]
 801b042:	4798      	blx	r3
  do {
 801b044:	e7d6      	b.n	801aff4 <sys_check_timeouts+0xc>
      return;
 801b046:	bf00      	nop
 801b048:	e000      	b.n	801b04c <sys_check_timeouts+0x64>
      return;
 801b04a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b04c:	3710      	adds	r7, #16
 801b04e:	46bd      	mov	sp, r7
 801b050:	bd80      	pop	{r7, pc}
 801b052:	bf00      	nop
 801b054:	2002d3fc 	.word	0x2002d3fc
 801b058:	2002d400 	.word	0x2002d400

0801b05c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b082      	sub	sp, #8
 801b060:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b062:	4b16      	ldr	r3, [pc, #88]	@ (801b0bc <sys_timeouts_sleeptime+0x60>)
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	2b00      	cmp	r3, #0
 801b068:	d102      	bne.n	801b070 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b06a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b06e:	e020      	b.n	801b0b2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b070:	f7f1 faf0 	bl	800c654 <sys_now>
 801b074:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b076:	4b11      	ldr	r3, [pc, #68]	@ (801b0bc <sys_timeouts_sleeptime+0x60>)
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	685a      	ldr	r2, [r3, #4]
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	1ad3      	subs	r3, r2, r3
 801b080:	0fdb      	lsrs	r3, r3, #31
 801b082:	f003 0301 	and.w	r3, r3, #1
 801b086:	b2db      	uxtb	r3, r3
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d001      	beq.n	801b090 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b08c:	2300      	movs	r3, #0
 801b08e:	e010      	b.n	801b0b2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b090:	4b0a      	ldr	r3, [pc, #40]	@ (801b0bc <sys_timeouts_sleeptime+0x60>)
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	685a      	ldr	r2, [r3, #4]
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	1ad3      	subs	r3, r2, r3
 801b09a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b09c:	683b      	ldr	r3, [r7, #0]
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	da06      	bge.n	801b0b0 <sys_timeouts_sleeptime+0x54>
 801b0a2:	4b07      	ldr	r3, [pc, #28]	@ (801b0c0 <sys_timeouts_sleeptime+0x64>)
 801b0a4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801b0a8:	4906      	ldr	r1, [pc, #24]	@ (801b0c4 <sys_timeouts_sleeptime+0x68>)
 801b0aa:	4807      	ldr	r0, [pc, #28]	@ (801b0c8 <sys_timeouts_sleeptime+0x6c>)
 801b0ac:	f004 fd9e 	bl	801fbec <iprintf>
    return ret;
 801b0b0:	683b      	ldr	r3, [r7, #0]
  }
}
 801b0b2:	4618      	mov	r0, r3
 801b0b4:	3708      	adds	r7, #8
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bd80      	pop	{r7, pc}
 801b0ba:	bf00      	nop
 801b0bc:	2002d3fc 	.word	0x2002d3fc
 801b0c0:	080236c8 	.word	0x080236c8
 801b0c4:	0802379c 	.word	0x0802379c
 801b0c8:	0802373c 	.word	0x0802373c

0801b0cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b0d0:	f004 fc8c 	bl	801f9ec <rand>
 801b0d4:	4603      	mov	r3, r0
 801b0d6:	b29b      	uxth	r3, r3
 801b0d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b0dc:	b29b      	uxth	r3, r3
 801b0de:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b0e2:	b29a      	uxth	r2, r3
 801b0e4:	4b01      	ldr	r3, [pc, #4]	@ (801b0ec <udp_init+0x20>)
 801b0e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b0e8:	bf00      	nop
 801b0ea:	bd80      	pop	{r7, pc}
 801b0ec:	2000002c 	.word	0x2000002c

0801b0f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b0f0:	b480      	push	{r7}
 801b0f2:	b083      	sub	sp, #12
 801b0f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b0fa:	4b17      	ldr	r3, [pc, #92]	@ (801b158 <udp_new_port+0x68>)
 801b0fc:	881b      	ldrh	r3, [r3, #0]
 801b0fe:	1c5a      	adds	r2, r3, #1
 801b100:	b291      	uxth	r1, r2
 801b102:	4a15      	ldr	r2, [pc, #84]	@ (801b158 <udp_new_port+0x68>)
 801b104:	8011      	strh	r1, [r2, #0]
 801b106:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b10a:	4293      	cmp	r3, r2
 801b10c:	d103      	bne.n	801b116 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b10e:	4b12      	ldr	r3, [pc, #72]	@ (801b158 <udp_new_port+0x68>)
 801b110:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b114:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b116:	4b11      	ldr	r3, [pc, #68]	@ (801b15c <udp_new_port+0x6c>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	603b      	str	r3, [r7, #0]
 801b11c:	e011      	b.n	801b142 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b11e:	683b      	ldr	r3, [r7, #0]
 801b120:	8a5a      	ldrh	r2, [r3, #18]
 801b122:	4b0d      	ldr	r3, [pc, #52]	@ (801b158 <udp_new_port+0x68>)
 801b124:	881b      	ldrh	r3, [r3, #0]
 801b126:	429a      	cmp	r2, r3
 801b128:	d108      	bne.n	801b13c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b12a:	88fb      	ldrh	r3, [r7, #6]
 801b12c:	3301      	adds	r3, #1
 801b12e:	80fb      	strh	r3, [r7, #6]
 801b130:	88fb      	ldrh	r3, [r7, #6]
 801b132:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b136:	d3e0      	bcc.n	801b0fa <udp_new_port+0xa>
        return 0;
 801b138:	2300      	movs	r3, #0
 801b13a:	e007      	b.n	801b14c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b13c:	683b      	ldr	r3, [r7, #0]
 801b13e:	68db      	ldr	r3, [r3, #12]
 801b140:	603b      	str	r3, [r7, #0]
 801b142:	683b      	ldr	r3, [r7, #0]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d1ea      	bne.n	801b11e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b148:	4b03      	ldr	r3, [pc, #12]	@ (801b158 <udp_new_port+0x68>)
 801b14a:	881b      	ldrh	r3, [r3, #0]
}
 801b14c:	4618      	mov	r0, r3
 801b14e:	370c      	adds	r7, #12
 801b150:	46bd      	mov	sp, r7
 801b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b156:	4770      	bx	lr
 801b158:	2000002c 	.word	0x2000002c
 801b15c:	2002d408 	.word	0x2002d408

0801b160 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b160:	b580      	push	{r7, lr}
 801b162:	b084      	sub	sp, #16
 801b164:	af00      	add	r7, sp, #0
 801b166:	60f8      	str	r0, [r7, #12]
 801b168:	60b9      	str	r1, [r7, #8]
 801b16a:	4613      	mov	r3, r2
 801b16c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d105      	bne.n	801b180 <udp_input_local_match+0x20>
 801b174:	4b27      	ldr	r3, [pc, #156]	@ (801b214 <udp_input_local_match+0xb4>)
 801b176:	2287      	movs	r2, #135	@ 0x87
 801b178:	4927      	ldr	r1, [pc, #156]	@ (801b218 <udp_input_local_match+0xb8>)
 801b17a:	4828      	ldr	r0, [pc, #160]	@ (801b21c <udp_input_local_match+0xbc>)
 801b17c:	f004 fd36 	bl	801fbec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b180:	68bb      	ldr	r3, [r7, #8]
 801b182:	2b00      	cmp	r3, #0
 801b184:	d105      	bne.n	801b192 <udp_input_local_match+0x32>
 801b186:	4b23      	ldr	r3, [pc, #140]	@ (801b214 <udp_input_local_match+0xb4>)
 801b188:	2288      	movs	r2, #136	@ 0x88
 801b18a:	4925      	ldr	r1, [pc, #148]	@ (801b220 <udp_input_local_match+0xc0>)
 801b18c:	4823      	ldr	r0, [pc, #140]	@ (801b21c <udp_input_local_match+0xbc>)
 801b18e:	f004 fd2d 	bl	801fbec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b192:	68fb      	ldr	r3, [r7, #12]
 801b194:	7a1b      	ldrb	r3, [r3, #8]
 801b196:	2b00      	cmp	r3, #0
 801b198:	d00b      	beq.n	801b1b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b19a:	68fb      	ldr	r3, [r7, #12]
 801b19c:	7a1a      	ldrb	r2, [r3, #8]
 801b19e:	4b21      	ldr	r3, [pc, #132]	@ (801b224 <udp_input_local_match+0xc4>)
 801b1a0:	685b      	ldr	r3, [r3, #4]
 801b1a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b1a6:	3301      	adds	r3, #1
 801b1a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b1aa:	429a      	cmp	r2, r3
 801b1ac:	d001      	beq.n	801b1b2 <udp_input_local_match+0x52>
    return 0;
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	e02b      	b.n	801b20a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b1b2:	79fb      	ldrb	r3, [r7, #7]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d018      	beq.n	801b1ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d013      	beq.n	801b1e6 <udp_input_local_match+0x86>
 801b1be:	68fb      	ldr	r3, [r7, #12]
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d00f      	beq.n	801b1e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b1c6:	4b17      	ldr	r3, [pc, #92]	@ (801b224 <udp_input_local_match+0xc4>)
 801b1c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b1ce:	d00a      	beq.n	801b1e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	681a      	ldr	r2, [r3, #0]
 801b1d4:	4b13      	ldr	r3, [pc, #76]	@ (801b224 <udp_input_local_match+0xc4>)
 801b1d6:	695b      	ldr	r3, [r3, #20]
 801b1d8:	405a      	eors	r2, r3
 801b1da:	68bb      	ldr	r3, [r7, #8]
 801b1dc:	3308      	adds	r3, #8
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d110      	bne.n	801b208 <udp_input_local_match+0xa8>
          return 1;
 801b1e6:	2301      	movs	r3, #1
 801b1e8:	e00f      	b.n	801b20a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d009      	beq.n	801b204 <udp_input_local_match+0xa4>
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d005      	beq.n	801b204 <udp_input_local_match+0xa4>
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	681a      	ldr	r2, [r3, #0]
 801b1fc:	4b09      	ldr	r3, [pc, #36]	@ (801b224 <udp_input_local_match+0xc4>)
 801b1fe:	695b      	ldr	r3, [r3, #20]
 801b200:	429a      	cmp	r2, r3
 801b202:	d101      	bne.n	801b208 <udp_input_local_match+0xa8>
        return 1;
 801b204:	2301      	movs	r3, #1
 801b206:	e000      	b.n	801b20a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b208:	2300      	movs	r3, #0
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	3710      	adds	r7, #16
 801b20e:	46bd      	mov	sp, r7
 801b210:	bd80      	pop	{r7, pc}
 801b212:	bf00      	nop
 801b214:	080237b0 	.word	0x080237b0
 801b218:	080237e0 	.word	0x080237e0
 801b21c:	08023804 	.word	0x08023804
 801b220:	0802382c 	.word	0x0802382c
 801b224:	200270b4 	.word	0x200270b4

0801b228 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b228:	b590      	push	{r4, r7, lr}
 801b22a:	b08d      	sub	sp, #52	@ 0x34
 801b22c:	af02      	add	r7, sp, #8
 801b22e:	6078      	str	r0, [r7, #4]
 801b230:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b232:	2300      	movs	r3, #0
 801b234:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d105      	bne.n	801b248 <udp_input+0x20>
 801b23c:	4b98      	ldr	r3, [pc, #608]	@ (801b4a0 <udp_input+0x278>)
 801b23e:	22cf      	movs	r2, #207	@ 0xcf
 801b240:	4998      	ldr	r1, [pc, #608]	@ (801b4a4 <udp_input+0x27c>)
 801b242:	4899      	ldr	r0, [pc, #612]	@ (801b4a8 <udp_input+0x280>)
 801b244:	f004 fcd2 	bl	801fbec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b248:	683b      	ldr	r3, [r7, #0]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d105      	bne.n	801b25a <udp_input+0x32>
 801b24e:	4b94      	ldr	r3, [pc, #592]	@ (801b4a0 <udp_input+0x278>)
 801b250:	22d0      	movs	r2, #208	@ 0xd0
 801b252:	4996      	ldr	r1, [pc, #600]	@ (801b4ac <udp_input+0x284>)
 801b254:	4894      	ldr	r0, [pc, #592]	@ (801b4a8 <udp_input+0x280>)
 801b256:	f004 fcc9 	bl	801fbec <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b25a:	4b95      	ldr	r3, [pc, #596]	@ (801b4b0 <udp_input+0x288>)
 801b25c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801b260:	3301      	adds	r3, #1
 801b262:	b29a      	uxth	r2, r3
 801b264:	4b92      	ldr	r3, [pc, #584]	@ (801b4b0 <udp_input+0x288>)
 801b266:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	895b      	ldrh	r3, [r3, #10]
 801b26e:	2b07      	cmp	r3, #7
 801b270:	d813      	bhi.n	801b29a <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801b272:	4b8f      	ldr	r3, [pc, #572]	@ (801b4b0 <udp_input+0x288>)
 801b274:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801b278:	3301      	adds	r3, #1
 801b27a:	b29a      	uxth	r2, r3
 801b27c:	4b8c      	ldr	r3, [pc, #560]	@ (801b4b0 <udp_input+0x288>)
 801b27e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801b282:	4b8b      	ldr	r3, [pc, #556]	@ (801b4b0 <udp_input+0x288>)
 801b284:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b288:	3301      	adds	r3, #1
 801b28a:	b29a      	uxth	r2, r3
 801b28c:	4b88      	ldr	r3, [pc, #544]	@ (801b4b0 <udp_input+0x288>)
 801b28e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b292:	6878      	ldr	r0, [r7, #4]
 801b294:	f7f9 fa58 	bl	8014748 <pbuf_free>
    goto end;
 801b298:	e0fd      	b.n	801b496 <udp_input+0x26e>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	685b      	ldr	r3, [r3, #4]
 801b29e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b2a0:	4b84      	ldr	r3, [pc, #528]	@ (801b4b4 <udp_input+0x28c>)
 801b2a2:	695b      	ldr	r3, [r3, #20]
 801b2a4:	4a83      	ldr	r2, [pc, #524]	@ (801b4b4 <udp_input+0x28c>)
 801b2a6:	6812      	ldr	r2, [r2, #0]
 801b2a8:	4611      	mov	r1, r2
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	f002 f8a6 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 801b2b0:	4603      	mov	r3, r0
 801b2b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b2b4:	697b      	ldr	r3, [r7, #20]
 801b2b6:	881b      	ldrh	r3, [r3, #0]
 801b2b8:	b29b      	uxth	r3, r3
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	f7f7 fd86 	bl	8012dcc <lwip_htons>
 801b2c0:	4603      	mov	r3, r0
 801b2c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	885b      	ldrh	r3, [r3, #2]
 801b2c8:	b29b      	uxth	r3, r3
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	f7f7 fd7e 	bl	8012dcc <lwip_htons>
 801b2d0:	4603      	mov	r3, r0
 801b2d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b2d8:	2300      	movs	r3, #0
 801b2da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b2dc:	2300      	movs	r3, #0
 801b2de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b2e0:	4b75      	ldr	r3, [pc, #468]	@ (801b4b8 <udp_input+0x290>)
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801b2e6:	e05d      	b.n	801b3a4 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ea:	8a5b      	ldrh	r3, [r3, #18]
 801b2ec:	89fa      	ldrh	r2, [r7, #14]
 801b2ee:	429a      	cmp	r2, r3
 801b2f0:	d153      	bne.n	801b39a <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b2f2:	7cfb      	ldrb	r3, [r7, #19]
 801b2f4:	461a      	mov	r2, r3
 801b2f6:	6839      	ldr	r1, [r7, #0]
 801b2f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b2fa:	f7ff ff31 	bl	801b160 <udp_input_local_match>
 801b2fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b300:	2b00      	cmp	r3, #0
 801b302:	d04a      	beq.n	801b39a <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b306:	7c1b      	ldrb	r3, [r3, #16]
 801b308:	f003 0304 	and.w	r3, r3, #4
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d11d      	bne.n	801b34c <udp_input+0x124>
        if (uncon_pcb == NULL) {
 801b310:	69fb      	ldr	r3, [r7, #28]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d102      	bne.n	801b31c <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b318:	61fb      	str	r3, [r7, #28]
 801b31a:	e017      	b.n	801b34c <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b31c:	7cfb      	ldrb	r3, [r7, #19]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d014      	beq.n	801b34c <udp_input+0x124>
 801b322:	4b64      	ldr	r3, [pc, #400]	@ (801b4b4 <udp_input+0x28c>)
 801b324:	695b      	ldr	r3, [r3, #20]
 801b326:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b32a:	d10f      	bne.n	801b34c <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b32c:	69fb      	ldr	r3, [r7, #28]
 801b32e:	681a      	ldr	r2, [r3, #0]
 801b330:	683b      	ldr	r3, [r7, #0]
 801b332:	3304      	adds	r3, #4
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	429a      	cmp	r2, r3
 801b338:	d008      	beq.n	801b34c <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b33c:	681a      	ldr	r2, [r3, #0]
 801b33e:	683b      	ldr	r3, [r7, #0]
 801b340:	3304      	adds	r3, #4
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	429a      	cmp	r2, r3
 801b346:	d101      	bne.n	801b34c <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 801b348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b34a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b34e:	8a9b      	ldrh	r3, [r3, #20]
 801b350:	8a3a      	ldrh	r2, [r7, #16]
 801b352:	429a      	cmp	r2, r3
 801b354:	d121      	bne.n	801b39a <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b358:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d005      	beq.n	801b36a <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b360:	685a      	ldr	r2, [r3, #4]
 801b362:	4b54      	ldr	r3, [pc, #336]	@ (801b4b4 <udp_input+0x28c>)
 801b364:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b366:	429a      	cmp	r2, r3
 801b368:	d117      	bne.n	801b39a <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b36a:	6a3b      	ldr	r3, [r7, #32]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d00b      	beq.n	801b388 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b372:	68da      	ldr	r2, [r3, #12]
 801b374:	6a3b      	ldr	r3, [r7, #32]
 801b376:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b378:	4b4f      	ldr	r3, [pc, #316]	@ (801b4b8 <udp_input+0x290>)
 801b37a:	681a      	ldr	r2, [r3, #0]
 801b37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b37e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b380:	4a4d      	ldr	r2, [pc, #308]	@ (801b4b8 <udp_input+0x290>)
 801b382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b384:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b386:	e010      	b.n	801b3aa <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 801b388:	4b49      	ldr	r3, [pc, #292]	@ (801b4b0 <udp_input+0x288>)
 801b38a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801b38e:	3301      	adds	r3, #1
 801b390:	b29a      	uxth	r2, r3
 801b392:	4b47      	ldr	r3, [pc, #284]	@ (801b4b0 <udp_input+0x288>)
 801b394:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801b398:	e007      	b.n	801b3aa <udp_input+0x182>
      }
    }

    prev = pcb;
 801b39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b39c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3a0:	68db      	ldr	r3, [r3, #12]
 801b3a2:	627b      	str	r3, [r7, #36]	@ 0x24
 801b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d19e      	bne.n	801b2e8 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d101      	bne.n	801b3b4 <udp_input+0x18c>
    pcb = uncon_pcb;
 801b3b0:	69fb      	ldr	r3, [r7, #28]
 801b3b2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d002      	beq.n	801b3c0 <udp_input+0x198>
    for_us = 1;
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	76fb      	strb	r3, [r7, #27]
 801b3be:	e00a      	b.n	801b3d6 <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b3c0:	683b      	ldr	r3, [r7, #0]
 801b3c2:	3304      	adds	r3, #4
 801b3c4:	681a      	ldr	r2, [r3, #0]
 801b3c6:	4b3b      	ldr	r3, [pc, #236]	@ (801b4b4 <udp_input+0x28c>)
 801b3c8:	695b      	ldr	r3, [r3, #20]
 801b3ca:	429a      	cmp	r2, r3
 801b3cc:	bf0c      	ite	eq
 801b3ce:	2301      	moveq	r3, #1
 801b3d0:	2300      	movne	r3, #0
 801b3d2:	b2db      	uxtb	r3, r3
 801b3d4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b3d6:	7efb      	ldrb	r3, [r7, #27]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d059      	beq.n	801b490 <udp_input+0x268>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b3dc:	2108      	movs	r1, #8
 801b3de:	6878      	ldr	r0, [r7, #4]
 801b3e0:	f7f9 f92c 	bl	801463c <pbuf_remove_header>
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d012      	beq.n	801b410 <udp_input+0x1e8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b3ea:	4b2d      	ldr	r3, [pc, #180]	@ (801b4a0 <udp_input+0x278>)
 801b3ec:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801b3f0:	4932      	ldr	r1, [pc, #200]	@ (801b4bc <udp_input+0x294>)
 801b3f2:	482d      	ldr	r0, [pc, #180]	@ (801b4a8 <udp_input+0x280>)
 801b3f4:	f004 fbfa 	bl	801fbec <iprintf>
      UDP_STATS_INC(udp.drop);
 801b3f8:	4b2d      	ldr	r3, [pc, #180]	@ (801b4b0 <udp_input+0x288>)
 801b3fa:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b3fe:	3301      	adds	r3, #1
 801b400:	b29a      	uxth	r2, r3
 801b402:	4b2b      	ldr	r3, [pc, #172]	@ (801b4b0 <udp_input+0x288>)
 801b404:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b408:	6878      	ldr	r0, [r7, #4]
 801b40a:	f7f9 f99d 	bl	8014748 <pbuf_free>
      goto end;
 801b40e:	e042      	b.n	801b496 <udp_input+0x26e>
    }

    if (pcb != NULL) {
 801b410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b412:	2b00      	cmp	r3, #0
 801b414:	d012      	beq.n	801b43c <udp_input+0x214>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b418:	699b      	ldr	r3, [r3, #24]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d00a      	beq.n	801b434 <udp_input+0x20c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b420:	699c      	ldr	r4, [r3, #24]
 801b422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b424:	69d8      	ldr	r0, [r3, #28]
 801b426:	8a3b      	ldrh	r3, [r7, #16]
 801b428:	9300      	str	r3, [sp, #0]
 801b42a:	4b25      	ldr	r3, [pc, #148]	@ (801b4c0 <udp_input+0x298>)
 801b42c:	687a      	ldr	r2, [r7, #4]
 801b42e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b430:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b432:	e031      	b.n	801b498 <udp_input+0x270>
        pbuf_free(p);
 801b434:	6878      	ldr	r0, [r7, #4]
 801b436:	f7f9 f987 	bl	8014748 <pbuf_free>
        goto end;
 801b43a:	e02c      	b.n	801b496 <udp_input+0x26e>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b43c:	7cfb      	ldrb	r3, [r7, #19]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d112      	bne.n	801b468 <udp_input+0x240>
 801b442:	4b1c      	ldr	r3, [pc, #112]	@ (801b4b4 <udp_input+0x28c>)
 801b444:	695b      	ldr	r3, [r3, #20]
 801b446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b44a:	2be0      	cmp	r3, #224	@ 0xe0
 801b44c:	d00c      	beq.n	801b468 <udp_input+0x240>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b44e:	4b19      	ldr	r3, [pc, #100]	@ (801b4b4 <udp_input+0x28c>)
 801b450:	899b      	ldrh	r3, [r3, #12]
 801b452:	3308      	adds	r3, #8
 801b454:	b29b      	uxth	r3, r3
 801b456:	b21b      	sxth	r3, r3
 801b458:	4619      	mov	r1, r3
 801b45a:	6878      	ldr	r0, [r7, #4]
 801b45c:	f7f9 f961 	bl	8014722 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b460:	2103      	movs	r1, #3
 801b462:	6878      	ldr	r0, [r7, #4]
 801b464:	f001 fc2e 	bl	801ccc4 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801b468:	4b11      	ldr	r3, [pc, #68]	@ (801b4b0 <udp_input+0x288>)
 801b46a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801b46e:	3301      	adds	r3, #1
 801b470:	b29a      	uxth	r2, r3
 801b472:	4b0f      	ldr	r3, [pc, #60]	@ (801b4b0 <udp_input+0x288>)
 801b474:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801b478:	4b0d      	ldr	r3, [pc, #52]	@ (801b4b0 <udp_input+0x288>)
 801b47a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b47e:	3301      	adds	r3, #1
 801b480:	b29a      	uxth	r2, r3
 801b482:	4b0b      	ldr	r3, [pc, #44]	@ (801b4b0 <udp_input+0x288>)
 801b484:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801b488:	6878      	ldr	r0, [r7, #4]
 801b48a:	f7f9 f95d 	bl	8014748 <pbuf_free>
  return;
 801b48e:	e003      	b.n	801b498 <udp_input+0x270>
    pbuf_free(p);
 801b490:	6878      	ldr	r0, [r7, #4]
 801b492:	f7f9 f959 	bl	8014748 <pbuf_free>
  return;
 801b496:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b498:	372c      	adds	r7, #44	@ 0x2c
 801b49a:	46bd      	mov	sp, r7
 801b49c:	bd90      	pop	{r4, r7, pc}
 801b49e:	bf00      	nop
 801b4a0:	080237b0 	.word	0x080237b0
 801b4a4:	08023854 	.word	0x08023854
 801b4a8:	08023804 	.word	0x08023804
 801b4ac:	0802386c 	.word	0x0802386c
 801b4b0:	2002d2b0 	.word	0x2002d2b0
 801b4b4:	200270b4 	.word	0x200270b4
 801b4b8:	2002d408 	.word	0x2002d408
 801b4bc:	08023888 	.word	0x08023888
 801b4c0:	200270c4 	.word	0x200270c4

0801b4c4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801b4c4:	b580      	push	{r7, lr}
 801b4c6:	b082      	sub	sp, #8
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
 801b4cc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d109      	bne.n	801b4e8 <udp_send+0x24>
 801b4d4:	4b11      	ldr	r3, [pc, #68]	@ (801b51c <udp_send+0x58>)
 801b4d6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801b4da:	4911      	ldr	r1, [pc, #68]	@ (801b520 <udp_send+0x5c>)
 801b4dc:	4811      	ldr	r0, [pc, #68]	@ (801b524 <udp_send+0x60>)
 801b4de:	f004 fb85 	bl	801fbec <iprintf>
 801b4e2:	f06f 030f 	mvn.w	r3, #15
 801b4e6:	e015      	b.n	801b514 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801b4e8:	683b      	ldr	r3, [r7, #0]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d109      	bne.n	801b502 <udp_send+0x3e>
 801b4ee:	4b0b      	ldr	r3, [pc, #44]	@ (801b51c <udp_send+0x58>)
 801b4f0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801b4f4:	490c      	ldr	r1, [pc, #48]	@ (801b528 <udp_send+0x64>)
 801b4f6:	480b      	ldr	r0, [pc, #44]	@ (801b524 <udp_send+0x60>)
 801b4f8:	f004 fb78 	bl	801fbec <iprintf>
 801b4fc:	f06f 030f 	mvn.w	r3, #15
 801b500:	e008      	b.n	801b514 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	1d1a      	adds	r2, r3, #4
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	8a9b      	ldrh	r3, [r3, #20]
 801b50a:	6839      	ldr	r1, [r7, #0]
 801b50c:	6878      	ldr	r0, [r7, #4]
 801b50e:	f000 f80d 	bl	801b52c <udp_sendto>
 801b512:	4603      	mov	r3, r0
}
 801b514:	4618      	mov	r0, r3
 801b516:	3708      	adds	r7, #8
 801b518:	46bd      	mov	sp, r7
 801b51a:	bd80      	pop	{r7, pc}
 801b51c:	080237b0 	.word	0x080237b0
 801b520:	080238a4 	.word	0x080238a4
 801b524:	08023804 	.word	0x08023804
 801b528:	080238bc 	.word	0x080238bc

0801b52c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b088      	sub	sp, #32
 801b530:	af02      	add	r7, sp, #8
 801b532:	60f8      	str	r0, [r7, #12]
 801b534:	60b9      	str	r1, [r7, #8]
 801b536:	607a      	str	r2, [r7, #4]
 801b538:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801b53a:	68fb      	ldr	r3, [r7, #12]
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d109      	bne.n	801b554 <udp_sendto+0x28>
 801b540:	4b27      	ldr	r3, [pc, #156]	@ (801b5e0 <udp_sendto+0xb4>)
 801b542:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801b546:	4927      	ldr	r1, [pc, #156]	@ (801b5e4 <udp_sendto+0xb8>)
 801b548:	4827      	ldr	r0, [pc, #156]	@ (801b5e8 <udp_sendto+0xbc>)
 801b54a:	f004 fb4f 	bl	801fbec <iprintf>
 801b54e:	f06f 030f 	mvn.w	r3, #15
 801b552:	e040      	b.n	801b5d6 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801b554:	68bb      	ldr	r3, [r7, #8]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d109      	bne.n	801b56e <udp_sendto+0x42>
 801b55a:	4b21      	ldr	r3, [pc, #132]	@ (801b5e0 <udp_sendto+0xb4>)
 801b55c:	f240 2219 	movw	r2, #537	@ 0x219
 801b560:	4922      	ldr	r1, [pc, #136]	@ (801b5ec <udp_sendto+0xc0>)
 801b562:	4821      	ldr	r0, [pc, #132]	@ (801b5e8 <udp_sendto+0xbc>)
 801b564:	f004 fb42 	bl	801fbec <iprintf>
 801b568:	f06f 030f 	mvn.w	r3, #15
 801b56c:	e033      	b.n	801b5d6 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d109      	bne.n	801b588 <udp_sendto+0x5c>
 801b574:	4b1a      	ldr	r3, [pc, #104]	@ (801b5e0 <udp_sendto+0xb4>)
 801b576:	f240 221a 	movw	r2, #538	@ 0x21a
 801b57a:	491d      	ldr	r1, [pc, #116]	@ (801b5f0 <udp_sendto+0xc4>)
 801b57c:	481a      	ldr	r0, [pc, #104]	@ (801b5e8 <udp_sendto+0xbc>)
 801b57e:	f004 fb35 	bl	801fbec <iprintf>
 801b582:	f06f 030f 	mvn.w	r3, #15
 801b586:	e026      	b.n	801b5d6 <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b588:	68fb      	ldr	r3, [r7, #12]
 801b58a:	7a1b      	ldrb	r3, [r3, #8]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d006      	beq.n	801b59e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	7a1b      	ldrb	r3, [r3, #8]
 801b594:	4618      	mov	r0, r3
 801b596:	f7f8 fd49 	bl	801402c <netif_get_by_index>
 801b59a:	6178      	str	r0, [r7, #20]
 801b59c:	e003      	b.n	801b5a6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f001 fc24 	bl	801cdec <ip4_route>
 801b5a4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801b5a6:	697b      	ldr	r3, [r7, #20]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d10a      	bne.n	801b5c2 <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801b5ac:	4b11      	ldr	r3, [pc, #68]	@ (801b5f4 <udp_sendto+0xc8>)
 801b5ae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801b5b2:	3301      	adds	r3, #1
 801b5b4:	b29a      	uxth	r2, r3
 801b5b6:	4b0f      	ldr	r3, [pc, #60]	@ (801b5f4 <udp_sendto+0xc8>)
 801b5b8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801b5bc:	f06f 0303 	mvn.w	r3, #3
 801b5c0:	e009      	b.n	801b5d6 <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801b5c2:	887a      	ldrh	r2, [r7, #2]
 801b5c4:	697b      	ldr	r3, [r7, #20]
 801b5c6:	9300      	str	r3, [sp, #0]
 801b5c8:	4613      	mov	r3, r2
 801b5ca:	687a      	ldr	r2, [r7, #4]
 801b5cc:	68b9      	ldr	r1, [r7, #8]
 801b5ce:	68f8      	ldr	r0, [r7, #12]
 801b5d0:	f000 f812 	bl	801b5f8 <udp_sendto_if>
 801b5d4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b5d6:	4618      	mov	r0, r3
 801b5d8:	3718      	adds	r7, #24
 801b5da:	46bd      	mov	sp, r7
 801b5dc:	bd80      	pop	{r7, pc}
 801b5de:	bf00      	nop
 801b5e0:	080237b0 	.word	0x080237b0
 801b5e4:	080238d4 	.word	0x080238d4
 801b5e8:	08023804 	.word	0x08023804
 801b5ec:	080238ec 	.word	0x080238ec
 801b5f0:	08023908 	.word	0x08023908
 801b5f4:	2002d2b0 	.word	0x2002d2b0

0801b5f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b088      	sub	sp, #32
 801b5fc:	af02      	add	r7, sp, #8
 801b5fe:	60f8      	str	r0, [r7, #12]
 801b600:	60b9      	str	r1, [r7, #8]
 801b602:	607a      	str	r2, [r7, #4]
 801b604:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d109      	bne.n	801b620 <udp_sendto_if+0x28>
 801b60c:	4b2e      	ldr	r3, [pc, #184]	@ (801b6c8 <udp_sendto_if+0xd0>)
 801b60e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b612:	492e      	ldr	r1, [pc, #184]	@ (801b6cc <udp_sendto_if+0xd4>)
 801b614:	482e      	ldr	r0, [pc, #184]	@ (801b6d0 <udp_sendto_if+0xd8>)
 801b616:	f004 fae9 	bl	801fbec <iprintf>
 801b61a:	f06f 030f 	mvn.w	r3, #15
 801b61e:	e04f      	b.n	801b6c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b620:	68bb      	ldr	r3, [r7, #8]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d109      	bne.n	801b63a <udp_sendto_if+0x42>
 801b626:	4b28      	ldr	r3, [pc, #160]	@ (801b6c8 <udp_sendto_if+0xd0>)
 801b628:	f240 2281 	movw	r2, #641	@ 0x281
 801b62c:	4929      	ldr	r1, [pc, #164]	@ (801b6d4 <udp_sendto_if+0xdc>)
 801b62e:	4828      	ldr	r0, [pc, #160]	@ (801b6d0 <udp_sendto_if+0xd8>)
 801b630:	f004 fadc 	bl	801fbec <iprintf>
 801b634:	f06f 030f 	mvn.w	r3, #15
 801b638:	e042      	b.n	801b6c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d109      	bne.n	801b654 <udp_sendto_if+0x5c>
 801b640:	4b21      	ldr	r3, [pc, #132]	@ (801b6c8 <udp_sendto_if+0xd0>)
 801b642:	f240 2282 	movw	r2, #642	@ 0x282
 801b646:	4924      	ldr	r1, [pc, #144]	@ (801b6d8 <udp_sendto_if+0xe0>)
 801b648:	4821      	ldr	r0, [pc, #132]	@ (801b6d0 <udp_sendto_if+0xd8>)
 801b64a:	f004 facf 	bl	801fbec <iprintf>
 801b64e:	f06f 030f 	mvn.w	r3, #15
 801b652:	e035      	b.n	801b6c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b654:	6a3b      	ldr	r3, [r7, #32]
 801b656:	2b00      	cmp	r3, #0
 801b658:	d109      	bne.n	801b66e <udp_sendto_if+0x76>
 801b65a:	4b1b      	ldr	r3, [pc, #108]	@ (801b6c8 <udp_sendto_if+0xd0>)
 801b65c:	f240 2283 	movw	r2, #643	@ 0x283
 801b660:	491e      	ldr	r1, [pc, #120]	@ (801b6dc <udp_sendto_if+0xe4>)
 801b662:	481b      	ldr	r0, [pc, #108]	@ (801b6d0 <udp_sendto_if+0xd8>)
 801b664:	f004 fac2 	bl	801fbec <iprintf>
 801b668:	f06f 030f 	mvn.w	r3, #15
 801b66c:	e028      	b.n	801b6c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d009      	beq.n	801b688 <udp_sendto_if+0x90>
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d005      	beq.n	801b688 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b684:	2be0      	cmp	r3, #224	@ 0xe0
 801b686:	d103      	bne.n	801b690 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b688:	6a3b      	ldr	r3, [r7, #32]
 801b68a:	3304      	adds	r3, #4
 801b68c:	617b      	str	r3, [r7, #20]
 801b68e:	e00b      	b.n	801b6a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	681a      	ldr	r2, [r3, #0]
 801b694:	6a3b      	ldr	r3, [r7, #32]
 801b696:	3304      	adds	r3, #4
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	429a      	cmp	r2, r3
 801b69c:	d002      	beq.n	801b6a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b69e:	f06f 0303 	mvn.w	r3, #3
 801b6a2:	e00d      	b.n	801b6c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b6a8:	887a      	ldrh	r2, [r7, #2]
 801b6aa:	697b      	ldr	r3, [r7, #20]
 801b6ac:	9301      	str	r3, [sp, #4]
 801b6ae:	6a3b      	ldr	r3, [r7, #32]
 801b6b0:	9300      	str	r3, [sp, #0]
 801b6b2:	4613      	mov	r3, r2
 801b6b4:	687a      	ldr	r2, [r7, #4]
 801b6b6:	68b9      	ldr	r1, [r7, #8]
 801b6b8:	68f8      	ldr	r0, [r7, #12]
 801b6ba:	f000 f811 	bl	801b6e0 <udp_sendto_if_src>
 801b6be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	3718      	adds	r7, #24
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bd80      	pop	{r7, pc}
 801b6c8:	080237b0 	.word	0x080237b0
 801b6cc:	08023924 	.word	0x08023924
 801b6d0:	08023804 	.word	0x08023804
 801b6d4:	08023940 	.word	0x08023940
 801b6d8:	0802395c 	.word	0x0802395c
 801b6dc:	0802397c 	.word	0x0802397c

0801b6e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b6e0:	b580      	push	{r7, lr}
 801b6e2:	b08c      	sub	sp, #48	@ 0x30
 801b6e4:	af04      	add	r7, sp, #16
 801b6e6:	60f8      	str	r0, [r7, #12]
 801b6e8:	60b9      	str	r1, [r7, #8]
 801b6ea:	607a      	str	r2, [r7, #4]
 801b6ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d109      	bne.n	801b708 <udp_sendto_if_src+0x28>
 801b6f4:	4b69      	ldr	r3, [pc, #420]	@ (801b89c <udp_sendto_if_src+0x1bc>)
 801b6f6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801b6fa:	4969      	ldr	r1, [pc, #420]	@ (801b8a0 <udp_sendto_if_src+0x1c0>)
 801b6fc:	4869      	ldr	r0, [pc, #420]	@ (801b8a4 <udp_sendto_if_src+0x1c4>)
 801b6fe:	f004 fa75 	bl	801fbec <iprintf>
 801b702:	f06f 030f 	mvn.w	r3, #15
 801b706:	e0c4      	b.n	801b892 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b708:	68bb      	ldr	r3, [r7, #8]
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d109      	bne.n	801b722 <udp_sendto_if_src+0x42>
 801b70e:	4b63      	ldr	r3, [pc, #396]	@ (801b89c <udp_sendto_if_src+0x1bc>)
 801b710:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801b714:	4964      	ldr	r1, [pc, #400]	@ (801b8a8 <udp_sendto_if_src+0x1c8>)
 801b716:	4863      	ldr	r0, [pc, #396]	@ (801b8a4 <udp_sendto_if_src+0x1c4>)
 801b718:	f004 fa68 	bl	801fbec <iprintf>
 801b71c:	f06f 030f 	mvn.w	r3, #15
 801b720:	e0b7      	b.n	801b892 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d109      	bne.n	801b73c <udp_sendto_if_src+0x5c>
 801b728:	4b5c      	ldr	r3, [pc, #368]	@ (801b89c <udp_sendto_if_src+0x1bc>)
 801b72a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801b72e:	495f      	ldr	r1, [pc, #380]	@ (801b8ac <udp_sendto_if_src+0x1cc>)
 801b730:	485c      	ldr	r0, [pc, #368]	@ (801b8a4 <udp_sendto_if_src+0x1c4>)
 801b732:	f004 fa5b 	bl	801fbec <iprintf>
 801b736:	f06f 030f 	mvn.w	r3, #15
 801b73a:	e0aa      	b.n	801b892 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d109      	bne.n	801b756 <udp_sendto_if_src+0x76>
 801b742:	4b56      	ldr	r3, [pc, #344]	@ (801b89c <udp_sendto_if_src+0x1bc>)
 801b744:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801b748:	4959      	ldr	r1, [pc, #356]	@ (801b8b0 <udp_sendto_if_src+0x1d0>)
 801b74a:	4856      	ldr	r0, [pc, #344]	@ (801b8a4 <udp_sendto_if_src+0x1c4>)
 801b74c:	f004 fa4e 	bl	801fbec <iprintf>
 801b750:	f06f 030f 	mvn.w	r3, #15
 801b754:	e09d      	b.n	801b892 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d109      	bne.n	801b770 <udp_sendto_if_src+0x90>
 801b75c:	4b4f      	ldr	r3, [pc, #316]	@ (801b89c <udp_sendto_if_src+0x1bc>)
 801b75e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801b762:	4954      	ldr	r1, [pc, #336]	@ (801b8b4 <udp_sendto_if_src+0x1d4>)
 801b764:	484f      	ldr	r0, [pc, #316]	@ (801b8a4 <udp_sendto_if_src+0x1c4>)
 801b766:	f004 fa41 	bl	801fbec <iprintf>
 801b76a:	f06f 030f 	mvn.w	r3, #15
 801b76e:	e090      	b.n	801b892 <udp_sendto_if_src+0x1b2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	8a5b      	ldrh	r3, [r3, #18]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d10f      	bne.n	801b798 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b778:	68f9      	ldr	r1, [r7, #12]
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	8a5b      	ldrh	r3, [r3, #18]
 801b77e:	461a      	mov	r2, r3
 801b780:	68f8      	ldr	r0, [r7, #12]
 801b782:	f000 f89d 	bl	801b8c0 <udp_bind>
 801b786:	4603      	mov	r3, r0
 801b788:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b78a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d002      	beq.n	801b798 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b792:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b796:	e07c      	b.n	801b892 <udp_sendto_if_src+0x1b2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b798:	68bb      	ldr	r3, [r7, #8]
 801b79a:	891b      	ldrh	r3, [r3, #8]
 801b79c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801b7a0:	4293      	cmp	r3, r2
 801b7a2:	d902      	bls.n	801b7aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b7a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b7a8:	e073      	b.n	801b892 <udp_sendto_if_src+0x1b2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b7aa:	2108      	movs	r1, #8
 801b7ac:	68b8      	ldr	r0, [r7, #8]
 801b7ae:	f7f8 ff35 	bl	801461c <pbuf_add_header>
 801b7b2:	4603      	mov	r3, r0
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d015      	beq.n	801b7e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b7b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b7bc:	2108      	movs	r1, #8
 801b7be:	2022      	movs	r0, #34	@ 0x22
 801b7c0:	f7f8 fcde 	bl	8014180 <pbuf_alloc>
 801b7c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b7c6:	69fb      	ldr	r3, [r7, #28]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d102      	bne.n	801b7d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b7cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b7d0:	e05f      	b.n	801b892 <udp_sendto_if_src+0x1b2>
    }
    if (p->tot_len != 0) {
 801b7d2:	68bb      	ldr	r3, [r7, #8]
 801b7d4:	891b      	ldrh	r3, [r3, #8]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d006      	beq.n	801b7e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b7da:	68b9      	ldr	r1, [r7, #8]
 801b7dc:	69f8      	ldr	r0, [r7, #28]
 801b7de:	f7f9 f8d7 	bl	8014990 <pbuf_chain>
 801b7e2:	e001      	b.n	801b7e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b7e4:	68bb      	ldr	r3, [r7, #8]
 801b7e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b7e8:	69fb      	ldr	r3, [r7, #28]
 801b7ea:	895b      	ldrh	r3, [r3, #10]
 801b7ec:	2b07      	cmp	r3, #7
 801b7ee:	d806      	bhi.n	801b7fe <udp_sendto_if_src+0x11e>
 801b7f0:	4b2a      	ldr	r3, [pc, #168]	@ (801b89c <udp_sendto_if_src+0x1bc>)
 801b7f2:	f240 320d 	movw	r2, #781	@ 0x30d
 801b7f6:	4930      	ldr	r1, [pc, #192]	@ (801b8b8 <udp_sendto_if_src+0x1d8>)
 801b7f8:	482a      	ldr	r0, [pc, #168]	@ (801b8a4 <udp_sendto_if_src+0x1c4>)
 801b7fa:	f004 f9f7 	bl	801fbec <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b7fe:	69fb      	ldr	r3, [r7, #28]
 801b800:	685b      	ldr	r3, [r3, #4]
 801b802:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	8a5b      	ldrh	r3, [r3, #18]
 801b808:	4618      	mov	r0, r3
 801b80a:	f7f7 fadf 	bl	8012dcc <lwip_htons>
 801b80e:	4603      	mov	r3, r0
 801b810:	461a      	mov	r2, r3
 801b812:	697b      	ldr	r3, [r7, #20]
 801b814:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b816:	887b      	ldrh	r3, [r7, #2]
 801b818:	4618      	mov	r0, r3
 801b81a:	f7f7 fad7 	bl	8012dcc <lwip_htons>
 801b81e:	4603      	mov	r3, r0
 801b820:	461a      	mov	r2, r3
 801b822:	697b      	ldr	r3, [r7, #20]
 801b824:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b826:	697b      	ldr	r3, [r7, #20]
 801b828:	2200      	movs	r2, #0
 801b82a:	719a      	strb	r2, [r3, #6]
 801b82c:	2200      	movs	r2, #0
 801b82e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b830:	69fb      	ldr	r3, [r7, #28]
 801b832:	891b      	ldrh	r3, [r3, #8]
 801b834:	4618      	mov	r0, r3
 801b836:	f7f7 fac9 	bl	8012dcc <lwip_htons>
 801b83a:	4603      	mov	r3, r0
 801b83c:	461a      	mov	r2, r3
 801b83e:	697b      	ldr	r3, [r7, #20]
 801b840:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b842:	2311      	movs	r3, #17
 801b844:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	7adb      	ldrb	r3, [r3, #11]
 801b84a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	7a9b      	ldrb	r3, [r3, #10]
 801b850:	7cb9      	ldrb	r1, [r7, #18]
 801b852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b854:	9202      	str	r2, [sp, #8]
 801b856:	7cfa      	ldrb	r2, [r7, #19]
 801b858:	9201      	str	r2, [sp, #4]
 801b85a:	9300      	str	r3, [sp, #0]
 801b85c:	460b      	mov	r3, r1
 801b85e:	687a      	ldr	r2, [r7, #4]
 801b860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b862:	69f8      	ldr	r0, [r7, #28]
 801b864:	f001 fd02 	bl	801d26c <ip4_output_if_src>
 801b868:	4603      	mov	r3, r0
 801b86a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b86c:	69fa      	ldr	r2, [r7, #28]
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	429a      	cmp	r2, r3
 801b872:	d004      	beq.n	801b87e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b874:	69f8      	ldr	r0, [r7, #28]
 801b876:	f7f8 ff67 	bl	8014748 <pbuf_free>
    q = NULL;
 801b87a:	2300      	movs	r3, #0
 801b87c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801b87e:	4b0f      	ldr	r3, [pc, #60]	@ (801b8bc <udp_sendto_if_src+0x1dc>)
 801b880:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801b884:	3301      	adds	r3, #1
 801b886:	b29a      	uxth	r2, r3
 801b888:	4b0c      	ldr	r3, [pc, #48]	@ (801b8bc <udp_sendto_if_src+0x1dc>)
 801b88a:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801b88e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b892:	4618      	mov	r0, r3
 801b894:	3720      	adds	r7, #32
 801b896:	46bd      	mov	sp, r7
 801b898:	bd80      	pop	{r7, pc}
 801b89a:	bf00      	nop
 801b89c:	080237b0 	.word	0x080237b0
 801b8a0:	0802399c 	.word	0x0802399c
 801b8a4:	08023804 	.word	0x08023804
 801b8a8:	080239bc 	.word	0x080239bc
 801b8ac:	080239dc 	.word	0x080239dc
 801b8b0:	08023a00 	.word	0x08023a00
 801b8b4:	08023a24 	.word	0x08023a24
 801b8b8:	08023a48 	.word	0x08023a48
 801b8bc:	2002d2b0 	.word	0x2002d2b0

0801b8c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b086      	sub	sp, #24
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	60f8      	str	r0, [r7, #12]
 801b8c8:	60b9      	str	r1, [r7, #8]
 801b8ca:	4613      	mov	r3, r2
 801b8cc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b8ce:	68bb      	ldr	r3, [r7, #8]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d101      	bne.n	801b8d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b8d4:	4b39      	ldr	r3, [pc, #228]	@ (801b9bc <udp_bind+0xfc>)
 801b8d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d109      	bne.n	801b8f2 <udp_bind+0x32>
 801b8de:	4b38      	ldr	r3, [pc, #224]	@ (801b9c0 <udp_bind+0x100>)
 801b8e0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801b8e4:	4937      	ldr	r1, [pc, #220]	@ (801b9c4 <udp_bind+0x104>)
 801b8e6:	4838      	ldr	r0, [pc, #224]	@ (801b9c8 <udp_bind+0x108>)
 801b8e8:	f004 f980 	bl	801fbec <iprintf>
 801b8ec:	f06f 030f 	mvn.w	r3, #15
 801b8f0:	e060      	b.n	801b9b4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b8f6:	4b35      	ldr	r3, [pc, #212]	@ (801b9cc <udp_bind+0x10c>)
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	617b      	str	r3, [r7, #20]
 801b8fc:	e009      	b.n	801b912 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b8fe:	68fa      	ldr	r2, [r7, #12]
 801b900:	697b      	ldr	r3, [r7, #20]
 801b902:	429a      	cmp	r2, r3
 801b904:	d102      	bne.n	801b90c <udp_bind+0x4c>
      rebind = 1;
 801b906:	2301      	movs	r3, #1
 801b908:	74fb      	strb	r3, [r7, #19]
      break;
 801b90a:	e005      	b.n	801b918 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b90c:	697b      	ldr	r3, [r7, #20]
 801b90e:	68db      	ldr	r3, [r3, #12]
 801b910:	617b      	str	r3, [r7, #20]
 801b912:	697b      	ldr	r3, [r7, #20]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d1f2      	bne.n	801b8fe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b918:	88fb      	ldrh	r3, [r7, #6]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d109      	bne.n	801b932 <udp_bind+0x72>
    port = udp_new_port();
 801b91e:	f7ff fbe7 	bl	801b0f0 <udp_new_port>
 801b922:	4603      	mov	r3, r0
 801b924:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b926:	88fb      	ldrh	r3, [r7, #6]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d12c      	bne.n	801b986 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b92c:	f06f 0307 	mvn.w	r3, #7
 801b930:	e040      	b.n	801b9b4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b932:	4b26      	ldr	r3, [pc, #152]	@ (801b9cc <udp_bind+0x10c>)
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	617b      	str	r3, [r7, #20]
 801b938:	e022      	b.n	801b980 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b93a:	68fa      	ldr	r2, [r7, #12]
 801b93c:	697b      	ldr	r3, [r7, #20]
 801b93e:	429a      	cmp	r2, r3
 801b940:	d01b      	beq.n	801b97a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b942:	697b      	ldr	r3, [r7, #20]
 801b944:	8a5b      	ldrh	r3, [r3, #18]
 801b946:	88fa      	ldrh	r2, [r7, #6]
 801b948:	429a      	cmp	r2, r3
 801b94a:	d116      	bne.n	801b97a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b94c:	697b      	ldr	r3, [r7, #20]
 801b94e:	681a      	ldr	r2, [r3, #0]
 801b950:	68bb      	ldr	r3, [r7, #8]
 801b952:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b954:	429a      	cmp	r2, r3
 801b956:	d00d      	beq.n	801b974 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d00a      	beq.n	801b974 <udp_bind+0xb4>
 801b95e:	68bb      	ldr	r3, [r7, #8]
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d006      	beq.n	801b974 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b966:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d003      	beq.n	801b974 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b96c:	697b      	ldr	r3, [r7, #20]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	2b00      	cmp	r3, #0
 801b972:	d102      	bne.n	801b97a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b974:	f06f 0307 	mvn.w	r3, #7
 801b978:	e01c      	b.n	801b9b4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b97a:	697b      	ldr	r3, [r7, #20]
 801b97c:	68db      	ldr	r3, [r3, #12]
 801b97e:	617b      	str	r3, [r7, #20]
 801b980:	697b      	ldr	r3, [r7, #20]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d1d9      	bne.n	801b93a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b986:	68bb      	ldr	r3, [r7, #8]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d002      	beq.n	801b992 <udp_bind+0xd2>
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	e000      	b.n	801b994 <udp_bind+0xd4>
 801b992:	2300      	movs	r3, #0
 801b994:	68fa      	ldr	r2, [r7, #12]
 801b996:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	88fa      	ldrh	r2, [r7, #6]
 801b99c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b99e:	7cfb      	ldrb	r3, [r7, #19]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d106      	bne.n	801b9b2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b9a4:	4b09      	ldr	r3, [pc, #36]	@ (801b9cc <udp_bind+0x10c>)
 801b9a6:	681a      	ldr	r2, [r3, #0]
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b9ac:	4a07      	ldr	r2, [pc, #28]	@ (801b9cc <udp_bind+0x10c>)
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b9b2:	2300      	movs	r3, #0
}
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	3718      	adds	r7, #24
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	bd80      	pop	{r7, pc}
 801b9bc:	08024960 	.word	0x08024960
 801b9c0:	080237b0 	.word	0x080237b0
 801b9c4:	08023a78 	.word	0x08023a78
 801b9c8:	08023804 	.word	0x08023804
 801b9cc:	2002d408 	.word	0x2002d408

0801b9d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b084      	sub	sp, #16
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	60b9      	str	r1, [r7, #8]
 801b9da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d107      	bne.n	801b9f2 <udp_recv+0x22>
 801b9e2:	4b08      	ldr	r3, [pc, #32]	@ (801ba04 <udp_recv+0x34>)
 801b9e4:	f240 428a 	movw	r2, #1162	@ 0x48a
 801b9e8:	4907      	ldr	r1, [pc, #28]	@ (801ba08 <udp_recv+0x38>)
 801b9ea:	4808      	ldr	r0, [pc, #32]	@ (801ba0c <udp_recv+0x3c>)
 801b9ec:	f004 f8fe 	bl	801fbec <iprintf>
 801b9f0:	e005      	b.n	801b9fe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	68ba      	ldr	r2, [r7, #8]
 801b9f6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	687a      	ldr	r2, [r7, #4]
 801b9fc:	61da      	str	r2, [r3, #28]
}
 801b9fe:	3710      	adds	r7, #16
 801ba00:	46bd      	mov	sp, r7
 801ba02:	bd80      	pop	{r7, pc}
 801ba04:	080237b0 	.word	0x080237b0
 801ba08:	08023ae4 	.word	0x08023ae4
 801ba0c:	08023804 	.word	0x08023804

0801ba10 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b084      	sub	sp, #16
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d107      	bne.n	801ba2e <udp_remove+0x1e>
 801ba1e:	4b19      	ldr	r3, [pc, #100]	@ (801ba84 <udp_remove+0x74>)
 801ba20:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801ba24:	4918      	ldr	r1, [pc, #96]	@ (801ba88 <udp_remove+0x78>)
 801ba26:	4819      	ldr	r0, [pc, #100]	@ (801ba8c <udp_remove+0x7c>)
 801ba28:	f004 f8e0 	bl	801fbec <iprintf>
 801ba2c:	e026      	b.n	801ba7c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ba2e:	4b18      	ldr	r3, [pc, #96]	@ (801ba90 <udp_remove+0x80>)
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	687a      	ldr	r2, [r7, #4]
 801ba34:	429a      	cmp	r2, r3
 801ba36:	d105      	bne.n	801ba44 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ba38:	4b15      	ldr	r3, [pc, #84]	@ (801ba90 <udp_remove+0x80>)
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	68db      	ldr	r3, [r3, #12]
 801ba3e:	4a14      	ldr	r2, [pc, #80]	@ (801ba90 <udp_remove+0x80>)
 801ba40:	6013      	str	r3, [r2, #0]
 801ba42:	e017      	b.n	801ba74 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ba44:	4b12      	ldr	r3, [pc, #72]	@ (801ba90 <udp_remove+0x80>)
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	60fb      	str	r3, [r7, #12]
 801ba4a:	e010      	b.n	801ba6e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	68db      	ldr	r3, [r3, #12]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d009      	beq.n	801ba68 <udp_remove+0x58>
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	68db      	ldr	r3, [r3, #12]
 801ba58:	687a      	ldr	r2, [r7, #4]
 801ba5a:	429a      	cmp	r2, r3
 801ba5c:	d104      	bne.n	801ba68 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	68da      	ldr	r2, [r3, #12]
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	60da      	str	r2, [r3, #12]
        break;
 801ba66:	e005      	b.n	801ba74 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	68db      	ldr	r3, [r3, #12]
 801ba6c:	60fb      	str	r3, [r7, #12]
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d1eb      	bne.n	801ba4c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ba74:	6879      	ldr	r1, [r7, #4]
 801ba76:	2000      	movs	r0, #0
 801ba78:	f7f7 ffc2 	bl	8013a00 <memp_free>
}
 801ba7c:	3710      	adds	r7, #16
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	080237b0 	.word	0x080237b0
 801ba88:	08023afc 	.word	0x08023afc
 801ba8c:	08023804 	.word	0x08023804
 801ba90:	2002d408 	.word	0x2002d408

0801ba94 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b082      	sub	sp, #8
 801ba98:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ba9a:	2000      	movs	r0, #0
 801ba9c:	f7f7 ff34 	bl	8013908 <memp_malloc>
 801baa0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	d007      	beq.n	801bab8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801baa8:	2220      	movs	r2, #32
 801baaa:	2100      	movs	r1, #0
 801baac:	6878      	ldr	r0, [r7, #4]
 801baae:	f004 f9f5 	bl	801fe9c <memset>
    pcb->ttl = UDP_TTL;
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	22ff      	movs	r2, #255	@ 0xff
 801bab6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801bab8:	687b      	ldr	r3, [r7, #4]
}
 801baba:	4618      	mov	r0, r3
 801babc:	3708      	adds	r7, #8
 801babe:	46bd      	mov	sp, r7
 801bac0:	bd80      	pop	{r7, pc}

0801bac2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801bac2:	b580      	push	{r7, lr}
 801bac4:	b084      	sub	sp, #16
 801bac6:	af00      	add	r7, sp, #0
 801bac8:	4603      	mov	r3, r0
 801baca:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801bacc:	f7ff ffe2 	bl	801ba94 <udp_new>
 801bad0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801bad2:	68fb      	ldr	r3, [r7, #12]
}
 801bad4:	4618      	mov	r0, r3
 801bad6:	3710      	adds	r7, #16
 801bad8:	46bd      	mov	sp, r7
 801bada:	bd80      	pop	{r7, pc}

0801badc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801badc:	b480      	push	{r7}
 801bade:	b085      	sub	sp, #20
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
 801bae4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d01e      	beq.n	801bb2a <udp_netif_ip_addr_changed+0x4e>
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d01a      	beq.n	801bb2a <udp_netif_ip_addr_changed+0x4e>
 801baf4:	683b      	ldr	r3, [r7, #0]
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d017      	beq.n	801bb2a <udp_netif_ip_addr_changed+0x4e>
 801bafa:	683b      	ldr	r3, [r7, #0]
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d013      	beq.n	801bb2a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bb02:	4b0d      	ldr	r3, [pc, #52]	@ (801bb38 <udp_netif_ip_addr_changed+0x5c>)
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	60fb      	str	r3, [r7, #12]
 801bb08:	e00c      	b.n	801bb24 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	681a      	ldr	r2, [r3, #0]
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	429a      	cmp	r2, r3
 801bb14:	d103      	bne.n	801bb1e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801bb16:	683b      	ldr	r3, [r7, #0]
 801bb18:	681a      	ldr	r2, [r3, #0]
 801bb1a:	68fb      	ldr	r3, [r7, #12]
 801bb1c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	68db      	ldr	r3, [r3, #12]
 801bb22:	60fb      	str	r3, [r7, #12]
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d1ef      	bne.n	801bb0a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801bb2a:	bf00      	nop
 801bb2c:	3714      	adds	r7, #20
 801bb2e:	46bd      	mov	sp, r7
 801bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb34:	4770      	bx	lr
 801bb36:	bf00      	nop
 801bb38:	2002d408 	.word	0x2002d408

0801bb3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b082      	sub	sp, #8
 801bb40:	af00      	add	r7, sp, #0
 801bb42:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801bb44:	4915      	ldr	r1, [pc, #84]	@ (801bb9c <etharp_free_entry+0x60>)
 801bb46:	687a      	ldr	r2, [r7, #4]
 801bb48:	4613      	mov	r3, r2
 801bb4a:	005b      	lsls	r3, r3, #1
 801bb4c:	4413      	add	r3, r2
 801bb4e:	00db      	lsls	r3, r3, #3
 801bb50:	440b      	add	r3, r1
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d013      	beq.n	801bb80 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801bb58:	4910      	ldr	r1, [pc, #64]	@ (801bb9c <etharp_free_entry+0x60>)
 801bb5a:	687a      	ldr	r2, [r7, #4]
 801bb5c:	4613      	mov	r3, r2
 801bb5e:	005b      	lsls	r3, r3, #1
 801bb60:	4413      	add	r3, r2
 801bb62:	00db      	lsls	r3, r3, #3
 801bb64:	440b      	add	r3, r1
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	4618      	mov	r0, r3
 801bb6a:	f7f8 fded 	bl	8014748 <pbuf_free>
    arp_table[i].q = NULL;
 801bb6e:	490b      	ldr	r1, [pc, #44]	@ (801bb9c <etharp_free_entry+0x60>)
 801bb70:	687a      	ldr	r2, [r7, #4]
 801bb72:	4613      	mov	r3, r2
 801bb74:	005b      	lsls	r3, r3, #1
 801bb76:	4413      	add	r3, r2
 801bb78:	00db      	lsls	r3, r3, #3
 801bb7a:	440b      	add	r3, r1
 801bb7c:	2200      	movs	r2, #0
 801bb7e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801bb80:	4906      	ldr	r1, [pc, #24]	@ (801bb9c <etharp_free_entry+0x60>)
 801bb82:	687a      	ldr	r2, [r7, #4]
 801bb84:	4613      	mov	r3, r2
 801bb86:	005b      	lsls	r3, r3, #1
 801bb88:	4413      	add	r3, r2
 801bb8a:	00db      	lsls	r3, r3, #3
 801bb8c:	440b      	add	r3, r1
 801bb8e:	3314      	adds	r3, #20
 801bb90:	2200      	movs	r2, #0
 801bb92:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801bb94:	bf00      	nop
 801bb96:	3708      	adds	r7, #8
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	bd80      	pop	{r7, pc}
 801bb9c:	2002d40c 	.word	0x2002d40c

0801bba0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b082      	sub	sp, #8
 801bba4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bba6:	2300      	movs	r3, #0
 801bba8:	607b      	str	r3, [r7, #4]
 801bbaa:	e096      	b.n	801bcda <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801bbac:	494f      	ldr	r1, [pc, #316]	@ (801bcec <etharp_tmr+0x14c>)
 801bbae:	687a      	ldr	r2, [r7, #4]
 801bbb0:	4613      	mov	r3, r2
 801bbb2:	005b      	lsls	r3, r3, #1
 801bbb4:	4413      	add	r3, r2
 801bbb6:	00db      	lsls	r3, r3, #3
 801bbb8:	440b      	add	r3, r1
 801bbba:	3314      	adds	r3, #20
 801bbbc:	781b      	ldrb	r3, [r3, #0]
 801bbbe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801bbc0:	78fb      	ldrb	r3, [r7, #3]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	f000 8086 	beq.w	801bcd4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801bbc8:	4948      	ldr	r1, [pc, #288]	@ (801bcec <etharp_tmr+0x14c>)
 801bbca:	687a      	ldr	r2, [r7, #4]
 801bbcc:	4613      	mov	r3, r2
 801bbce:	005b      	lsls	r3, r3, #1
 801bbd0:	4413      	add	r3, r2
 801bbd2:	00db      	lsls	r3, r3, #3
 801bbd4:	440b      	add	r3, r1
 801bbd6:	3312      	adds	r3, #18
 801bbd8:	881b      	ldrh	r3, [r3, #0]
 801bbda:	3301      	adds	r3, #1
 801bbdc:	b298      	uxth	r0, r3
 801bbde:	4943      	ldr	r1, [pc, #268]	@ (801bcec <etharp_tmr+0x14c>)
 801bbe0:	687a      	ldr	r2, [r7, #4]
 801bbe2:	4613      	mov	r3, r2
 801bbe4:	005b      	lsls	r3, r3, #1
 801bbe6:	4413      	add	r3, r2
 801bbe8:	00db      	lsls	r3, r3, #3
 801bbea:	440b      	add	r3, r1
 801bbec:	3312      	adds	r3, #18
 801bbee:	4602      	mov	r2, r0
 801bbf0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bbf2:	493e      	ldr	r1, [pc, #248]	@ (801bcec <etharp_tmr+0x14c>)
 801bbf4:	687a      	ldr	r2, [r7, #4]
 801bbf6:	4613      	mov	r3, r2
 801bbf8:	005b      	lsls	r3, r3, #1
 801bbfa:	4413      	add	r3, r2
 801bbfc:	00db      	lsls	r3, r3, #3
 801bbfe:	440b      	add	r3, r1
 801bc00:	3312      	adds	r3, #18
 801bc02:	881b      	ldrh	r3, [r3, #0]
 801bc04:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801bc08:	d215      	bcs.n	801bc36 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bc0a:	4938      	ldr	r1, [pc, #224]	@ (801bcec <etharp_tmr+0x14c>)
 801bc0c:	687a      	ldr	r2, [r7, #4]
 801bc0e:	4613      	mov	r3, r2
 801bc10:	005b      	lsls	r3, r3, #1
 801bc12:	4413      	add	r3, r2
 801bc14:	00db      	lsls	r3, r3, #3
 801bc16:	440b      	add	r3, r1
 801bc18:	3314      	adds	r3, #20
 801bc1a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bc1c:	2b01      	cmp	r3, #1
 801bc1e:	d10e      	bne.n	801bc3e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801bc20:	4932      	ldr	r1, [pc, #200]	@ (801bcec <etharp_tmr+0x14c>)
 801bc22:	687a      	ldr	r2, [r7, #4]
 801bc24:	4613      	mov	r3, r2
 801bc26:	005b      	lsls	r3, r3, #1
 801bc28:	4413      	add	r3, r2
 801bc2a:	00db      	lsls	r3, r3, #3
 801bc2c:	440b      	add	r3, r1
 801bc2e:	3312      	adds	r3, #18
 801bc30:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bc32:	2b04      	cmp	r3, #4
 801bc34:	d903      	bls.n	801bc3e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801bc36:	6878      	ldr	r0, [r7, #4]
 801bc38:	f7ff ff80 	bl	801bb3c <etharp_free_entry>
 801bc3c:	e04a      	b.n	801bcd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801bc3e:	492b      	ldr	r1, [pc, #172]	@ (801bcec <etharp_tmr+0x14c>)
 801bc40:	687a      	ldr	r2, [r7, #4]
 801bc42:	4613      	mov	r3, r2
 801bc44:	005b      	lsls	r3, r3, #1
 801bc46:	4413      	add	r3, r2
 801bc48:	00db      	lsls	r3, r3, #3
 801bc4a:	440b      	add	r3, r1
 801bc4c:	3314      	adds	r3, #20
 801bc4e:	781b      	ldrb	r3, [r3, #0]
 801bc50:	2b03      	cmp	r3, #3
 801bc52:	d10a      	bne.n	801bc6a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801bc54:	4925      	ldr	r1, [pc, #148]	@ (801bcec <etharp_tmr+0x14c>)
 801bc56:	687a      	ldr	r2, [r7, #4]
 801bc58:	4613      	mov	r3, r2
 801bc5a:	005b      	lsls	r3, r3, #1
 801bc5c:	4413      	add	r3, r2
 801bc5e:	00db      	lsls	r3, r3, #3
 801bc60:	440b      	add	r3, r1
 801bc62:	3314      	adds	r3, #20
 801bc64:	2204      	movs	r2, #4
 801bc66:	701a      	strb	r2, [r3, #0]
 801bc68:	e034      	b.n	801bcd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801bc6a:	4920      	ldr	r1, [pc, #128]	@ (801bcec <etharp_tmr+0x14c>)
 801bc6c:	687a      	ldr	r2, [r7, #4]
 801bc6e:	4613      	mov	r3, r2
 801bc70:	005b      	lsls	r3, r3, #1
 801bc72:	4413      	add	r3, r2
 801bc74:	00db      	lsls	r3, r3, #3
 801bc76:	440b      	add	r3, r1
 801bc78:	3314      	adds	r3, #20
 801bc7a:	781b      	ldrb	r3, [r3, #0]
 801bc7c:	2b04      	cmp	r3, #4
 801bc7e:	d10a      	bne.n	801bc96 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801bc80:	491a      	ldr	r1, [pc, #104]	@ (801bcec <etharp_tmr+0x14c>)
 801bc82:	687a      	ldr	r2, [r7, #4]
 801bc84:	4613      	mov	r3, r2
 801bc86:	005b      	lsls	r3, r3, #1
 801bc88:	4413      	add	r3, r2
 801bc8a:	00db      	lsls	r3, r3, #3
 801bc8c:	440b      	add	r3, r1
 801bc8e:	3314      	adds	r3, #20
 801bc90:	2202      	movs	r2, #2
 801bc92:	701a      	strb	r2, [r3, #0]
 801bc94:	e01e      	b.n	801bcd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bc96:	4915      	ldr	r1, [pc, #84]	@ (801bcec <etharp_tmr+0x14c>)
 801bc98:	687a      	ldr	r2, [r7, #4]
 801bc9a:	4613      	mov	r3, r2
 801bc9c:	005b      	lsls	r3, r3, #1
 801bc9e:	4413      	add	r3, r2
 801bca0:	00db      	lsls	r3, r3, #3
 801bca2:	440b      	add	r3, r1
 801bca4:	3314      	adds	r3, #20
 801bca6:	781b      	ldrb	r3, [r3, #0]
 801bca8:	2b01      	cmp	r3, #1
 801bcaa:	d113      	bne.n	801bcd4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801bcac:	490f      	ldr	r1, [pc, #60]	@ (801bcec <etharp_tmr+0x14c>)
 801bcae:	687a      	ldr	r2, [r7, #4]
 801bcb0:	4613      	mov	r3, r2
 801bcb2:	005b      	lsls	r3, r3, #1
 801bcb4:	4413      	add	r3, r2
 801bcb6:	00db      	lsls	r3, r3, #3
 801bcb8:	440b      	add	r3, r1
 801bcba:	3308      	adds	r3, #8
 801bcbc:	6818      	ldr	r0, [r3, #0]
 801bcbe:	687a      	ldr	r2, [r7, #4]
 801bcc0:	4613      	mov	r3, r2
 801bcc2:	005b      	lsls	r3, r3, #1
 801bcc4:	4413      	add	r3, r2
 801bcc6:	00db      	lsls	r3, r3, #3
 801bcc8:	4a08      	ldr	r2, [pc, #32]	@ (801bcec <etharp_tmr+0x14c>)
 801bcca:	4413      	add	r3, r2
 801bccc:	3304      	adds	r3, #4
 801bcce:	4619      	mov	r1, r3
 801bcd0:	f000 feae 	bl	801ca30 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	607b      	str	r3, [r7, #4]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	2b09      	cmp	r3, #9
 801bcde:	f77f af65 	ble.w	801bbac <etharp_tmr+0xc>
      }
    }
  }
}
 801bce2:	bf00      	nop
 801bce4:	bf00      	nop
 801bce6:	3708      	adds	r7, #8
 801bce8:	46bd      	mov	sp, r7
 801bcea:	bd80      	pop	{r7, pc}
 801bcec:	2002d40c 	.word	0x2002d40c

0801bcf0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b08a      	sub	sp, #40	@ 0x28
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	60f8      	str	r0, [r7, #12]
 801bcf8:	460b      	mov	r3, r1
 801bcfa:	607a      	str	r2, [r7, #4]
 801bcfc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801bcfe:	230a      	movs	r3, #10
 801bd00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801bd02:	230a      	movs	r3, #10
 801bd04:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801bd06:	230a      	movs	r3, #10
 801bd08:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801bd0e:	230a      	movs	r3, #10
 801bd10:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801bd12:	2300      	movs	r3, #0
 801bd14:	83bb      	strh	r3, [r7, #28]
 801bd16:	2300      	movs	r3, #0
 801bd18:	837b      	strh	r3, [r7, #26]
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bd1e:	2300      	movs	r3, #0
 801bd20:	843b      	strh	r3, [r7, #32]
 801bd22:	e0ae      	b.n	801be82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801bd24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd28:	49a6      	ldr	r1, [pc, #664]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bd2a:	4613      	mov	r3, r2
 801bd2c:	005b      	lsls	r3, r3, #1
 801bd2e:	4413      	add	r3, r2
 801bd30:	00db      	lsls	r3, r3, #3
 801bd32:	440b      	add	r3, r1
 801bd34:	3314      	adds	r3, #20
 801bd36:	781b      	ldrb	r3, [r3, #0]
 801bd38:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801bd3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801bd3e:	2b0a      	cmp	r3, #10
 801bd40:	d105      	bne.n	801bd4e <etharp_find_entry+0x5e>
 801bd42:	7dfb      	ldrb	r3, [r7, #23]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d102      	bne.n	801bd4e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801bd48:	8c3b      	ldrh	r3, [r7, #32]
 801bd4a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801bd4c:	e095      	b.n	801be7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801bd4e:	7dfb      	ldrb	r3, [r7, #23]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	f000 8092 	beq.w	801be7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801bd56:	7dfb      	ldrb	r3, [r7, #23]
 801bd58:	2b01      	cmp	r3, #1
 801bd5a:	d009      	beq.n	801bd70 <etharp_find_entry+0x80>
 801bd5c:	7dfb      	ldrb	r3, [r7, #23]
 801bd5e:	2b01      	cmp	r3, #1
 801bd60:	d806      	bhi.n	801bd70 <etharp_find_entry+0x80>
 801bd62:	4b99      	ldr	r3, [pc, #612]	@ (801bfc8 <etharp_find_entry+0x2d8>)
 801bd64:	f240 1223 	movw	r2, #291	@ 0x123
 801bd68:	4998      	ldr	r1, [pc, #608]	@ (801bfcc <etharp_find_entry+0x2dc>)
 801bd6a:	4899      	ldr	r0, [pc, #612]	@ (801bfd0 <etharp_find_entry+0x2e0>)
 801bd6c:	f003 ff3e 	bl	801fbec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d020      	beq.n	801bdb8 <etharp_find_entry+0xc8>
 801bd76:	68fb      	ldr	r3, [r7, #12]
 801bd78:	6819      	ldr	r1, [r3, #0]
 801bd7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd7e:	4891      	ldr	r0, [pc, #580]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bd80:	4613      	mov	r3, r2
 801bd82:	005b      	lsls	r3, r3, #1
 801bd84:	4413      	add	r3, r2
 801bd86:	00db      	lsls	r3, r3, #3
 801bd88:	4403      	add	r3, r0
 801bd8a:	3304      	adds	r3, #4
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	4299      	cmp	r1, r3
 801bd90:	d112      	bne.n	801bdb8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d00c      	beq.n	801bdb2 <etharp_find_entry+0xc2>
 801bd98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd9c:	4989      	ldr	r1, [pc, #548]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bd9e:	4613      	mov	r3, r2
 801bda0:	005b      	lsls	r3, r3, #1
 801bda2:	4413      	add	r3, r2
 801bda4:	00db      	lsls	r3, r3, #3
 801bda6:	440b      	add	r3, r1
 801bda8:	3308      	adds	r3, #8
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	687a      	ldr	r2, [r7, #4]
 801bdae:	429a      	cmp	r2, r3
 801bdb0:	d102      	bne.n	801bdb8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801bdb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bdb6:	e100      	b.n	801bfba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801bdb8:	7dfb      	ldrb	r3, [r7, #23]
 801bdba:	2b01      	cmp	r3, #1
 801bdbc:	d140      	bne.n	801be40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801bdbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdc2:	4980      	ldr	r1, [pc, #512]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bdc4:	4613      	mov	r3, r2
 801bdc6:	005b      	lsls	r3, r3, #1
 801bdc8:	4413      	add	r3, r2
 801bdca:	00db      	lsls	r3, r3, #3
 801bdcc:	440b      	add	r3, r1
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d01a      	beq.n	801be0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801bdd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdd8:	497a      	ldr	r1, [pc, #488]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bdda:	4613      	mov	r3, r2
 801bddc:	005b      	lsls	r3, r3, #1
 801bdde:	4413      	add	r3, r2
 801bde0:	00db      	lsls	r3, r3, #3
 801bde2:	440b      	add	r3, r1
 801bde4:	3312      	adds	r3, #18
 801bde6:	881b      	ldrh	r3, [r3, #0]
 801bde8:	8bba      	ldrh	r2, [r7, #28]
 801bdea:	429a      	cmp	r2, r3
 801bdec:	d845      	bhi.n	801be7a <etharp_find_entry+0x18a>
            old_queue = i;
 801bdee:	8c3b      	ldrh	r3, [r7, #32]
 801bdf0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801bdf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdf6:	4973      	ldr	r1, [pc, #460]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bdf8:	4613      	mov	r3, r2
 801bdfa:	005b      	lsls	r3, r3, #1
 801bdfc:	4413      	add	r3, r2
 801bdfe:	00db      	lsls	r3, r3, #3
 801be00:	440b      	add	r3, r1
 801be02:	3312      	adds	r3, #18
 801be04:	881b      	ldrh	r3, [r3, #0]
 801be06:	83bb      	strh	r3, [r7, #28]
 801be08:	e037      	b.n	801be7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801be0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be0e:	496d      	ldr	r1, [pc, #436]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801be10:	4613      	mov	r3, r2
 801be12:	005b      	lsls	r3, r3, #1
 801be14:	4413      	add	r3, r2
 801be16:	00db      	lsls	r3, r3, #3
 801be18:	440b      	add	r3, r1
 801be1a:	3312      	adds	r3, #18
 801be1c:	881b      	ldrh	r3, [r3, #0]
 801be1e:	8b7a      	ldrh	r2, [r7, #26]
 801be20:	429a      	cmp	r2, r3
 801be22:	d82a      	bhi.n	801be7a <etharp_find_entry+0x18a>
            old_pending = i;
 801be24:	8c3b      	ldrh	r3, [r7, #32]
 801be26:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801be28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be2c:	4965      	ldr	r1, [pc, #404]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801be2e:	4613      	mov	r3, r2
 801be30:	005b      	lsls	r3, r3, #1
 801be32:	4413      	add	r3, r2
 801be34:	00db      	lsls	r3, r3, #3
 801be36:	440b      	add	r3, r1
 801be38:	3312      	adds	r3, #18
 801be3a:	881b      	ldrh	r3, [r3, #0]
 801be3c:	837b      	strh	r3, [r7, #26]
 801be3e:	e01c      	b.n	801be7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801be40:	7dfb      	ldrb	r3, [r7, #23]
 801be42:	2b01      	cmp	r3, #1
 801be44:	d919      	bls.n	801be7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801be46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be4a:	495e      	ldr	r1, [pc, #376]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801be4c:	4613      	mov	r3, r2
 801be4e:	005b      	lsls	r3, r3, #1
 801be50:	4413      	add	r3, r2
 801be52:	00db      	lsls	r3, r3, #3
 801be54:	440b      	add	r3, r1
 801be56:	3312      	adds	r3, #18
 801be58:	881b      	ldrh	r3, [r3, #0]
 801be5a:	8b3a      	ldrh	r2, [r7, #24]
 801be5c:	429a      	cmp	r2, r3
 801be5e:	d80c      	bhi.n	801be7a <etharp_find_entry+0x18a>
            old_stable = i;
 801be60:	8c3b      	ldrh	r3, [r7, #32]
 801be62:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801be64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be68:	4956      	ldr	r1, [pc, #344]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801be6a:	4613      	mov	r3, r2
 801be6c:	005b      	lsls	r3, r3, #1
 801be6e:	4413      	add	r3, r2
 801be70:	00db      	lsls	r3, r3, #3
 801be72:	440b      	add	r3, r1
 801be74:	3312      	adds	r3, #18
 801be76:	881b      	ldrh	r3, [r3, #0]
 801be78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801be7a:	8c3b      	ldrh	r3, [r7, #32]
 801be7c:	3301      	adds	r3, #1
 801be7e:	b29b      	uxth	r3, r3
 801be80:	843b      	strh	r3, [r7, #32]
 801be82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801be86:	2b09      	cmp	r3, #9
 801be88:	f77f af4c 	ble.w	801bd24 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801be8c:	7afb      	ldrb	r3, [r7, #11]
 801be8e:	f003 0302 	and.w	r3, r3, #2
 801be92:	2b00      	cmp	r3, #0
 801be94:	d108      	bne.n	801bea8 <etharp_find_entry+0x1b8>
 801be96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801be9a:	2b0a      	cmp	r3, #10
 801be9c:	d107      	bne.n	801beae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801be9e:	7afb      	ldrb	r3, [r7, #11]
 801bea0:	f003 0301 	and.w	r3, r3, #1
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d102      	bne.n	801beae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bea8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801beac:	e085      	b.n	801bfba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801beae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801beb2:	2b09      	cmp	r3, #9
 801beb4:	dc02      	bgt.n	801bebc <etharp_find_entry+0x1cc>
    i = empty;
 801beb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801beb8:	843b      	strh	r3, [r7, #32]
 801beba:	e039      	b.n	801bf30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bebc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801bec0:	2b09      	cmp	r3, #9
 801bec2:	dc14      	bgt.n	801beee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bec4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bec6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801becc:	493d      	ldr	r1, [pc, #244]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bece:	4613      	mov	r3, r2
 801bed0:	005b      	lsls	r3, r3, #1
 801bed2:	4413      	add	r3, r2
 801bed4:	00db      	lsls	r3, r3, #3
 801bed6:	440b      	add	r3, r1
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d018      	beq.n	801bf10 <etharp_find_entry+0x220>
 801bede:	4b3a      	ldr	r3, [pc, #232]	@ (801bfc8 <etharp_find_entry+0x2d8>)
 801bee0:	f240 126d 	movw	r2, #365	@ 0x16d
 801bee4:	493b      	ldr	r1, [pc, #236]	@ (801bfd4 <etharp_find_entry+0x2e4>)
 801bee6:	483a      	ldr	r0, [pc, #232]	@ (801bfd0 <etharp_find_entry+0x2e0>)
 801bee8:	f003 fe80 	bl	801fbec <iprintf>
 801beec:	e010      	b.n	801bf10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801beee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801bef2:	2b09      	cmp	r3, #9
 801bef4:	dc02      	bgt.n	801befc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bef6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801bef8:	843b      	strh	r3, [r7, #32]
 801befa:	e009      	b.n	801bf10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801befc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801bf00:	2b09      	cmp	r3, #9
 801bf02:	dc02      	bgt.n	801bf0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801bf04:	8bfb      	ldrh	r3, [r7, #30]
 801bf06:	843b      	strh	r3, [r7, #32]
 801bf08:	e002      	b.n	801bf10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801bf0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf0e:	e054      	b.n	801bfba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bf10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bf14:	2b09      	cmp	r3, #9
 801bf16:	dd06      	ble.n	801bf26 <etharp_find_entry+0x236>
 801bf18:	4b2b      	ldr	r3, [pc, #172]	@ (801bfc8 <etharp_find_entry+0x2d8>)
 801bf1a:	f240 127f 	movw	r2, #383	@ 0x17f
 801bf1e:	492e      	ldr	r1, [pc, #184]	@ (801bfd8 <etharp_find_entry+0x2e8>)
 801bf20:	482b      	ldr	r0, [pc, #172]	@ (801bfd0 <etharp_find_entry+0x2e0>)
 801bf22:	f003 fe63 	bl	801fbec <iprintf>
    etharp_free_entry(i);
 801bf26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	f7ff fe06 	bl	801bb3c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bf30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bf34:	2b09      	cmp	r3, #9
 801bf36:	dd06      	ble.n	801bf46 <etharp_find_entry+0x256>
 801bf38:	4b23      	ldr	r3, [pc, #140]	@ (801bfc8 <etharp_find_entry+0x2d8>)
 801bf3a:	f240 1283 	movw	r2, #387	@ 0x183
 801bf3e:	4926      	ldr	r1, [pc, #152]	@ (801bfd8 <etharp_find_entry+0x2e8>)
 801bf40:	4823      	ldr	r0, [pc, #140]	@ (801bfd0 <etharp_find_entry+0x2e0>)
 801bf42:	f003 fe53 	bl	801fbec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801bf46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf4a:	491e      	ldr	r1, [pc, #120]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bf4c:	4613      	mov	r3, r2
 801bf4e:	005b      	lsls	r3, r3, #1
 801bf50:	4413      	add	r3, r2
 801bf52:	00db      	lsls	r3, r3, #3
 801bf54:	440b      	add	r3, r1
 801bf56:	3314      	adds	r3, #20
 801bf58:	781b      	ldrb	r3, [r3, #0]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d006      	beq.n	801bf6c <etharp_find_entry+0x27c>
 801bf5e:	4b1a      	ldr	r3, [pc, #104]	@ (801bfc8 <etharp_find_entry+0x2d8>)
 801bf60:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801bf64:	491d      	ldr	r1, [pc, #116]	@ (801bfdc <etharp_find_entry+0x2ec>)
 801bf66:	481a      	ldr	r0, [pc, #104]	@ (801bfd0 <etharp_find_entry+0x2e0>)
 801bf68:	f003 fe40 	bl	801fbec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bf6c:	68fb      	ldr	r3, [r7, #12]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d00b      	beq.n	801bf8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bf72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf76:	68fb      	ldr	r3, [r7, #12]
 801bf78:	6819      	ldr	r1, [r3, #0]
 801bf7a:	4812      	ldr	r0, [pc, #72]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bf7c:	4613      	mov	r3, r2
 801bf7e:	005b      	lsls	r3, r3, #1
 801bf80:	4413      	add	r3, r2
 801bf82:	00db      	lsls	r3, r3, #3
 801bf84:	4403      	add	r3, r0
 801bf86:	3304      	adds	r3, #4
 801bf88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801bf8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf8e:	490d      	ldr	r1, [pc, #52]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bf90:	4613      	mov	r3, r2
 801bf92:	005b      	lsls	r3, r3, #1
 801bf94:	4413      	add	r3, r2
 801bf96:	00db      	lsls	r3, r3, #3
 801bf98:	440b      	add	r3, r1
 801bf9a:	3312      	adds	r3, #18
 801bf9c:	2200      	movs	r2, #0
 801bf9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bfa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bfa4:	4907      	ldr	r1, [pc, #28]	@ (801bfc4 <etharp_find_entry+0x2d4>)
 801bfa6:	4613      	mov	r3, r2
 801bfa8:	005b      	lsls	r3, r3, #1
 801bfaa:	4413      	add	r3, r2
 801bfac:	00db      	lsls	r3, r3, #3
 801bfae:	440b      	add	r3, r1
 801bfb0:	3308      	adds	r3, #8
 801bfb2:	687a      	ldr	r2, [r7, #4]
 801bfb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bfb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801bfba:	4618      	mov	r0, r3
 801bfbc:	3728      	adds	r7, #40	@ 0x28
 801bfbe:	46bd      	mov	sp, r7
 801bfc0:	bd80      	pop	{r7, pc}
 801bfc2:	bf00      	nop
 801bfc4:	2002d40c 	.word	0x2002d40c
 801bfc8:	08023b14 	.word	0x08023b14
 801bfcc:	08023b4c 	.word	0x08023b4c
 801bfd0:	08023b8c 	.word	0x08023b8c
 801bfd4:	08023bb4 	.word	0x08023bb4
 801bfd8:	08023bcc 	.word	0x08023bcc
 801bfdc:	08023be0 	.word	0x08023be0

0801bfe0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b088      	sub	sp, #32
 801bfe4:	af02      	add	r7, sp, #8
 801bfe6:	60f8      	str	r0, [r7, #12]
 801bfe8:	60b9      	str	r1, [r7, #8]
 801bfea:	607a      	str	r2, [r7, #4]
 801bfec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801bfee:	68fb      	ldr	r3, [r7, #12]
 801bff0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801bff4:	2b06      	cmp	r3, #6
 801bff6:	d006      	beq.n	801c006 <etharp_update_arp_entry+0x26>
 801bff8:	4b48      	ldr	r3, [pc, #288]	@ (801c11c <etharp_update_arp_entry+0x13c>)
 801bffa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801bffe:	4948      	ldr	r1, [pc, #288]	@ (801c120 <etharp_update_arp_entry+0x140>)
 801c000:	4848      	ldr	r0, [pc, #288]	@ (801c124 <etharp_update_arp_entry+0x144>)
 801c002:	f003 fdf3 	bl	801fbec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c006:	68bb      	ldr	r3, [r7, #8]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d012      	beq.n	801c032 <etharp_update_arp_entry+0x52>
 801c00c:	68bb      	ldr	r3, [r7, #8]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d00e      	beq.n	801c032 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c014:	68bb      	ldr	r3, [r7, #8]
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	68f9      	ldr	r1, [r7, #12]
 801c01a:	4618      	mov	r0, r3
 801c01c:	f001 f9ee 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 801c020:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c022:	2b00      	cmp	r3, #0
 801c024:	d105      	bne.n	801c032 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c026:	68bb      	ldr	r3, [r7, #8]
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c02e:	2be0      	cmp	r3, #224	@ 0xe0
 801c030:	d102      	bne.n	801c038 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c032:	f06f 030f 	mvn.w	r3, #15
 801c036:	e06c      	b.n	801c112 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c038:	78fb      	ldrb	r3, [r7, #3]
 801c03a:	68fa      	ldr	r2, [r7, #12]
 801c03c:	4619      	mov	r1, r3
 801c03e:	68b8      	ldr	r0, [r7, #8]
 801c040:	f7ff fe56 	bl	801bcf0 <etharp_find_entry>
 801c044:	4603      	mov	r3, r0
 801c046:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c048:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	da02      	bge.n	801c056 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c050:	8afb      	ldrh	r3, [r7, #22]
 801c052:	b25b      	sxtb	r3, r3
 801c054:	e05d      	b.n	801c112 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c056:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c05a:	4933      	ldr	r1, [pc, #204]	@ (801c128 <etharp_update_arp_entry+0x148>)
 801c05c:	4613      	mov	r3, r2
 801c05e:	005b      	lsls	r3, r3, #1
 801c060:	4413      	add	r3, r2
 801c062:	00db      	lsls	r3, r3, #3
 801c064:	440b      	add	r3, r1
 801c066:	3314      	adds	r3, #20
 801c068:	2202      	movs	r2, #2
 801c06a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c06c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c070:	492d      	ldr	r1, [pc, #180]	@ (801c128 <etharp_update_arp_entry+0x148>)
 801c072:	4613      	mov	r3, r2
 801c074:	005b      	lsls	r3, r3, #1
 801c076:	4413      	add	r3, r2
 801c078:	00db      	lsls	r3, r3, #3
 801c07a:	440b      	add	r3, r1
 801c07c:	3308      	adds	r3, #8
 801c07e:	68fa      	ldr	r2, [r7, #12]
 801c080:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c082:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c086:	4613      	mov	r3, r2
 801c088:	005b      	lsls	r3, r3, #1
 801c08a:	4413      	add	r3, r2
 801c08c:	00db      	lsls	r3, r3, #3
 801c08e:	3308      	adds	r3, #8
 801c090:	4a25      	ldr	r2, [pc, #148]	@ (801c128 <etharp_update_arp_entry+0x148>)
 801c092:	4413      	add	r3, r2
 801c094:	3304      	adds	r3, #4
 801c096:	2206      	movs	r2, #6
 801c098:	6879      	ldr	r1, [r7, #4]
 801c09a:	4618      	mov	r0, r3
 801c09c:	f003 ffd1 	bl	8020042 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c0a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c0a4:	4920      	ldr	r1, [pc, #128]	@ (801c128 <etharp_update_arp_entry+0x148>)
 801c0a6:	4613      	mov	r3, r2
 801c0a8:	005b      	lsls	r3, r3, #1
 801c0aa:	4413      	add	r3, r2
 801c0ac:	00db      	lsls	r3, r3, #3
 801c0ae:	440b      	add	r3, r1
 801c0b0:	3312      	adds	r3, #18
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c0b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c0ba:	491b      	ldr	r1, [pc, #108]	@ (801c128 <etharp_update_arp_entry+0x148>)
 801c0bc:	4613      	mov	r3, r2
 801c0be:	005b      	lsls	r3, r3, #1
 801c0c0:	4413      	add	r3, r2
 801c0c2:	00db      	lsls	r3, r3, #3
 801c0c4:	440b      	add	r3, r1
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d021      	beq.n	801c110 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c0cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c0d0:	4915      	ldr	r1, [pc, #84]	@ (801c128 <etharp_update_arp_entry+0x148>)
 801c0d2:	4613      	mov	r3, r2
 801c0d4:	005b      	lsls	r3, r3, #1
 801c0d6:	4413      	add	r3, r2
 801c0d8:	00db      	lsls	r3, r3, #3
 801c0da:	440b      	add	r3, r1
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c0e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c0e4:	4910      	ldr	r1, [pc, #64]	@ (801c128 <etharp_update_arp_entry+0x148>)
 801c0e6:	4613      	mov	r3, r2
 801c0e8:	005b      	lsls	r3, r3, #1
 801c0ea:	4413      	add	r3, r2
 801c0ec:	00db      	lsls	r3, r3, #3
 801c0ee:	440b      	add	r3, r1
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c0fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c0fe:	9300      	str	r3, [sp, #0]
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	6939      	ldr	r1, [r7, #16]
 801c104:	68f8      	ldr	r0, [r7, #12]
 801c106:	f002 f8d9 	bl	801e2bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c10a:	6938      	ldr	r0, [r7, #16]
 801c10c:	f7f8 fb1c 	bl	8014748 <pbuf_free>
  }
  return ERR_OK;
 801c110:	2300      	movs	r3, #0
}
 801c112:	4618      	mov	r0, r3
 801c114:	3718      	adds	r7, #24
 801c116:	46bd      	mov	sp, r7
 801c118:	bd80      	pop	{r7, pc}
 801c11a:	bf00      	nop
 801c11c:	08023b14 	.word	0x08023b14
 801c120:	08023c0c 	.word	0x08023c0c
 801c124:	08023b8c 	.word	0x08023b8c
 801c128:	2002d40c 	.word	0x2002d40c

0801c12c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c12c:	b580      	push	{r7, lr}
 801c12e:	b084      	sub	sp, #16
 801c130:	af00      	add	r7, sp, #0
 801c132:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c134:	2300      	movs	r3, #0
 801c136:	60fb      	str	r3, [r7, #12]
 801c138:	e01e      	b.n	801c178 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c13a:	4913      	ldr	r1, [pc, #76]	@ (801c188 <etharp_cleanup_netif+0x5c>)
 801c13c:	68fa      	ldr	r2, [r7, #12]
 801c13e:	4613      	mov	r3, r2
 801c140:	005b      	lsls	r3, r3, #1
 801c142:	4413      	add	r3, r2
 801c144:	00db      	lsls	r3, r3, #3
 801c146:	440b      	add	r3, r1
 801c148:	3314      	adds	r3, #20
 801c14a:	781b      	ldrb	r3, [r3, #0]
 801c14c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c14e:	7afb      	ldrb	r3, [r7, #11]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d00e      	beq.n	801c172 <etharp_cleanup_netif+0x46>
 801c154:	490c      	ldr	r1, [pc, #48]	@ (801c188 <etharp_cleanup_netif+0x5c>)
 801c156:	68fa      	ldr	r2, [r7, #12]
 801c158:	4613      	mov	r3, r2
 801c15a:	005b      	lsls	r3, r3, #1
 801c15c:	4413      	add	r3, r2
 801c15e:	00db      	lsls	r3, r3, #3
 801c160:	440b      	add	r3, r1
 801c162:	3308      	adds	r3, #8
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	687a      	ldr	r2, [r7, #4]
 801c168:	429a      	cmp	r2, r3
 801c16a:	d102      	bne.n	801c172 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c16c:	68f8      	ldr	r0, [r7, #12]
 801c16e:	f7ff fce5 	bl	801bb3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c172:	68fb      	ldr	r3, [r7, #12]
 801c174:	3301      	adds	r3, #1
 801c176:	60fb      	str	r3, [r7, #12]
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	2b09      	cmp	r3, #9
 801c17c:	dddd      	ble.n	801c13a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c17e:	bf00      	nop
 801c180:	bf00      	nop
 801c182:	3710      	adds	r7, #16
 801c184:	46bd      	mov	sp, r7
 801c186:	bd80      	pop	{r7, pc}
 801c188:	2002d40c 	.word	0x2002d40c

0801c18c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c18c:	b5b0      	push	{r4, r5, r7, lr}
 801c18e:	b08a      	sub	sp, #40	@ 0x28
 801c190:	af04      	add	r7, sp, #16
 801c192:	6078      	str	r0, [r7, #4]
 801c194:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c196:	683b      	ldr	r3, [r7, #0]
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d107      	bne.n	801c1ac <etharp_input+0x20>
 801c19c:	4b49      	ldr	r3, [pc, #292]	@ (801c2c4 <etharp_input+0x138>)
 801c19e:	f240 228a 	movw	r2, #650	@ 0x28a
 801c1a2:	4949      	ldr	r1, [pc, #292]	@ (801c2c8 <etharp_input+0x13c>)
 801c1a4:	4849      	ldr	r0, [pc, #292]	@ (801c2cc <etharp_input+0x140>)
 801c1a6:	f003 fd21 	bl	801fbec <iprintf>
 801c1aa:	e088      	b.n	801c2be <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	685b      	ldr	r3, [r3, #4]
 801c1b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c1b2:	693b      	ldr	r3, [r7, #16]
 801c1b4:	881b      	ldrh	r3, [r3, #0]
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c1bc:	d10c      	bne.n	801c1d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c1be:	693b      	ldr	r3, [r7, #16]
 801c1c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c1c2:	2b06      	cmp	r3, #6
 801c1c4:	d108      	bne.n	801c1d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c1c6:	693b      	ldr	r3, [r7, #16]
 801c1c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c1ca:	2b04      	cmp	r3, #4
 801c1cc:	d104      	bne.n	801c1d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c1ce:	693b      	ldr	r3, [r7, #16]
 801c1d0:	885b      	ldrh	r3, [r3, #2]
 801c1d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c1d4:	2b08      	cmp	r3, #8
 801c1d6:	d00f      	beq.n	801c1f8 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801c1d8:	4b3d      	ldr	r3, [pc, #244]	@ (801c2d0 <etharp_input+0x144>)
 801c1da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c1dc:	3301      	adds	r3, #1
 801c1de:	b29a      	uxth	r2, r3
 801c1e0:	4b3b      	ldr	r3, [pc, #236]	@ (801c2d0 <etharp_input+0x144>)
 801c1e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801c1e4:	4b3a      	ldr	r3, [pc, #232]	@ (801c2d0 <etharp_input+0x144>)
 801c1e6:	8bdb      	ldrh	r3, [r3, #30]
 801c1e8:	3301      	adds	r3, #1
 801c1ea:	b29a      	uxth	r2, r3
 801c1ec:	4b38      	ldr	r3, [pc, #224]	@ (801c2d0 <etharp_input+0x144>)
 801c1ee:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801c1f0:	6878      	ldr	r0, [r7, #4]
 801c1f2:	f7f8 faa9 	bl	8014748 <pbuf_free>
    return;
 801c1f6:	e062      	b.n	801c2be <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801c1f8:	4b35      	ldr	r3, [pc, #212]	@ (801c2d0 <etharp_input+0x144>)
 801c1fa:	8b5b      	ldrh	r3, [r3, #26]
 801c1fc:	3301      	adds	r3, #1
 801c1fe:	b29a      	uxth	r2, r3
 801c200:	4b33      	ldr	r3, [pc, #204]	@ (801c2d0 <etharp_input+0x144>)
 801c202:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c204:	693b      	ldr	r3, [r7, #16]
 801c206:	330e      	adds	r3, #14
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c20c:	693b      	ldr	r3, [r7, #16]
 801c20e:	3318      	adds	r3, #24
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c214:	683b      	ldr	r3, [r7, #0]
 801c216:	3304      	adds	r3, #4
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d102      	bne.n	801c224 <etharp_input+0x98>
    for_us = 0;
 801c21e:	2300      	movs	r3, #0
 801c220:	75fb      	strb	r3, [r7, #23]
 801c222:	e009      	b.n	801c238 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c224:	68ba      	ldr	r2, [r7, #8]
 801c226:	683b      	ldr	r3, [r7, #0]
 801c228:	3304      	adds	r3, #4
 801c22a:	681b      	ldr	r3, [r3, #0]
 801c22c:	429a      	cmp	r2, r3
 801c22e:	bf0c      	ite	eq
 801c230:	2301      	moveq	r3, #1
 801c232:	2300      	movne	r3, #0
 801c234:	b2db      	uxtb	r3, r3
 801c236:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c238:	693b      	ldr	r3, [r7, #16]
 801c23a:	f103 0208 	add.w	r2, r3, #8
 801c23e:	7dfb      	ldrb	r3, [r7, #23]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d001      	beq.n	801c248 <etharp_input+0xbc>
 801c244:	2301      	movs	r3, #1
 801c246:	e000      	b.n	801c24a <etharp_input+0xbe>
 801c248:	2302      	movs	r3, #2
 801c24a:	f107 010c 	add.w	r1, r7, #12
 801c24e:	6838      	ldr	r0, [r7, #0]
 801c250:	f7ff fec6 	bl	801bfe0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c254:	693b      	ldr	r3, [r7, #16]
 801c256:	88db      	ldrh	r3, [r3, #6]
 801c258:	b29b      	uxth	r3, r3
 801c25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c25e:	d003      	beq.n	801c268 <etharp_input+0xdc>
 801c260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c264:	d025      	beq.n	801c2b2 <etharp_input+0x126>
 801c266:	e01d      	b.n	801c2a4 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801c268:	7dfb      	ldrb	r3, [r7, #23]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d023      	beq.n	801c2b6 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c26e:	683b      	ldr	r3, [r7, #0]
 801c270:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801c274:	693b      	ldr	r3, [r7, #16]
 801c276:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801c280:	683b      	ldr	r3, [r7, #0]
 801c282:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c284:	693a      	ldr	r2, [r7, #16]
 801c286:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c288:	2102      	movs	r1, #2
 801c28a:	9103      	str	r1, [sp, #12]
 801c28c:	f107 010c 	add.w	r1, r7, #12
 801c290:	9102      	str	r1, [sp, #8]
 801c292:	9201      	str	r2, [sp, #4]
 801c294:	9300      	str	r3, [sp, #0]
 801c296:	462b      	mov	r3, r5
 801c298:	4622      	mov	r2, r4
 801c29a:	4601      	mov	r1, r0
 801c29c:	6838      	ldr	r0, [r7, #0]
 801c29e:	f000 fb0b 	bl	801c8b8 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801c2a2:	e008      	b.n	801c2b6 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801c2a4:	4b0a      	ldr	r3, [pc, #40]	@ (801c2d0 <etharp_input+0x144>)
 801c2a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c2a8:	3301      	adds	r3, #1
 801c2aa:	b29a      	uxth	r2, r3
 801c2ac:	4b08      	ldr	r3, [pc, #32]	@ (801c2d0 <etharp_input+0x144>)
 801c2ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801c2b0:	e002      	b.n	801c2b8 <etharp_input+0x12c>
      break;
 801c2b2:	bf00      	nop
 801c2b4:	e000      	b.n	801c2b8 <etharp_input+0x12c>
      break;
 801c2b6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c2b8:	6878      	ldr	r0, [r7, #4]
 801c2ba:	f7f8 fa45 	bl	8014748 <pbuf_free>
}
 801c2be:	3718      	adds	r7, #24
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bdb0      	pop	{r4, r5, r7, pc}
 801c2c4:	08023b14 	.word	0x08023b14
 801c2c8:	08023c64 	.word	0x08023c64
 801c2cc:	08023b8c 	.word	0x08023b8c
 801c2d0:	2002d2b0 	.word	0x2002d2b0

0801c2d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b086      	sub	sp, #24
 801c2d8:	af02      	add	r7, sp, #8
 801c2da:	60f8      	str	r0, [r7, #12]
 801c2dc:	60b9      	str	r1, [r7, #8]
 801c2de:	4613      	mov	r3, r2
 801c2e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c2e2:	79fa      	ldrb	r2, [r7, #7]
 801c2e4:	4944      	ldr	r1, [pc, #272]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c2e6:	4613      	mov	r3, r2
 801c2e8:	005b      	lsls	r3, r3, #1
 801c2ea:	4413      	add	r3, r2
 801c2ec:	00db      	lsls	r3, r3, #3
 801c2ee:	440b      	add	r3, r1
 801c2f0:	3314      	adds	r3, #20
 801c2f2:	781b      	ldrb	r3, [r3, #0]
 801c2f4:	2b01      	cmp	r3, #1
 801c2f6:	d806      	bhi.n	801c306 <etharp_output_to_arp_index+0x32>
 801c2f8:	4b40      	ldr	r3, [pc, #256]	@ (801c3fc <etharp_output_to_arp_index+0x128>)
 801c2fa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801c2fe:	4940      	ldr	r1, [pc, #256]	@ (801c400 <etharp_output_to_arp_index+0x12c>)
 801c300:	4840      	ldr	r0, [pc, #256]	@ (801c404 <etharp_output_to_arp_index+0x130>)
 801c302:	f003 fc73 	bl	801fbec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c306:	79fa      	ldrb	r2, [r7, #7]
 801c308:	493b      	ldr	r1, [pc, #236]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c30a:	4613      	mov	r3, r2
 801c30c:	005b      	lsls	r3, r3, #1
 801c30e:	4413      	add	r3, r2
 801c310:	00db      	lsls	r3, r3, #3
 801c312:	440b      	add	r3, r1
 801c314:	3314      	adds	r3, #20
 801c316:	781b      	ldrb	r3, [r3, #0]
 801c318:	2b02      	cmp	r3, #2
 801c31a:	d153      	bne.n	801c3c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c31c:	79fa      	ldrb	r2, [r7, #7]
 801c31e:	4936      	ldr	r1, [pc, #216]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c320:	4613      	mov	r3, r2
 801c322:	005b      	lsls	r3, r3, #1
 801c324:	4413      	add	r3, r2
 801c326:	00db      	lsls	r3, r3, #3
 801c328:	440b      	add	r3, r1
 801c32a:	3312      	adds	r3, #18
 801c32c:	881b      	ldrh	r3, [r3, #0]
 801c32e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801c332:	d919      	bls.n	801c368 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c334:	79fa      	ldrb	r2, [r7, #7]
 801c336:	4613      	mov	r3, r2
 801c338:	005b      	lsls	r3, r3, #1
 801c33a:	4413      	add	r3, r2
 801c33c:	00db      	lsls	r3, r3, #3
 801c33e:	4a2e      	ldr	r2, [pc, #184]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c340:	4413      	add	r3, r2
 801c342:	3304      	adds	r3, #4
 801c344:	4619      	mov	r1, r3
 801c346:	68f8      	ldr	r0, [r7, #12]
 801c348:	f000 fb72 	bl	801ca30 <etharp_request>
 801c34c:	4603      	mov	r3, r0
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d138      	bne.n	801c3c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c352:	79fa      	ldrb	r2, [r7, #7]
 801c354:	4928      	ldr	r1, [pc, #160]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c356:	4613      	mov	r3, r2
 801c358:	005b      	lsls	r3, r3, #1
 801c35a:	4413      	add	r3, r2
 801c35c:	00db      	lsls	r3, r3, #3
 801c35e:	440b      	add	r3, r1
 801c360:	3314      	adds	r3, #20
 801c362:	2203      	movs	r2, #3
 801c364:	701a      	strb	r2, [r3, #0]
 801c366:	e02d      	b.n	801c3c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c368:	79fa      	ldrb	r2, [r7, #7]
 801c36a:	4923      	ldr	r1, [pc, #140]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c36c:	4613      	mov	r3, r2
 801c36e:	005b      	lsls	r3, r3, #1
 801c370:	4413      	add	r3, r2
 801c372:	00db      	lsls	r3, r3, #3
 801c374:	440b      	add	r3, r1
 801c376:	3312      	adds	r3, #18
 801c378:	881b      	ldrh	r3, [r3, #0]
 801c37a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801c37e:	d321      	bcc.n	801c3c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c380:	79fa      	ldrb	r2, [r7, #7]
 801c382:	4613      	mov	r3, r2
 801c384:	005b      	lsls	r3, r3, #1
 801c386:	4413      	add	r3, r2
 801c388:	00db      	lsls	r3, r3, #3
 801c38a:	4a1b      	ldr	r2, [pc, #108]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c38c:	4413      	add	r3, r2
 801c38e:	1d19      	adds	r1, r3, #4
 801c390:	79fa      	ldrb	r2, [r7, #7]
 801c392:	4613      	mov	r3, r2
 801c394:	005b      	lsls	r3, r3, #1
 801c396:	4413      	add	r3, r2
 801c398:	00db      	lsls	r3, r3, #3
 801c39a:	3308      	adds	r3, #8
 801c39c:	4a16      	ldr	r2, [pc, #88]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c39e:	4413      	add	r3, r2
 801c3a0:	3304      	adds	r3, #4
 801c3a2:	461a      	mov	r2, r3
 801c3a4:	68f8      	ldr	r0, [r7, #12]
 801c3a6:	f000 fb21 	bl	801c9ec <etharp_request_dst>
 801c3aa:	4603      	mov	r3, r0
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	d109      	bne.n	801c3c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c3b0:	79fa      	ldrb	r2, [r7, #7]
 801c3b2:	4911      	ldr	r1, [pc, #68]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c3b4:	4613      	mov	r3, r2
 801c3b6:	005b      	lsls	r3, r3, #1
 801c3b8:	4413      	add	r3, r2
 801c3ba:	00db      	lsls	r3, r3, #3
 801c3bc:	440b      	add	r3, r1
 801c3be:	3314      	adds	r3, #20
 801c3c0:	2203      	movs	r2, #3
 801c3c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801c3ca:	79fa      	ldrb	r2, [r7, #7]
 801c3cc:	4613      	mov	r3, r2
 801c3ce:	005b      	lsls	r3, r3, #1
 801c3d0:	4413      	add	r3, r2
 801c3d2:	00db      	lsls	r3, r3, #3
 801c3d4:	3308      	adds	r3, #8
 801c3d6:	4a08      	ldr	r2, [pc, #32]	@ (801c3f8 <etharp_output_to_arp_index+0x124>)
 801c3d8:	4413      	add	r3, r2
 801c3da:	3304      	adds	r3, #4
 801c3dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c3e0:	9200      	str	r2, [sp, #0]
 801c3e2:	460a      	mov	r2, r1
 801c3e4:	68b9      	ldr	r1, [r7, #8]
 801c3e6:	68f8      	ldr	r0, [r7, #12]
 801c3e8:	f001 ff68 	bl	801e2bc <ethernet_output>
 801c3ec:	4603      	mov	r3, r0
}
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	3710      	adds	r7, #16
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	bd80      	pop	{r7, pc}
 801c3f6:	bf00      	nop
 801c3f8:	2002d40c 	.word	0x2002d40c
 801c3fc:	08023b14 	.word	0x08023b14
 801c400:	08023c84 	.word	0x08023c84
 801c404:	08023b8c 	.word	0x08023b8c

0801c408 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b08a      	sub	sp, #40	@ 0x28
 801c40c:	af02      	add	r7, sp, #8
 801c40e:	60f8      	str	r0, [r7, #12]
 801c410:	60b9      	str	r1, [r7, #8]
 801c412:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d106      	bne.n	801c42c <etharp_output+0x24>
 801c41e:	4b76      	ldr	r3, [pc, #472]	@ (801c5f8 <etharp_output+0x1f0>)
 801c420:	f240 321e 	movw	r2, #798	@ 0x31e
 801c424:	4975      	ldr	r1, [pc, #468]	@ (801c5fc <etharp_output+0x1f4>)
 801c426:	4876      	ldr	r0, [pc, #472]	@ (801c600 <etharp_output+0x1f8>)
 801c428:	f003 fbe0 	bl	801fbec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c42c:	68bb      	ldr	r3, [r7, #8]
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d106      	bne.n	801c440 <etharp_output+0x38>
 801c432:	4b71      	ldr	r3, [pc, #452]	@ (801c5f8 <etharp_output+0x1f0>)
 801c434:	f240 321f 	movw	r2, #799	@ 0x31f
 801c438:	4972      	ldr	r1, [pc, #456]	@ (801c604 <etharp_output+0x1fc>)
 801c43a:	4871      	ldr	r0, [pc, #452]	@ (801c600 <etharp_output+0x1f8>)
 801c43c:	f003 fbd6 	bl	801fbec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	2b00      	cmp	r3, #0
 801c444:	d106      	bne.n	801c454 <etharp_output+0x4c>
 801c446:	4b6c      	ldr	r3, [pc, #432]	@ (801c5f8 <etharp_output+0x1f0>)
 801c448:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801c44c:	496e      	ldr	r1, [pc, #440]	@ (801c608 <etharp_output+0x200>)
 801c44e:	486c      	ldr	r0, [pc, #432]	@ (801c600 <etharp_output+0x1f8>)
 801c450:	f003 fbcc 	bl	801fbec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	68f9      	ldr	r1, [r7, #12]
 801c45a:	4618      	mov	r0, r3
 801c45c:	f000 ffce 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 801c460:	4603      	mov	r3, r0
 801c462:	2b00      	cmp	r3, #0
 801c464:	d002      	beq.n	801c46c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c466:	4b69      	ldr	r3, [pc, #420]	@ (801c60c <etharp_output+0x204>)
 801c468:	61fb      	str	r3, [r7, #28]
 801c46a:	e0b5      	b.n	801c5d8 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c474:	2be0      	cmp	r3, #224	@ 0xe0
 801c476:	d118      	bne.n	801c4aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c478:	2301      	movs	r3, #1
 801c47a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c47c:	2300      	movs	r3, #0
 801c47e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c480:	235e      	movs	r3, #94	@ 0x5e
 801c482:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	3301      	adds	r3, #1
 801c488:	781b      	ldrb	r3, [r3, #0]
 801c48a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c48e:	b2db      	uxtb	r3, r3
 801c490:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	3302      	adds	r3, #2
 801c496:	781b      	ldrb	r3, [r3, #0]
 801c498:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	3303      	adds	r3, #3
 801c49e:	781b      	ldrb	r3, [r3, #0]
 801c4a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c4a2:	f107 0310 	add.w	r3, r7, #16
 801c4a6:	61fb      	str	r3, [r7, #28]
 801c4a8:	e096      	b.n	801c5d8 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	681a      	ldr	r2, [r3, #0]
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	3304      	adds	r3, #4
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	405a      	eors	r2, r3
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	3308      	adds	r3, #8
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	4013      	ands	r3, r2
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d012      	beq.n	801c4e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c4c8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801c4cc:	4293      	cmp	r3, r2
 801c4ce:	d00b      	beq.n	801c4e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	330c      	adds	r3, #12
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d003      	beq.n	801c4e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	330c      	adds	r3, #12
 801c4de:	61bb      	str	r3, [r7, #24]
 801c4e0:	e002      	b.n	801c4e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c4e2:	f06f 0303 	mvn.w	r3, #3
 801c4e6:	e083      	b.n	801c5f0 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c4e8:	4b49      	ldr	r3, [pc, #292]	@ (801c610 <etharp_output+0x208>)
 801c4ea:	781b      	ldrb	r3, [r3, #0]
 801c4ec:	4619      	mov	r1, r3
 801c4ee:	4a49      	ldr	r2, [pc, #292]	@ (801c614 <etharp_output+0x20c>)
 801c4f0:	460b      	mov	r3, r1
 801c4f2:	005b      	lsls	r3, r3, #1
 801c4f4:	440b      	add	r3, r1
 801c4f6:	00db      	lsls	r3, r3, #3
 801c4f8:	4413      	add	r3, r2
 801c4fa:	3314      	adds	r3, #20
 801c4fc:	781b      	ldrb	r3, [r3, #0]
 801c4fe:	2b01      	cmp	r3, #1
 801c500:	d92b      	bls.n	801c55a <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c502:	4b43      	ldr	r3, [pc, #268]	@ (801c610 <etharp_output+0x208>)
 801c504:	781b      	ldrb	r3, [r3, #0]
 801c506:	4619      	mov	r1, r3
 801c508:	4a42      	ldr	r2, [pc, #264]	@ (801c614 <etharp_output+0x20c>)
 801c50a:	460b      	mov	r3, r1
 801c50c:	005b      	lsls	r3, r3, #1
 801c50e:	440b      	add	r3, r1
 801c510:	00db      	lsls	r3, r3, #3
 801c512:	4413      	add	r3, r2
 801c514:	3308      	adds	r3, #8
 801c516:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c518:	68fa      	ldr	r2, [r7, #12]
 801c51a:	429a      	cmp	r2, r3
 801c51c:	d11d      	bne.n	801c55a <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	681a      	ldr	r2, [r3, #0]
 801c522:	4b3b      	ldr	r3, [pc, #236]	@ (801c610 <etharp_output+0x208>)
 801c524:	781b      	ldrb	r3, [r3, #0]
 801c526:	4618      	mov	r0, r3
 801c528:	493a      	ldr	r1, [pc, #232]	@ (801c614 <etharp_output+0x20c>)
 801c52a:	4603      	mov	r3, r0
 801c52c:	005b      	lsls	r3, r3, #1
 801c52e:	4403      	add	r3, r0
 801c530:	00db      	lsls	r3, r3, #3
 801c532:	440b      	add	r3, r1
 801c534:	3304      	adds	r3, #4
 801c536:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c538:	429a      	cmp	r2, r3
 801c53a:	d10e      	bne.n	801c55a <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801c53c:	4b36      	ldr	r3, [pc, #216]	@ (801c618 <etharp_output+0x210>)
 801c53e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801c540:	3301      	adds	r3, #1
 801c542:	b29a      	uxth	r2, r3
 801c544:	4b34      	ldr	r3, [pc, #208]	@ (801c618 <etharp_output+0x210>)
 801c546:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c548:	4b31      	ldr	r3, [pc, #196]	@ (801c610 <etharp_output+0x208>)
 801c54a:	781b      	ldrb	r3, [r3, #0]
 801c54c:	461a      	mov	r2, r3
 801c54e:	68b9      	ldr	r1, [r7, #8]
 801c550:	68f8      	ldr	r0, [r7, #12]
 801c552:	f7ff febf 	bl	801c2d4 <etharp_output_to_arp_index>
 801c556:	4603      	mov	r3, r0
 801c558:	e04a      	b.n	801c5f0 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c55a:	2300      	movs	r3, #0
 801c55c:	75fb      	strb	r3, [r7, #23]
 801c55e:	e031      	b.n	801c5c4 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c560:	7dfa      	ldrb	r2, [r7, #23]
 801c562:	492c      	ldr	r1, [pc, #176]	@ (801c614 <etharp_output+0x20c>)
 801c564:	4613      	mov	r3, r2
 801c566:	005b      	lsls	r3, r3, #1
 801c568:	4413      	add	r3, r2
 801c56a:	00db      	lsls	r3, r3, #3
 801c56c:	440b      	add	r3, r1
 801c56e:	3314      	adds	r3, #20
 801c570:	781b      	ldrb	r3, [r3, #0]
 801c572:	2b01      	cmp	r3, #1
 801c574:	d923      	bls.n	801c5be <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c576:	7dfa      	ldrb	r2, [r7, #23]
 801c578:	4926      	ldr	r1, [pc, #152]	@ (801c614 <etharp_output+0x20c>)
 801c57a:	4613      	mov	r3, r2
 801c57c:	005b      	lsls	r3, r3, #1
 801c57e:	4413      	add	r3, r2
 801c580:	00db      	lsls	r3, r3, #3
 801c582:	440b      	add	r3, r1
 801c584:	3308      	adds	r3, #8
 801c586:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c588:	68fa      	ldr	r2, [r7, #12]
 801c58a:	429a      	cmp	r2, r3
 801c58c:	d117      	bne.n	801c5be <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c58e:	69bb      	ldr	r3, [r7, #24]
 801c590:	6819      	ldr	r1, [r3, #0]
 801c592:	7dfa      	ldrb	r2, [r7, #23]
 801c594:	481f      	ldr	r0, [pc, #124]	@ (801c614 <etharp_output+0x20c>)
 801c596:	4613      	mov	r3, r2
 801c598:	005b      	lsls	r3, r3, #1
 801c59a:	4413      	add	r3, r2
 801c59c:	00db      	lsls	r3, r3, #3
 801c59e:	4403      	add	r3, r0
 801c5a0:	3304      	adds	r3, #4
 801c5a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c5a4:	4299      	cmp	r1, r3
 801c5a6:	d10a      	bne.n	801c5be <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c5a8:	4a19      	ldr	r2, [pc, #100]	@ (801c610 <etharp_output+0x208>)
 801c5aa:	7dfb      	ldrb	r3, [r7, #23]
 801c5ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c5ae:	7dfb      	ldrb	r3, [r7, #23]
 801c5b0:	461a      	mov	r2, r3
 801c5b2:	68b9      	ldr	r1, [r7, #8]
 801c5b4:	68f8      	ldr	r0, [r7, #12]
 801c5b6:	f7ff fe8d 	bl	801c2d4 <etharp_output_to_arp_index>
 801c5ba:	4603      	mov	r3, r0
 801c5bc:	e018      	b.n	801c5f0 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c5be:	7dfb      	ldrb	r3, [r7, #23]
 801c5c0:	3301      	adds	r3, #1
 801c5c2:	75fb      	strb	r3, [r7, #23]
 801c5c4:	7dfb      	ldrb	r3, [r7, #23]
 801c5c6:	2b09      	cmp	r3, #9
 801c5c8:	d9ca      	bls.n	801c560 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c5ca:	68ba      	ldr	r2, [r7, #8]
 801c5cc:	69b9      	ldr	r1, [r7, #24]
 801c5ce:	68f8      	ldr	r0, [r7, #12]
 801c5d0:	f000 f824 	bl	801c61c <etharp_query>
 801c5d4:	4603      	mov	r3, r0
 801c5d6:	e00b      	b.n	801c5f0 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c5de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c5e2:	9300      	str	r3, [sp, #0]
 801c5e4:	69fb      	ldr	r3, [r7, #28]
 801c5e6:	68b9      	ldr	r1, [r7, #8]
 801c5e8:	68f8      	ldr	r0, [r7, #12]
 801c5ea:	f001 fe67 	bl	801e2bc <ethernet_output>
 801c5ee:	4603      	mov	r3, r0
}
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	3720      	adds	r7, #32
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	bd80      	pop	{r7, pc}
 801c5f8:	08023b14 	.word	0x08023b14
 801c5fc:	08023c64 	.word	0x08023c64
 801c600:	08023b8c 	.word	0x08023b8c
 801c604:	08023cb4 	.word	0x08023cb4
 801c608:	08023c54 	.word	0x08023c54
 801c60c:	08024964 	.word	0x08024964
 801c610:	2002d4fc 	.word	0x2002d4fc
 801c614:	2002d40c 	.word	0x2002d40c
 801c618:	2002d2b0 	.word	0x2002d2b0

0801c61c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c61c:	b580      	push	{r7, lr}
 801c61e:	b08c      	sub	sp, #48	@ 0x30
 801c620:	af02      	add	r7, sp, #8
 801c622:	60f8      	str	r0, [r7, #12]
 801c624:	60b9      	str	r1, [r7, #8]
 801c626:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	3326      	adds	r3, #38	@ 0x26
 801c62c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c62e:	23ff      	movs	r3, #255	@ 0xff
 801c630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801c634:	2300      	movs	r3, #0
 801c636:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c638:	68bb      	ldr	r3, [r7, #8]
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	68f9      	ldr	r1, [r7, #12]
 801c63e:	4618      	mov	r0, r3
 801c640:	f000 fedc 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 801c644:	4603      	mov	r3, r0
 801c646:	2b00      	cmp	r3, #0
 801c648:	d10c      	bne.n	801c664 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c64a:	68bb      	ldr	r3, [r7, #8]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c652:	2be0      	cmp	r3, #224	@ 0xe0
 801c654:	d006      	beq.n	801c664 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c656:	68bb      	ldr	r3, [r7, #8]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d003      	beq.n	801c664 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c65c:	68bb      	ldr	r3, [r7, #8]
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d102      	bne.n	801c66a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c664:	f06f 030f 	mvn.w	r3, #15
 801c668:	e110      	b.n	801c88c <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c66a:	68fa      	ldr	r2, [r7, #12]
 801c66c:	2101      	movs	r1, #1
 801c66e:	68b8      	ldr	r0, [r7, #8]
 801c670:	f7ff fb3e 	bl	801bcf0 <etharp_find_entry>
 801c674:	4603      	mov	r3, r0
 801c676:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c678:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	da0b      	bge.n	801c698 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d005      	beq.n	801c692 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801c686:	4b83      	ldr	r3, [pc, #524]	@ (801c894 <etharp_query+0x278>)
 801c688:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c68a:	3301      	adds	r3, #1
 801c68c:	b29a      	uxth	r2, r3
 801c68e:	4b81      	ldr	r3, [pc, #516]	@ (801c894 <etharp_query+0x278>)
 801c690:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801c692:	8a7b      	ldrh	r3, [r7, #18]
 801c694:	b25b      	sxtb	r3, r3
 801c696:	e0f9      	b.n	801c88c <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c698:	8a7b      	ldrh	r3, [r7, #18]
 801c69a:	2b7e      	cmp	r3, #126	@ 0x7e
 801c69c:	d906      	bls.n	801c6ac <etharp_query+0x90>
 801c69e:	4b7e      	ldr	r3, [pc, #504]	@ (801c898 <etharp_query+0x27c>)
 801c6a0:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801c6a4:	497d      	ldr	r1, [pc, #500]	@ (801c89c <etharp_query+0x280>)
 801c6a6:	487e      	ldr	r0, [pc, #504]	@ (801c8a0 <etharp_query+0x284>)
 801c6a8:	f003 faa0 	bl	801fbec <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c6ac:	8a7b      	ldrh	r3, [r7, #18]
 801c6ae:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c6b0:	7c7a      	ldrb	r2, [r7, #17]
 801c6b2:	497c      	ldr	r1, [pc, #496]	@ (801c8a4 <etharp_query+0x288>)
 801c6b4:	4613      	mov	r3, r2
 801c6b6:	005b      	lsls	r3, r3, #1
 801c6b8:	4413      	add	r3, r2
 801c6ba:	00db      	lsls	r3, r3, #3
 801c6bc:	440b      	add	r3, r1
 801c6be:	3314      	adds	r3, #20
 801c6c0:	781b      	ldrb	r3, [r3, #0]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d115      	bne.n	801c6f2 <etharp_query+0xd6>
    is_new_entry = 1;
 801c6c6:	2301      	movs	r3, #1
 801c6c8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c6ca:	7c7a      	ldrb	r2, [r7, #17]
 801c6cc:	4975      	ldr	r1, [pc, #468]	@ (801c8a4 <etharp_query+0x288>)
 801c6ce:	4613      	mov	r3, r2
 801c6d0:	005b      	lsls	r3, r3, #1
 801c6d2:	4413      	add	r3, r2
 801c6d4:	00db      	lsls	r3, r3, #3
 801c6d6:	440b      	add	r3, r1
 801c6d8:	3314      	adds	r3, #20
 801c6da:	2201      	movs	r2, #1
 801c6dc:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c6de:	7c7a      	ldrb	r2, [r7, #17]
 801c6e0:	4970      	ldr	r1, [pc, #448]	@ (801c8a4 <etharp_query+0x288>)
 801c6e2:	4613      	mov	r3, r2
 801c6e4:	005b      	lsls	r3, r3, #1
 801c6e6:	4413      	add	r3, r2
 801c6e8:	00db      	lsls	r3, r3, #3
 801c6ea:	440b      	add	r3, r1
 801c6ec:	3308      	adds	r3, #8
 801c6ee:	68fa      	ldr	r2, [r7, #12]
 801c6f0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c6f2:	7c7a      	ldrb	r2, [r7, #17]
 801c6f4:	496b      	ldr	r1, [pc, #428]	@ (801c8a4 <etharp_query+0x288>)
 801c6f6:	4613      	mov	r3, r2
 801c6f8:	005b      	lsls	r3, r3, #1
 801c6fa:	4413      	add	r3, r2
 801c6fc:	00db      	lsls	r3, r3, #3
 801c6fe:	440b      	add	r3, r1
 801c700:	3314      	adds	r3, #20
 801c702:	781b      	ldrb	r3, [r3, #0]
 801c704:	2b01      	cmp	r3, #1
 801c706:	d011      	beq.n	801c72c <etharp_query+0x110>
 801c708:	7c7a      	ldrb	r2, [r7, #17]
 801c70a:	4966      	ldr	r1, [pc, #408]	@ (801c8a4 <etharp_query+0x288>)
 801c70c:	4613      	mov	r3, r2
 801c70e:	005b      	lsls	r3, r3, #1
 801c710:	4413      	add	r3, r2
 801c712:	00db      	lsls	r3, r3, #3
 801c714:	440b      	add	r3, r1
 801c716:	3314      	adds	r3, #20
 801c718:	781b      	ldrb	r3, [r3, #0]
 801c71a:	2b01      	cmp	r3, #1
 801c71c:	d806      	bhi.n	801c72c <etharp_query+0x110>
 801c71e:	4b5e      	ldr	r3, [pc, #376]	@ (801c898 <etharp_query+0x27c>)
 801c720:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801c724:	4960      	ldr	r1, [pc, #384]	@ (801c8a8 <etharp_query+0x28c>)
 801c726:	485e      	ldr	r0, [pc, #376]	@ (801c8a0 <etharp_query+0x284>)
 801c728:	f003 fa60 	bl	801fbec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c72c:	6a3b      	ldr	r3, [r7, #32]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d102      	bne.n	801c738 <etharp_query+0x11c>
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d10c      	bne.n	801c752 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c738:	68b9      	ldr	r1, [r7, #8]
 801c73a:	68f8      	ldr	r0, [r7, #12]
 801c73c:	f000 f978 	bl	801ca30 <etharp_request>
 801c740:	4603      	mov	r3, r0
 801c742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d102      	bne.n	801c752 <etharp_query+0x136>
      return result;
 801c74c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801c750:	e09c      	b.n	801c88c <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d106      	bne.n	801c766 <etharp_query+0x14a>
 801c758:	4b4f      	ldr	r3, [pc, #316]	@ (801c898 <etharp_query+0x27c>)
 801c75a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801c75e:	4953      	ldr	r1, [pc, #332]	@ (801c8ac <etharp_query+0x290>)
 801c760:	484f      	ldr	r0, [pc, #316]	@ (801c8a0 <etharp_query+0x284>)
 801c762:	f003 fa43 	bl	801fbec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c766:	7c7a      	ldrb	r2, [r7, #17]
 801c768:	494e      	ldr	r1, [pc, #312]	@ (801c8a4 <etharp_query+0x288>)
 801c76a:	4613      	mov	r3, r2
 801c76c:	005b      	lsls	r3, r3, #1
 801c76e:	4413      	add	r3, r2
 801c770:	00db      	lsls	r3, r3, #3
 801c772:	440b      	add	r3, r1
 801c774:	3314      	adds	r3, #20
 801c776:	781b      	ldrb	r3, [r3, #0]
 801c778:	2b01      	cmp	r3, #1
 801c77a:	d917      	bls.n	801c7ac <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c77c:	4a4c      	ldr	r2, [pc, #304]	@ (801c8b0 <etharp_query+0x294>)
 801c77e:	7c7b      	ldrb	r3, [r7, #17]
 801c780:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c782:	7c7a      	ldrb	r2, [r7, #17]
 801c784:	4613      	mov	r3, r2
 801c786:	005b      	lsls	r3, r3, #1
 801c788:	4413      	add	r3, r2
 801c78a:	00db      	lsls	r3, r3, #3
 801c78c:	3308      	adds	r3, #8
 801c78e:	4a45      	ldr	r2, [pc, #276]	@ (801c8a4 <etharp_query+0x288>)
 801c790:	4413      	add	r3, r2
 801c792:	3304      	adds	r3, #4
 801c794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c798:	9200      	str	r2, [sp, #0]
 801c79a:	697a      	ldr	r2, [r7, #20]
 801c79c:	6879      	ldr	r1, [r7, #4]
 801c79e:	68f8      	ldr	r0, [r7, #12]
 801c7a0:	f001 fd8c 	bl	801e2bc <ethernet_output>
 801c7a4:	4603      	mov	r3, r0
 801c7a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c7aa:	e06d      	b.n	801c888 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c7ac:	7c7a      	ldrb	r2, [r7, #17]
 801c7ae:	493d      	ldr	r1, [pc, #244]	@ (801c8a4 <etharp_query+0x288>)
 801c7b0:	4613      	mov	r3, r2
 801c7b2:	005b      	lsls	r3, r3, #1
 801c7b4:	4413      	add	r3, r2
 801c7b6:	00db      	lsls	r3, r3, #3
 801c7b8:	440b      	add	r3, r1
 801c7ba:	3314      	adds	r3, #20
 801c7bc:	781b      	ldrb	r3, [r3, #0]
 801c7be:	2b01      	cmp	r3, #1
 801c7c0:	d162      	bne.n	801c888 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c7ca:	e01c      	b.n	801c806 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c7cc:	69fb      	ldr	r3, [r7, #28]
 801c7ce:	895a      	ldrh	r2, [r3, #10]
 801c7d0:	69fb      	ldr	r3, [r7, #28]
 801c7d2:	891b      	ldrh	r3, [r3, #8]
 801c7d4:	429a      	cmp	r2, r3
 801c7d6:	d10a      	bne.n	801c7ee <etharp_query+0x1d2>
 801c7d8:	69fb      	ldr	r3, [r7, #28]
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d006      	beq.n	801c7ee <etharp_query+0x1d2>
 801c7e0:	4b2d      	ldr	r3, [pc, #180]	@ (801c898 <etharp_query+0x27c>)
 801c7e2:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801c7e6:	4933      	ldr	r1, [pc, #204]	@ (801c8b4 <etharp_query+0x298>)
 801c7e8:	482d      	ldr	r0, [pc, #180]	@ (801c8a0 <etharp_query+0x284>)
 801c7ea:	f003 f9ff 	bl	801fbec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c7ee:	69fb      	ldr	r3, [r7, #28]
 801c7f0:	7b1b      	ldrb	r3, [r3, #12]
 801c7f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d002      	beq.n	801c800 <etharp_query+0x1e4>
        copy_needed = 1;
 801c7fa:	2301      	movs	r3, #1
 801c7fc:	61bb      	str	r3, [r7, #24]
        break;
 801c7fe:	e005      	b.n	801c80c <etharp_query+0x1f0>
      }
      p = p->next;
 801c800:	69fb      	ldr	r3, [r7, #28]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c806:	69fb      	ldr	r3, [r7, #28]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d1df      	bne.n	801c7cc <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801c80c:	69bb      	ldr	r3, [r7, #24]
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d007      	beq.n	801c822 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c812:	687a      	ldr	r2, [r7, #4]
 801c814:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801c818:	200e      	movs	r0, #14
 801c81a:	f7f8 fa0d 	bl	8014c38 <pbuf_clone>
 801c81e:	61f8      	str	r0, [r7, #28]
 801c820:	e004      	b.n	801c82c <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c826:	69f8      	ldr	r0, [r7, #28]
 801c828:	f7f8 f834 	bl	8014894 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c82c:	69fb      	ldr	r3, [r7, #28]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d021      	beq.n	801c876 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c832:	7c7a      	ldrb	r2, [r7, #17]
 801c834:	491b      	ldr	r1, [pc, #108]	@ (801c8a4 <etharp_query+0x288>)
 801c836:	4613      	mov	r3, r2
 801c838:	005b      	lsls	r3, r3, #1
 801c83a:	4413      	add	r3, r2
 801c83c:	00db      	lsls	r3, r3, #3
 801c83e:	440b      	add	r3, r1
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	2b00      	cmp	r3, #0
 801c844:	d00a      	beq.n	801c85c <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c846:	7c7a      	ldrb	r2, [r7, #17]
 801c848:	4916      	ldr	r1, [pc, #88]	@ (801c8a4 <etharp_query+0x288>)
 801c84a:	4613      	mov	r3, r2
 801c84c:	005b      	lsls	r3, r3, #1
 801c84e:	4413      	add	r3, r2
 801c850:	00db      	lsls	r3, r3, #3
 801c852:	440b      	add	r3, r1
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	4618      	mov	r0, r3
 801c858:	f7f7 ff76 	bl	8014748 <pbuf_free>
      }
      arp_table[i].q = p;
 801c85c:	7c7a      	ldrb	r2, [r7, #17]
 801c85e:	4911      	ldr	r1, [pc, #68]	@ (801c8a4 <etharp_query+0x288>)
 801c860:	4613      	mov	r3, r2
 801c862:	005b      	lsls	r3, r3, #1
 801c864:	4413      	add	r3, r2
 801c866:	00db      	lsls	r3, r3, #3
 801c868:	440b      	add	r3, r1
 801c86a:	69fa      	ldr	r2, [r7, #28]
 801c86c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c86e:	2300      	movs	r3, #0
 801c870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c874:	e008      	b.n	801c888 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801c876:	4b07      	ldr	r3, [pc, #28]	@ (801c894 <etharp_query+0x278>)
 801c878:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c87a:	3301      	adds	r3, #1
 801c87c:	b29a      	uxth	r2, r3
 801c87e:	4b05      	ldr	r3, [pc, #20]	@ (801c894 <etharp_query+0x278>)
 801c880:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c882:	23ff      	movs	r3, #255	@ 0xff
 801c884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801c888:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801c88c:	4618      	mov	r0, r3
 801c88e:	3728      	adds	r7, #40	@ 0x28
 801c890:	46bd      	mov	sp, r7
 801c892:	bd80      	pop	{r7, pc}
 801c894:	2002d2b0 	.word	0x2002d2b0
 801c898:	08023b14 	.word	0x08023b14
 801c89c:	08023cc0 	.word	0x08023cc0
 801c8a0:	08023b8c 	.word	0x08023b8c
 801c8a4:	2002d40c 	.word	0x2002d40c
 801c8a8:	08023cd0 	.word	0x08023cd0
 801c8ac:	08023cb4 	.word	0x08023cb4
 801c8b0:	2002d4fc 	.word	0x2002d4fc
 801c8b4:	08023cf8 	.word	0x08023cf8

0801c8b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c8b8:	b580      	push	{r7, lr}
 801c8ba:	b08a      	sub	sp, #40	@ 0x28
 801c8bc:	af02      	add	r7, sp, #8
 801c8be:	60f8      	str	r0, [r7, #12]
 801c8c0:	60b9      	str	r1, [r7, #8]
 801c8c2:	607a      	str	r2, [r7, #4]
 801c8c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d106      	bne.n	801c8de <etharp_raw+0x26>
 801c8d0:	4b40      	ldr	r3, [pc, #256]	@ (801c9d4 <etharp_raw+0x11c>)
 801c8d2:	f240 4257 	movw	r2, #1111	@ 0x457
 801c8d6:	4940      	ldr	r1, [pc, #256]	@ (801c9d8 <etharp_raw+0x120>)
 801c8d8:	4840      	ldr	r0, [pc, #256]	@ (801c9dc <etharp_raw+0x124>)
 801c8da:	f003 f987 	bl	801fbec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c8de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c8e2:	211c      	movs	r1, #28
 801c8e4:	200e      	movs	r0, #14
 801c8e6:	f7f7 fc4b 	bl	8014180 <pbuf_alloc>
 801c8ea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c8ec:	69bb      	ldr	r3, [r7, #24]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d108      	bne.n	801c904 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801c8f2:	4b3b      	ldr	r3, [pc, #236]	@ (801c9e0 <etharp_raw+0x128>)
 801c8f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c8f6:	3301      	adds	r3, #1
 801c8f8:	b29a      	uxth	r2, r3
 801c8fa:	4b39      	ldr	r3, [pc, #228]	@ (801c9e0 <etharp_raw+0x128>)
 801c8fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801c8fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c902:	e063      	b.n	801c9cc <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c904:	69bb      	ldr	r3, [r7, #24]
 801c906:	895b      	ldrh	r3, [r3, #10]
 801c908:	2b1b      	cmp	r3, #27
 801c90a:	d806      	bhi.n	801c91a <etharp_raw+0x62>
 801c90c:	4b31      	ldr	r3, [pc, #196]	@ (801c9d4 <etharp_raw+0x11c>)
 801c90e:	f240 4262 	movw	r2, #1122	@ 0x462
 801c912:	4934      	ldr	r1, [pc, #208]	@ (801c9e4 <etharp_raw+0x12c>)
 801c914:	4831      	ldr	r0, [pc, #196]	@ (801c9dc <etharp_raw+0x124>)
 801c916:	f003 f969 	bl	801fbec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c91a:	69bb      	ldr	r3, [r7, #24]
 801c91c:	685b      	ldr	r3, [r3, #4]
 801c91e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c920:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801c922:	4618      	mov	r0, r3
 801c924:	f7f6 fa52 	bl	8012dcc <lwip_htons>
 801c928:	4603      	mov	r3, r0
 801c92a:	461a      	mov	r2, r3
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c930:	68fb      	ldr	r3, [r7, #12]
 801c932:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c936:	2b06      	cmp	r3, #6
 801c938:	d006      	beq.n	801c948 <etharp_raw+0x90>
 801c93a:	4b26      	ldr	r3, [pc, #152]	@ (801c9d4 <etharp_raw+0x11c>)
 801c93c:	f240 4269 	movw	r2, #1129	@ 0x469
 801c940:	4929      	ldr	r1, [pc, #164]	@ (801c9e8 <etharp_raw+0x130>)
 801c942:	4826      	ldr	r0, [pc, #152]	@ (801c9dc <etharp_raw+0x124>)
 801c944:	f003 f952 	bl	801fbec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c948:	697b      	ldr	r3, [r7, #20]
 801c94a:	3308      	adds	r3, #8
 801c94c:	2206      	movs	r2, #6
 801c94e:	6839      	ldr	r1, [r7, #0]
 801c950:	4618      	mov	r0, r3
 801c952:	f003 fb76 	bl	8020042 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	3312      	adds	r3, #18
 801c95a:	2206      	movs	r2, #6
 801c95c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c95e:	4618      	mov	r0, r3
 801c960:	f003 fb6f 	bl	8020042 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c964:	697b      	ldr	r3, [r7, #20]
 801c966:	330e      	adds	r3, #14
 801c968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c96a:	6812      	ldr	r2, [r2, #0]
 801c96c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c96e:	697b      	ldr	r3, [r7, #20]
 801c970:	3318      	adds	r3, #24
 801c972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c974:	6812      	ldr	r2, [r2, #0]
 801c976:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c978:	697b      	ldr	r3, [r7, #20]
 801c97a:	2200      	movs	r2, #0
 801c97c:	701a      	strb	r2, [r3, #0]
 801c97e:	2200      	movs	r2, #0
 801c980:	f042 0201 	orr.w	r2, r2, #1
 801c984:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c986:	697b      	ldr	r3, [r7, #20]
 801c988:	2200      	movs	r2, #0
 801c98a:	f042 0208 	orr.w	r2, r2, #8
 801c98e:	709a      	strb	r2, [r3, #2]
 801c990:	2200      	movs	r2, #0
 801c992:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c994:	697b      	ldr	r3, [r7, #20]
 801c996:	2206      	movs	r2, #6
 801c998:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c99a:	697b      	ldr	r3, [r7, #20]
 801c99c:	2204      	movs	r2, #4
 801c99e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c9a0:	f640 0306 	movw	r3, #2054	@ 0x806
 801c9a4:	9300      	str	r3, [sp, #0]
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	68ba      	ldr	r2, [r7, #8]
 801c9aa:	69b9      	ldr	r1, [r7, #24]
 801c9ac:	68f8      	ldr	r0, [r7, #12]
 801c9ae:	f001 fc85 	bl	801e2bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801c9b2:	4b0b      	ldr	r3, [pc, #44]	@ (801c9e0 <etharp_raw+0x128>)
 801c9b4:	8b1b      	ldrh	r3, [r3, #24]
 801c9b6:	3301      	adds	r3, #1
 801c9b8:	b29a      	uxth	r2, r3
 801c9ba:	4b09      	ldr	r3, [pc, #36]	@ (801c9e0 <etharp_raw+0x128>)
 801c9bc:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801c9be:	69b8      	ldr	r0, [r7, #24]
 801c9c0:	f7f7 fec2 	bl	8014748 <pbuf_free>
  p = NULL;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c9c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c9cc:	4618      	mov	r0, r3
 801c9ce:	3720      	adds	r7, #32
 801c9d0:	46bd      	mov	sp, r7
 801c9d2:	bd80      	pop	{r7, pc}
 801c9d4:	08023b14 	.word	0x08023b14
 801c9d8:	08023c64 	.word	0x08023c64
 801c9dc:	08023b8c 	.word	0x08023b8c
 801c9e0:	2002d2b0 	.word	0x2002d2b0
 801c9e4:	08023d14 	.word	0x08023d14
 801c9e8:	08023d48 	.word	0x08023d48

0801c9ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	b088      	sub	sp, #32
 801c9f0:	af04      	add	r7, sp, #16
 801c9f2:	60f8      	str	r0, [r7, #12]
 801c9f4:	60b9      	str	r1, [r7, #8]
 801c9f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ca08:	2201      	movs	r2, #1
 801ca0a:	9203      	str	r2, [sp, #12]
 801ca0c:	68ba      	ldr	r2, [r7, #8]
 801ca0e:	9202      	str	r2, [sp, #8]
 801ca10:	4a06      	ldr	r2, [pc, #24]	@ (801ca2c <etharp_request_dst+0x40>)
 801ca12:	9201      	str	r2, [sp, #4]
 801ca14:	9300      	str	r3, [sp, #0]
 801ca16:	4603      	mov	r3, r0
 801ca18:	687a      	ldr	r2, [r7, #4]
 801ca1a:	68f8      	ldr	r0, [r7, #12]
 801ca1c:	f7ff ff4c 	bl	801c8b8 <etharp_raw>
 801ca20:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ca22:	4618      	mov	r0, r3
 801ca24:	3710      	adds	r7, #16
 801ca26:	46bd      	mov	sp, r7
 801ca28:	bd80      	pop	{r7, pc}
 801ca2a:	bf00      	nop
 801ca2c:	0802496c 	.word	0x0802496c

0801ca30 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ca30:	b580      	push	{r7, lr}
 801ca32:	b082      	sub	sp, #8
 801ca34:	af00      	add	r7, sp, #0
 801ca36:	6078      	str	r0, [r7, #4]
 801ca38:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ca3a:	4a05      	ldr	r2, [pc, #20]	@ (801ca50 <etharp_request+0x20>)
 801ca3c:	6839      	ldr	r1, [r7, #0]
 801ca3e:	6878      	ldr	r0, [r7, #4]
 801ca40:	f7ff ffd4 	bl	801c9ec <etharp_request_dst>
 801ca44:	4603      	mov	r3, r0
}
 801ca46:	4618      	mov	r0, r3
 801ca48:	3708      	adds	r7, #8
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	bd80      	pop	{r7, pc}
 801ca4e:	bf00      	nop
 801ca50:	08024964 	.word	0x08024964

0801ca54 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ca54:	b580      	push	{r7, lr}
 801ca56:	b08e      	sub	sp, #56	@ 0x38
 801ca58:	af04      	add	r7, sp, #16
 801ca5a:	6078      	str	r0, [r7, #4]
 801ca5c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801ca5e:	4b92      	ldr	r3, [pc, #584]	@ (801cca8 <icmp_input+0x254>)
 801ca60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ca64:	3301      	adds	r3, #1
 801ca66:	b29a      	uxth	r2, r3
 801ca68:	4b8f      	ldr	r3, [pc, #572]	@ (801cca8 <icmp_input+0x254>)
 801ca6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ca6e:	4b8f      	ldr	r3, [pc, #572]	@ (801ccac <icmp_input+0x258>)
 801ca70:	689b      	ldr	r3, [r3, #8]
 801ca72:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca76:	781b      	ldrb	r3, [r3, #0]
 801ca78:	f003 030f 	and.w	r3, r3, #15
 801ca7c:	b2db      	uxtb	r3, r3
 801ca7e:	009b      	lsls	r3, r3, #2
 801ca80:	b2db      	uxtb	r3, r3
 801ca82:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801ca84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ca86:	2b13      	cmp	r3, #19
 801ca88:	f240 80e6 	bls.w	801cc58 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	895b      	ldrh	r3, [r3, #10]
 801ca90:	2b03      	cmp	r3, #3
 801ca92:	f240 80e3 	bls.w	801cc5c <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	685b      	ldr	r3, [r3, #4]
 801ca9a:	781b      	ldrb	r3, [r3, #0]
 801ca9c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801caa0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	f000 80d0 	beq.w	801cc4a <icmp_input+0x1f6>
 801caaa:	2b08      	cmp	r3, #8
 801caac:	f040 80bc 	bne.w	801cc28 <icmp_input+0x1d4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801cab0:	4b7f      	ldr	r3, [pc, #508]	@ (801ccb0 <icmp_input+0x25c>)
 801cab2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cab4:	4b7d      	ldr	r3, [pc, #500]	@ (801ccac <icmp_input+0x258>)
 801cab6:	695b      	ldr	r3, [r3, #20]
 801cab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cabc:	2be0      	cmp	r3, #224	@ 0xe0
 801cabe:	f000 80dc 	beq.w	801cc7a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801cac2:	4b7a      	ldr	r3, [pc, #488]	@ (801ccac <icmp_input+0x258>)
 801cac4:	695b      	ldr	r3, [r3, #20]
 801cac6:	4a79      	ldr	r2, [pc, #484]	@ (801ccac <icmp_input+0x258>)
 801cac8:	6812      	ldr	r2, [r2, #0]
 801caca:	4611      	mov	r1, r2
 801cacc:	4618      	mov	r0, r3
 801cace:	f000 fc95 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 801cad2:	4603      	mov	r3, r0
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	f040 80d2 	bne.w	801cc7e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	891b      	ldrh	r3, [r3, #8]
 801cade:	2b07      	cmp	r3, #7
 801cae0:	f240 80be 	bls.w	801cc60 <icmp_input+0x20c>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cae4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cae6:	330e      	adds	r3, #14
 801cae8:	4619      	mov	r1, r3
 801caea:	6878      	ldr	r0, [r7, #4]
 801caec:	f7f7 fd96 	bl	801461c <pbuf_add_header>
 801caf0:	4603      	mov	r3, r0
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d04b      	beq.n	801cb8e <icmp_input+0x13a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	891a      	ldrh	r2, [r3, #8]
 801cafa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cafc:	4413      	add	r3, r2
 801cafe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	891b      	ldrh	r3, [r3, #8]
 801cb04:	8b7a      	ldrh	r2, [r7, #26]
 801cb06:	429a      	cmp	r2, r3
 801cb08:	f0c0 80bb 	bcc.w	801cc82 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801cb0c:	8b7b      	ldrh	r3, [r7, #26]
 801cb0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cb12:	4619      	mov	r1, r3
 801cb14:	200e      	movs	r0, #14
 801cb16:	f7f7 fb33 	bl	8014180 <pbuf_alloc>
 801cb1a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801cb1c:	697b      	ldr	r3, [r7, #20]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	f000 80b1 	beq.w	801cc86 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801cb24:	697b      	ldr	r3, [r7, #20]
 801cb26:	895b      	ldrh	r3, [r3, #10]
 801cb28:	461a      	mov	r2, r3
 801cb2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cb2c:	3308      	adds	r3, #8
 801cb2e:	429a      	cmp	r2, r3
 801cb30:	d203      	bcs.n	801cb3a <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801cb32:	6978      	ldr	r0, [r7, #20]
 801cb34:	f7f7 fe08 	bl	8014748 <pbuf_free>
          goto icmperr;
 801cb38:	e0a6      	b.n	801cc88 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801cb3a:	697b      	ldr	r3, [r7, #20]
 801cb3c:	685b      	ldr	r3, [r3, #4]
 801cb3e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801cb40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cb42:	4618      	mov	r0, r3
 801cb44:	f003 fa7d 	bl	8020042 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801cb48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cb4a:	4619      	mov	r1, r3
 801cb4c:	6978      	ldr	r0, [r7, #20]
 801cb4e:	f7f7 fd75 	bl	801463c <pbuf_remove_header>
 801cb52:	4603      	mov	r3, r0
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d009      	beq.n	801cb6c <icmp_input+0x118>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801cb58:	4b56      	ldr	r3, [pc, #344]	@ (801ccb4 <icmp_input+0x260>)
 801cb5a:	22b6      	movs	r2, #182	@ 0xb6
 801cb5c:	4956      	ldr	r1, [pc, #344]	@ (801ccb8 <icmp_input+0x264>)
 801cb5e:	4857      	ldr	r0, [pc, #348]	@ (801ccbc <icmp_input+0x268>)
 801cb60:	f003 f844 	bl	801fbec <iprintf>
          pbuf_free(r);
 801cb64:	6978      	ldr	r0, [r7, #20]
 801cb66:	f7f7 fdef 	bl	8014748 <pbuf_free>
          goto icmperr;
 801cb6a:	e08d      	b.n	801cc88 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801cb6c:	6879      	ldr	r1, [r7, #4]
 801cb6e:	6978      	ldr	r0, [r7, #20]
 801cb70:	f7f7 ff1e 	bl	80149b0 <pbuf_copy>
 801cb74:	4603      	mov	r3, r0
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d003      	beq.n	801cb82 <icmp_input+0x12e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801cb7a:	6978      	ldr	r0, [r7, #20]
 801cb7c:	f7f7 fde4 	bl	8014748 <pbuf_free>
          goto icmperr;
 801cb80:	e082      	b.n	801cc88 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 801cb82:	6878      	ldr	r0, [r7, #4]
 801cb84:	f7f7 fde0 	bl	8014748 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801cb88:	697b      	ldr	r3, [r7, #20]
 801cb8a:	607b      	str	r3, [r7, #4]
 801cb8c:	e00f      	b.n	801cbae <icmp_input+0x15a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cb8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cb90:	330e      	adds	r3, #14
 801cb92:	4619      	mov	r1, r3
 801cb94:	6878      	ldr	r0, [r7, #4]
 801cb96:	f7f7 fd51 	bl	801463c <pbuf_remove_header>
 801cb9a:	4603      	mov	r3, r0
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d006      	beq.n	801cbae <icmp_input+0x15a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801cba0:	4b44      	ldr	r3, [pc, #272]	@ (801ccb4 <icmp_input+0x260>)
 801cba2:	22c7      	movs	r2, #199	@ 0xc7
 801cba4:	4946      	ldr	r1, [pc, #280]	@ (801ccc0 <icmp_input+0x26c>)
 801cba6:	4845      	ldr	r0, [pc, #276]	@ (801ccbc <icmp_input+0x268>)
 801cba8:	f003 f820 	bl	801fbec <iprintf>
          goto icmperr;
 801cbac:	e06c      	b.n	801cc88 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	685b      	ldr	r3, [r3, #4]
 801cbb2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801cbb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cbb6:	4619      	mov	r1, r3
 801cbb8:	6878      	ldr	r0, [r7, #4]
 801cbba:	f7f7 fd2f 	bl	801461c <pbuf_add_header>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d144      	bne.n	801cc4e <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	685b      	ldr	r3, [r3, #4]
 801cbc8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801cbca:	69fb      	ldr	r3, [r7, #28]
 801cbcc:	681a      	ldr	r2, [r3, #0]
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801cbd2:	4b36      	ldr	r3, [pc, #216]	@ (801ccac <icmp_input+0x258>)
 801cbd4:	691a      	ldr	r2, [r3, #16]
 801cbd6:	68fb      	ldr	r3, [r7, #12]
 801cbd8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801cbda:	693b      	ldr	r3, [r7, #16]
 801cbdc:	2200      	movs	r2, #0
 801cbde:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801cbe0:	693b      	ldr	r3, [r7, #16]
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	709a      	strb	r2, [r3, #2]
 801cbe6:	2200      	movs	r2, #0
 801cbe8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801cbea:	68fb      	ldr	r3, [r7, #12]
 801cbec:	22ff      	movs	r2, #255	@ 0xff
 801cbee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	729a      	strb	r2, [r3, #10]
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 801cbfa:	4b2b      	ldr	r3, [pc, #172]	@ (801cca8 <icmp_input+0x254>)
 801cbfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801cc00:	3301      	adds	r3, #1
 801cc02:	b29a      	uxth	r2, r3
 801cc04:	4b28      	ldr	r3, [pc, #160]	@ (801cca8 <icmp_input+0x254>)
 801cc06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801cc0a:	683b      	ldr	r3, [r7, #0]
 801cc0c:	9302      	str	r3, [sp, #8]
 801cc0e:	2301      	movs	r3, #1
 801cc10:	9301      	str	r3, [sp, #4]
 801cc12:	2300      	movs	r3, #0
 801cc14:	9300      	str	r3, [sp, #0]
 801cc16:	23ff      	movs	r3, #255	@ 0xff
 801cc18:	2200      	movs	r2, #0
 801cc1a:	69f9      	ldr	r1, [r7, #28]
 801cc1c:	6878      	ldr	r0, [r7, #4]
 801cc1e:	f000 fafb 	bl	801d218 <ip4_output_if>
 801cc22:	4603      	mov	r3, r0
 801cc24:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801cc26:	e012      	b.n	801cc4e <icmp_input+0x1fa>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801cc28:	4b1f      	ldr	r3, [pc, #124]	@ (801cca8 <icmp_input+0x254>)
 801cc2a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801cc2e:	3301      	adds	r3, #1
 801cc30:	b29a      	uxth	r2, r3
 801cc32:	4b1d      	ldr	r3, [pc, #116]	@ (801cca8 <icmp_input+0x254>)
 801cc34:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801cc38:	4b1b      	ldr	r3, [pc, #108]	@ (801cca8 <icmp_input+0x254>)
 801cc3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801cc3e:	3301      	adds	r3, #1
 801cc40:	b29a      	uxth	r2, r3
 801cc42:	4b19      	ldr	r3, [pc, #100]	@ (801cca8 <icmp_input+0x254>)
 801cc44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801cc48:	e002      	b.n	801cc50 <icmp_input+0x1fc>
      break;
 801cc4a:	bf00      	nop
 801cc4c:	e000      	b.n	801cc50 <icmp_input+0x1fc>
      break;
 801cc4e:	bf00      	nop
  }
  pbuf_free(p);
 801cc50:	6878      	ldr	r0, [r7, #4]
 801cc52:	f7f7 fd79 	bl	8014748 <pbuf_free>
  return;
 801cc56:	e023      	b.n	801cca0 <icmp_input+0x24c>
    goto lenerr;
 801cc58:	bf00      	nop
 801cc5a:	e002      	b.n	801cc62 <icmp_input+0x20e>
    goto lenerr;
 801cc5c:	bf00      	nop
 801cc5e:	e000      	b.n	801cc62 <icmp_input+0x20e>
        goto lenerr;
 801cc60:	bf00      	nop
lenerr:
  pbuf_free(p);
 801cc62:	6878      	ldr	r0, [r7, #4]
 801cc64:	f7f7 fd70 	bl	8014748 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801cc68:	4b0f      	ldr	r3, [pc, #60]	@ (801cca8 <icmp_input+0x254>)
 801cc6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801cc6e:	3301      	adds	r3, #1
 801cc70:	b29a      	uxth	r2, r3
 801cc72:	4b0d      	ldr	r3, [pc, #52]	@ (801cca8 <icmp_input+0x254>)
 801cc74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cc78:	e012      	b.n	801cca0 <icmp_input+0x24c>
        goto icmperr;
 801cc7a:	bf00      	nop
 801cc7c:	e004      	b.n	801cc88 <icmp_input+0x234>
        goto icmperr;
 801cc7e:	bf00      	nop
 801cc80:	e002      	b.n	801cc88 <icmp_input+0x234>
          goto icmperr;
 801cc82:	bf00      	nop
 801cc84:	e000      	b.n	801cc88 <icmp_input+0x234>
          goto icmperr;
 801cc86:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801cc88:	6878      	ldr	r0, [r7, #4]
 801cc8a:	f7f7 fd5d 	bl	8014748 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801cc8e:	4b06      	ldr	r3, [pc, #24]	@ (801cca8 <icmp_input+0x254>)
 801cc90:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801cc94:	3301      	adds	r3, #1
 801cc96:	b29a      	uxth	r2, r3
 801cc98:	4b03      	ldr	r3, [pc, #12]	@ (801cca8 <icmp_input+0x254>)
 801cc9a:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cc9e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801cca0:	3728      	adds	r7, #40	@ 0x28
 801cca2:	46bd      	mov	sp, r7
 801cca4:	bd80      	pop	{r7, pc}
 801cca6:	bf00      	nop
 801cca8:	2002d2b0 	.word	0x2002d2b0
 801ccac:	200270b4 	.word	0x200270b4
 801ccb0:	200270c8 	.word	0x200270c8
 801ccb4:	08023d8c 	.word	0x08023d8c
 801ccb8:	08023dc4 	.word	0x08023dc4
 801ccbc:	08023dfc 	.word	0x08023dfc
 801ccc0:	08023e24 	.word	0x08023e24

0801ccc4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b082      	sub	sp, #8
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
 801cccc:	460b      	mov	r3, r1
 801ccce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ccd0:	78fb      	ldrb	r3, [r7, #3]
 801ccd2:	461a      	mov	r2, r3
 801ccd4:	2103      	movs	r1, #3
 801ccd6:	6878      	ldr	r0, [r7, #4]
 801ccd8:	f000 f814 	bl	801cd04 <icmp_send_response>
}
 801ccdc:	bf00      	nop
 801ccde:	3708      	adds	r7, #8
 801cce0:	46bd      	mov	sp, r7
 801cce2:	bd80      	pop	{r7, pc}

0801cce4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b082      	sub	sp, #8
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	6078      	str	r0, [r7, #4]
 801ccec:	460b      	mov	r3, r1
 801ccee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801ccf0:	78fb      	ldrb	r3, [r7, #3]
 801ccf2:	461a      	mov	r2, r3
 801ccf4:	210b      	movs	r1, #11
 801ccf6:	6878      	ldr	r0, [r7, #4]
 801ccf8:	f000 f804 	bl	801cd04 <icmp_send_response>
}
 801ccfc:	bf00      	nop
 801ccfe:	3708      	adds	r7, #8
 801cd00:	46bd      	mov	sp, r7
 801cd02:	bd80      	pop	{r7, pc}

0801cd04 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801cd04:	b580      	push	{r7, lr}
 801cd06:	b08c      	sub	sp, #48	@ 0x30
 801cd08:	af04      	add	r7, sp, #16
 801cd0a:	6078      	str	r0, [r7, #4]
 801cd0c:	460b      	mov	r3, r1
 801cd0e:	70fb      	strb	r3, [r7, #3]
 801cd10:	4613      	mov	r3, r2
 801cd12:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801cd14:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cd18:	2124      	movs	r1, #36	@ 0x24
 801cd1a:	2022      	movs	r0, #34	@ 0x22
 801cd1c:	f7f7 fa30 	bl	8014180 <pbuf_alloc>
 801cd20:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801cd22:	69fb      	ldr	r3, [r7, #28]
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d054      	beq.n	801cdd2 <icmp_send_response+0xce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801cd28:	69fb      	ldr	r3, [r7, #28]
 801cd2a:	895b      	ldrh	r3, [r3, #10]
 801cd2c:	2b23      	cmp	r3, #35	@ 0x23
 801cd2e:	d806      	bhi.n	801cd3e <icmp_send_response+0x3a>
 801cd30:	4b2a      	ldr	r3, [pc, #168]	@ (801cddc <icmp_send_response+0xd8>)
 801cd32:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801cd36:	492a      	ldr	r1, [pc, #168]	@ (801cde0 <icmp_send_response+0xdc>)
 801cd38:	482a      	ldr	r0, [pc, #168]	@ (801cde4 <icmp_send_response+0xe0>)
 801cd3a:	f002 ff57 	bl	801fbec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	685b      	ldr	r3, [r3, #4]
 801cd42:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801cd44:	69fb      	ldr	r3, [r7, #28]
 801cd46:	685b      	ldr	r3, [r3, #4]
 801cd48:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801cd4a:	697b      	ldr	r3, [r7, #20]
 801cd4c:	78fa      	ldrb	r2, [r7, #3]
 801cd4e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801cd50:	697b      	ldr	r3, [r7, #20]
 801cd52:	78ba      	ldrb	r2, [r7, #2]
 801cd54:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801cd56:	697b      	ldr	r3, [r7, #20]
 801cd58:	2200      	movs	r2, #0
 801cd5a:	711a      	strb	r2, [r3, #4]
 801cd5c:	2200      	movs	r2, #0
 801cd5e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801cd60:	697b      	ldr	r3, [r7, #20]
 801cd62:	2200      	movs	r2, #0
 801cd64:	719a      	strb	r2, [r3, #6]
 801cd66:	2200      	movs	r2, #0
 801cd68:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801cd6a:	69fb      	ldr	r3, [r7, #28]
 801cd6c:	685b      	ldr	r3, [r3, #4]
 801cd6e:	f103 0008 	add.w	r0, r3, #8
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	685b      	ldr	r3, [r3, #4]
 801cd76:	221c      	movs	r2, #28
 801cd78:	4619      	mov	r1, r3
 801cd7a:	f003 f962 	bl	8020042 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801cd7e:	69bb      	ldr	r3, [r7, #24]
 801cd80:	68db      	ldr	r3, [r3, #12]
 801cd82:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801cd84:	f107 030c 	add.w	r3, r7, #12
 801cd88:	4618      	mov	r0, r3
 801cd8a:	f000 f82f 	bl	801cdec <ip4_route>
 801cd8e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801cd90:	693b      	ldr	r3, [r7, #16]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d019      	beq.n	801cdca <icmp_send_response+0xc6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801cd96:	697b      	ldr	r3, [r7, #20]
 801cd98:	2200      	movs	r2, #0
 801cd9a:	709a      	strb	r2, [r3, #2]
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801cda0:	4b11      	ldr	r3, [pc, #68]	@ (801cde8 <icmp_send_response+0xe4>)
 801cda2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801cda6:	3301      	adds	r3, #1
 801cda8:	b29a      	uxth	r2, r3
 801cdaa:	4b0f      	ldr	r3, [pc, #60]	@ (801cde8 <icmp_send_response+0xe4>)
 801cdac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801cdb0:	f107 020c 	add.w	r2, r7, #12
 801cdb4:	693b      	ldr	r3, [r7, #16]
 801cdb6:	9302      	str	r3, [sp, #8]
 801cdb8:	2301      	movs	r3, #1
 801cdba:	9301      	str	r3, [sp, #4]
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	9300      	str	r3, [sp, #0]
 801cdc0:	23ff      	movs	r3, #255	@ 0xff
 801cdc2:	2100      	movs	r1, #0
 801cdc4:	69f8      	ldr	r0, [r7, #28]
 801cdc6:	f000 fa27 	bl	801d218 <ip4_output_if>
  }
  pbuf_free(q);
 801cdca:	69f8      	ldr	r0, [r7, #28]
 801cdcc:	f7f7 fcbc 	bl	8014748 <pbuf_free>
 801cdd0:	e000      	b.n	801cdd4 <icmp_send_response+0xd0>
    return;
 801cdd2:	bf00      	nop
}
 801cdd4:	3720      	adds	r7, #32
 801cdd6:	46bd      	mov	sp, r7
 801cdd8:	bd80      	pop	{r7, pc}
 801cdda:	bf00      	nop
 801cddc:	08023d8c 	.word	0x08023d8c
 801cde0:	08023e58 	.word	0x08023e58
 801cde4:	08023dfc 	.word	0x08023dfc
 801cde8:	2002d2b0 	.word	0x2002d2b0

0801cdec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801cdec:	b480      	push	{r7}
 801cdee:	b085      	sub	sp, #20
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801cdf4:	4b37      	ldr	r3, [pc, #220]	@ (801ced4 <ip4_route+0xe8>)
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	60fb      	str	r3, [r7, #12]
 801cdfa:	e036      	b.n	801ce6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ce02:	f003 0301 	and.w	r3, r3, #1
 801ce06:	b2db      	uxtb	r3, r3
 801ce08:	2b00      	cmp	r3, #0
 801ce0a:	d02b      	beq.n	801ce64 <ip4_route+0x78>
 801ce0c:	68fb      	ldr	r3, [r7, #12]
 801ce0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ce12:	089b      	lsrs	r3, r3, #2
 801ce14:	f003 0301 	and.w	r3, r3, #1
 801ce18:	b2db      	uxtb	r3, r3
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d022      	beq.n	801ce64 <ip4_route+0x78>
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	3304      	adds	r3, #4
 801ce22:	681b      	ldr	r3, [r3, #0]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d01d      	beq.n	801ce64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	681a      	ldr	r2, [r3, #0]
 801ce2c:	68fb      	ldr	r3, [r7, #12]
 801ce2e:	3304      	adds	r3, #4
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	405a      	eors	r2, r3
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	3308      	adds	r3, #8
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	4013      	ands	r3, r2
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d101      	bne.n	801ce44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801ce40:	68fb      	ldr	r3, [r7, #12]
 801ce42:	e040      	b.n	801cec6 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ce44:	68fb      	ldr	r3, [r7, #12]
 801ce46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ce4a:	f003 0302 	and.w	r3, r3, #2
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d108      	bne.n	801ce64 <ip4_route+0x78>
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	681a      	ldr	r2, [r3, #0]
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	330c      	adds	r3, #12
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	429a      	cmp	r2, r3
 801ce5e:	d101      	bne.n	801ce64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	e030      	b.n	801cec6 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801ce64:	68fb      	ldr	r3, [r7, #12]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	60fb      	str	r3, [r7, #12]
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d1c5      	bne.n	801cdfc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ce70:	4b19      	ldr	r3, [pc, #100]	@ (801ced8 <ip4_route+0xec>)
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d01a      	beq.n	801ceae <ip4_route+0xc2>
 801ce78:	4b17      	ldr	r3, [pc, #92]	@ (801ced8 <ip4_route+0xec>)
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ce80:	f003 0301 	and.w	r3, r3, #1
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d012      	beq.n	801ceae <ip4_route+0xc2>
 801ce88:	4b13      	ldr	r3, [pc, #76]	@ (801ced8 <ip4_route+0xec>)
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ce90:	f003 0304 	and.w	r3, r3, #4
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d00a      	beq.n	801ceae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ce98:	4b0f      	ldr	r3, [pc, #60]	@ (801ced8 <ip4_route+0xec>)
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	3304      	adds	r3, #4
 801ce9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d004      	beq.n	801ceae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801cea4:	687b      	ldr	r3, [r7, #4]
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	b2db      	uxtb	r3, r3
 801ceaa:	2b7f      	cmp	r3, #127	@ 0x7f
 801ceac:	d109      	bne.n	801cec2 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801ceae:	4b0b      	ldr	r3, [pc, #44]	@ (801cedc <ip4_route+0xf0>)
 801ceb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801ceb4:	3301      	adds	r3, #1
 801ceb6:	b29a      	uxth	r2, r3
 801ceb8:	4b08      	ldr	r3, [pc, #32]	@ (801cedc <ip4_route+0xf0>)
 801ceba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801cebe:	2300      	movs	r3, #0
 801cec0:	e001      	b.n	801cec6 <ip4_route+0xda>
  }

  return netif_default;
 801cec2:	4b05      	ldr	r3, [pc, #20]	@ (801ced8 <ip4_route+0xec>)
 801cec4:	681b      	ldr	r3, [r3, #0]
}
 801cec6:	4618      	mov	r0, r3
 801cec8:	3714      	adds	r7, #20
 801ceca:	46bd      	mov	sp, r7
 801cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ced0:	4770      	bx	lr
 801ced2:	bf00      	nop
 801ced4:	2002d2a4 	.word	0x2002d2a4
 801ced8:	2002d2a8 	.word	0x2002d2a8
 801cedc:	2002d2b0 	.word	0x2002d2b0

0801cee0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801cee0:	b580      	push	{r7, lr}
 801cee2:	b082      	sub	sp, #8
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ceee:	f003 0301 	and.w	r3, r3, #1
 801cef2:	b2db      	uxtb	r3, r3
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d016      	beq.n	801cf26 <ip4_input_accept+0x46>
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	3304      	adds	r3, #4
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d011      	beq.n	801cf26 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cf02:	4b0b      	ldr	r3, [pc, #44]	@ (801cf30 <ip4_input_accept+0x50>)
 801cf04:	695a      	ldr	r2, [r3, #20]
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	3304      	adds	r3, #4
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	429a      	cmp	r2, r3
 801cf0e:	d008      	beq.n	801cf22 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801cf10:	4b07      	ldr	r3, [pc, #28]	@ (801cf30 <ip4_input_accept+0x50>)
 801cf12:	695b      	ldr	r3, [r3, #20]
 801cf14:	6879      	ldr	r1, [r7, #4]
 801cf16:	4618      	mov	r0, r3
 801cf18:	f000 fa70 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 801cf1c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d001      	beq.n	801cf26 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801cf22:	2301      	movs	r3, #1
 801cf24:	e000      	b.n	801cf28 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801cf26:	2300      	movs	r3, #0
}
 801cf28:	4618      	mov	r0, r3
 801cf2a:	3708      	adds	r7, #8
 801cf2c:	46bd      	mov	sp, r7
 801cf2e:	bd80      	pop	{r7, pc}
 801cf30:	200270b4 	.word	0x200270b4

0801cf34 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801cf34:	b580      	push	{r7, lr}
 801cf36:	b086      	sub	sp, #24
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	6078      	str	r0, [r7, #4]
 801cf3c:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801cf3e:	4b8f      	ldr	r3, [pc, #572]	@ (801d17c <ip4_input+0x248>)
 801cf40:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801cf44:	3301      	adds	r3, #1
 801cf46:	b29a      	uxth	r2, r3
 801cf48:	4b8c      	ldr	r3, [pc, #560]	@ (801d17c <ip4_input+0x248>)
 801cf4a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	685b      	ldr	r3, [r3, #4]
 801cf52:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801cf54:	697b      	ldr	r3, [r7, #20]
 801cf56:	781b      	ldrb	r3, [r3, #0]
 801cf58:	091b      	lsrs	r3, r3, #4
 801cf5a:	b2db      	uxtb	r3, r3
 801cf5c:	2b04      	cmp	r3, #4
 801cf5e:	d014      	beq.n	801cf8a <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801cf60:	6878      	ldr	r0, [r7, #4]
 801cf62:	f7f7 fbf1 	bl	8014748 <pbuf_free>
    IP_STATS_INC(ip.err);
 801cf66:	4b85      	ldr	r3, [pc, #532]	@ (801d17c <ip4_input+0x248>)
 801cf68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801cf6c:	3301      	adds	r3, #1
 801cf6e:	b29a      	uxth	r2, r3
 801cf70:	4b82      	ldr	r3, [pc, #520]	@ (801d17c <ip4_input+0x248>)
 801cf72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801cf76:	4b81      	ldr	r3, [pc, #516]	@ (801d17c <ip4_input+0x248>)
 801cf78:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801cf7c:	3301      	adds	r3, #1
 801cf7e:	b29a      	uxth	r2, r3
 801cf80:	4b7e      	ldr	r3, [pc, #504]	@ (801d17c <ip4_input+0x248>)
 801cf82:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801cf86:	2300      	movs	r3, #0
 801cf88:	e13e      	b.n	801d208 <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801cf8a:	697b      	ldr	r3, [r7, #20]
 801cf8c:	781b      	ldrb	r3, [r3, #0]
 801cf8e:	f003 030f 	and.w	r3, r3, #15
 801cf92:	b2db      	uxtb	r3, r3
 801cf94:	009b      	lsls	r3, r3, #2
 801cf96:	b2db      	uxtb	r3, r3
 801cf98:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801cf9a:	697b      	ldr	r3, [r7, #20]
 801cf9c:	885b      	ldrh	r3, [r3, #2]
 801cf9e:	b29b      	uxth	r3, r3
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f7f5 ff13 	bl	8012dcc <lwip_htons>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	891b      	ldrh	r3, [r3, #8]
 801cfae:	89ba      	ldrh	r2, [r7, #12]
 801cfb0:	429a      	cmp	r2, r3
 801cfb2:	d204      	bcs.n	801cfbe <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801cfb4:	89bb      	ldrh	r3, [r7, #12]
 801cfb6:	4619      	mov	r1, r3
 801cfb8:	6878      	ldr	r0, [r7, #4]
 801cfba:	f7f7 fa3f 	bl	801443c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	895b      	ldrh	r3, [r3, #10]
 801cfc2:	89fa      	ldrh	r2, [r7, #14]
 801cfc4:	429a      	cmp	r2, r3
 801cfc6:	d807      	bhi.n	801cfd8 <ip4_input+0xa4>
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	891b      	ldrh	r3, [r3, #8]
 801cfcc:	89ba      	ldrh	r2, [r7, #12]
 801cfce:	429a      	cmp	r2, r3
 801cfd0:	d802      	bhi.n	801cfd8 <ip4_input+0xa4>
 801cfd2:	89fb      	ldrh	r3, [r7, #14]
 801cfd4:	2b13      	cmp	r3, #19
 801cfd6:	d814      	bhi.n	801d002 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cfd8:	6878      	ldr	r0, [r7, #4]
 801cfda:	f7f7 fbb5 	bl	8014748 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801cfde:	4b67      	ldr	r3, [pc, #412]	@ (801d17c <ip4_input+0x248>)
 801cfe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801cfe4:	3301      	adds	r3, #1
 801cfe6:	b29a      	uxth	r2, r3
 801cfe8:	4b64      	ldr	r3, [pc, #400]	@ (801d17c <ip4_input+0x248>)
 801cfea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801cfee:	4b63      	ldr	r3, [pc, #396]	@ (801d17c <ip4_input+0x248>)
 801cff0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801cff4:	3301      	adds	r3, #1
 801cff6:	b29a      	uxth	r2, r3
 801cff8:	4b60      	ldr	r3, [pc, #384]	@ (801d17c <ip4_input+0x248>)
 801cffa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cffe:	2300      	movs	r3, #0
 801d000:	e102      	b.n	801d208 <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d002:	697b      	ldr	r3, [r7, #20]
 801d004:	691b      	ldr	r3, [r3, #16]
 801d006:	4a5e      	ldr	r2, [pc, #376]	@ (801d180 <ip4_input+0x24c>)
 801d008:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d00a:	697b      	ldr	r3, [r7, #20]
 801d00c:	68db      	ldr	r3, [r3, #12]
 801d00e:	4a5c      	ldr	r2, [pc, #368]	@ (801d180 <ip4_input+0x24c>)
 801d010:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d012:	4b5b      	ldr	r3, [pc, #364]	@ (801d180 <ip4_input+0x24c>)
 801d014:	695b      	ldr	r3, [r3, #20]
 801d016:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d01a:	2be0      	cmp	r3, #224	@ 0xe0
 801d01c:	d112      	bne.n	801d044 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d01e:	683b      	ldr	r3, [r7, #0]
 801d020:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d024:	f003 0301 	and.w	r3, r3, #1
 801d028:	b2db      	uxtb	r3, r3
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d007      	beq.n	801d03e <ip4_input+0x10a>
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	3304      	adds	r3, #4
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d002      	beq.n	801d03e <ip4_input+0x10a>
      netif = inp;
 801d038:	683b      	ldr	r3, [r7, #0]
 801d03a:	613b      	str	r3, [r7, #16]
 801d03c:	e02a      	b.n	801d094 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d03e:	2300      	movs	r3, #0
 801d040:	613b      	str	r3, [r7, #16]
 801d042:	e027      	b.n	801d094 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d044:	6838      	ldr	r0, [r7, #0]
 801d046:	f7ff ff4b 	bl	801cee0 <ip4_input_accept>
 801d04a:	4603      	mov	r3, r0
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	d002      	beq.n	801d056 <ip4_input+0x122>
      netif = inp;
 801d050:	683b      	ldr	r3, [r7, #0]
 801d052:	613b      	str	r3, [r7, #16]
 801d054:	e01e      	b.n	801d094 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d056:	2300      	movs	r3, #0
 801d058:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d05a:	4b49      	ldr	r3, [pc, #292]	@ (801d180 <ip4_input+0x24c>)
 801d05c:	695b      	ldr	r3, [r3, #20]
 801d05e:	b2db      	uxtb	r3, r3
 801d060:	2b7f      	cmp	r3, #127	@ 0x7f
 801d062:	d017      	beq.n	801d094 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d064:	4b47      	ldr	r3, [pc, #284]	@ (801d184 <ip4_input+0x250>)
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	613b      	str	r3, [r7, #16]
 801d06a:	e00e      	b.n	801d08a <ip4_input+0x156>
          if (netif == inp) {
 801d06c:	693a      	ldr	r2, [r7, #16]
 801d06e:	683b      	ldr	r3, [r7, #0]
 801d070:	429a      	cmp	r2, r3
 801d072:	d006      	beq.n	801d082 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d074:	6938      	ldr	r0, [r7, #16]
 801d076:	f7ff ff33 	bl	801cee0 <ip4_input_accept>
 801d07a:	4603      	mov	r3, r0
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d108      	bne.n	801d092 <ip4_input+0x15e>
 801d080:	e000      	b.n	801d084 <ip4_input+0x150>
            continue;
 801d082:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d084:	693b      	ldr	r3, [r7, #16]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	613b      	str	r3, [r7, #16]
 801d08a:	693b      	ldr	r3, [r7, #16]
 801d08c:	2b00      	cmp	r3, #0
 801d08e:	d1ed      	bne.n	801d06c <ip4_input+0x138>
 801d090:	e000      	b.n	801d094 <ip4_input+0x160>
            break;
 801d092:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d094:	4b3a      	ldr	r3, [pc, #232]	@ (801d180 <ip4_input+0x24c>)
 801d096:	691b      	ldr	r3, [r3, #16]
 801d098:	6839      	ldr	r1, [r7, #0]
 801d09a:	4618      	mov	r0, r3
 801d09c:	f000 f9ae 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d105      	bne.n	801d0b2 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d0a6:	4b36      	ldr	r3, [pc, #216]	@ (801d180 <ip4_input+0x24c>)
 801d0a8:	691b      	ldr	r3, [r3, #16]
 801d0aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d0ae:	2be0      	cmp	r3, #224	@ 0xe0
 801d0b0:	d10c      	bne.n	801d0cc <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d0b2:	6878      	ldr	r0, [r7, #4]
 801d0b4:	f7f7 fb48 	bl	8014748 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801d0b8:	4b30      	ldr	r3, [pc, #192]	@ (801d17c <ip4_input+0x248>)
 801d0ba:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d0be:	3301      	adds	r3, #1
 801d0c0:	b29a      	uxth	r2, r3
 801d0c2:	4b2e      	ldr	r3, [pc, #184]	@ (801d17c <ip4_input+0x248>)
 801d0c4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d0c8:	2300      	movs	r3, #0
 801d0ca:	e09d      	b.n	801d208 <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d0cc:	693b      	ldr	r3, [r7, #16]
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d10c      	bne.n	801d0ec <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801d0d2:	4b2a      	ldr	r3, [pc, #168]	@ (801d17c <ip4_input+0x248>)
 801d0d4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d0d8:	3301      	adds	r3, #1
 801d0da:	b29a      	uxth	r2, r3
 801d0dc:	4b27      	ldr	r3, [pc, #156]	@ (801d17c <ip4_input+0x248>)
 801d0de:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d0e2:	6878      	ldr	r0, [r7, #4]
 801d0e4:	f7f7 fb30 	bl	8014748 <pbuf_free>
    return ERR_OK;
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	e08d      	b.n	801d208 <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d0ec:	697b      	ldr	r3, [r7, #20]
 801d0ee:	88db      	ldrh	r3, [r3, #6]
 801d0f0:	b29b      	uxth	r3, r3
 801d0f2:	461a      	mov	r2, r3
 801d0f4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801d0f8:	4013      	ands	r3, r2
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d00b      	beq.n	801d116 <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d0fe:	6878      	ldr	r0, [r7, #4]
 801d100:	f000 fcca 	bl	801da98 <ip4_reass>
 801d104:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d101      	bne.n	801d110 <ip4_input+0x1dc>
      return ERR_OK;
 801d10c:	2300      	movs	r3, #0
 801d10e:	e07b      	b.n	801d208 <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	685b      	ldr	r3, [r3, #4]
 801d114:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d116:	4a1a      	ldr	r2, [pc, #104]	@ (801d180 <ip4_input+0x24c>)
 801d118:	693b      	ldr	r3, [r7, #16]
 801d11a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d11c:	4a18      	ldr	r2, [pc, #96]	@ (801d180 <ip4_input+0x24c>)
 801d11e:	683b      	ldr	r3, [r7, #0]
 801d120:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d122:	4a17      	ldr	r2, [pc, #92]	@ (801d180 <ip4_input+0x24c>)
 801d124:	697b      	ldr	r3, [r7, #20]
 801d126:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d128:	697b      	ldr	r3, [r7, #20]
 801d12a:	781b      	ldrb	r3, [r3, #0]
 801d12c:	f003 030f 	and.w	r3, r3, #15
 801d130:	b2db      	uxtb	r3, r3
 801d132:	009b      	lsls	r3, r3, #2
 801d134:	b2db      	uxtb	r3, r3
 801d136:	461a      	mov	r2, r3
 801d138:	4b11      	ldr	r3, [pc, #68]	@ (801d180 <ip4_input+0x24c>)
 801d13a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d13c:	89fb      	ldrh	r3, [r7, #14]
 801d13e:	4619      	mov	r1, r3
 801d140:	6878      	ldr	r0, [r7, #4]
 801d142:	f7f7 fa7b 	bl	801463c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d146:	697b      	ldr	r3, [r7, #20]
 801d148:	7a5b      	ldrb	r3, [r3, #9]
 801d14a:	2b11      	cmp	r3, #17
 801d14c:	d006      	beq.n	801d15c <ip4_input+0x228>
 801d14e:	2b11      	cmp	r3, #17
 801d150:	dc1a      	bgt.n	801d188 <ip4_input+0x254>
 801d152:	2b01      	cmp	r3, #1
 801d154:	d00c      	beq.n	801d170 <ip4_input+0x23c>
 801d156:	2b06      	cmp	r3, #6
 801d158:	d005      	beq.n	801d166 <ip4_input+0x232>
 801d15a:	e015      	b.n	801d188 <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d15c:	6839      	ldr	r1, [r7, #0]
 801d15e:	6878      	ldr	r0, [r7, #4]
 801d160:	f7fe f862 	bl	801b228 <udp_input>
        break;
 801d164:	e03d      	b.n	801d1e2 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d166:	6839      	ldr	r1, [r7, #0]
 801d168:	6878      	ldr	r0, [r7, #4]
 801d16a:	f7f9 fb6d 	bl	8016848 <tcp_input>
        break;
 801d16e:	e038      	b.n	801d1e2 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d170:	6839      	ldr	r1, [r7, #0]
 801d172:	6878      	ldr	r0, [r7, #4]
 801d174:	f7ff fc6e 	bl	801ca54 <icmp_input>
        break;
 801d178:	e033      	b.n	801d1e2 <ip4_input+0x2ae>
 801d17a:	bf00      	nop
 801d17c:	2002d2b0 	.word	0x2002d2b0
 801d180:	200270b4 	.word	0x200270b4
 801d184:	2002d2a4 	.word	0x2002d2a4
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d188:	4b21      	ldr	r3, [pc, #132]	@ (801d210 <ip4_input+0x2dc>)
 801d18a:	695b      	ldr	r3, [r3, #20]
 801d18c:	6939      	ldr	r1, [r7, #16]
 801d18e:	4618      	mov	r0, r3
 801d190:	f000 f934 	bl	801d3fc <ip4_addr_isbroadcast_u32>
 801d194:	4603      	mov	r3, r0
 801d196:	2b00      	cmp	r3, #0
 801d198:	d10f      	bne.n	801d1ba <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d19a:	4b1d      	ldr	r3, [pc, #116]	@ (801d210 <ip4_input+0x2dc>)
 801d19c:	695b      	ldr	r3, [r3, #20]
 801d19e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d1a2:	2be0      	cmp	r3, #224	@ 0xe0
 801d1a4:	d009      	beq.n	801d1ba <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d1a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d1aa:	4619      	mov	r1, r3
 801d1ac:	6878      	ldr	r0, [r7, #4]
 801d1ae:	f7f7 fab8 	bl	8014722 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d1b2:	2102      	movs	r1, #2
 801d1b4:	6878      	ldr	r0, [r7, #4]
 801d1b6:	f7ff fd85 	bl	801ccc4 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801d1ba:	4b16      	ldr	r3, [pc, #88]	@ (801d214 <ip4_input+0x2e0>)
 801d1bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801d1c0:	3301      	adds	r3, #1
 801d1c2:	b29a      	uxth	r2, r3
 801d1c4:	4b13      	ldr	r3, [pc, #76]	@ (801d214 <ip4_input+0x2e0>)
 801d1c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801d1ca:	4b12      	ldr	r3, [pc, #72]	@ (801d214 <ip4_input+0x2e0>)
 801d1cc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d1d0:	3301      	adds	r3, #1
 801d1d2:	b29a      	uxth	r2, r3
 801d1d4:	4b0f      	ldr	r3, [pc, #60]	@ (801d214 <ip4_input+0x2e0>)
 801d1d6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d1da:	6878      	ldr	r0, [r7, #4]
 801d1dc:	f7f7 fab4 	bl	8014748 <pbuf_free>
        break;
 801d1e0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d1e2:	4b0b      	ldr	r3, [pc, #44]	@ (801d210 <ip4_input+0x2dc>)
 801d1e4:	2200      	movs	r2, #0
 801d1e6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d1e8:	4b09      	ldr	r3, [pc, #36]	@ (801d210 <ip4_input+0x2dc>)
 801d1ea:	2200      	movs	r2, #0
 801d1ec:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d1ee:	4b08      	ldr	r3, [pc, #32]	@ (801d210 <ip4_input+0x2dc>)
 801d1f0:	2200      	movs	r2, #0
 801d1f2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d1f4:	4b06      	ldr	r3, [pc, #24]	@ (801d210 <ip4_input+0x2dc>)
 801d1f6:	2200      	movs	r2, #0
 801d1f8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d1fa:	4b05      	ldr	r3, [pc, #20]	@ (801d210 <ip4_input+0x2dc>)
 801d1fc:	2200      	movs	r2, #0
 801d1fe:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d200:	4b03      	ldr	r3, [pc, #12]	@ (801d210 <ip4_input+0x2dc>)
 801d202:	2200      	movs	r2, #0
 801d204:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d206:	2300      	movs	r3, #0
}
 801d208:	4618      	mov	r0, r3
 801d20a:	3718      	adds	r7, #24
 801d20c:	46bd      	mov	sp, r7
 801d20e:	bd80      	pop	{r7, pc}
 801d210:	200270b4 	.word	0x200270b4
 801d214:	2002d2b0 	.word	0x2002d2b0

0801d218 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d218:	b580      	push	{r7, lr}
 801d21a:	b08a      	sub	sp, #40	@ 0x28
 801d21c:	af04      	add	r7, sp, #16
 801d21e:	60f8      	str	r0, [r7, #12]
 801d220:	60b9      	str	r1, [r7, #8]
 801d222:	607a      	str	r2, [r7, #4]
 801d224:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d226:	68bb      	ldr	r3, [r7, #8]
 801d228:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d009      	beq.n	801d244 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d230:	68bb      	ldr	r3, [r7, #8]
 801d232:	2b00      	cmp	r3, #0
 801d234:	d003      	beq.n	801d23e <ip4_output_if+0x26>
 801d236:	68bb      	ldr	r3, [r7, #8]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d102      	bne.n	801d244 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d240:	3304      	adds	r3, #4
 801d242:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d244:	78fa      	ldrb	r2, [r7, #3]
 801d246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d248:	9302      	str	r3, [sp, #8]
 801d24a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801d24e:	9301      	str	r3, [sp, #4]
 801d250:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d254:	9300      	str	r3, [sp, #0]
 801d256:	4613      	mov	r3, r2
 801d258:	687a      	ldr	r2, [r7, #4]
 801d25a:	6979      	ldr	r1, [r7, #20]
 801d25c:	68f8      	ldr	r0, [r7, #12]
 801d25e:	f000 f805 	bl	801d26c <ip4_output_if_src>
 801d262:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d264:	4618      	mov	r0, r3
 801d266:	3718      	adds	r7, #24
 801d268:	46bd      	mov	sp, r7
 801d26a:	bd80      	pop	{r7, pc}

0801d26c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d26c:	b580      	push	{r7, lr}
 801d26e:	b088      	sub	sp, #32
 801d270:	af00      	add	r7, sp, #0
 801d272:	60f8      	str	r0, [r7, #12]
 801d274:	60b9      	str	r1, [r7, #8]
 801d276:	607a      	str	r2, [r7, #4]
 801d278:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	7b9b      	ldrb	r3, [r3, #14]
 801d27e:	2b01      	cmp	r3, #1
 801d280:	d006      	beq.n	801d290 <ip4_output_if_src+0x24>
 801d282:	4b57      	ldr	r3, [pc, #348]	@ (801d3e0 <ip4_output_if_src+0x174>)
 801d284:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801d288:	4956      	ldr	r1, [pc, #344]	@ (801d3e4 <ip4_output_if_src+0x178>)
 801d28a:	4857      	ldr	r0, [pc, #348]	@ (801d3e8 <ip4_output_if_src+0x17c>)
 801d28c:	f002 fcae 	bl	801fbec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	2b00      	cmp	r3, #0
 801d294:	d068      	beq.n	801d368 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801d296:	2314      	movs	r3, #20
 801d298:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d29a:	2114      	movs	r1, #20
 801d29c:	68f8      	ldr	r0, [r7, #12]
 801d29e:	f7f7 f9bd 	bl	801461c <pbuf_add_header>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	d00a      	beq.n	801d2be <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801d2a8:	4b50      	ldr	r3, [pc, #320]	@ (801d3ec <ip4_output_if_src+0x180>)
 801d2aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d2ae:	3301      	adds	r3, #1
 801d2b0:	b29a      	uxth	r2, r3
 801d2b2:	4b4e      	ldr	r3, [pc, #312]	@ (801d3ec <ip4_output_if_src+0x180>)
 801d2b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d2b8:	f06f 0301 	mvn.w	r3, #1
 801d2bc:	e08c      	b.n	801d3d8 <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	685b      	ldr	r3, [r3, #4]
 801d2c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d2c4:	68fb      	ldr	r3, [r7, #12]
 801d2c6:	895b      	ldrh	r3, [r3, #10]
 801d2c8:	2b13      	cmp	r3, #19
 801d2ca:	d806      	bhi.n	801d2da <ip4_output_if_src+0x6e>
 801d2cc:	4b44      	ldr	r3, [pc, #272]	@ (801d3e0 <ip4_output_if_src+0x174>)
 801d2ce:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801d2d2:	4947      	ldr	r1, [pc, #284]	@ (801d3f0 <ip4_output_if_src+0x184>)
 801d2d4:	4844      	ldr	r0, [pc, #272]	@ (801d3e8 <ip4_output_if_src+0x17c>)
 801d2d6:	f002 fc89 	bl	801fbec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d2da:	69fb      	ldr	r3, [r7, #28]
 801d2dc:	78fa      	ldrb	r2, [r7, #3]
 801d2de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d2e0:	69fb      	ldr	r3, [r7, #28]
 801d2e2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801d2e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	681a      	ldr	r2, [r3, #0]
 801d2ec:	69fb      	ldr	r3, [r7, #28]
 801d2ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d2f0:	8b7b      	ldrh	r3, [r7, #26]
 801d2f2:	089b      	lsrs	r3, r3, #2
 801d2f4:	b29b      	uxth	r3, r3
 801d2f6:	b2db      	uxtb	r3, r3
 801d2f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d2fc:	b2da      	uxtb	r2, r3
 801d2fe:	69fb      	ldr	r3, [r7, #28]
 801d300:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d302:	69fb      	ldr	r3, [r7, #28]
 801d304:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801d308:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	891b      	ldrh	r3, [r3, #8]
 801d30e:	4618      	mov	r0, r3
 801d310:	f7f5 fd5c 	bl	8012dcc <lwip_htons>
 801d314:	4603      	mov	r3, r0
 801d316:	461a      	mov	r2, r3
 801d318:	69fb      	ldr	r3, [r7, #28]
 801d31a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d31c:	69fb      	ldr	r3, [r7, #28]
 801d31e:	2200      	movs	r2, #0
 801d320:	719a      	strb	r2, [r3, #6]
 801d322:	2200      	movs	r2, #0
 801d324:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d326:	4b33      	ldr	r3, [pc, #204]	@ (801d3f4 <ip4_output_if_src+0x188>)
 801d328:	881b      	ldrh	r3, [r3, #0]
 801d32a:	4618      	mov	r0, r3
 801d32c:	f7f5 fd4e 	bl	8012dcc <lwip_htons>
 801d330:	4603      	mov	r3, r0
 801d332:	461a      	mov	r2, r3
 801d334:	69fb      	ldr	r3, [r7, #28]
 801d336:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d338:	4b2e      	ldr	r3, [pc, #184]	@ (801d3f4 <ip4_output_if_src+0x188>)
 801d33a:	881b      	ldrh	r3, [r3, #0]
 801d33c:	3301      	adds	r3, #1
 801d33e:	b29a      	uxth	r2, r3
 801d340:	4b2c      	ldr	r3, [pc, #176]	@ (801d3f4 <ip4_output_if_src+0x188>)
 801d342:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d344:	68bb      	ldr	r3, [r7, #8]
 801d346:	2b00      	cmp	r3, #0
 801d348:	d104      	bne.n	801d354 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d34a:	4b2b      	ldr	r3, [pc, #172]	@ (801d3f8 <ip4_output_if_src+0x18c>)
 801d34c:	681a      	ldr	r2, [r3, #0]
 801d34e:	69fb      	ldr	r3, [r7, #28]
 801d350:	60da      	str	r2, [r3, #12]
 801d352:	e003      	b.n	801d35c <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d354:	68bb      	ldr	r3, [r7, #8]
 801d356:	681a      	ldr	r2, [r3, #0]
 801d358:	69fb      	ldr	r3, [r7, #28]
 801d35a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d35c:	69fb      	ldr	r3, [r7, #28]
 801d35e:	2200      	movs	r2, #0
 801d360:	729a      	strb	r2, [r3, #10]
 801d362:	2200      	movs	r2, #0
 801d364:	72da      	strb	r2, [r3, #11]
 801d366:	e017      	b.n	801d398 <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	895b      	ldrh	r3, [r3, #10]
 801d36c:	2b13      	cmp	r3, #19
 801d36e:	d80a      	bhi.n	801d386 <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801d370:	4b1e      	ldr	r3, [pc, #120]	@ (801d3ec <ip4_output_if_src+0x180>)
 801d372:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d376:	3301      	adds	r3, #1
 801d378:	b29a      	uxth	r2, r3
 801d37a:	4b1c      	ldr	r3, [pc, #112]	@ (801d3ec <ip4_output_if_src+0x180>)
 801d37c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d380:	f06f 0301 	mvn.w	r3, #1
 801d384:	e028      	b.n	801d3d8 <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	685b      	ldr	r3, [r3, #4]
 801d38a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d38c:	69fb      	ldr	r3, [r7, #28]
 801d38e:	691b      	ldr	r3, [r3, #16]
 801d390:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d392:	f107 0314 	add.w	r3, r7, #20
 801d396:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801d398:	4b14      	ldr	r3, [pc, #80]	@ (801d3ec <ip4_output_if_src+0x180>)
 801d39a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d39e:	3301      	adds	r3, #1
 801d3a0:	b29a      	uxth	r2, r3
 801d3a2:	4b12      	ldr	r3, [pc, #72]	@ (801d3ec <ip4_output_if_src+0x180>)
 801d3a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d3aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d00c      	beq.n	801d3ca <ip4_output_if_src+0x15e>
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	891a      	ldrh	r2, [r3, #8]
 801d3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d3b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d3b8:	429a      	cmp	r2, r3
 801d3ba:	d906      	bls.n	801d3ca <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801d3bc:	687a      	ldr	r2, [r7, #4]
 801d3be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d3c0:	68f8      	ldr	r0, [r7, #12]
 801d3c2:	f000 fd7b 	bl	801debc <ip4_frag>
 801d3c6:	4603      	mov	r3, r0
 801d3c8:	e006      	b.n	801d3d8 <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d3cc:	695b      	ldr	r3, [r3, #20]
 801d3ce:	687a      	ldr	r2, [r7, #4]
 801d3d0:	68f9      	ldr	r1, [r7, #12]
 801d3d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d3d4:	4798      	blx	r3
 801d3d6:	4603      	mov	r3, r0
}
 801d3d8:	4618      	mov	r0, r3
 801d3da:	3720      	adds	r7, #32
 801d3dc:	46bd      	mov	sp, r7
 801d3de:	bd80      	pop	{r7, pc}
 801d3e0:	08023e84 	.word	0x08023e84
 801d3e4:	08023eb8 	.word	0x08023eb8
 801d3e8:	08023ec4 	.word	0x08023ec4
 801d3ec:	2002d2b0 	.word	0x2002d2b0
 801d3f0:	08023eec 	.word	0x08023eec
 801d3f4:	2002d4fe 	.word	0x2002d4fe
 801d3f8:	08024960 	.word	0x08024960

0801d3fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d3fc:	b480      	push	{r7}
 801d3fe:	b085      	sub	sp, #20
 801d400:	af00      	add	r7, sp, #0
 801d402:	6078      	str	r0, [r7, #4]
 801d404:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d410:	d002      	beq.n	801d418 <ip4_addr_isbroadcast_u32+0x1c>
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d101      	bne.n	801d41c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d418:	2301      	movs	r3, #1
 801d41a:	e02a      	b.n	801d472 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d41c:	683b      	ldr	r3, [r7, #0]
 801d41e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d422:	f003 0302 	and.w	r3, r3, #2
 801d426:	2b00      	cmp	r3, #0
 801d428:	d101      	bne.n	801d42e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d42a:	2300      	movs	r3, #0
 801d42c:	e021      	b.n	801d472 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d42e:	683b      	ldr	r3, [r7, #0]
 801d430:	3304      	adds	r3, #4
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	687a      	ldr	r2, [r7, #4]
 801d436:	429a      	cmp	r2, r3
 801d438:	d101      	bne.n	801d43e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d43a:	2300      	movs	r3, #0
 801d43c:	e019      	b.n	801d472 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d43e:	68fa      	ldr	r2, [r7, #12]
 801d440:	683b      	ldr	r3, [r7, #0]
 801d442:	3304      	adds	r3, #4
 801d444:	681b      	ldr	r3, [r3, #0]
 801d446:	405a      	eors	r2, r3
 801d448:	683b      	ldr	r3, [r7, #0]
 801d44a:	3308      	adds	r3, #8
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	4013      	ands	r3, r2
 801d450:	2b00      	cmp	r3, #0
 801d452:	d10d      	bne.n	801d470 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d454:	683b      	ldr	r3, [r7, #0]
 801d456:	3308      	adds	r3, #8
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	43da      	mvns	r2, r3
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d460:	683b      	ldr	r3, [r7, #0]
 801d462:	3308      	adds	r3, #8
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d468:	429a      	cmp	r2, r3
 801d46a:	d101      	bne.n	801d470 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d46c:	2301      	movs	r3, #1
 801d46e:	e000      	b.n	801d472 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d470:	2300      	movs	r3, #0
  }
}
 801d472:	4618      	mov	r0, r3
 801d474:	3714      	adds	r7, #20
 801d476:	46bd      	mov	sp, r7
 801d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d47c:	4770      	bx	lr
	...

0801d480 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d480:	b580      	push	{r7, lr}
 801d482:	b084      	sub	sp, #16
 801d484:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d486:	2300      	movs	r3, #0
 801d488:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d48a:	4b12      	ldr	r3, [pc, #72]	@ (801d4d4 <ip_reass_tmr+0x54>)
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d490:	e018      	b.n	801d4c4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d492:	68fb      	ldr	r3, [r7, #12]
 801d494:	7fdb      	ldrb	r3, [r3, #31]
 801d496:	2b00      	cmp	r3, #0
 801d498:	d00b      	beq.n	801d4b2 <ip_reass_tmr+0x32>
      r->timer--;
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	7fdb      	ldrb	r3, [r3, #31]
 801d49e:	3b01      	subs	r3, #1
 801d4a0:	b2da      	uxtb	r2, r3
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	60fb      	str	r3, [r7, #12]
 801d4b0:	e008      	b.n	801d4c4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d4b6:	68fb      	ldr	r3, [r7, #12]
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d4bc:	68b9      	ldr	r1, [r7, #8]
 801d4be:	6878      	ldr	r0, [r7, #4]
 801d4c0:	f000 f80a 	bl	801d4d8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d1e3      	bne.n	801d492 <ip_reass_tmr+0x12>
    }
  }
}
 801d4ca:	bf00      	nop
 801d4cc:	bf00      	nop
 801d4ce:	3710      	adds	r7, #16
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	bd80      	pop	{r7, pc}
 801d4d4:	2002d500 	.word	0x2002d500

0801d4d8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d4d8:	b580      	push	{r7, lr}
 801d4da:	b088      	sub	sp, #32
 801d4dc:	af00      	add	r7, sp, #0
 801d4de:	6078      	str	r0, [r7, #4]
 801d4e0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d4e6:	683a      	ldr	r2, [r7, #0]
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	429a      	cmp	r2, r3
 801d4ec:	d105      	bne.n	801d4fa <ip_reass_free_complete_datagram+0x22>
 801d4ee:	4b45      	ldr	r3, [pc, #276]	@ (801d604 <ip_reass_free_complete_datagram+0x12c>)
 801d4f0:	22ab      	movs	r2, #171	@ 0xab
 801d4f2:	4945      	ldr	r1, [pc, #276]	@ (801d608 <ip_reass_free_complete_datagram+0x130>)
 801d4f4:	4845      	ldr	r0, [pc, #276]	@ (801d60c <ip_reass_free_complete_datagram+0x134>)
 801d4f6:	f002 fb79 	bl	801fbec <iprintf>
  if (prev != NULL) {
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d00a      	beq.n	801d516 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d500:	683b      	ldr	r3, [r7, #0]
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	687a      	ldr	r2, [r7, #4]
 801d506:	429a      	cmp	r2, r3
 801d508:	d005      	beq.n	801d516 <ip_reass_free_complete_datagram+0x3e>
 801d50a:	4b3e      	ldr	r3, [pc, #248]	@ (801d604 <ip_reass_free_complete_datagram+0x12c>)
 801d50c:	22ad      	movs	r2, #173	@ 0xad
 801d50e:	4940      	ldr	r1, [pc, #256]	@ (801d610 <ip_reass_free_complete_datagram+0x138>)
 801d510:	483e      	ldr	r0, [pc, #248]	@ (801d60c <ip_reass_free_complete_datagram+0x134>)
 801d512:	f002 fb6b 	bl	801fbec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	685b      	ldr	r3, [r3, #4]
 801d51a:	685b      	ldr	r3, [r3, #4]
 801d51c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d51e:	697b      	ldr	r3, [r7, #20]
 801d520:	889b      	ldrh	r3, [r3, #4]
 801d522:	b29b      	uxth	r3, r3
 801d524:	2b00      	cmp	r3, #0
 801d526:	d12a      	bne.n	801d57e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	685b      	ldr	r3, [r3, #4]
 801d52c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d52e:	697b      	ldr	r3, [r7, #20]
 801d530:	681a      	ldr	r2, [r3, #0]
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d536:	69bb      	ldr	r3, [r7, #24]
 801d538:	6858      	ldr	r0, [r3, #4]
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	3308      	adds	r3, #8
 801d53e:	2214      	movs	r2, #20
 801d540:	4619      	mov	r1, r3
 801d542:	f002 fd7e 	bl	8020042 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d546:	2101      	movs	r1, #1
 801d548:	69b8      	ldr	r0, [r7, #24]
 801d54a:	f7ff fbcb 	bl	801cce4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d54e:	69b8      	ldr	r0, [r7, #24]
 801d550:	f7f7 f988 	bl	8014864 <pbuf_clen>
 801d554:	4603      	mov	r3, r0
 801d556:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d558:	8bfa      	ldrh	r2, [r7, #30]
 801d55a:	8a7b      	ldrh	r3, [r7, #18]
 801d55c:	4413      	add	r3, r2
 801d55e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d562:	db05      	blt.n	801d570 <ip_reass_free_complete_datagram+0x98>
 801d564:	4b27      	ldr	r3, [pc, #156]	@ (801d604 <ip_reass_free_complete_datagram+0x12c>)
 801d566:	22bc      	movs	r2, #188	@ 0xbc
 801d568:	492a      	ldr	r1, [pc, #168]	@ (801d614 <ip_reass_free_complete_datagram+0x13c>)
 801d56a:	4828      	ldr	r0, [pc, #160]	@ (801d60c <ip_reass_free_complete_datagram+0x134>)
 801d56c:	f002 fb3e 	bl	801fbec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d570:	8bfa      	ldrh	r2, [r7, #30]
 801d572:	8a7b      	ldrh	r3, [r7, #18]
 801d574:	4413      	add	r3, r2
 801d576:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d578:	69b8      	ldr	r0, [r7, #24]
 801d57a:	f7f7 f8e5 	bl	8014748 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	685b      	ldr	r3, [r3, #4]
 801d582:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d584:	e01f      	b.n	801d5c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d586:	69bb      	ldr	r3, [r7, #24]
 801d588:	685b      	ldr	r3, [r3, #4]
 801d58a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d58c:	69bb      	ldr	r3, [r7, #24]
 801d58e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d590:	697b      	ldr	r3, [r7, #20]
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d596:	68f8      	ldr	r0, [r7, #12]
 801d598:	f7f7 f964 	bl	8014864 <pbuf_clen>
 801d59c:	4603      	mov	r3, r0
 801d59e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d5a0:	8bfa      	ldrh	r2, [r7, #30]
 801d5a2:	8a7b      	ldrh	r3, [r7, #18]
 801d5a4:	4413      	add	r3, r2
 801d5a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d5aa:	db05      	blt.n	801d5b8 <ip_reass_free_complete_datagram+0xe0>
 801d5ac:	4b15      	ldr	r3, [pc, #84]	@ (801d604 <ip_reass_free_complete_datagram+0x12c>)
 801d5ae:	22cc      	movs	r2, #204	@ 0xcc
 801d5b0:	4918      	ldr	r1, [pc, #96]	@ (801d614 <ip_reass_free_complete_datagram+0x13c>)
 801d5b2:	4816      	ldr	r0, [pc, #88]	@ (801d60c <ip_reass_free_complete_datagram+0x134>)
 801d5b4:	f002 fb1a 	bl	801fbec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d5b8:	8bfa      	ldrh	r2, [r7, #30]
 801d5ba:	8a7b      	ldrh	r3, [r7, #18]
 801d5bc:	4413      	add	r3, r2
 801d5be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d5c0:	68f8      	ldr	r0, [r7, #12]
 801d5c2:	f7f7 f8c1 	bl	8014748 <pbuf_free>
  while (p != NULL) {
 801d5c6:	69bb      	ldr	r3, [r7, #24]
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	d1dc      	bne.n	801d586 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d5cc:	6839      	ldr	r1, [r7, #0]
 801d5ce:	6878      	ldr	r0, [r7, #4]
 801d5d0:	f000 f8ca 	bl	801d768 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d5d4:	4b10      	ldr	r3, [pc, #64]	@ (801d618 <ip_reass_free_complete_datagram+0x140>)
 801d5d6:	881b      	ldrh	r3, [r3, #0]
 801d5d8:	8bfa      	ldrh	r2, [r7, #30]
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	d905      	bls.n	801d5ea <ip_reass_free_complete_datagram+0x112>
 801d5de:	4b09      	ldr	r3, [pc, #36]	@ (801d604 <ip_reass_free_complete_datagram+0x12c>)
 801d5e0:	22d2      	movs	r2, #210	@ 0xd2
 801d5e2:	490e      	ldr	r1, [pc, #56]	@ (801d61c <ip_reass_free_complete_datagram+0x144>)
 801d5e4:	4809      	ldr	r0, [pc, #36]	@ (801d60c <ip_reass_free_complete_datagram+0x134>)
 801d5e6:	f002 fb01 	bl	801fbec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d5ea:	4b0b      	ldr	r3, [pc, #44]	@ (801d618 <ip_reass_free_complete_datagram+0x140>)
 801d5ec:	881a      	ldrh	r2, [r3, #0]
 801d5ee:	8bfb      	ldrh	r3, [r7, #30]
 801d5f0:	1ad3      	subs	r3, r2, r3
 801d5f2:	b29a      	uxth	r2, r3
 801d5f4:	4b08      	ldr	r3, [pc, #32]	@ (801d618 <ip_reass_free_complete_datagram+0x140>)
 801d5f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d5f8:	8bfb      	ldrh	r3, [r7, #30]
}
 801d5fa:	4618      	mov	r0, r3
 801d5fc:	3720      	adds	r7, #32
 801d5fe:	46bd      	mov	sp, r7
 801d600:	bd80      	pop	{r7, pc}
 801d602:	bf00      	nop
 801d604:	08023f1c 	.word	0x08023f1c
 801d608:	08023f58 	.word	0x08023f58
 801d60c:	08023f64 	.word	0x08023f64
 801d610:	08023f8c 	.word	0x08023f8c
 801d614:	08023fa0 	.word	0x08023fa0
 801d618:	2002d504 	.word	0x2002d504
 801d61c:	08023fc0 	.word	0x08023fc0

0801d620 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d620:	b580      	push	{r7, lr}
 801d622:	b08a      	sub	sp, #40	@ 0x28
 801d624:	af00      	add	r7, sp, #0
 801d626:	6078      	str	r0, [r7, #4]
 801d628:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d62a:	2300      	movs	r3, #0
 801d62c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d62e:	2300      	movs	r3, #0
 801d630:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d632:	2300      	movs	r3, #0
 801d634:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d636:	2300      	movs	r3, #0
 801d638:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d63a:	2300      	movs	r3, #0
 801d63c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d63e:	4b28      	ldr	r3, [pc, #160]	@ (801d6e0 <ip_reass_remove_oldest_datagram+0xc0>)
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801d644:	e030      	b.n	801d6a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d648:	695a      	ldr	r2, [r3, #20]
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	68db      	ldr	r3, [r3, #12]
 801d64e:	429a      	cmp	r2, r3
 801d650:	d10c      	bne.n	801d66c <ip_reass_remove_oldest_datagram+0x4c>
 801d652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d654:	699a      	ldr	r2, [r3, #24]
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	691b      	ldr	r3, [r3, #16]
 801d65a:	429a      	cmp	r2, r3
 801d65c:	d106      	bne.n	801d66c <ip_reass_remove_oldest_datagram+0x4c>
 801d65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d660:	899a      	ldrh	r2, [r3, #12]
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	889b      	ldrh	r3, [r3, #4]
 801d666:	b29b      	uxth	r3, r3
 801d668:	429a      	cmp	r2, r3
 801d66a:	d014      	beq.n	801d696 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d66c:	693b      	ldr	r3, [r7, #16]
 801d66e:	3301      	adds	r3, #1
 801d670:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d672:	6a3b      	ldr	r3, [r7, #32]
 801d674:	2b00      	cmp	r3, #0
 801d676:	d104      	bne.n	801d682 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d67a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d67c:	69fb      	ldr	r3, [r7, #28]
 801d67e:	61bb      	str	r3, [r7, #24]
 801d680:	e009      	b.n	801d696 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d684:	7fda      	ldrb	r2, [r3, #31]
 801d686:	6a3b      	ldr	r3, [r7, #32]
 801d688:	7fdb      	ldrb	r3, [r3, #31]
 801d68a:	429a      	cmp	r2, r3
 801d68c:	d803      	bhi.n	801d696 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d690:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d692:	69fb      	ldr	r3, [r7, #28]
 801d694:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d001      	beq.n	801d6a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801d6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d1cb      	bne.n	801d646 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d6ae:	6a3b      	ldr	r3, [r7, #32]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d008      	beq.n	801d6c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d6b4:	69b9      	ldr	r1, [r7, #24]
 801d6b6:	6a38      	ldr	r0, [r7, #32]
 801d6b8:	f7ff ff0e 	bl	801d4d8 <ip_reass_free_complete_datagram>
 801d6bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d6be:	697a      	ldr	r2, [r7, #20]
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	4413      	add	r3, r2
 801d6c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d6c6:	697a      	ldr	r2, [r7, #20]
 801d6c8:	683b      	ldr	r3, [r7, #0]
 801d6ca:	429a      	cmp	r2, r3
 801d6cc:	da02      	bge.n	801d6d4 <ip_reass_remove_oldest_datagram+0xb4>
 801d6ce:	693b      	ldr	r3, [r7, #16]
 801d6d0:	2b01      	cmp	r3, #1
 801d6d2:	dcac      	bgt.n	801d62e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d6d4:	697b      	ldr	r3, [r7, #20]
}
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	3728      	adds	r7, #40	@ 0x28
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	bd80      	pop	{r7, pc}
 801d6de:	bf00      	nop
 801d6e0:	2002d500 	.word	0x2002d500

0801d6e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d6e4:	b580      	push	{r7, lr}
 801d6e6:	b084      	sub	sp, #16
 801d6e8:	af00      	add	r7, sp, #0
 801d6ea:	6078      	str	r0, [r7, #4]
 801d6ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d6ee:	2004      	movs	r0, #4
 801d6f0:	f7f6 f90a 	bl	8013908 <memp_malloc>
 801d6f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d116      	bne.n	801d72a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d6fc:	6839      	ldr	r1, [r7, #0]
 801d6fe:	6878      	ldr	r0, [r7, #4]
 801d700:	f7ff ff8e 	bl	801d620 <ip_reass_remove_oldest_datagram>
 801d704:	4602      	mov	r2, r0
 801d706:	683b      	ldr	r3, [r7, #0]
 801d708:	4293      	cmp	r3, r2
 801d70a:	dc03      	bgt.n	801d714 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d70c:	2004      	movs	r0, #4
 801d70e:	f7f6 f8fb 	bl	8013908 <memp_malloc>
 801d712:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	2b00      	cmp	r3, #0
 801d718:	d107      	bne.n	801d72a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801d71a:	4b11      	ldr	r3, [pc, #68]	@ (801d760 <ip_reass_enqueue_new_datagram+0x7c>)
 801d71c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801d71e:	3301      	adds	r3, #1
 801d720:	b29a      	uxth	r2, r3
 801d722:	4b0f      	ldr	r3, [pc, #60]	@ (801d760 <ip_reass_enqueue_new_datagram+0x7c>)
 801d724:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d726:	2300      	movs	r3, #0
 801d728:	e016      	b.n	801d758 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d72a:	2220      	movs	r2, #32
 801d72c:	2100      	movs	r1, #0
 801d72e:	68f8      	ldr	r0, [r7, #12]
 801d730:	f002 fbb4 	bl	801fe9c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	220f      	movs	r2, #15
 801d738:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d73a:	4b0a      	ldr	r3, [pc, #40]	@ (801d764 <ip_reass_enqueue_new_datagram+0x80>)
 801d73c:	681a      	ldr	r2, [r3, #0]
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d742:	4a08      	ldr	r2, [pc, #32]	@ (801d764 <ip_reass_enqueue_new_datagram+0x80>)
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	3308      	adds	r3, #8
 801d74c:	2214      	movs	r2, #20
 801d74e:	6879      	ldr	r1, [r7, #4]
 801d750:	4618      	mov	r0, r3
 801d752:	f002 fc76 	bl	8020042 <memcpy>
  return ipr;
 801d756:	68fb      	ldr	r3, [r7, #12]
}
 801d758:	4618      	mov	r0, r3
 801d75a:	3710      	adds	r7, #16
 801d75c:	46bd      	mov	sp, r7
 801d75e:	bd80      	pop	{r7, pc}
 801d760:	2002d2b0 	.word	0x2002d2b0
 801d764:	2002d500 	.word	0x2002d500

0801d768 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d768:	b580      	push	{r7, lr}
 801d76a:	b082      	sub	sp, #8
 801d76c:	af00      	add	r7, sp, #0
 801d76e:	6078      	str	r0, [r7, #4]
 801d770:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d772:	4b10      	ldr	r3, [pc, #64]	@ (801d7b4 <ip_reass_dequeue_datagram+0x4c>)
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	687a      	ldr	r2, [r7, #4]
 801d778:	429a      	cmp	r2, r3
 801d77a:	d104      	bne.n	801d786 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	4a0c      	ldr	r2, [pc, #48]	@ (801d7b4 <ip_reass_dequeue_datagram+0x4c>)
 801d782:	6013      	str	r3, [r2, #0]
 801d784:	e00d      	b.n	801d7a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	2b00      	cmp	r3, #0
 801d78a:	d106      	bne.n	801d79a <ip_reass_dequeue_datagram+0x32>
 801d78c:	4b0a      	ldr	r3, [pc, #40]	@ (801d7b8 <ip_reass_dequeue_datagram+0x50>)
 801d78e:	f240 1245 	movw	r2, #325	@ 0x145
 801d792:	490a      	ldr	r1, [pc, #40]	@ (801d7bc <ip_reass_dequeue_datagram+0x54>)
 801d794:	480a      	ldr	r0, [pc, #40]	@ (801d7c0 <ip_reass_dequeue_datagram+0x58>)
 801d796:	f002 fa29 	bl	801fbec <iprintf>
    prev->next = ipr->next;
 801d79a:	687b      	ldr	r3, [r7, #4]
 801d79c:	681a      	ldr	r2, [r3, #0]
 801d79e:	683b      	ldr	r3, [r7, #0]
 801d7a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d7a2:	6879      	ldr	r1, [r7, #4]
 801d7a4:	2004      	movs	r0, #4
 801d7a6:	f7f6 f92b 	bl	8013a00 <memp_free>
}
 801d7aa:	bf00      	nop
 801d7ac:	3708      	adds	r7, #8
 801d7ae:	46bd      	mov	sp, r7
 801d7b0:	bd80      	pop	{r7, pc}
 801d7b2:	bf00      	nop
 801d7b4:	2002d500 	.word	0x2002d500
 801d7b8:	08023f1c 	.word	0x08023f1c
 801d7bc:	08023fe4 	.word	0x08023fe4
 801d7c0:	08023f64 	.word	0x08023f64

0801d7c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d7c4:	b580      	push	{r7, lr}
 801d7c6:	b08c      	sub	sp, #48	@ 0x30
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	60f8      	str	r0, [r7, #12]
 801d7cc:	60b9      	str	r1, [r7, #8]
 801d7ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d7d4:	2301      	movs	r3, #1
 801d7d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d7d8:	68bb      	ldr	r3, [r7, #8]
 801d7da:	685b      	ldr	r3, [r3, #4]
 801d7dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d7de:	69fb      	ldr	r3, [r7, #28]
 801d7e0:	885b      	ldrh	r3, [r3, #2]
 801d7e2:	b29b      	uxth	r3, r3
 801d7e4:	4618      	mov	r0, r3
 801d7e6:	f7f5 faf1 	bl	8012dcc <lwip_htons>
 801d7ea:	4603      	mov	r3, r0
 801d7ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d7ee:	69fb      	ldr	r3, [r7, #28]
 801d7f0:	781b      	ldrb	r3, [r3, #0]
 801d7f2:	f003 030f 	and.w	r3, r3, #15
 801d7f6:	b2db      	uxtb	r3, r3
 801d7f8:	009b      	lsls	r3, r3, #2
 801d7fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d7fc:	7e7b      	ldrb	r3, [r7, #25]
 801d7fe:	b29b      	uxth	r3, r3
 801d800:	8b7a      	ldrh	r2, [r7, #26]
 801d802:	429a      	cmp	r2, r3
 801d804:	d202      	bcs.n	801d80c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d80a:	e135      	b.n	801da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d80c:	7e7b      	ldrb	r3, [r7, #25]
 801d80e:	b29b      	uxth	r3, r3
 801d810:	8b7a      	ldrh	r2, [r7, #26]
 801d812:	1ad3      	subs	r3, r2, r3
 801d814:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d816:	69fb      	ldr	r3, [r7, #28]
 801d818:	88db      	ldrh	r3, [r3, #6]
 801d81a:	b29b      	uxth	r3, r3
 801d81c:	4618      	mov	r0, r3
 801d81e:	f7f5 fad5 	bl	8012dcc <lwip_htons>
 801d822:	4603      	mov	r3, r0
 801d824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d828:	b29b      	uxth	r3, r3
 801d82a:	00db      	lsls	r3, r3, #3
 801d82c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d82e:	68bb      	ldr	r3, [r7, #8]
 801d830:	685b      	ldr	r3, [r3, #4]
 801d832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801d834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d836:	2200      	movs	r2, #0
 801d838:	701a      	strb	r2, [r3, #0]
 801d83a:	2200      	movs	r2, #0
 801d83c:	705a      	strb	r2, [r3, #1]
 801d83e:	2200      	movs	r2, #0
 801d840:	709a      	strb	r2, [r3, #2]
 801d842:	2200      	movs	r2, #0
 801d844:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d848:	8afa      	ldrh	r2, [r7, #22]
 801d84a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d84c:	8afa      	ldrh	r2, [r7, #22]
 801d84e:	8b7b      	ldrh	r3, [r7, #26]
 801d850:	4413      	add	r3, r2
 801d852:	b29a      	uxth	r2, r3
 801d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d856:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d85a:	88db      	ldrh	r3, [r3, #6]
 801d85c:	b29b      	uxth	r3, r3
 801d85e:	8afa      	ldrh	r2, [r7, #22]
 801d860:	429a      	cmp	r2, r3
 801d862:	d902      	bls.n	801d86a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d868:	e106      	b.n	801da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	685b      	ldr	r3, [r3, #4]
 801d86e:	627b      	str	r3, [r7, #36]	@ 0x24
 801d870:	e068      	b.n	801d944 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d874:	685b      	ldr	r3, [r3, #4]
 801d876:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d87a:	889b      	ldrh	r3, [r3, #4]
 801d87c:	b29a      	uxth	r2, r3
 801d87e:	693b      	ldr	r3, [r7, #16]
 801d880:	889b      	ldrh	r3, [r3, #4]
 801d882:	b29b      	uxth	r3, r3
 801d884:	429a      	cmp	r2, r3
 801d886:	d235      	bcs.n	801d8f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d88a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d88c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d890:	2b00      	cmp	r3, #0
 801d892:	d020      	beq.n	801d8d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d896:	889b      	ldrh	r3, [r3, #4]
 801d898:	b29a      	uxth	r2, r3
 801d89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d89c:	88db      	ldrh	r3, [r3, #6]
 801d89e:	b29b      	uxth	r3, r3
 801d8a0:	429a      	cmp	r2, r3
 801d8a2:	d307      	bcc.n	801d8b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8a6:	88db      	ldrh	r3, [r3, #6]
 801d8a8:	b29a      	uxth	r2, r3
 801d8aa:	693b      	ldr	r3, [r7, #16]
 801d8ac:	889b      	ldrh	r3, [r3, #4]
 801d8ae:	b29b      	uxth	r3, r3
 801d8b0:	429a      	cmp	r2, r3
 801d8b2:	d902      	bls.n	801d8ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d8b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d8b8:	e0de      	b.n	801da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8bc:	68ba      	ldr	r2, [r7, #8]
 801d8be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8c2:	88db      	ldrh	r3, [r3, #6]
 801d8c4:	b29a      	uxth	r2, r3
 801d8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8c8:	889b      	ldrh	r3, [r3, #4]
 801d8ca:	b29b      	uxth	r3, r3
 801d8cc:	429a      	cmp	r2, r3
 801d8ce:	d03d      	beq.n	801d94c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d8d0:	2300      	movs	r3, #0
 801d8d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d8d4:	e03a      	b.n	801d94c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8d8:	88db      	ldrh	r3, [r3, #6]
 801d8da:	b29a      	uxth	r2, r3
 801d8dc:	693b      	ldr	r3, [r7, #16]
 801d8de:	889b      	ldrh	r3, [r3, #4]
 801d8e0:	b29b      	uxth	r3, r3
 801d8e2:	429a      	cmp	r2, r3
 801d8e4:	d902      	bls.n	801d8ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d8e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d8ea:	e0c5      	b.n	801da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	68ba      	ldr	r2, [r7, #8]
 801d8f0:	605a      	str	r2, [r3, #4]
      break;
 801d8f2:	e02b      	b.n	801d94c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8f6:	889b      	ldrh	r3, [r3, #4]
 801d8f8:	b29a      	uxth	r2, r3
 801d8fa:	693b      	ldr	r3, [r7, #16]
 801d8fc:	889b      	ldrh	r3, [r3, #4]
 801d8fe:	b29b      	uxth	r3, r3
 801d900:	429a      	cmp	r2, r3
 801d902:	d102      	bne.n	801d90a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d908:	e0b6      	b.n	801da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d90c:	889b      	ldrh	r3, [r3, #4]
 801d90e:	b29a      	uxth	r2, r3
 801d910:	693b      	ldr	r3, [r7, #16]
 801d912:	88db      	ldrh	r3, [r3, #6]
 801d914:	b29b      	uxth	r3, r3
 801d916:	429a      	cmp	r2, r3
 801d918:	d202      	bcs.n	801d920 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d91a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d91e:	e0ab      	b.n	801da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d922:	2b00      	cmp	r3, #0
 801d924:	d009      	beq.n	801d93a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d928:	88db      	ldrh	r3, [r3, #6]
 801d92a:	b29a      	uxth	r2, r3
 801d92c:	693b      	ldr	r3, [r7, #16]
 801d92e:	889b      	ldrh	r3, [r3, #4]
 801d930:	b29b      	uxth	r3, r3
 801d932:	429a      	cmp	r2, r3
 801d934:	d001      	beq.n	801d93a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d936:	2300      	movs	r3, #0
 801d938:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d93a:	693b      	ldr	r3, [r7, #16]
 801d93c:	681b      	ldr	r3, [r3, #0]
 801d93e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801d940:	693b      	ldr	r3, [r7, #16]
 801d942:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801d944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d946:	2b00      	cmp	r3, #0
 801d948:	d193      	bne.n	801d872 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d94a:	e000      	b.n	801d94e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d94c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d950:	2b00      	cmp	r3, #0
 801d952:	d12d      	bne.n	801d9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d956:	2b00      	cmp	r3, #0
 801d958:	d01c      	beq.n	801d994 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d95c:	88db      	ldrh	r3, [r3, #6]
 801d95e:	b29a      	uxth	r2, r3
 801d960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d962:	889b      	ldrh	r3, [r3, #4]
 801d964:	b29b      	uxth	r3, r3
 801d966:	429a      	cmp	r2, r3
 801d968:	d906      	bls.n	801d978 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d96a:	4b45      	ldr	r3, [pc, #276]	@ (801da80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d96c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801d970:	4944      	ldr	r1, [pc, #272]	@ (801da84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d972:	4845      	ldr	r0, [pc, #276]	@ (801da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d974:	f002 f93a 	bl	801fbec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d97a:	68ba      	ldr	r2, [r7, #8]
 801d97c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d980:	88db      	ldrh	r3, [r3, #6]
 801d982:	b29a      	uxth	r2, r3
 801d984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d986:	889b      	ldrh	r3, [r3, #4]
 801d988:	b29b      	uxth	r3, r3
 801d98a:	429a      	cmp	r2, r3
 801d98c:	d010      	beq.n	801d9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d98e:	2300      	movs	r3, #0
 801d990:	623b      	str	r3, [r7, #32]
 801d992:	e00d      	b.n	801d9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	685b      	ldr	r3, [r3, #4]
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d006      	beq.n	801d9aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d99c:	4b38      	ldr	r3, [pc, #224]	@ (801da80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d99e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801d9a2:	493a      	ldr	r1, [pc, #232]	@ (801da8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d9a4:	4838      	ldr	r0, [pc, #224]	@ (801da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d9a6:	f002 f921 	bl	801fbec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	68ba      	ldr	r2, [r7, #8]
 801d9ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d105      	bne.n	801d9c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d9b6:	68fb      	ldr	r3, [r7, #12]
 801d9b8:	7f9b      	ldrb	r3, [r3, #30]
 801d9ba:	f003 0301 	and.w	r3, r3, #1
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d059      	beq.n	801da76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d9c2:	6a3b      	ldr	r3, [r7, #32]
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d04f      	beq.n	801da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	685b      	ldr	r3, [r3, #4]
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d006      	beq.n	801d9de <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	685b      	ldr	r3, [r3, #4]
 801d9d4:	685b      	ldr	r3, [r3, #4]
 801d9d6:	889b      	ldrh	r3, [r3, #4]
 801d9d8:	b29b      	uxth	r3, r3
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	d002      	beq.n	801d9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d9de:	2300      	movs	r3, #0
 801d9e0:	623b      	str	r3, [r7, #32]
 801d9e2:	e041      	b.n	801da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801d9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801d9ee:	e012      	b.n	801da16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9f2:	685b      	ldr	r3, [r3, #4]
 801d9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801d9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9f8:	88db      	ldrh	r3, [r3, #6]
 801d9fa:	b29a      	uxth	r2, r3
 801d9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9fe:	889b      	ldrh	r3, [r3, #4]
 801da00:	b29b      	uxth	r3, r3
 801da02:	429a      	cmp	r2, r3
 801da04:	d002      	beq.n	801da0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801da06:	2300      	movs	r3, #0
 801da08:	623b      	str	r3, [r7, #32]
            break;
 801da0a:	e007      	b.n	801da1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801da0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da0e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801da10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801da16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d1e9      	bne.n	801d9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801da1c:	6a3b      	ldr	r3, [r7, #32]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d022      	beq.n	801da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	685b      	ldr	r3, [r3, #4]
 801da26:	2b00      	cmp	r3, #0
 801da28:	d106      	bne.n	801da38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801da2a:	4b15      	ldr	r3, [pc, #84]	@ (801da80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801da2c:	f240 12df 	movw	r2, #479	@ 0x1df
 801da30:	4917      	ldr	r1, [pc, #92]	@ (801da90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801da32:	4815      	ldr	r0, [pc, #84]	@ (801da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801da34:	f002 f8da 	bl	801fbec <iprintf>
          LWIP_ASSERT("sanity check",
 801da38:	68fb      	ldr	r3, [r7, #12]
 801da3a:	685b      	ldr	r3, [r3, #4]
 801da3c:	685b      	ldr	r3, [r3, #4]
 801da3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801da40:	429a      	cmp	r2, r3
 801da42:	d106      	bne.n	801da52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801da44:	4b0e      	ldr	r3, [pc, #56]	@ (801da80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801da46:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801da4a:	4911      	ldr	r1, [pc, #68]	@ (801da90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801da4c:	480e      	ldr	r0, [pc, #56]	@ (801da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801da4e:	f002 f8cd 	bl	801fbec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801da52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	2b00      	cmp	r3, #0
 801da58:	d006      	beq.n	801da68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801da5a:	4b09      	ldr	r3, [pc, #36]	@ (801da80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801da5c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801da60:	490c      	ldr	r1, [pc, #48]	@ (801da94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801da62:	4809      	ldr	r0, [pc, #36]	@ (801da88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801da64:	f002 f8c2 	bl	801fbec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801da68:	6a3b      	ldr	r3, [r7, #32]
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	bf14      	ite	ne
 801da6e:	2301      	movne	r3, #1
 801da70:	2300      	moveq	r3, #0
 801da72:	b2db      	uxtb	r3, r3
 801da74:	e000      	b.n	801da78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801da76:	2300      	movs	r3, #0
}
 801da78:	4618      	mov	r0, r3
 801da7a:	3730      	adds	r7, #48	@ 0x30
 801da7c:	46bd      	mov	sp, r7
 801da7e:	bd80      	pop	{r7, pc}
 801da80:	08023f1c 	.word	0x08023f1c
 801da84:	08024000 	.word	0x08024000
 801da88:	08023f64 	.word	0x08023f64
 801da8c:	08024020 	.word	0x08024020
 801da90:	08024058 	.word	0x08024058
 801da94:	08024068 	.word	0x08024068

0801da98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801da98:	b580      	push	{r7, lr}
 801da9a:	b08e      	sub	sp, #56	@ 0x38
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801daa0:	4b9d      	ldr	r3, [pc, #628]	@ (801dd18 <ip4_reass+0x280>)
 801daa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801daa4:	3301      	adds	r3, #1
 801daa6:	b29a      	uxth	r2, r3
 801daa8:	4b9b      	ldr	r3, [pc, #620]	@ (801dd18 <ip4_reass+0x280>)
 801daaa:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	685b      	ldr	r3, [r3, #4]
 801dab0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801dab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dab4:	781b      	ldrb	r3, [r3, #0]
 801dab6:	f003 030f 	and.w	r3, r3, #15
 801daba:	b2db      	uxtb	r3, r3
 801dabc:	009b      	lsls	r3, r3, #2
 801dabe:	b2db      	uxtb	r3, r3
 801dac0:	2b14      	cmp	r3, #20
 801dac2:	d008      	beq.n	801dad6 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801dac4:	4b94      	ldr	r3, [pc, #592]	@ (801dd18 <ip4_reass+0x280>)
 801dac6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801daca:	3301      	adds	r3, #1
 801dacc:	b29a      	uxth	r2, r3
 801dace:	4b92      	ldr	r3, [pc, #584]	@ (801dd18 <ip4_reass+0x280>)
 801dad0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801dad4:	e17c      	b.n	801ddd0 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801dad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dad8:	88db      	ldrh	r3, [r3, #6]
 801dada:	b29b      	uxth	r3, r3
 801dadc:	4618      	mov	r0, r3
 801dade:	f7f5 f975 	bl	8012dcc <lwip_htons>
 801dae2:	4603      	mov	r3, r0
 801dae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dae8:	b29b      	uxth	r3, r3
 801daea:	00db      	lsls	r3, r3, #3
 801daec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801daee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801daf0:	885b      	ldrh	r3, [r3, #2]
 801daf2:	b29b      	uxth	r3, r3
 801daf4:	4618      	mov	r0, r3
 801daf6:	f7f5 f969 	bl	8012dcc <lwip_htons>
 801dafa:	4603      	mov	r3, r0
 801dafc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801dafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db00:	781b      	ldrb	r3, [r3, #0]
 801db02:	f003 030f 	and.w	r3, r3, #15
 801db06:	b2db      	uxtb	r3, r3
 801db08:	009b      	lsls	r3, r3, #2
 801db0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801db0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801db12:	b29b      	uxth	r3, r3
 801db14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801db16:	429a      	cmp	r2, r3
 801db18:	f0c0 8157 	bcc.w	801ddca <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801db1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801db20:	b29b      	uxth	r3, r3
 801db22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801db24:	1ad3      	subs	r3, r2, r3
 801db26:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801db28:	6878      	ldr	r0, [r7, #4]
 801db2a:	f7f6 fe9b 	bl	8014864 <pbuf_clen>
 801db2e:	4603      	mov	r3, r0
 801db30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801db32:	4b7a      	ldr	r3, [pc, #488]	@ (801dd1c <ip4_reass+0x284>)
 801db34:	881b      	ldrh	r3, [r3, #0]
 801db36:	461a      	mov	r2, r3
 801db38:	8c3b      	ldrh	r3, [r7, #32]
 801db3a:	4413      	add	r3, r2
 801db3c:	2b0a      	cmp	r3, #10
 801db3e:	dd15      	ble.n	801db6c <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801db40:	8c3b      	ldrh	r3, [r7, #32]
 801db42:	4619      	mov	r1, r3
 801db44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801db46:	f7ff fd6b 	bl	801d620 <ip_reass_remove_oldest_datagram>
 801db4a:	4603      	mov	r3, r0
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	d006      	beq.n	801db5e <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801db50:	4b72      	ldr	r3, [pc, #456]	@ (801dd1c <ip4_reass+0x284>)
 801db52:	881b      	ldrh	r3, [r3, #0]
 801db54:	461a      	mov	r2, r3
 801db56:	8c3b      	ldrh	r3, [r7, #32]
 801db58:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801db5a:	2b0a      	cmp	r3, #10
 801db5c:	dd06      	ble.n	801db6c <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801db5e:	4b6e      	ldr	r3, [pc, #440]	@ (801dd18 <ip4_reass+0x280>)
 801db60:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801db62:	3301      	adds	r3, #1
 801db64:	b29a      	uxth	r2, r3
 801db66:	4b6c      	ldr	r3, [pc, #432]	@ (801dd18 <ip4_reass+0x280>)
 801db68:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801db6a:	e131      	b.n	801ddd0 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801db6c:	4b6c      	ldr	r3, [pc, #432]	@ (801dd20 <ip4_reass+0x288>)
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	633b      	str	r3, [r7, #48]	@ 0x30
 801db72:	e01e      	b.n	801dbb2 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801db74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801db76:	695a      	ldr	r2, [r3, #20]
 801db78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db7a:	68db      	ldr	r3, [r3, #12]
 801db7c:	429a      	cmp	r2, r3
 801db7e:	d115      	bne.n	801dbac <ip4_reass+0x114>
 801db80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801db82:	699a      	ldr	r2, [r3, #24]
 801db84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db86:	691b      	ldr	r3, [r3, #16]
 801db88:	429a      	cmp	r2, r3
 801db8a:	d10f      	bne.n	801dbac <ip4_reass+0x114>
 801db8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801db8e:	899a      	ldrh	r2, [r3, #12]
 801db90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db92:	889b      	ldrh	r3, [r3, #4]
 801db94:	b29b      	uxth	r3, r3
 801db96:	429a      	cmp	r2, r3
 801db98:	d108      	bne.n	801dbac <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801db9a:	4b5f      	ldr	r3, [pc, #380]	@ (801dd18 <ip4_reass+0x280>)
 801db9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801dba0:	3301      	adds	r3, #1
 801dba2:	b29a      	uxth	r2, r3
 801dba4:	4b5c      	ldr	r3, [pc, #368]	@ (801dd18 <ip4_reass+0x280>)
 801dba6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801dbaa:	e005      	b.n	801dbb8 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801dbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	633b      	str	r3, [r7, #48]	@ 0x30
 801dbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d1dd      	bne.n	801db74 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801dbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d109      	bne.n	801dbd2 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801dbbe:	8c3b      	ldrh	r3, [r7, #32]
 801dbc0:	4619      	mov	r1, r3
 801dbc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801dbc4:	f7ff fd8e 	bl	801d6e4 <ip_reass_enqueue_new_datagram>
 801dbc8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801dbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d11c      	bne.n	801dc0a <ip4_reass+0x172>
      goto nullreturn;
 801dbd0:	e0fe      	b.n	801ddd0 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801dbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbd4:	88db      	ldrh	r3, [r3, #6]
 801dbd6:	b29b      	uxth	r3, r3
 801dbd8:	4618      	mov	r0, r3
 801dbda:	f7f5 f8f7 	bl	8012dcc <lwip_htons>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d110      	bne.n	801dc0a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801dbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbea:	89db      	ldrh	r3, [r3, #14]
 801dbec:	4618      	mov	r0, r3
 801dbee:	f7f5 f8ed 	bl	8012dcc <lwip_htons>
 801dbf2:	4603      	mov	r3, r0
 801dbf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	d006      	beq.n	801dc0a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801dbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbfe:	3308      	adds	r3, #8
 801dc00:	2214      	movs	r2, #20
 801dc02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801dc04:	4618      	mov	r0, r3
 801dc06:	f002 fa1c 	bl	8020042 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801dc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc0c:	88db      	ldrh	r3, [r3, #6]
 801dc0e:	b29b      	uxth	r3, r3
 801dc10:	f003 0320 	and.w	r3, r3, #32
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	bf0c      	ite	eq
 801dc18:	2301      	moveq	r3, #1
 801dc1a:	2300      	movne	r3, #0
 801dc1c:	b2db      	uxtb	r3, r3
 801dc1e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801dc20:	69fb      	ldr	r3, [r7, #28]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d00e      	beq.n	801dc44 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801dc26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801dc28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801dc2a:	4413      	add	r3, r2
 801dc2c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801dc2e:	8b7a      	ldrh	r2, [r7, #26]
 801dc30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801dc32:	429a      	cmp	r2, r3
 801dc34:	f0c0 80a7 	bcc.w	801dd86 <ip4_reass+0x2ee>
 801dc38:	8b7b      	ldrh	r3, [r7, #26]
 801dc3a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801dc3e:	4293      	cmp	r3, r2
 801dc40:	f200 80a1 	bhi.w	801dd86 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801dc44:	69fa      	ldr	r2, [r7, #28]
 801dc46:	6879      	ldr	r1, [r7, #4]
 801dc48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801dc4a:	f7ff fdbb 	bl	801d7c4 <ip_reass_chain_frag_into_datagram_and_validate>
 801dc4e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801dc50:	697b      	ldr	r3, [r7, #20]
 801dc52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dc56:	f000 8098 	beq.w	801dd8a <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801dc5a:	4b30      	ldr	r3, [pc, #192]	@ (801dd1c <ip4_reass+0x284>)
 801dc5c:	881a      	ldrh	r2, [r3, #0]
 801dc5e:	8c3b      	ldrh	r3, [r7, #32]
 801dc60:	4413      	add	r3, r2
 801dc62:	b29a      	uxth	r2, r3
 801dc64:	4b2d      	ldr	r3, [pc, #180]	@ (801dd1c <ip4_reass+0x284>)
 801dc66:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801dc68:	69fb      	ldr	r3, [r7, #28]
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d00d      	beq.n	801dc8a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801dc6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801dc70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801dc72:	4413      	add	r3, r2
 801dc74:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801dc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc78:	8a7a      	ldrh	r2, [r7, #18]
 801dc7a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801dc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc7e:	7f9b      	ldrb	r3, [r3, #30]
 801dc80:	f043 0301 	orr.w	r3, r3, #1
 801dc84:	b2da      	uxtb	r2, r3
 801dc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc88:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801dc8a:	697b      	ldr	r3, [r7, #20]
 801dc8c:	2b01      	cmp	r3, #1
 801dc8e:	d178      	bne.n	801dd82 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801dc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc92:	8b9b      	ldrh	r3, [r3, #28]
 801dc94:	3314      	adds	r3, #20
 801dc96:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801dc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc9a:	685b      	ldr	r3, [r3, #4]
 801dc9c:	685b      	ldr	r3, [r3, #4]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801dca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dca4:	685b      	ldr	r3, [r3, #4]
 801dca6:	685b      	ldr	r3, [r3, #4]
 801dca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801dcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcac:	3308      	adds	r3, #8
 801dcae:	2214      	movs	r2, #20
 801dcb0:	4619      	mov	r1, r3
 801dcb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801dcb4:	f002 f9c5 	bl	8020042 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801dcb8:	8a3b      	ldrh	r3, [r7, #16]
 801dcba:	4618      	mov	r0, r3
 801dcbc:	f7f5 f886 	bl	8012dcc <lwip_htons>
 801dcc0:	4603      	mov	r3, r0
 801dcc2:	461a      	mov	r2, r3
 801dcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcc6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801dcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcca:	2200      	movs	r2, #0
 801dccc:	719a      	strb	r2, [r3, #6]
 801dcce:	2200      	movs	r2, #0
 801dcd0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801dcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	729a      	strb	r2, [r3, #10]
 801dcd8:	2200      	movs	r2, #0
 801dcda:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801dcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcde:	685b      	ldr	r3, [r3, #4]
 801dce0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801dce2:	e00d      	b.n	801dd00 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801dce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dce6:	685b      	ldr	r3, [r3, #4]
 801dce8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801dcea:	2114      	movs	r1, #20
 801dcec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801dcee:	f7f6 fca5 	bl	801463c <pbuf_remove_header>
      pbuf_cat(p, r);
 801dcf2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801dcf4:	6878      	ldr	r0, [r7, #4]
 801dcf6:	f7f6 fdf5 	bl	80148e4 <pbuf_cat>
      r = iprh->next_pbuf;
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801dd00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d1ee      	bne.n	801dce4 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801dd06:	4b06      	ldr	r3, [pc, #24]	@ (801dd20 <ip4_reass+0x288>)
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dd0c:	429a      	cmp	r2, r3
 801dd0e:	d109      	bne.n	801dd24 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801dd10:	2300      	movs	r3, #0
 801dd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dd14:	e017      	b.n	801dd46 <ip4_reass+0x2ae>
 801dd16:	bf00      	nop
 801dd18:	2002d2b0 	.word	0x2002d2b0
 801dd1c:	2002d504 	.word	0x2002d504
 801dd20:	2002d500 	.word	0x2002d500
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801dd24:	4b31      	ldr	r3, [pc, #196]	@ (801ddec <ip4_reass+0x354>)
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dd2a:	e007      	b.n	801dd3c <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801dd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dd32:	429a      	cmp	r2, r3
 801dd34:	d006      	beq.n	801dd44 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801dd36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d1f4      	bne.n	801dd2c <ip4_reass+0x294>
 801dd42:	e000      	b.n	801dd46 <ip4_reass+0x2ae>
          break;
 801dd44:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801dd46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801dd48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801dd4a:	f7ff fd0d 	bl	801d768 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801dd4e:	6878      	ldr	r0, [r7, #4]
 801dd50:	f7f6 fd88 	bl	8014864 <pbuf_clen>
 801dd54:	4603      	mov	r3, r0
 801dd56:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801dd58:	4b25      	ldr	r3, [pc, #148]	@ (801ddf0 <ip4_reass+0x358>)
 801dd5a:	881b      	ldrh	r3, [r3, #0]
 801dd5c:	8c3a      	ldrh	r2, [r7, #32]
 801dd5e:	429a      	cmp	r2, r3
 801dd60:	d906      	bls.n	801dd70 <ip4_reass+0x2d8>
 801dd62:	4b24      	ldr	r3, [pc, #144]	@ (801ddf4 <ip4_reass+0x35c>)
 801dd64:	f240 229b 	movw	r2, #667	@ 0x29b
 801dd68:	4923      	ldr	r1, [pc, #140]	@ (801ddf8 <ip4_reass+0x360>)
 801dd6a:	4824      	ldr	r0, [pc, #144]	@ (801ddfc <ip4_reass+0x364>)
 801dd6c:	f001 ff3e 	bl	801fbec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801dd70:	4b1f      	ldr	r3, [pc, #124]	@ (801ddf0 <ip4_reass+0x358>)
 801dd72:	881a      	ldrh	r2, [r3, #0]
 801dd74:	8c3b      	ldrh	r3, [r7, #32]
 801dd76:	1ad3      	subs	r3, r2, r3
 801dd78:	b29a      	uxth	r2, r3
 801dd7a:	4b1d      	ldr	r3, [pc, #116]	@ (801ddf0 <ip4_reass+0x358>)
 801dd7c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	e030      	b.n	801dde4 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801dd82:	2300      	movs	r3, #0
 801dd84:	e02e      	b.n	801dde4 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801dd86:	bf00      	nop
 801dd88:	e000      	b.n	801dd8c <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801dd8a:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801dd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d106      	bne.n	801dda0 <ip4_reass+0x308>
 801dd92:	4b18      	ldr	r3, [pc, #96]	@ (801ddf4 <ip4_reass+0x35c>)
 801dd94:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801dd98:	4919      	ldr	r1, [pc, #100]	@ (801de00 <ip4_reass+0x368>)
 801dd9a:	4818      	ldr	r0, [pc, #96]	@ (801ddfc <ip4_reass+0x364>)
 801dd9c:	f001 ff26 	bl	801fbec <iprintf>
  if (ipr->p == NULL) {
 801dda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dda2:	685b      	ldr	r3, [r3, #4]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d112      	bne.n	801ddce <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801dda8:	4b10      	ldr	r3, [pc, #64]	@ (801ddec <ip4_reass+0x354>)
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ddae:	429a      	cmp	r2, r3
 801ddb0:	d006      	beq.n	801ddc0 <ip4_reass+0x328>
 801ddb2:	4b10      	ldr	r3, [pc, #64]	@ (801ddf4 <ip4_reass+0x35c>)
 801ddb4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801ddb8:	4912      	ldr	r1, [pc, #72]	@ (801de04 <ip4_reass+0x36c>)
 801ddba:	4810      	ldr	r0, [pc, #64]	@ (801ddfc <ip4_reass+0x364>)
 801ddbc:	f001 ff16 	bl	801fbec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ddc0:	2100      	movs	r1, #0
 801ddc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ddc4:	f7ff fcd0 	bl	801d768 <ip_reass_dequeue_datagram>
 801ddc8:	e002      	b.n	801ddd0 <ip4_reass+0x338>
    goto nullreturn;
 801ddca:	bf00      	nop
 801ddcc:	e000      	b.n	801ddd0 <ip4_reass+0x338>
  }

nullreturn:
 801ddce:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801ddd0:	4b0d      	ldr	r3, [pc, #52]	@ (801de08 <ip4_reass+0x370>)
 801ddd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801ddd4:	3301      	adds	r3, #1
 801ddd6:	b29a      	uxth	r2, r3
 801ddd8:	4b0b      	ldr	r3, [pc, #44]	@ (801de08 <ip4_reass+0x370>)
 801ddda:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801dddc:	6878      	ldr	r0, [r7, #4]
 801ddde:	f7f6 fcb3 	bl	8014748 <pbuf_free>
  return NULL;
 801dde2:	2300      	movs	r3, #0
}
 801dde4:	4618      	mov	r0, r3
 801dde6:	3738      	adds	r7, #56	@ 0x38
 801dde8:	46bd      	mov	sp, r7
 801ddea:	bd80      	pop	{r7, pc}
 801ddec:	2002d500 	.word	0x2002d500
 801ddf0:	2002d504 	.word	0x2002d504
 801ddf4:	08023f1c 	.word	0x08023f1c
 801ddf8:	0802408c 	.word	0x0802408c
 801ddfc:	08023f64 	.word	0x08023f64
 801de00:	080240a8 	.word	0x080240a8
 801de04:	080240b4 	.word	0x080240b4
 801de08:	2002d2b0 	.word	0x2002d2b0

0801de0c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801de0c:	b580      	push	{r7, lr}
 801de0e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801de10:	2005      	movs	r0, #5
 801de12:	f7f5 fd79 	bl	8013908 <memp_malloc>
 801de16:	4603      	mov	r3, r0
}
 801de18:	4618      	mov	r0, r3
 801de1a:	bd80      	pop	{r7, pc}

0801de1c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801de1c:	b580      	push	{r7, lr}
 801de1e:	b082      	sub	sp, #8
 801de20:	af00      	add	r7, sp, #0
 801de22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	2b00      	cmp	r3, #0
 801de28:	d106      	bne.n	801de38 <ip_frag_free_pbuf_custom_ref+0x1c>
 801de2a:	4b07      	ldr	r3, [pc, #28]	@ (801de48 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801de2c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801de30:	4906      	ldr	r1, [pc, #24]	@ (801de4c <ip_frag_free_pbuf_custom_ref+0x30>)
 801de32:	4807      	ldr	r0, [pc, #28]	@ (801de50 <ip_frag_free_pbuf_custom_ref+0x34>)
 801de34:	f001 feda 	bl	801fbec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801de38:	6879      	ldr	r1, [r7, #4]
 801de3a:	2005      	movs	r0, #5
 801de3c:	f7f5 fde0 	bl	8013a00 <memp_free>
}
 801de40:	bf00      	nop
 801de42:	3708      	adds	r7, #8
 801de44:	46bd      	mov	sp, r7
 801de46:	bd80      	pop	{r7, pc}
 801de48:	08023f1c 	.word	0x08023f1c
 801de4c:	080240d4 	.word	0x080240d4
 801de50:	08023f64 	.word	0x08023f64

0801de54 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801de54:	b580      	push	{r7, lr}
 801de56:	b084      	sub	sp, #16
 801de58:	af00      	add	r7, sp, #0
 801de5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801de60:	68fb      	ldr	r3, [r7, #12]
 801de62:	2b00      	cmp	r3, #0
 801de64:	d106      	bne.n	801de74 <ipfrag_free_pbuf_custom+0x20>
 801de66:	4b11      	ldr	r3, [pc, #68]	@ (801deac <ipfrag_free_pbuf_custom+0x58>)
 801de68:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801de6c:	4910      	ldr	r1, [pc, #64]	@ (801deb0 <ipfrag_free_pbuf_custom+0x5c>)
 801de6e:	4811      	ldr	r0, [pc, #68]	@ (801deb4 <ipfrag_free_pbuf_custom+0x60>)
 801de70:	f001 febc 	bl	801fbec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801de74:	68fa      	ldr	r2, [r7, #12]
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	429a      	cmp	r2, r3
 801de7a:	d006      	beq.n	801de8a <ipfrag_free_pbuf_custom+0x36>
 801de7c:	4b0b      	ldr	r3, [pc, #44]	@ (801deac <ipfrag_free_pbuf_custom+0x58>)
 801de7e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801de82:	490d      	ldr	r1, [pc, #52]	@ (801deb8 <ipfrag_free_pbuf_custom+0x64>)
 801de84:	480b      	ldr	r0, [pc, #44]	@ (801deb4 <ipfrag_free_pbuf_custom+0x60>)
 801de86:	f001 feb1 	bl	801fbec <iprintf>
  if (pcr->original != NULL) {
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	695b      	ldr	r3, [r3, #20]
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d004      	beq.n	801de9c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801de92:	68fb      	ldr	r3, [r7, #12]
 801de94:	695b      	ldr	r3, [r3, #20]
 801de96:	4618      	mov	r0, r3
 801de98:	f7f6 fc56 	bl	8014748 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801de9c:	68f8      	ldr	r0, [r7, #12]
 801de9e:	f7ff ffbd 	bl	801de1c <ip_frag_free_pbuf_custom_ref>
}
 801dea2:	bf00      	nop
 801dea4:	3710      	adds	r7, #16
 801dea6:	46bd      	mov	sp, r7
 801dea8:	bd80      	pop	{r7, pc}
 801deaa:	bf00      	nop
 801deac:	08023f1c 	.word	0x08023f1c
 801deb0:	080240e0 	.word	0x080240e0
 801deb4:	08023f64 	.word	0x08023f64
 801deb8:	080240ec 	.word	0x080240ec

0801debc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801debc:	b580      	push	{r7, lr}
 801debe:	b094      	sub	sp, #80	@ 0x50
 801dec0:	af02      	add	r7, sp, #8
 801dec2:	60f8      	str	r0, [r7, #12]
 801dec4:	60b9      	str	r1, [r7, #8]
 801dec6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801dec8:	2300      	movs	r3, #0
 801deca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801dece:	68bb      	ldr	r3, [r7, #8]
 801ded0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ded2:	3b14      	subs	r3, #20
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	da00      	bge.n	801deda <ip4_frag+0x1e>
 801ded8:	3307      	adds	r3, #7
 801deda:	10db      	asrs	r3, r3, #3
 801dedc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801dede:	2314      	movs	r3, #20
 801dee0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	685b      	ldr	r3, [r3, #4]
 801dee6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801dee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801deea:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801deee:	781b      	ldrb	r3, [r3, #0]
 801def0:	f003 030f 	and.w	r3, r3, #15
 801def4:	b2db      	uxtb	r3, r3
 801def6:	009b      	lsls	r3, r3, #2
 801def8:	b2db      	uxtb	r3, r3
 801defa:	2b14      	cmp	r3, #20
 801defc:	d002      	beq.n	801df04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801defe:	f06f 0305 	mvn.w	r3, #5
 801df02:	e116      	b.n	801e132 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801df04:	68fb      	ldr	r3, [r7, #12]
 801df06:	895b      	ldrh	r3, [r3, #10]
 801df08:	2b13      	cmp	r3, #19
 801df0a:	d809      	bhi.n	801df20 <ip4_frag+0x64>
 801df0c:	4b8b      	ldr	r3, [pc, #556]	@ (801e13c <ip4_frag+0x280>)
 801df0e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801df12:	498b      	ldr	r1, [pc, #556]	@ (801e140 <ip4_frag+0x284>)
 801df14:	488b      	ldr	r0, [pc, #556]	@ (801e144 <ip4_frag+0x288>)
 801df16:	f001 fe69 	bl	801fbec <iprintf>
 801df1a:	f06f 0305 	mvn.w	r3, #5
 801df1e:	e108      	b.n	801e132 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801df20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801df22:	88db      	ldrh	r3, [r3, #6]
 801df24:	b29b      	uxth	r3, r3
 801df26:	4618      	mov	r0, r3
 801df28:	f7f4 ff50 	bl	8012dcc <lwip_htons>
 801df2c:	4603      	mov	r3, r0
 801df2e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801df30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801df32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801df36:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801df3a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801df3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801df40:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	891b      	ldrh	r3, [r3, #8]
 801df46:	3b14      	subs	r3, #20
 801df48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801df4c:	e0e7      	b.n	801e11e <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801df4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801df50:	00db      	lsls	r3, r3, #3
 801df52:	b29b      	uxth	r3, r3
 801df54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801df58:	4293      	cmp	r3, r2
 801df5a:	bf28      	it	cs
 801df5c:	4613      	movcs	r3, r2
 801df5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801df60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801df64:	2114      	movs	r1, #20
 801df66:	200e      	movs	r0, #14
 801df68:	f7f6 f90a 	bl	8014180 <pbuf_alloc>
 801df6c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801df6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df70:	2b00      	cmp	r3, #0
 801df72:	f000 80db 	beq.w	801e12c <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801df76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df78:	895b      	ldrh	r3, [r3, #10]
 801df7a:	2b13      	cmp	r3, #19
 801df7c:	d806      	bhi.n	801df8c <ip4_frag+0xd0>
 801df7e:	4b6f      	ldr	r3, [pc, #444]	@ (801e13c <ip4_frag+0x280>)
 801df80:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801df84:	4970      	ldr	r1, [pc, #448]	@ (801e148 <ip4_frag+0x28c>)
 801df86:	486f      	ldr	r0, [pc, #444]	@ (801e144 <ip4_frag+0x288>)
 801df88:	f001 fe30 	bl	801fbec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801df8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df8e:	685b      	ldr	r3, [r3, #4]
 801df90:	2214      	movs	r2, #20
 801df92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801df94:	4618      	mov	r0, r3
 801df96:	f002 f854 	bl	8020042 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801df9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df9c:	685b      	ldr	r3, [r3, #4]
 801df9e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801dfa0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801dfa2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801dfa6:	e064      	b.n	801e072 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	895a      	ldrh	r2, [r3, #10]
 801dfac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801dfae:	1ad3      	subs	r3, r2, r3
 801dfb0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	895b      	ldrh	r3, [r3, #10]
 801dfb6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801dfb8:	429a      	cmp	r2, r3
 801dfba:	d906      	bls.n	801dfca <ip4_frag+0x10e>
 801dfbc:	4b5f      	ldr	r3, [pc, #380]	@ (801e13c <ip4_frag+0x280>)
 801dfbe:	f240 322d 	movw	r2, #813	@ 0x32d
 801dfc2:	4962      	ldr	r1, [pc, #392]	@ (801e14c <ip4_frag+0x290>)
 801dfc4:	485f      	ldr	r0, [pc, #380]	@ (801e144 <ip4_frag+0x288>)
 801dfc6:	f001 fe11 	bl	801fbec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801dfca:	8bfa      	ldrh	r2, [r7, #30]
 801dfcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801dfd0:	4293      	cmp	r3, r2
 801dfd2:	bf28      	it	cs
 801dfd4:	4613      	movcs	r3, r2
 801dfd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801dfda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d105      	bne.n	801dfee <ip4_frag+0x132>
        poff = 0;
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801dfe6:	68fb      	ldr	r3, [r7, #12]
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	60fb      	str	r3, [r7, #12]
        continue;
 801dfec:	e041      	b.n	801e072 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801dfee:	f7ff ff0d 	bl	801de0c <ip_frag_alloc_pbuf_custom_ref>
 801dff2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801dff4:	69bb      	ldr	r3, [r7, #24]
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	d103      	bne.n	801e002 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801dffa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dffc:	f7f6 fba4 	bl	8014748 <pbuf_free>
        goto memerr;
 801e000:	e095      	b.n	801e12e <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e002:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e008:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e00a:	4413      	add	r3, r2
 801e00c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801e010:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801e014:	9201      	str	r2, [sp, #4]
 801e016:	9300      	str	r3, [sp, #0]
 801e018:	4603      	mov	r3, r0
 801e01a:	2241      	movs	r2, #65	@ 0x41
 801e01c:	2000      	movs	r0, #0
 801e01e:	f7f6 f9d9 	bl	80143d4 <pbuf_alloced_custom>
 801e022:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e024:	697b      	ldr	r3, [r7, #20]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d106      	bne.n	801e038 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e02a:	69b8      	ldr	r0, [r7, #24]
 801e02c:	f7ff fef6 	bl	801de1c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e030:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e032:	f7f6 fb89 	bl	8014748 <pbuf_free>
        goto memerr;
 801e036:	e07a      	b.n	801e12e <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801e038:	68f8      	ldr	r0, [r7, #12]
 801e03a:	f7f6 fc2b 	bl	8014894 <pbuf_ref>
      pcr->original = p;
 801e03e:	69bb      	ldr	r3, [r7, #24]
 801e040:	68fa      	ldr	r2, [r7, #12]
 801e042:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e044:	69bb      	ldr	r3, [r7, #24]
 801e046:	4a42      	ldr	r2, [pc, #264]	@ (801e150 <ip4_frag+0x294>)
 801e048:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e04a:	6979      	ldr	r1, [r7, #20]
 801e04c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e04e:	f7f6 fc49 	bl	80148e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e052:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801e056:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e05a:	1ad3      	subs	r3, r2, r3
 801e05c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801e060:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e064:	2b00      	cmp	r3, #0
 801e066:	d004      	beq.n	801e072 <ip4_frag+0x1b6>
        poff = 0;
 801e068:	2300      	movs	r3, #0
 801e06a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e072:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e076:	2b00      	cmp	r3, #0
 801e078:	d196      	bne.n	801dfa8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e07a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e07c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e080:	4413      	add	r3, r2
 801e082:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e084:	68bb      	ldr	r3, [r7, #8]
 801e086:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e088:	f1a3 0213 	sub.w	r2, r3, #19
 801e08c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e090:	429a      	cmp	r2, r3
 801e092:	bfcc      	ite	gt
 801e094:	2301      	movgt	r3, #1
 801e096:	2300      	movle	r3, #0
 801e098:	b2db      	uxtb	r3, r3
 801e09a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e09c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e0a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e0a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801e0a6:	6a3b      	ldr	r3, [r7, #32]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d002      	beq.n	801e0b2 <ip4_frag+0x1f6>
 801e0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d003      	beq.n	801e0ba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e0b2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e0b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801e0b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e0ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e0bc:	4618      	mov	r0, r3
 801e0be:	f7f4 fe85 	bl	8012dcc <lwip_htons>
 801e0c2:	4603      	mov	r3, r0
 801e0c4:	461a      	mov	r2, r3
 801e0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e0ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e0cc:	3314      	adds	r3, #20
 801e0ce:	b29b      	uxth	r3, r3
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	f7f4 fe7b 	bl	8012dcc <lwip_htons>
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	461a      	mov	r2, r3
 801e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0e0:	2200      	movs	r2, #0
 801e0e2:	729a      	strb	r2, [r3, #10]
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e0e8:	68bb      	ldr	r3, [r7, #8]
 801e0ea:	695b      	ldr	r3, [r3, #20]
 801e0ec:	687a      	ldr	r2, [r7, #4]
 801e0ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e0f0:	68b8      	ldr	r0, [r7, #8]
 801e0f2:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801e0f4:	4b17      	ldr	r3, [pc, #92]	@ (801e154 <ip4_frag+0x298>)
 801e0f6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801e0f8:	3301      	adds	r3, #1
 801e0fa:	b29a      	uxth	r2, r3
 801e0fc:	4b15      	ldr	r3, [pc, #84]	@ (801e154 <ip4_frag+0x298>)
 801e0fe:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e102:	f7f6 fb21 	bl	8014748 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e106:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e10a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e10c:	1ad3      	subs	r3, r2, r3
 801e10e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801e112:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801e116:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e118:	4413      	add	r3, r2
 801e11a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801e11e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e122:	2b00      	cmp	r3, #0
 801e124:	f47f af13 	bne.w	801df4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e128:	2300      	movs	r3, #0
 801e12a:	e002      	b.n	801e132 <ip4_frag+0x276>
      goto memerr;
 801e12c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e12e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801e132:	4618      	mov	r0, r3
 801e134:	3748      	adds	r7, #72	@ 0x48
 801e136:	46bd      	mov	sp, r7
 801e138:	bd80      	pop	{r7, pc}
 801e13a:	bf00      	nop
 801e13c:	08023f1c 	.word	0x08023f1c
 801e140:	080240f8 	.word	0x080240f8
 801e144:	08023f64 	.word	0x08023f64
 801e148:	08024114 	.word	0x08024114
 801e14c:	08024134 	.word	0x08024134
 801e150:	0801de55 	.word	0x0801de55
 801e154:	2002d2b0 	.word	0x2002d2b0

0801e158 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e158:	b580      	push	{r7, lr}
 801e15a:	b086      	sub	sp, #24
 801e15c:	af00      	add	r7, sp, #0
 801e15e:	6078      	str	r0, [r7, #4]
 801e160:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e162:	230e      	movs	r3, #14
 801e164:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	895b      	ldrh	r3, [r3, #10]
 801e16a:	2b0e      	cmp	r3, #14
 801e16c:	d80c      	bhi.n	801e188 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801e16e:	4b51      	ldr	r3, [pc, #324]	@ (801e2b4 <ethernet_input+0x15c>)
 801e170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e172:	3301      	adds	r3, #1
 801e174:	b29a      	uxth	r2, r3
 801e176:	4b4f      	ldr	r3, [pc, #316]	@ (801e2b4 <ethernet_input+0x15c>)
 801e178:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801e17a:	4b4e      	ldr	r3, [pc, #312]	@ (801e2b4 <ethernet_input+0x15c>)
 801e17c:	8bdb      	ldrh	r3, [r3, #30]
 801e17e:	3301      	adds	r3, #1
 801e180:	b29a      	uxth	r2, r3
 801e182:	4b4c      	ldr	r3, [pc, #304]	@ (801e2b4 <ethernet_input+0x15c>)
 801e184:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801e186:	e08d      	b.n	801e2a4 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	7bdb      	ldrb	r3, [r3, #15]
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d106      	bne.n	801e19e <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801e190:	683b      	ldr	r3, [r7, #0]
 801e192:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e196:	3301      	adds	r3, #1
 801e198:	b2da      	uxtb	r2, r3
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	685b      	ldr	r3, [r3, #4]
 801e1a2:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e1a4:	693b      	ldr	r3, [r7, #16]
 801e1a6:	7b1a      	ldrb	r2, [r3, #12]
 801e1a8:	7b5b      	ldrb	r3, [r3, #13]
 801e1aa:	021b      	lsls	r3, r3, #8
 801e1ac:	4313      	orrs	r3, r2
 801e1ae:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e1b0:	693b      	ldr	r3, [r7, #16]
 801e1b2:	781b      	ldrb	r3, [r3, #0]
 801e1b4:	f003 0301 	and.w	r3, r3, #1
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	d023      	beq.n	801e204 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e1bc:	693b      	ldr	r3, [r7, #16]
 801e1be:	781b      	ldrb	r3, [r3, #0]
 801e1c0:	2b01      	cmp	r3, #1
 801e1c2:	d10f      	bne.n	801e1e4 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e1c4:	693b      	ldr	r3, [r7, #16]
 801e1c6:	785b      	ldrb	r3, [r3, #1]
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d11b      	bne.n	801e204 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e1cc:	693b      	ldr	r3, [r7, #16]
 801e1ce:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e1d0:	2b5e      	cmp	r3, #94	@ 0x5e
 801e1d2:	d117      	bne.n	801e204 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	7b5b      	ldrb	r3, [r3, #13]
 801e1d8:	f043 0310 	orr.w	r3, r3, #16
 801e1dc:	b2da      	uxtb	r2, r3
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	735a      	strb	r2, [r3, #13]
 801e1e2:	e00f      	b.n	801e204 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e1e4:	693b      	ldr	r3, [r7, #16]
 801e1e6:	2206      	movs	r2, #6
 801e1e8:	4933      	ldr	r1, [pc, #204]	@ (801e2b8 <ethernet_input+0x160>)
 801e1ea:	4618      	mov	r0, r3
 801e1ec:	f001 fe46 	bl	801fe7c <memcmp>
 801e1f0:	4603      	mov	r3, r0
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d106      	bne.n	801e204 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	7b5b      	ldrb	r3, [r3, #13]
 801e1fa:	f043 0308 	orr.w	r3, r3, #8
 801e1fe:	b2da      	uxtb	r2, r3
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e204:	89fb      	ldrh	r3, [r7, #14]
 801e206:	2b08      	cmp	r3, #8
 801e208:	d003      	beq.n	801e212 <ethernet_input+0xba>
 801e20a:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801e20e:	d014      	beq.n	801e23a <ethernet_input+0xe2>
 801e210:	e034      	b.n	801e27c <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e212:	683b      	ldr	r3, [r7, #0]
 801e214:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e218:	f003 0308 	and.w	r3, r3, #8
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	d03c      	beq.n	801e29a <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e220:	8afb      	ldrh	r3, [r7, #22]
 801e222:	4619      	mov	r1, r3
 801e224:	6878      	ldr	r0, [r7, #4]
 801e226:	f7f6 fa09 	bl	801463c <pbuf_remove_header>
 801e22a:	4603      	mov	r3, r0
 801e22c:	2b00      	cmp	r3, #0
 801e22e:	d136      	bne.n	801e29e <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801e230:	6839      	ldr	r1, [r7, #0]
 801e232:	6878      	ldr	r0, [r7, #4]
 801e234:	f7fe fe7e 	bl	801cf34 <ip4_input>
      }
      break;
 801e238:	e02d      	b.n	801e296 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e23a:	683b      	ldr	r3, [r7, #0]
 801e23c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e240:	f003 0308 	and.w	r3, r3, #8
 801e244:	2b00      	cmp	r3, #0
 801e246:	d02c      	beq.n	801e2a2 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e248:	8afb      	ldrh	r3, [r7, #22]
 801e24a:	4619      	mov	r1, r3
 801e24c:	6878      	ldr	r0, [r7, #4]
 801e24e:	f7f6 f9f5 	bl	801463c <pbuf_remove_header>
 801e252:	4603      	mov	r3, r0
 801e254:	2b00      	cmp	r3, #0
 801e256:	d00c      	beq.n	801e272 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801e258:	4b16      	ldr	r3, [pc, #88]	@ (801e2b4 <ethernet_input+0x15c>)
 801e25a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801e25c:	3301      	adds	r3, #1
 801e25e:	b29a      	uxth	r2, r3
 801e260:	4b14      	ldr	r3, [pc, #80]	@ (801e2b4 <ethernet_input+0x15c>)
 801e262:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801e264:	4b13      	ldr	r3, [pc, #76]	@ (801e2b4 <ethernet_input+0x15c>)
 801e266:	8bdb      	ldrh	r3, [r3, #30]
 801e268:	3301      	adds	r3, #1
 801e26a:	b29a      	uxth	r2, r3
 801e26c:	4b11      	ldr	r3, [pc, #68]	@ (801e2b4 <ethernet_input+0x15c>)
 801e26e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801e270:	e018      	b.n	801e2a4 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801e272:	6839      	ldr	r1, [r7, #0]
 801e274:	6878      	ldr	r0, [r7, #4]
 801e276:	f7fd ff89 	bl	801c18c <etharp_input>
      }
      break;
 801e27a:	e00c      	b.n	801e296 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801e27c:	4b0d      	ldr	r3, [pc, #52]	@ (801e2b4 <ethernet_input+0x15c>)
 801e27e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e280:	3301      	adds	r3, #1
 801e282:	b29a      	uxth	r2, r3
 801e284:	4b0b      	ldr	r3, [pc, #44]	@ (801e2b4 <ethernet_input+0x15c>)
 801e286:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801e288:	4b0a      	ldr	r3, [pc, #40]	@ (801e2b4 <ethernet_input+0x15c>)
 801e28a:	8bdb      	ldrh	r3, [r3, #30]
 801e28c:	3301      	adds	r3, #1
 801e28e:	b29a      	uxth	r2, r3
 801e290:	4b08      	ldr	r3, [pc, #32]	@ (801e2b4 <ethernet_input+0x15c>)
 801e292:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e294:	e006      	b.n	801e2a4 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e296:	2300      	movs	r3, #0
 801e298:	e008      	b.n	801e2ac <ethernet_input+0x154>
        goto free_and_return;
 801e29a:	bf00      	nop
 801e29c:	e002      	b.n	801e2a4 <ethernet_input+0x14c>
        goto free_and_return;
 801e29e:	bf00      	nop
 801e2a0:	e000      	b.n	801e2a4 <ethernet_input+0x14c>
        goto free_and_return;
 801e2a2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e2a4:	6878      	ldr	r0, [r7, #4]
 801e2a6:	f7f6 fa4f 	bl	8014748 <pbuf_free>
  return ERR_OK;
 801e2aa:	2300      	movs	r3, #0
}
 801e2ac:	4618      	mov	r0, r3
 801e2ae:	3718      	adds	r7, #24
 801e2b0:	46bd      	mov	sp, r7
 801e2b2:	bd80      	pop	{r7, pc}
 801e2b4:	2002d2b0 	.word	0x2002d2b0
 801e2b8:	08024964 	.word	0x08024964

0801e2bc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e2bc:	b580      	push	{r7, lr}
 801e2be:	b086      	sub	sp, #24
 801e2c0:	af00      	add	r7, sp, #0
 801e2c2:	60f8      	str	r0, [r7, #12]
 801e2c4:	60b9      	str	r1, [r7, #8]
 801e2c6:	607a      	str	r2, [r7, #4]
 801e2c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e2ca:	8c3b      	ldrh	r3, [r7, #32]
 801e2cc:	4618      	mov	r0, r3
 801e2ce:	f7f4 fd7d 	bl	8012dcc <lwip_htons>
 801e2d2:	4603      	mov	r3, r0
 801e2d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e2d6:	210e      	movs	r1, #14
 801e2d8:	68b8      	ldr	r0, [r7, #8]
 801e2da:	f7f6 f99f 	bl	801461c <pbuf_add_header>
 801e2de:	4603      	mov	r3, r0
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d125      	bne.n	801e330 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e2e4:	68bb      	ldr	r3, [r7, #8]
 801e2e6:	685b      	ldr	r3, [r3, #4]
 801e2e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e2ea:	693b      	ldr	r3, [r7, #16]
 801e2ec:	8afa      	ldrh	r2, [r7, #22]
 801e2ee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e2f0:	693b      	ldr	r3, [r7, #16]
 801e2f2:	2206      	movs	r2, #6
 801e2f4:	6839      	ldr	r1, [r7, #0]
 801e2f6:	4618      	mov	r0, r3
 801e2f8:	f001 fea3 	bl	8020042 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e2fc:	693b      	ldr	r3, [r7, #16]
 801e2fe:	3306      	adds	r3, #6
 801e300:	2206      	movs	r2, #6
 801e302:	6879      	ldr	r1, [r7, #4]
 801e304:	4618      	mov	r0, r3
 801e306:	f001 fe9c 	bl	8020042 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e310:	2b06      	cmp	r3, #6
 801e312:	d006      	beq.n	801e322 <ethernet_output+0x66>
 801e314:	4b0d      	ldr	r3, [pc, #52]	@ (801e34c <ethernet_output+0x90>)
 801e316:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801e31a:	490d      	ldr	r1, [pc, #52]	@ (801e350 <ethernet_output+0x94>)
 801e31c:	480d      	ldr	r0, [pc, #52]	@ (801e354 <ethernet_output+0x98>)
 801e31e:	f001 fc65 	bl	801fbec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e322:	68fb      	ldr	r3, [r7, #12]
 801e324:	699b      	ldr	r3, [r3, #24]
 801e326:	68b9      	ldr	r1, [r7, #8]
 801e328:	68f8      	ldr	r0, [r7, #12]
 801e32a:	4798      	blx	r3
 801e32c:	4603      	mov	r3, r0
 801e32e:	e008      	b.n	801e342 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801e330:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801e332:	4b09      	ldr	r3, [pc, #36]	@ (801e358 <ethernet_output+0x9c>)
 801e334:	895b      	ldrh	r3, [r3, #10]
 801e336:	3301      	adds	r3, #1
 801e338:	b29a      	uxth	r2, r3
 801e33a:	4b07      	ldr	r3, [pc, #28]	@ (801e358 <ethernet_output+0x9c>)
 801e33c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801e33e:	f06f 0301 	mvn.w	r3, #1
}
 801e342:	4618      	mov	r0, r3
 801e344:	3718      	adds	r7, #24
 801e346:	46bd      	mov	sp, r7
 801e348:	bd80      	pop	{r7, pc}
 801e34a:	bf00      	nop
 801e34c:	08024144 	.word	0x08024144
 801e350:	0802417c 	.word	0x0802417c
 801e354:	080241b0 	.word	0x080241b0
 801e358:	2002d2b0 	.word	0x2002d2b0

0801e35c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e35c:	b580      	push	{r7, lr}
 801e35e:	b082      	sub	sp, #8
 801e360:	af00      	add	r7, sp, #0
 801e362:	6078      	str	r0, [r7, #4]
 801e364:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801e366:	683b      	ldr	r3, [r7, #0]
 801e368:	2200      	movs	r2, #0
 801e36a:	2104      	movs	r1, #4
 801e36c:	4618      	mov	r0, r3
 801e36e:	f7ee ffe7 	bl	800d340 <osMessageQueueNew>
 801e372:	4602      	mov	r2, r0
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801e378:	4b10      	ldr	r3, [pc, #64]	@ (801e3bc <sys_mbox_new+0x60>)
 801e37a:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e37e:	3301      	adds	r3, #1
 801e380:	b29a      	uxth	r2, r3
 801e382:	4b0e      	ldr	r3, [pc, #56]	@ (801e3bc <sys_mbox_new+0x60>)
 801e384:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801e388:	4b0c      	ldr	r3, [pc, #48]	@ (801e3bc <sys_mbox_new+0x60>)
 801e38a:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	@ 0xf6
 801e38e:	4b0b      	ldr	r3, [pc, #44]	@ (801e3bc <sys_mbox_new+0x60>)
 801e390:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e394:	429a      	cmp	r2, r3
 801e396:	d205      	bcs.n	801e3a4 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801e398:	4b08      	ldr	r3, [pc, #32]	@ (801e3bc <sys_mbox_new+0x60>)
 801e39a:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 801e39e:	4b07      	ldr	r3, [pc, #28]	@ (801e3bc <sys_mbox_new+0x60>)
 801e3a0:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d102      	bne.n	801e3b2 <sys_mbox_new+0x56>
    return ERR_MEM;
 801e3ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e3b0:	e000      	b.n	801e3b4 <sys_mbox_new+0x58>

  return ERR_OK;
 801e3b2:	2300      	movs	r3, #0
}
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	3708      	adds	r7, #8
 801e3b8:	46bd      	mov	sp, r7
 801e3ba:	bd80      	pop	{r7, pc}
 801e3bc:	2002d2b0 	.word	0x2002d2b0

0801e3c0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b082      	sub	sp, #8
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	4618      	mov	r0, r3
 801e3ce:	f7ef f923 	bl	800d618 <osMessageQueueGetCount>
 801e3d2:	4603      	mov	r3, r0
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d007      	beq.n	801e3e8 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801e3d8:	4b0c      	ldr	r3, [pc, #48]	@ (801e40c <sys_mbox_free+0x4c>)
 801e3da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801e3de:	3301      	adds	r3, #1
 801e3e0:	b29a      	uxth	r2, r3
 801e3e2:	4b0a      	ldr	r3, [pc, #40]	@ (801e40c <sys_mbox_free+0x4c>)
 801e3e4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	4618      	mov	r0, r3
 801e3ee:	f7ef f945 	bl	800d67c <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801e3f2:	4b06      	ldr	r3, [pc, #24]	@ (801e40c <sys_mbox_free+0x4c>)
 801e3f4:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e3f8:	3b01      	subs	r3, #1
 801e3fa:	b29a      	uxth	r2, r3
 801e3fc:	4b03      	ldr	r3, [pc, #12]	@ (801e40c <sys_mbox_free+0x4c>)
 801e3fe:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
#endif /* SYS_STATS */
}
 801e402:	bf00      	nop
 801e404:	3708      	adds	r7, #8
 801e406:	46bd      	mov	sp, r7
 801e408:	bd80      	pop	{r7, pc}
 801e40a:	bf00      	nop
 801e40c:	2002d2b0 	.word	0x2002d2b0

0801e410 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e410:	b580      	push	{r7, lr}
 801e412:	b084      	sub	sp, #16
 801e414:	af00      	add	r7, sp, #0
 801e416:	6078      	str	r0, [r7, #4]
 801e418:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	6818      	ldr	r0, [r3, #0]
 801e41e:	4639      	mov	r1, r7
 801e420:	2300      	movs	r3, #0
 801e422:	2200      	movs	r2, #0
 801e424:	f7ef f812 	bl	800d44c <osMessageQueuePut>
 801e428:	4603      	mov	r3, r0
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d102      	bne.n	801e434 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801e42e:	2300      	movs	r3, #0
 801e430:	73fb      	strb	r3, [r7, #15]
 801e432:	e009      	b.n	801e448 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e434:	23ff      	movs	r3, #255	@ 0xff
 801e436:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801e438:	4b06      	ldr	r3, [pc, #24]	@ (801e454 <sys_mbox_trypost+0x44>)
 801e43a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801e43e:	3301      	adds	r3, #1
 801e440:	b29a      	uxth	r2, r3
 801e442:	4b04      	ldr	r3, [pc, #16]	@ (801e454 <sys_mbox_trypost+0x44>)
 801e444:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
  }

  return result;
 801e448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e44c:	4618      	mov	r0, r3
 801e44e:	3710      	adds	r7, #16
 801e450:	46bd      	mov	sp, r7
 801e452:	bd80      	pop	{r7, pc}
 801e454:	2002d2b0 	.word	0x2002d2b0

0801e458 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e458:	b580      	push	{r7, lr}
 801e45a:	b086      	sub	sp, #24
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	60f8      	str	r0, [r7, #12]
 801e460:	60b9      	str	r1, [r7, #8]
 801e462:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801e464:	f7ee fb90 	bl	800cb88 <osKernelGetTickCount>
 801e468:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d013      	beq.n	801e498 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	6818      	ldr	r0, [r3, #0]
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	2200      	movs	r2, #0
 801e478:	68b9      	ldr	r1, [r7, #8]
 801e47a:	f7ef f85b 	bl	800d534 <osMessageQueueGet>
 801e47e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801e480:	693b      	ldr	r3, [r7, #16]
 801e482:	2b00      	cmp	r3, #0
 801e484:	d105      	bne.n	801e492 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801e486:	f7ee fb7f 	bl	800cb88 <osKernelGetTickCount>
 801e48a:	4602      	mov	r2, r0
 801e48c:	697b      	ldr	r3, [r7, #20]
 801e48e:	1ad3      	subs	r3, r2, r3
 801e490:	e00f      	b.n	801e4b2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e496:	e00c      	b.n	801e4b2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801e498:	68fb      	ldr	r3, [r7, #12]
 801e49a:	6818      	ldr	r0, [r3, #0]
 801e49c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e4a0:	2200      	movs	r2, #0
 801e4a2:	68b9      	ldr	r1, [r7, #8]
 801e4a4:	f7ef f846 	bl	800d534 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801e4a8:	f7ee fb6e 	bl	800cb88 <osKernelGetTickCount>
 801e4ac:	4602      	mov	r2, r0
 801e4ae:	697b      	ldr	r3, [r7, #20]
 801e4b0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	3718      	adds	r7, #24
 801e4b6:	46bd      	mov	sp, r7
 801e4b8:	bd80      	pop	{r7, pc}

0801e4ba <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e4ba:	b580      	push	{r7, lr}
 801e4bc:	b082      	sub	sp, #8
 801e4be:	af00      	add	r7, sp, #0
 801e4c0:	6078      	str	r0, [r7, #4]
 801e4c2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	6818      	ldr	r0, [r3, #0]
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	2200      	movs	r2, #0
 801e4cc:	6839      	ldr	r1, [r7, #0]
 801e4ce:	f7ef f831 	bl	800d534 <osMessageQueueGet>
 801e4d2:	4603      	mov	r3, r0
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d101      	bne.n	801e4dc <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801e4d8:	2300      	movs	r3, #0
 801e4da:	e001      	b.n	801e4e0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e4dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	3708      	adds	r7, #8
 801e4e4:	46bd      	mov	sp, r7
 801e4e6:	bd80      	pop	{r7, pc}

0801e4e8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e4e8:	b480      	push	{r7}
 801e4ea:	b083      	sub	sp, #12
 801e4ec:	af00      	add	r7, sp, #0
 801e4ee:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d101      	bne.n	801e4fc <sys_mbox_valid+0x14>
    return 0;
 801e4f8:	2300      	movs	r3, #0
 801e4fa:	e000      	b.n	801e4fe <sys_mbox_valid+0x16>
  else
    return 1;
 801e4fc:	2301      	movs	r3, #1
}
 801e4fe:	4618      	mov	r0, r3
 801e500:	370c      	adds	r7, #12
 801e502:	46bd      	mov	sp, r7
 801e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e508:	4770      	bx	lr

0801e50a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e50a:	b480      	push	{r7}
 801e50c:	b083      	sub	sp, #12
 801e50e:	af00      	add	r7, sp, #0
 801e510:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	2200      	movs	r2, #0
 801e516:	601a      	str	r2, [r3, #0]
}
 801e518:	bf00      	nop
 801e51a:	370c      	adds	r7, #12
 801e51c:	46bd      	mov	sp, r7
 801e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e522:	4770      	bx	lr

0801e524 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e524:	b580      	push	{r7, lr}
 801e526:	b082      	sub	sp, #8
 801e528:	af00      	add	r7, sp, #0
 801e52a:	6078      	str	r0, [r7, #4]
 801e52c:	460b      	mov	r3, r1
 801e52e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801e530:	78fb      	ldrb	r3, [r7, #3]
 801e532:	2200      	movs	r2, #0
 801e534:	4619      	mov	r1, r3
 801e536:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801e53a:	f7ee fd71 	bl	800d020 <osSemaphoreNew>
 801e53e:	4602      	mov	r2, r0
 801e540:	687b      	ldr	r3, [r7, #4]
 801e542:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d10a      	bne.n	801e562 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801e54c:	4b17      	ldr	r3, [pc, #92]	@ (801e5ac <sys_sem_new+0x88>)
 801e54e:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801e552:	3301      	adds	r3, #1
 801e554:	b29a      	uxth	r2, r3
 801e556:	4b15      	ldr	r3, [pc, #84]	@ (801e5ac <sys_sem_new+0x88>)
 801e558:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */
    return ERR_MEM;
 801e55c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e560:	e01f      	b.n	801e5a2 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 801e562:	78fb      	ldrb	r3, [r7, #3]
 801e564:	2b00      	cmp	r3, #0
 801e566:	d105      	bne.n	801e574 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	2100      	movs	r1, #0
 801e56e:	4618      	mov	r0, r3
 801e570:	f7ee fdf2 	bl	800d158 <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801e574:	4b0d      	ldr	r3, [pc, #52]	@ (801e5ac <sys_sem_new+0x88>)
 801e576:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801e57a:	3301      	adds	r3, #1
 801e57c:	b29a      	uxth	r2, r3
 801e57e:	4b0b      	ldr	r3, [pc, #44]	@ (801e5ac <sys_sem_new+0x88>)
 801e580:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801e584:	4b09      	ldr	r3, [pc, #36]	@ (801e5ac <sys_sem_new+0x88>)
 801e586:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	@ 0xea
 801e58a:	4b08      	ldr	r3, [pc, #32]	@ (801e5ac <sys_sem_new+0x88>)
 801e58c:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801e590:	429a      	cmp	r2, r3
 801e592:	d205      	bcs.n	801e5a0 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801e594:	4b05      	ldr	r3, [pc, #20]	@ (801e5ac <sys_sem_new+0x88>)
 801e596:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 801e59a:	4b04      	ldr	r3, [pc, #16]	@ (801e5ac <sys_sem_new+0x88>)
 801e59c:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e5a0:	2300      	movs	r3, #0
}
 801e5a2:	4618      	mov	r0, r3
 801e5a4:	3708      	adds	r7, #8
 801e5a6:	46bd      	mov	sp, r7
 801e5a8:	bd80      	pop	{r7, pc}
 801e5aa:	bf00      	nop
 801e5ac:	2002d2b0 	.word	0x2002d2b0

0801e5b0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e5b0:	b580      	push	{r7, lr}
 801e5b2:	b084      	sub	sp, #16
 801e5b4:	af00      	add	r7, sp, #0
 801e5b6:	6078      	str	r0, [r7, #4]
 801e5b8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801e5ba:	f7ee fae5 	bl	800cb88 <osKernelGetTickCount>
 801e5be:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801e5c0:	683b      	ldr	r3, [r7, #0]
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d011      	beq.n	801e5ea <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	6839      	ldr	r1, [r7, #0]
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	f7ee fdc3 	bl	800d158 <osSemaphoreAcquire>
 801e5d2:	4603      	mov	r3, r0
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d105      	bne.n	801e5e4 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801e5d8:	f7ee fad6 	bl	800cb88 <osKernelGetTickCount>
 801e5dc:	4602      	mov	r2, r0
 801e5de:	68fb      	ldr	r3, [r7, #12]
 801e5e0:	1ad3      	subs	r3, r2, r3
 801e5e2:	e012      	b.n	801e60a <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e5e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e5e8:	e00f      	b.n	801e60a <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801e5ea:	bf00      	nop
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	f7ee fdaf 	bl	800d158 <osSemaphoreAcquire>
 801e5fa:	4603      	mov	r3, r0
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d1f5      	bne.n	801e5ec <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801e600:	f7ee fac2 	bl	800cb88 <osKernelGetTickCount>
 801e604:	4602      	mov	r2, r0
 801e606:	68fb      	ldr	r3, [r7, #12]
 801e608:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e60a:	4618      	mov	r0, r3
 801e60c:	3710      	adds	r7, #16
 801e60e:	46bd      	mov	sp, r7
 801e610:	bd80      	pop	{r7, pc}

0801e612 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e612:	b580      	push	{r7, lr}
 801e614:	b082      	sub	sp, #8
 801e616:	af00      	add	r7, sp, #0
 801e618:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	681b      	ldr	r3, [r3, #0]
 801e61e:	4618      	mov	r0, r3
 801e620:	f7ee fe00 	bl	800d224 <osSemaphoreRelease>
}
 801e624:	bf00      	nop
 801e626:	3708      	adds	r7, #8
 801e628:	46bd      	mov	sp, r7
 801e62a:	bd80      	pop	{r7, pc}

0801e62c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e62c:	b580      	push	{r7, lr}
 801e62e:	b082      	sub	sp, #8
 801e630:	af00      	add	r7, sp, #0
 801e632:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801e634:	4b08      	ldr	r3, [pc, #32]	@ (801e658 <sys_sem_free+0x2c>)
 801e636:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801e63a:	3b01      	subs	r3, #1
 801e63c:	b29a      	uxth	r2, r3
 801e63e:	4b06      	ldr	r3, [pc, #24]	@ (801e658 <sys_sem_free+0x2c>)
 801e640:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	681b      	ldr	r3, [r3, #0]
 801e648:	4618      	mov	r0, r3
 801e64a:	f7ee fe43 	bl	800d2d4 <osSemaphoreDelete>
}
 801e64e:	bf00      	nop
 801e650:	3708      	adds	r7, #8
 801e652:	46bd      	mov	sp, r7
 801e654:	bd80      	pop	{r7, pc}
 801e656:	bf00      	nop
 801e658:	2002d2b0 	.word	0x2002d2b0

0801e65c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e65c:	b480      	push	{r7}
 801e65e:	b083      	sub	sp, #12
 801e660:	af00      	add	r7, sp, #0
 801e662:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d101      	bne.n	801e670 <sys_sem_valid+0x14>
    return 0;
 801e66c:	2300      	movs	r3, #0
 801e66e:	e000      	b.n	801e672 <sys_sem_valid+0x16>
  else
    return 1;
 801e670:	2301      	movs	r3, #1
}
 801e672:	4618      	mov	r0, r3
 801e674:	370c      	adds	r7, #12
 801e676:	46bd      	mov	sp, r7
 801e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e67c:	4770      	bx	lr

0801e67e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e67e:	b480      	push	{r7}
 801e680:	b083      	sub	sp, #12
 801e682:	af00      	add	r7, sp, #0
 801e684:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	2200      	movs	r2, #0
 801e68a:	601a      	str	r2, [r3, #0]
}
 801e68c:	bf00      	nop
 801e68e:	370c      	adds	r7, #12
 801e690:	46bd      	mov	sp, r7
 801e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e696:	4770      	bx	lr

0801e698 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801e69c:	2000      	movs	r0, #0
 801e69e:	f7ee fb77 	bl	800cd90 <osMutexNew>
 801e6a2:	4603      	mov	r3, r0
 801e6a4:	4a01      	ldr	r2, [pc, #4]	@ (801e6ac <sys_init+0x14>)
 801e6a6:	6013      	str	r3, [r2, #0]
#endif
}
 801e6a8:	bf00      	nop
 801e6aa:	bd80      	pop	{r7, pc}
 801e6ac:	2002d508 	.word	0x2002d508

0801e6b0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e6b0:	b580      	push	{r7, lr}
 801e6b2:	b082      	sub	sp, #8
 801e6b4:	af00      	add	r7, sp, #0
 801e6b6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801e6b8:	2000      	movs	r0, #0
 801e6ba:	f7ee fb69 	bl	800cd90 <osMutexNew>
 801e6be:	4602      	mov	r2, r0
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	681b      	ldr	r3, [r3, #0]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d10a      	bne.n	801e6e2 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801e6cc:	4b12      	ldr	r3, [pc, #72]	@ (801e718 <sys_mutex_new+0x68>)
 801e6ce:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801e6d2:	3301      	adds	r3, #1
 801e6d4:	b29a      	uxth	r2, r3
 801e6d6:	4b10      	ldr	r3, [pc, #64]	@ (801e718 <sys_mutex_new+0x68>)
 801e6d8:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
#endif /* SYS_STATS */
    return ERR_MEM;
 801e6dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e6e0:	e016      	b.n	801e710 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801e6e2:	4b0d      	ldr	r3, [pc, #52]	@ (801e718 <sys_mutex_new+0x68>)
 801e6e4:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 801e6e8:	3301      	adds	r3, #1
 801e6ea:	b29a      	uxth	r2, r3
 801e6ec:	4b0a      	ldr	r3, [pc, #40]	@ (801e718 <sys_mutex_new+0x68>)
 801e6ee:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801e6f2:	4b09      	ldr	r3, [pc, #36]	@ (801e718 <sys_mutex_new+0x68>)
 801e6f4:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	@ 0xf0
 801e6f8:	4b07      	ldr	r3, [pc, #28]	@ (801e718 <sys_mutex_new+0x68>)
 801e6fa:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 801e6fe:	429a      	cmp	r2, r3
 801e700:	d205      	bcs.n	801e70e <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801e702:	4b05      	ldr	r3, [pc, #20]	@ (801e718 <sys_mutex_new+0x68>)
 801e704:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 801e708:	4b03      	ldr	r3, [pc, #12]	@ (801e718 <sys_mutex_new+0x68>)
 801e70a:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e70e:	2300      	movs	r3, #0
}
 801e710:	4618      	mov	r0, r3
 801e712:	3708      	adds	r7, #8
 801e714:	46bd      	mov	sp, r7
 801e716:	bd80      	pop	{r7, pc}
 801e718:	2002d2b0 	.word	0x2002d2b0

0801e71c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e71c:	b580      	push	{r7, lr}
 801e71e:	b082      	sub	sp, #8
 801e720:	af00      	add	r7, sp, #0
 801e722:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	681b      	ldr	r3, [r3, #0]
 801e728:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e72c:	4618      	mov	r0, r3
 801e72e:	f7ee fbc9 	bl	800cec4 <osMutexAcquire>
#endif
}
 801e732:	bf00      	nop
 801e734:	3708      	adds	r7, #8
 801e736:	46bd      	mov	sp, r7
 801e738:	bd80      	pop	{r7, pc}

0801e73a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e73a:	b580      	push	{r7, lr}
 801e73c:	b082      	sub	sp, #8
 801e73e:	af00      	add	r7, sp, #0
 801e740:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	4618      	mov	r0, r3
 801e748:	f7ee fc1a 	bl	800cf80 <osMutexRelease>
}
 801e74c:	bf00      	nop
 801e74e:	3708      	adds	r7, #8
 801e750:	46bd      	mov	sp, r7
 801e752:	bd80      	pop	{r7, pc}

0801e754 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e754:	b580      	push	{r7, lr}
 801e756:	b08e      	sub	sp, #56	@ 0x38
 801e758:	af00      	add	r7, sp, #0
 801e75a:	60f8      	str	r0, [r7, #12]
 801e75c:	60b9      	str	r1, [r7, #8]
 801e75e:	607a      	str	r2, [r7, #4]
 801e760:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801e762:	f107 0314 	add.w	r3, r7, #20
 801e766:	2224      	movs	r2, #36	@ 0x24
 801e768:	2100      	movs	r1, #0
 801e76a:	4618      	mov	r0, r3
 801e76c:	f001 fb96 	bl	801fe9c <memset>
 801e770:	68fb      	ldr	r3, [r7, #12]
 801e772:	617b      	str	r3, [r7, #20]
 801e774:	683b      	ldr	r3, [r7, #0]
 801e776:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e77a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801e77c:	f107 0314 	add.w	r3, r7, #20
 801e780:	461a      	mov	r2, r3
 801e782:	6879      	ldr	r1, [r7, #4]
 801e784:	68b8      	ldr	r0, [r7, #8]
 801e786:	f7ee fa27 	bl	800cbd8 <osThreadNew>
 801e78a:	4603      	mov	r3, r0
#endif
}
 801e78c:	4618      	mov	r0, r3
 801e78e:	3738      	adds	r7, #56	@ 0x38
 801e790:	46bd      	mov	sp, r7
 801e792:	bd80      	pop	{r7, pc}

0801e794 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e794:	b580      	push	{r7, lr}
 801e796:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801e798:	4b04      	ldr	r3, [pc, #16]	@ (801e7ac <sys_arch_protect+0x18>)
 801e79a:	681b      	ldr	r3, [r3, #0]
 801e79c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e7a0:	4618      	mov	r0, r3
 801e7a2:	f7ee fb8f 	bl	800cec4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801e7a6:	2301      	movs	r3, #1
}
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	bd80      	pop	{r7, pc}
 801e7ac:	2002d508 	.word	0x2002d508

0801e7b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e7b0:	b580      	push	{r7, lr}
 801e7b2:	b082      	sub	sp, #8
 801e7b4:	af00      	add	r7, sp, #0
 801e7b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e7b8:	4b04      	ldr	r3, [pc, #16]	@ (801e7cc <sys_arch_unprotect+0x1c>)
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	4618      	mov	r0, r3
 801e7be:	f7ee fbdf 	bl	800cf80 <osMutexRelease>
}
 801e7c2:	bf00      	nop
 801e7c4:	3708      	adds	r7, #8
 801e7c6:	46bd      	mov	sp, r7
 801e7c8:	bd80      	pop	{r7, pc}
 801e7ca:	bf00      	nop
 801e7cc:	2002d508 	.word	0x2002d508

0801e7d0 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b0ca      	sub	sp, #296	@ 0x128
 801e7d4:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;
	osStatus_t status;

	adcReadySem = osSemaphoreNew(1, 0, NULL);
 801e7d6:	2200      	movs	r2, #0
 801e7d8:	2100      	movs	r1, #0
 801e7da:	2001      	movs	r0, #1
 801e7dc:	f7ee fc20 	bl	800d020 <osSemaphoreNew>
 801e7e0:	4603      	mov	r3, r0
 801e7e2:	4a3c      	ldr	r2, [pc, #240]	@ (801e8d4 <AdcTestTask+0x104>)
 801e7e4:	6013      	str	r3, [r2, #0]

	while (1)
	{
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801e7e6:	4b3c      	ldr	r3, [pc, #240]	@ (801e8d8 <AdcTestTask+0x108>)
 801e7e8:	6818      	ldr	r0, [r3, #0]
 801e7ea:	f107 0110 	add.w	r1, r7, #16
 801e7ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e7f2:	2200      	movs	r2, #0
 801e7f4:	f7ee fe9e 	bl	800d534 <osMessageQueueGet>
 801e7f8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 801e7fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e800:	2b00      	cmp	r3, #0
 801e802:	d155      	bne.n	801e8b0 <AdcTestTask+0xe0>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801e804:	2300      	movs	r3, #0
 801e806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e80a:	e00d      	b.n	801e828 <AdcTestTask+0x58>
			{
				result = ADC_Test_Perform();
 801e80c:	f000 f870 	bl	801e8f0 <ADC_Test_Perform>
 801e810:	4603      	mov	r3, r0
 801e812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801e816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e81a:	2bff      	cmp	r3, #255	@ 0xff
 801e81c:	d00e      	beq.n	801e83c <AdcTestTask+0x6c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801e81e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e822:	3301      	adds	r3, #1
 801e824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e828:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e82c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e830:	7b1b      	ldrb	r3, [r3, #12]
 801e832:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801e836:	429a      	cmp	r2, r3
 801e838:	d3e8      	bcc.n	801e80c <AdcTestTask+0x3c>
 801e83a:	e000      	b.n	801e83e <AdcTestTask+0x6e>
					break;
 801e83c:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801e83e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e842:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801e846:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801e84a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801e84e:	6812      	ldr	r2, [r2, #0]
 801e850:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801e852:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e856:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e85a:	889a      	ldrh	r2, [r3, #4]
 801e85c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e860:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801e864:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801e866:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e86a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801e86e:	689a      	ldr	r2, [r3, #8]
 801e870:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e874:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801e878:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801e87a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801e87e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801e882:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801e886:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("ADC test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801e888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e88c:	2b01      	cmp	r3, #1
 801e88e:	d101      	bne.n	801e894 <AdcTestTask+0xc4>
 801e890:	4b12      	ldr	r3, [pc, #72]	@ (801e8dc <AdcTestTask+0x10c>)
 801e892:	e000      	b.n	801e896 <AdcTestTask+0xc6>
 801e894:	4b12      	ldr	r3, [pc, #72]	@ (801e8e0 <AdcTestTask+0x110>)
 801e896:	4619      	mov	r1, r3
 801e898:	4812      	ldr	r0, [pc, #72]	@ (801e8e4 <AdcTestTask+0x114>)
 801e89a:	f001 f9a7 	bl	801fbec <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801e89e:	4b12      	ldr	r3, [pc, #72]	@ (801e8e8 <AdcTestTask+0x118>)
 801e8a0:	6818      	ldr	r0, [r3, #0]
 801e8a2:	4639      	mov	r1, r7
 801e8a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e8a8:	2200      	movs	r2, #0
 801e8aa:	f7ee fdcf 	bl	800d44c <osMessageQueuePut>
 801e8ae:	e79a      	b.n	801e7e6 <AdcTestTask+0x16>
		}
		else if (status == osErrorTimeout)
 801e8b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e8b4:	f113 0f02 	cmn.w	r3, #2
 801e8b8:	d103      	bne.n	801e8c2 <AdcTestTask+0xf2>
		{
			osDelay(1);
 801e8ba:	2001      	movs	r0, #1
 801e8bc:	f7ee fa3a 	bl	800cd34 <osDelay>
 801e8c0:	e791      	b.n	801e7e6 <AdcTestTask+0x16>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 801e8c2:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801e8c6:	4809      	ldr	r0, [pc, #36]	@ (801e8ec <AdcTestTask+0x11c>)
 801e8c8:	f001 f990 	bl	801fbec <iprintf>
			osDelay(1);
 801e8cc:	2001      	movs	r0, #1
 801e8ce:	f7ee fa31 	bl	800cd34 <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801e8d2:	e788      	b.n	801e7e6 <AdcTestTask+0x16>
 801e8d4:	2002d50c 	.word	0x2002d50c
 801e8d8:	200002f0 	.word	0x200002f0
 801e8dc:	080241d8 	.word	0x080241d8
 801e8e0:	080241e0 	.word	0x080241e0
 801e8e4:	080241e8 	.word	0x080241e8
 801e8e8:	200002e0 	.word	0x200002e0
 801e8ec:	080241f8 	.word	0x080241f8

0801e8f0 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 801e8f0:	b580      	push	{r7, lr}
 801e8f2:	b082      	sub	sp, #8
 801e8f4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801e8f6:	2201      	movs	r2, #1
 801e8f8:	4913      	ldr	r1, [pc, #76]	@ (801e948 <ADC_Test_Perform+0x58>)
 801e8fa:	4814      	ldr	r0, [pc, #80]	@ (801e94c <ADC_Test_Perform+0x5c>)
 801e8fc:	f7e3 fdba 	bl	8002474 <HAL_ADC_Start_DMA>
 801e900:	4603      	mov	r3, r0
 801e902:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801e904:	79fb      	ldrb	r3, [r7, #7]
 801e906:	2b00      	cmp	r3, #0
 801e908:	d004      	beq.n	801e914 <ADC_Test_Perform+0x24>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
 801e90a:	4811      	ldr	r0, [pc, #68]	@ (801e950 <ADC_Test_Perform+0x60>)
 801e90c:	f001 f9d6 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801e910:	23ff      	movs	r3, #255	@ 0xff
 801e912:	e015      	b.n	801e940 <ADC_Test_Perform+0x50>
	}

	if (osSemaphoreAcquire(adcReadySem, 10) != osOK) {
 801e914:	4b0f      	ldr	r3, [pc, #60]	@ (801e954 <ADC_Test_Perform+0x64>)
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	210a      	movs	r1, #10
 801e91a:	4618      	mov	r0, r3
 801e91c:	f7ee fc1c 	bl	800d158 <osSemaphoreAcquire>
 801e920:	4603      	mov	r3, r0
 801e922:	2b00      	cmp	r3, #0
 801e924:	d004      	beq.n	801e930 <ADC_Test_Perform+0x40>
#ifdef PRINT_TESTS_DEBUG
		printf("ADC semaphore timeout\n");
 801e926:	480c      	ldr	r0, [pc, #48]	@ (801e958 <ADC_Test_Perform+0x68>)
 801e928:	f001 f9c8 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801e92c:	23ff      	movs	r3, #255	@ 0xff
 801e92e:	e007      	b.n	801e940 <ADC_Test_Perform+0x50>

#ifdef PRINT_TESTS_DEBUG2
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801e930:	4b05      	ldr	r3, [pc, #20]	@ (801e948 <ADC_Test_Perform+0x58>)
 801e932:	881b      	ldrh	r3, [r3, #0]
 801e934:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801e938:	d301      	bcc.n	801e93e <ADC_Test_Perform+0x4e>
 801e93a:	2301      	movs	r3, #1
 801e93c:	e000      	b.n	801e940 <ADC_Test_Perform+0x50>

	return TEST_FAILED;
 801e93e:	23ff      	movs	r3, #255	@ 0xff
}
 801e940:	4618      	mov	r0, r3
 801e942:	3708      	adds	r7, #8
 801e944:	46bd      	mov	sp, r7
 801e946:	bd80      	pop	{r7, pc}
 801e948:	2002d510 	.word	0x2002d510
 801e94c:	200001e8 	.word	0x200001e8
 801e950:	08024210 	.word	0x08024210
 801e954:	2002d50c 	.word	0x2002d50c
 801e958:	08024228 	.word	0x08024228

0801e95c <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801e95c:	b580      	push	{r7, lr}
 801e95e:	b082      	sub	sp, #8
 801e960:	af00      	add	r7, sp, #0
 801e962:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(adcReadySem);
 801e964:	4b09      	ldr	r3, [pc, #36]	@ (801e98c <HAL_ADC_ConvCpltCallback+0x30>)
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	4618      	mov	r0, r3
 801e96a:	f7ee fc5b 	bl	800d224 <osSemaphoreRelease>
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801e96e:	4808      	ldr	r0, [pc, #32]	@ (801e990 <HAL_ADC_ConvCpltCallback+0x34>)
 801e970:	f7e3 fe7e 	bl	8002670 <HAL_ADC_Stop_DMA>
 801e974:	4603      	mov	r3, r0
 801e976:	2b00      	cmp	r3, #0
 801e978:	d004      	beq.n	801e984 <HAL_ADC_ConvCpltCallback+0x28>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
 801e97a:	4806      	ldr	r0, [pc, #24]	@ (801e994 <HAL_ADC_ConvCpltCallback+0x38>)
 801e97c:	f001 f99e 	bl	801fcbc <puts>
#endif
		Error_Handler();
 801e980:	f7e2 fc48 	bl	8001214 <Error_Handler>
	}
}
 801e984:	bf00      	nop
 801e986:	3708      	adds	r7, #8
 801e988:	46bd      	mov	sp, r7
 801e98a:	bd80      	pop	{r7, pc}
 801e98c:	2002d50c 	.word	0x2002d50c
 801e990:	200001e8 	.word	0x200001e8
 801e994:	08024240 	.word	0x08024240

0801e998 <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 801e998:	b580      	push	{r7, lr}
 801e99a:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801e99e:	af00      	add	r7, sp, #0
	while(1)
	{
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801e9a0:	4b53      	ldr	r3, [pc, #332]	@ (801eaf0 <TestDispatcher+0x158>)
 801e9a2:	6818      	ldr	r0, [r3, #0]
 801e9a4:	4639      	mov	r1, r7
 801e9a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e9aa:	2200      	movs	r2, #0
 801e9ac:	f7ee fdc2 	bl	800d534 <osMessageQueueGet>
 801e9b0:	4603      	mov	r3, r0
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d1f4      	bne.n	801e9a0 <TestDispatcher+0x8>
		{
			// load test_data
			test_data.addr = in_msg.addr;
 801e9b6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e9ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e9be:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801e9c2:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801e9c6:	6812      	ldr	r2, [r2, #0]
 801e9c8:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801e9ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e9ce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e9d2:	889a      	ldrh	r2, [r3, #4]
 801e9d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e9d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e9dc:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801e9de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e9e2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e9e6:	689a      	ldr	r2, [r3, #8]
 801e9e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e9ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e9f0:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801e9f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801e9f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801e9fa:	7b5a      	ldrb	r2, [r3, #13]
 801e9fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ea00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ea04:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801ea06:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ea0a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ea0e:	7b9a      	ldrb	r2, [r3, #14]
 801ea10:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ea14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ea18:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801ea1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ea1e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ea22:	7b9b      	ldrb	r3, [r3, #14]
 801ea24:	461a      	mov	r2, r3
 801ea26:	463b      	mov	r3, r7
 801ea28:	f103 010f 	add.w	r1, r3, #15
 801ea2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801ea30:	330e      	adds	r3, #14
 801ea32:	4618      	mov	r0, r3
 801ea34:	f001 fb05 	bl	8020042 <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801ea38:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ea3c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ea40:	7b1b      	ldrb	r3, [r3, #12]
 801ea42:	f003 0302 	and.w	r3, r3, #2
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d008      	beq.n	801ea5c <TestDispatcher+0xc4>
			{
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801ea4a:	4b2a      	ldr	r3, [pc, #168]	@ (801eaf4 <TestDispatcher+0x15c>)
 801ea4c:	6818      	ldr	r0, [r3, #0]
 801ea4e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801ea52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ea56:	2200      	movs	r2, #0
 801ea58:	f7ee fcf8 	bl	800d44c <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801ea5c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ea60:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ea64:	7b1b      	ldrb	r3, [r3, #12]
 801ea66:	f003 0308 	and.w	r3, r3, #8
 801ea6a:	2b00      	cmp	r3, #0
 801ea6c:	d008      	beq.n	801ea80 <TestDispatcher+0xe8>
			{
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801ea6e:	4b22      	ldr	r3, [pc, #136]	@ (801eaf8 <TestDispatcher+0x160>)
 801ea70:	6818      	ldr	r0, [r3, #0]
 801ea72:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801ea76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ea7a:	2200      	movs	r2, #0
 801ea7c:	f7ee fce6 	bl	800d44c <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_SPI)
 801ea80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ea84:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ea88:	7b1b      	ldrb	r3, [r3, #12]
 801ea8a:	f003 0304 	and.w	r3, r3, #4
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d008      	beq.n	801eaa4 <TestDispatcher+0x10c>
			{
				osMessageQueuePut(spiQueueHandle, &test_data, 0, osWaitForever);
 801ea92:	4b1a      	ldr	r3, [pc, #104]	@ (801eafc <TestDispatcher+0x164>)
 801ea94:	6818      	ldr	r0, [r3, #0]
 801ea96:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801ea9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ea9e:	2200      	movs	r2, #0
 801eaa0:	f7ee fcd4 	bl	800d44c <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_ADC)
 801eaa4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801eaa8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801eaac:	7b1b      	ldrb	r3, [r3, #12]
 801eaae:	f003 0310 	and.w	r3, r3, #16
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d008      	beq.n	801eac8 <TestDispatcher+0x130>
			{
				osMessageQueuePut(adcQueueHandle, &test_data, 0, osWaitForever);
 801eab6:	4b12      	ldr	r3, [pc, #72]	@ (801eb00 <TestDispatcher+0x168>)
 801eab8:	6818      	ldr	r0, [r3, #0]
 801eaba:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801eabe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eac2:	2200      	movs	r2, #0
 801eac4:	f7ee fcc2 	bl	800d44c <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_TIM)
 801eac8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801eacc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ead0:	7b1b      	ldrb	r3, [r3, #12]
 801ead2:	f003 0301 	and.w	r3, r3, #1
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	f43f af62 	beq.w	801e9a0 <TestDispatcher+0x8>
			{
				osMessageQueuePut(timQueueHandle, &test_data, 0, osWaitForever);
 801eadc:	4b09      	ldr	r3, [pc, #36]	@ (801eb04 <TestDispatcher+0x16c>)
 801eade:	6818      	ldr	r0, [r3, #0]
 801eae0:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801eae4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eae8:	2200      	movs	r2, #0
 801eaea:	f7ee fcaf 	bl	800d44c <osMessageQueuePut>
	{
 801eaee:	e757      	b.n	801e9a0 <TestDispatcher+0x8>
 801eaf0:	200002dc 	.word	0x200002dc
 801eaf4:	200002e4 	.word	0x200002e4
 801eaf8:	200002e8 	.word	0x200002e8
 801eafc:	200002ec 	.word	0x200002ec
 801eb00:	200002f0 	.word	0x200002f0
 801eb04:	200002f4 	.word	0x200002f4

0801eb08 <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801eb08:	b580      	push	{r7, lr}
 801eb0a:	b086      	sub	sp, #24
 801eb0c:	af00      	add	r7, sp, #0
 801eb0e:	60f8      	str	r0, [r7, #12]
 801eb10:	607a      	str	r2, [r7, #4]
 801eb12:	461a      	mov	r2, r3
 801eb14:	460b      	mov	r3, r1
 801eb16:	72fb      	strb	r3, [r7, #11]
 801eb18:	4613      	mov	r3, r2
 801eb1a:	72bb      	strb	r3, [r7, #10]
	if (crcMutex == NULL) crcMutex = osMutexNew(NULL);
 801eb1c:	4b17      	ldr	r3, [pc, #92]	@ (801eb7c <Match_CRC+0x74>)
 801eb1e:	681b      	ldr	r3, [r3, #0]
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	d105      	bne.n	801eb30 <Match_CRC+0x28>
 801eb24:	2000      	movs	r0, #0
 801eb26:	f7ee f933 	bl	800cd90 <osMutexNew>
 801eb2a:	4603      	mov	r3, r0
 801eb2c:	4a13      	ldr	r2, [pc, #76]	@ (801eb7c <Match_CRC+0x74>)
 801eb2e:	6013      	str	r3, [r2, #0]

	osMutexAcquire(crcMutex, osWaitForever);
 801eb30:	4b12      	ldr	r3, [pc, #72]	@ (801eb7c <Match_CRC+0x74>)
 801eb32:	681b      	ldr	r3, [r3, #0]
 801eb34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801eb38:	4618      	mov	r0, r3
 801eb3a:	f7ee f9c3 	bl	800cec4 <osMutexAcquire>

	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801eb3e:	7afb      	ldrb	r3, [r7, #11]
 801eb40:	461a      	mov	r2, r3
 801eb42:	68f9      	ldr	r1, [r7, #12]
 801eb44:	480e      	ldr	r0, [pc, #56]	@ (801eb80 <Match_CRC+0x78>)
 801eb46:	f7e4 fa1d 	bl	8002f84 <HAL_CRC_Calculate>
 801eb4a:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801eb4c:	7abb      	ldrb	r3, [r7, #10]
 801eb4e:	461a      	mov	r2, r3
 801eb50:	6879      	ldr	r1, [r7, #4]
 801eb52:	480b      	ldr	r0, [pc, #44]	@ (801eb80 <Match_CRC+0x78>)
 801eb54:	f7e4 fa16 	bl	8002f84 <HAL_CRC_Calculate>
 801eb58:	6138      	str	r0, [r7, #16]

	osMutexRelease(crcMutex);
 801eb5a:	4b08      	ldr	r3, [pc, #32]	@ (801eb7c <Match_CRC+0x74>)
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	4618      	mov	r0, r3
 801eb60:	f7ee fa0e 	bl	800cf80 <osMutexRelease>

	if(buf1_crc == buf2_crc)
 801eb64:	697a      	ldr	r2, [r7, #20]
 801eb66:	693b      	ldr	r3, [r7, #16]
 801eb68:	429a      	cmp	r2, r3
 801eb6a:	d101      	bne.n	801eb70 <Match_CRC+0x68>
		return CRC_MATCH_OK;
 801eb6c:	2301      	movs	r3, #1
 801eb6e:	e000      	b.n	801eb72 <Match_CRC+0x6a>

	return CRC_MATCH_FAIL;
 801eb70:	2300      	movs	r3, #0
}
 801eb72:	4618      	mov	r0, r3
 801eb74:	3718      	adds	r7, #24
 801eb76:	46bd      	mov	sp, r7
 801eb78:	bd80      	pop	{r7, pc}
 801eb7a:	bf00      	nop
 801eb7c:	2002d710 	.word	0x2002d710
 801eb80:	20000290 	.word	0x20000290

0801eb84 <UDP_Listen>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Listen(void)
{
 801eb84:	b580      	push	{r7, lr}
 801eb86:	b0ca      	sub	sp, #296	@ 0x128
 801eb88:	af00      	add	r7, sp, #0
	void *raw_data;
	uint16_t len;
	InMsg_t in_msg;
	int n_read;

	conn_recv = netconn_new(NETCONN_UDP);
 801eb8a:	2200      	movs	r2, #0
 801eb8c:	2100      	movs	r1, #0
 801eb8e:	2020      	movs	r0, #32
 801eb90:	f7f2 f8d6 	bl	8010d40 <netconn_new_with_proto_and_callback>
 801eb94:	4603      	mov	r3, r0
 801eb96:	4a57      	ldr	r2, [pc, #348]	@ (801ecf4 <UDP_Listen+0x170>)
 801eb98:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 801eb9a:	4b56      	ldr	r3, [pc, #344]	@ (801ecf4 <UDP_Listen+0x170>)
 801eb9c:	681b      	ldr	r3, [r3, #0]
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d104      	bne.n	801ebac <UDP_Listen+0x28>
	{
		printf("error initializing UDP receive netconn\n");
 801eba2:	4855      	ldr	r0, [pc, #340]	@ (801ecf8 <UDP_Listen+0x174>)
 801eba4:	f001 f88a 	bl	801fcbc <puts>
		osThreadExit();
 801eba8:	f7ee f8bc 	bl	800cd24 <osThreadExit>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 801ebac:	4b51      	ldr	r3, [pc, #324]	@ (801ecf4 <UDP_Listen+0x170>)
 801ebae:	681b      	ldr	r3, [r3, #0]
 801ebb0:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801ebb4:	4951      	ldr	r1, [pc, #324]	@ (801ecfc <UDP_Listen+0x178>)
 801ebb6:	4618      	mov	r0, r3
 801ebb8:	f7f2 f97c 	bl	8010eb4 <netconn_bind>
 801ebbc:	4603      	mov	r3, r0
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d00c      	beq.n	801ebdc <UDP_Listen+0x58>
	{
		printf("error binding UDP port\n");
 801ebc2:	484f      	ldr	r0, [pc, #316]	@ (801ed00 <UDP_Listen+0x17c>)
 801ebc4:	f001 f87a 	bl	801fcbc <puts>
		netconn_delete(conn_recv);
 801ebc8:	4b4a      	ldr	r3, [pc, #296]	@ (801ecf4 <UDP_Listen+0x170>)
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	4618      	mov	r0, r3
 801ebce:	f7f2 f955 	bl	8010e7c <netconn_delete>
		conn_recv = NULL;
 801ebd2:	4b48      	ldr	r3, [pc, #288]	@ (801ecf4 <UDP_Listen+0x170>)
 801ebd4:	2200      	movs	r2, #0
 801ebd6:	601a      	str	r2, [r3, #0]
		osThreadExit();
 801ebd8:	f7ee f8a4 	bl	800cd24 <osThreadExit>
	}

	while (1)
	{
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 801ebdc:	4b45      	ldr	r3, [pc, #276]	@ (801ecf4 <UDP_Listen+0x170>)
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 801ebe4:	4611      	mov	r1, r2
 801ebe6:	4618      	mov	r0, r3
 801ebe8:	f7f2 fb18 	bl	801121c <netconn_recv>
 801ebec:	4603      	mov	r3, r0
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d17c      	bne.n	801ecec <UDP_Listen+0x168>
		{
			// Load in_msg
			in_msg.addr = *netbuf_fromaddr(buf);
 801ebf2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801ebf6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ebfa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ebfe:	6892      	ldr	r2, [r2, #8]
 801ec00:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 801ec02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ec06:	899a      	ldrh	r2, [r3, #12]
 801ec08:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ec0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ec10:	809a      	strh	r2, [r3, #4]

			netbuf_data(buf, &raw_data, &len);
 801ec12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ec16:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 801ec1a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 801ec1e:	4618      	mov	r0, r3
 801ec20:	f7f3 fed2 	bl	80129c8 <netbuf_data>

			n_read = 0;
 801ec24:	2300      	movs	r3, #0
 801ec26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 801ec2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	461a      	mov	r2, r3
 801ec32:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ec36:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ec3a:	609a      	str	r2, [r3, #8]
			n_read += sizeof(in_msg.test_id);
 801ec3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801ec40:	3304      	adds	r3, #4
 801ec42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

			memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 801ec46:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801ec4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801ec4e:	1c59      	adds	r1, r3, #1
 801ec50:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801ec54:	4413      	add	r3, r2
 801ec56:	781a      	ldrb	r2, [r3, #0]
 801ec58:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ec5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ec60:	731a      	strb	r2, [r3, #12]
			memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 801ec62:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801ec66:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801ec6a:	1c59      	adds	r1, r3, #1
 801ec6c:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801ec70:	4413      	add	r3, r2
 801ec72:	781a      	ldrb	r2, [r3, #0]
 801ec74:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ec78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ec7c:	735a      	strb	r2, [r3, #13]
			memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 801ec7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801ec82:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801ec86:	1c59      	adds	r1, r3, #1
 801ec88:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801ec8c:	4413      	add	r3, r2
 801ec8e:	781a      	ldrb	r2, [r3, #0]
 801ec90:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ec94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ec98:	739a      	strb	r2, [r3, #14]
			memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 801ec9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801ec9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801eca2:	18d1      	adds	r1, r2, r3
 801eca4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801eca8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ecac:	7b9b      	ldrb	r3, [r3, #14]
 801ecae:	461a      	mov	r2, r3
 801ecb0:	1d3b      	adds	r3, r7, #4
 801ecb2:	330f      	adds	r3, #15
 801ecb4:	4618      	mov	r0, r3
 801ecb6:	f001 f9c4 	bl	8020042 <memcpy>

			// send in_msg to InMsgQueue
			osStatus_t status = osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801ecba:	4b12      	ldr	r3, [pc, #72]	@ (801ed04 <UDP_Listen+0x180>)
 801ecbc:	6818      	ldr	r0, [r3, #0]
 801ecbe:	1d39      	adds	r1, r7, #4
 801ecc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ecc4:	2200      	movs	r2, #0
 801ecc6:	f7ee fbc1 	bl	800d44c <osMessageQueuePut>
 801ecca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
			if (status != osOK)
 801ecce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d004      	beq.n	801ece0 <UDP_Listen+0x15c>
			{
				printf("inMsg put error: %d\n", status);
 801ecd6:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801ecda:	480b      	ldr	r0, [pc, #44]	@ (801ed08 <UDP_Listen+0x184>)
 801ecdc:	f000 ff86 	bl	801fbec <iprintf>
			}

			netbuf_delete(buf);
 801ece0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ece4:	4618      	mov	r0, r3
 801ece6:	f7f3 fe05 	bl	80128f4 <netbuf_delete>
 801ecea:	e777      	b.n	801ebdc <UDP_Listen+0x58>
		}
		else
		{
			printf("netconn_recv failed\n");
 801ecec:	4807      	ldr	r0, [pc, #28]	@ (801ed0c <UDP_Listen+0x188>)
 801ecee:	f000 ffe5 	bl	801fcbc <puts>
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 801ecf2:	e773      	b.n	801ebdc <UDP_Listen+0x58>
 801ecf4:	2002d714 	.word	0x2002d714
 801ecf8:	08024254 	.word	0x08024254
 801ecfc:	08024960 	.word	0x08024960
 801ed00:	0802427c 	.word	0x0802427c
 801ed04:	200002dc 	.word	0x200002dc
 801ed08:	08024294 	.word	0x08024294
 801ed0c:	080242ac 	.word	0x080242ac

0801ed10 <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 801ed10:	b580      	push	{r7, lr}
 801ed12:	b086      	sub	sp, #24
 801ed14:	af00      	add	r7, sp, #0
	struct netbuf *buf;
	OutMsg_t out_msg;

	conn_send = netconn_new(NETCONN_UDP);
 801ed16:	2200      	movs	r2, #0
 801ed18:	2100      	movs	r1, #0
 801ed1a:	2020      	movs	r0, #32
 801ed1c:	f7f2 f810 	bl	8010d40 <netconn_new_with_proto_and_callback>
 801ed20:	4603      	mov	r3, r0
 801ed22:	4a20      	ldr	r2, [pc, #128]	@ (801eda4 <UDP_Response+0x94>)
 801ed24:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 801ed26:	4b1f      	ldr	r3, [pc, #124]	@ (801eda4 <UDP_Response+0x94>)
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	2b00      	cmp	r3, #0
 801ed2c:	d104      	bne.n	801ed38 <UDP_Response+0x28>
	{
		printf("error initializing UDP send netconn\n");
 801ed2e:	481e      	ldr	r0, [pc, #120]	@ (801eda8 <UDP_Response+0x98>)
 801ed30:	f000 ffc4 	bl	801fcbc <puts>
		osThreadExit();
 801ed34:	f7ed fff6 	bl	800cd24 <osThreadExit>
	}

	while(1)
	{
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801ed38:	4b1c      	ldr	r3, [pc, #112]	@ (801edac <UDP_Response+0x9c>)
 801ed3a:	6818      	ldr	r0, [r3, #0]
 801ed3c:	4639      	mov	r1, r7
 801ed3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ed42:	2200      	movs	r2, #0
 801ed44:	f7ee fbf6 	bl	800d534 <osMessageQueueGet>
 801ed48:	4603      	mov	r3, r0
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	d1f4      	bne.n	801ed38 <UDP_Response+0x28>
		{
			//Load response buffer
			buf = netbuf_new();
 801ed4e:	f7f3 fdbd 	bl	80128cc <netbuf_new>
 801ed52:	6178      	str	r0, [r7, #20]
			if (!buf)
 801ed54:	697b      	ldr	r3, [r7, #20]
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d103      	bne.n	801ed62 <UDP_Response+0x52>
			{
				printf("responder netbuf_new() failed");
 801ed5a:	4815      	ldr	r0, [pc, #84]	@ (801edb0 <UDP_Response+0xa0>)
 801ed5c:	f000 ff46 	bl	801fbec <iprintf>
				continue;
 801ed60:	e01f      	b.n	801eda2 <UDP_Response+0x92>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 801ed62:	2105      	movs	r1, #5
 801ed64:	6978      	ldr	r0, [r7, #20]
 801ed66:	f7f3 fde5 	bl	8012934 <netbuf_alloc>
 801ed6a:	6138      	str	r0, [r7, #16]
			if (!data)
 801ed6c:	693b      	ldr	r3, [r7, #16]
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d106      	bne.n	801ed80 <UDP_Response+0x70>
			{
				printf("responder netbuf_alloc() failed");
 801ed72:	4810      	ldr	r0, [pc, #64]	@ (801edb4 <UDP_Response+0xa4>)
 801ed74:	f000 ff3a 	bl	801fbec <iprintf>
			    netbuf_delete(buf);
 801ed78:	6978      	ldr	r0, [r7, #20]
 801ed7a:	f7f3 fdbb 	bl	80128f4 <netbuf_delete>
			    continue;
 801ed7e:	e010      	b.n	801eda2 <UDP_Response+0x92>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 801ed80:	68ba      	ldr	r2, [r7, #8]
 801ed82:	693b      	ldr	r3, [r7, #16]
 801ed84:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 801ed86:	693b      	ldr	r3, [r7, #16]
 801ed88:	3304      	adds	r3, #4
 801ed8a:	7b3a      	ldrb	r2, [r7, #12]
 801ed8c:	701a      	strb	r2, [r3, #0]

			// Send response
			netconn_sendto(conn_send, buf, &out_msg.addr, out_msg.port);
 801ed8e:	4b05      	ldr	r3, [pc, #20]	@ (801eda4 <UDP_Response+0x94>)
 801ed90:	6818      	ldr	r0, [r3, #0]
 801ed92:	88bb      	ldrh	r3, [r7, #4]
 801ed94:	463a      	mov	r2, r7
 801ed96:	6979      	ldr	r1, [r7, #20]
 801ed98:	f7f2 faba 	bl	8011310 <netconn_sendto>
			netbuf_delete(buf);
 801ed9c:	6978      	ldr	r0, [r7, #20]
 801ed9e:	f7f3 fda9 	bl	80128f4 <netbuf_delete>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801eda2:	e7c9      	b.n	801ed38 <UDP_Response+0x28>
 801eda4:	2002d718 	.word	0x2002d718
 801eda8:	080242c0 	.word	0x080242c0
 801edac:	200002e0 	.word	0x200002e0
 801edb0:	080242e4 	.word	0x080242e4
 801edb4:	08024304 	.word	0x08024304

0801edb8 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801edb8:	b580      	push	{r7, lr}
 801edba:	b0ca      	sub	sp, #296	@ 0x128
 801edbc:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	i2c1TxSem = osSemaphoreNew(1, 0, NULL);
 801edbe:	2200      	movs	r2, #0
 801edc0:	2100      	movs	r1, #0
 801edc2:	2001      	movs	r0, #1
 801edc4:	f7ee f92c 	bl	800d020 <osSemaphoreNew>
 801edc8:	4603      	mov	r3, r0
 801edca:	4a45      	ldr	r2, [pc, #276]	@ (801eee0 <I2cTestTask+0x128>)
 801edcc:	6013      	str	r3, [r2, #0]
	i2c1RxSem = osSemaphoreNew(1, 0, NULL);
 801edce:	2200      	movs	r2, #0
 801edd0:	2100      	movs	r1, #0
 801edd2:	2001      	movs	r0, #1
 801edd4:	f7ee f924 	bl	800d020 <osSemaphoreNew>
 801edd8:	4603      	mov	r3, r0
 801edda:	4a42      	ldr	r2, [pc, #264]	@ (801eee4 <I2cTestTask+0x12c>)
 801eddc:	6013      	str	r3, [r2, #0]
	i2c2TxSem = osSemaphoreNew(1, 0, NULL);
 801edde:	2200      	movs	r2, #0
 801ede0:	2100      	movs	r1, #0
 801ede2:	2001      	movs	r0, #1
 801ede4:	f7ee f91c 	bl	800d020 <osSemaphoreNew>
 801ede8:	4603      	mov	r3, r0
 801edea:	4a3f      	ldr	r2, [pc, #252]	@ (801eee8 <I2cTestTask+0x130>)
 801edec:	6013      	str	r3, [r2, #0]
	i2c2RxSem = osSemaphoreNew(1, 0, NULL);
 801edee:	2200      	movs	r2, #0
 801edf0:	2100      	movs	r1, #0
 801edf2:	2001      	movs	r0, #1
 801edf4:	f7ee f914 	bl	800d020 <osSemaphoreNew>
 801edf8:	4603      	mov	r3, r0
 801edfa:	4a3c      	ldr	r2, [pc, #240]	@ (801eeec <I2cTestTask+0x134>)
 801edfc:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801edfe:	4b3c      	ldr	r3, [pc, #240]	@ (801eef0 <I2cTestTask+0x138>)
 801ee00:	6818      	ldr	r0, [r3, #0]
 801ee02:	f107 0114 	add.w	r1, r7, #20
 801ee06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	f7ee fb92 	bl	800d534 <osMessageQueueGet>
 801ee10:	4603      	mov	r3, r0
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d15f      	bne.n	801eed6 <I2cTestTask+0x11e>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801ee16:	2300      	movs	r3, #0
 801ee18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ee1c:	e017      	b.n	801ee4e <I2cTestTask+0x96>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801ee1e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801ee26:	7b5a      	ldrb	r2, [r3, #13]
 801ee28:	f107 0314 	add.w	r3, r7, #20
 801ee2c:	330e      	adds	r3, #14
 801ee2e:	4611      	mov	r1, r2
 801ee30:	4618      	mov	r0, r3
 801ee32:	f000 f867 	bl	801ef04 <I2C_Test_Perform>
 801ee36:	4603      	mov	r3, r0
 801ee38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801ee3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee40:	2bff      	cmp	r3, #255	@ 0xff
 801ee42:	d00e      	beq.n	801ee62 <I2cTestTask+0xaa>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801ee44:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801ee48:	3301      	adds	r3, #1
 801ee4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ee4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801ee56:	7b1b      	ldrb	r3, [r3, #12]
 801ee58:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801ee5c:	429a      	cmp	r2, r3
 801ee5e:	d3de      	bcc.n	801ee1e <I2cTestTask+0x66>
 801ee60:	e000      	b.n	801ee64 <I2cTestTask+0xac>
					break;
 801ee62:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801ee64:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ee6c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801ee70:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801ee74:	6812      	ldr	r2, [r2, #0]
 801ee76:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801ee78:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee7c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801ee80:	889a      	ldrh	r2, [r3, #4]
 801ee82:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee86:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ee8a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801ee8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee90:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801ee94:	689a      	ldr	r2, [r3, #8]
 801ee96:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee9a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801ee9e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801eea0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801eea4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801eea8:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801eeac:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("I2C test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801eeae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eeb2:	2b01      	cmp	r3, #1
 801eeb4:	d101      	bne.n	801eeba <I2cTestTask+0x102>
 801eeb6:	4b0f      	ldr	r3, [pc, #60]	@ (801eef4 <I2cTestTask+0x13c>)
 801eeb8:	e000      	b.n	801eebc <I2cTestTask+0x104>
 801eeba:	4b0f      	ldr	r3, [pc, #60]	@ (801eef8 <I2cTestTask+0x140>)
 801eebc:	4619      	mov	r1, r3
 801eebe:	480f      	ldr	r0, [pc, #60]	@ (801eefc <I2cTestTask+0x144>)
 801eec0:	f000 fe94 	bl	801fbec <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801eec4:	4b0e      	ldr	r3, [pc, #56]	@ (801ef00 <I2cTestTask+0x148>)
 801eec6:	6818      	ldr	r0, [r3, #0]
 801eec8:	1d39      	adds	r1, r7, #4
 801eeca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eece:	2200      	movs	r2, #0
 801eed0:	f7ee fabc 	bl	800d44c <osMessageQueuePut>
 801eed4:	e793      	b.n	801edfe <I2cTestTask+0x46>
		}
		else osDelay(1);
 801eed6:	2001      	movs	r0, #1
 801eed8:	f7ed ff2c 	bl	800cd34 <osDelay>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801eedc:	e78f      	b.n	801edfe <I2cTestTask+0x46>
 801eede:	bf00      	nop
 801eee0:	2002d71c 	.word	0x2002d71c
 801eee4:	2002d720 	.word	0x2002d720
 801eee8:	2002d724 	.word	0x2002d724
 801eeec:	2002d728 	.word	0x2002d728
 801eef0:	200002e8 	.word	0x200002e8
 801eef4:	08024324 	.word	0x08024324
 801eef8:	0802432c 	.word	0x0802432c
 801eefc:	08024334 	.word	0x08024334
 801ef00:	200002e0 	.word	0x200002e0

0801ef04 <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801ef04:	b590      	push	{r4, r7, lr}
 801ef06:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801ef0a:	af00      	add	r7, sp, #0
 801ef0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ef10:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801ef14:	6018      	str	r0, [r3, #0]
 801ef16:	460a      	mov	r2, r1
 801ef18:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ef1c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ef20:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801ef22:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ef26:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ef2a:	781b      	ldrb	r3, [r3, #0]
 801ef2c:	b29a      	uxth	r2, r3
 801ef2e:	f107 0308 	add.w	r3, r7, #8
 801ef32:	4619      	mov	r1, r3
 801ef34:	4854      	ldr	r0, [pc, #336]	@ (801f088 <I2C_Test_Perform+0x184>)
 801ef36:	f7e6 fdf1 	bl	8005b1c <HAL_I2C_Slave_Receive_DMA>
 801ef3a:	4603      	mov	r3, r0
 801ef3c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801ef40:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d004      	beq.n	801ef52 <I2C_Test_Perform+0x4e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
 801ef48:	4850      	ldr	r0, [pc, #320]	@ (801f08c <I2C_Test_Perform+0x188>)
 801ef4a:	f000 feb7 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801ef4e:	23ff      	movs	r3, #255	@ 0xff
 801ef50:	e095      	b.n	801f07e <I2C_Test_Perform+0x17a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801ef52:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ef56:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ef5a:	781b      	ldrb	r3, [r3, #0]
 801ef5c:	b29b      	uxth	r3, r3
 801ef5e:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801ef62:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801ef66:	6812      	ldr	r2, [r2, #0]
 801ef68:	2114      	movs	r1, #20
 801ef6a:	4849      	ldr	r0, [pc, #292]	@ (801f090 <I2C_Test_Perform+0x18c>)
 801ef6c:	f7e6 fae6 	bl	800553c <HAL_I2C_Master_Transmit_DMA>
 801ef70:	4603      	mov	r3, r0
 801ef72:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801ef76:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d004      	beq.n	801ef88 <I2C_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
 801ef7e:	4845      	ldr	r0, [pc, #276]	@ (801f094 <I2C_Test_Perform+0x190>)
 801ef80:	f000 fe9c 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801ef84:	23ff      	movs	r3, #255	@ 0xff
 801ef86:	e07a      	b.n	801f07e <I2C_Test_Perform+0x17a>
	}
	if (osSemaphoreAcquire(i2c1TxSem, 10) != osOK || osSemaphoreAcquire(i2c2RxSem, 10) != osOK)
 801ef88:	4b43      	ldr	r3, [pc, #268]	@ (801f098 <I2C_Test_Perform+0x194>)
 801ef8a:	681b      	ldr	r3, [r3, #0]
 801ef8c:	210a      	movs	r1, #10
 801ef8e:	4618      	mov	r0, r3
 801ef90:	f7ee f8e2 	bl	800d158 <osSemaphoreAcquire>
 801ef94:	4603      	mov	r3, r0
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d108      	bne.n	801efac <I2C_Test_Perform+0xa8>
 801ef9a:	4b40      	ldr	r3, [pc, #256]	@ (801f09c <I2C_Test_Perform+0x198>)
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	210a      	movs	r1, #10
 801efa0:	4618      	mov	r0, r3
 801efa2:	f7ee f8d9 	bl	800d158 <osSemaphoreAcquire>
 801efa6:	4603      	mov	r3, r0
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d004      	beq.n	801efb6 <I2C_Test_Perform+0xb2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 semaphore timeout\n");
 801efac:	483c      	ldr	r0, [pc, #240]	@ (801f0a0 <I2C_Test_Perform+0x19c>)
 801efae:	f000 fe85 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801efb2:	23ff      	movs	r3, #255	@ 0xff
 801efb4:	e063      	b.n	801f07e <I2C_Test_Perform+0x17a>
	}

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801efb6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801efba:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801efbe:	781b      	ldrb	r3, [r3, #0]
 801efc0:	b29b      	uxth	r3, r3
 801efc2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801efc6:	2114      	movs	r1, #20
 801efc8:	4831      	ldr	r0, [pc, #196]	@ (801f090 <I2C_Test_Perform+0x18c>)
 801efca:	f7e6 fbcb 	bl	8005764 <HAL_I2C_Master_Receive_DMA>
 801efce:	4603      	mov	r3, r0
 801efd0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801efd4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801efd8:	2b00      	cmp	r3, #0
 801efda:	d004      	beq.n	801efe6 <I2C_Test_Perform+0xe2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
 801efdc:	4831      	ldr	r0, [pc, #196]	@ (801f0a4 <I2C_Test_Perform+0x1a0>)
 801efde:	f000 fe6d 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801efe2:	23ff      	movs	r3, #255	@ 0xff
 801efe4:	e04b      	b.n	801f07e <I2C_Test_Perform+0x17a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801efe6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801efea:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801efee:	781b      	ldrb	r3, [r3, #0]
 801eff0:	b29a      	uxth	r2, r3
 801eff2:	f107 0308 	add.w	r3, r7, #8
 801eff6:	4619      	mov	r1, r3
 801eff8:	4823      	ldr	r0, [pc, #140]	@ (801f088 <I2C_Test_Perform+0x184>)
 801effa:	f7e6 fca3 	bl	8005944 <HAL_I2C_Slave_Transmit_DMA>
 801effe:	4603      	mov	r3, r0
 801f000:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f004:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d004      	beq.n	801f016 <I2C_Test_Perform+0x112>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
 801f00c:	4826      	ldr	r0, [pc, #152]	@ (801f0a8 <I2C_Test_Perform+0x1a4>)
 801f00e:	f000 fe55 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f012:	23ff      	movs	r3, #255	@ 0xff
 801f014:	e033      	b.n	801f07e <I2C_Test_Perform+0x17a>
	}
	if (osSemaphoreAcquire(i2c2TxSem, 10) != osOK || osSemaphoreAcquire(i2c1RxSem, 10) != osOK)
 801f016:	4b25      	ldr	r3, [pc, #148]	@ (801f0ac <I2C_Test_Perform+0x1a8>)
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	210a      	movs	r1, #10
 801f01c:	4618      	mov	r0, r3
 801f01e:	f7ee f89b 	bl	800d158 <osSemaphoreAcquire>
 801f022:	4603      	mov	r3, r0
 801f024:	2b00      	cmp	r3, #0
 801f026:	d108      	bne.n	801f03a <I2C_Test_Perform+0x136>
 801f028:	4b21      	ldr	r3, [pc, #132]	@ (801f0b0 <I2C_Test_Perform+0x1ac>)
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	210a      	movs	r1, #10
 801f02e:	4618      	mov	r0, r3
 801f030:	f7ee f892 	bl	800d158 <osSemaphoreAcquire>
 801f034:	4603      	mov	r3, r0
 801f036:	2b00      	cmp	r3, #0
 801f038:	d004      	beq.n	801f044 <I2C_Test_Perform+0x140>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 semaphore timeout\n");
 801f03a:	481e      	ldr	r0, [pc, #120]	@ (801f0b4 <I2C_Test_Perform+0x1b0>)
 801f03c:	f000 fe3e 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f040:	23ff      	movs	r3, #255	@ 0xff
 801f042:	e01c      	b.n	801f07e <I2C_Test_Perform+0x17a>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801f044:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f048:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f04c:	781c      	ldrb	r4, [r3, #0]
 801f04e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f052:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f056:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f05a:	7819      	ldrb	r1, [r3, #0]
 801f05c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f060:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f064:	4623      	mov	r3, r4
 801f066:	6800      	ldr	r0, [r0, #0]
 801f068:	f7ff fd4e 	bl	801eb08 <Match_CRC>
 801f06c:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f070:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f074:	2b01      	cmp	r3, #1
 801f076:	d101      	bne.n	801f07c <I2C_Test_Perform+0x178>
 801f078:	2301      	movs	r3, #1
 801f07a:	e000      	b.n	801f07e <I2C_Test_Perform+0x17a>

	return TEST_FAILED;
 801f07c:	23ff      	movs	r3, #255	@ 0xff
}
 801f07e:	4618      	mov	r0, r3
 801f080:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f084:	46bd      	mov	sp, r7
 801f086:	bd90      	pop	{r4, r7, pc}
 801f088:	2000034c 	.word	0x2000034c
 801f08c:	08024344 	.word	0x08024344
 801f090:	200002f8 	.word	0x200002f8
 801f094:	0802435c 	.word	0x0802435c
 801f098:	2002d71c 	.word	0x2002d71c
 801f09c:	2002d728 	.word	0x2002d728
 801f0a0:	08024374 	.word	0x08024374
 801f0a4:	08024394 	.word	0x08024394
 801f0a8:	080243ac 	.word	0x080243ac
 801f0ac:	2002d724 	.word	0x2002d724
 801f0b0:	2002d720 	.word	0x2002d720
 801f0b4:	080243c4 	.word	0x080243c4

0801f0b8 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f0b8:	b580      	push	{r7, lr}
 801f0ba:	b082      	sub	sp, #8
 801f0bc:	af00      	add	r7, sp, #0
 801f0be:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1TxSem);
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	4a06      	ldr	r2, [pc, #24]	@ (801f0dc <HAL_I2C_MasterTxCpltCallback+0x24>)
 801f0c4:	4293      	cmp	r3, r2
 801f0c6:	d104      	bne.n	801f0d2 <HAL_I2C_MasterTxCpltCallback+0x1a>
 801f0c8:	4b05      	ldr	r3, [pc, #20]	@ (801f0e0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801f0ca:	681b      	ldr	r3, [r3, #0]
 801f0cc:	4618      	mov	r0, r3
 801f0ce:	f7ee f8a9 	bl	800d224 <osSemaphoreRelease>
}
 801f0d2:	bf00      	nop
 801f0d4:	3708      	adds	r7, #8
 801f0d6:	46bd      	mov	sp, r7
 801f0d8:	bd80      	pop	{r7, pc}
 801f0da:	bf00      	nop
 801f0dc:	200002f8 	.word	0x200002f8
 801f0e0:	2002d71c 	.word	0x2002d71c

0801f0e4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f0e4:	b580      	push	{r7, lr}
 801f0e6:	b082      	sub	sp, #8
 801f0e8:	af00      	add	r7, sp, #0
 801f0ea:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1RxSem);
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	4a06      	ldr	r2, [pc, #24]	@ (801f108 <HAL_I2C_MasterRxCpltCallback+0x24>)
 801f0f0:	4293      	cmp	r3, r2
 801f0f2:	d104      	bne.n	801f0fe <HAL_I2C_MasterRxCpltCallback+0x1a>
 801f0f4:	4b05      	ldr	r3, [pc, #20]	@ (801f10c <HAL_I2C_MasterRxCpltCallback+0x28>)
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	4618      	mov	r0, r3
 801f0fa:	f7ee f893 	bl	800d224 <osSemaphoreRelease>
}
 801f0fe:	bf00      	nop
 801f100:	3708      	adds	r7, #8
 801f102:	46bd      	mov	sp, r7
 801f104:	bd80      	pop	{r7, pc}
 801f106:	bf00      	nop
 801f108:	200002f8 	.word	0x200002f8
 801f10c:	2002d720 	.word	0x2002d720

0801f110 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f110:	b580      	push	{r7, lr}
 801f112:	b082      	sub	sp, #8
 801f114:	af00      	add	r7, sp, #0
 801f116:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2TxSem);
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	4a06      	ldr	r2, [pc, #24]	@ (801f134 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801f11c:	4293      	cmp	r3, r2
 801f11e:	d104      	bne.n	801f12a <HAL_I2C_SlaveTxCpltCallback+0x1a>
 801f120:	4b05      	ldr	r3, [pc, #20]	@ (801f138 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	4618      	mov	r0, r3
 801f126:	f7ee f87d 	bl	800d224 <osSemaphoreRelease>
}
 801f12a:	bf00      	nop
 801f12c:	3708      	adds	r7, #8
 801f12e:	46bd      	mov	sp, r7
 801f130:	bd80      	pop	{r7, pc}
 801f132:	bf00      	nop
 801f134:	2000034c 	.word	0x2000034c
 801f138:	2002d724 	.word	0x2002d724

0801f13c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f13c:	b580      	push	{r7, lr}
 801f13e:	b082      	sub	sp, #8
 801f140:	af00      	add	r7, sp, #0
 801f142:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2RxSem);
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	4a06      	ldr	r2, [pc, #24]	@ (801f160 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801f148:	4293      	cmp	r3, r2
 801f14a:	d104      	bne.n	801f156 <HAL_I2C_SlaveRxCpltCallback+0x1a>
 801f14c:	4b05      	ldr	r3, [pc, #20]	@ (801f164 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	4618      	mov	r0, r3
 801f152:	f7ee f867 	bl	800d224 <osSemaphoreRelease>
}
 801f156:	bf00      	nop
 801f158:	3708      	adds	r7, #8
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bd80      	pop	{r7, pc}
 801f15e:	bf00      	nop
 801f160:	2000034c 	.word	0x2000034c
 801f164:	2002d728 	.word	0x2002d728

0801f168 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 801f168:	b580      	push	{r7, lr}
 801f16a:	b0ca      	sub	sp, #296	@ 0x128
 801f16c:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	spi1TxSem = osSemaphoreNew(1, 0, NULL);
 801f16e:	2200      	movs	r2, #0
 801f170:	2100      	movs	r1, #0
 801f172:	2001      	movs	r0, #1
 801f174:	f7ed ff54 	bl	800d020 <osSemaphoreNew>
 801f178:	4603      	mov	r3, r0
 801f17a:	4a45      	ldr	r2, [pc, #276]	@ (801f290 <SpiTestTask+0x128>)
 801f17c:	6013      	str	r3, [r2, #0]
	spi1RxSem = osSemaphoreNew(1, 0, NULL);
 801f17e:	2200      	movs	r2, #0
 801f180:	2100      	movs	r1, #0
 801f182:	2001      	movs	r0, #1
 801f184:	f7ed ff4c 	bl	800d020 <osSemaphoreNew>
 801f188:	4603      	mov	r3, r0
 801f18a:	4a42      	ldr	r2, [pc, #264]	@ (801f294 <SpiTestTask+0x12c>)
 801f18c:	6013      	str	r3, [r2, #0]
	spi4TxSem = osSemaphoreNew(1, 0, NULL);
 801f18e:	2200      	movs	r2, #0
 801f190:	2100      	movs	r1, #0
 801f192:	2001      	movs	r0, #1
 801f194:	f7ed ff44 	bl	800d020 <osSemaphoreNew>
 801f198:	4603      	mov	r3, r0
 801f19a:	4a3f      	ldr	r2, [pc, #252]	@ (801f298 <SpiTestTask+0x130>)
 801f19c:	6013      	str	r3, [r2, #0]
	spi4RxSem = osSemaphoreNew(1, 0, NULL);
 801f19e:	2200      	movs	r2, #0
 801f1a0:	2100      	movs	r1, #0
 801f1a2:	2001      	movs	r0, #1
 801f1a4:	f7ed ff3c 	bl	800d020 <osSemaphoreNew>
 801f1a8:	4603      	mov	r3, r0
 801f1aa:	4a3c      	ldr	r2, [pc, #240]	@ (801f29c <SpiTestTask+0x134>)
 801f1ac:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f1ae:	4b3c      	ldr	r3, [pc, #240]	@ (801f2a0 <SpiTestTask+0x138>)
 801f1b0:	6818      	ldr	r0, [r3, #0]
 801f1b2:	f107 0114 	add.w	r1, r7, #20
 801f1b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f1ba:	2200      	movs	r2, #0
 801f1bc:	f7ee f9ba 	bl	800d534 <osMessageQueueGet>
 801f1c0:	4603      	mov	r3, r0
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d15f      	bne.n	801f286 <SpiTestTask+0x11e>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f1cc:	e017      	b.n	801f1fe <SpiTestTask+0x96>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f1ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f1d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f1d6:	7b5a      	ldrb	r2, [r3, #13]
 801f1d8:	f107 0314 	add.w	r3, r7, #20
 801f1dc:	330e      	adds	r3, #14
 801f1de:	4611      	mov	r1, r2
 801f1e0:	4618      	mov	r0, r3
 801f1e2:	f000 f867 	bl	801f2b4 <SPI_Test_Perform>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f1ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f1f0:	2bff      	cmp	r3, #255	@ 0xff
 801f1f2:	d00e      	beq.n	801f212 <SpiTestTask+0xaa>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f1f4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f1f8:	3301      	adds	r3, #1
 801f1fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f1fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f202:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f206:	7b1b      	ldrb	r3, [r3, #12]
 801f208:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f20c:	429a      	cmp	r2, r3
 801f20e:	d3de      	bcc.n	801f1ce <SpiTestTask+0x66>
 801f210:	e000      	b.n	801f214 <SpiTestTask+0xac>
					break;
 801f212:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f214:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f218:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f21c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f220:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f224:	6812      	ldr	r2, [r2, #0]
 801f226:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f228:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f22c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f230:	889a      	ldrh	r2, [r3, #4]
 801f232:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f236:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f23a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f23c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f240:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f244:	689a      	ldr	r2, [r3, #8]
 801f246:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f24a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f24e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f250:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f254:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f258:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f25c:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("SPI test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801f25e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f262:	2b01      	cmp	r3, #1
 801f264:	d101      	bne.n	801f26a <SpiTestTask+0x102>
 801f266:	4b0f      	ldr	r3, [pc, #60]	@ (801f2a4 <SpiTestTask+0x13c>)
 801f268:	e000      	b.n	801f26c <SpiTestTask+0x104>
 801f26a:	4b0f      	ldr	r3, [pc, #60]	@ (801f2a8 <SpiTestTask+0x140>)
 801f26c:	4619      	mov	r1, r3
 801f26e:	480f      	ldr	r0, [pc, #60]	@ (801f2ac <SpiTestTask+0x144>)
 801f270:	f000 fcbc 	bl	801fbec <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f274:	4b0e      	ldr	r3, [pc, #56]	@ (801f2b0 <SpiTestTask+0x148>)
 801f276:	6818      	ldr	r0, [r3, #0]
 801f278:	1d39      	adds	r1, r7, #4
 801f27a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f27e:	2200      	movs	r2, #0
 801f280:	f7ee f8e4 	bl	800d44c <osMessageQueuePut>
 801f284:	e793      	b.n	801f1ae <SpiTestTask+0x46>
		}
		else osDelay(1);
 801f286:	2001      	movs	r0, #1
 801f288:	f7ed fd54 	bl	800cd34 <osDelay>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f28c:	e78f      	b.n	801f1ae <SpiTestTask+0x46>
 801f28e:	bf00      	nop
 801f290:	2002d72c 	.word	0x2002d72c
 801f294:	2002d730 	.word	0x2002d730
 801f298:	2002d734 	.word	0x2002d734
 801f29c:	2002d738 	.word	0x2002d738
 801f2a0:	200002ec 	.word	0x200002ec
 801f2a4:	080243e4 	.word	0x080243e4
 801f2a8:	080243ec 	.word	0x080243ec
 801f2ac:	080243f4 	.word	0x080243f4
 801f2b0:	200002e0 	.word	0x200002e0

0801f2b4 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f2b4:	b590      	push	{r4, r7, lr}
 801f2b6:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f2ba:	af00      	add	r7, sp, #0
 801f2bc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f2c0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f2c4:	6018      	str	r0, [r3, #0]
 801f2c6:	460a      	mov	r2, r1
 801f2c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f2cc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f2d0:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 801f2d2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f2d6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f2da:	781b      	ldrb	r3, [r3, #0]
 801f2dc:	b29a      	uxth	r2, r3
 801f2de:	f107 0308 	add.w	r3, r7, #8
 801f2e2:	4619      	mov	r1, r3
 801f2e4:	4854      	ldr	r0, [pc, #336]	@ (801f438 <SPI_Test_Perform+0x184>)
 801f2e6:	f7e9 fd67 	bl	8008db8 <HAL_SPI_Receive_DMA>
 801f2ea:	4603      	mov	r3, r0
 801f2ec:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f2f0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d004      	beq.n	801f302 <SPI_Test_Perform+0x4e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
 801f2f8:	4850      	ldr	r0, [pc, #320]	@ (801f43c <SPI_Test_Perform+0x188>)
 801f2fa:	f000 fcdf 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f2fe:	23ff      	movs	r3, #255	@ 0xff
 801f300:	e094      	b.n	801f42c <SPI_Test_Perform+0x178>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 801f302:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f306:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f30a:	781b      	ldrb	r3, [r3, #0]
 801f30c:	b29a      	uxth	r2, r3
 801f30e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f312:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f316:	6819      	ldr	r1, [r3, #0]
 801f318:	4849      	ldr	r0, [pc, #292]	@ (801f440 <SPI_Test_Perform+0x18c>)
 801f31a:	f7e9 fc5f 	bl	8008bdc <HAL_SPI_Transmit_DMA>
 801f31e:	4603      	mov	r3, r0
 801f320:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f324:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d004      	beq.n	801f336 <SPI_Test_Perform+0x82>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
 801f32c:	4845      	ldr	r0, [pc, #276]	@ (801f444 <SPI_Test_Perform+0x190>)
 801f32e:	f000 fcc5 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f332:	23ff      	movs	r3, #255	@ 0xff
 801f334:	e07a      	b.n	801f42c <SPI_Test_Perform+0x178>
	}
	if (osSemaphoreAcquire(spi1TxSem, 10) != osOK || osSemaphoreAcquire(spi4RxSem, 10) != osOK)
 801f336:	4b44      	ldr	r3, [pc, #272]	@ (801f448 <SPI_Test_Perform+0x194>)
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	210a      	movs	r1, #10
 801f33c:	4618      	mov	r0, r3
 801f33e:	f7ed ff0b 	bl	800d158 <osSemaphoreAcquire>
 801f342:	4603      	mov	r3, r0
 801f344:	2b00      	cmp	r3, #0
 801f346:	d108      	bne.n	801f35a <SPI_Test_Perform+0xa6>
 801f348:	4b40      	ldr	r3, [pc, #256]	@ (801f44c <SPI_Test_Perform+0x198>)
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	210a      	movs	r1, #10
 801f34e:	4618      	mov	r0, r3
 801f350:	f7ed ff02 	bl	800d158 <osSemaphoreAcquire>
 801f354:	4603      	mov	r3, r0
 801f356:	2b00      	cmp	r3, #0
 801f358:	d004      	beq.n	801f364 <SPI_Test_Perform+0xb0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 semaphore timeout\n");
 801f35a:	483d      	ldr	r0, [pc, #244]	@ (801f450 <SPI_Test_Perform+0x19c>)
 801f35c:	f000 fcae 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f360:	23ff      	movs	r3, #255	@ 0xff
 801f362:	e063      	b.n	801f42c <SPI_Test_Perform+0x178>
	}

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 801f364:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f368:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f36c:	781b      	ldrb	r3, [r3, #0]
 801f36e:	b29a      	uxth	r2, r3
 801f370:	f107 0308 	add.w	r3, r7, #8
 801f374:	4619      	mov	r1, r3
 801f376:	4830      	ldr	r0, [pc, #192]	@ (801f438 <SPI_Test_Perform+0x184>)
 801f378:	f7e9 fc30 	bl	8008bdc <HAL_SPI_Transmit_DMA>
 801f37c:	4603      	mov	r3, r0
 801f37e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f382:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f386:	2b00      	cmp	r3, #0
 801f388:	d004      	beq.n	801f394 <SPI_Test_Perform+0xe0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
 801f38a:	4832      	ldr	r0, [pc, #200]	@ (801f454 <SPI_Test_Perform+0x1a0>)
 801f38c:	f000 fc96 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f390:	23ff      	movs	r3, #255	@ 0xff
 801f392:	e04b      	b.n	801f42c <SPI_Test_Perform+0x178>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 801f394:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f398:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f39c:	781b      	ldrb	r3, [r3, #0]
 801f39e:	b29a      	uxth	r2, r3
 801f3a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801f3a4:	4619      	mov	r1, r3
 801f3a6:	4826      	ldr	r0, [pc, #152]	@ (801f440 <SPI_Test_Perform+0x18c>)
 801f3a8:	f7e9 fd06 	bl	8008db8 <HAL_SPI_Receive_DMA>
 801f3ac:	4603      	mov	r3, r0
 801f3ae:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f3b2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f3b6:	2b00      	cmp	r3, #0
 801f3b8:	d004      	beq.n	801f3c4 <SPI_Test_Perform+0x110>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
 801f3ba:	4827      	ldr	r0, [pc, #156]	@ (801f458 <SPI_Test_Perform+0x1a4>)
 801f3bc:	f000 fc7e 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f3c0:	23ff      	movs	r3, #255	@ 0xff
 801f3c2:	e033      	b.n	801f42c <SPI_Test_Perform+0x178>
	}
	if (osSemaphoreAcquire(spi4TxSem, 10) != osOK || osSemaphoreAcquire(spi1RxSem, 10) != osOK)
 801f3c4:	4b25      	ldr	r3, [pc, #148]	@ (801f45c <SPI_Test_Perform+0x1a8>)
 801f3c6:	681b      	ldr	r3, [r3, #0]
 801f3c8:	210a      	movs	r1, #10
 801f3ca:	4618      	mov	r0, r3
 801f3cc:	f7ed fec4 	bl	800d158 <osSemaphoreAcquire>
 801f3d0:	4603      	mov	r3, r0
 801f3d2:	2b00      	cmp	r3, #0
 801f3d4:	d108      	bne.n	801f3e8 <SPI_Test_Perform+0x134>
 801f3d6:	4b22      	ldr	r3, [pc, #136]	@ (801f460 <SPI_Test_Perform+0x1ac>)
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	210a      	movs	r1, #10
 801f3dc:	4618      	mov	r0, r3
 801f3de:	f7ed febb 	bl	800d158 <osSemaphoreAcquire>
 801f3e2:	4603      	mov	r3, r0
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d004      	beq.n	801f3f2 <SPI_Test_Perform+0x13e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 semaphore timeout\n");
 801f3e8:	481e      	ldr	r0, [pc, #120]	@ (801f464 <SPI_Test_Perform+0x1b0>)
 801f3ea:	f000 fc67 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f3ee:	23ff      	movs	r3, #255	@ 0xff
 801f3f0:	e01c      	b.n	801f42c <SPI_Test_Perform+0x178>
	}

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 801f3f2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f3f6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f3fa:	781c      	ldrb	r4, [r3, #0]
 801f3fc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f400:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f404:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f408:	7819      	ldrb	r1, [r3, #0]
 801f40a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f40e:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f412:	4623      	mov	r3, r4
 801f414:	6800      	ldr	r0, [r0, #0]
 801f416:	f7ff fb77 	bl	801eb08 <Match_CRC>
 801f41a:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f41e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f422:	2b01      	cmp	r3, #1
 801f424:	d101      	bne.n	801f42a <SPI_Test_Perform+0x176>
 801f426:	2301      	movs	r3, #1
 801f428:	e000      	b.n	801f42c <SPI_Test_Perform+0x178>

	return TEST_FAILED;
 801f42a:	23ff      	movs	r3, #255	@ 0xff
}
 801f42c:	4618      	mov	r0, r3
 801f42e:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f432:	46bd      	mov	sp, r7
 801f434:	bd90      	pop	{r4, r7, pc}
 801f436:	bf00      	nop
 801f438:	20000584 	.word	0x20000584
 801f43c:	08024404 	.word	0x08024404
 801f440:	20000520 	.word	0x20000520
 801f444:	0802441c 	.word	0x0802441c
 801f448:	2002d72c 	.word	0x2002d72c
 801f44c:	2002d738 	.word	0x2002d738
 801f450:	08024434 	.word	0x08024434
 801f454:	08024454 	.word	0x08024454
 801f458:	0802446c 	.word	0x0802446c
 801f45c:	2002d734 	.word	0x2002d734
 801f460:	2002d730 	.word	0x2002d730
 801f464:	08024484 	.word	0x08024484

0801f468 <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801f468:	b580      	push	{r7, lr}
 801f46a:	b082      	sub	sp, #8
 801f46c:	af00      	add	r7, sp, #0
 801f46e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1TxSem);
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	4a0a      	ldr	r2, [pc, #40]	@ (801f49c <HAL_SPI_TxCpltCallback+0x34>)
 801f474:	4293      	cmp	r3, r2
 801f476:	d104      	bne.n	801f482 <HAL_SPI_TxCpltCallback+0x1a>
 801f478:	4b09      	ldr	r3, [pc, #36]	@ (801f4a0 <HAL_SPI_TxCpltCallback+0x38>)
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	4618      	mov	r0, r3
 801f47e:	f7ed fed1 	bl	800d224 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4TxSem);
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	4a07      	ldr	r2, [pc, #28]	@ (801f4a4 <HAL_SPI_TxCpltCallback+0x3c>)
 801f486:	4293      	cmp	r3, r2
 801f488:	d104      	bne.n	801f494 <HAL_SPI_TxCpltCallback+0x2c>
 801f48a:	4b07      	ldr	r3, [pc, #28]	@ (801f4a8 <HAL_SPI_TxCpltCallback+0x40>)
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	4618      	mov	r0, r3
 801f490:	f7ed fec8 	bl	800d224 <osSemaphoreRelease>
}
 801f494:	bf00      	nop
 801f496:	3708      	adds	r7, #8
 801f498:	46bd      	mov	sp, r7
 801f49a:	bd80      	pop	{r7, pc}
 801f49c:	20000520 	.word	0x20000520
 801f4a0:	2002d72c 	.word	0x2002d72c
 801f4a4:	20000584 	.word	0x20000584
 801f4a8:	2002d734 	.word	0x2002d734

0801f4ac <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801f4ac:	b580      	push	{r7, lr}
 801f4ae:	b082      	sub	sp, #8
 801f4b0:	af00      	add	r7, sp, #0
 801f4b2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1RxSem);
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	4a0a      	ldr	r2, [pc, #40]	@ (801f4e0 <HAL_SPI_RxCpltCallback+0x34>)
 801f4b8:	4293      	cmp	r3, r2
 801f4ba:	d104      	bne.n	801f4c6 <HAL_SPI_RxCpltCallback+0x1a>
 801f4bc:	4b09      	ldr	r3, [pc, #36]	@ (801f4e4 <HAL_SPI_RxCpltCallback+0x38>)
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	4618      	mov	r0, r3
 801f4c2:	f7ed feaf 	bl	800d224 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4RxSem);
 801f4c6:	687b      	ldr	r3, [r7, #4]
 801f4c8:	4a07      	ldr	r2, [pc, #28]	@ (801f4e8 <HAL_SPI_RxCpltCallback+0x3c>)
 801f4ca:	4293      	cmp	r3, r2
 801f4cc:	d104      	bne.n	801f4d8 <HAL_SPI_RxCpltCallback+0x2c>
 801f4ce:	4b07      	ldr	r3, [pc, #28]	@ (801f4ec <HAL_SPI_RxCpltCallback+0x40>)
 801f4d0:	681b      	ldr	r3, [r3, #0]
 801f4d2:	4618      	mov	r0, r3
 801f4d4:	f7ed fea6 	bl	800d224 <osSemaphoreRelease>
}
 801f4d8:	bf00      	nop
 801f4da:	3708      	adds	r7, #8
 801f4dc:	46bd      	mov	sp, r7
 801f4de:	bd80      	pop	{r7, pc}
 801f4e0:	20000520 	.word	0x20000520
 801f4e4:	2002d730 	.word	0x2002d730
 801f4e8:	20000584 	.word	0x20000584
 801f4ec:	2002d738 	.word	0x2002d738

0801f4f0 <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 801f4f0:	b580      	push	{r7, lr}
 801f4f2:	b0ca      	sub	sp, #296	@ 0x128
 801f4f4:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	testDoneSem = osSemaphoreNew(1, 0, NULL);
 801f4f6:	2200      	movs	r2, #0
 801f4f8:	2100      	movs	r1, #0
 801f4fa:	2001      	movs	r0, #1
 801f4fc:	f7ed fd90 	bl	800d020 <osSemaphoreNew>
 801f500:	4603      	mov	r3, r0
 801f502:	4a34      	ldr	r2, [pc, #208]	@ (801f5d4 <TimTestTask+0xe4>)
 801f504:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f506:	4b34      	ldr	r3, [pc, #208]	@ (801f5d8 <TimTestTask+0xe8>)
 801f508:	6818      	ldr	r0, [r3, #0]
 801f50a:	f107 0114 	add.w	r1, r7, #20
 801f50e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f512:	2200      	movs	r2, #0
 801f514:	f7ee f80e 	bl	800d534 <osMessageQueueGet>
 801f518:	4603      	mov	r3, r0
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d155      	bne.n	801f5ca <TimTestTask+0xda>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f51e:	2300      	movs	r3, #0
 801f520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f524:	e00d      	b.n	801f542 <TimTestTask+0x52>
			{
				result = TIM_Test_Perform();
 801f526:	f000 f861 	bl	801f5ec <TIM_Test_Perform>
 801f52a:	4603      	mov	r3, r0
 801f52c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f534:	2bff      	cmp	r3, #255	@ 0xff
 801f536:	d00e      	beq.n	801f556 <TimTestTask+0x66>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f538:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f53c:	3301      	adds	r3, #1
 801f53e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f542:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f546:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f54a:	7b1b      	ldrb	r3, [r3, #12]
 801f54c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f550:	429a      	cmp	r2, r3
 801f552:	d3e8      	bcc.n	801f526 <TimTestTask+0x36>
 801f554:	e000      	b.n	801f558 <TimTestTask+0x68>
					break;
 801f556:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f558:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f55c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f560:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f564:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f568:	6812      	ldr	r2, [r2, #0]
 801f56a:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f56c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f570:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f574:	889a      	ldrh	r2, [r3, #4]
 801f576:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f57a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f57e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f580:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f584:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f588:	689a      	ldr	r2, [r3, #8]
 801f58a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f58e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f592:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f594:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f598:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f59c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f5a0:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("Timer test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801f5a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f5a6:	2b01      	cmp	r3, #1
 801f5a8:	d101      	bne.n	801f5ae <TimTestTask+0xbe>
 801f5aa:	4b0c      	ldr	r3, [pc, #48]	@ (801f5dc <TimTestTask+0xec>)
 801f5ac:	e000      	b.n	801f5b0 <TimTestTask+0xc0>
 801f5ae:	4b0c      	ldr	r3, [pc, #48]	@ (801f5e0 <TimTestTask+0xf0>)
 801f5b0:	4619      	mov	r1, r3
 801f5b2:	480c      	ldr	r0, [pc, #48]	@ (801f5e4 <TimTestTask+0xf4>)
 801f5b4:	f000 fb1a 	bl	801fbec <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f5b8:	4b0b      	ldr	r3, [pc, #44]	@ (801f5e8 <TimTestTask+0xf8>)
 801f5ba:	6818      	ldr	r0, [r3, #0]
 801f5bc:	1d39      	adds	r1, r7, #4
 801f5be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f5c2:	2200      	movs	r2, #0
 801f5c4:	f7ed ff42 	bl	800d44c <osMessageQueuePut>
 801f5c8:	e79d      	b.n	801f506 <TimTestTask+0x16>
		}
		else osDelay(1);
 801f5ca:	2001      	movs	r0, #1
 801f5cc:	f7ed fbb2 	bl	800cd34 <osDelay>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f5d0:	e799      	b.n	801f506 <TimTestTask+0x16>
 801f5d2:	bf00      	nop
 801f5d4:	2002d73c 	.word	0x2002d73c
 801f5d8:	200002f4 	.word	0x200002f4
 801f5dc:	080244a4 	.word	0x080244a4
 801f5e0:	080244ac 	.word	0x080244ac
 801f5e4:	080244b4 	.word	0x080244b4
 801f5e8:	200002e0 	.word	0x200002e0

0801f5ec <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 801f5ec:	b580      	push	{r7, lr}
 801f5ee:	b082      	sub	sp, #8
 801f5f0:	af00      	add	r7, sp, #0
	static uint8_t callback_registered = 0;

	if (!callback_registered)
 801f5f2:	4b38      	ldr	r3, [pc, #224]	@ (801f6d4 <TIM_Test_Perform+0xe8>)
 801f5f4:	781b      	ldrb	r3, [r3, #0]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d107      	bne.n	801f60a <TIM_Test_Perform+0x1e>
	{
		HAL_DMA_RegisterCallback(&hdma_tim6_up, HAL_DMA_XFER_CPLT_CB_ID, TIM6_UP_DMA_XferCplt);
 801f5fa:	4a37      	ldr	r2, [pc, #220]	@ (801f6d8 <TIM_Test_Perform+0xec>)
 801f5fc:	2100      	movs	r1, #0
 801f5fe:	4837      	ldr	r0, [pc, #220]	@ (801f6dc <TIM_Test_Perform+0xf0>)
 801f600:	f7e4 f990 	bl	8003924 <HAL_DMA_RegisterCallback>
		callback_registered = 1;
 801f604:	4b33      	ldr	r3, [pc, #204]	@ (801f6d4 <TIM_Test_Perform+0xe8>)
 801f606:	2201      	movs	r2, #1
 801f608:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_Base_Start(&htim2);
 801f60a:	4835      	ldr	r0, [pc, #212]	@ (801f6e0 <TIM_Test_Perform+0xf4>)
 801f60c:	f7ea fb5a 	bl	8009cc4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 801f610:	4834      	ldr	r0, [pc, #208]	@ (801f6e4 <TIM_Test_Perform+0xf8>)
 801f612:	f7ea fb57 	bl	8009cc4 <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 801f616:	4b32      	ldr	r3, [pc, #200]	@ (801f6e0 <TIM_Test_Perform+0xf4>)
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	3324      	adds	r3, #36	@ 0x24
 801f61c:	4619      	mov	r1, r3
 801f61e:	4a32      	ldr	r2, [pc, #200]	@ (801f6e8 <TIM_Test_Perform+0xfc>)
 801f620:	230a      	movs	r3, #10
 801f622:	482e      	ldr	r0, [pc, #184]	@ (801f6dc <TIM_Test_Perform+0xf0>)
 801f624:	f7e3 ff02 	bl	800342c <HAL_DMA_Start_IT>
 801f628:	4603      	mov	r3, r0
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	d004      	beq.n	801f638 <TIM_Test_Perform+0x4c>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
 801f62e:	482f      	ldr	r0, [pc, #188]	@ (801f6ec <TIM_Test_Perform+0x100>)
 801f630:	f000 fb44 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f634:	23ff      	movs	r3, #255	@ 0xff
 801f636:	e049      	b.n	801f6cc <TIM_Test_Perform+0xe0>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801f638:	4b2a      	ldr	r3, [pc, #168]	@ (801f6e4 <TIM_Test_Perform+0xf8>)
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	68da      	ldr	r2, [r3, #12]
 801f63e:	4b29      	ldr	r3, [pc, #164]	@ (801f6e4 <TIM_Test_Perform+0xf8>)
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f646:	60da      	str	r2, [r3, #12]

    if (osSemaphoreAcquire(testDoneSem, 10) != osOK)
 801f648:	4b29      	ldr	r3, [pc, #164]	@ (801f6f0 <TIM_Test_Perform+0x104>)
 801f64a:	681b      	ldr	r3, [r3, #0]
 801f64c:	210a      	movs	r1, #10
 801f64e:	4618      	mov	r0, r3
 801f650:	f7ed fd82 	bl	800d158 <osSemaphoreAcquire>
 801f654:	4603      	mov	r3, r0
 801f656:	2b00      	cmp	r3, #0
 801f658:	d00a      	beq.n	801f670 <TIM_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("Timer test: timeout waiting for DMA complete\n");
 801f65a:	4826      	ldr	r0, [pc, #152]	@ (801f6f4 <TIM_Test_Perform+0x108>)
 801f65c:	f000 fb2e 	bl	801fcbc <puts>
#endif
		HAL_TIM_Base_Stop(&htim6);
 801f660:	4820      	ldr	r0, [pc, #128]	@ (801f6e4 <TIM_Test_Perform+0xf8>)
 801f662:	f7ea fb9f 	bl	8009da4 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim2);
 801f666:	481e      	ldr	r0, [pc, #120]	@ (801f6e0 <TIM_Test_Perform+0xf4>)
 801f668:	f7ea fb9c 	bl	8009da4 <HAL_TIM_Base_Stop>
		return TEST_FAILED;
 801f66c:	23ff      	movs	r3, #255	@ 0xff
 801f66e:	e02d      	b.n	801f6cc <TIM_Test_Perform+0xe0>
	}

	HAL_TIM_Base_Stop(&htim6);
 801f670:	481c      	ldr	r0, [pc, #112]	@ (801f6e4 <TIM_Test_Perform+0xf8>)
 801f672:	f7ea fb97 	bl	8009da4 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 801f676:	481a      	ldr	r0, [pc, #104]	@ (801f6e0 <TIM_Test_Perform+0xf4>)
 801f678:	f7ea fb94 	bl	8009da4 <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG2
	printf("Sampling complete\n");
#endif
	for (int i = 2; i < N_SAMPLES; i++)
 801f67c:	2302      	movs	r3, #2
 801f67e:	607b      	str	r3, [r7, #4]
 801f680:	e020      	b.n	801f6c4 <TIM_Test_Perform+0xd8>
#ifdef PRINT_TESTS_DEBUG2
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] < EXPECTED_INTERVAL - TIM_ERR_TOLERANCE ||
 801f682:	4a19      	ldr	r2, [pc, #100]	@ (801f6e8 <TIM_Test_Perform+0xfc>)
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	3b01      	subs	r3, #1
 801f68e:	4916      	ldr	r1, [pc, #88]	@ (801f6e8 <TIM_Test_Perform+0xfc>)
 801f690:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801f694:	1ad3      	subs	r3, r2, r3
 801f696:	f24d 228b 	movw	r2, #53899	@ 0xd28b
 801f69a:	4293      	cmp	r3, r2
 801f69c:	d90d      	bls.n	801f6ba <TIM_Test_Perform+0xce>
			tim2_samples[i] - tim2_samples[i-1] > EXPECTED_INTERVAL + TIM_ERR_TOLERANCE)
 801f69e:	4a12      	ldr	r2, [pc, #72]	@ (801f6e8 <TIM_Test_Perform+0xfc>)
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	3b01      	subs	r3, #1
 801f6aa:	490f      	ldr	r1, [pc, #60]	@ (801f6e8 <TIM_Test_Perform+0xfc>)
 801f6ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801f6b0:	1ad3      	subs	r3, r2, r3
		if (tim2_samples[i] - tim2_samples[i-1] < EXPECTED_INTERVAL - TIM_ERR_TOLERANCE ||
 801f6b2:	f24d 3254 	movw	r2, #54100	@ 0xd354
 801f6b6:	4293      	cmp	r3, r2
 801f6b8:	d901      	bls.n	801f6be <TIM_Test_Perform+0xd2>
			return TEST_FAILED;
 801f6ba:	23ff      	movs	r3, #255	@ 0xff
 801f6bc:	e006      	b.n	801f6cc <TIM_Test_Perform+0xe0>
	for (int i = 2; i < N_SAMPLES; i++)
 801f6be:	687b      	ldr	r3, [r7, #4]
 801f6c0:	3301      	adds	r3, #1
 801f6c2:	607b      	str	r3, [r7, #4]
 801f6c4:	687b      	ldr	r3, [r7, #4]
 801f6c6:	2b09      	cmp	r3, #9
 801f6c8:	dddb      	ble.n	801f682 <TIM_Test_Perform+0x96>
	}

	return TEST_SUCCESS;
 801f6ca:	2301      	movs	r3, #1
}
 801f6cc:	4618      	mov	r0, r3
 801f6ce:	3708      	adds	r7, #8
 801f6d0:	46bd      	mov	sp, r7
 801f6d2:	bd80      	pop	{r7, pc}
 801f6d4:	2002d768 	.word	0x2002d768
 801f6d8:	0801f6f9 	.word	0x0801f6f9
 801f6dc:	20000850 	.word	0x20000850
 801f6e0:	200007b8 	.word	0x200007b8
 801f6e4:	20000804 	.word	0x20000804
 801f6e8:	2002d740 	.word	0x2002d740
 801f6ec:	080244c4 	.word	0x080244c4
 801f6f0:	2002d73c 	.word	0x2002d73c
 801f6f4:	080244e0 	.word	0x080244e0

0801f6f8 <TIM6_UP_DMA_XferCplt>:
 * Using the same strategy with FreeRTOS will break the code, so I implemented
 * here a different strategy.
 */

void TIM6_UP_DMA_XferCplt(DMA_HandleTypeDef *hdma)
{
 801f6f8:	b580      	push	{r7, lr}
 801f6fa:	b082      	sub	sp, #8
 801f6fc:	af00      	add	r7, sp, #0
 801f6fe:	6078      	str	r0, [r7, #4]
    if (hdma == &hdma_tim6_up)
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	4a06      	ldr	r2, [pc, #24]	@ (801f71c <TIM6_UP_DMA_XferCplt+0x24>)
 801f704:	4293      	cmp	r3, r2
 801f706:	d104      	bne.n	801f712 <TIM6_UP_DMA_XferCplt+0x1a>
    {
    	osSemaphoreRelease(testDoneSem);
 801f708:	4b05      	ldr	r3, [pc, #20]	@ (801f720 <TIM6_UP_DMA_XferCplt+0x28>)
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	4618      	mov	r0, r3
 801f70e:	f7ed fd89 	bl	800d224 <osSemaphoreRelease>
    }
}
 801f712:	bf00      	nop
 801f714:	3708      	adds	r7, #8
 801f716:	46bd      	mov	sp, r7
 801f718:	bd80      	pop	{r7, pc}
 801f71a:	bf00      	nop
 801f71c:	20000850 	.word	0x20000850
 801f720:	2002d73c 	.word	0x2002d73c

0801f724 <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 801f724:	b580      	push	{r7, lr}
 801f726:	b0ca      	sub	sp, #296	@ 0x128
 801f728:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	uart4RxSem = osSemaphoreNew(1, 0, NULL);
 801f72a:	2200      	movs	r2, #0
 801f72c:	2100      	movs	r1, #0
 801f72e:	2001      	movs	r0, #1
 801f730:	f7ed fc76 	bl	800d020 <osSemaphoreNew>
 801f734:	4603      	mov	r3, r0
 801f736:	4a3b      	ldr	r2, [pc, #236]	@ (801f824 <UartTestTask+0x100>)
 801f738:	6013      	str	r3, [r2, #0]
	uart5RxSem = osSemaphoreNew(1, 0, NULL);
 801f73a:	2200      	movs	r2, #0
 801f73c:	2100      	movs	r1, #0
 801f73e:	2001      	movs	r0, #1
 801f740:	f7ed fc6e 	bl	800d020 <osSemaphoreNew>
 801f744:	4603      	mov	r3, r0
 801f746:	4a38      	ldr	r2, [pc, #224]	@ (801f828 <UartTestTask+0x104>)
 801f748:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f74a:	4b38      	ldr	r3, [pc, #224]	@ (801f82c <UartTestTask+0x108>)
 801f74c:	6818      	ldr	r0, [r3, #0]
 801f74e:	f107 0114 	add.w	r1, r7, #20
 801f752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f756:	2200      	movs	r2, #0
 801f758:	f7ed feec 	bl	800d534 <osMessageQueueGet>
 801f75c:	4603      	mov	r3, r0
 801f75e:	2b00      	cmp	r3, #0
 801f760:	d1f3      	bne.n	801f74a <UartTestTask+0x26>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f762:	2300      	movs	r3, #0
 801f764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f768:	e017      	b.n	801f79a <UartTestTask+0x76>
			{
                result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f76a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f76e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f772:	7b5a      	ldrb	r2, [r3, #13]
 801f774:	f107 0314 	add.w	r3, r7, #20
 801f778:	330e      	adds	r3, #14
 801f77a:	4611      	mov	r1, r2
 801f77c:	4618      	mov	r0, r3
 801f77e:	f000 f85f 	bl	801f840 <UART_Test_Perform>
 801f782:	4603      	mov	r3, r0
 801f784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f78c:	2bff      	cmp	r3, #255	@ 0xff
 801f78e:	d00e      	beq.n	801f7ae <UartTestTask+0x8a>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f790:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f794:	3301      	adds	r3, #1
 801f796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f79a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f79e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f7a2:	7b1b      	ldrb	r3, [r3, #12]
 801f7a4:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f7a8:	429a      	cmp	r2, r3
 801f7aa:	d3de      	bcc.n	801f76a <UartTestTask+0x46>
 801f7ac:	e000      	b.n	801f7b0 <UartTestTask+0x8c>
					break;
 801f7ae:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f7b0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7b8:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f7bc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f7c0:	6812      	ldr	r2, [r2, #0]
 801f7c2:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f7c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f7cc:	889a      	ldrh	r2, [r3, #4]
 801f7ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7d6:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f7d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f7e0:	689a      	ldr	r2, [r3, #8]
 801f7e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7ea:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f7ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f7f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f7f4:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f7f8:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("UART test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801f7fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f7fe:	2b01      	cmp	r3, #1
 801f800:	d101      	bne.n	801f806 <UartTestTask+0xe2>
 801f802:	4b0b      	ldr	r3, [pc, #44]	@ (801f830 <UartTestTask+0x10c>)
 801f804:	e000      	b.n	801f808 <UartTestTask+0xe4>
 801f806:	4b0b      	ldr	r3, [pc, #44]	@ (801f834 <UartTestTask+0x110>)
 801f808:	4619      	mov	r1, r3
 801f80a:	480b      	ldr	r0, [pc, #44]	@ (801f838 <UartTestTask+0x114>)
 801f80c:	f000 f9ee 	bl	801fbec <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f810:	4b0a      	ldr	r3, [pc, #40]	@ (801f83c <UartTestTask+0x118>)
 801f812:	6818      	ldr	r0, [r3, #0]
 801f814:	1d39      	adds	r1, r7, #4
 801f816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f81a:	2200      	movs	r2, #0
 801f81c:	f7ed fe16 	bl	800d44c <osMessageQueuePut>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f820:	e793      	b.n	801f74a <UartTestTask+0x26>
 801f822:	bf00      	nop
 801f824:	2002d76c 	.word	0x2002d76c
 801f828:	2002d770 	.word	0x2002d770
 801f82c:	200002e4 	.word	0x200002e4
 801f830:	08024510 	.word	0x08024510
 801f834:	08024518 	.word	0x08024518
 801f838:	08024520 	.word	0x08024520
 801f83c:	200002e0 	.word	0x200002e0

0801f840 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f840:	b590      	push	{r4, r7, lr}
 801f842:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f846:	af00      	add	r7, sp, #0
 801f848:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f84c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f850:	6018      	str	r0, [r3, #0]
 801f852:	460a      	mov	r2, r1
 801f854:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f858:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f85c:	701a      	strb	r2, [r3, #0]
	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 801f85e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f862:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f866:	781b      	ldrb	r3, [r3, #0]
 801f868:	b29a      	uxth	r2, r3
 801f86a:	f107 030c 	add.w	r3, r7, #12
 801f86e:	4619      	mov	r1, r3
 801f870:	4843      	ldr	r0, [pc, #268]	@ (801f980 <UART_Test_Perform+0x140>)
 801f872:	f7eb f853 	bl	800a91c <HAL_UART_Receive_DMA>
 801f876:	4603      	mov	r3, r0
 801f878:	2b00      	cmp	r3, #0
 801f87a:	d004      	beq.n	801f886 <UART_Test_Perform+0x46>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
 801f87c:	4841      	ldr	r0, [pc, #260]	@ (801f984 <UART_Test_Perform+0x144>)
 801f87e:	f000 fa1d 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f882:	23ff      	movs	r3, #255	@ 0xff
 801f884:	e076      	b.n	801f974 <UART_Test_Perform+0x134>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 801f886:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f88a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f88e:	781b      	ldrb	r3, [r3, #0]
 801f890:	b29a      	uxth	r2, r3
 801f892:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f896:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f89a:	6819      	ldr	r1, [r3, #0]
 801f89c:	483a      	ldr	r0, [pc, #232]	@ (801f988 <UART_Test_Perform+0x148>)
 801f89e:	f7ea ffdf 	bl	800a860 <HAL_UART_Transmit_IT>
 801f8a2:	4603      	mov	r3, r0
 801f8a4:	2b00      	cmp	r3, #0
 801f8a6:	d004      	beq.n	801f8b2 <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
 801f8a8:	4838      	ldr	r0, [pc, #224]	@ (801f98c <UART_Test_Perform+0x14c>)
 801f8aa:	f000 fa07 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f8ae:	23ff      	movs	r3, #255	@ 0xff
 801f8b0:	e060      	b.n	801f974 <UART_Test_Perform+0x134>
	}
	if (osSemaphoreAcquire(uart5RxSem, 10) != osOK) {
 801f8b2:	4b37      	ldr	r3, [pc, #220]	@ (801f990 <UART_Test_Perform+0x150>)
 801f8b4:	681b      	ldr	r3, [r3, #0]
 801f8b6:	210a      	movs	r1, #10
 801f8b8:	4618      	mov	r0, r3
 801f8ba:	f7ed fc4d 	bl	800d158 <osSemaphoreAcquire>
 801f8be:	4603      	mov	r3, r0
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d004      	beq.n	801f8ce <UART_Test_Perform+0x8e>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart5 RX semaphore timeout\n");
 801f8c4:	4833      	ldr	r0, [pc, #204]	@ (801f994 <UART_Test_Perform+0x154>)
 801f8c6:	f000 f9f9 	bl	801fcbc <puts>
#endif
	    return TEST_FAILED;
 801f8ca:	23ff      	movs	r3, #255	@ 0xff
 801f8cc:	e052      	b.n	801f974 <UART_Test_Perform+0x134>
	}

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 801f8ce:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f8d2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f8d6:	781b      	ldrb	r3, [r3, #0]
 801f8d8:	b29a      	uxth	r2, r3
 801f8da:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801f8de:	4619      	mov	r1, r3
 801f8e0:	4829      	ldr	r0, [pc, #164]	@ (801f988 <UART_Test_Perform+0x148>)
 801f8e2:	f7eb f81b 	bl	800a91c <HAL_UART_Receive_DMA>
 801f8e6:	4603      	mov	r3, r0
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	d004      	beq.n	801f8f6 <UART_Test_Perform+0xb6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
 801f8ec:	482a      	ldr	r0, [pc, #168]	@ (801f998 <UART_Test_Perform+0x158>)
 801f8ee:	f000 f9e5 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f8f2:	23ff      	movs	r3, #255	@ 0xff
 801f8f4:	e03e      	b.n	801f974 <UART_Test_Perform+0x134>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 801f8f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f8fa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f8fe:	781b      	ldrb	r3, [r3, #0]
 801f900:	b29a      	uxth	r2, r3
 801f902:	f107 030c 	add.w	r3, r7, #12
 801f906:	4619      	mov	r1, r3
 801f908:	481d      	ldr	r0, [pc, #116]	@ (801f980 <UART_Test_Perform+0x140>)
 801f90a:	f7ea ffa9 	bl	800a860 <HAL_UART_Transmit_IT>
 801f90e:	4603      	mov	r3, r0
 801f910:	2b00      	cmp	r3, #0
 801f912:	d004      	beq.n	801f91e <UART_Test_Perform+0xde>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
 801f914:	4821      	ldr	r0, [pc, #132]	@ (801f99c <UART_Test_Perform+0x15c>)
 801f916:	f000 f9d1 	bl	801fcbc <puts>
#endif
		return TEST_FAILED;
 801f91a:	23ff      	movs	r3, #255	@ 0xff
 801f91c:	e02a      	b.n	801f974 <UART_Test_Perform+0x134>
	}
	if (osSemaphoreAcquire(uart4RxSem, 10) != osOK) {
 801f91e:	4b20      	ldr	r3, [pc, #128]	@ (801f9a0 <UART_Test_Perform+0x160>)
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	210a      	movs	r1, #10
 801f924:	4618      	mov	r0, r3
 801f926:	f7ed fc17 	bl	800d158 <osSemaphoreAcquire>
 801f92a:	4603      	mov	r3, r0
 801f92c:	2b00      	cmp	r3, #0
 801f92e:	d004      	beq.n	801f93a <UART_Test_Perform+0xfa>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart4 RX semaphore timeout\n");
 801f930:	481c      	ldr	r0, [pc, #112]	@ (801f9a4 <UART_Test_Perform+0x164>)
 801f932:	f000 f9c3 	bl	801fcbc <puts>
#endif
	    return TEST_FAILED;
 801f936:	23ff      	movs	r3, #255	@ 0xff
 801f938:	e01c      	b.n	801f974 <UART_Test_Perform+0x134>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 801f93a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f93e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f942:	781c      	ldrb	r4, [r3, #0]
 801f944:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 801f948:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f94c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f950:	7819      	ldrb	r1, [r3, #0]
 801f952:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f956:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f95a:	4623      	mov	r3, r4
 801f95c:	6800      	ldr	r0, [r0, #0]
 801f95e:	f7ff f8d3 	bl	801eb08 <Match_CRC>
 801f962:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f966:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801f96a:	2b01      	cmp	r3, #1
 801f96c:	d101      	bne.n	801f972 <UART_Test_Perform+0x132>
 801f96e:	2301      	movs	r3, #1
 801f970:	e000      	b.n	801f974 <UART_Test_Perform+0x134>

	return TEST_FAILED;
 801f972:	23ff      	movs	r3, #255	@ 0xff
}
 801f974:	4618      	mov	r0, r3
 801f976:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f97a:	46bd      	mov	sp, r7
 801f97c:	bd90      	pop	{r4, r7, pc}
 801f97e:	bf00      	nop
 801f980:	20000938 	.word	0x20000938
 801f984:	08024530 	.word	0x08024530
 801f988:	200008b0 	.word	0x200008b0
 801f98c:	0802454c 	.word	0x0802454c
 801f990:	2002d770 	.word	0x2002d770
 801f994:	08024568 	.word	0x08024568
 801f998:	08024584 	.word	0x08024584
 801f99c:	080245a0 	.word	0x080245a0
 801f9a0:	2002d76c 	.word	0x2002d76c
 801f9a4:	080245bc 	.word	0x080245bc

0801f9a8 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801f9a8:	b580      	push	{r7, lr}
 801f9aa:	b082      	sub	sp, #8
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) osSemaphoreRelease(uart4RxSem);
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	4a0a      	ldr	r2, [pc, #40]	@ (801f9dc <HAL_UART_RxCpltCallback+0x34>)
 801f9b4:	4293      	cmp	r3, r2
 801f9b6:	d104      	bne.n	801f9c2 <HAL_UART_RxCpltCallback+0x1a>
 801f9b8:	4b09      	ldr	r3, [pc, #36]	@ (801f9e0 <HAL_UART_RxCpltCallback+0x38>)
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	4618      	mov	r0, r3
 801f9be:	f7ed fc31 	bl	800d224 <osSemaphoreRelease>
    if (huart == &huart5) osSemaphoreRelease(uart5RxSem);
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	4a07      	ldr	r2, [pc, #28]	@ (801f9e4 <HAL_UART_RxCpltCallback+0x3c>)
 801f9c6:	4293      	cmp	r3, r2
 801f9c8:	d104      	bne.n	801f9d4 <HAL_UART_RxCpltCallback+0x2c>
 801f9ca:	4b07      	ldr	r3, [pc, #28]	@ (801f9e8 <HAL_UART_RxCpltCallback+0x40>)
 801f9cc:	681b      	ldr	r3, [r3, #0]
 801f9ce:	4618      	mov	r0, r3
 801f9d0:	f7ed fc28 	bl	800d224 <osSemaphoreRelease>
}
 801f9d4:	bf00      	nop
 801f9d6:	3708      	adds	r7, #8
 801f9d8:	46bd      	mov	sp, r7
 801f9da:	bd80      	pop	{r7, pc}
 801f9dc:	200008b0 	.word	0x200008b0
 801f9e0:	2002d76c 	.word	0x2002d76c
 801f9e4:	20000938 	.word	0x20000938
 801f9e8:	2002d770 	.word	0x2002d770

0801f9ec <rand>:
 801f9ec:	4b16      	ldr	r3, [pc, #88]	@ (801fa48 <rand+0x5c>)
 801f9ee:	b510      	push	{r4, lr}
 801f9f0:	681c      	ldr	r4, [r3, #0]
 801f9f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f9f4:	b9b3      	cbnz	r3, 801fa24 <rand+0x38>
 801f9f6:	2018      	movs	r0, #24
 801f9f8:	f000 fb9a 	bl	8020130 <malloc>
 801f9fc:	4602      	mov	r2, r0
 801f9fe:	6320      	str	r0, [r4, #48]	@ 0x30
 801fa00:	b920      	cbnz	r0, 801fa0c <rand+0x20>
 801fa02:	4b12      	ldr	r3, [pc, #72]	@ (801fa4c <rand+0x60>)
 801fa04:	4812      	ldr	r0, [pc, #72]	@ (801fa50 <rand+0x64>)
 801fa06:	2152      	movs	r1, #82	@ 0x52
 801fa08:	f000 fb2a 	bl	8020060 <__assert_func>
 801fa0c:	4911      	ldr	r1, [pc, #68]	@ (801fa54 <rand+0x68>)
 801fa0e:	4b12      	ldr	r3, [pc, #72]	@ (801fa58 <rand+0x6c>)
 801fa10:	e9c0 1300 	strd	r1, r3, [r0]
 801fa14:	4b11      	ldr	r3, [pc, #68]	@ (801fa5c <rand+0x70>)
 801fa16:	6083      	str	r3, [r0, #8]
 801fa18:	230b      	movs	r3, #11
 801fa1a:	8183      	strh	r3, [r0, #12]
 801fa1c:	2100      	movs	r1, #0
 801fa1e:	2001      	movs	r0, #1
 801fa20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fa24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801fa26:	480e      	ldr	r0, [pc, #56]	@ (801fa60 <rand+0x74>)
 801fa28:	690b      	ldr	r3, [r1, #16]
 801fa2a:	694c      	ldr	r4, [r1, #20]
 801fa2c:	4a0d      	ldr	r2, [pc, #52]	@ (801fa64 <rand+0x78>)
 801fa2e:	4358      	muls	r0, r3
 801fa30:	fb02 0004 	mla	r0, r2, r4, r0
 801fa34:	fba3 3202 	umull	r3, r2, r3, r2
 801fa38:	3301      	adds	r3, #1
 801fa3a:	eb40 0002 	adc.w	r0, r0, r2
 801fa3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801fa42:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801fa46:	bd10      	pop	{r4, pc}
 801fa48:	2000003c 	.word	0x2000003c
 801fa4c:	08024972 	.word	0x08024972
 801fa50:	08024989 	.word	0x08024989
 801fa54:	abcd330e 	.word	0xabcd330e
 801fa58:	e66d1234 	.word	0xe66d1234
 801fa5c:	0005deec 	.word	0x0005deec
 801fa60:	5851f42d 	.word	0x5851f42d
 801fa64:	4c957f2d 	.word	0x4c957f2d

0801fa68 <std>:
 801fa68:	2300      	movs	r3, #0
 801fa6a:	b510      	push	{r4, lr}
 801fa6c:	4604      	mov	r4, r0
 801fa6e:	e9c0 3300 	strd	r3, r3, [r0]
 801fa72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fa76:	6083      	str	r3, [r0, #8]
 801fa78:	8181      	strh	r1, [r0, #12]
 801fa7a:	6643      	str	r3, [r0, #100]	@ 0x64
 801fa7c:	81c2      	strh	r2, [r0, #14]
 801fa7e:	6183      	str	r3, [r0, #24]
 801fa80:	4619      	mov	r1, r3
 801fa82:	2208      	movs	r2, #8
 801fa84:	305c      	adds	r0, #92	@ 0x5c
 801fa86:	f000 fa09 	bl	801fe9c <memset>
 801fa8a:	4b0d      	ldr	r3, [pc, #52]	@ (801fac0 <std+0x58>)
 801fa8c:	6263      	str	r3, [r4, #36]	@ 0x24
 801fa8e:	4b0d      	ldr	r3, [pc, #52]	@ (801fac4 <std+0x5c>)
 801fa90:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fa92:	4b0d      	ldr	r3, [pc, #52]	@ (801fac8 <std+0x60>)
 801fa94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fa96:	4b0d      	ldr	r3, [pc, #52]	@ (801facc <std+0x64>)
 801fa98:	6323      	str	r3, [r4, #48]	@ 0x30
 801fa9a:	4b0d      	ldr	r3, [pc, #52]	@ (801fad0 <std+0x68>)
 801fa9c:	6224      	str	r4, [r4, #32]
 801fa9e:	429c      	cmp	r4, r3
 801faa0:	d006      	beq.n	801fab0 <std+0x48>
 801faa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801faa6:	4294      	cmp	r4, r2
 801faa8:	d002      	beq.n	801fab0 <std+0x48>
 801faaa:	33d0      	adds	r3, #208	@ 0xd0
 801faac:	429c      	cmp	r4, r3
 801faae:	d105      	bne.n	801fabc <std+0x54>
 801fab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801fab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fab8:	f000 bac0 	b.w	802003c <__retarget_lock_init_recursive>
 801fabc:	bd10      	pop	{r4, pc}
 801fabe:	bf00      	nop
 801fac0:	0801fccd 	.word	0x0801fccd
 801fac4:	0801fcef 	.word	0x0801fcef
 801fac8:	0801fd27 	.word	0x0801fd27
 801facc:	0801fd4b 	.word	0x0801fd4b
 801fad0:	2002d774 	.word	0x2002d774

0801fad4 <stdio_exit_handler>:
 801fad4:	4a02      	ldr	r2, [pc, #8]	@ (801fae0 <stdio_exit_handler+0xc>)
 801fad6:	4903      	ldr	r1, [pc, #12]	@ (801fae4 <stdio_exit_handler+0x10>)
 801fad8:	4803      	ldr	r0, [pc, #12]	@ (801fae8 <stdio_exit_handler+0x14>)
 801fada:	f000 b869 	b.w	801fbb0 <_fwalk_sglue>
 801fade:	bf00      	nop
 801fae0:	20000030 	.word	0x20000030
 801fae4:	08020941 	.word	0x08020941
 801fae8:	20000040 	.word	0x20000040

0801faec <cleanup_stdio>:
 801faec:	6841      	ldr	r1, [r0, #4]
 801faee:	4b0c      	ldr	r3, [pc, #48]	@ (801fb20 <cleanup_stdio+0x34>)
 801faf0:	4299      	cmp	r1, r3
 801faf2:	b510      	push	{r4, lr}
 801faf4:	4604      	mov	r4, r0
 801faf6:	d001      	beq.n	801fafc <cleanup_stdio+0x10>
 801faf8:	f000 ff22 	bl	8020940 <_fflush_r>
 801fafc:	68a1      	ldr	r1, [r4, #8]
 801fafe:	4b09      	ldr	r3, [pc, #36]	@ (801fb24 <cleanup_stdio+0x38>)
 801fb00:	4299      	cmp	r1, r3
 801fb02:	d002      	beq.n	801fb0a <cleanup_stdio+0x1e>
 801fb04:	4620      	mov	r0, r4
 801fb06:	f000 ff1b 	bl	8020940 <_fflush_r>
 801fb0a:	68e1      	ldr	r1, [r4, #12]
 801fb0c:	4b06      	ldr	r3, [pc, #24]	@ (801fb28 <cleanup_stdio+0x3c>)
 801fb0e:	4299      	cmp	r1, r3
 801fb10:	d004      	beq.n	801fb1c <cleanup_stdio+0x30>
 801fb12:	4620      	mov	r0, r4
 801fb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb18:	f000 bf12 	b.w	8020940 <_fflush_r>
 801fb1c:	bd10      	pop	{r4, pc}
 801fb1e:	bf00      	nop
 801fb20:	2002d774 	.word	0x2002d774
 801fb24:	2002d7dc 	.word	0x2002d7dc
 801fb28:	2002d844 	.word	0x2002d844

0801fb2c <global_stdio_init.part.0>:
 801fb2c:	b510      	push	{r4, lr}
 801fb2e:	4b0b      	ldr	r3, [pc, #44]	@ (801fb5c <global_stdio_init.part.0+0x30>)
 801fb30:	4c0b      	ldr	r4, [pc, #44]	@ (801fb60 <global_stdio_init.part.0+0x34>)
 801fb32:	4a0c      	ldr	r2, [pc, #48]	@ (801fb64 <global_stdio_init.part.0+0x38>)
 801fb34:	601a      	str	r2, [r3, #0]
 801fb36:	4620      	mov	r0, r4
 801fb38:	2200      	movs	r2, #0
 801fb3a:	2104      	movs	r1, #4
 801fb3c:	f7ff ff94 	bl	801fa68 <std>
 801fb40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801fb44:	2201      	movs	r2, #1
 801fb46:	2109      	movs	r1, #9
 801fb48:	f7ff ff8e 	bl	801fa68 <std>
 801fb4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801fb50:	2202      	movs	r2, #2
 801fb52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb56:	2112      	movs	r1, #18
 801fb58:	f7ff bf86 	b.w	801fa68 <std>
 801fb5c:	2002d8ac 	.word	0x2002d8ac
 801fb60:	2002d774 	.word	0x2002d774
 801fb64:	0801fad5 	.word	0x0801fad5

0801fb68 <__sfp_lock_acquire>:
 801fb68:	4801      	ldr	r0, [pc, #4]	@ (801fb70 <__sfp_lock_acquire+0x8>)
 801fb6a:	f000 ba68 	b.w	802003e <__retarget_lock_acquire_recursive>
 801fb6e:	bf00      	nop
 801fb70:	2002d8b5 	.word	0x2002d8b5

0801fb74 <__sfp_lock_release>:
 801fb74:	4801      	ldr	r0, [pc, #4]	@ (801fb7c <__sfp_lock_release+0x8>)
 801fb76:	f000 ba63 	b.w	8020040 <__retarget_lock_release_recursive>
 801fb7a:	bf00      	nop
 801fb7c:	2002d8b5 	.word	0x2002d8b5

0801fb80 <__sinit>:
 801fb80:	b510      	push	{r4, lr}
 801fb82:	4604      	mov	r4, r0
 801fb84:	f7ff fff0 	bl	801fb68 <__sfp_lock_acquire>
 801fb88:	6a23      	ldr	r3, [r4, #32]
 801fb8a:	b11b      	cbz	r3, 801fb94 <__sinit+0x14>
 801fb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb90:	f7ff bff0 	b.w	801fb74 <__sfp_lock_release>
 801fb94:	4b04      	ldr	r3, [pc, #16]	@ (801fba8 <__sinit+0x28>)
 801fb96:	6223      	str	r3, [r4, #32]
 801fb98:	4b04      	ldr	r3, [pc, #16]	@ (801fbac <__sinit+0x2c>)
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	d1f5      	bne.n	801fb8c <__sinit+0xc>
 801fba0:	f7ff ffc4 	bl	801fb2c <global_stdio_init.part.0>
 801fba4:	e7f2      	b.n	801fb8c <__sinit+0xc>
 801fba6:	bf00      	nop
 801fba8:	0801faed 	.word	0x0801faed
 801fbac:	2002d8ac 	.word	0x2002d8ac

0801fbb0 <_fwalk_sglue>:
 801fbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fbb4:	4607      	mov	r7, r0
 801fbb6:	4688      	mov	r8, r1
 801fbb8:	4614      	mov	r4, r2
 801fbba:	2600      	movs	r6, #0
 801fbbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fbc0:	f1b9 0901 	subs.w	r9, r9, #1
 801fbc4:	d505      	bpl.n	801fbd2 <_fwalk_sglue+0x22>
 801fbc6:	6824      	ldr	r4, [r4, #0]
 801fbc8:	2c00      	cmp	r4, #0
 801fbca:	d1f7      	bne.n	801fbbc <_fwalk_sglue+0xc>
 801fbcc:	4630      	mov	r0, r6
 801fbce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fbd2:	89ab      	ldrh	r3, [r5, #12]
 801fbd4:	2b01      	cmp	r3, #1
 801fbd6:	d907      	bls.n	801fbe8 <_fwalk_sglue+0x38>
 801fbd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fbdc:	3301      	adds	r3, #1
 801fbde:	d003      	beq.n	801fbe8 <_fwalk_sglue+0x38>
 801fbe0:	4629      	mov	r1, r5
 801fbe2:	4638      	mov	r0, r7
 801fbe4:	47c0      	blx	r8
 801fbe6:	4306      	orrs	r6, r0
 801fbe8:	3568      	adds	r5, #104	@ 0x68
 801fbea:	e7e9      	b.n	801fbc0 <_fwalk_sglue+0x10>

0801fbec <iprintf>:
 801fbec:	b40f      	push	{r0, r1, r2, r3}
 801fbee:	b507      	push	{r0, r1, r2, lr}
 801fbf0:	4906      	ldr	r1, [pc, #24]	@ (801fc0c <iprintf+0x20>)
 801fbf2:	ab04      	add	r3, sp, #16
 801fbf4:	6808      	ldr	r0, [r1, #0]
 801fbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 801fbfa:	6881      	ldr	r1, [r0, #8]
 801fbfc:	9301      	str	r3, [sp, #4]
 801fbfe:	f000 fb77 	bl	80202f0 <_vfiprintf_r>
 801fc02:	b003      	add	sp, #12
 801fc04:	f85d eb04 	ldr.w	lr, [sp], #4
 801fc08:	b004      	add	sp, #16
 801fc0a:	4770      	bx	lr
 801fc0c:	2000003c 	.word	0x2000003c

0801fc10 <_puts_r>:
 801fc10:	6a03      	ldr	r3, [r0, #32]
 801fc12:	b570      	push	{r4, r5, r6, lr}
 801fc14:	6884      	ldr	r4, [r0, #8]
 801fc16:	4605      	mov	r5, r0
 801fc18:	460e      	mov	r6, r1
 801fc1a:	b90b      	cbnz	r3, 801fc20 <_puts_r+0x10>
 801fc1c:	f7ff ffb0 	bl	801fb80 <__sinit>
 801fc20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fc22:	07db      	lsls	r3, r3, #31
 801fc24:	d405      	bmi.n	801fc32 <_puts_r+0x22>
 801fc26:	89a3      	ldrh	r3, [r4, #12]
 801fc28:	0598      	lsls	r0, r3, #22
 801fc2a:	d402      	bmi.n	801fc32 <_puts_r+0x22>
 801fc2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fc2e:	f000 fa06 	bl	802003e <__retarget_lock_acquire_recursive>
 801fc32:	89a3      	ldrh	r3, [r4, #12]
 801fc34:	0719      	lsls	r1, r3, #28
 801fc36:	d502      	bpl.n	801fc3e <_puts_r+0x2e>
 801fc38:	6923      	ldr	r3, [r4, #16]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d135      	bne.n	801fcaa <_puts_r+0x9a>
 801fc3e:	4621      	mov	r1, r4
 801fc40:	4628      	mov	r0, r5
 801fc42:	f000 f8c5 	bl	801fdd0 <__swsetup_r>
 801fc46:	b380      	cbz	r0, 801fcaa <_puts_r+0x9a>
 801fc48:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801fc4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fc4e:	07da      	lsls	r2, r3, #31
 801fc50:	d405      	bmi.n	801fc5e <_puts_r+0x4e>
 801fc52:	89a3      	ldrh	r3, [r4, #12]
 801fc54:	059b      	lsls	r3, r3, #22
 801fc56:	d402      	bmi.n	801fc5e <_puts_r+0x4e>
 801fc58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fc5a:	f000 f9f1 	bl	8020040 <__retarget_lock_release_recursive>
 801fc5e:	4628      	mov	r0, r5
 801fc60:	bd70      	pop	{r4, r5, r6, pc}
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	da04      	bge.n	801fc70 <_puts_r+0x60>
 801fc66:	69a2      	ldr	r2, [r4, #24]
 801fc68:	429a      	cmp	r2, r3
 801fc6a:	dc17      	bgt.n	801fc9c <_puts_r+0x8c>
 801fc6c:	290a      	cmp	r1, #10
 801fc6e:	d015      	beq.n	801fc9c <_puts_r+0x8c>
 801fc70:	6823      	ldr	r3, [r4, #0]
 801fc72:	1c5a      	adds	r2, r3, #1
 801fc74:	6022      	str	r2, [r4, #0]
 801fc76:	7019      	strb	r1, [r3, #0]
 801fc78:	68a3      	ldr	r3, [r4, #8]
 801fc7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fc7e:	3b01      	subs	r3, #1
 801fc80:	60a3      	str	r3, [r4, #8]
 801fc82:	2900      	cmp	r1, #0
 801fc84:	d1ed      	bne.n	801fc62 <_puts_r+0x52>
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	da11      	bge.n	801fcae <_puts_r+0x9e>
 801fc8a:	4622      	mov	r2, r4
 801fc8c:	210a      	movs	r1, #10
 801fc8e:	4628      	mov	r0, r5
 801fc90:	f000 f85f 	bl	801fd52 <__swbuf_r>
 801fc94:	3001      	adds	r0, #1
 801fc96:	d0d7      	beq.n	801fc48 <_puts_r+0x38>
 801fc98:	250a      	movs	r5, #10
 801fc9a:	e7d7      	b.n	801fc4c <_puts_r+0x3c>
 801fc9c:	4622      	mov	r2, r4
 801fc9e:	4628      	mov	r0, r5
 801fca0:	f000 f857 	bl	801fd52 <__swbuf_r>
 801fca4:	3001      	adds	r0, #1
 801fca6:	d1e7      	bne.n	801fc78 <_puts_r+0x68>
 801fca8:	e7ce      	b.n	801fc48 <_puts_r+0x38>
 801fcaa:	3e01      	subs	r6, #1
 801fcac:	e7e4      	b.n	801fc78 <_puts_r+0x68>
 801fcae:	6823      	ldr	r3, [r4, #0]
 801fcb0:	1c5a      	adds	r2, r3, #1
 801fcb2:	6022      	str	r2, [r4, #0]
 801fcb4:	220a      	movs	r2, #10
 801fcb6:	701a      	strb	r2, [r3, #0]
 801fcb8:	e7ee      	b.n	801fc98 <_puts_r+0x88>
	...

0801fcbc <puts>:
 801fcbc:	4b02      	ldr	r3, [pc, #8]	@ (801fcc8 <puts+0xc>)
 801fcbe:	4601      	mov	r1, r0
 801fcc0:	6818      	ldr	r0, [r3, #0]
 801fcc2:	f7ff bfa5 	b.w	801fc10 <_puts_r>
 801fcc6:	bf00      	nop
 801fcc8:	2000003c 	.word	0x2000003c

0801fccc <__sread>:
 801fccc:	b510      	push	{r4, lr}
 801fcce:	460c      	mov	r4, r1
 801fcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fcd4:	f000 f96a 	bl	801ffac <_read_r>
 801fcd8:	2800      	cmp	r0, #0
 801fcda:	bfab      	itete	ge
 801fcdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801fcde:	89a3      	ldrhlt	r3, [r4, #12]
 801fce0:	181b      	addge	r3, r3, r0
 801fce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801fce6:	bfac      	ite	ge
 801fce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801fcea:	81a3      	strhlt	r3, [r4, #12]
 801fcec:	bd10      	pop	{r4, pc}

0801fcee <__swrite>:
 801fcee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fcf2:	461f      	mov	r7, r3
 801fcf4:	898b      	ldrh	r3, [r1, #12]
 801fcf6:	05db      	lsls	r3, r3, #23
 801fcf8:	4605      	mov	r5, r0
 801fcfa:	460c      	mov	r4, r1
 801fcfc:	4616      	mov	r6, r2
 801fcfe:	d505      	bpl.n	801fd0c <__swrite+0x1e>
 801fd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd04:	2302      	movs	r3, #2
 801fd06:	2200      	movs	r2, #0
 801fd08:	f000 f93e 	bl	801ff88 <_lseek_r>
 801fd0c:	89a3      	ldrh	r3, [r4, #12]
 801fd0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801fd16:	81a3      	strh	r3, [r4, #12]
 801fd18:	4632      	mov	r2, r6
 801fd1a:	463b      	mov	r3, r7
 801fd1c:	4628      	mov	r0, r5
 801fd1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fd22:	f000 b955 	b.w	801ffd0 <_write_r>

0801fd26 <__sseek>:
 801fd26:	b510      	push	{r4, lr}
 801fd28:	460c      	mov	r4, r1
 801fd2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd2e:	f000 f92b 	bl	801ff88 <_lseek_r>
 801fd32:	1c43      	adds	r3, r0, #1
 801fd34:	89a3      	ldrh	r3, [r4, #12]
 801fd36:	bf15      	itete	ne
 801fd38:	6560      	strne	r0, [r4, #84]	@ 0x54
 801fd3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801fd3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801fd42:	81a3      	strheq	r3, [r4, #12]
 801fd44:	bf18      	it	ne
 801fd46:	81a3      	strhne	r3, [r4, #12]
 801fd48:	bd10      	pop	{r4, pc}

0801fd4a <__sclose>:
 801fd4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd4e:	f000 b8ad 	b.w	801feac <_close_r>

0801fd52 <__swbuf_r>:
 801fd52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd54:	460e      	mov	r6, r1
 801fd56:	4614      	mov	r4, r2
 801fd58:	4605      	mov	r5, r0
 801fd5a:	b118      	cbz	r0, 801fd64 <__swbuf_r+0x12>
 801fd5c:	6a03      	ldr	r3, [r0, #32]
 801fd5e:	b90b      	cbnz	r3, 801fd64 <__swbuf_r+0x12>
 801fd60:	f7ff ff0e 	bl	801fb80 <__sinit>
 801fd64:	69a3      	ldr	r3, [r4, #24]
 801fd66:	60a3      	str	r3, [r4, #8]
 801fd68:	89a3      	ldrh	r3, [r4, #12]
 801fd6a:	071a      	lsls	r2, r3, #28
 801fd6c:	d501      	bpl.n	801fd72 <__swbuf_r+0x20>
 801fd6e:	6923      	ldr	r3, [r4, #16]
 801fd70:	b943      	cbnz	r3, 801fd84 <__swbuf_r+0x32>
 801fd72:	4621      	mov	r1, r4
 801fd74:	4628      	mov	r0, r5
 801fd76:	f000 f82b 	bl	801fdd0 <__swsetup_r>
 801fd7a:	b118      	cbz	r0, 801fd84 <__swbuf_r+0x32>
 801fd7c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801fd80:	4638      	mov	r0, r7
 801fd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd84:	6823      	ldr	r3, [r4, #0]
 801fd86:	6922      	ldr	r2, [r4, #16]
 801fd88:	1a98      	subs	r0, r3, r2
 801fd8a:	6963      	ldr	r3, [r4, #20]
 801fd8c:	b2f6      	uxtb	r6, r6
 801fd8e:	4283      	cmp	r3, r0
 801fd90:	4637      	mov	r7, r6
 801fd92:	dc05      	bgt.n	801fda0 <__swbuf_r+0x4e>
 801fd94:	4621      	mov	r1, r4
 801fd96:	4628      	mov	r0, r5
 801fd98:	f000 fdd2 	bl	8020940 <_fflush_r>
 801fd9c:	2800      	cmp	r0, #0
 801fd9e:	d1ed      	bne.n	801fd7c <__swbuf_r+0x2a>
 801fda0:	68a3      	ldr	r3, [r4, #8]
 801fda2:	3b01      	subs	r3, #1
 801fda4:	60a3      	str	r3, [r4, #8]
 801fda6:	6823      	ldr	r3, [r4, #0]
 801fda8:	1c5a      	adds	r2, r3, #1
 801fdaa:	6022      	str	r2, [r4, #0]
 801fdac:	701e      	strb	r6, [r3, #0]
 801fdae:	6962      	ldr	r2, [r4, #20]
 801fdb0:	1c43      	adds	r3, r0, #1
 801fdb2:	429a      	cmp	r2, r3
 801fdb4:	d004      	beq.n	801fdc0 <__swbuf_r+0x6e>
 801fdb6:	89a3      	ldrh	r3, [r4, #12]
 801fdb8:	07db      	lsls	r3, r3, #31
 801fdba:	d5e1      	bpl.n	801fd80 <__swbuf_r+0x2e>
 801fdbc:	2e0a      	cmp	r6, #10
 801fdbe:	d1df      	bne.n	801fd80 <__swbuf_r+0x2e>
 801fdc0:	4621      	mov	r1, r4
 801fdc2:	4628      	mov	r0, r5
 801fdc4:	f000 fdbc 	bl	8020940 <_fflush_r>
 801fdc8:	2800      	cmp	r0, #0
 801fdca:	d0d9      	beq.n	801fd80 <__swbuf_r+0x2e>
 801fdcc:	e7d6      	b.n	801fd7c <__swbuf_r+0x2a>
	...

0801fdd0 <__swsetup_r>:
 801fdd0:	b538      	push	{r3, r4, r5, lr}
 801fdd2:	4b29      	ldr	r3, [pc, #164]	@ (801fe78 <__swsetup_r+0xa8>)
 801fdd4:	4605      	mov	r5, r0
 801fdd6:	6818      	ldr	r0, [r3, #0]
 801fdd8:	460c      	mov	r4, r1
 801fdda:	b118      	cbz	r0, 801fde4 <__swsetup_r+0x14>
 801fddc:	6a03      	ldr	r3, [r0, #32]
 801fdde:	b90b      	cbnz	r3, 801fde4 <__swsetup_r+0x14>
 801fde0:	f7ff fece 	bl	801fb80 <__sinit>
 801fde4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fde8:	0719      	lsls	r1, r3, #28
 801fdea:	d422      	bmi.n	801fe32 <__swsetup_r+0x62>
 801fdec:	06da      	lsls	r2, r3, #27
 801fdee:	d407      	bmi.n	801fe00 <__swsetup_r+0x30>
 801fdf0:	2209      	movs	r2, #9
 801fdf2:	602a      	str	r2, [r5, #0]
 801fdf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fdf8:	81a3      	strh	r3, [r4, #12]
 801fdfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fdfe:	e033      	b.n	801fe68 <__swsetup_r+0x98>
 801fe00:	0758      	lsls	r0, r3, #29
 801fe02:	d512      	bpl.n	801fe2a <__swsetup_r+0x5a>
 801fe04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fe06:	b141      	cbz	r1, 801fe1a <__swsetup_r+0x4a>
 801fe08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fe0c:	4299      	cmp	r1, r3
 801fe0e:	d002      	beq.n	801fe16 <__swsetup_r+0x46>
 801fe10:	4628      	mov	r0, r5
 801fe12:	f000 f943 	bl	802009c <_free_r>
 801fe16:	2300      	movs	r3, #0
 801fe18:	6363      	str	r3, [r4, #52]	@ 0x34
 801fe1a:	89a3      	ldrh	r3, [r4, #12]
 801fe1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801fe20:	81a3      	strh	r3, [r4, #12]
 801fe22:	2300      	movs	r3, #0
 801fe24:	6063      	str	r3, [r4, #4]
 801fe26:	6923      	ldr	r3, [r4, #16]
 801fe28:	6023      	str	r3, [r4, #0]
 801fe2a:	89a3      	ldrh	r3, [r4, #12]
 801fe2c:	f043 0308 	orr.w	r3, r3, #8
 801fe30:	81a3      	strh	r3, [r4, #12]
 801fe32:	6923      	ldr	r3, [r4, #16]
 801fe34:	b94b      	cbnz	r3, 801fe4a <__swsetup_r+0x7a>
 801fe36:	89a3      	ldrh	r3, [r4, #12]
 801fe38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801fe3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801fe40:	d003      	beq.n	801fe4a <__swsetup_r+0x7a>
 801fe42:	4621      	mov	r1, r4
 801fe44:	4628      	mov	r0, r5
 801fe46:	f000 fddb 	bl	8020a00 <__smakebuf_r>
 801fe4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fe4e:	f013 0201 	ands.w	r2, r3, #1
 801fe52:	d00a      	beq.n	801fe6a <__swsetup_r+0x9a>
 801fe54:	2200      	movs	r2, #0
 801fe56:	60a2      	str	r2, [r4, #8]
 801fe58:	6962      	ldr	r2, [r4, #20]
 801fe5a:	4252      	negs	r2, r2
 801fe5c:	61a2      	str	r2, [r4, #24]
 801fe5e:	6922      	ldr	r2, [r4, #16]
 801fe60:	b942      	cbnz	r2, 801fe74 <__swsetup_r+0xa4>
 801fe62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801fe66:	d1c5      	bne.n	801fdf4 <__swsetup_r+0x24>
 801fe68:	bd38      	pop	{r3, r4, r5, pc}
 801fe6a:	0799      	lsls	r1, r3, #30
 801fe6c:	bf58      	it	pl
 801fe6e:	6962      	ldrpl	r2, [r4, #20]
 801fe70:	60a2      	str	r2, [r4, #8]
 801fe72:	e7f4      	b.n	801fe5e <__swsetup_r+0x8e>
 801fe74:	2000      	movs	r0, #0
 801fe76:	e7f7      	b.n	801fe68 <__swsetup_r+0x98>
 801fe78:	2000003c 	.word	0x2000003c

0801fe7c <memcmp>:
 801fe7c:	b510      	push	{r4, lr}
 801fe7e:	3901      	subs	r1, #1
 801fe80:	4402      	add	r2, r0
 801fe82:	4290      	cmp	r0, r2
 801fe84:	d101      	bne.n	801fe8a <memcmp+0xe>
 801fe86:	2000      	movs	r0, #0
 801fe88:	e005      	b.n	801fe96 <memcmp+0x1a>
 801fe8a:	7803      	ldrb	r3, [r0, #0]
 801fe8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fe90:	42a3      	cmp	r3, r4
 801fe92:	d001      	beq.n	801fe98 <memcmp+0x1c>
 801fe94:	1b18      	subs	r0, r3, r4
 801fe96:	bd10      	pop	{r4, pc}
 801fe98:	3001      	adds	r0, #1
 801fe9a:	e7f2      	b.n	801fe82 <memcmp+0x6>

0801fe9c <memset>:
 801fe9c:	4402      	add	r2, r0
 801fe9e:	4603      	mov	r3, r0
 801fea0:	4293      	cmp	r3, r2
 801fea2:	d100      	bne.n	801fea6 <memset+0xa>
 801fea4:	4770      	bx	lr
 801fea6:	f803 1b01 	strb.w	r1, [r3], #1
 801feaa:	e7f9      	b.n	801fea0 <memset+0x4>

0801feac <_close_r>:
 801feac:	b538      	push	{r3, r4, r5, lr}
 801feae:	4d06      	ldr	r5, [pc, #24]	@ (801fec8 <_close_r+0x1c>)
 801feb0:	2300      	movs	r3, #0
 801feb2:	4604      	mov	r4, r0
 801feb4:	4608      	mov	r0, r1
 801feb6:	602b      	str	r3, [r5, #0]
 801feb8:	f7e1 fd90 	bl	80019dc <_close>
 801febc:	1c43      	adds	r3, r0, #1
 801febe:	d102      	bne.n	801fec6 <_close_r+0x1a>
 801fec0:	682b      	ldr	r3, [r5, #0]
 801fec2:	b103      	cbz	r3, 801fec6 <_close_r+0x1a>
 801fec4:	6023      	str	r3, [r4, #0]
 801fec6:	bd38      	pop	{r3, r4, r5, pc}
 801fec8:	2002d8b0 	.word	0x2002d8b0

0801fecc <_reclaim_reent>:
 801fecc:	4b2d      	ldr	r3, [pc, #180]	@ (801ff84 <_reclaim_reent+0xb8>)
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	4283      	cmp	r3, r0
 801fed2:	b570      	push	{r4, r5, r6, lr}
 801fed4:	4604      	mov	r4, r0
 801fed6:	d053      	beq.n	801ff80 <_reclaim_reent+0xb4>
 801fed8:	69c3      	ldr	r3, [r0, #28]
 801feda:	b31b      	cbz	r3, 801ff24 <_reclaim_reent+0x58>
 801fedc:	68db      	ldr	r3, [r3, #12]
 801fede:	b163      	cbz	r3, 801fefa <_reclaim_reent+0x2e>
 801fee0:	2500      	movs	r5, #0
 801fee2:	69e3      	ldr	r3, [r4, #28]
 801fee4:	68db      	ldr	r3, [r3, #12]
 801fee6:	5959      	ldr	r1, [r3, r5]
 801fee8:	b9b1      	cbnz	r1, 801ff18 <_reclaim_reent+0x4c>
 801feea:	3504      	adds	r5, #4
 801feec:	2d80      	cmp	r5, #128	@ 0x80
 801feee:	d1f8      	bne.n	801fee2 <_reclaim_reent+0x16>
 801fef0:	69e3      	ldr	r3, [r4, #28]
 801fef2:	4620      	mov	r0, r4
 801fef4:	68d9      	ldr	r1, [r3, #12]
 801fef6:	f000 f8d1 	bl	802009c <_free_r>
 801fefa:	69e3      	ldr	r3, [r4, #28]
 801fefc:	6819      	ldr	r1, [r3, #0]
 801fefe:	b111      	cbz	r1, 801ff06 <_reclaim_reent+0x3a>
 801ff00:	4620      	mov	r0, r4
 801ff02:	f000 f8cb 	bl	802009c <_free_r>
 801ff06:	69e3      	ldr	r3, [r4, #28]
 801ff08:	689d      	ldr	r5, [r3, #8]
 801ff0a:	b15d      	cbz	r5, 801ff24 <_reclaim_reent+0x58>
 801ff0c:	4629      	mov	r1, r5
 801ff0e:	4620      	mov	r0, r4
 801ff10:	682d      	ldr	r5, [r5, #0]
 801ff12:	f000 f8c3 	bl	802009c <_free_r>
 801ff16:	e7f8      	b.n	801ff0a <_reclaim_reent+0x3e>
 801ff18:	680e      	ldr	r6, [r1, #0]
 801ff1a:	4620      	mov	r0, r4
 801ff1c:	f000 f8be 	bl	802009c <_free_r>
 801ff20:	4631      	mov	r1, r6
 801ff22:	e7e1      	b.n	801fee8 <_reclaim_reent+0x1c>
 801ff24:	6961      	ldr	r1, [r4, #20]
 801ff26:	b111      	cbz	r1, 801ff2e <_reclaim_reent+0x62>
 801ff28:	4620      	mov	r0, r4
 801ff2a:	f000 f8b7 	bl	802009c <_free_r>
 801ff2e:	69e1      	ldr	r1, [r4, #28]
 801ff30:	b111      	cbz	r1, 801ff38 <_reclaim_reent+0x6c>
 801ff32:	4620      	mov	r0, r4
 801ff34:	f000 f8b2 	bl	802009c <_free_r>
 801ff38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ff3a:	b111      	cbz	r1, 801ff42 <_reclaim_reent+0x76>
 801ff3c:	4620      	mov	r0, r4
 801ff3e:	f000 f8ad 	bl	802009c <_free_r>
 801ff42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ff44:	b111      	cbz	r1, 801ff4c <_reclaim_reent+0x80>
 801ff46:	4620      	mov	r0, r4
 801ff48:	f000 f8a8 	bl	802009c <_free_r>
 801ff4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801ff4e:	b111      	cbz	r1, 801ff56 <_reclaim_reent+0x8a>
 801ff50:	4620      	mov	r0, r4
 801ff52:	f000 f8a3 	bl	802009c <_free_r>
 801ff56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801ff58:	b111      	cbz	r1, 801ff60 <_reclaim_reent+0x94>
 801ff5a:	4620      	mov	r0, r4
 801ff5c:	f000 f89e 	bl	802009c <_free_r>
 801ff60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801ff62:	b111      	cbz	r1, 801ff6a <_reclaim_reent+0x9e>
 801ff64:	4620      	mov	r0, r4
 801ff66:	f000 f899 	bl	802009c <_free_r>
 801ff6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ff6c:	b111      	cbz	r1, 801ff74 <_reclaim_reent+0xa8>
 801ff6e:	4620      	mov	r0, r4
 801ff70:	f000 f894 	bl	802009c <_free_r>
 801ff74:	6a23      	ldr	r3, [r4, #32]
 801ff76:	b11b      	cbz	r3, 801ff80 <_reclaim_reent+0xb4>
 801ff78:	4620      	mov	r0, r4
 801ff7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ff7e:	4718      	bx	r3
 801ff80:	bd70      	pop	{r4, r5, r6, pc}
 801ff82:	bf00      	nop
 801ff84:	2000003c 	.word	0x2000003c

0801ff88 <_lseek_r>:
 801ff88:	b538      	push	{r3, r4, r5, lr}
 801ff8a:	4d07      	ldr	r5, [pc, #28]	@ (801ffa8 <_lseek_r+0x20>)
 801ff8c:	4604      	mov	r4, r0
 801ff8e:	4608      	mov	r0, r1
 801ff90:	4611      	mov	r1, r2
 801ff92:	2200      	movs	r2, #0
 801ff94:	602a      	str	r2, [r5, #0]
 801ff96:	461a      	mov	r2, r3
 801ff98:	f7e1 fd47 	bl	8001a2a <_lseek>
 801ff9c:	1c43      	adds	r3, r0, #1
 801ff9e:	d102      	bne.n	801ffa6 <_lseek_r+0x1e>
 801ffa0:	682b      	ldr	r3, [r5, #0]
 801ffa2:	b103      	cbz	r3, 801ffa6 <_lseek_r+0x1e>
 801ffa4:	6023      	str	r3, [r4, #0]
 801ffa6:	bd38      	pop	{r3, r4, r5, pc}
 801ffa8:	2002d8b0 	.word	0x2002d8b0

0801ffac <_read_r>:
 801ffac:	b538      	push	{r3, r4, r5, lr}
 801ffae:	4d07      	ldr	r5, [pc, #28]	@ (801ffcc <_read_r+0x20>)
 801ffb0:	4604      	mov	r4, r0
 801ffb2:	4608      	mov	r0, r1
 801ffb4:	4611      	mov	r1, r2
 801ffb6:	2200      	movs	r2, #0
 801ffb8:	602a      	str	r2, [r5, #0]
 801ffba:	461a      	mov	r2, r3
 801ffbc:	f7e1 fcf1 	bl	80019a2 <_read>
 801ffc0:	1c43      	adds	r3, r0, #1
 801ffc2:	d102      	bne.n	801ffca <_read_r+0x1e>
 801ffc4:	682b      	ldr	r3, [r5, #0]
 801ffc6:	b103      	cbz	r3, 801ffca <_read_r+0x1e>
 801ffc8:	6023      	str	r3, [r4, #0]
 801ffca:	bd38      	pop	{r3, r4, r5, pc}
 801ffcc:	2002d8b0 	.word	0x2002d8b0

0801ffd0 <_write_r>:
 801ffd0:	b538      	push	{r3, r4, r5, lr}
 801ffd2:	4d07      	ldr	r5, [pc, #28]	@ (801fff0 <_write_r+0x20>)
 801ffd4:	4604      	mov	r4, r0
 801ffd6:	4608      	mov	r0, r1
 801ffd8:	4611      	mov	r1, r2
 801ffda:	2200      	movs	r2, #0
 801ffdc:	602a      	str	r2, [r5, #0]
 801ffde:	461a      	mov	r2, r3
 801ffe0:	f7e1 f850 	bl	8001084 <_write>
 801ffe4:	1c43      	adds	r3, r0, #1
 801ffe6:	d102      	bne.n	801ffee <_write_r+0x1e>
 801ffe8:	682b      	ldr	r3, [r5, #0]
 801ffea:	b103      	cbz	r3, 801ffee <_write_r+0x1e>
 801ffec:	6023      	str	r3, [r4, #0]
 801ffee:	bd38      	pop	{r3, r4, r5, pc}
 801fff0:	2002d8b0 	.word	0x2002d8b0

0801fff4 <__libc_init_array>:
 801fff4:	b570      	push	{r4, r5, r6, lr}
 801fff6:	4d0d      	ldr	r5, [pc, #52]	@ (802002c <__libc_init_array+0x38>)
 801fff8:	4c0d      	ldr	r4, [pc, #52]	@ (8020030 <__libc_init_array+0x3c>)
 801fffa:	1b64      	subs	r4, r4, r5
 801fffc:	10a4      	asrs	r4, r4, #2
 801fffe:	2600      	movs	r6, #0
 8020000:	42a6      	cmp	r6, r4
 8020002:	d109      	bne.n	8020018 <__libc_init_array+0x24>
 8020004:	4d0b      	ldr	r5, [pc, #44]	@ (8020034 <__libc_init_array+0x40>)
 8020006:	4c0c      	ldr	r4, [pc, #48]	@ (8020038 <__libc_init_array+0x44>)
 8020008:	f000 fdb4 	bl	8020b74 <_init>
 802000c:	1b64      	subs	r4, r4, r5
 802000e:	10a4      	asrs	r4, r4, #2
 8020010:	2600      	movs	r6, #0
 8020012:	42a6      	cmp	r6, r4
 8020014:	d105      	bne.n	8020022 <__libc_init_array+0x2e>
 8020016:	bd70      	pop	{r4, r5, r6, pc}
 8020018:	f855 3b04 	ldr.w	r3, [r5], #4
 802001c:	4798      	blx	r3
 802001e:	3601      	adds	r6, #1
 8020020:	e7ee      	b.n	8020000 <__libc_init_array+0xc>
 8020022:	f855 3b04 	ldr.w	r3, [r5], #4
 8020026:	4798      	blx	r3
 8020028:	3601      	adds	r6, #1
 802002a:	e7f2      	b.n	8020012 <__libc_init_array+0x1e>
 802002c:	08024a58 	.word	0x08024a58
 8020030:	08024a58 	.word	0x08024a58
 8020034:	08024a58 	.word	0x08024a58
 8020038:	08024a5c 	.word	0x08024a5c

0802003c <__retarget_lock_init_recursive>:
 802003c:	4770      	bx	lr

0802003e <__retarget_lock_acquire_recursive>:
 802003e:	4770      	bx	lr

08020040 <__retarget_lock_release_recursive>:
 8020040:	4770      	bx	lr

08020042 <memcpy>:
 8020042:	440a      	add	r2, r1
 8020044:	4291      	cmp	r1, r2
 8020046:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802004a:	d100      	bne.n	802004e <memcpy+0xc>
 802004c:	4770      	bx	lr
 802004e:	b510      	push	{r4, lr}
 8020050:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020054:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020058:	4291      	cmp	r1, r2
 802005a:	d1f9      	bne.n	8020050 <memcpy+0xe>
 802005c:	bd10      	pop	{r4, pc}
	...

08020060 <__assert_func>:
 8020060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020062:	4614      	mov	r4, r2
 8020064:	461a      	mov	r2, r3
 8020066:	4b09      	ldr	r3, [pc, #36]	@ (802008c <__assert_func+0x2c>)
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	4605      	mov	r5, r0
 802006c:	68d8      	ldr	r0, [r3, #12]
 802006e:	b14c      	cbz	r4, 8020084 <__assert_func+0x24>
 8020070:	4b07      	ldr	r3, [pc, #28]	@ (8020090 <__assert_func+0x30>)
 8020072:	9100      	str	r1, [sp, #0]
 8020074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020078:	4906      	ldr	r1, [pc, #24]	@ (8020094 <__assert_func+0x34>)
 802007a:	462b      	mov	r3, r5
 802007c:	f000 fc88 	bl	8020990 <fiprintf>
 8020080:	f000 fd2c 	bl	8020adc <abort>
 8020084:	4b04      	ldr	r3, [pc, #16]	@ (8020098 <__assert_func+0x38>)
 8020086:	461c      	mov	r4, r3
 8020088:	e7f3      	b.n	8020072 <__assert_func+0x12>
 802008a:	bf00      	nop
 802008c:	2000003c 	.word	0x2000003c
 8020090:	080249e1 	.word	0x080249e1
 8020094:	080249ee 	.word	0x080249ee
 8020098:	08024a1c 	.word	0x08024a1c

0802009c <_free_r>:
 802009c:	b538      	push	{r3, r4, r5, lr}
 802009e:	4605      	mov	r5, r0
 80200a0:	2900      	cmp	r1, #0
 80200a2:	d041      	beq.n	8020128 <_free_r+0x8c>
 80200a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80200a8:	1f0c      	subs	r4, r1, #4
 80200aa:	2b00      	cmp	r3, #0
 80200ac:	bfb8      	it	lt
 80200ae:	18e4      	addlt	r4, r4, r3
 80200b0:	f000 f8e8 	bl	8020284 <__malloc_lock>
 80200b4:	4a1d      	ldr	r2, [pc, #116]	@ (802012c <_free_r+0x90>)
 80200b6:	6813      	ldr	r3, [r2, #0]
 80200b8:	b933      	cbnz	r3, 80200c8 <_free_r+0x2c>
 80200ba:	6063      	str	r3, [r4, #4]
 80200bc:	6014      	str	r4, [r2, #0]
 80200be:	4628      	mov	r0, r5
 80200c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80200c4:	f000 b8e4 	b.w	8020290 <__malloc_unlock>
 80200c8:	42a3      	cmp	r3, r4
 80200ca:	d908      	bls.n	80200de <_free_r+0x42>
 80200cc:	6820      	ldr	r0, [r4, #0]
 80200ce:	1821      	adds	r1, r4, r0
 80200d0:	428b      	cmp	r3, r1
 80200d2:	bf01      	itttt	eq
 80200d4:	6819      	ldreq	r1, [r3, #0]
 80200d6:	685b      	ldreq	r3, [r3, #4]
 80200d8:	1809      	addeq	r1, r1, r0
 80200da:	6021      	streq	r1, [r4, #0]
 80200dc:	e7ed      	b.n	80200ba <_free_r+0x1e>
 80200de:	461a      	mov	r2, r3
 80200e0:	685b      	ldr	r3, [r3, #4]
 80200e2:	b10b      	cbz	r3, 80200e8 <_free_r+0x4c>
 80200e4:	42a3      	cmp	r3, r4
 80200e6:	d9fa      	bls.n	80200de <_free_r+0x42>
 80200e8:	6811      	ldr	r1, [r2, #0]
 80200ea:	1850      	adds	r0, r2, r1
 80200ec:	42a0      	cmp	r0, r4
 80200ee:	d10b      	bne.n	8020108 <_free_r+0x6c>
 80200f0:	6820      	ldr	r0, [r4, #0]
 80200f2:	4401      	add	r1, r0
 80200f4:	1850      	adds	r0, r2, r1
 80200f6:	4283      	cmp	r3, r0
 80200f8:	6011      	str	r1, [r2, #0]
 80200fa:	d1e0      	bne.n	80200be <_free_r+0x22>
 80200fc:	6818      	ldr	r0, [r3, #0]
 80200fe:	685b      	ldr	r3, [r3, #4]
 8020100:	6053      	str	r3, [r2, #4]
 8020102:	4408      	add	r0, r1
 8020104:	6010      	str	r0, [r2, #0]
 8020106:	e7da      	b.n	80200be <_free_r+0x22>
 8020108:	d902      	bls.n	8020110 <_free_r+0x74>
 802010a:	230c      	movs	r3, #12
 802010c:	602b      	str	r3, [r5, #0]
 802010e:	e7d6      	b.n	80200be <_free_r+0x22>
 8020110:	6820      	ldr	r0, [r4, #0]
 8020112:	1821      	adds	r1, r4, r0
 8020114:	428b      	cmp	r3, r1
 8020116:	bf04      	itt	eq
 8020118:	6819      	ldreq	r1, [r3, #0]
 802011a:	685b      	ldreq	r3, [r3, #4]
 802011c:	6063      	str	r3, [r4, #4]
 802011e:	bf04      	itt	eq
 8020120:	1809      	addeq	r1, r1, r0
 8020122:	6021      	streq	r1, [r4, #0]
 8020124:	6054      	str	r4, [r2, #4]
 8020126:	e7ca      	b.n	80200be <_free_r+0x22>
 8020128:	bd38      	pop	{r3, r4, r5, pc}
 802012a:	bf00      	nop
 802012c:	2002d8bc 	.word	0x2002d8bc

08020130 <malloc>:
 8020130:	4b02      	ldr	r3, [pc, #8]	@ (802013c <malloc+0xc>)
 8020132:	4601      	mov	r1, r0
 8020134:	6818      	ldr	r0, [r3, #0]
 8020136:	f000 b825 	b.w	8020184 <_malloc_r>
 802013a:	bf00      	nop
 802013c:	2000003c 	.word	0x2000003c

08020140 <sbrk_aligned>:
 8020140:	b570      	push	{r4, r5, r6, lr}
 8020142:	4e0f      	ldr	r6, [pc, #60]	@ (8020180 <sbrk_aligned+0x40>)
 8020144:	460c      	mov	r4, r1
 8020146:	6831      	ldr	r1, [r6, #0]
 8020148:	4605      	mov	r5, r0
 802014a:	b911      	cbnz	r1, 8020152 <sbrk_aligned+0x12>
 802014c:	f000 fcb6 	bl	8020abc <_sbrk_r>
 8020150:	6030      	str	r0, [r6, #0]
 8020152:	4621      	mov	r1, r4
 8020154:	4628      	mov	r0, r5
 8020156:	f000 fcb1 	bl	8020abc <_sbrk_r>
 802015a:	1c43      	adds	r3, r0, #1
 802015c:	d103      	bne.n	8020166 <sbrk_aligned+0x26>
 802015e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020162:	4620      	mov	r0, r4
 8020164:	bd70      	pop	{r4, r5, r6, pc}
 8020166:	1cc4      	adds	r4, r0, #3
 8020168:	f024 0403 	bic.w	r4, r4, #3
 802016c:	42a0      	cmp	r0, r4
 802016e:	d0f8      	beq.n	8020162 <sbrk_aligned+0x22>
 8020170:	1a21      	subs	r1, r4, r0
 8020172:	4628      	mov	r0, r5
 8020174:	f000 fca2 	bl	8020abc <_sbrk_r>
 8020178:	3001      	adds	r0, #1
 802017a:	d1f2      	bne.n	8020162 <sbrk_aligned+0x22>
 802017c:	e7ef      	b.n	802015e <sbrk_aligned+0x1e>
 802017e:	bf00      	nop
 8020180:	2002d8b8 	.word	0x2002d8b8

08020184 <_malloc_r>:
 8020184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020188:	1ccd      	adds	r5, r1, #3
 802018a:	f025 0503 	bic.w	r5, r5, #3
 802018e:	3508      	adds	r5, #8
 8020190:	2d0c      	cmp	r5, #12
 8020192:	bf38      	it	cc
 8020194:	250c      	movcc	r5, #12
 8020196:	2d00      	cmp	r5, #0
 8020198:	4606      	mov	r6, r0
 802019a:	db01      	blt.n	80201a0 <_malloc_r+0x1c>
 802019c:	42a9      	cmp	r1, r5
 802019e:	d904      	bls.n	80201aa <_malloc_r+0x26>
 80201a0:	230c      	movs	r3, #12
 80201a2:	6033      	str	r3, [r6, #0]
 80201a4:	2000      	movs	r0, #0
 80201a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80201aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020280 <_malloc_r+0xfc>
 80201ae:	f000 f869 	bl	8020284 <__malloc_lock>
 80201b2:	f8d8 3000 	ldr.w	r3, [r8]
 80201b6:	461c      	mov	r4, r3
 80201b8:	bb44      	cbnz	r4, 802020c <_malloc_r+0x88>
 80201ba:	4629      	mov	r1, r5
 80201bc:	4630      	mov	r0, r6
 80201be:	f7ff ffbf 	bl	8020140 <sbrk_aligned>
 80201c2:	1c43      	adds	r3, r0, #1
 80201c4:	4604      	mov	r4, r0
 80201c6:	d158      	bne.n	802027a <_malloc_r+0xf6>
 80201c8:	f8d8 4000 	ldr.w	r4, [r8]
 80201cc:	4627      	mov	r7, r4
 80201ce:	2f00      	cmp	r7, #0
 80201d0:	d143      	bne.n	802025a <_malloc_r+0xd6>
 80201d2:	2c00      	cmp	r4, #0
 80201d4:	d04b      	beq.n	802026e <_malloc_r+0xea>
 80201d6:	6823      	ldr	r3, [r4, #0]
 80201d8:	4639      	mov	r1, r7
 80201da:	4630      	mov	r0, r6
 80201dc:	eb04 0903 	add.w	r9, r4, r3
 80201e0:	f000 fc6c 	bl	8020abc <_sbrk_r>
 80201e4:	4581      	cmp	r9, r0
 80201e6:	d142      	bne.n	802026e <_malloc_r+0xea>
 80201e8:	6821      	ldr	r1, [r4, #0]
 80201ea:	1a6d      	subs	r5, r5, r1
 80201ec:	4629      	mov	r1, r5
 80201ee:	4630      	mov	r0, r6
 80201f0:	f7ff ffa6 	bl	8020140 <sbrk_aligned>
 80201f4:	3001      	adds	r0, #1
 80201f6:	d03a      	beq.n	802026e <_malloc_r+0xea>
 80201f8:	6823      	ldr	r3, [r4, #0]
 80201fa:	442b      	add	r3, r5
 80201fc:	6023      	str	r3, [r4, #0]
 80201fe:	f8d8 3000 	ldr.w	r3, [r8]
 8020202:	685a      	ldr	r2, [r3, #4]
 8020204:	bb62      	cbnz	r2, 8020260 <_malloc_r+0xdc>
 8020206:	f8c8 7000 	str.w	r7, [r8]
 802020a:	e00f      	b.n	802022c <_malloc_r+0xa8>
 802020c:	6822      	ldr	r2, [r4, #0]
 802020e:	1b52      	subs	r2, r2, r5
 8020210:	d420      	bmi.n	8020254 <_malloc_r+0xd0>
 8020212:	2a0b      	cmp	r2, #11
 8020214:	d917      	bls.n	8020246 <_malloc_r+0xc2>
 8020216:	1961      	adds	r1, r4, r5
 8020218:	42a3      	cmp	r3, r4
 802021a:	6025      	str	r5, [r4, #0]
 802021c:	bf18      	it	ne
 802021e:	6059      	strne	r1, [r3, #4]
 8020220:	6863      	ldr	r3, [r4, #4]
 8020222:	bf08      	it	eq
 8020224:	f8c8 1000 	streq.w	r1, [r8]
 8020228:	5162      	str	r2, [r4, r5]
 802022a:	604b      	str	r3, [r1, #4]
 802022c:	4630      	mov	r0, r6
 802022e:	f000 f82f 	bl	8020290 <__malloc_unlock>
 8020232:	f104 000b 	add.w	r0, r4, #11
 8020236:	1d23      	adds	r3, r4, #4
 8020238:	f020 0007 	bic.w	r0, r0, #7
 802023c:	1ac2      	subs	r2, r0, r3
 802023e:	bf1c      	itt	ne
 8020240:	1a1b      	subne	r3, r3, r0
 8020242:	50a3      	strne	r3, [r4, r2]
 8020244:	e7af      	b.n	80201a6 <_malloc_r+0x22>
 8020246:	6862      	ldr	r2, [r4, #4]
 8020248:	42a3      	cmp	r3, r4
 802024a:	bf0c      	ite	eq
 802024c:	f8c8 2000 	streq.w	r2, [r8]
 8020250:	605a      	strne	r2, [r3, #4]
 8020252:	e7eb      	b.n	802022c <_malloc_r+0xa8>
 8020254:	4623      	mov	r3, r4
 8020256:	6864      	ldr	r4, [r4, #4]
 8020258:	e7ae      	b.n	80201b8 <_malloc_r+0x34>
 802025a:	463c      	mov	r4, r7
 802025c:	687f      	ldr	r7, [r7, #4]
 802025e:	e7b6      	b.n	80201ce <_malloc_r+0x4a>
 8020260:	461a      	mov	r2, r3
 8020262:	685b      	ldr	r3, [r3, #4]
 8020264:	42a3      	cmp	r3, r4
 8020266:	d1fb      	bne.n	8020260 <_malloc_r+0xdc>
 8020268:	2300      	movs	r3, #0
 802026a:	6053      	str	r3, [r2, #4]
 802026c:	e7de      	b.n	802022c <_malloc_r+0xa8>
 802026e:	230c      	movs	r3, #12
 8020270:	6033      	str	r3, [r6, #0]
 8020272:	4630      	mov	r0, r6
 8020274:	f000 f80c 	bl	8020290 <__malloc_unlock>
 8020278:	e794      	b.n	80201a4 <_malloc_r+0x20>
 802027a:	6005      	str	r5, [r0, #0]
 802027c:	e7d6      	b.n	802022c <_malloc_r+0xa8>
 802027e:	bf00      	nop
 8020280:	2002d8bc 	.word	0x2002d8bc

08020284 <__malloc_lock>:
 8020284:	4801      	ldr	r0, [pc, #4]	@ (802028c <__malloc_lock+0x8>)
 8020286:	f7ff beda 	b.w	802003e <__retarget_lock_acquire_recursive>
 802028a:	bf00      	nop
 802028c:	2002d8b4 	.word	0x2002d8b4

08020290 <__malloc_unlock>:
 8020290:	4801      	ldr	r0, [pc, #4]	@ (8020298 <__malloc_unlock+0x8>)
 8020292:	f7ff bed5 	b.w	8020040 <__retarget_lock_release_recursive>
 8020296:	bf00      	nop
 8020298:	2002d8b4 	.word	0x2002d8b4

0802029c <__sfputc_r>:
 802029c:	6893      	ldr	r3, [r2, #8]
 802029e:	3b01      	subs	r3, #1
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	b410      	push	{r4}
 80202a4:	6093      	str	r3, [r2, #8]
 80202a6:	da08      	bge.n	80202ba <__sfputc_r+0x1e>
 80202a8:	6994      	ldr	r4, [r2, #24]
 80202aa:	42a3      	cmp	r3, r4
 80202ac:	db01      	blt.n	80202b2 <__sfputc_r+0x16>
 80202ae:	290a      	cmp	r1, #10
 80202b0:	d103      	bne.n	80202ba <__sfputc_r+0x1e>
 80202b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80202b6:	f7ff bd4c 	b.w	801fd52 <__swbuf_r>
 80202ba:	6813      	ldr	r3, [r2, #0]
 80202bc:	1c58      	adds	r0, r3, #1
 80202be:	6010      	str	r0, [r2, #0]
 80202c0:	7019      	strb	r1, [r3, #0]
 80202c2:	4608      	mov	r0, r1
 80202c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80202c8:	4770      	bx	lr

080202ca <__sfputs_r>:
 80202ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202cc:	4606      	mov	r6, r0
 80202ce:	460f      	mov	r7, r1
 80202d0:	4614      	mov	r4, r2
 80202d2:	18d5      	adds	r5, r2, r3
 80202d4:	42ac      	cmp	r4, r5
 80202d6:	d101      	bne.n	80202dc <__sfputs_r+0x12>
 80202d8:	2000      	movs	r0, #0
 80202da:	e007      	b.n	80202ec <__sfputs_r+0x22>
 80202dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80202e0:	463a      	mov	r2, r7
 80202e2:	4630      	mov	r0, r6
 80202e4:	f7ff ffda 	bl	802029c <__sfputc_r>
 80202e8:	1c43      	adds	r3, r0, #1
 80202ea:	d1f3      	bne.n	80202d4 <__sfputs_r+0xa>
 80202ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080202f0 <_vfiprintf_r>:
 80202f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f4:	460d      	mov	r5, r1
 80202f6:	b09d      	sub	sp, #116	@ 0x74
 80202f8:	4614      	mov	r4, r2
 80202fa:	4698      	mov	r8, r3
 80202fc:	4606      	mov	r6, r0
 80202fe:	b118      	cbz	r0, 8020308 <_vfiprintf_r+0x18>
 8020300:	6a03      	ldr	r3, [r0, #32]
 8020302:	b90b      	cbnz	r3, 8020308 <_vfiprintf_r+0x18>
 8020304:	f7ff fc3c 	bl	801fb80 <__sinit>
 8020308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802030a:	07d9      	lsls	r1, r3, #31
 802030c:	d405      	bmi.n	802031a <_vfiprintf_r+0x2a>
 802030e:	89ab      	ldrh	r3, [r5, #12]
 8020310:	059a      	lsls	r2, r3, #22
 8020312:	d402      	bmi.n	802031a <_vfiprintf_r+0x2a>
 8020314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020316:	f7ff fe92 	bl	802003e <__retarget_lock_acquire_recursive>
 802031a:	89ab      	ldrh	r3, [r5, #12]
 802031c:	071b      	lsls	r3, r3, #28
 802031e:	d501      	bpl.n	8020324 <_vfiprintf_r+0x34>
 8020320:	692b      	ldr	r3, [r5, #16]
 8020322:	b99b      	cbnz	r3, 802034c <_vfiprintf_r+0x5c>
 8020324:	4629      	mov	r1, r5
 8020326:	4630      	mov	r0, r6
 8020328:	f7ff fd52 	bl	801fdd0 <__swsetup_r>
 802032c:	b170      	cbz	r0, 802034c <_vfiprintf_r+0x5c>
 802032e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020330:	07dc      	lsls	r4, r3, #31
 8020332:	d504      	bpl.n	802033e <_vfiprintf_r+0x4e>
 8020334:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020338:	b01d      	add	sp, #116	@ 0x74
 802033a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802033e:	89ab      	ldrh	r3, [r5, #12]
 8020340:	0598      	lsls	r0, r3, #22
 8020342:	d4f7      	bmi.n	8020334 <_vfiprintf_r+0x44>
 8020344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020346:	f7ff fe7b 	bl	8020040 <__retarget_lock_release_recursive>
 802034a:	e7f3      	b.n	8020334 <_vfiprintf_r+0x44>
 802034c:	2300      	movs	r3, #0
 802034e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020350:	2320      	movs	r3, #32
 8020352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020356:	f8cd 800c 	str.w	r8, [sp, #12]
 802035a:	2330      	movs	r3, #48	@ 0x30
 802035c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802050c <_vfiprintf_r+0x21c>
 8020360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020364:	f04f 0901 	mov.w	r9, #1
 8020368:	4623      	mov	r3, r4
 802036a:	469a      	mov	sl, r3
 802036c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020370:	b10a      	cbz	r2, 8020376 <_vfiprintf_r+0x86>
 8020372:	2a25      	cmp	r2, #37	@ 0x25
 8020374:	d1f9      	bne.n	802036a <_vfiprintf_r+0x7a>
 8020376:	ebba 0b04 	subs.w	fp, sl, r4
 802037a:	d00b      	beq.n	8020394 <_vfiprintf_r+0xa4>
 802037c:	465b      	mov	r3, fp
 802037e:	4622      	mov	r2, r4
 8020380:	4629      	mov	r1, r5
 8020382:	4630      	mov	r0, r6
 8020384:	f7ff ffa1 	bl	80202ca <__sfputs_r>
 8020388:	3001      	adds	r0, #1
 802038a:	f000 80a7 	beq.w	80204dc <_vfiprintf_r+0x1ec>
 802038e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020390:	445a      	add	r2, fp
 8020392:	9209      	str	r2, [sp, #36]	@ 0x24
 8020394:	f89a 3000 	ldrb.w	r3, [sl]
 8020398:	2b00      	cmp	r3, #0
 802039a:	f000 809f 	beq.w	80204dc <_vfiprintf_r+0x1ec>
 802039e:	2300      	movs	r3, #0
 80203a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80203a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80203a8:	f10a 0a01 	add.w	sl, sl, #1
 80203ac:	9304      	str	r3, [sp, #16]
 80203ae:	9307      	str	r3, [sp, #28]
 80203b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80203b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80203b6:	4654      	mov	r4, sl
 80203b8:	2205      	movs	r2, #5
 80203ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80203be:	4853      	ldr	r0, [pc, #332]	@ (802050c <_vfiprintf_r+0x21c>)
 80203c0:	f7df ff26 	bl	8000210 <memchr>
 80203c4:	9a04      	ldr	r2, [sp, #16]
 80203c6:	b9d8      	cbnz	r0, 8020400 <_vfiprintf_r+0x110>
 80203c8:	06d1      	lsls	r1, r2, #27
 80203ca:	bf44      	itt	mi
 80203cc:	2320      	movmi	r3, #32
 80203ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80203d2:	0713      	lsls	r3, r2, #28
 80203d4:	bf44      	itt	mi
 80203d6:	232b      	movmi	r3, #43	@ 0x2b
 80203d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80203dc:	f89a 3000 	ldrb.w	r3, [sl]
 80203e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80203e2:	d015      	beq.n	8020410 <_vfiprintf_r+0x120>
 80203e4:	9a07      	ldr	r2, [sp, #28]
 80203e6:	4654      	mov	r4, sl
 80203e8:	2000      	movs	r0, #0
 80203ea:	f04f 0c0a 	mov.w	ip, #10
 80203ee:	4621      	mov	r1, r4
 80203f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80203f4:	3b30      	subs	r3, #48	@ 0x30
 80203f6:	2b09      	cmp	r3, #9
 80203f8:	d94b      	bls.n	8020492 <_vfiprintf_r+0x1a2>
 80203fa:	b1b0      	cbz	r0, 802042a <_vfiprintf_r+0x13a>
 80203fc:	9207      	str	r2, [sp, #28]
 80203fe:	e014      	b.n	802042a <_vfiprintf_r+0x13a>
 8020400:	eba0 0308 	sub.w	r3, r0, r8
 8020404:	fa09 f303 	lsl.w	r3, r9, r3
 8020408:	4313      	orrs	r3, r2
 802040a:	9304      	str	r3, [sp, #16]
 802040c:	46a2      	mov	sl, r4
 802040e:	e7d2      	b.n	80203b6 <_vfiprintf_r+0xc6>
 8020410:	9b03      	ldr	r3, [sp, #12]
 8020412:	1d19      	adds	r1, r3, #4
 8020414:	681b      	ldr	r3, [r3, #0]
 8020416:	9103      	str	r1, [sp, #12]
 8020418:	2b00      	cmp	r3, #0
 802041a:	bfbb      	ittet	lt
 802041c:	425b      	neglt	r3, r3
 802041e:	f042 0202 	orrlt.w	r2, r2, #2
 8020422:	9307      	strge	r3, [sp, #28]
 8020424:	9307      	strlt	r3, [sp, #28]
 8020426:	bfb8      	it	lt
 8020428:	9204      	strlt	r2, [sp, #16]
 802042a:	7823      	ldrb	r3, [r4, #0]
 802042c:	2b2e      	cmp	r3, #46	@ 0x2e
 802042e:	d10a      	bne.n	8020446 <_vfiprintf_r+0x156>
 8020430:	7863      	ldrb	r3, [r4, #1]
 8020432:	2b2a      	cmp	r3, #42	@ 0x2a
 8020434:	d132      	bne.n	802049c <_vfiprintf_r+0x1ac>
 8020436:	9b03      	ldr	r3, [sp, #12]
 8020438:	1d1a      	adds	r2, r3, #4
 802043a:	681b      	ldr	r3, [r3, #0]
 802043c:	9203      	str	r2, [sp, #12]
 802043e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020442:	3402      	adds	r4, #2
 8020444:	9305      	str	r3, [sp, #20]
 8020446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802051c <_vfiprintf_r+0x22c>
 802044a:	7821      	ldrb	r1, [r4, #0]
 802044c:	2203      	movs	r2, #3
 802044e:	4650      	mov	r0, sl
 8020450:	f7df fede 	bl	8000210 <memchr>
 8020454:	b138      	cbz	r0, 8020466 <_vfiprintf_r+0x176>
 8020456:	9b04      	ldr	r3, [sp, #16]
 8020458:	eba0 000a 	sub.w	r0, r0, sl
 802045c:	2240      	movs	r2, #64	@ 0x40
 802045e:	4082      	lsls	r2, r0
 8020460:	4313      	orrs	r3, r2
 8020462:	3401      	adds	r4, #1
 8020464:	9304      	str	r3, [sp, #16]
 8020466:	f814 1b01 	ldrb.w	r1, [r4], #1
 802046a:	4829      	ldr	r0, [pc, #164]	@ (8020510 <_vfiprintf_r+0x220>)
 802046c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020470:	2206      	movs	r2, #6
 8020472:	f7df fecd 	bl	8000210 <memchr>
 8020476:	2800      	cmp	r0, #0
 8020478:	d03f      	beq.n	80204fa <_vfiprintf_r+0x20a>
 802047a:	4b26      	ldr	r3, [pc, #152]	@ (8020514 <_vfiprintf_r+0x224>)
 802047c:	bb1b      	cbnz	r3, 80204c6 <_vfiprintf_r+0x1d6>
 802047e:	9b03      	ldr	r3, [sp, #12]
 8020480:	3307      	adds	r3, #7
 8020482:	f023 0307 	bic.w	r3, r3, #7
 8020486:	3308      	adds	r3, #8
 8020488:	9303      	str	r3, [sp, #12]
 802048a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802048c:	443b      	add	r3, r7
 802048e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020490:	e76a      	b.n	8020368 <_vfiprintf_r+0x78>
 8020492:	fb0c 3202 	mla	r2, ip, r2, r3
 8020496:	460c      	mov	r4, r1
 8020498:	2001      	movs	r0, #1
 802049a:	e7a8      	b.n	80203ee <_vfiprintf_r+0xfe>
 802049c:	2300      	movs	r3, #0
 802049e:	3401      	adds	r4, #1
 80204a0:	9305      	str	r3, [sp, #20]
 80204a2:	4619      	mov	r1, r3
 80204a4:	f04f 0c0a 	mov.w	ip, #10
 80204a8:	4620      	mov	r0, r4
 80204aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80204ae:	3a30      	subs	r2, #48	@ 0x30
 80204b0:	2a09      	cmp	r2, #9
 80204b2:	d903      	bls.n	80204bc <_vfiprintf_r+0x1cc>
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d0c6      	beq.n	8020446 <_vfiprintf_r+0x156>
 80204b8:	9105      	str	r1, [sp, #20]
 80204ba:	e7c4      	b.n	8020446 <_vfiprintf_r+0x156>
 80204bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80204c0:	4604      	mov	r4, r0
 80204c2:	2301      	movs	r3, #1
 80204c4:	e7f0      	b.n	80204a8 <_vfiprintf_r+0x1b8>
 80204c6:	ab03      	add	r3, sp, #12
 80204c8:	9300      	str	r3, [sp, #0]
 80204ca:	462a      	mov	r2, r5
 80204cc:	4b12      	ldr	r3, [pc, #72]	@ (8020518 <_vfiprintf_r+0x228>)
 80204ce:	a904      	add	r1, sp, #16
 80204d0:	4630      	mov	r0, r6
 80204d2:	f3af 8000 	nop.w
 80204d6:	4607      	mov	r7, r0
 80204d8:	1c78      	adds	r0, r7, #1
 80204da:	d1d6      	bne.n	802048a <_vfiprintf_r+0x19a>
 80204dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80204de:	07d9      	lsls	r1, r3, #31
 80204e0:	d405      	bmi.n	80204ee <_vfiprintf_r+0x1fe>
 80204e2:	89ab      	ldrh	r3, [r5, #12]
 80204e4:	059a      	lsls	r2, r3, #22
 80204e6:	d402      	bmi.n	80204ee <_vfiprintf_r+0x1fe>
 80204e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80204ea:	f7ff fda9 	bl	8020040 <__retarget_lock_release_recursive>
 80204ee:	89ab      	ldrh	r3, [r5, #12]
 80204f0:	065b      	lsls	r3, r3, #25
 80204f2:	f53f af1f 	bmi.w	8020334 <_vfiprintf_r+0x44>
 80204f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80204f8:	e71e      	b.n	8020338 <_vfiprintf_r+0x48>
 80204fa:	ab03      	add	r3, sp, #12
 80204fc:	9300      	str	r3, [sp, #0]
 80204fe:	462a      	mov	r2, r5
 8020500:	4b05      	ldr	r3, [pc, #20]	@ (8020518 <_vfiprintf_r+0x228>)
 8020502:	a904      	add	r1, sp, #16
 8020504:	4630      	mov	r0, r6
 8020506:	f000 f879 	bl	80205fc <_printf_i>
 802050a:	e7e4      	b.n	80204d6 <_vfiprintf_r+0x1e6>
 802050c:	08024a1d 	.word	0x08024a1d
 8020510:	08024a27 	.word	0x08024a27
 8020514:	00000000 	.word	0x00000000
 8020518:	080202cb 	.word	0x080202cb
 802051c:	08024a23 	.word	0x08024a23

08020520 <_printf_common>:
 8020520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020524:	4616      	mov	r6, r2
 8020526:	4698      	mov	r8, r3
 8020528:	688a      	ldr	r2, [r1, #8]
 802052a:	690b      	ldr	r3, [r1, #16]
 802052c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020530:	4293      	cmp	r3, r2
 8020532:	bfb8      	it	lt
 8020534:	4613      	movlt	r3, r2
 8020536:	6033      	str	r3, [r6, #0]
 8020538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802053c:	4607      	mov	r7, r0
 802053e:	460c      	mov	r4, r1
 8020540:	b10a      	cbz	r2, 8020546 <_printf_common+0x26>
 8020542:	3301      	adds	r3, #1
 8020544:	6033      	str	r3, [r6, #0]
 8020546:	6823      	ldr	r3, [r4, #0]
 8020548:	0699      	lsls	r1, r3, #26
 802054a:	bf42      	ittt	mi
 802054c:	6833      	ldrmi	r3, [r6, #0]
 802054e:	3302      	addmi	r3, #2
 8020550:	6033      	strmi	r3, [r6, #0]
 8020552:	6825      	ldr	r5, [r4, #0]
 8020554:	f015 0506 	ands.w	r5, r5, #6
 8020558:	d106      	bne.n	8020568 <_printf_common+0x48>
 802055a:	f104 0a19 	add.w	sl, r4, #25
 802055e:	68e3      	ldr	r3, [r4, #12]
 8020560:	6832      	ldr	r2, [r6, #0]
 8020562:	1a9b      	subs	r3, r3, r2
 8020564:	42ab      	cmp	r3, r5
 8020566:	dc26      	bgt.n	80205b6 <_printf_common+0x96>
 8020568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802056c:	6822      	ldr	r2, [r4, #0]
 802056e:	3b00      	subs	r3, #0
 8020570:	bf18      	it	ne
 8020572:	2301      	movne	r3, #1
 8020574:	0692      	lsls	r2, r2, #26
 8020576:	d42b      	bmi.n	80205d0 <_printf_common+0xb0>
 8020578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802057c:	4641      	mov	r1, r8
 802057e:	4638      	mov	r0, r7
 8020580:	47c8      	blx	r9
 8020582:	3001      	adds	r0, #1
 8020584:	d01e      	beq.n	80205c4 <_printf_common+0xa4>
 8020586:	6823      	ldr	r3, [r4, #0]
 8020588:	6922      	ldr	r2, [r4, #16]
 802058a:	f003 0306 	and.w	r3, r3, #6
 802058e:	2b04      	cmp	r3, #4
 8020590:	bf02      	ittt	eq
 8020592:	68e5      	ldreq	r5, [r4, #12]
 8020594:	6833      	ldreq	r3, [r6, #0]
 8020596:	1aed      	subeq	r5, r5, r3
 8020598:	68a3      	ldr	r3, [r4, #8]
 802059a:	bf0c      	ite	eq
 802059c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80205a0:	2500      	movne	r5, #0
 80205a2:	4293      	cmp	r3, r2
 80205a4:	bfc4      	itt	gt
 80205a6:	1a9b      	subgt	r3, r3, r2
 80205a8:	18ed      	addgt	r5, r5, r3
 80205aa:	2600      	movs	r6, #0
 80205ac:	341a      	adds	r4, #26
 80205ae:	42b5      	cmp	r5, r6
 80205b0:	d11a      	bne.n	80205e8 <_printf_common+0xc8>
 80205b2:	2000      	movs	r0, #0
 80205b4:	e008      	b.n	80205c8 <_printf_common+0xa8>
 80205b6:	2301      	movs	r3, #1
 80205b8:	4652      	mov	r2, sl
 80205ba:	4641      	mov	r1, r8
 80205bc:	4638      	mov	r0, r7
 80205be:	47c8      	blx	r9
 80205c0:	3001      	adds	r0, #1
 80205c2:	d103      	bne.n	80205cc <_printf_common+0xac>
 80205c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80205c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205cc:	3501      	adds	r5, #1
 80205ce:	e7c6      	b.n	802055e <_printf_common+0x3e>
 80205d0:	18e1      	adds	r1, r4, r3
 80205d2:	1c5a      	adds	r2, r3, #1
 80205d4:	2030      	movs	r0, #48	@ 0x30
 80205d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80205da:	4422      	add	r2, r4
 80205dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80205e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80205e4:	3302      	adds	r3, #2
 80205e6:	e7c7      	b.n	8020578 <_printf_common+0x58>
 80205e8:	2301      	movs	r3, #1
 80205ea:	4622      	mov	r2, r4
 80205ec:	4641      	mov	r1, r8
 80205ee:	4638      	mov	r0, r7
 80205f0:	47c8      	blx	r9
 80205f2:	3001      	adds	r0, #1
 80205f4:	d0e6      	beq.n	80205c4 <_printf_common+0xa4>
 80205f6:	3601      	adds	r6, #1
 80205f8:	e7d9      	b.n	80205ae <_printf_common+0x8e>
	...

080205fc <_printf_i>:
 80205fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020600:	7e0f      	ldrb	r7, [r1, #24]
 8020602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020604:	2f78      	cmp	r7, #120	@ 0x78
 8020606:	4691      	mov	r9, r2
 8020608:	4680      	mov	r8, r0
 802060a:	460c      	mov	r4, r1
 802060c:	469a      	mov	sl, r3
 802060e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020612:	d807      	bhi.n	8020624 <_printf_i+0x28>
 8020614:	2f62      	cmp	r7, #98	@ 0x62
 8020616:	d80a      	bhi.n	802062e <_printf_i+0x32>
 8020618:	2f00      	cmp	r7, #0
 802061a:	f000 80d1 	beq.w	80207c0 <_printf_i+0x1c4>
 802061e:	2f58      	cmp	r7, #88	@ 0x58
 8020620:	f000 80b8 	beq.w	8020794 <_printf_i+0x198>
 8020624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802062c:	e03a      	b.n	80206a4 <_printf_i+0xa8>
 802062e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020632:	2b15      	cmp	r3, #21
 8020634:	d8f6      	bhi.n	8020624 <_printf_i+0x28>
 8020636:	a101      	add	r1, pc, #4	@ (adr r1, 802063c <_printf_i+0x40>)
 8020638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802063c:	08020695 	.word	0x08020695
 8020640:	080206a9 	.word	0x080206a9
 8020644:	08020625 	.word	0x08020625
 8020648:	08020625 	.word	0x08020625
 802064c:	08020625 	.word	0x08020625
 8020650:	08020625 	.word	0x08020625
 8020654:	080206a9 	.word	0x080206a9
 8020658:	08020625 	.word	0x08020625
 802065c:	08020625 	.word	0x08020625
 8020660:	08020625 	.word	0x08020625
 8020664:	08020625 	.word	0x08020625
 8020668:	080207a7 	.word	0x080207a7
 802066c:	080206d3 	.word	0x080206d3
 8020670:	08020761 	.word	0x08020761
 8020674:	08020625 	.word	0x08020625
 8020678:	08020625 	.word	0x08020625
 802067c:	080207c9 	.word	0x080207c9
 8020680:	08020625 	.word	0x08020625
 8020684:	080206d3 	.word	0x080206d3
 8020688:	08020625 	.word	0x08020625
 802068c:	08020625 	.word	0x08020625
 8020690:	08020769 	.word	0x08020769
 8020694:	6833      	ldr	r3, [r6, #0]
 8020696:	1d1a      	adds	r2, r3, #4
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	6032      	str	r2, [r6, #0]
 802069c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80206a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80206a4:	2301      	movs	r3, #1
 80206a6:	e09c      	b.n	80207e2 <_printf_i+0x1e6>
 80206a8:	6833      	ldr	r3, [r6, #0]
 80206aa:	6820      	ldr	r0, [r4, #0]
 80206ac:	1d19      	adds	r1, r3, #4
 80206ae:	6031      	str	r1, [r6, #0]
 80206b0:	0606      	lsls	r6, r0, #24
 80206b2:	d501      	bpl.n	80206b8 <_printf_i+0xbc>
 80206b4:	681d      	ldr	r5, [r3, #0]
 80206b6:	e003      	b.n	80206c0 <_printf_i+0xc4>
 80206b8:	0645      	lsls	r5, r0, #25
 80206ba:	d5fb      	bpl.n	80206b4 <_printf_i+0xb8>
 80206bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80206c0:	2d00      	cmp	r5, #0
 80206c2:	da03      	bge.n	80206cc <_printf_i+0xd0>
 80206c4:	232d      	movs	r3, #45	@ 0x2d
 80206c6:	426d      	negs	r5, r5
 80206c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80206cc:	4858      	ldr	r0, [pc, #352]	@ (8020830 <_printf_i+0x234>)
 80206ce:	230a      	movs	r3, #10
 80206d0:	e011      	b.n	80206f6 <_printf_i+0xfa>
 80206d2:	6821      	ldr	r1, [r4, #0]
 80206d4:	6833      	ldr	r3, [r6, #0]
 80206d6:	0608      	lsls	r0, r1, #24
 80206d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80206dc:	d402      	bmi.n	80206e4 <_printf_i+0xe8>
 80206de:	0649      	lsls	r1, r1, #25
 80206e0:	bf48      	it	mi
 80206e2:	b2ad      	uxthmi	r5, r5
 80206e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80206e6:	4852      	ldr	r0, [pc, #328]	@ (8020830 <_printf_i+0x234>)
 80206e8:	6033      	str	r3, [r6, #0]
 80206ea:	bf14      	ite	ne
 80206ec:	230a      	movne	r3, #10
 80206ee:	2308      	moveq	r3, #8
 80206f0:	2100      	movs	r1, #0
 80206f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80206f6:	6866      	ldr	r6, [r4, #4]
 80206f8:	60a6      	str	r6, [r4, #8]
 80206fa:	2e00      	cmp	r6, #0
 80206fc:	db05      	blt.n	802070a <_printf_i+0x10e>
 80206fe:	6821      	ldr	r1, [r4, #0]
 8020700:	432e      	orrs	r6, r5
 8020702:	f021 0104 	bic.w	r1, r1, #4
 8020706:	6021      	str	r1, [r4, #0]
 8020708:	d04b      	beq.n	80207a2 <_printf_i+0x1a6>
 802070a:	4616      	mov	r6, r2
 802070c:	fbb5 f1f3 	udiv	r1, r5, r3
 8020710:	fb03 5711 	mls	r7, r3, r1, r5
 8020714:	5dc7      	ldrb	r7, [r0, r7]
 8020716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802071a:	462f      	mov	r7, r5
 802071c:	42bb      	cmp	r3, r7
 802071e:	460d      	mov	r5, r1
 8020720:	d9f4      	bls.n	802070c <_printf_i+0x110>
 8020722:	2b08      	cmp	r3, #8
 8020724:	d10b      	bne.n	802073e <_printf_i+0x142>
 8020726:	6823      	ldr	r3, [r4, #0]
 8020728:	07df      	lsls	r7, r3, #31
 802072a:	d508      	bpl.n	802073e <_printf_i+0x142>
 802072c:	6923      	ldr	r3, [r4, #16]
 802072e:	6861      	ldr	r1, [r4, #4]
 8020730:	4299      	cmp	r1, r3
 8020732:	bfde      	ittt	le
 8020734:	2330      	movle	r3, #48	@ 0x30
 8020736:	f806 3c01 	strble.w	r3, [r6, #-1]
 802073a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 802073e:	1b92      	subs	r2, r2, r6
 8020740:	6122      	str	r2, [r4, #16]
 8020742:	f8cd a000 	str.w	sl, [sp]
 8020746:	464b      	mov	r3, r9
 8020748:	aa03      	add	r2, sp, #12
 802074a:	4621      	mov	r1, r4
 802074c:	4640      	mov	r0, r8
 802074e:	f7ff fee7 	bl	8020520 <_printf_common>
 8020752:	3001      	adds	r0, #1
 8020754:	d14a      	bne.n	80207ec <_printf_i+0x1f0>
 8020756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802075a:	b004      	add	sp, #16
 802075c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020760:	6823      	ldr	r3, [r4, #0]
 8020762:	f043 0320 	orr.w	r3, r3, #32
 8020766:	6023      	str	r3, [r4, #0]
 8020768:	4832      	ldr	r0, [pc, #200]	@ (8020834 <_printf_i+0x238>)
 802076a:	2778      	movs	r7, #120	@ 0x78
 802076c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020770:	6823      	ldr	r3, [r4, #0]
 8020772:	6831      	ldr	r1, [r6, #0]
 8020774:	061f      	lsls	r7, r3, #24
 8020776:	f851 5b04 	ldr.w	r5, [r1], #4
 802077a:	d402      	bmi.n	8020782 <_printf_i+0x186>
 802077c:	065f      	lsls	r7, r3, #25
 802077e:	bf48      	it	mi
 8020780:	b2ad      	uxthmi	r5, r5
 8020782:	6031      	str	r1, [r6, #0]
 8020784:	07d9      	lsls	r1, r3, #31
 8020786:	bf44      	itt	mi
 8020788:	f043 0320 	orrmi.w	r3, r3, #32
 802078c:	6023      	strmi	r3, [r4, #0]
 802078e:	b11d      	cbz	r5, 8020798 <_printf_i+0x19c>
 8020790:	2310      	movs	r3, #16
 8020792:	e7ad      	b.n	80206f0 <_printf_i+0xf4>
 8020794:	4826      	ldr	r0, [pc, #152]	@ (8020830 <_printf_i+0x234>)
 8020796:	e7e9      	b.n	802076c <_printf_i+0x170>
 8020798:	6823      	ldr	r3, [r4, #0]
 802079a:	f023 0320 	bic.w	r3, r3, #32
 802079e:	6023      	str	r3, [r4, #0]
 80207a0:	e7f6      	b.n	8020790 <_printf_i+0x194>
 80207a2:	4616      	mov	r6, r2
 80207a4:	e7bd      	b.n	8020722 <_printf_i+0x126>
 80207a6:	6833      	ldr	r3, [r6, #0]
 80207a8:	6825      	ldr	r5, [r4, #0]
 80207aa:	6961      	ldr	r1, [r4, #20]
 80207ac:	1d18      	adds	r0, r3, #4
 80207ae:	6030      	str	r0, [r6, #0]
 80207b0:	062e      	lsls	r6, r5, #24
 80207b2:	681b      	ldr	r3, [r3, #0]
 80207b4:	d501      	bpl.n	80207ba <_printf_i+0x1be>
 80207b6:	6019      	str	r1, [r3, #0]
 80207b8:	e002      	b.n	80207c0 <_printf_i+0x1c4>
 80207ba:	0668      	lsls	r0, r5, #25
 80207bc:	d5fb      	bpl.n	80207b6 <_printf_i+0x1ba>
 80207be:	8019      	strh	r1, [r3, #0]
 80207c0:	2300      	movs	r3, #0
 80207c2:	6123      	str	r3, [r4, #16]
 80207c4:	4616      	mov	r6, r2
 80207c6:	e7bc      	b.n	8020742 <_printf_i+0x146>
 80207c8:	6833      	ldr	r3, [r6, #0]
 80207ca:	1d1a      	adds	r2, r3, #4
 80207cc:	6032      	str	r2, [r6, #0]
 80207ce:	681e      	ldr	r6, [r3, #0]
 80207d0:	6862      	ldr	r2, [r4, #4]
 80207d2:	2100      	movs	r1, #0
 80207d4:	4630      	mov	r0, r6
 80207d6:	f7df fd1b 	bl	8000210 <memchr>
 80207da:	b108      	cbz	r0, 80207e0 <_printf_i+0x1e4>
 80207dc:	1b80      	subs	r0, r0, r6
 80207de:	6060      	str	r0, [r4, #4]
 80207e0:	6863      	ldr	r3, [r4, #4]
 80207e2:	6123      	str	r3, [r4, #16]
 80207e4:	2300      	movs	r3, #0
 80207e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80207ea:	e7aa      	b.n	8020742 <_printf_i+0x146>
 80207ec:	6923      	ldr	r3, [r4, #16]
 80207ee:	4632      	mov	r2, r6
 80207f0:	4649      	mov	r1, r9
 80207f2:	4640      	mov	r0, r8
 80207f4:	47d0      	blx	sl
 80207f6:	3001      	adds	r0, #1
 80207f8:	d0ad      	beq.n	8020756 <_printf_i+0x15a>
 80207fa:	6823      	ldr	r3, [r4, #0]
 80207fc:	079b      	lsls	r3, r3, #30
 80207fe:	d413      	bmi.n	8020828 <_printf_i+0x22c>
 8020800:	68e0      	ldr	r0, [r4, #12]
 8020802:	9b03      	ldr	r3, [sp, #12]
 8020804:	4298      	cmp	r0, r3
 8020806:	bfb8      	it	lt
 8020808:	4618      	movlt	r0, r3
 802080a:	e7a6      	b.n	802075a <_printf_i+0x15e>
 802080c:	2301      	movs	r3, #1
 802080e:	4632      	mov	r2, r6
 8020810:	4649      	mov	r1, r9
 8020812:	4640      	mov	r0, r8
 8020814:	47d0      	blx	sl
 8020816:	3001      	adds	r0, #1
 8020818:	d09d      	beq.n	8020756 <_printf_i+0x15a>
 802081a:	3501      	adds	r5, #1
 802081c:	68e3      	ldr	r3, [r4, #12]
 802081e:	9903      	ldr	r1, [sp, #12]
 8020820:	1a5b      	subs	r3, r3, r1
 8020822:	42ab      	cmp	r3, r5
 8020824:	dcf2      	bgt.n	802080c <_printf_i+0x210>
 8020826:	e7eb      	b.n	8020800 <_printf_i+0x204>
 8020828:	2500      	movs	r5, #0
 802082a:	f104 0619 	add.w	r6, r4, #25
 802082e:	e7f5      	b.n	802081c <_printf_i+0x220>
 8020830:	08024a2e 	.word	0x08024a2e
 8020834:	08024a3f 	.word	0x08024a3f

08020838 <__sflush_r>:
 8020838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020840:	0716      	lsls	r6, r2, #28
 8020842:	4605      	mov	r5, r0
 8020844:	460c      	mov	r4, r1
 8020846:	d454      	bmi.n	80208f2 <__sflush_r+0xba>
 8020848:	684b      	ldr	r3, [r1, #4]
 802084a:	2b00      	cmp	r3, #0
 802084c:	dc02      	bgt.n	8020854 <__sflush_r+0x1c>
 802084e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020850:	2b00      	cmp	r3, #0
 8020852:	dd48      	ble.n	80208e6 <__sflush_r+0xae>
 8020854:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020856:	2e00      	cmp	r6, #0
 8020858:	d045      	beq.n	80208e6 <__sflush_r+0xae>
 802085a:	2300      	movs	r3, #0
 802085c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020860:	682f      	ldr	r7, [r5, #0]
 8020862:	6a21      	ldr	r1, [r4, #32]
 8020864:	602b      	str	r3, [r5, #0]
 8020866:	d030      	beq.n	80208ca <__sflush_r+0x92>
 8020868:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802086a:	89a3      	ldrh	r3, [r4, #12]
 802086c:	0759      	lsls	r1, r3, #29
 802086e:	d505      	bpl.n	802087c <__sflush_r+0x44>
 8020870:	6863      	ldr	r3, [r4, #4]
 8020872:	1ad2      	subs	r2, r2, r3
 8020874:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020876:	b10b      	cbz	r3, 802087c <__sflush_r+0x44>
 8020878:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802087a:	1ad2      	subs	r2, r2, r3
 802087c:	2300      	movs	r3, #0
 802087e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020880:	6a21      	ldr	r1, [r4, #32]
 8020882:	4628      	mov	r0, r5
 8020884:	47b0      	blx	r6
 8020886:	1c43      	adds	r3, r0, #1
 8020888:	89a3      	ldrh	r3, [r4, #12]
 802088a:	d106      	bne.n	802089a <__sflush_r+0x62>
 802088c:	6829      	ldr	r1, [r5, #0]
 802088e:	291d      	cmp	r1, #29
 8020890:	d82b      	bhi.n	80208ea <__sflush_r+0xb2>
 8020892:	4a2a      	ldr	r2, [pc, #168]	@ (802093c <__sflush_r+0x104>)
 8020894:	40ca      	lsrs	r2, r1
 8020896:	07d6      	lsls	r6, r2, #31
 8020898:	d527      	bpl.n	80208ea <__sflush_r+0xb2>
 802089a:	2200      	movs	r2, #0
 802089c:	6062      	str	r2, [r4, #4]
 802089e:	04d9      	lsls	r1, r3, #19
 80208a0:	6922      	ldr	r2, [r4, #16]
 80208a2:	6022      	str	r2, [r4, #0]
 80208a4:	d504      	bpl.n	80208b0 <__sflush_r+0x78>
 80208a6:	1c42      	adds	r2, r0, #1
 80208a8:	d101      	bne.n	80208ae <__sflush_r+0x76>
 80208aa:	682b      	ldr	r3, [r5, #0]
 80208ac:	b903      	cbnz	r3, 80208b0 <__sflush_r+0x78>
 80208ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80208b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80208b2:	602f      	str	r7, [r5, #0]
 80208b4:	b1b9      	cbz	r1, 80208e6 <__sflush_r+0xae>
 80208b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80208ba:	4299      	cmp	r1, r3
 80208bc:	d002      	beq.n	80208c4 <__sflush_r+0x8c>
 80208be:	4628      	mov	r0, r5
 80208c0:	f7ff fbec 	bl	802009c <_free_r>
 80208c4:	2300      	movs	r3, #0
 80208c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80208c8:	e00d      	b.n	80208e6 <__sflush_r+0xae>
 80208ca:	2301      	movs	r3, #1
 80208cc:	4628      	mov	r0, r5
 80208ce:	47b0      	blx	r6
 80208d0:	4602      	mov	r2, r0
 80208d2:	1c50      	adds	r0, r2, #1
 80208d4:	d1c9      	bne.n	802086a <__sflush_r+0x32>
 80208d6:	682b      	ldr	r3, [r5, #0]
 80208d8:	2b00      	cmp	r3, #0
 80208da:	d0c6      	beq.n	802086a <__sflush_r+0x32>
 80208dc:	2b1d      	cmp	r3, #29
 80208de:	d001      	beq.n	80208e4 <__sflush_r+0xac>
 80208e0:	2b16      	cmp	r3, #22
 80208e2:	d11e      	bne.n	8020922 <__sflush_r+0xea>
 80208e4:	602f      	str	r7, [r5, #0]
 80208e6:	2000      	movs	r0, #0
 80208e8:	e022      	b.n	8020930 <__sflush_r+0xf8>
 80208ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80208ee:	b21b      	sxth	r3, r3
 80208f0:	e01b      	b.n	802092a <__sflush_r+0xf2>
 80208f2:	690f      	ldr	r7, [r1, #16]
 80208f4:	2f00      	cmp	r7, #0
 80208f6:	d0f6      	beq.n	80208e6 <__sflush_r+0xae>
 80208f8:	0793      	lsls	r3, r2, #30
 80208fa:	680e      	ldr	r6, [r1, #0]
 80208fc:	bf08      	it	eq
 80208fe:	694b      	ldreq	r3, [r1, #20]
 8020900:	600f      	str	r7, [r1, #0]
 8020902:	bf18      	it	ne
 8020904:	2300      	movne	r3, #0
 8020906:	eba6 0807 	sub.w	r8, r6, r7
 802090a:	608b      	str	r3, [r1, #8]
 802090c:	f1b8 0f00 	cmp.w	r8, #0
 8020910:	dde9      	ble.n	80208e6 <__sflush_r+0xae>
 8020912:	6a21      	ldr	r1, [r4, #32]
 8020914:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020916:	4643      	mov	r3, r8
 8020918:	463a      	mov	r2, r7
 802091a:	4628      	mov	r0, r5
 802091c:	47b0      	blx	r6
 802091e:	2800      	cmp	r0, #0
 8020920:	dc08      	bgt.n	8020934 <__sflush_r+0xfc>
 8020922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802092a:	81a3      	strh	r3, [r4, #12]
 802092c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020934:	4407      	add	r7, r0
 8020936:	eba8 0800 	sub.w	r8, r8, r0
 802093a:	e7e7      	b.n	802090c <__sflush_r+0xd4>
 802093c:	20400001 	.word	0x20400001

08020940 <_fflush_r>:
 8020940:	b538      	push	{r3, r4, r5, lr}
 8020942:	690b      	ldr	r3, [r1, #16]
 8020944:	4605      	mov	r5, r0
 8020946:	460c      	mov	r4, r1
 8020948:	b913      	cbnz	r3, 8020950 <_fflush_r+0x10>
 802094a:	2500      	movs	r5, #0
 802094c:	4628      	mov	r0, r5
 802094e:	bd38      	pop	{r3, r4, r5, pc}
 8020950:	b118      	cbz	r0, 802095a <_fflush_r+0x1a>
 8020952:	6a03      	ldr	r3, [r0, #32]
 8020954:	b90b      	cbnz	r3, 802095a <_fflush_r+0x1a>
 8020956:	f7ff f913 	bl	801fb80 <__sinit>
 802095a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802095e:	2b00      	cmp	r3, #0
 8020960:	d0f3      	beq.n	802094a <_fflush_r+0xa>
 8020962:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020964:	07d0      	lsls	r0, r2, #31
 8020966:	d404      	bmi.n	8020972 <_fflush_r+0x32>
 8020968:	0599      	lsls	r1, r3, #22
 802096a:	d402      	bmi.n	8020972 <_fflush_r+0x32>
 802096c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802096e:	f7ff fb66 	bl	802003e <__retarget_lock_acquire_recursive>
 8020972:	4628      	mov	r0, r5
 8020974:	4621      	mov	r1, r4
 8020976:	f7ff ff5f 	bl	8020838 <__sflush_r>
 802097a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802097c:	07da      	lsls	r2, r3, #31
 802097e:	4605      	mov	r5, r0
 8020980:	d4e4      	bmi.n	802094c <_fflush_r+0xc>
 8020982:	89a3      	ldrh	r3, [r4, #12]
 8020984:	059b      	lsls	r3, r3, #22
 8020986:	d4e1      	bmi.n	802094c <_fflush_r+0xc>
 8020988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802098a:	f7ff fb59 	bl	8020040 <__retarget_lock_release_recursive>
 802098e:	e7dd      	b.n	802094c <_fflush_r+0xc>

08020990 <fiprintf>:
 8020990:	b40e      	push	{r1, r2, r3}
 8020992:	b503      	push	{r0, r1, lr}
 8020994:	4601      	mov	r1, r0
 8020996:	ab03      	add	r3, sp, #12
 8020998:	4805      	ldr	r0, [pc, #20]	@ (80209b0 <fiprintf+0x20>)
 802099a:	f853 2b04 	ldr.w	r2, [r3], #4
 802099e:	6800      	ldr	r0, [r0, #0]
 80209a0:	9301      	str	r3, [sp, #4]
 80209a2:	f7ff fca5 	bl	80202f0 <_vfiprintf_r>
 80209a6:	b002      	add	sp, #8
 80209a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80209ac:	b003      	add	sp, #12
 80209ae:	4770      	bx	lr
 80209b0:	2000003c 	.word	0x2000003c

080209b4 <__swhatbuf_r>:
 80209b4:	b570      	push	{r4, r5, r6, lr}
 80209b6:	460c      	mov	r4, r1
 80209b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80209bc:	2900      	cmp	r1, #0
 80209be:	b096      	sub	sp, #88	@ 0x58
 80209c0:	4615      	mov	r5, r2
 80209c2:	461e      	mov	r6, r3
 80209c4:	da0d      	bge.n	80209e2 <__swhatbuf_r+0x2e>
 80209c6:	89a3      	ldrh	r3, [r4, #12]
 80209c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80209cc:	f04f 0100 	mov.w	r1, #0
 80209d0:	bf14      	ite	ne
 80209d2:	2340      	movne	r3, #64	@ 0x40
 80209d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80209d8:	2000      	movs	r0, #0
 80209da:	6031      	str	r1, [r6, #0]
 80209dc:	602b      	str	r3, [r5, #0]
 80209de:	b016      	add	sp, #88	@ 0x58
 80209e0:	bd70      	pop	{r4, r5, r6, pc}
 80209e2:	466a      	mov	r2, sp
 80209e4:	f000 f848 	bl	8020a78 <_fstat_r>
 80209e8:	2800      	cmp	r0, #0
 80209ea:	dbec      	blt.n	80209c6 <__swhatbuf_r+0x12>
 80209ec:	9901      	ldr	r1, [sp, #4]
 80209ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80209f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80209f6:	4259      	negs	r1, r3
 80209f8:	4159      	adcs	r1, r3
 80209fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80209fe:	e7eb      	b.n	80209d8 <__swhatbuf_r+0x24>

08020a00 <__smakebuf_r>:
 8020a00:	898b      	ldrh	r3, [r1, #12]
 8020a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020a04:	079d      	lsls	r5, r3, #30
 8020a06:	4606      	mov	r6, r0
 8020a08:	460c      	mov	r4, r1
 8020a0a:	d507      	bpl.n	8020a1c <__smakebuf_r+0x1c>
 8020a0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020a10:	6023      	str	r3, [r4, #0]
 8020a12:	6123      	str	r3, [r4, #16]
 8020a14:	2301      	movs	r3, #1
 8020a16:	6163      	str	r3, [r4, #20]
 8020a18:	b003      	add	sp, #12
 8020a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a1c:	ab01      	add	r3, sp, #4
 8020a1e:	466a      	mov	r2, sp
 8020a20:	f7ff ffc8 	bl	80209b4 <__swhatbuf_r>
 8020a24:	9f00      	ldr	r7, [sp, #0]
 8020a26:	4605      	mov	r5, r0
 8020a28:	4639      	mov	r1, r7
 8020a2a:	4630      	mov	r0, r6
 8020a2c:	f7ff fbaa 	bl	8020184 <_malloc_r>
 8020a30:	b948      	cbnz	r0, 8020a46 <__smakebuf_r+0x46>
 8020a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a36:	059a      	lsls	r2, r3, #22
 8020a38:	d4ee      	bmi.n	8020a18 <__smakebuf_r+0x18>
 8020a3a:	f023 0303 	bic.w	r3, r3, #3
 8020a3e:	f043 0302 	orr.w	r3, r3, #2
 8020a42:	81a3      	strh	r3, [r4, #12]
 8020a44:	e7e2      	b.n	8020a0c <__smakebuf_r+0xc>
 8020a46:	89a3      	ldrh	r3, [r4, #12]
 8020a48:	6020      	str	r0, [r4, #0]
 8020a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020a4e:	81a3      	strh	r3, [r4, #12]
 8020a50:	9b01      	ldr	r3, [sp, #4]
 8020a52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020a56:	b15b      	cbz	r3, 8020a70 <__smakebuf_r+0x70>
 8020a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020a5c:	4630      	mov	r0, r6
 8020a5e:	f000 f81d 	bl	8020a9c <_isatty_r>
 8020a62:	b128      	cbz	r0, 8020a70 <__smakebuf_r+0x70>
 8020a64:	89a3      	ldrh	r3, [r4, #12]
 8020a66:	f023 0303 	bic.w	r3, r3, #3
 8020a6a:	f043 0301 	orr.w	r3, r3, #1
 8020a6e:	81a3      	strh	r3, [r4, #12]
 8020a70:	89a3      	ldrh	r3, [r4, #12]
 8020a72:	431d      	orrs	r5, r3
 8020a74:	81a5      	strh	r5, [r4, #12]
 8020a76:	e7cf      	b.n	8020a18 <__smakebuf_r+0x18>

08020a78 <_fstat_r>:
 8020a78:	b538      	push	{r3, r4, r5, lr}
 8020a7a:	4d07      	ldr	r5, [pc, #28]	@ (8020a98 <_fstat_r+0x20>)
 8020a7c:	2300      	movs	r3, #0
 8020a7e:	4604      	mov	r4, r0
 8020a80:	4608      	mov	r0, r1
 8020a82:	4611      	mov	r1, r2
 8020a84:	602b      	str	r3, [r5, #0]
 8020a86:	f7e0 ffb5 	bl	80019f4 <_fstat>
 8020a8a:	1c43      	adds	r3, r0, #1
 8020a8c:	d102      	bne.n	8020a94 <_fstat_r+0x1c>
 8020a8e:	682b      	ldr	r3, [r5, #0]
 8020a90:	b103      	cbz	r3, 8020a94 <_fstat_r+0x1c>
 8020a92:	6023      	str	r3, [r4, #0]
 8020a94:	bd38      	pop	{r3, r4, r5, pc}
 8020a96:	bf00      	nop
 8020a98:	2002d8b0 	.word	0x2002d8b0

08020a9c <_isatty_r>:
 8020a9c:	b538      	push	{r3, r4, r5, lr}
 8020a9e:	4d06      	ldr	r5, [pc, #24]	@ (8020ab8 <_isatty_r+0x1c>)
 8020aa0:	2300      	movs	r3, #0
 8020aa2:	4604      	mov	r4, r0
 8020aa4:	4608      	mov	r0, r1
 8020aa6:	602b      	str	r3, [r5, #0]
 8020aa8:	f7e0 ffb4 	bl	8001a14 <_isatty>
 8020aac:	1c43      	adds	r3, r0, #1
 8020aae:	d102      	bne.n	8020ab6 <_isatty_r+0x1a>
 8020ab0:	682b      	ldr	r3, [r5, #0]
 8020ab2:	b103      	cbz	r3, 8020ab6 <_isatty_r+0x1a>
 8020ab4:	6023      	str	r3, [r4, #0]
 8020ab6:	bd38      	pop	{r3, r4, r5, pc}
 8020ab8:	2002d8b0 	.word	0x2002d8b0

08020abc <_sbrk_r>:
 8020abc:	b538      	push	{r3, r4, r5, lr}
 8020abe:	4d06      	ldr	r5, [pc, #24]	@ (8020ad8 <_sbrk_r+0x1c>)
 8020ac0:	2300      	movs	r3, #0
 8020ac2:	4604      	mov	r4, r0
 8020ac4:	4608      	mov	r0, r1
 8020ac6:	602b      	str	r3, [r5, #0]
 8020ac8:	f7e0 ffbc 	bl	8001a44 <_sbrk>
 8020acc:	1c43      	adds	r3, r0, #1
 8020ace:	d102      	bne.n	8020ad6 <_sbrk_r+0x1a>
 8020ad0:	682b      	ldr	r3, [r5, #0]
 8020ad2:	b103      	cbz	r3, 8020ad6 <_sbrk_r+0x1a>
 8020ad4:	6023      	str	r3, [r4, #0]
 8020ad6:	bd38      	pop	{r3, r4, r5, pc}
 8020ad8:	2002d8b0 	.word	0x2002d8b0

08020adc <abort>:
 8020adc:	b508      	push	{r3, lr}
 8020ade:	2006      	movs	r0, #6
 8020ae0:	f000 f82c 	bl	8020b3c <raise>
 8020ae4:	2001      	movs	r0, #1
 8020ae6:	f7e0 ff51 	bl	800198c <_exit>

08020aea <_raise_r>:
 8020aea:	291f      	cmp	r1, #31
 8020aec:	b538      	push	{r3, r4, r5, lr}
 8020aee:	4605      	mov	r5, r0
 8020af0:	460c      	mov	r4, r1
 8020af2:	d904      	bls.n	8020afe <_raise_r+0x14>
 8020af4:	2316      	movs	r3, #22
 8020af6:	6003      	str	r3, [r0, #0]
 8020af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020afc:	bd38      	pop	{r3, r4, r5, pc}
 8020afe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020b00:	b112      	cbz	r2, 8020b08 <_raise_r+0x1e>
 8020b02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020b06:	b94b      	cbnz	r3, 8020b1c <_raise_r+0x32>
 8020b08:	4628      	mov	r0, r5
 8020b0a:	f000 f831 	bl	8020b70 <_getpid_r>
 8020b0e:	4622      	mov	r2, r4
 8020b10:	4601      	mov	r1, r0
 8020b12:	4628      	mov	r0, r5
 8020b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020b18:	f000 b818 	b.w	8020b4c <_kill_r>
 8020b1c:	2b01      	cmp	r3, #1
 8020b1e:	d00a      	beq.n	8020b36 <_raise_r+0x4c>
 8020b20:	1c59      	adds	r1, r3, #1
 8020b22:	d103      	bne.n	8020b2c <_raise_r+0x42>
 8020b24:	2316      	movs	r3, #22
 8020b26:	6003      	str	r3, [r0, #0]
 8020b28:	2001      	movs	r0, #1
 8020b2a:	e7e7      	b.n	8020afc <_raise_r+0x12>
 8020b2c:	2100      	movs	r1, #0
 8020b2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020b32:	4620      	mov	r0, r4
 8020b34:	4798      	blx	r3
 8020b36:	2000      	movs	r0, #0
 8020b38:	e7e0      	b.n	8020afc <_raise_r+0x12>
	...

08020b3c <raise>:
 8020b3c:	4b02      	ldr	r3, [pc, #8]	@ (8020b48 <raise+0xc>)
 8020b3e:	4601      	mov	r1, r0
 8020b40:	6818      	ldr	r0, [r3, #0]
 8020b42:	f7ff bfd2 	b.w	8020aea <_raise_r>
 8020b46:	bf00      	nop
 8020b48:	2000003c 	.word	0x2000003c

08020b4c <_kill_r>:
 8020b4c:	b538      	push	{r3, r4, r5, lr}
 8020b4e:	4d07      	ldr	r5, [pc, #28]	@ (8020b6c <_kill_r+0x20>)
 8020b50:	2300      	movs	r3, #0
 8020b52:	4604      	mov	r4, r0
 8020b54:	4608      	mov	r0, r1
 8020b56:	4611      	mov	r1, r2
 8020b58:	602b      	str	r3, [r5, #0]
 8020b5a:	f7e0 ff05 	bl	8001968 <_kill>
 8020b5e:	1c43      	adds	r3, r0, #1
 8020b60:	d102      	bne.n	8020b68 <_kill_r+0x1c>
 8020b62:	682b      	ldr	r3, [r5, #0]
 8020b64:	b103      	cbz	r3, 8020b68 <_kill_r+0x1c>
 8020b66:	6023      	str	r3, [r4, #0]
 8020b68:	bd38      	pop	{r3, r4, r5, pc}
 8020b6a:	bf00      	nop
 8020b6c:	2002d8b0 	.word	0x2002d8b0

08020b70 <_getpid_r>:
 8020b70:	f7e0 bef2 	b.w	8001958 <_getpid>

08020b74 <_init>:
 8020b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b76:	bf00      	nop
 8020b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b7a:	bc08      	pop	{r3}
 8020b7c:	469e      	mov	lr, r3
 8020b7e:	4770      	bx	lr

08020b80 <_fini>:
 8020b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b82:	bf00      	nop
 8020b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b86:	bc08      	pop	{r3}
 8020b88:	469e      	mov	lr, r3
 8020b8a:	4770      	bx	lr
