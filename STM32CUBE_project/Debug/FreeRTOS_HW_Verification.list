
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d3dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004644  0801d5ac  0801d5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021bf0  08021bf0  00023210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021bf0  08021bf0  00022bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021bf8  08021bf8  00023210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021bf8  08021bf8  00022bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021bfc  08021bfc  00022bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08021c00  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  08021cd0  000230d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  08021d70  00023170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00022840  20000210  08021e10  00023210  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  20022a50  08021e10  00023a50  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00023210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00040d91  00000000  00000000  00023240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a146  00000000  00000000  00063fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002fa0  00000000  00000000  0006e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002583  00000000  00000000  000710b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d1c5  00000000  00000000  0007363b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a4a6  00000000  00000000  000b0800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001231da  00000000  00000000  000faca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021de80  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cc38  00000000  00000000  0021dec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0022aafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801d594 	.word	0x0801d594

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0801d594 	.word	0x0801d594

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 ff07 	bl	8002450 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fe16 	bl	8001278 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f001 ff3b 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fe06 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 f91f 	bl	8004928 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fafb 	bl	8002d28 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fd9e 	bl	8001278 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 f9d9 	bl	8002b44 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd6e 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 f964 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 f97d 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 f95c 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 f975 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 f954 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 f96d 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 f94c 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 f965 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 f944 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 f95d 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 f93c 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 f955 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 f934 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 f94d 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 f92c 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 f945 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 f924 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 f93d 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 f91c 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 f935 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 f914 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 f92d 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 f90c 	bl	8002af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 f925 	bl	8002b28 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01b fea9 	bl	801c650 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	0801d6a8 	.word	0x0801d6a8

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	484f      	ldr	r0, [pc, #316]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 8000922:	f01b ff05 	bl	801c730 <puts>
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of netconnMutex */
  netconnMutexHandle = osMutexNew(&netconnMutex_attributes);
 8000926:	484f      	ldr	r0, [pc, #316]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 8000928:	f009 f9a4 	bl	8009c74 <osMutexNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a4e      	ldr	r2, [pc, #312]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 8000930:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000932:	4a4e      	ldr	r2, [pc, #312]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 8000934:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000938:	2010      	movs	r0, #16
 800093a:	f009 fc73 	bl	800a224 <osMessageQueueNew>
 800093e:	4603      	mov	r3, r0
 8000940:	4a4b      	ldr	r2, [pc, #300]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 8000942:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000944:	4a4b      	ldr	r2, [pc, #300]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 8000946:	2110      	movs	r1, #16
 8000948:	2010      	movs	r0, #16
 800094a:	f009 fc6b 	bl	800a224 <osMessageQueueNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a49      	ldr	r2, [pc, #292]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 8000952:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000954:	4a49      	ldr	r2, [pc, #292]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 8000956:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800095a:	2008      	movs	r0, #8
 800095c:	f009 fc62 	bl	800a224 <osMessageQueueNew>
 8000960:	4603      	mov	r3, r0
 8000962:	4a47      	ldr	r2, [pc, #284]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 8000964:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 8000966:	4a47      	ldr	r2, [pc, #284]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 8000968:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800096c:	2008      	movs	r0, #8
 800096e:	f009 fc59 	bl	800a224 <osMessageQueueNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a44      	ldr	r2, [pc, #272]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 8000976:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 8000978:	4a44      	ldr	r2, [pc, #272]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 800097a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800097e:	2008      	movs	r0, #8
 8000980:	f009 fc50 	bl	800a224 <osMessageQueueNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a42      	ldr	r2, [pc, #264]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800098a:	4a42      	ldr	r2, [pc, #264]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 800098c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000990:	2008      	movs	r0, #8
 8000992:	f009 fc47 	bl	800a224 <osMessageQueueNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a3f      	ldr	r2, [pc, #252]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 800099a:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 800099c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 800099e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80009a2:	2008      	movs	r0, #8
 80009a4:	f009 fc3e 	bl	800a224 <osMessageQueueNew>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009ac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009ae:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	483d      	ldr	r0, [pc, #244]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009b4:	f008 ff6c 	bl	8009890 <osThreadNew>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4a3c      	ldr	r2, [pc, #240]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009bc:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009be:	4a3c      	ldr	r2, [pc, #240]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009c0:	2100      	movs	r1, #0
 80009c2:	483c      	ldr	r0, [pc, #240]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009c4:	f008 ff64 	bl	8009890 <osThreadNew>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a3b      	ldr	r2, [pc, #236]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009cc:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009ce:	4a3b      	ldr	r2, [pc, #236]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009d4:	f008 ff5c 	bl	8009890 <osThreadNew>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009dc:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009de:	4a3a      	ldr	r2, [pc, #232]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	483a      	ldr	r0, [pc, #232]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 80009e4:	f008 ff54 	bl	8009890 <osThreadNew>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a39      	ldr	r2, [pc, #228]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 80009ec:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009ee:	4a39      	ldr	r2, [pc, #228]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	4839      	ldr	r0, [pc, #228]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 80009f4:	f008 ff4c 	bl	8009890 <osThreadNew>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a38      	ldr	r2, [pc, #224]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 80009fc:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009fe:	4a38      	ldr	r2, [pc, #224]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4838      	ldr	r0, [pc, #224]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a04:	f008 ff44 	bl	8009890 <osThreadNew>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a37      	ldr	r2, [pc, #220]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a0c:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a0e:	4a37      	ldr	r2, [pc, #220]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4837      	ldr	r0, [pc, #220]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a14:	f008 ff3c 	bl	8009890 <osThreadNew>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a36      	ldr	r2, [pc, #216]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a1c:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a1e:	4a36      	ldr	r2, [pc, #216]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4836      	ldr	r0, [pc, #216]	@ (8000afc <MX_FREERTOS_Init+0x1e0>)
 8000a24:	f008 ff34 	bl	8009890 <osThreadNew>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a35      	ldr	r2, [pc, #212]	@ (8000b00 <MX_FREERTOS_Init+0x1e4>)
 8000a2c:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a2e:	4a35      	ldr	r2, [pc, #212]	@ (8000b04 <MX_FREERTOS_Init+0x1e8>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4835      	ldr	r0, [pc, #212]	@ (8000b08 <MX_FREERTOS_Init+0x1ec>)
 8000a34:	f008 ff2c 	bl	8009890 <osThreadNew>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a34      	ldr	r2, [pc, #208]	@ (8000b0c <MX_FREERTOS_Init+0x1f0>)
 8000a3c:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a3e:	4a34      	ldr	r2, [pc, #208]	@ (8000b10 <MX_FREERTOS_Init+0x1f4>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4834      	ldr	r0, [pc, #208]	@ (8000b14 <MX_FREERTOS_Init+0x1f8>)
 8000a44:	f008 ff24 	bl	8009890 <osThreadNew>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a33      	ldr	r2, [pc, #204]	@ (8000b18 <MX_FREERTOS_Init+0x1fc>)
 8000a4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of initDoneEvent */
  initDoneEventHandle = osEventFlagsNew(&initDoneEvent_attributes);
 8000a4e:	4833      	ldr	r0, [pc, #204]	@ (8000b1c <MX_FREERTOS_Init+0x200>)
 8000a50:	f008 fff2 	bl	8009a38 <osEventFlagsNew>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a32      	ldr	r2, [pc, #200]	@ (8000b20 <MX_FREERTOS_Init+0x204>)
 8000a58:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	0801d6c8 	.word	0x0801d6c8
 8000a64:	08021968 	.word	0x08021968
 8000a68:	2000033c 	.word	0x2000033c
 8000a6c:	080218c0 	.word	0x080218c0
 8000a70:	20000320 	.word	0x20000320
 8000a74:	080218d8 	.word	0x080218d8
 8000a78:	20000324 	.word	0x20000324
 8000a7c:	080218f0 	.word	0x080218f0
 8000a80:	20000328 	.word	0x20000328
 8000a84:	08021908 	.word	0x08021908
 8000a88:	2000032c 	.word	0x2000032c
 8000a8c:	08021920 	.word	0x08021920
 8000a90:	20000330 	.word	0x20000330
 8000a94:	08021938 	.word	0x08021938
 8000a98:	20000334 	.word	0x20000334
 8000a9c:	08021950 	.word	0x08021950
 8000aa0:	20000338 	.word	0x20000338
 8000aa4:	08021758 	.word	0x08021758
 8000aa8:	08000b25 	.word	0x08000b25
 8000aac:	200002f8 	.word	0x200002f8
 8000ab0:	0802177c 	.word	0x0802177c
 8000ab4:	08000b4d 	.word	0x08000b4d
 8000ab8:	200002fc 	.word	0x200002fc
 8000abc:	080217a0 	.word	0x080217a0
 8000ac0:	08000b95 	.word	0x08000b95
 8000ac4:	20000300 	.word	0x20000300
 8000ac8:	080217c4 	.word	0x080217c4
 8000acc:	08000ba5 	.word	0x08000ba5
 8000ad0:	20000304 	.word	0x20000304
 8000ad4:	080217e8 	.word	0x080217e8
 8000ad8:	08000bb5 	.word	0x08000bb5
 8000adc:	20000308 	.word	0x20000308
 8000ae0:	0802180c 	.word	0x0802180c
 8000ae4:	08000bc5 	.word	0x08000bc5
 8000ae8:	2000030c 	.word	0x2000030c
 8000aec:	08021830 	.word	0x08021830
 8000af0:	08000bd5 	.word	0x08000bd5
 8000af4:	20000310 	.word	0x20000310
 8000af8:	08021854 	.word	0x08021854
 8000afc:	08000be5 	.word	0x08000be5
 8000b00:	20000314 	.word	0x20000314
 8000b04:	08021878 	.word	0x08021878
 8000b08:	08000bf5 	.word	0x08000bf5
 8000b0c:	20000318 	.word	0x20000318
 8000b10:	0802189c 	.word	0x0802189c
 8000b14:	08000c09 	.word	0x08000c09
 8000b18:	2000031c 	.word	0x2000031c
 8000b1c:	08021978 	.word	0x08021978
 8000b20:	20000340 	.word	0x20000340

08000b24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b2c:	f007 ffbe 	bl	8008aac <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  UDP_Server_Init();
 8000b30:	f01b fb4e 	bl	801c1d0 <UDP_Server_Init>
  osEventFlagsSet(initDoneEventHandle, 0x01);
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <StartDefaultTask+0x24>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f008 ffce 	bl	8009adc <osEventFlagsSet>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f008 ff4b 	bl	80099dc <osDelay>
 8000b46:	e7fb      	b.n	8000b40 <StartDefaultTask+0x1c>
 8000b48:	20000340 	.word	0x20000340

08000b4c <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  printf("Listener waiting for network...\n");
 8000b54:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <StartTaskUdpListener+0x38>)
 8000b56:	f01b fdeb 	bl	801c730 <puts>
  osEventFlagsWait(initDoneEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <StartTaskUdpListener+0x3c>)
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b62:	2200      	movs	r2, #0
 8000b64:	2101      	movs	r1, #1
 8000b66:	f009 f80f 	bl	8009b88 <osEventFlagsWait>
  printf("Network set...\n");
 8000b6a:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <StartTaskUdpListener+0x40>)
 8000b6c:	f01b fde0 	bl	801c730 <puts>
  printf("Starting UDP Listener...\n");
 8000b70:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <StartTaskUdpListener+0x44>)
 8000b72:	f01b fddd 	bl	801c730 <puts>
  UDP_Listen(); // loops here
 8000b76:	f01b fb6b 	bl	801c250 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	0801d6e0 	.word	0x0801d6e0
 8000b88:	20000340 	.word	0x20000340
 8000b8c:	0801d700 	.word	0x0801d700
 8000b90:	0801d710 	.word	0x0801d710

08000b94 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f008 ff1d 	bl	80099dc <osDelay>
 8000ba2:	e7fb      	b.n	8000b9c <StartTaskDispatcher+0x8>

08000ba4 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f008 ff15 	bl	80099dc <osDelay>
 8000bb2:	e7fb      	b.n	8000bac <StartTaskUartTest+0x8>

08000bb4 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f008 ff0d 	bl	80099dc <osDelay>
 8000bc2:	e7fb      	b.n	8000bbc <StartTaskI2cTest+0x8>

08000bc4 <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f008 ff05 	bl	80099dc <osDelay>
 8000bd2:	e7fb      	b.n	8000bcc <StartTaskSpiTest+0x8>

08000bd4 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f008 fefd 	bl	80099dc <osDelay>
 8000be2:	e7fb      	b.n	8000bdc <StartTaskAdcTest+0x8>

08000be4 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f008 fef5 	bl	80099dc <osDelay>
 8000bf2:	e7fb      	b.n	8000bec <StartTaskTimTest+0x8>

08000bf4 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000bfc:	f01b fbda 	bl	801c3b4 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//printf("Free Heap: %lu\n", xPortGetFreeHeapSize());
	//printf("Minimum Ever Free Heap: %lu\n", xPortGetMinimumEverFreeHeapSize());
    osDelay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f008 fee3 	bl	80099dc <osDelay>
 8000c16:	e7fb      	b.n	8000c10 <StartLoggerTask+0x8>

08000c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1e:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a26      	ldr	r2, [pc, #152]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a20      	ldr	r2, [pc, #128]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a1a      	ldr	r2, [pc, #104]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b18      	ldr	r3, [pc, #96]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a0e      	ldr	r2, [pc, #56]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c84:	f043 0308 	orr.w	r3, r3, #8
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a08      	ldr	r2, [pc, #32]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_GPIO_Init+0xa4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

}
 8000cae:	bf00      	nop
 8000cb0:	371c      	adds	r7, #28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <MX_I2C1_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <MX_I2C1_Init+0x7c>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000cfc:	f003 ffc0 	bl	8004c80 <HAL_I2C_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d06:	f000 fab7 	bl	8001278 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000d0e:	f004 fe6c 	bl	80059ea <HAL_I2CEx_ConfigAnalogFilter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 faae 	bl	8001278 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_I2C1_Init+0x74>)
 8000d20:	f004 feae 	bl	8005a80 <HAL_I2CEx_ConfigDigitalFilter>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 faa5 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000344 	.word	0x20000344
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	20404768 	.word	0x20404768

08000d40 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <MX_I2C2_Init+0x78>)
 8000d48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <MX_I2C2_Init+0x7c>)
 8000d4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d52:	2214      	movs	r2, #20
 8000d54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d7a:	480e      	ldr	r0, [pc, #56]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d7c:	f003 ff80 	bl	8004c80 <HAL_I2C_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d86:	f000 fa77 	bl	8001278 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000d8e:	f004 fe2c 	bl	80059ea <HAL_I2CEx_ConfigAnalogFilter>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d98:	f000 fa6e 	bl	8001278 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_I2C2_Init+0x74>)
 8000da0:	f004 fe6e 	bl	8005a80 <HAL_I2CEx_ConfigDigitalFilter>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000daa:	f000 fa65 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000398 	.word	0x20000398
 8000db8:	40005800 	.word	0x40005800
 8000dbc:	20404768 	.word	0x20404768

08000dc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0ac      	sub	sp, #176	@ 0xb0
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	2284      	movs	r2, #132	@ 0x84
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f01b fd95 	bl	801c910 <memset>
  if(i2cHandle->Instance==I2C1)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a57      	ldr	r2, [pc, #348]	@ (8000f48 <HAL_I2C_MspInit+0x188>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	f040 80b9 	bne.w	8000f64 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000df2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000df6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	4618      	mov	r0, r3
 8000e02:	f005 fb95 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e0c:	f000 fa34 	bl	8001278 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b4e      	ldr	r3, [pc, #312]	@ (8000f4c <HAL_I2C_MspInit+0x18c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	4a4d      	ldr	r2, [pc, #308]	@ (8000f4c <HAL_I2C_MspInit+0x18c>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f4c <HAL_I2C_MspInit+0x18c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e42:	2304      	movs	r3, #4
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4840      	ldr	r0, [pc, #256]	@ (8000f50 <HAL_I2C_MspInit+0x190>)
 8000e50:	f003 fd6a 	bl	8004928 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e54:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <HAL_I2C_MspInit+0x18c>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a3c      	ldr	r2, [pc, #240]	@ (8000f4c <HAL_I2C_MspInit+0x18c>)
 8000e5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e60:	4b3a      	ldr	r3, [pc, #232]	@ (8000f4c <HAL_I2C_MspInit+0x18c>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e6c:	4b39      	ldr	r3, [pc, #228]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f58 <HAL_I2C_MspInit+0x198>)
 8000e70:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e72:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e78:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7a:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e80:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e86:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000e88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e8c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e94:	4b2f      	ldr	r3, [pc, #188]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000eac:	4829      	ldr	r0, [pc, #164]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000eae:	f001 ff3b 	bl	8002d28 <HAL_DMA_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000eb8:	f000 f9de 	bl	8001278 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a25      	ldr	r2, [pc, #148]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000ec0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ec2:	4a24      	ldr	r2, [pc, #144]	@ (8000f54 <HAL_I2C_MspInit+0x194>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000eca:	4a25      	ldr	r2, [pc, #148]	@ (8000f60 <HAL_I2C_MspInit+0x1a0>)
 8000ecc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000ed0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ed4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000ed8:	2240      	movs	r2, #64	@ 0x40
 8000eda:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f02:	4b16      	ldr	r3, [pc, #88]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000f0a:	f001 ff0d 	bl	8002d28 <HAL_DMA_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000f14:	f000 f9b0 	bl	8001278 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000f1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <HAL_I2C_MspInit+0x19c>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2105      	movs	r1, #5
 8000f28:	201f      	movs	r0, #31
 8000f2a:	f001 fde1 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f2e:	201f      	movs	r0, #31
 8000f30:	f001 fdfa 	bl	8002b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2105      	movs	r1, #5
 8000f38:	2020      	movs	r0, #32
 8000f3a:	f001 fdd9 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f3e:	2020      	movs	r0, #32
 8000f40:	f001 fdf2 	bl	8002b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f44:	e0be      	b.n	80010c4 <HAL_I2C_MspInit+0x304>
 8000f46:	bf00      	nop
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020400 	.word	0x40020400
 8000f54:	200003ec 	.word	0x200003ec
 8000f58:	40026088 	.word	0x40026088
 8000f5c:	2000044c 	.word	0x2000044c
 8000f60:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a58      	ldr	r2, [pc, #352]	@ (80010cc <HAL_I2C_MspInit+0x30c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 80aa 	bne.w	80010c4 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f005 fad5 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000f8c:	f000 f974 	bl	8001278 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f90:	4b4f      	ldr	r3, [pc, #316]	@ (80010d0 <HAL_I2C_MspInit+0x310>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	4a4e      	ldr	r2, [pc, #312]	@ (80010d0 <HAL_I2C_MspInit+0x310>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80010d0 <HAL_I2C_MspInit+0x310>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fa8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4841      	ldr	r0, [pc, #260]	@ (80010d4 <HAL_I2C_MspInit+0x314>)
 8000fd0:	f003 fcaa 	bl	8004928 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80010d0 <HAL_I2C_MspInit+0x310>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	4a3d      	ldr	r2, [pc, #244]	@ (80010d0 <HAL_I2C_MspInit+0x310>)
 8000fda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80010d0 <HAL_I2C_MspInit+0x310>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000fec:	4b3a      	ldr	r3, [pc, #232]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8000fee:	4a3b      	ldr	r2, [pc, #236]	@ (80010dc <HAL_I2C_MspInit+0x31c>)
 8000ff0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000ff2:	4b39      	ldr	r3, [pc, #228]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8000ff4:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b37      	ldr	r3, [pc, #220]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b34      	ldr	r3, [pc, #208]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8001008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100e:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001014:	4b30      	ldr	r3, [pc, #192]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800101a:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001020:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001026:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800102c:	482a      	ldr	r0, [pc, #168]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 800102e:	f001 fe7b 	bl	8002d28 <HAL_DMA_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8001038:	f000 f91e 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a26      	ldr	r2, [pc, #152]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8001040:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001042:	4a25      	ldr	r2, [pc, #148]	@ (80010d8 <HAL_I2C_MspInit+0x318>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 800104a:	4a26      	ldr	r2, [pc, #152]	@ (80010e4 <HAL_I2C_MspInit+0x324>)
 800104c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 8001050:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001054:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001056:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 8001058:	2240      	movs	r2, #64	@ 0x40
 800105a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105c:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001062:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 8001064:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001068:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001070:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800107c:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001082:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001088:	4815      	ldr	r0, [pc, #84]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 800108a:	f001 fe4d 	bl	8002d28 <HAL_DMA_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001094:	f000 f8f0 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a11      	ldr	r2, [pc, #68]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 800109c:	639a      	str	r2, [r3, #56]	@ 0x38
 800109e:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <HAL_I2C_MspInit+0x320>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2105      	movs	r1, #5
 80010a8:	2021      	movs	r0, #33	@ 0x21
 80010aa:	f001 fd21 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010ae:	2021      	movs	r0, #33	@ 0x21
 80010b0:	f001 fd3a 	bl	8002b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2105      	movs	r1, #5
 80010b8:	2022      	movs	r0, #34	@ 0x22
 80010ba:	f001 fd19 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80010be:	2022      	movs	r0, #34	@ 0x22
 80010c0:	f001 fd32 	bl	8002b28 <HAL_NVIC_EnableIRQ>
}
 80010c4:	bf00      	nop
 80010c6:	37b0      	adds	r7, #176	@ 0xb0
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40005800 	.word	0x40005800
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020400 	.word	0x40020400
 80010d8:	200004ac 	.word	0x200004ac
 80010dc:	40026058 	.word	0x40026058
 80010e0:	2000050c 	.word	0x2000050c
 80010e4:	400260b8 	.word	0x400260b8

080010e8 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <_write+0x3c>)
 80010f6:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	4809      	ldr	r0, [pc, #36]	@ (8001128 <_write+0x40>)
 8001104:	f006 fcd2 	bl	8007aac <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8001108:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110c:	2201      	movs	r2, #1
 800110e:	6979      	ldr	r1, [r7, #20]
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <_write+0x40>)
 8001112:	f006 fccb 	bl	8007aac <HAL_UART_Transmit>
	return len + 1;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3301      	adds	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	0801d72c 	.word	0x0801d72c
 8001128:	20000a0c 	.word	0x20000a0c

0800112c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f001 f93d 	bl	80023ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f822 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f7ff fd6e 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 800113c:	f7ff fb54 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001140:	f000 fe4c 	bl	8001ddc <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001144:	f7ff fb0e 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8001148:	f000 fde8 	bl	8001d1c <MX_UART4_Init>
  MX_UART5_Init();
 800114c:	f000 fe16 	bl	8001d7c <MX_UART5_Init>
  MX_I2C1_Init();
 8001150:	f7ff fdb6 	bl	8000cc0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001154:	f7ff fdf4 	bl	8000d40 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001158:	f000 f894 	bl	8001284 <MX_SPI1_Init>
  MX_SPI4_Init();
 800115c:	f000 f8d0 	bl	8001300 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001160:	f7ff fa3c 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001164:	f000 fd38 	bl	8001bd8 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001168:	f000 fce8 	bl	8001b3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800116c:	f008 fafe 	bl	800976c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001170:	f7ff fbd4 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001174:	f008 fb2e 	bl	80097d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <main+0x4c>

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	2230      	movs	r2, #48	@ 0x30
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f01b fbc0 	bl	801c910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <SystemClock_Config+0xd0>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	4a29      	ldr	r2, [pc, #164]	@ (800124c <SystemClock_Config+0xd0>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ac:	4b27      	ldr	r3, [pc, #156]	@ (800124c <SystemClock_Config+0xd0>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <SystemClock_Config+0xd4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a24      	ldr	r2, [pc, #144]	@ (8001250 <SystemClock_Config+0xd4>)
 80011be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <SystemClock_Config+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d0:	2302      	movs	r3, #2
 80011d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d8:	2310      	movs	r3, #16
 80011da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011dc:	2302      	movs	r3, #2
 80011de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011e8:	23d8      	movs	r3, #216	@ 0xd8
 80011ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fcdd 	bl	8005bb8 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001204:	f000 f838 	bl	8001278 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001208:	f004 fc86 	bl	8005b18 <HAL_PWREx_EnableOverDrive>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001212:	f000 f831 	bl	8001278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001216:	230f      	movs	r3, #15
 8001218:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121a:	2302      	movs	r3, #2
 800121c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001222:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001226:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2107      	movs	r1, #7
 8001234:	4618      	mov	r0, r3
 8001236:	f004 ff63 	bl	8006100 <HAL_RCC_ClockConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001240:	f000 f81a 	bl	8001278 <Error_Handler>
  }
}
 8001244:	bf00      	nop
 8001246:	3750      	adds	r7, #80	@ 0x50
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000

08001254 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001266:	f001 f8af 	bl	80023c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40001400 	.word	0x40001400

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <Error_Handler+0x8>

08001284 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001288:	4b1b      	ldr	r3, [pc, #108]	@ (80012f8 <MX_SPI1_Init+0x74>)
 800128a:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <MX_SPI1_Init+0x78>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_SPI1_Init+0x74>)
 8001290:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <MX_SPI1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <MX_SPI1_Init+0x74>)
 800129e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012ba:	2218      	movs	r2, #24
 80012bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012d2:	2207      	movs	r2, #7
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012de:	2208      	movs	r2, #8
 80012e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <MX_SPI1_Init+0x74>)
 80012e4:	f005 fd14 	bl	8006d10 <HAL_SPI_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f7ff ffc3 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000056c 	.word	0x2000056c
 80012fc:	40013000 	.word	0x40013000

08001300 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001304:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001306:	4a19      	ldr	r2, [pc, #100]	@ (800136c <MX_SPI4_Init+0x6c>)
 8001308:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_SPI4_Init+0x68>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001318:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800131c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_SPI4_Init+0x68>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <MX_SPI4_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001344:	2207      	movs	r2, #7
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <MX_SPI4_Init+0x68>)
 800134a:	2200      	movs	r2, #0
 800134c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001350:	2200      	movs	r2, #0
 8001352:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_SPI4_Init+0x68>)
 8001356:	f005 fcdb 	bl	8006d10 <HAL_SPI_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001360:	f7ff ff8a 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200005d0 	.word	0x200005d0
 800136c:	40013400 	.word	0x40013400

08001370 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08c      	sub	sp, #48	@ 0x30
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4aa1      	ldr	r2, [pc, #644]	@ (8001614 <HAL_SPI_MspInit+0x2a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	f040 80a9 	bne.w	80014e6 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001394:	4ba0      	ldr	r3, [pc, #640]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 8001396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001398:	4a9f      	ldr	r2, [pc, #636]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 800139a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800139e:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b0:	4a99      	ldr	r2, [pc, #612]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b8:	4b97      	ldr	r3, [pc, #604]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b94      	ldr	r3, [pc, #592]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	4a93      	ldr	r2, [pc, #588]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d0:	4b91      	ldr	r3, [pc, #580]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013dc:	2370      	movs	r3, #112	@ 0x70
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ec:	2305      	movs	r3, #5
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4889      	ldr	r0, [pc, #548]	@ (800161c <HAL_SPI_MspInit+0x2ac>)
 80013f8:	f003 fa96 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013fc:	2320      	movs	r3, #32
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140c:	2305      	movs	r3, #5
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4882      	ldr	r0, [pc, #520]	@ (8001620 <HAL_SPI_MspInit+0x2b0>)
 8001418:	f003 fa86 	bl	8004928 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800141c:	4b81      	ldr	r3, [pc, #516]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 800141e:	4a82      	ldr	r2, [pc, #520]	@ (8001628 <HAL_SPI_MspInit+0x2b8>)
 8001420:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001422:	4b80      	ldr	r3, [pc, #512]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001424:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001428:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142a:	4b7e      	ldr	r3, [pc, #504]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001430:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001436:	4b7b      	ldr	r3, [pc, #492]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001438:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800143e:	4b79      	ldr	r3, [pc, #484]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001444:	4b77      	ldr	r3, [pc, #476]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800144a:	4b76      	ldr	r3, [pc, #472]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001450:	4b74      	ldr	r3, [pc, #464]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001456:	4b73      	ldr	r3, [pc, #460]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800145c:	4871      	ldr	r0, [pc, #452]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 800145e:	f001 fc63 	bl	8002d28 <HAL_DMA_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001468:	f7ff ff06 	bl	8001278 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a6d      	ldr	r2, [pc, #436]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001470:	659a      	str	r2, [r3, #88]	@ 0x58
 8001472:	4a6c      	ldr	r2, [pc, #432]	@ (8001624 <HAL_SPI_MspInit+0x2b4>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001478:	4b6c      	ldr	r3, [pc, #432]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 800147a:	4a6d      	ldr	r2, [pc, #436]	@ (8001630 <HAL_SPI_MspInit+0x2c0>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800147e:	4b6b      	ldr	r3, [pc, #428]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 8001480:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001484:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001486:	4b69      	ldr	r3, [pc, #420]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 8001488:	2240      	movs	r2, #64	@ 0x40
 800148a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b67      	ldr	r3, [pc, #412]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b66      	ldr	r3, [pc, #408]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 8001494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001498:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149a:	4b64      	ldr	r3, [pc, #400]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a0:	4b62      	ldr	r3, [pc, #392]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014a6:	4b61      	ldr	r3, [pc, #388]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b5f      	ldr	r3, [pc, #380]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b2:	4b5e      	ldr	r3, [pc, #376]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014b8:	485c      	ldr	r0, [pc, #368]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 80014ba:	f001 fc35 	bl	8002d28 <HAL_DMA_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80014c4:	f7ff fed8 	bl	8001278 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a58      	ldr	r2, [pc, #352]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 80014cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80014ce:	4a57      	ldr	r2, [pc, #348]	@ (800162c <HAL_SPI_MspInit+0x2bc>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2105      	movs	r1, #5
 80014d8:	2023      	movs	r0, #35	@ 0x23
 80014da:	f001 fb09 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014de:	2023      	movs	r0, #35	@ 0x23
 80014e0:	f001 fb22 	bl	8002b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80014e4:	e091      	b.n	800160a <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a52      	ldr	r2, [pc, #328]	@ (8001634 <HAL_SPI_MspInit+0x2c4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	f040 808c 	bne.w	800160a <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014f2:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	4a48      	ldr	r2, [pc, #288]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 80014f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fe:	4b46      	ldr	r3, [pc, #280]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800150a:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a42      	ldr	r2, [pc, #264]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <HAL_SPI_MspInit+0x2a8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001522:	2374      	movs	r3, #116	@ 0x74
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001532:	2305      	movs	r3, #5
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	483e      	ldr	r0, [pc, #248]	@ (8001638 <HAL_SPI_MspInit+0x2c8>)
 800153e:	f003 f9f3 	bl	8004928 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001542:	4b3e      	ldr	r3, [pc, #248]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 8001544:	4a3e      	ldr	r2, [pc, #248]	@ (8001640 <HAL_SPI_MspInit+0x2d0>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001548:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 800154a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800154e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001550:	4b3a      	ldr	r3, [pc, #232]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b39      	ldr	r3, [pc, #228]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b37      	ldr	r3, [pc, #220]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 800155e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	4b35      	ldr	r3, [pc, #212]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156a:	4b34      	ldr	r3, [pc, #208]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001570:	4b32      	ldr	r3, [pc, #200]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b31      	ldr	r3, [pc, #196]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157c:	4b2f      	ldr	r3, [pc, #188]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001582:	482e      	ldr	r0, [pc, #184]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 8001584:	f001 fbd0 	bl	8002d28 <HAL_DMA_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800158e:	f7ff fe73 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a29      	ldr	r2, [pc, #164]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 8001596:	659a      	str	r2, [r3, #88]	@ 0x58
 8001598:	4a28      	ldr	r2, [pc, #160]	@ (800163c <HAL_SPI_MspInit+0x2cc>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800159e:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015a0:	4a29      	ldr	r2, [pc, #164]	@ (8001648 <HAL_SPI_MspInit+0x2d8>)
 80015a2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80015aa:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ac:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015ae:	2240      	movs	r2, #64	@ 0x40
 80015b0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015b8:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015be:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80015de:	4819      	ldr	r0, [pc, #100]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015e0:	f001 fba2 	bl	8002d28 <HAL_DMA_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80015ea:	f7ff fe45 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80015f4:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <HAL_SPI_MspInit+0x2d4>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2105      	movs	r1, #5
 80015fe:	2054      	movs	r0, #84	@ 0x54
 8001600:	f001 fa76 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001604:	2054      	movs	r0, #84	@ 0x54
 8001606:	f001 fa8f 	bl	8002b28 <HAL_NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3730      	adds	r7, #48	@ 0x30
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40013000 	.word	0x40013000
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400
 8001624:	20000634 	.word	0x20000634
 8001628:	40026440 	.word	0x40026440
 800162c:	20000694 	.word	0x20000694
 8001630:	40026458 	.word	0x40026458
 8001634:	40013400 	.word	0x40013400
 8001638:	40021000 	.word	0x40021000
 800163c:	200006f4 	.word	0x200006f4
 8001640:	40026410 	.word	0x40026410
 8001644:	20000754 	.word	0x20000754
 8001648:	40026428 	.word	0x40026428

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a10      	ldr	r2, [pc, #64]	@ (8001698 <HAL_MspInit+0x4c>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_MspInit+0x4c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001674:	6453      	str	r3, [r2, #68]	@ 0x44
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	210f      	movs	r1, #15
 8001686:	f06f 0001 	mvn.w	r0, #1
 800168a:	f001 fa31 	bl	8002af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	@ 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80016ac:	4b33      	ldr	r3, [pc, #204]	@ (800177c <HAL_InitTick+0xe0>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	4a32      	ldr	r2, [pc, #200]	@ (800177c <HAL_InitTick+0xe0>)
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b8:	4b30      	ldr	r3, [pc, #192]	@ (800177c <HAL_InitTick+0xe0>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f003 0320 	and.w	r3, r3, #32
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016c4:	f107 0210 	add.w	r2, r7, #16
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 fefc 	bl	80064cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016de:	f004 fecd 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 80016e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80016e4:	e004      	b.n	80016f0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016e6:	f004 fec9 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 80016ea:	4603      	mov	r3, r0
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <HAL_InitTick+0xe4>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	0c9b      	lsrs	r3, r3, #18
 80016fa:	3b01      	subs	r3, #1
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_InitTick+0xe8>)
 8001700:	4a21      	ldr	r2, [pc, #132]	@ (8001788 <HAL_InitTick+0xec>)
 8001702:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001704:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <HAL_InitTick+0xe8>)
 8001706:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800170a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800170c:	4a1d      	ldr	r2, [pc, #116]	@ (8001784 <HAL_InitTick+0xe8>)
 800170e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001710:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <HAL_InitTick+0xe8>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_InitTick+0xe8>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <HAL_InitTick+0xe8>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001724:	4817      	ldr	r0, [pc, #92]	@ (8001784 <HAL_InitTick+0xe8>)
 8001726:	f005 fcbe 	bl	80070a6 <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001730:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001734:	2b00      	cmp	r3, #0
 8001736:	d11b      	bne.n	8001770 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001738:	4812      	ldr	r0, [pc, #72]	@ (8001784 <HAL_InitTick+0xe8>)
 800173a:	f005 fd0b 	bl	8007154 <HAL_TIM_Base_Start_IT>
 800173e:	4603      	mov	r3, r0
 8001740:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001744:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800174c:	2037      	movs	r0, #55	@ 0x37
 800174e:	f001 f9eb 	bl	8002b28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d808      	bhi.n	800176a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	2037      	movs	r0, #55	@ 0x37
 800175e:	f001 f9c7 	bl	8002af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_InitTick+0xf0>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e002      	b.n	8001770 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001770:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001774:	4618      	mov	r0, r3
 8001776:	3738      	adds	r7, #56	@ 0x38
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	431bde83 	.word	0x431bde83
 8001784:	200007b4 	.word	0x200007b4
 8001788:	40001400 	.word	0x40001400
 800178c:	20000004 	.word	0x20000004

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <NMI_Handler+0x4>

08001798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <MemManage_Handler+0x4>

080017a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <DMA1_Stream0_IRQHandler+0x10>)
 80017ce:	f001 fbeb 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000af4 	.word	0x20000af4

080017dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA1_Stream1_IRQHandler+0x10>)
 80017e2:	f001 fbe1 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000089c 	.word	0x2000089c

080017f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Stream2_IRQHandler+0x10>)
 80017f6:	f001 fbd7 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000a94 	.word	0x20000a94

08001804 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <DMA1_Stream3_IRQHandler+0x10>)
 800180a:	f001 fbcd 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200004ac 	.word	0x200004ac

08001818 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA1_Stream5_IRQHandler+0x10>)
 800181e:	f001 fbc3 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200003ec 	.word	0x200003ec

0800182c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <DMA1_Stream6_IRQHandler+0x10>)
 8001832:	f001 fbb9 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000044c 	.word	0x2000044c

08001840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <I2C1_EV_IRQHandler+0x10>)
 8001846:	f003 fab7 	bl	8004db8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000344 	.word	0x20000344

08001854 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <I2C1_ER_IRQHandler+0x10>)
 800185a:	f003 fac7 	bl	8004dec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000344 	.word	0x20000344

08001868 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <I2C2_EV_IRQHandler+0x10>)
 800186e:	f003 faa3 	bl	8004db8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000398 	.word	0x20000398

0800187c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <I2C2_ER_IRQHandler+0x10>)
 8001882:	f003 fab3 	bl	8004dec <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000398 	.word	0x20000398

08001890 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <SPI1_IRQHandler+0x10>)
 8001896:	f005 fae7 	bl	8006e68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000056c 	.word	0x2000056c

080018a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <USART3_IRQHandler+0x10>)
 80018aa:	f006 f989 	bl	8007bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000a0c 	.word	0x20000a0c

080018b8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <DMA1_Stream7_IRQHandler+0x10>)
 80018be:	f001 fb73 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000050c 	.word	0x2000050c

080018cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <UART4_IRQHandler+0x10>)
 80018d2:	f006 f975 	bl	8007bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200008fc 	.word	0x200008fc

080018e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <UART5_IRQHandler+0x10>)
 80018e6:	f006 f96b 	bl	8007bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000984 	.word	0x20000984

080018f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <TIM6_DAC_IRQHandler+0x10>)
 80018fa:	f005 fca3 	bl	8007244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000850 	.word	0x20000850

08001908 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <TIM7_IRQHandler+0x10>)
 800190e:	f005 fc99 	bl	8007244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200007b4 	.word	0x200007b4

0800191c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <DMA2_Stream0_IRQHandler+0x10>)
 8001922:	f001 fb41 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200006f4 	.word	0x200006f4

08001930 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <DMA2_Stream1_IRQHandler+0x10>)
 8001936:	f001 fb37 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000754 	.word	0x20000754

08001944 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <DMA2_Stream2_IRQHandler+0x10>)
 800194a:	f001 fb2d 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000634 	.word	0x20000634

08001958 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <DMA2_Stream3_IRQHandler+0x10>)
 800195e:	f001 fb23 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000694 	.word	0x20000694

0800196c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <DMA2_Stream4_IRQHandler+0x10>)
 8001972:	f001 fb19 	bl	8002fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000274 	.word	0x20000274

08001980 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <ETH_IRQHandler+0x10>)
 8001986:	f002 f8e7 	bl	8003b58 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000555c 	.word	0x2000555c

08001994 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <ETH_WKUP_IRQHandler+0x10>)
 800199a:	f002 f8dd 	bl	8003b58 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000555c 	.word	0x2000555c

080019a8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <SPI4_IRQHandler+0x10>)
 80019ae:	f005 fa5b 	bl	8006e68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200005d0 	.word	0x200005d0

080019bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_kill>:

int _kill(int pid, int sig)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <_kill+0x20>)
 80019d8:	2216      	movs	r2, #22
 80019da:	601a      	str	r2, [r3, #0]
  return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20022a40 	.word	0x20022a40

080019f0 <_exit>:

void _exit (int status)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffe5 	bl	80019cc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a02:	bf00      	nop
 8001a04:	e7fd      	b.n	8001a02 <_exit+0x12>

08001a06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e00a      	b.n	8001a2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a18:	f3af 8000 	nop.w
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	b2ca      	uxtb	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbf0      	blt.n	8001a18 <_read+0x12>
  }

  return len;
 8001a36:	687b      	ldr	r3, [r7, #4]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a68:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_isatty>:

int _isatty(int file)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d205      	bcs.n	8001ae4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <_sbrk+0x6c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a06      	ldr	r2, [pc, #24]	@ (8001b0c <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20050000 	.word	0x20050000
 8001b08:	00002000 	.word	0x00002000
 8001b0c:	20000800 	.word	0x20000800
 8001b10:	20022a50 	.word	0x20022a50
 8001b14:	20022a40 	.word	0x20022a40

08001b18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <SystemInit+0x20>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <SystemInit+0x20>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001b5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b82:	4814      	ldr	r0, [pc, #80]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001b84:	f005 fa8f 	bl	80070a6 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b8e:	f7ff fb73 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001ba0:	f005 fc58 	bl	8007454 <HAL_TIM_ConfigClockSource>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001baa:	f7ff fb65 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	@ (8001bd4 <MX_TIM2_Init+0x98>)
 8001bbc:	f005 fe7c 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bc6:	f7ff fb57 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000804 	.word	0x20000804

08001bd8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <MX_TIM6_Init+0x68>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001bf0:	f240 221b 	movw	r2, #539	@ 0x21b
 8001bf4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001bfe:	2263      	movs	r2, #99	@ 0x63
 8001c00:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001c0a:	f005 fa4c 	bl	80070a6 <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c14:	f7ff fb30 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_TIM6_Init+0x64>)
 8001c26:	f005 fe47 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c30:	f7ff fb22 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000850 	.word	0x20000850
 8001c40:	40001000 	.word	0x40001000

08001c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c54:	d10c      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c56:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_TIM_Base_MspInit+0xc8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d0c <HAL_TIM_Base_MspInit+0xc8>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <HAL_TIM_Base_MspInit+0xc8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c6e:	e049      	b.n	8001d04 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a26      	ldr	r2, [pc, #152]	@ (8001d10 <HAL_TIM_Base_MspInit+0xcc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d144      	bne.n	8001d04 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c7a:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <HAL_TIM_Base_MspInit+0xc8>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a23      	ldr	r2, [pc, #140]	@ (8001d0c <HAL_TIM_Base_MspInit+0xc8>)
 8001c80:	f043 0310 	orr.w	r3, r3, #16
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <HAL_TIM_Base_MspInit+0xc8>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001c94:	4a20      	ldr	r2, [pc, #128]	@ (8001d18 <HAL_TIM_Base_MspInit+0xd4>)
 8001c96:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001c9a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c9e:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001cae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb2:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001cb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cba:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001cbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cc2:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001ccc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cd0:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001cd8:	480e      	ldr	r0, [pc, #56]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001cda:	f001 f825 	bl	8002d28 <HAL_DMA_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001ce4:	f7ff fac8 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001cec:	621a      	str	r2, [r3, #32]
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_TIM_Base_MspInit+0xd0>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	2036      	movs	r0, #54	@ 0x36
 8001cfa:	f000 fef9 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cfe:	2036      	movs	r0, #54	@ 0x36
 8001d00:	f000 ff12 	bl	8002b28 <HAL_NVIC_EnableIRQ>
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40001000 	.word	0x40001000
 8001d14:	2000089c 	.word	0x2000089c
 8001d18:	40026028 	.word	0x40026028

08001d1c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d20:	4b14      	ldr	r3, [pc, #80]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d22:	4a15      	ldr	r2, [pc, #84]	@ (8001d78 <MX_UART4_Init+0x5c>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d26:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <MX_UART4_Init+0x58>)
 8001d60:	f005 fe56 	bl	8007a10 <HAL_UART_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d6a:	f7ff fa85 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200008fc 	.word	0x200008fc
 8001d78:	40004c00 	.word	0x40004c00

08001d7c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001d82:	4a15      	ldr	r2, [pc, #84]	@ (8001dd8 <MX_UART5_Init+0x5c>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MX_UART5_Init+0x58>)
 8001dc0:	f005 fe26 	bl	8007a10 <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001dca:	f7ff fa55 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000984 	.word	0x20000984
 8001dd8:	40005000 	.word	0x40005000

08001ddc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001de2:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <MX_USART3_UART_Init+0x5c>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_USART3_UART_Init+0x58>)
 8001e20:	f005 fdf6 	bl	8007a10 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e2a:	f7ff fa25 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000a0c 	.word	0x20000a0c
 8001e38:	40004800 	.word	0x40004800

08001e3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b0b0      	sub	sp, #192	@ 0xc0
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e58:	2284      	movs	r2, #132	@ 0x84
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f01a fd57 	bl	801c910 <memset>
  if(uartHandle->Instance==UART4)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4ab0      	ldr	r2, [pc, #704]	@ (8002128 <HAL_UART_MspInit+0x2ec>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d173      	bne.n	8001f54 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 fb58 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e86:	f7ff f9f7 	bl	8001278 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e8a:	4ba8      	ldr	r3, [pc, #672]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4aa7      	ldr	r2, [pc, #668]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001e90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4ba5      	ldr	r3, [pc, #660]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	4ba2      	ldr	r3, [pc, #648]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4aa1      	ldr	r2, [pc, #644]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b9f      	ldr	r3, [pc, #636]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	623b      	str	r3, [r7, #32]
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001eba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4893      	ldr	r0, [pc, #588]	@ (8002130 <HAL_UART_MspInit+0x2f4>)
 8001ee2:	f002 fd21 	bl	8004928 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001ee6:	4b93      	ldr	r3, [pc, #588]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001ee8:	4a93      	ldr	r2, [pc, #588]	@ (8002138 <HAL_UART_MspInit+0x2fc>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001eec:	4b91      	ldr	r3, [pc, #580]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001eee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ef2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efa:	4b8e      	ldr	r3, [pc, #568]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f00:	4b8c      	ldr	r3, [pc, #560]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f06:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f08:	4b8a      	ldr	r3, [pc, #552]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0e:	4b89      	ldr	r3, [pc, #548]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f14:	4b87      	ldr	r3, [pc, #540]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f1a:	4b86      	ldr	r3, [pc, #536]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f20:	4b84      	ldr	r3, [pc, #528]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f26:	4883      	ldr	r0, [pc, #524]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f28:	f000 fefe 	bl	8002d28 <HAL_DMA_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001f32:	f7ff f9a1 	bl	8001278 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a7e      	ldr	r2, [pc, #504]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f3a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f3c:	4a7d      	ldr	r2, [pc, #500]	@ (8002134 <HAL_UART_MspInit+0x2f8>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2105      	movs	r1, #5
 8001f46:	2034      	movs	r0, #52	@ 0x34
 8001f48:	f000 fdd2 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f4c:	2034      	movs	r0, #52	@ 0x34
 8001f4e:	f000 fdeb 	bl	8002b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f52:	e0e4      	b.n	800211e <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a78      	ldr	r2, [pc, #480]	@ (800213c <HAL_UART_MspInit+0x300>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f040 8095 	bne.w	800208a <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001f60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f66:	2300      	movs	r3, #0
 8001f68:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 fade 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f7a:	f7ff f97d 	bl	8001278 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f7e:	4b6b      	ldr	r3, [pc, #428]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a6a      	ldr	r2, [pc, #424]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001f84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b68      	ldr	r3, [pc, #416]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	4b65      	ldr	r3, [pc, #404]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a64      	ldr	r2, [pc, #400]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b62      	ldr	r3, [pc, #392]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b5f      	ldr	r3, [pc, #380]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a5e      	ldr	r2, [pc, #376]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b5c      	ldr	r3, [pc, #368]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fe6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fea:	4619      	mov	r1, r3
 8001fec:	4850      	ldr	r0, [pc, #320]	@ (8002130 <HAL_UART_MspInit+0x2f4>)
 8001fee:	f002 fc9b 	bl	8004928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800200a:	2308      	movs	r3, #8
 800200c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002010:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002014:	4619      	mov	r1, r3
 8002016:	484a      	ldr	r0, [pc, #296]	@ (8002140 <HAL_UART_MspInit+0x304>)
 8002018:	f002 fc86 	bl	8004928 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800201c:	4b49      	ldr	r3, [pc, #292]	@ (8002144 <HAL_UART_MspInit+0x308>)
 800201e:	4a4a      	ldr	r2, [pc, #296]	@ (8002148 <HAL_UART_MspInit+0x30c>)
 8002020:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002022:	4b48      	ldr	r3, [pc, #288]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002024:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002028:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800202a:	4b46      	ldr	r3, [pc, #280]	@ (8002144 <HAL_UART_MspInit+0x308>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002030:	4b44      	ldr	r3, [pc, #272]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002036:	4b43      	ldr	r3, [pc, #268]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002038:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800203c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800203e:	4b41      	ldr	r3, [pc, #260]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002044:	4b3f      	ldr	r3, [pc, #252]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002046:	2200      	movs	r2, #0
 8002048:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800204a:	4b3e      	ldr	r3, [pc, #248]	@ (8002144 <HAL_UART_MspInit+0x308>)
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002050:	4b3c      	ldr	r3, [pc, #240]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800205c:	4839      	ldr	r0, [pc, #228]	@ (8002144 <HAL_UART_MspInit+0x308>)
 800205e:	f000 fe63 	bl	8002d28 <HAL_DMA_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002068:	f7ff f906 	bl	8001278 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a35      	ldr	r2, [pc, #212]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002070:	675a      	str	r2, [r3, #116]	@ 0x74
 8002072:	4a34      	ldr	r2, [pc, #208]	@ (8002144 <HAL_UART_MspInit+0x308>)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2105      	movs	r1, #5
 800207c:	2035      	movs	r0, #53	@ 0x35
 800207e:	f000 fd37 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002082:	2035      	movs	r0, #53	@ 0x35
 8002084:	f000 fd50 	bl	8002b28 <HAL_NVIC_EnableIRQ>
}
 8002088:	e049      	b.n	800211e <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <HAL_UART_MspInit+0x310>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d144      	bne.n	800211e <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002094:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800209a:	2300      	movs	r3, #0
 800209c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fa44 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_MspInit+0x276>
      Error_Handler();
 80020ae:	f7ff f8e3 	bl	8001278 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a17      	ldr	r2, [pc, #92]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_UART_MspInit+0x2f0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020fc:	2307      	movs	r3, #7
 80020fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002102:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002106:	4619      	mov	r1, r3
 8002108:	480d      	ldr	r0, [pc, #52]	@ (8002140 <HAL_UART_MspInit+0x304>)
 800210a:	f002 fc0d 	bl	8004928 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2105      	movs	r1, #5
 8002112:	2027      	movs	r0, #39	@ 0x27
 8002114:	f000 fcec 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002118:	2027      	movs	r0, #39	@ 0x27
 800211a:	f000 fd05 	bl	8002b28 <HAL_NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	37c0      	adds	r7, #192	@ 0xc0
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40004c00 	.word	0x40004c00
 800212c:	40023800 	.word	0x40023800
 8002130:	40020800 	.word	0x40020800
 8002134:	20000a94 	.word	0x20000a94
 8002138:	40026040 	.word	0x40026040
 800213c:	40005000 	.word	0x40005000
 8002140:	40020c00 	.word	0x40020c00
 8002144:	20000af4 	.word	0x20000af4
 8002148:	40026010 	.word	0x40026010
 800214c:	40004800 	.word	0x40004800

08002150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002188 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002154:	f7ff fce0 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002158:	480c      	ldr	r0, [pc, #48]	@ (800218c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215a:	490d      	ldr	r1, [pc, #52]	@ (8002190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002170:	4c0a      	ldr	r4, [pc, #40]	@ (800219c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800217e:	f01a fc15 	bl	801c9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002182:	f7fe ffd3 	bl	800112c <main>
  bx  lr    
 8002186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002188:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002194:	08021c00 	.word	0x08021c00
  ldr r2, =_sbss
 8002198:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800219c:	20022a50 	.word	0x20022a50

080021a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC_IRQHandler>

080021a2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <LAN8742_RegisterBusIO+0x28>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <LAN8742_RegisterBusIO+0x28>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <LAN8742_RegisterBusIO+0x28>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ce:	e014      	b.n	80021fa <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d139      	bne.n	8002296 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2220      	movs	r2, #32
 8002234:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	e01c      	b.n	8002276 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f107 020c 	add.w	r2, r7, #12
 8002244:	2112      	movs	r1, #18
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	4798      	blx	r3
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	da03      	bge.n	8002258 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002250:	f06f 0304 	mvn.w	r3, #4
 8002254:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002256:	e00b      	b.n	8002270 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	d105      	bne.n	8002270 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
         break;
 800226e:	e005      	b.n	800227c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b1f      	cmp	r3, #31
 800227a:	d9df      	bls.n	800223c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b1f      	cmp	r3, #31
 8002282:	d902      	bls.n	800228a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002284:	f06f 0302 	mvn.w	r3, #2
 8002288:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002296:	693b      	ldr	r3, [r7, #16]
 }
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6810      	ldr	r0, [r2, #0]
 80022b4:	f107 020c 	add.w	r2, r7, #12
 80022b8:	2101      	movs	r1, #1
 80022ba:	4798      	blx	r3
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da02      	bge.n	80022c8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022c2:	f06f 0304 	mvn.w	r3, #4
 80022c6:	e06e      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6810      	ldr	r0, [r2, #0]
 80022d0:	f107 020c 	add.w	r2, r7, #12
 80022d4:	2101      	movs	r1, #1
 80022d6:	4798      	blx	r3
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da02      	bge.n	80022e4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022de:	f06f 0304 	mvn.w	r3, #4
 80022e2:	e060      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e059      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6810      	ldr	r0, [r2, #0]
 80022fa:	f107 020c 	add.w	r2, r7, #12
 80022fe:	2100      	movs	r1, #0
 8002300:	4798      	blx	r3
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	da02      	bge.n	800230e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002308:	f06f 0304 	mvn.w	r3, #4
 800230c:	e04b      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d11b      	bne.n	8002350 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <LAN8742_GetLinkState+0x90>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800232c:	2302      	movs	r3, #2
 800232e:	e03a      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800233a:	2303      	movs	r3, #3
 800233c:	e033      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002348:	2304      	movs	r3, #4
 800234a:	e02c      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800234c:	2305      	movs	r3, #5
 800234e:	e02a      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6810      	ldr	r0, [r2, #0]
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	211f      	movs	r1, #31
 800235e:	4798      	blx	r3
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	da02      	bge.n	800236c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002366:	f06f 0304 	mvn.w	r3, #4
 800236a:	e01c      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002376:	2306      	movs	r3, #6
 8002378:	e015      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 031c 	and.w	r3, r3, #28
 8002380:	2b18      	cmp	r3, #24
 8002382:	d101      	bne.n	8002388 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002384:	2302      	movs	r3, #2
 8002386:	e00e      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 031c 	and.w	r3, r3, #28
 800238e:	2b08      	cmp	r3, #8
 8002390:	d101      	bne.n	8002396 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002392:	2303      	movs	r3, #3
 8002394:	e007      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 031c 	and.w	r3, r3, #28
 800239c:	2b14      	cmp	r3, #20
 800239e:	d101      	bne.n	80023a4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80023a0:	2304      	movs	r3, #4
 80023a2:	e000      	b.n	80023a6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80023a4:	2305      	movs	r3, #5
    }
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b2:	2003      	movs	r0, #3
 80023b4:	f000 fb91 	bl	8002ada <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b8:	200f      	movs	r0, #15
 80023ba:	f7ff f96f 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023be:	f7ff f945 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008
 80023ec:	20000b54 	.word	0x20000b54

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000b54 	.word	0x20000b54

08002408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002420:	d005      	beq.n	800242e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002422:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <HAL_Delay+0x44>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800242e:	bf00      	nop
 8002430:	f7ff ffde 	bl	80023f0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8f7      	bhi.n	8002430 <HAL_Delay+0x28>
  {
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000008 	.word	0x20000008

08002450 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e031      	b.n	80024ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f906 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <HAL_ADC_Init+0x84>)
 8002494:	4013      	ands	r3, r2
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f974 	bl	800278c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ba:	e001      	b.n	80024c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	ffffeefd 	.word	0xffffeefd

080024d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e13a      	b.n	800276a <HAL_ADC_ConfigChannel+0x292>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b09      	cmp	r3, #9
 8002502:	d93a      	bls.n	800257a <HAL_ADC_ConfigChannel+0xa2>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800250c:	d035      	beq.n	800257a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68d9      	ldr	r1, [r3, #12]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	3b1e      	subs	r3, #30
 8002524:	2207      	movs	r2, #7
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43da      	mvns	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	400a      	ands	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a8f      	ldr	r2, [pc, #572]	@ (8002778 <HAL_ADC_ConfigChannel+0x2a0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10a      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68d9      	ldr	r1, [r3, #12]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	061a      	lsls	r2, r3, #24
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002552:	e039      	b.n	80025c8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68d9      	ldr	r1, [r3, #12]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	4603      	mov	r3, r0
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4403      	add	r3, r0
 800256c:	3b1e      	subs	r3, #30
 800256e:	409a      	lsls	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002578:	e026      	b.n	80025c8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6919      	ldr	r1, [r3, #16]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	2207      	movs	r2, #7
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43da      	mvns	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	400a      	ands	r2, r1
 80025a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6919      	ldr	r1, [r3, #16]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	4603      	mov	r3, r0
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4403      	add	r3, r0
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	409a      	lsls	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d824      	bhi.n	800261a <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b05      	subs	r3, #5
 80025e2:	221f      	movs	r2, #31
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43da      	mvns	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	400a      	ands	r2, r1
 80025f0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	3b05      	subs	r3, #5
 800260c:	fa00 f203 	lsl.w	r2, r0, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	635a      	str	r2, [r3, #52]	@ 0x34
 8002618:	e04c      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d824      	bhi.n	800266c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b23      	subs	r3, #35	@ 0x23
 8002634:	221f      	movs	r2, #31
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	400a      	ands	r2, r1
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	3b23      	subs	r3, #35	@ 0x23
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
 800266a:	e023      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	@ 0x41
 800267e:	221f      	movs	r2, #31
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43da      	mvns	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	400a      	ands	r2, r1
 800268c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	4618      	mov	r0, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b41      	subs	r3, #65	@ 0x41
 80026a8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a30      	ldr	r2, [pc, #192]	@ (800277c <HAL_ADC_ConfigChannel+0x2a4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10a      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1fc>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026c6:	d105      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80026c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 80026ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80026d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a28      	ldr	r2, [pc, #160]	@ (800277c <HAL_ADC_ConfigChannel+0x2a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10f      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x226>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b12      	cmp	r3, #18
 80026e4:	d10b      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80026e6:	4b26      	ldr	r3, [pc, #152]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a25      	ldr	r2, [pc, #148]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 80026ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026f0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80026f2:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4a22      	ldr	r2, [pc, #136]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 80026f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1e      	ldr	r2, [pc, #120]	@ (800277c <HAL_ADC_ConfigChannel+0x2a4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d12b      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x288>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1a      	ldr	r2, [pc, #104]	@ (8002778 <HAL_ADC_ConfigChannel+0x2a0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <HAL_ADC_ConfigChannel+0x242>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b11      	cmp	r3, #17
 8002718:	d122      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800271a:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 8002720:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002724:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <HAL_ADC_ConfigChannel+0x2a8>)
 800272c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002730:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a10      	ldr	r2, [pc, #64]	@ (8002778 <HAL_ADC_ConfigChannel+0x2a0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d111      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800273c:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_ADC_ConfigChannel+0x2ac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a11      	ldr	r2, [pc, #68]	@ (8002788 <HAL_ADC_ConfigChannel+0x2b0>)
 8002742:	fba2 2303 	umull	r2, r3, r2, r3
 8002746:	0c9a      	lsrs	r2, r3, #18
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002752:	e002      	b.n	800275a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3b01      	subs	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f9      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	10000012 	.word	0x10000012
 800277c:	40012000 	.word	0x40012000
 8002780:	40012300 	.word	0x40012300
 8002784:	20000000 	.word	0x20000000
 8002788:	431bde83 	.word	0x431bde83

0800278c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002794:	4b78      	ldr	r3, [pc, #480]	@ (8002978 <ADC_Init+0x1ec>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a77      	ldr	r2, [pc, #476]	@ (8002978 <ADC_Init+0x1ec>)
 800279a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800279e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80027a0:	4b75      	ldr	r3, [pc, #468]	@ (8002978 <ADC_Init+0x1ec>)
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4973      	ldr	r1, [pc, #460]	@ (8002978 <ADC_Init+0x1ec>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	021a      	lsls	r2, r3, #8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6899      	ldr	r1, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	4a58      	ldr	r2, [pc, #352]	@ (800297c <ADC_Init+0x1f0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800282e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002850:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e00f      	b.n	8002886 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002884:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0202 	bic.w	r2, r2, #2
 8002894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	005a      	lsls	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	035a      	lsls	r2, r3, #13
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	e007      	b.n	80028fc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	3b01      	subs	r3, #1
 8002918:	051a      	lsls	r2, r3, #20
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002930:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800293e:	025a      	lsls	r2, r3, #9
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	029a      	lsls	r2, r3, #10
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40012300 	.word	0x40012300
 800297c:	0f000001 	.word	0x0f000001

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0b      	ldr	r3, [pc, #44]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029a8:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x40>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00
 80029c4:	05fa0000 	.word	0x05fa0000

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	@ (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	@ (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	@ (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	@ 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ff4c 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b02:	f7ff ff61 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	6978      	ldr	r0, [r7, #20]
 8002b0e:	f7ff ffb1 	bl	8002a74 <NVIC_EncodePriority>
 8002b12:	4602      	mov	r2, r0
 8002b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff80 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b20:	bf00      	nop
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff54 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e054      	b.n	8002c00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7f5b      	ldrb	r3, [r3, #29]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7fd fe1e 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	791b      	ldrb	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a22      	ldr	r2, [pc, #136]	@ (8002c08 <HAL_CRC_Init+0xc4>)
 8002b80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0218 	bic.w	r2, r2, #24
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	e00c      	b.n	8002bae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6899      	ldr	r1, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f834 	bl	8002c0c <HAL_CRCEx_Polynomial_Set>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e028      	b.n	8002c00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	795b      	ldrb	r3, [r3, #5]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bbe:	611a      	str	r2, [r3, #16]
 8002bc0:	e004      	b.n	8002bcc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6912      	ldr	r2, [r2, #16]
 8002bca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	04c11db7 	.word	0x04c11db7

08002c0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002c1c:	231f      	movs	r3, #31
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
 8002c2e:	e063      	b.n	8002cf8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002c30:	bf00      	nop
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	613a      	str	r2, [r7, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_CRCEx_Polynomial_Set+0x44>
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b18      	cmp	r3, #24
 8002c54:	d846      	bhi.n	8002ce4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002c56:	a201      	add	r2, pc, #4	@ (adr r2, 8002c5c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002ceb 	.word	0x08002ceb
 8002c60:	08002ce5 	.word	0x08002ce5
 8002c64:	08002ce5 	.word	0x08002ce5
 8002c68:	08002ce5 	.word	0x08002ce5
 8002c6c:	08002ce5 	.word	0x08002ce5
 8002c70:	08002ce5 	.word	0x08002ce5
 8002c74:	08002ce5 	.word	0x08002ce5
 8002c78:	08002ce5 	.word	0x08002ce5
 8002c7c:	08002cd9 	.word	0x08002cd9
 8002c80:	08002ce5 	.word	0x08002ce5
 8002c84:	08002ce5 	.word	0x08002ce5
 8002c88:	08002ce5 	.word	0x08002ce5
 8002c8c:	08002ce5 	.word	0x08002ce5
 8002c90:	08002ce5 	.word	0x08002ce5
 8002c94:	08002ce5 	.word	0x08002ce5
 8002c98:	08002ce5 	.word	0x08002ce5
 8002c9c:	08002ccd 	.word	0x08002ccd
 8002ca0:	08002ce5 	.word	0x08002ce5
 8002ca4:	08002ce5 	.word	0x08002ce5
 8002ca8:	08002ce5 	.word	0x08002ce5
 8002cac:	08002ce5 	.word	0x08002ce5
 8002cb0:	08002ce5 	.word	0x08002ce5
 8002cb4:	08002ce5 	.word	0x08002ce5
 8002cb8:	08002ce5 	.word	0x08002ce5
 8002cbc:	08002cc1 	.word	0x08002cc1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b06      	cmp	r3, #6
 8002cc4:	d913      	bls.n	8002cee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002cca:	e010      	b.n	8002cee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b07      	cmp	r3, #7
 8002cd0:	d90f      	bls.n	8002cf2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002cd6:	e00c      	b.n	8002cf2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b0f      	cmp	r3, #15
 8002cdc:	d90b      	bls.n	8002cf6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002ce2:	e008      	b.n	8002cf6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ce8:	e006      	b.n	8002cf8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002cea:	bf00      	nop
 8002cec:	e004      	b.n	8002cf8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002cf6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f023 0118 	bic.w	r1, r3, #24
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff fb5c 	bl	80023f0 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e099      	b.n	8002e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	e00f      	b.n	8002d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7ff fb43 	bl	80023f0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d908      	bls.n	8002d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e078      	b.n	8002e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e8      	bne.n	8002d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <HAL_DMA_Init+0x158>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de8:	4313      	orrs	r3, r2
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d117      	bne.n	8002e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fa89 	bl	8003344 <DMA_CheckFifoParam>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	@ 0x40
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e46:	2301      	movs	r3, #1
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa40 	bl	80032d8 <DMA_CalcBaseAndBitshift>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	223f      	movs	r2, #63	@ 0x3f
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	f010803f 	.word	0xf010803f

08002e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e92:	f7ff faad 	bl	80023f0 <HAL_GetTick>
 8002e96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d008      	beq.n	8002eb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2280      	movs	r2, #128	@ 0x80
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e052      	b.n	8002f5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0216 	bic.w	r2, r2, #22
 8002ec4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ed4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d103      	bne.n	8002ee6 <HAL_DMA_Abort+0x62>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0208 	bic.w	r2, r2, #8
 8002ef4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f06:	e013      	b.n	8002f30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f08:	f7ff fa72 	bl	80023f0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d90c      	bls.n	8002f30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e015      	b.n	8002f5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e4      	bne.n	8002f08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	223f      	movs	r2, #63	@ 0x3f
 8002f44:	409a      	lsls	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d004      	beq.n	8002f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2280      	movs	r2, #128	@ 0x80
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e00c      	b.n	8002f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2205      	movs	r2, #5
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002fb4:	4b8e      	ldr	r3, [pc, #568]	@ (80031f0 <HAL_DMA_IRQHandler+0x248>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a8e      	ldr	r2, [pc, #568]	@ (80031f4 <HAL_DMA_IRQHandler+0x24c>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	0a9b      	lsrs	r3, r3, #10
 8002fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01a      	beq.n	8003014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	2208      	movs	r2, #8
 8003002:	409a      	lsls	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300c:	f043 0201 	orr.w	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	2201      	movs	r2, #1
 8003038:	409a      	lsls	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	2204      	movs	r2, #4
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2204      	movs	r2, #4
 800306e:	409a      	lsls	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	2210      	movs	r2, #16
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d043      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d03c      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2210      	movs	r2, #16
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e01f      	b.n	8003118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e016      	b.n	8003118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0208 	bic.w	r2, r2, #8
 8003106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	2220      	movs	r2, #32
 800311e:	409a      	lsls	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 808f 	beq.w	8003248 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8087 	beq.w	8003248 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	2220      	movs	r2, #32
 8003140:	409a      	lsls	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b05      	cmp	r3, #5
 8003150:	d136      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0216 	bic.w	r2, r2, #22
 8003160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_DMA_IRQHandler+0x1da>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0208 	bic.w	r2, r2, #8
 8003190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	223f      	movs	r2, #63	@ 0x3f
 8003198:	409a      	lsls	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d07e      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
        }
        return;
 80031be:	e079      	b.n	80032b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01d      	beq.n	800320a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10d      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d031      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e02c      	b.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000
 80031f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d023      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
 8003208:	e01e      	b.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10f      	bne.n	8003238 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0210 	bic.w	r2, r2, #16
 8003226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324c:	2b00      	cmp	r3, #0
 800324e:	d032      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2205      	movs	r2, #5
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3301      	adds	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	d307      	bcc.n	8003290 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f2      	bne.n	8003274 <HAL_DMA_IRQHandler+0x2cc>
 800328e:	e000      	b.n	8003292 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003290:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
 80032b2:	e000      	b.n	80032b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032b4:	bf00      	nop
    }
  }
}
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032ca:	b2db      	uxtb	r3, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	3b10      	subs	r3, #16
 80032e8:	4a13      	ldr	r2, [pc, #76]	@ (8003338 <DMA_CalcBaseAndBitshift+0x60>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032f2:	4a12      	ldr	r2, [pc, #72]	@ (800333c <DMA_CalcBaseAndBitshift+0x64>)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d908      	bls.n	8003318 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <DMA_CalcBaseAndBitshift+0x68>)
 800330e:	4013      	ands	r3, r2
 8003310:	1d1a      	adds	r2, r3, #4
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	659a      	str	r2, [r3, #88]	@ 0x58
 8003316:	e006      	b.n	8003326 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	4b08      	ldr	r3, [pc, #32]	@ (8003340 <DMA_CalcBaseAndBitshift+0x68>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	aaaaaaab 	.word	0xaaaaaaab
 800333c:	080219a0 	.word	0x080219a0
 8003340:	fffffc00 	.word	0xfffffc00

08003344 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11f      	bne.n	800339e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d856      	bhi.n	8003412 <DMA_CheckFifoParam+0xce>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <DMA_CheckFifoParam+0x28>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	0800337d 	.word	0x0800337d
 8003370:	0800338f 	.word	0x0800338f
 8003374:	0800337d 	.word	0x0800337d
 8003378:	08003413 	.word	0x08003413
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d046      	beq.n	8003416 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338c:	e043      	b.n	8003416 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003396:	d140      	bne.n	800341a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800339c:	e03d      	b.n	800341a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a6:	d121      	bne.n	80033ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d837      	bhi.n	800341e <DMA_CheckFifoParam+0xda>
 80033ae:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <DMA_CheckFifoParam+0x70>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033cb 	.word	0x080033cb
 80033bc:	080033c5 	.word	0x080033c5
 80033c0:	080033dd 	.word	0x080033dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e030      	b.n	800342c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d025      	beq.n	8003422 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033da:	e022      	b.n	8003422 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033e4:	d11f      	bne.n	8003426 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ea:	e01c      	b.n	8003426 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d903      	bls.n	80033fa <DMA_CheckFifoParam+0xb6>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d003      	beq.n	8003400 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033f8:	e018      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      break;
 80033fe:	e015      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      break;
 8003410:	e00b      	b.n	800342a <DMA_CheckFifoParam+0xe6>
      break;
 8003412:	bf00      	nop
 8003414:	e00a      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e008      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800341a:	bf00      	nop
 800341c:	e006      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
 8003420:	e004      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;   
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <DMA_CheckFifoParam+0xe8>
      break;
 800342a:	bf00      	nop
    }
  } 
  
  return status; 
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e086      	b.n	800355c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f005 ff5b 	bl	800931c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	4b3f      	ldr	r3, [pc, #252]	@ (8003564 <HAL_ETH_Init+0x128>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	4a3e      	ldr	r2, [pc, #248]	@ (8003564 <HAL_ETH_Init+0x128>)
 800346c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003470:	6453      	str	r3, [r2, #68]	@ 0x44
 8003472:	4b3c      	ldr	r3, [pc, #240]	@ (8003564 <HAL_ETH_Init+0x128>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800347e:	4b3a      	ldr	r3, [pc, #232]	@ (8003568 <HAL_ETH_Init+0x12c>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4a39      	ldr	r2, [pc, #228]	@ (8003568 <HAL_ETH_Init+0x12c>)
 8003484:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003488:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800348a:	4b37      	ldr	r3, [pc, #220]	@ (8003568 <HAL_ETH_Init+0x12c>)
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4935      	ldr	r1, [pc, #212]	@ (8003568 <HAL_ETH_Init+0x12c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003498:	4b33      	ldr	r3, [pc, #204]	@ (8003568 <HAL_ETH_Init+0x12c>)
 800349a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034b4:	f7fe ff9c 	bl	80023f0 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034ba:	e011      	b.n	80034e0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80034bc:	f7fe ff98 	bl	80023f0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80034ca:	d909      	bls.n	80034e0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2204      	movs	r2, #4
 80034d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	22e0      	movs	r2, #224	@ 0xe0
 80034d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e03d      	b.n	800355c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e4      	bne.n	80034bc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 ff5c 	bl	80043b0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f001 f807 	bl	800450c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f001 f85d 	bl	80045be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	461a      	mov	r2, r3
 800350a:	2100      	movs	r1, #0
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 ffc5 	bl	800449c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003520:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b0f      	ldr	r3, [pc, #60]	@ (800356c <HAL_ETH_Init+0x130>)
 8003530:	430b      	orrs	r3, r1
 8003532:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003546:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2210      	movs	r2, #16
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	40013800 	.word	0x40013800
 800356c:	00020060 	.word	0x00020060

08003570 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800357e:	2b10      	cmp	r3, #16
 8003580:	d15f      	bne.n	8003642 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2204      	movs	r2, #4
 8003594:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9f6 	bl	8003988 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80035a4:	2001      	movs	r0, #1
 80035a6:	f7fe ff2f 	bl	8002408 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035c8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035e0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fd80 	bl	80040e8 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0208 	orr.w	r2, r2, #8
 80035f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003600:	2001      	movs	r0, #1
 8003602:	f7fe ff01 	bl	8002408 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0204 	orr.w	r2, r2, #4
 800361c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003626:	69d9      	ldr	r1, [r3, #28]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b07      	ldr	r3, [pc, #28]	@ (800364c <HAL_ETH_Start_IT+0xdc>)
 800362e:	430b      	orrs	r3, r1
 8003630:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003634:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	0001a0c1 	.word	0x0001a0c1

08003650 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365e:	2b40      	cmp	r3, #64	@ 0x40
 8003660:	d16e      	bne.n	8003740 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003672:	69d9      	ldr	r1, [r3, #28]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b34      	ldr	r3, [pc, #208]	@ (800374c <HAL_ETH_Stop_IT+0xfc>)
 800367a:	400b      	ands	r3, r1
 800367c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003680:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003694:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003698:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	f023 0302 	bic.w	r3, r3, #2
 80036ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036b0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0204 	bic.w	r2, r2, #4
 80036c0:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036ca:	2001      	movs	r0, #1
 80036cc:	f7fe fe9c 	bl	8002408 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fd05 	bl	80040e8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0208 	bic.w	r2, r2, #8
 80036ec:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f7fe fe86 	bl	8002408 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e00e      	b.n	8003728 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	3212      	adds	r2, #18
 8003710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003714:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3301      	adds	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d9ed      	bls.n	800370a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2210      	movs	r2, #16
 8003738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	fffe5f3e 	.word	0xfffe5f3e

08003750 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e045      	b.n	8003800 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800377a:	2b40      	cmp	r3, #64	@ 0x40
 800377c:	d13f      	bne.n	80037fe <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003786:	2201      	movs	r2, #1
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 ff86 	bl	800469c <ETH_Prepare_Tx_Descriptors>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	f043 0202 	orr.w	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e02a      	b.n	8003800 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037aa:	f3bf 8f4f 	dsb	sy
}
 80037ae:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d904      	bls.n	80037cc <HAL_ETH_Transmit_IT+0x7c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c6:	1f1a      	subs	r2, r3, #4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e6:	461a      	mov	r2, r3
 80037e8:	2304      	movs	r3, #4
 80037ea:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037f4:	461a      	mov	r2, r3
 80037f6:	2300      	movs	r3, #0
 80037f8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d109      	bne.n	8003834 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0a4      	b.n	800397e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383a:	2b40      	cmp	r3, #64	@ 0x40
 800383c:	d001      	beq.n	8003842 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e09d      	b.n	800397e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003846:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	3212      	adds	r2, #18
 800384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003852:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003858:	f1c3 0304 	rsb	r3, r3, #4
 800385c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800385e:	e066      	b.n	800392e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <HAL_ETH_ReadData+0x88>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d03c      	beq.n	800390a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80038b2:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80038c8:	2301      	movs	r3, #1
 80038ca:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f005 feeb 	bl	80096c4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	441a      	add	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2200      	movs	r2, #0
 8003908:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3301      	adds	r3, #1
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d902      	bls.n	800391c <HAL_ETH_ReadData+0x114>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3b04      	subs	r3, #4
 800391a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	3212      	adds	r2, #18
 8003922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003926:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3301      	adds	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003932:	2b00      	cmp	r3, #0
 8003934:	db06      	blt.n	8003944 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	429a      	cmp	r2, r3
 800393c:	d202      	bcs.n	8003944 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800393e:	7cfb      	ldrb	r3, [r7, #19]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d08d      	beq.n	8003860 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	441a      	add	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f815 	bl	8003988 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d108      	bne.n	800397c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003994:	2301      	movs	r3, #1
 8003996:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800399c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	3212      	adds	r2, #18
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80039b0:	e042      	b.n	8003a38 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d112      	bne.n	80039e0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	4618      	mov	r0, r3
 80039c0:	f005 fe50 	bl	8009664 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	74fb      	strb	r3, [r7, #19]
 80039ce:	e007      	b.n	80039e0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	461a      	mov	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	461a      	mov	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d028      	beq.n	8003a38 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <ETH_UpdateDescriptor+0x104>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	6053      	str	r3, [r2, #4]
 80039fa:	e005      	b.n	8003a08 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3301      	adds	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d902      	bls.n	8003a26 <ETH_UpdateDescriptor+0x9e>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	3b04      	subs	r3, #4
 8003a24:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	3212      	adds	r2, #18
 8003a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a30:	617b      	str	r3, [r7, #20]
      desccount--;
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <ETH_UpdateDescriptor+0xbc>
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1b6      	bne.n	80039b2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d01a      	beq.n	8003a84 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3303      	adds	r3, #3
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003a58:	f3bf 8f5f 	dmb	sy
}
 8003a5c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6919      	ldr	r1, [r3, #16]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	18ca      	adds	r2, r1, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a76:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	80004000 	.word	0x80004000

08003a90 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3318      	adds	r3, #24
 8003a9c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003aae:	e047      	b.n	8003b40 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3301      	adds	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d902      	bls.n	8003adc <HAL_ETH_ReleaseTxPacket+0x4c>
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	3b04      	subs	r3, #4
 8003ada:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003ae0:	7bbb      	ldrb	r3, [r7, #14]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d02c      	beq.n	8003b40 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68d9      	ldr	r1, [r3, #12]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	db1f      	blt.n	8003b3c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3304      	adds	r3, #4
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f005 fe1d 	bl	8009748 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	3304      	adds	r3, #4
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	2200      	movs	r2, #0
 8003b1a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d902      	bls.n	8003b2e <HAL_ETH_ReleaseTxPacket+0x9e>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b3a:	e001      	b.n	8003b40 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_ETH_ReleaseTxPacket+0xbc>
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1b1      	bne.n	8003ab0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b66:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003b80:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb0 <HAL_ETH_IRQHandler+0x158>)
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <HAL_ETH_IRQHandler+0x56>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b43      	ldr	r3, [pc, #268]	@ (8003cb4 <HAL_ETH_IRQHandler+0x15c>)
 8003ba6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f005 f8f7 	bl	8008d9c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00f      	beq.n	8003bd8 <HAL_ETH_IRQHandler+0x80>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003bd0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f005 f8f2 	bl	8008dbc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d042      	beq.n	8003c68 <HAL_ETH_IRQHandler+0x110>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d03d      	beq.n	8003c68 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f043 0208 	orr.w	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01a      	beq.n	8003c3c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <HAL_ETH_IRQHandler+0x160>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003c2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c30:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	22e0      	movs	r2, #224	@ 0xe0
 8003c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003c3a:	e012      	b.n	8003c62 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003c60:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f005 f8ba 	bl	8008ddc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00e      	beq.n	8003c90 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f81a 	bl	8003cbc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d006      	beq.n	8003ca8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003c9a:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <HAL_ETH_IRQHandler+0x158>)
 8003c9c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003ca0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f814 	bl	8003cd0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40013c00 	.word	0x40013c00
 8003cb4:	00010040 	.word	0x00010040
 8003cb8:	007e2000 	.word	0x007e2000

08003cbc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 031c 	and.w	r3, r3, #28
 8003d00:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	02db      	lsls	r3, r3, #11
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	019b      	lsls	r3, r3, #6
 8003d12:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0302 	bic.w	r3, r3, #2
 8003d22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003d34:	f7fe fb5c 	bl	80023f0 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d3a:	e00d      	b.n	8003d58 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003d3c:	f7fe fb58 	bl	80023f0 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4a:	d301      	bcc.n	8003d50 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e010      	b.n	8003d72 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ec      	bne.n	8003d3c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 031c 	and.w	r3, r3, #28
 8003d96:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	02db      	lsls	r3, r3, #11
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	019b      	lsls	r3, r3, #6
 8003da8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd4:	f7fe fb0c 	bl	80023f0 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003dda:	e00d      	b.n	8003df8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003ddc:	f7fe fb08 	bl	80023f0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dea:	d301      	bcc.n	8003df0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e009      	b.n	8003e04 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1ec      	bne.n	8003ddc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0e6      	b.n	8003fee <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bf14      	ite	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	2300      	moveq	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf14      	ite	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	2300      	moveq	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bf14      	ite	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	2300      	moveq	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 0304 	and.w	r3, r3, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf14      	ite	ne
 8003fc2:	2301      	movne	r3, #1
 8003fc4:	2300      	moveq	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e00b      	b.n	8004026 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004014:	2b10      	cmp	r3, #16
 8004016:	d105      	bne.n	8004024 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f88a 	bl	8004134 <ETH_SetMACConfig>

    return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e000      	b.n	8004026 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 031c 	bic.w	r3, r3, #28
 8004046:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004048:	f002 fa0c 	bl	8006464 <HAL_RCC_GetHCLKFreq>
 800404c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a14      	ldr	r2, [pc, #80]	@ (80040a4 <HAL_ETH_SetMDIOClockRange+0x74>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d804      	bhi.n	8004060 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f043 0308 	orr.w	r3, r3, #8
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	e019      	b.n	8004094 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4a11      	ldr	r2, [pc, #68]	@ (80040a8 <HAL_ETH_SetMDIOClockRange+0x78>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d204      	bcs.n	8004072 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f043 030c 	orr.w	r3, r3, #12
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	e010      	b.n	8004094 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4a0d      	ldr	r2, [pc, #52]	@ (80040ac <HAL_ETH_SetMDIOClockRange+0x7c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d90c      	bls.n	8004094 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	4a0c      	ldr	r2, [pc, #48]	@ (80040b0 <HAL_ETH_SetMDIOClockRange+0x80>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d804      	bhi.n	800408c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f043 0304 	orr.w	r3, r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e003      	b.n	8004094 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f043 0310 	orr.w	r3, r3, #16
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	611a      	str	r2, [r3, #16]
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	02160ebf 	.word	0x02160ebf
 80040a8:	03938700 	.word	0x03938700
 80040ac:	05f5e0ff 	.word	0x05f5e0ff
 80040b0:	08f0d17f 	.word	0x08f0d17f

080040b4 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004106:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800410a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004118:	2001      	movs	r0, #1
 800411a:	f7fe f975 	bl	8002408 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004128:	6193      	str	r3, [r2, #24]
}
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4b53      	ldr	r3, [pc, #332]	@ (8004298 <ETH_SetMACConfig+0x164>)
 800414a:	4013      	ands	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	7b9b      	ldrb	r3, [r3, #14]
 8004152:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	7c12      	ldrb	r2, [r2, #16]
 8004158:	2a00      	cmp	r2, #0
 800415a:	d102      	bne.n	8004162 <ETH_SetMACConfig+0x2e>
 800415c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004160:	e000      	b.n	8004164 <ETH_SetMACConfig+0x30>
 8004162:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004164:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	7c52      	ldrb	r2, [r2, #17]
 800416a:	2a00      	cmp	r2, #0
 800416c:	d102      	bne.n	8004174 <ETH_SetMACConfig+0x40>
 800416e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004172:	e000      	b.n	8004176 <ETH_SetMACConfig+0x42>
 8004174:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004176:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800417c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	7fdb      	ldrb	r3, [r3, #31]
 8004182:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004184:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800418a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	7f92      	ldrb	r2, [r2, #30]
 8004190:	2a00      	cmp	r2, #0
 8004192:	d102      	bne.n	800419a <ETH_SetMACConfig+0x66>
 8004194:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004198:	e000      	b.n	800419c <ETH_SetMACConfig+0x68>
 800419a:	2200      	movs	r2, #0
                        macconf->Speed |
 800419c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	7f1b      	ldrb	r3, [r3, #28]
 80041a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80041a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80041aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	791b      	ldrb	r3, [r3, #4]
 80041b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80041b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80041ba:	2a00      	cmp	r2, #0
 80041bc:	d102      	bne.n	80041c4 <ETH_SetMACConfig+0x90>
 80041be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041c2:	e000      	b.n	80041c6 <ETH_SetMACConfig+0x92>
 80041c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80041c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	7bdb      	ldrb	r3, [r3, #15]
 80041cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80041ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80041d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80041de:	4313      	orrs	r3, r2
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041f6:	2001      	movs	r0, #1
 80041f8:	f7fe f906 	bl	8002408 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004212:	4013      	ands	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004222:	2a00      	cmp	r2, #0
 8004224:	d101      	bne.n	800422a <ETH_SetMACConfig+0xf6>
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	e000      	b.n	800422c <ETH_SetMACConfig+0xf8>
 800422a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800422c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004232:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800423a:	2a01      	cmp	r2, #1
 800423c:	d101      	bne.n	8004242 <ETH_SetMACConfig+0x10e>
 800423e:	2208      	movs	r2, #8
 8004240:	e000      	b.n	8004244 <ETH_SetMACConfig+0x110>
 8004242:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004244:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800424c:	2a01      	cmp	r2, #1
 800424e:	d101      	bne.n	8004254 <ETH_SetMACConfig+0x120>
 8004250:	2204      	movs	r2, #4
 8004252:	e000      	b.n	8004256 <ETH_SetMACConfig+0x122>
 8004254:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004256:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800425e:	2a01      	cmp	r2, #1
 8004260:	d101      	bne.n	8004266 <ETH_SetMACConfig+0x132>
 8004262:	2202      	movs	r2, #2
 8004264:	e000      	b.n	8004268 <ETH_SetMACConfig+0x134>
 8004266:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004268:	4313      	orrs	r3, r2
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004280:	2001      	movs	r0, #1
 8004282:	f7fe f8c1 	bl	8002408 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	619a      	str	r2, [r3, #24]
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	fd20810f 	.word	0xfd20810f

0800429c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4b3d      	ldr	r3, [pc, #244]	@ (80043ac <ETH_SetDMAConfig+0x110>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	7b1b      	ldrb	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <ETH_SetDMAConfig+0x2c>
 80042c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80042c6:	e000      	b.n	80042ca <ETH_SetDMAConfig+0x2e>
 80042c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	7b5b      	ldrb	r3, [r3, #13]
 80042ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80042d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	7f52      	ldrb	r2, [r2, #29]
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d102      	bne.n	80042e0 <ETH_SetDMAConfig+0x44>
 80042da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80042de:	e000      	b.n	80042e2 <ETH_SetDMAConfig+0x46>
 80042e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80042e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	7b9b      	ldrb	r3, [r3, #14]
 80042e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80042ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80042f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	7f1b      	ldrb	r3, [r3, #28]
 80042f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80042f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	7f9b      	ldrb	r3, [r3, #30]
 80042fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004300:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004306:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800430e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004310:	4313      	orrs	r3, r2
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004320:	461a      	mov	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004332:	2001      	movs	r0, #1
 8004334:	f7fe f868 	bl	8002408 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004340:	461a      	mov	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	791b      	ldrb	r3, [r3, #4]
 800434a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004350:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004356:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800435c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004364:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004366:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800436e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004374:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800437e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004382:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004390:	2001      	movs	r0, #1
 8004392:	f7fe f839 	bl	8002408 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439e:	461a      	mov	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6013      	str	r3, [r2, #0]
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	f8de3f23 	.word	0xf8de3f23

080043b0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b0a6      	sub	sp, #152	@ 0x98
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80043c4:	2300      	movs	r3, #0
 80043c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80043f2:	2300      	movs	r3, #0
 80043f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004400:	2300      	movs	r3, #0
 8004402:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004406:	2300      	movs	r3, #0
 8004408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800440c:	2300      	movs	r3, #0
 800440e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004418:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800441c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800441e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004422:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004424:	2300      	movs	r3, #0
 8004426:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800442a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fe7f 	bl	8004134 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004436:	2301      	movs	r3, #1
 8004438:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800443a:	2301      	movs	r3, #1
 800443c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004444:	2301      	movs	r3, #1
 8004446:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004458:	2300      	movs	r3, #0
 800445a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800445c:	2301      	movs	r3, #1
 800445e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004462:	2301      	movs	r3, #1
 8004464:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004466:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800446a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800446c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004470:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004472:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004476:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800447e:	2300      	movs	r3, #0
 8004480:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004486:	f107 0308 	add.w	r3, r7, #8
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff ff05 	bl	800429c <ETH_SetDMAConfig>
}
 8004492:	bf00      	nop
 8004494:	3798      	adds	r7, #152	@ 0x98
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3305      	adds	r3, #5
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	3204      	adds	r2, #4
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <ETH_MACAddressConfig+0x68>)
 80044be:	4413      	add	r3, r2
 80044c0:	461a      	mov	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3303      	adds	r3, #3
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	061a      	lsls	r2, r3, #24
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3302      	adds	r3, #2
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3301      	adds	r3, #1
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	4313      	orrs	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <ETH_MACAddressConfig+0x6c>)
 80044ee:	4413      	add	r3, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	6013      	str	r3, [r2, #0]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40028040 	.word	0x40028040
 8004508:	40028044 	.word	0x40028044

0800450c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e03e      	b.n	8004598 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68d9      	ldr	r1, [r3, #12]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	440b      	add	r3, r1
 800452a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2200      	movs	r2, #0
 8004536:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	3206      	adds	r2, #6
 800454c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d80c      	bhi.n	800457c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68d9      	ldr	r1, [r3, #12]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	440b      	add	r3, r1
 8004574:	461a      	mov	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	e004      	b.n	8004586 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	461a      	mov	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3301      	adds	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d9bd      	bls.n	800451a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045b0:	611a      	str	r2, [r3, #16]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045be:	b480      	push	{r7}
 80045c0:	b085      	sub	sp, #20
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e048      	b.n	800465e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6919      	ldr	r1, [r3, #16]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	440b      	add	r3, r1
 80045dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2200      	movs	r2, #0
 80045fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2200      	movs	r2, #0
 8004600:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004608:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	3212      	adds	r2, #18
 800462a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d80c      	bhi.n	800464e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6919      	ldr	r1, [r3, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	440b      	add	r3, r1
 8004646:	461a      	mov	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	e004      	b.n	8004658 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d9b3      	bls.n	80045cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800468e:	60da      	str	r2, [r3, #12]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800469c:	b480      	push	{r7}
 800469e:	b091      	sub	sp, #68	@ 0x44
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3318      	adds	r3, #24
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80046d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046de:	d007      	beq.n	80046f0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80046e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e4:	3304      	adds	r3, #4
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80046f0:	2302      	movs	r3, #2
 80046f2:	e111      	b.n	8004918 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80046f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f6:	3301      	adds	r3, #1
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004702:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	4b86      	ldr	r3, [pc, #536]	@ (8004924 <ETH_Prepare_Tx_Descriptors+0x288>)
 800470a:	4013      	ands	r3, r2
 800470c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800470e:	6852      	ldr	r2, [r2, #4]
 8004710:	431a      	orrs	r2, r3
 8004712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004714:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	431a      	orrs	r2, r3
 8004730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004732:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0320 	and.w	r3, r3, #32
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	431a      	orrs	r2, r3
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800475e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004776:	e082      	b.n	800487e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e005      	b.n	80047a4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80047a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a6:	3301      	adds	r3, #1
 80047a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d902      	bls.n	80047b6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80047b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b2:	3b04      	subs	r3, #4
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047be:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047cc:	d007      	beq.n	80047de <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80047ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d2:	3304      	adds	r3, #4
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d029      	beq.n	8004832 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80047ec:	2300      	movs	r3, #0
 80047ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047f0:	e019      	b.n	8004826 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80047f2:	f3bf 8f5f 	dmb	sy
}
 80047f6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004806:	3301      	adds	r3, #1
 8004808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800480a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800480c:	2b03      	cmp	r3, #3
 800480e:	d902      	bls.n	8004816 <ETH_Prepare_Tx_Descriptors+0x17a>
 8004810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004812:	3b04      	subs	r3, #4
 8004814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800481a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004822:	3301      	adds	r3, #1
 8004824:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004826:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482a:	429a      	cmp	r2, r3
 800482c:	d3e1      	bcc.n	80047f2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800482e:	2302      	movs	r3, #2
 8004830:	e072      	b.n	8004918 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800483e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004840:	3301      	adds	r3, #1
 8004842:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800484a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4b32      	ldr	r3, [pc, #200]	@ (8004924 <ETH_Prepare_Tx_Descriptors+0x288>)
 800485a:	4013      	ands	r3, r2
 800485c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485e:	6852      	ldr	r2, [r2, #4]
 8004860:	431a      	orrs	r2, r3
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	3301      	adds	r3, #1
 800486a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800486c:	f3bf 8f5f 	dmb	sy
}
 8004870:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f47f af78 	bne.w	8004778 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e005      	b.n	80048a8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80048a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80048b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048bc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80048be:	f3bf 8f5f 	dmb	sy
}
 80048c2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ce:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d8:	3304      	adds	r3, #4
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048e4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ea:	613b      	str	r3, [r7, #16]
  return(result);
 80048ec:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80048ee:	61fb      	str	r3, [r7, #28]
 80048f0:	2301      	movs	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004902:	4413      	add	r3, r2
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	629a      	str	r2, [r3, #40]	@ 0x28
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3744      	adds	r7, #68	@ 0x44
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	ffffe000 	.word	0xffffe000

08004928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	@ 0x24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800493a:	2300      	movs	r3, #0
 800493c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800493e:	2300      	movs	r3, #0
 8004940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	e175      	b.n	8004c34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004948:	2201      	movs	r2, #1
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	429a      	cmp	r2, r3
 8004962:	f040 8164 	bne.w	8004c2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d005      	beq.n	800497e <HAL_GPIO_Init+0x56>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d130      	bne.n	80049e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	2203      	movs	r2, #3
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b4:	2201      	movs	r2, #1
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	091b      	lsrs	r3, r3, #4
 80049ca:	f003 0201 	and.w	r2, r3, #1
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d017      	beq.n	8004a1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	2203      	movs	r2, #3
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d123      	bne.n	8004a70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	08da      	lsrs	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3208      	adds	r2, #8
 8004a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	220f      	movs	r2, #15
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	08da      	lsrs	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3208      	adds	r2, #8
 8004a6a:	69b9      	ldr	r1, [r7, #24]
 8004a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	2203      	movs	r2, #3
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0203 	and.w	r2, r3, #3
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80be 	beq.w	8004c2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab2:	4b66      	ldr	r3, [pc, #408]	@ (8004c4c <HAL_GPIO_Init+0x324>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	4a65      	ldr	r2, [pc, #404]	@ (8004c4c <HAL_GPIO_Init+0x324>)
 8004ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004abe:	4b63      	ldr	r3, [pc, #396]	@ (8004c4c <HAL_GPIO_Init+0x324>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004aca:	4a61      	ldr	r2, [pc, #388]	@ (8004c50 <HAL_GPIO_Init+0x328>)
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	089b      	lsrs	r3, r3, #2
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	220f      	movs	r2, #15
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4013      	ands	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a58      	ldr	r2, [pc, #352]	@ (8004c54 <HAL_GPIO_Init+0x32c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d037      	beq.n	8004b66 <HAL_GPIO_Init+0x23e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a57      	ldr	r2, [pc, #348]	@ (8004c58 <HAL_GPIO_Init+0x330>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d031      	beq.n	8004b62 <HAL_GPIO_Init+0x23a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a56      	ldr	r2, [pc, #344]	@ (8004c5c <HAL_GPIO_Init+0x334>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02b      	beq.n	8004b5e <HAL_GPIO_Init+0x236>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a55      	ldr	r2, [pc, #340]	@ (8004c60 <HAL_GPIO_Init+0x338>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d025      	beq.n	8004b5a <HAL_GPIO_Init+0x232>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a54      	ldr	r2, [pc, #336]	@ (8004c64 <HAL_GPIO_Init+0x33c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01f      	beq.n	8004b56 <HAL_GPIO_Init+0x22e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a53      	ldr	r2, [pc, #332]	@ (8004c68 <HAL_GPIO_Init+0x340>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d019      	beq.n	8004b52 <HAL_GPIO_Init+0x22a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a52      	ldr	r2, [pc, #328]	@ (8004c6c <HAL_GPIO_Init+0x344>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_GPIO_Init+0x226>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a51      	ldr	r2, [pc, #324]	@ (8004c70 <HAL_GPIO_Init+0x348>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00d      	beq.n	8004b4a <HAL_GPIO_Init+0x222>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a50      	ldr	r2, [pc, #320]	@ (8004c74 <HAL_GPIO_Init+0x34c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <HAL_GPIO_Init+0x21e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4f      	ldr	r2, [pc, #316]	@ (8004c78 <HAL_GPIO_Init+0x350>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d101      	bne.n	8004b42 <HAL_GPIO_Init+0x21a>
 8004b3e:	2309      	movs	r3, #9
 8004b40:	e012      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b42:	230a      	movs	r3, #10
 8004b44:	e010      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b46:	2308      	movs	r3, #8
 8004b48:	e00e      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b4a:	2307      	movs	r3, #7
 8004b4c:	e00c      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b4e:	2306      	movs	r3, #6
 8004b50:	e00a      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b52:	2305      	movs	r3, #5
 8004b54:	e008      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b56:	2304      	movs	r3, #4
 8004b58:	e006      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e004      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e002      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_GPIO_Init+0x240>
 8004b66:	2300      	movs	r3, #0
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	f002 0203 	and.w	r2, r2, #3
 8004b6e:	0092      	lsls	r2, r2, #2
 8004b70:	4093      	lsls	r3, r2
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b78:	4935      	ldr	r1, [pc, #212]	@ (8004c50 <HAL_GPIO_Init+0x328>)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	3302      	adds	r3, #2
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b86:	4b3d      	ldr	r3, [pc, #244]	@ (8004c7c <HAL_GPIO_Init+0x354>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004baa:	4a34      	ldr	r2, [pc, #208]	@ (8004c7c <HAL_GPIO_Init+0x354>)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bb0:	4b32      	ldr	r3, [pc, #200]	@ (8004c7c <HAL_GPIO_Init+0x354>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bd4:	4a29      	ldr	r2, [pc, #164]	@ (8004c7c <HAL_GPIO_Init+0x354>)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bda:	4b28      	ldr	r3, [pc, #160]	@ (8004c7c <HAL_GPIO_Init+0x354>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8004c7c <HAL_GPIO_Init+0x354>)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <HAL_GPIO_Init+0x354>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c28:	4a14      	ldr	r2, [pc, #80]	@ (8004c7c <HAL_GPIO_Init+0x354>)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b0f      	cmp	r3, #15
 8004c38:	f67f ae86 	bls.w	8004948 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3724      	adds	r7, #36	@ 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40013800 	.word	0x40013800
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	40020800 	.word	0x40020800
 8004c60:	40020c00 	.word	0x40020c00
 8004c64:	40021000 	.word	0x40021000
 8004c68:	40021400 	.word	0x40021400
 8004c6c:	40021800 	.word	0x40021800
 8004c70:	40021c00 	.word	0x40021c00
 8004c74:	40022000 	.word	0x40022000
 8004c78:	40022400 	.word	0x40022400
 8004c7c:	40013c00 	.word	0x40013c00

08004c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e08b      	b.n	8004daa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc f88a 	bl	8000dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2224      	movs	r2, #36	@ 0x24
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004cd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ce0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d107      	bne.n	8004cfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cf6:	609a      	str	r2, [r3, #8]
 8004cf8:	e006      	b.n	8004d08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d108      	bne.n	8004d22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	e007      	b.n	8004d32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004db4 <HAL_I2C_Init+0x134>)
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69d9      	ldr	r1, [r3, #28]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1a      	ldr	r2, [r3, #32]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	02008000 	.word	0x02008000

08004db8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
  }
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d010      	beq.n	8004e32 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	09db      	lsrs	r3, r3, #7
 8004e14:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e20:	f043 0201 	orr.w	r2, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e30:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	0a9b      	lsrs	r3, r3, #10
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d010      	beq.n	8004e60 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	09db      	lsrs	r3, r3, #7
 8004e42:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	f043 0208 	orr.w	r2, r3, #8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e5e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	0a5b      	lsrs	r3, r3, #9
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d010      	beq.n	8004e8e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	09db      	lsrs	r3, r3, #7
 8004e70:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7c:	f043 0202 	orr.w	r2, r3, #2
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e8c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 030b 	and.w	r3, r3, #11
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fbeb 	bl	800567c <I2C_ITError>
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	70fb      	strb	r3, [r7, #3]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <I2C_Slave_ISR_IT+0x24>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e0ed      	b.n	800512e <I2C_Slave_ISR_IT+0x200>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f72:	6939      	ldr	r1, [r7, #16]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f9c1 	bl	80052fc <I2C_ITSlaveCplt>
 8004f7a:	e0d3      	b.n	8005124 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d04d      	beq.n	8005024 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	091b      	lsrs	r3, r3, #4
 8004f8c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d047      	beq.n	8005024 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d128      	bne.n	8004ff0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b28      	cmp	r3, #40	@ 0x28
 8004fa8:	d108      	bne.n	8004fbc <I2C_Slave_ISR_IT+0x8e>
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fb0:	d104      	bne.n	8004fbc <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fb2:	6939      	ldr	r1, [r7, #16]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fb0b 	bl	80055d0 <I2C_ITListenCplt>
 8004fba:	e032      	b.n	8005022 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b29      	cmp	r3, #41	@ 0x29
 8004fc6:	d10e      	bne.n	8004fe6 <I2C_Slave_ISR_IT+0xb8>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fce:	d00a      	beq.n	8004fe6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2210      	movs	r2, #16
 8004fd6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fc66 	bl	80058aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f92d 	bl	800523e <I2C_ITSlaveSeqCplt>
 8004fe4:	e01d      	b.n	8005022 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2210      	movs	r2, #16
 8004fec:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004fee:	e096      	b.n	800511e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffc:	f043 0204 	orr.w	r2, r3, #4
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <I2C_Slave_ISR_IT+0xe6>
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005010:	f040 8085 	bne.w	800511e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005018:	4619      	mov	r1, r3
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fb2e 	bl	800567c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005020:	e07d      	b.n	800511e <I2C_Slave_ISR_IT+0x1f0>
 8005022:	e07c      	b.n	800511e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	089b      	lsrs	r3, r3, #2
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d030      	beq.n	8005092 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02a      	beq.n	8005092 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d018      	beq.n	8005078 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d14f      	bne.n	8005122 <I2C_Slave_ISR_IT+0x1f4>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005088:	d04b      	beq.n	8005122 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f8d7 	bl	800523e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005090:	e047      	b.n	8005122 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	08db      	lsrs	r3, r3, #3
 80050a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050aa:	6939      	ldr	r1, [r7, #16]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f842 	bl	8005136 <I2C_ITAddrCplt>
 80050b2:	e037      	b.n	8005124 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d031      	beq.n	8005124 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d02b      	beq.n	8005124 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	781a      	ldrb	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005106:	e00d      	b.n	8005124 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800510e:	d002      	beq.n	8005116 <I2C_Slave_ISR_IT+0x1e8>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f891 	bl	800523e <I2C_ITSlaveSeqCplt>
 800511c:	e002      	b.n	8005124 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005122:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005146:	b2db      	uxtb	r3, r3
 8005148:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800514c:	2b28      	cmp	r3, #40	@ 0x28
 800514e:	d16a      	bne.n	8005226 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	0c1b      	lsrs	r3, r3, #16
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	0c1b      	lsrs	r3, r3, #16
 8005168:	b29b      	uxth	r3, r3
 800516a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800516e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800517c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800518a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d138      	bne.n	8005206 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005194:	897b      	ldrh	r3, [r7, #10]
 8005196:	09db      	lsrs	r3, r3, #7
 8005198:	b29a      	uxth	r2, r3
 800519a:	89bb      	ldrh	r3, [r7, #12]
 800519c:	4053      	eors	r3, r2
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f003 0306 	and.w	r3, r3, #6
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11c      	bne.n	80051e2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80051a8:	897b      	ldrh	r3, [r7, #10]
 80051aa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d13b      	bne.n	8005236 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2208      	movs	r2, #8
 80051ca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051d4:	89ba      	ldrh	r2, [r7, #12]
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fe7b 	bl	8004ed6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051e0:	e029      	b.n	8005236 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80051e2:	893b      	ldrh	r3, [r7, #8]
 80051e4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80051e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fb9f 	bl	800592e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051f8:	89ba      	ldrh	r2, [r7, #12]
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fe69 	bl	8004ed6 <HAL_I2C_AddrCallback>
}
 8005204:	e017      	b.n	8005236 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005206:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fb8f 	bl	800592e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005218:	89ba      	ldrh	r2, [r7, #12]
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	4619      	mov	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fe59 	bl	8004ed6 <HAL_I2C_AddrCallback>
}
 8005224:	e007      	b.n	8005236 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2208      	movs	r2, #8
 800522c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	0b9b      	lsrs	r3, r3, #14
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d008      	beq.n	8005274 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e00d      	b.n	8005290 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	0bdb      	lsrs	r3, r3, #15
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800528e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b29      	cmp	r3, #41	@ 0x29
 800529a:	d112      	bne.n	80052c2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2228      	movs	r2, #40	@ 0x28
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2221      	movs	r2, #33	@ 0x21
 80052a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052aa:	2101      	movs	r1, #1
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fb3e 	bl	800592e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fdf7 	bl	8004eae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052c0:	e017      	b.n	80052f2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80052cc:	d111      	bne.n	80052f2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2228      	movs	r2, #40	@ 0x28
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2222      	movs	r2, #34	@ 0x22
 80052da:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052dc:	2102      	movs	r1, #2
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fb25 	bl	800592e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff fde8 	bl	8004ec2 <HAL_I2C_SlaveRxCpltCallback>
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2220      	movs	r2, #32
 8005326:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005328:	7afb      	ldrb	r3, [r7, #11]
 800532a:	2b21      	cmp	r3, #33	@ 0x21
 800532c:	d002      	beq.n	8005334 <I2C_ITSlaveCplt+0x38>
 800532e:	7afb      	ldrb	r3, [r7, #11]
 8005330:	2b29      	cmp	r3, #41	@ 0x29
 8005332:	d108      	bne.n	8005346 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005334:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 faf8 	bl	800592e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2221      	movs	r2, #33	@ 0x21
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
 8005344:	e019      	b.n	800537a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	2b22      	cmp	r3, #34	@ 0x22
 800534a:	d002      	beq.n	8005352 <I2C_ITSlaveCplt+0x56>
 800534c:	7afb      	ldrb	r3, [r7, #11]
 800534e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005350:	d108      	bne.n	8005364 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005352:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fae9 	bl	800592e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2222      	movs	r2, #34	@ 0x22
 8005360:	631a      	str	r2, [r3, #48]	@ 0x30
 8005362:	e00a      	b.n	800537a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	2b28      	cmp	r3, #40	@ 0x28
 8005368:	d107      	bne.n	800537a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800536a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fadd 	bl	800592e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005388:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b8c      	ldr	r3, [pc, #560]	@ (80055c8 <I2C_ITSlaveCplt+0x2cc>)
 8005396:	400b      	ands	r3, r1
 8005398:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa85 	bl	80058aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	0b9b      	lsrs	r3, r3, #14
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053d2:	e018      	b.n	8005406 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	0bdb      	lsrs	r3, r3, #15
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d012      	beq.n	8005406 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	089b      	lsrs	r3, r3, #2
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d020      	beq.n	8005454 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0304 	bic.w	r3, r3, #4
 8005418:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00c      	beq.n	8005454 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005462:	f043 0204 	orr.w	r2, r3, #4
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d04a      	beq.n	800550c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	091b      	lsrs	r3, r3, #4
 800547a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800547e:	2b00      	cmp	r3, #0
 8005480:	d044      	beq.n	800550c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d128      	bne.n	80054de <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b28      	cmp	r3, #40	@ 0x28
 8005496:	d108      	bne.n	80054aa <I2C_ITSlaveCplt+0x1ae>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800549e:	d104      	bne.n	80054aa <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80054a0:	6979      	ldr	r1, [r7, #20]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f894 	bl	80055d0 <I2C_ITListenCplt>
 80054a8:	e030      	b.n	800550c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b29      	cmp	r3, #41	@ 0x29
 80054b4:	d10e      	bne.n	80054d4 <I2C_ITSlaveCplt+0x1d8>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054bc:	d00a      	beq.n	80054d4 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2210      	movs	r2, #16
 80054c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f9ef 	bl	80058aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff feb6 	bl	800523e <I2C_ITSlaveSeqCplt>
 80054d2:	e01b      	b.n	800550c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	61da      	str	r2, [r3, #28]
 80054dc:	e016      	b.n	800550c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2210      	movs	r2, #16
 80054e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f043 0204 	orr.w	r2, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <I2C_ITSlaveCplt+0x204>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054fe:	d105      	bne.n	800550c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f8b8 	bl	800567c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551e:	2b00      	cmp	r3, #0
 8005520:	d010      	beq.n	8005544 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f8a7 	bl	800567c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b28      	cmp	r3, #40	@ 0x28
 8005538:	d141      	bne.n	80055be <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800553a:	6979      	ldr	r1, [r7, #20]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f847 	bl	80055d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005542:	e03c      	b.n	80055be <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800554c:	d014      	beq.n	8005578 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff fe75 	bl	800523e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a1d      	ldr	r2, [pc, #116]	@ (80055cc <I2C_ITSlaveCplt+0x2d0>)
 8005558:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fcbe 	bl	8004ef2 <HAL_I2C_ListenCpltCallback>
}
 8005576:	e022      	b.n	80055be <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b22      	cmp	r3, #34	@ 0x22
 8005582:	d10e      	bne.n	80055a2 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fc91 	bl	8004ec2 <HAL_I2C_SlaveRxCpltCallback>
}
 80055a0:	e00d      	b.n	80055be <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff fc78 	bl	8004eae <HAL_I2C_SlaveTxCpltCallback>
}
 80055be:	bf00      	nop
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	fe00e800 	.word	0xfe00e800
 80055cc:	ffff0000 	.word	0xffff0000

080055d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a26      	ldr	r2, [pc, #152]	@ (8005678 <I2C_ITListenCplt+0xa8>)
 80055de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d022      	beq.n	800564e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d012      	beq.n	800564e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f043 0204 	orr.w	r2, r3, #4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800564e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f96b 	bl	800592e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2210      	movs	r2, #16
 800565e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fc42 	bl	8004ef2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	ffff0000 	.word	0xffff0000

0800567c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a6d      	ldr	r2, [pc, #436]	@ (8005850 <I2C_ITError+0x1d4>)
 800569a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b28      	cmp	r3, #40	@ 0x28
 80056b2:	d005      	beq.n	80056c0 <I2C_ITError+0x44>
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b29      	cmp	r3, #41	@ 0x29
 80056b8:	d002      	beq.n	80056c0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80056be:	d10b      	bne.n	80056d8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056c0:	2103      	movs	r1, #3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f933 	bl	800592e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2228      	movs	r2, #40	@ 0x28
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a60      	ldr	r2, [pc, #384]	@ (8005854 <I2C_ITError+0x1d8>)
 80056d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80056d6:	e030      	b.n	800573a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056d8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f926 	bl	800592e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f8e1 	bl	80058aa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b60      	cmp	r3, #96	@ 0x60
 80056f2:	d01f      	beq.n	8005734 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b20      	cmp	r3, #32
 8005708:	d114      	bne.n	8005734 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d109      	bne.n	800572c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2210      	movs	r2, #16
 800571e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005724:	f043 0204 	orr.w	r2, r3, #4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2220      	movs	r2, #32
 8005732:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005744:	2b00      	cmp	r3, #0
 8005746:	d039      	beq.n	80057bc <I2C_ITError+0x140>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b11      	cmp	r3, #17
 800574c:	d002      	beq.n	8005754 <I2C_ITError+0xd8>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b21      	cmp	r3, #33	@ 0x21
 8005752:	d133      	bne.n	80057bc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800575e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005762:	d107      	bne.n	8005774 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005772:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	4618      	mov	r0, r3
 800577a:	f7fd fd9f 	bl	80032bc <HAL_DMA_GetState>
 800577e:	4603      	mov	r3, r0
 8005780:	2b01      	cmp	r3, #1
 8005782:	d017      	beq.n	80057b4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	4a33      	ldr	r2, [pc, #204]	@ (8005858 <I2C_ITError+0x1dc>)
 800578a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005798:	4618      	mov	r0, r3
 800579a:	f7fd fbe3 	bl	8002f64 <HAL_DMA_Abort_IT>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d04d      	beq.n	8005840 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057ae:	4610      	mov	r0, r2
 80057b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057b2:	e045      	b.n	8005840 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f851 	bl	800585c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057ba:	e041      	b.n	8005840 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d039      	beq.n	8005838 <I2C_ITError+0x1bc>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b12      	cmp	r3, #18
 80057c8:	d002      	beq.n	80057d0 <I2C_ITError+0x154>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b22      	cmp	r3, #34	@ 0x22
 80057ce:	d133      	bne.n	8005838 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057de:	d107      	bne.n	80057f0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fd fd61 	bl	80032bc <HAL_DMA_GetState>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d017      	beq.n	8005830 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	4a14      	ldr	r2, [pc, #80]	@ (8005858 <I2C_ITError+0x1dc>)
 8005806:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	4618      	mov	r0, r3
 8005816:	f7fd fba5 	bl	8002f64 <HAL_DMA_Abort_IT>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d011      	beq.n	8005844 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800582a:	4610      	mov	r0, r2
 800582c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800582e:	e009      	b.n	8005844 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f813 	bl	800585c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005836:	e005      	b.n	8005844 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f80f 	bl	800585c <I2C_TreatErrorCallback>
  }
}
 800583e:	e002      	b.n	8005846 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005844:	bf00      	nop
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	ffff0000 	.word	0xffff0000
 8005854:	08004f2f 	.word	0x08004f2f
 8005858:	080058f3 	.word	0x080058f3

0800585c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b60      	cmp	r3, #96	@ 0x60
 800586e:	d10e      	bne.n	800588e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff fb47 	bl	8004f1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800588c:	e009      	b.n	80058a2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fb32 	bl	8004f06 <HAL_I2C_ErrorCallback>
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d103      	bne.n	80058c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2200      	movs	r2, #0
 80058c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d007      	beq.n	80058e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699a      	ldr	r2, [r3, #24]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	619a      	str	r2, [r3, #24]
  }
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590c:	2200      	movs	r2, #0
 800590e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	2200      	movs	r2, #0
 800591e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7ff ff9b 	bl	800585c <I2C_TreatErrorCallback>
}
 8005926:	bf00      	nop
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	460b      	mov	r3, r1
 8005938:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800593e:	887b      	ldrh	r3, [r7, #2]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00f      	beq.n	8005968 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800594e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800595c:	2b28      	cmp	r3, #40	@ 0x28
 800595e:	d003      	beq.n	8005968 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005966:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00f      	beq.n	8005992 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005978:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005986:	2b28      	cmp	r3, #40	@ 0x28
 8005988:	d003      	beq.n	8005992 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005990:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005992:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005996:	2b00      	cmp	r3, #0
 8005998:	da03      	bge.n	80059a2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d103      	bne.n	80059b0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80059ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80059b0:	887b      	ldrh	r3, [r7, #2]
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d103      	bne.n	80059be <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f043 0320 	orr.w	r3, r3, #32
 80059bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	2b40      	cmp	r3, #64	@ 0x40
 80059c2:	d103      	bne.n	80059cc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ca:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6819      	ldr	r1, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	43da      	mvns	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	400a      	ands	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b20      	cmp	r3, #32
 80059fe:	d138      	bne.n	8005a72 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e032      	b.n	8005a74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2224      	movs	r2, #36	@ 0x24
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a3c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6819      	ldr	r1, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0201 	orr.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d139      	bne.n	8005b0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e033      	b.n	8005b0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2224      	movs	r2, #36	@ 0x24
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0201 	bic.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ad2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f042 0201 	orr.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b22:	4b23      	ldr	r3, [pc, #140]	@ (8005bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	4a22      	ldr	r2, [pc, #136]	@ (8005bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b2e:	4b20      	ldr	r3, [pc, #128]	@ (8005bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b46:	f7fc fc53 	bl	80023f0 <HAL_GetTick>
 8005b4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b4c:	e009      	b.n	8005b62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b4e:	f7fc fc4f 	bl	80023f0 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b5c:	d901      	bls.n	8005b62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e022      	b.n	8005ba8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b62:	4b14      	ldr	r3, [pc, #80]	@ (8005bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6e:	d1ee      	bne.n	8005b4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b70:	4b10      	ldr	r3, [pc, #64]	@ (8005bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a0f      	ldr	r2, [pc, #60]	@ (8005bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b7c:	f7fc fc38 	bl	80023f0 <HAL_GetTick>
 8005b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b82:	e009      	b.n	8005b98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b84:	f7fc fc34 	bl	80023f0 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b92:	d901      	bls.n	8005b98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e007      	b.n	8005ba8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b98:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ba4:	d1ee      	bne.n	8005b84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	40007000 	.word	0x40007000

08005bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e291      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 8087 	beq.w	8005cea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bdc:	4b96      	ldr	r3, [pc, #600]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 030c 	and.w	r3, r3, #12
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d00c      	beq.n	8005c02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005be8:	4b93      	ldr	r3, [pc, #588]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 030c 	and.w	r3, r3, #12
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d112      	bne.n	8005c1a <HAL_RCC_OscConfig+0x62>
 8005bf4:	4b90      	ldr	r3, [pc, #576]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c00:	d10b      	bne.n	8005c1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c02:	4b8d      	ldr	r3, [pc, #564]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d06c      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x130>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d168      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e26b      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c22:	d106      	bne.n	8005c32 <HAL_RCC_OscConfig+0x7a>
 8005c24:	4b84      	ldr	r3, [pc, #528]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a83      	ldr	r2, [pc, #524]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	e02e      	b.n	8005c90 <HAL_RCC_OscConfig+0xd8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10c      	bne.n	8005c54 <HAL_RCC_OscConfig+0x9c>
 8005c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4b7c      	ldr	r3, [pc, #496]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a7b      	ldr	r2, [pc, #492]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	e01d      	b.n	8005c90 <HAL_RCC_OscConfig+0xd8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c5c:	d10c      	bne.n	8005c78 <HAL_RCC_OscConfig+0xc0>
 8005c5e:	4b76      	ldr	r3, [pc, #472]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a75      	ldr	r2, [pc, #468]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4b73      	ldr	r3, [pc, #460]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a72      	ldr	r2, [pc, #456]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e00b      	b.n	8005c90 <HAL_RCC_OscConfig+0xd8>
 8005c78:	4b6f      	ldr	r3, [pc, #444]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	4b6c      	ldr	r3, [pc, #432]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a6b      	ldr	r2, [pc, #428]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fc fbaa 	bl	80023f0 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca0:	f7fc fba6 	bl	80023f0 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b64      	cmp	r3, #100	@ 0x64
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e21f      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb2:	4b61      	ldr	r3, [pc, #388]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f0      	beq.n	8005ca0 <HAL_RCC_OscConfig+0xe8>
 8005cbe:	e014      	b.n	8005cea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fc fb96 	bl	80023f0 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc8:	f7fc fb92 	bl	80023f0 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b64      	cmp	r3, #100	@ 0x64
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e20b      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cda:	4b57      	ldr	r3, [pc, #348]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x110>
 8005ce6:	e000      	b.n	8005cea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d069      	beq.n	8005dca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cf6:	4b50      	ldr	r3, [pc, #320]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d02:	4b4d      	ldr	r3, [pc, #308]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 030c 	and.w	r3, r3, #12
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d11c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x190>
 8005d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d116      	bne.n	8005d48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d1a:	4b47      	ldr	r3, [pc, #284]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_RCC_OscConfig+0x17a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d001      	beq.n	8005d32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e1df      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d32:	4b41      	ldr	r3, [pc, #260]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	493d      	ldr	r1, [pc, #244]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d46:	e040      	b.n	8005dca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d023      	beq.n	8005d98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d50:	4b39      	ldr	r3, [pc, #228]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a38      	ldr	r2, [pc, #224]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fc fb48 	bl	80023f0 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d64:	f7fc fb44 	bl	80023f0 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e1bd      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d76:	4b30      	ldr	r3, [pc, #192]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d82:	4b2d      	ldr	r3, [pc, #180]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	4929      	ldr	r1, [pc, #164]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	600b      	str	r3, [r1, #0]
 8005d96:	e018      	b.n	8005dca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d98:	4b27      	ldr	r3, [pc, #156]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da4:	f7fc fb24 	bl	80023f0 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dac:	f7fc fb20 	bl	80023f0 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e199      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f0      	bne.n	8005dac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d038      	beq.n	8005e48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d019      	beq.n	8005e12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dde:	4b16      	ldr	r3, [pc, #88]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de2:	4a15      	ldr	r2, [pc, #84]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dea:	f7fc fb01 	bl	80023f0 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df2:	f7fc fafd 	bl	80023f0 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e176      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e04:	4b0c      	ldr	r3, [pc, #48]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x23a>
 8005e10:	e01a      	b.n	8005e48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e12:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e16:	4a08      	ldr	r2, [pc, #32]	@ (8005e38 <HAL_RCC_OscConfig+0x280>)
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1e:	f7fc fae7 	bl	80023f0 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e24:	e00a      	b.n	8005e3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e26:	f7fc fae3 	bl	80023f0 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d903      	bls.n	8005e3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e15c      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
 8005e38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e3c:	4b91      	ldr	r3, [pc, #580]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1ee      	bne.n	8005e26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80a4 	beq.w	8005f9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e56:	4b8b      	ldr	r3, [pc, #556]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e62:	4b88      	ldr	r3, [pc, #544]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	4a87      	ldr	r2, [pc, #540]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e6e:	4b85      	ldr	r3, [pc, #532]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e7e:	4b82      	ldr	r3, [pc, #520]	@ (8006088 <HAL_RCC_OscConfig+0x4d0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d118      	bne.n	8005ebc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8006088 <HAL_RCC_OscConfig+0x4d0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8006088 <HAL_RCC_OscConfig+0x4d0>)
 8005e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e96:	f7fc faab 	bl	80023f0 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e9e:	f7fc faa7 	bl	80023f0 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b64      	cmp	r3, #100	@ 0x64
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e120      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eb0:	4b75      	ldr	r3, [pc, #468]	@ (8006088 <HAL_RCC_OscConfig+0x4d0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d106      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x31a>
 8005ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005eca:	f043 0301 	orr.w	r3, r3, #1
 8005ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed0:	e02d      	b.n	8005f2e <HAL_RCC_OscConfig+0x376>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x33c>
 8005eda:	4b6a      	ldr	r3, [pc, #424]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ede:	4a69      	ldr	r2, [pc, #420]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee6:	4b67      	ldr	r3, [pc, #412]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eea:	4a66      	ldr	r2, [pc, #408]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005eec:	f023 0304 	bic.w	r3, r3, #4
 8005ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef2:	e01c      	b.n	8005f2e <HAL_RCC_OscConfig+0x376>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d10c      	bne.n	8005f16 <HAL_RCC_OscConfig+0x35e>
 8005efc:	4b61      	ldr	r3, [pc, #388]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f00:	4a60      	ldr	r2, [pc, #384]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	f043 0304 	orr.w	r3, r3, #4
 8005f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f08:	4b5e      	ldr	r3, [pc, #376]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0c:	4a5d      	ldr	r2, [pc, #372]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f14:	e00b      	b.n	8005f2e <HAL_RCC_OscConfig+0x376>
 8005f16:	4b5b      	ldr	r3, [pc, #364]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1a:	4a5a      	ldr	r2, [pc, #360]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f22:	4b58      	ldr	r3, [pc, #352]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f26:	4a57      	ldr	r2, [pc, #348]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f28:	f023 0304 	bic.w	r3, r3, #4
 8005f2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d015      	beq.n	8005f62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f36:	f7fc fa5b 	bl	80023f0 <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f7fc fa57 	bl	80023f0 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e0ce      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f54:	4b4b      	ldr	r3, [pc, #300]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ee      	beq.n	8005f3e <HAL_RCC_OscConfig+0x386>
 8005f60:	e014      	b.n	8005f8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7fc fa45 	bl	80023f0 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f68:	e00a      	b.n	8005f80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fc fa41 	bl	80023f0 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e0b8      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f80:	4b40      	ldr	r3, [pc, #256]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ee      	bne.n	8005f6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d105      	bne.n	8005f9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f92:	4b3c      	ldr	r3, [pc, #240]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	4a3b      	ldr	r2, [pc, #236]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f9c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 80a4 	beq.w	80060f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fa8:	4b36      	ldr	r3, [pc, #216]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 030c 	and.w	r3, r3, #12
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d06b      	beq.n	800608c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d149      	bne.n	8006050 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fbc:	4b31      	ldr	r3, [pc, #196]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a30      	ldr	r2, [pc, #192]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc8:	f7fc fa12 	bl	80023f0 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd0:	f7fc fa0e 	bl	80023f0 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e087      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe2:	4b28      	ldr	r3, [pc, #160]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	019b      	lsls	r3, r3, #6
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	3b01      	subs	r3, #1
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	4313      	orrs	r3, r2
 8006014:	4a1b      	ldr	r2, [pc, #108]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8006016:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800601a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800601c:	4b19      	ldr	r3, [pc, #100]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a18      	ldr	r2, [pc, #96]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8006022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fc f9e2 	bl	80023f0 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006030:	f7fc f9de 	bl	80023f0 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e057      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006042:	4b10      	ldr	r3, [pc, #64]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x478>
 800604e:	e04f      	b.n	80060f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006050:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a0b      	ldr	r2, [pc, #44]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8006056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800605a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fc f9c8 	bl	80023f0 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006064:	f7fc f9c4 	bl	80023f0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e03d      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006076:	4b03      	ldr	r3, [pc, #12]	@ (8006084 <HAL_RCC_OscConfig+0x4cc>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x4ac>
 8006082:	e035      	b.n	80060f0 <HAL_RCC_OscConfig+0x538>
 8006084:	40023800 	.word	0x40023800
 8006088:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800608c:	4b1b      	ldr	r3, [pc, #108]	@ (80060fc <HAL_RCC_OscConfig+0x544>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d028      	beq.n	80060ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d121      	bne.n	80060ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d11a      	bne.n	80060ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060bc:	4013      	ands	r3, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d111      	bne.n	80060ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	3b01      	subs	r3, #1
 80060d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	d107      	bne.n	80060ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40023800 	.word	0x40023800

08006100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e0d0      	b.n	80062ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006118:	4b6a      	ldr	r3, [pc, #424]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d910      	bls.n	8006148 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006126:	4b67      	ldr	r3, [pc, #412]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 020f 	bic.w	r2, r3, #15
 800612e:	4965      	ldr	r1, [pc, #404]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006136:	4b63      	ldr	r3, [pc, #396]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d001      	beq.n	8006148 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0b8      	b.n	80062ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d020      	beq.n	8006196 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006160:	4b59      	ldr	r3, [pc, #356]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4a58      	ldr	r2, [pc, #352]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 8006166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800616a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006178:	4b53      	ldr	r3, [pc, #332]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	4a52      	ldr	r2, [pc, #328]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 800617e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006182:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006184:	4b50      	ldr	r3, [pc, #320]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	494d      	ldr	r1, [pc, #308]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 8006192:	4313      	orrs	r3, r2
 8006194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d040      	beq.n	8006224 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d107      	bne.n	80061ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061aa:	4b47      	ldr	r3, [pc, #284]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d115      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e07f      	b.n	80062ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d107      	bne.n	80061d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c2:	4b41      	ldr	r3, [pc, #260]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e073      	b.n	80062ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d2:	4b3d      	ldr	r3, [pc, #244]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e06b      	b.n	80062ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061e2:	4b39      	ldr	r3, [pc, #228]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 0203 	bic.w	r2, r3, #3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4936      	ldr	r1, [pc, #216]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f4:	f7fc f8fc 	bl	80023f0 <HAL_GetTick>
 80061f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061fc:	f7fc f8f8 	bl	80023f0 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e053      	b.n	80062ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006212:	4b2d      	ldr	r3, [pc, #180]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 020c 	and.w	r2, r3, #12
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	429a      	cmp	r2, r3
 8006222:	d1eb      	bne.n	80061fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006224:	4b27      	ldr	r3, [pc, #156]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d210      	bcs.n	8006254 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b24      	ldr	r3, [pc, #144]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 020f 	bic.w	r2, r3, #15
 800623a:	4922      	ldr	r1, [pc, #136]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b20      	ldr	r3, [pc, #128]	@ (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d001      	beq.n	8006254 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e032      	b.n	80062ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006260:	4b19      	ldr	r3, [pc, #100]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4916      	ldr	r1, [pc, #88]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 800626e:	4313      	orrs	r3, r2
 8006270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800627e:	4b12      	ldr	r3, [pc, #72]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	490e      	ldr	r1, [pc, #56]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 800628e:	4313      	orrs	r3, r2
 8006290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006292:	f000 f821 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 8006296:	4602      	mov	r2, r0
 8006298:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	490a      	ldr	r1, [pc, #40]	@ (80062cc <HAL_RCC_ClockConfig+0x1cc>)
 80062a4:	5ccb      	ldrb	r3, [r1, r3]
 80062a6:	fa22 f303 	lsr.w	r3, r2, r3
 80062aa:	4a09      	ldr	r2, [pc, #36]	@ (80062d0 <HAL_RCC_ClockConfig+0x1d0>)
 80062ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062ae:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <HAL_RCC_ClockConfig+0x1d4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fb f9f2 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40023c00 	.word	0x40023c00
 80062c8:	40023800 	.word	0x40023800
 80062cc:	08021988 	.word	0x08021988
 80062d0:	20000000 	.word	0x20000000
 80062d4:	20000004 	.word	0x20000004

080062d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062dc:	b090      	sub	sp, #64	@ 0x40
 80062de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e4:	2300      	movs	r3, #0
 80062e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062e8:	2300      	movs	r3, #0
 80062ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062f0:	4b59      	ldr	r3, [pc, #356]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x180>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 030c 	and.w	r3, r3, #12
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d00d      	beq.n	8006318 <HAL_RCC_GetSysClockFreq+0x40>
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	f200 80a1 	bhi.w	8006444 <HAL_RCC_GetSysClockFreq+0x16c>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_RCC_GetSysClockFreq+0x34>
 8006306:	2b04      	cmp	r3, #4
 8006308:	d003      	beq.n	8006312 <HAL_RCC_GetSysClockFreq+0x3a>
 800630a:	e09b      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800630c:	4b53      	ldr	r3, [pc, #332]	@ (800645c <HAL_RCC_GetSysClockFreq+0x184>)
 800630e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006310:	e09b      	b.n	800644a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006312:	4b53      	ldr	r3, [pc, #332]	@ (8006460 <HAL_RCC_GetSysClockFreq+0x188>)
 8006314:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006316:	e098      	b.n	800644a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006318:	4b4f      	ldr	r3, [pc, #316]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x180>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006320:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006322:	4b4d      	ldr	r3, [pc, #308]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x180>)
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d028      	beq.n	8006380 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632e:	4b4a      	ldr	r3, [pc, #296]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x180>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	099b      	lsrs	r3, r3, #6
 8006334:	2200      	movs	r2, #0
 8006336:	623b      	str	r3, [r7, #32]
 8006338:	627a      	str	r2, [r7, #36]	@ 0x24
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006340:	2100      	movs	r1, #0
 8006342:	4b47      	ldr	r3, [pc, #284]	@ (8006460 <HAL_RCC_GetSysClockFreq+0x188>)
 8006344:	fb03 f201 	mul.w	r2, r3, r1
 8006348:	2300      	movs	r3, #0
 800634a:	fb00 f303 	mul.w	r3, r0, r3
 800634e:	4413      	add	r3, r2
 8006350:	4a43      	ldr	r2, [pc, #268]	@ (8006460 <HAL_RCC_GetSysClockFreq+0x188>)
 8006352:	fba0 1202 	umull	r1, r2, r0, r2
 8006356:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006358:	460a      	mov	r2, r1
 800635a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800635c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800635e:	4413      	add	r3, r2
 8006360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006364:	2200      	movs	r2, #0
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	61fa      	str	r2, [r7, #28]
 800636a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800636e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006372:	f7f9 ff9d 	bl	80002b0 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4613      	mov	r3, r2
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800637e:	e053      	b.n	8006428 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006380:	4b35      	ldr	r3, [pc, #212]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x180>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	099b      	lsrs	r3, r3, #6
 8006386:	2200      	movs	r2, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	617a      	str	r2, [r7, #20]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006392:	f04f 0b00 	mov.w	fp, #0
 8006396:	4652      	mov	r2, sl
 8006398:	465b      	mov	r3, fp
 800639a:	f04f 0000 	mov.w	r0, #0
 800639e:	f04f 0100 	mov.w	r1, #0
 80063a2:	0159      	lsls	r1, r3, #5
 80063a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a8:	0150      	lsls	r0, r2, #5
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	ebb2 080a 	subs.w	r8, r2, sl
 80063b2:	eb63 090b 	sbc.w	r9, r3, fp
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80063c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80063c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80063ca:	ebb2 0408 	subs.w	r4, r2, r8
 80063ce:	eb63 0509 	sbc.w	r5, r3, r9
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	00eb      	lsls	r3, r5, #3
 80063dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063e0:	00e2      	lsls	r2, r4, #3
 80063e2:	4614      	mov	r4, r2
 80063e4:	461d      	mov	r5, r3
 80063e6:	eb14 030a 	adds.w	r3, r4, sl
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	eb45 030b 	adc.w	r3, r5, fp
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063fe:	4629      	mov	r1, r5
 8006400:	028b      	lsls	r3, r1, #10
 8006402:	4621      	mov	r1, r4
 8006404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006408:	4621      	mov	r1, r4
 800640a:	028a      	lsls	r2, r1, #10
 800640c:	4610      	mov	r0, r2
 800640e:	4619      	mov	r1, r3
 8006410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006412:	2200      	movs	r2, #0
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	60fa      	str	r2, [r7, #12]
 8006418:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800641c:	f7f9 ff48 	bl	80002b0 <__aeabi_uldivmod>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4613      	mov	r3, r2
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006428:	4b0b      	ldr	r3, [pc, #44]	@ (8006458 <HAL_RCC_GetSysClockFreq+0x180>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	3301      	adds	r3, #1
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006438:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006442:	e002      	b.n	800644a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006444:	4b05      	ldr	r3, [pc, #20]	@ (800645c <HAL_RCC_GetSysClockFreq+0x184>)
 8006446:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800644a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800644c:	4618      	mov	r0, r3
 800644e:	3740      	adds	r7, #64	@ 0x40
 8006450:	46bd      	mov	sp, r7
 8006452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006456:	bf00      	nop
 8006458:	40023800 	.word	0x40023800
 800645c:	00f42400 	.word	0x00f42400
 8006460:	017d7840 	.word	0x017d7840

08006464 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006468:	4b03      	ldr	r3, [pc, #12]	@ (8006478 <HAL_RCC_GetHCLKFreq+0x14>)
 800646a:	681b      	ldr	r3, [r3, #0]
}
 800646c:	4618      	mov	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000000 	.word	0x20000000

0800647c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006480:	f7ff fff0 	bl	8006464 <HAL_RCC_GetHCLKFreq>
 8006484:	4602      	mov	r2, r0
 8006486:	4b05      	ldr	r3, [pc, #20]	@ (800649c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	0a9b      	lsrs	r3, r3, #10
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	4903      	ldr	r1, [pc, #12]	@ (80064a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006492:	5ccb      	ldrb	r3, [r1, r3]
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006498:	4618      	mov	r0, r3
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40023800 	.word	0x40023800
 80064a0:	08021998 	.word	0x08021998

080064a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064a8:	f7ff ffdc 	bl	8006464 <HAL_RCC_GetHCLKFreq>
 80064ac:	4602      	mov	r2, r0
 80064ae:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	0b5b      	lsrs	r3, r3, #13
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	4903      	ldr	r1, [pc, #12]	@ (80064c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ba:	5ccb      	ldrb	r3, [r1, r3]
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40023800 	.word	0x40023800
 80064c8:	08021998 	.word	0x08021998

080064cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	220f      	movs	r2, #15
 80064da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064dc:	4b12      	ldr	r3, [pc, #72]	@ (8006528 <HAL_RCC_GetClockConfig+0x5c>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 0203 	and.w	r2, r3, #3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006528 <HAL_RCC_GetClockConfig+0x5c>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <HAL_RCC_GetClockConfig+0x5c>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006500:	4b09      	ldr	r3, [pc, #36]	@ (8006528 <HAL_RCC_GetClockConfig+0x5c>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	08db      	lsrs	r3, r3, #3
 8006506:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800650e:	4b07      	ldr	r3, [pc, #28]	@ (800652c <HAL_RCC_GetClockConfig+0x60>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 020f 	and.w	r2, r3, #15
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	601a      	str	r2, [r3, #0]
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40023800 	.word	0x40023800
 800652c:	40023c00 	.word	0x40023c00

08006530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d012      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006558:	4b69      	ldr	r3, [pc, #420]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	4a68      	ldr	r2, [pc, #416]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006562:	6093      	str	r3, [r2, #8]
 8006564:	4b66      	ldr	r3, [pc, #408]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656c:	4964      	ldr	r1, [pc, #400]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656e:	4313      	orrs	r3, r2
 8006570:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800657a:	2301      	movs	r3, #1
 800657c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d017      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800658a:	4b5d      	ldr	r3, [pc, #372]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800658c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006590:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006598:	4959      	ldr	r1, [pc, #356]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065a8:	d101      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80065b6:	2301      	movs	r3, #1
 80065b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d017      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	494a      	ldr	r1, [pc, #296]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065e4:	d101      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80065e6:	2301      	movs	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80065f2:	2301      	movs	r3, #1
 80065f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006602:	2301      	movs	r3, #1
 8006604:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 808b 	beq.w	800672a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006614:	4b3a      	ldr	r3, [pc, #232]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006618:	4a39      	ldr	r2, [pc, #228]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800661a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006620:	4b37      	ldr	r3, [pc, #220]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800662c:	4b35      	ldr	r3, [pc, #212]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a34      	ldr	r2, [pc, #208]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006638:	f7fb feda 	bl	80023f0 <HAL_GetTick>
 800663c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006640:	f7fb fed6 	bl	80023f0 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	@ 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e357      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006652:	4b2c      	ldr	r3, [pc, #176]	@ (8006704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800665e:	4b28      	ldr	r3, [pc, #160]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006666:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d035      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	429a      	cmp	r2, r3
 800667a:	d02e      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800667c:	4b20      	ldr	r3, [pc, #128]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006684:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006686:	4b1e      	ldr	r3, [pc, #120]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668a:	4a1d      	ldr	r2, [pc, #116]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006690:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006692:	4b1b      	ldr	r3, [pc, #108]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006696:	4a1a      	ldr	r2, [pc, #104]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800669c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800669e:	4a18      	ldr	r2, [pc, #96]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066a4:	4b16      	ldr	r3, [pc, #88]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d114      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b0:	f7fb fe9e 	bl	80023f0 <HAL_GetTick>
 80066b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b6:	e00a      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b8:	f7fb fe9a 	bl	80023f0 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e319      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0ee      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066e6:	d111      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80066e8:	4b05      	ldr	r3, [pc, #20]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80066f4:	4b04      	ldr	r3, [pc, #16]	@ (8006708 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066f6:	400b      	ands	r3, r1
 80066f8:	4901      	ldr	r1, [pc, #4]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
 80066fe:	e00b      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006700:	40023800 	.word	0x40023800
 8006704:	40007000 	.word	0x40007000
 8006708:	0ffffcff 	.word	0x0ffffcff
 800670c:	4baa      	ldr	r3, [pc, #680]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	4aa9      	ldr	r2, [pc, #676]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006712:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006716:	6093      	str	r3, [r2, #8]
 8006718:	4ba7      	ldr	r3, [pc, #668]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800671a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006724:	49a4      	ldr	r1, [pc, #656]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006726:	4313      	orrs	r3, r2
 8006728:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0310 	and.w	r3, r3, #16
 8006732:	2b00      	cmp	r3, #0
 8006734:	d010      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006736:	4ba0      	ldr	r3, [pc, #640]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800673c:	4a9e      	ldr	r2, [pc, #632]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800673e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006742:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006746:	4b9c      	ldr	r3, [pc, #624]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006748:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	4999      	ldr	r1, [pc, #612]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006764:	4b94      	ldr	r3, [pc, #592]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006772:	4991      	ldr	r1, [pc, #580]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006786:	4b8c      	ldr	r3, [pc, #560]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006794:	4988      	ldr	r1, [pc, #544]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067a8:	4b83      	ldr	r3, [pc, #524]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b6:	4980      	ldr	r1, [pc, #512]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067ca:	4b7b      	ldr	r3, [pc, #492]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d8:	4977      	ldr	r1, [pc, #476]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067ec:	4b72      	ldr	r3, [pc, #456]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	f023 0203 	bic.w	r2, r3, #3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	496f      	ldr	r1, [pc, #444]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800680e:	4b6a      	ldr	r3, [pc, #424]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006814:	f023 020c 	bic.w	r2, r3, #12
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800681c:	4966      	ldr	r1, [pc, #408]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006830:	4b61      	ldr	r3, [pc, #388]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006836:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800683e:	495e      	ldr	r1, [pc, #376]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006852:	4b59      	ldr	r3, [pc, #356]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006858:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006860:	4955      	ldr	r1, [pc, #340]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006874:	4b50      	ldr	r3, [pc, #320]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006882:	494d      	ldr	r1, [pc, #308]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006896:	4b48      	ldr	r3, [pc, #288]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a4:	4944      	ldr	r1, [pc, #272]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80068b8:	4b3f      	ldr	r3, [pc, #252]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c6:	493c      	ldr	r1, [pc, #240]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80068da:	4b37      	ldr	r3, [pc, #220]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e8:	4933      	ldr	r1, [pc, #204]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068fc:	4b2e      	ldr	r3, [pc, #184]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006902:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800690a:	492b      	ldr	r1, [pc, #172]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800690c:	4313      	orrs	r3, r2
 800690e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d011      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800691e:	4b26      	ldr	r3, [pc, #152]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006924:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800692c:	4922      	ldr	r1, [pc, #136]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006938:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800693c:	d101      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800693e:	2301      	movs	r3, #1
 8006940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800694e:	2301      	movs	r3, #1
 8006950:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800695e:	4b16      	ldr	r3, [pc, #88]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006964:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800696c:	4912      	ldr	r1, [pc, #72]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800696e:	4313      	orrs	r3, r2
 8006970:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006980:	4b0d      	ldr	r3, [pc, #52]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006986:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006990:	4909      	ldr	r1, [pc, #36]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006992:	4313      	orrs	r3, r2
 8006994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d006      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 80d9 	beq.w	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069ac:	4b02      	ldr	r3, [pc, #8]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a01      	ldr	r2, [pc, #4]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069b6:	e001      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80069b8:	40023800 	.word	0x40023800
 80069bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069be:	f7fb fd17 	bl	80023f0 <HAL_GetTick>
 80069c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069c4:	e008      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069c6:	f7fb fd13 	bl	80023f0 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b64      	cmp	r3, #100	@ 0x64
 80069d2:	d901      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e194      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069d8:	4b6c      	ldr	r3, [pc, #432]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1f0      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d021      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d11d      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069f8:	4b64      	ldr	r3, [pc, #400]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a06:	4b61      	ldr	r3, [pc, #388]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0c:	0e1b      	lsrs	r3, r3, #24
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	019a      	lsls	r2, r3, #6
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	061b      	lsls	r3, r3, #24
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	071b      	lsls	r3, r3, #28
 8006a2c:	4957      	ldr	r1, [pc, #348]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d004      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a48:	d00a      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d02e      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a5e:	d129      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a60:	4b4a      	ldr	r3, [pc, #296]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a66:	0c1b      	lsrs	r3, r3, #16
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a6e:	4b47      	ldr	r3, [pc, #284]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a74:	0f1b      	lsrs	r3, r3, #28
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	019a      	lsls	r2, r3, #6
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	041b      	lsls	r3, r3, #16
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	061b      	lsls	r3, r3, #24
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	071b      	lsls	r3, r3, #28
 8006a94:	493d      	ldr	r1, [pc, #244]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aa2:	f023 021f 	bic.w	r2, r3, #31
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	4937      	ldr	r1, [pc, #220]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01d      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ac0:	4b32      	ldr	r3, [pc, #200]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ac6:	0e1b      	lsrs	r3, r3, #24
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ace:	4b2f      	ldr	r3, [pc, #188]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad4:	0f1b      	lsrs	r3, r3, #28
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	019a      	lsls	r2, r3, #6
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	061b      	lsls	r3, r3, #24
 8006aee:	431a      	orrs	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	071b      	lsls	r3, r3, #28
 8006af4:	4925      	ldr	r1, [pc, #148]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d011      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	019a      	lsls	r2, r3, #6
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	041b      	lsls	r3, r3, #16
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	061b      	lsls	r3, r3, #24
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	071b      	lsls	r3, r3, #28
 8006b24:	4919      	ldr	r1, [pc, #100]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b2c:	4b17      	ldr	r3, [pc, #92]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b38:	f7fb fc5a 	bl	80023f0 <HAL_GetTick>
 8006b3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b40:	f7fb fc56 	bl	80023f0 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b64      	cmp	r3, #100	@ 0x64
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e0d7      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b52:	4b0e      	ldr	r3, [pc, #56]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0f0      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	f040 80cd 	bne.w	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b66:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a08      	ldr	r2, [pc, #32]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b72:	f7fb fc3d 	bl	80023f0 <HAL_GetTick>
 8006b76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b78:	e00a      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b7a:	f7fb fc39 	bl	80023f0 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b64      	cmp	r3, #100	@ 0x64
 8006b86:	d903      	bls.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e0ba      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006b8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b90:	4b5e      	ldr	r3, [pc, #376]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b9c:	d0ed      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d02e      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d12a      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006bc6:	4b51      	ldr	r3, [pc, #324]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bda:	0f1b      	lsrs	r3, r3, #28
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	019a      	lsls	r2, r3, #6
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	061b      	lsls	r3, r3, #24
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	071b      	lsls	r3, r3, #28
 8006bfa:	4944      	ldr	r1, [pc, #272]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c02:	4b42      	ldr	r3, [pc, #264]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	3b01      	subs	r3, #1
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	493d      	ldr	r1, [pc, #244]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d022      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c30:	d11d      	bne.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c32:	4b36      	ldr	r3, [pc, #216]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c38:	0e1b      	lsrs	r3, r3, #24
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c40:	4b32      	ldr	r3, [pc, #200]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c46:	0f1b      	lsrs	r3, r3, #28
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	019a      	lsls	r2, r3, #6
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	041b      	lsls	r3, r3, #16
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	061b      	lsls	r3, r3, #24
 8006c60:	431a      	orrs	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	071b      	lsls	r3, r3, #28
 8006c66:	4929      	ldr	r1, [pc, #164]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d028      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c7a:	4b24      	ldr	r3, [pc, #144]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c80:	0e1b      	lsrs	r3, r3, #24
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c88:	4b20      	ldr	r3, [pc, #128]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8e:	0c1b      	lsrs	r3, r3, #16
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	019a      	lsls	r2, r3, #6
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	061b      	lsls	r3, r3, #24
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	071b      	lsls	r3, r3, #28
 8006cae:	4917      	ldr	r1, [pc, #92]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006cb6:	4b15      	ldr	r3, [pc, #84]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	4911      	ldr	r1, [pc, #68]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd8:	f7fb fb8a 	bl	80023f0 <HAL_GetTick>
 8006cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ce0:	f7fb fb86 	bl	80023f0 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b64      	cmp	r3, #100	@ 0x64
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e007      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cf2:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cfe:	d1ef      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40023800 	.word	0x40023800

08006d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e09d      	b.n	8006e5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d108      	bne.n	8006d3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d32:	d009      	beq.n	8006d48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	61da      	str	r2, [r3, #28]
 8006d3a:	e005      	b.n	8006d48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7fa fb04 	bl	8001370 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d88:	d902      	bls.n	8006d90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e002      	b.n	8006d96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d9e:	d007      	beq.n	8006db0 <HAL_SPI_Init+0xa0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006da8:	d002      	beq.n	8006db0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df2:	ea42 0103 	orr.w	r1, r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	f003 0204 	and.w	r2, r3, #4
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e2c:	ea42 0103 	orr.w	r1, r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69da      	ldr	r2, [r3, #28]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	099b      	lsrs	r3, r3, #6
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10f      	bne.n	8006eac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	099b      	lsrs	r3, r3, #6
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
    return;
 8006eaa:	e0d7      	b.n	800705c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_SPI_IRQHandler+0x66>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	09db      	lsrs	r3, r3, #7
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
    return;
 8006ecc:	e0c6      	b.n	800705c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_SPI_IRQHandler+0x8c>
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	099b      	lsrs	r3, r3, #6
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80b4 	beq.w	800705c <HAL_SPI_IRQHandler+0x1f4>
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80ad 	beq.w	800705c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	099b      	lsrs	r3, r3, #6
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d023      	beq.n	8006f56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d011      	beq.n	8006f3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f1e:	f043 0204 	orr.w	r2, r3, #4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f26:	2300      	movs	r3, #0
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	617b      	str	r3, [r7, #20]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	e00b      	b.n	8006f56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	693b      	ldr	r3, [r7, #16]
        return;
 8006f54:	e082      	b.n	800705c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d014      	beq.n	8006f8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f66:	f043 0201 	orr.w	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00c      	beq.n	8006fb2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f9c:	f043 0208 	orr.w	r2, r3, #8
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60bb      	str	r3, [r7, #8]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d04f      	beq.n	800705a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <HAL_SPI_IRQHandler+0x17e>
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d034      	beq.n	8007050 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0203 	bic.w	r2, r2, #3
 8006ff4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d011      	beq.n	8007022 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007002:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <HAL_SPI_IRQHandler+0x1fc>)
 8007004:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700a:	4618      	mov	r0, r3
 800700c:	f7fb ffaa 	bl	8002f64 <HAL_DMA_Abort_IT>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800701a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007026:	2b00      	cmp	r3, #0
 8007028:	d016      	beq.n	8007058 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800702e:	4a0d      	ldr	r2, [pc, #52]	@ (8007064 <HAL_SPI_IRQHandler+0x1fc>)
 8007030:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007036:	4618      	mov	r0, r3
 8007038:	f7fb ff94 	bl	8002f64 <HAL_DMA_Abort_IT>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007046:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800704e:	e003      	b.n	8007058 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f809 	bl	8007068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007056:	e000      	b.n	800705a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007058:	bf00      	nop
    return;
 800705a:	bf00      	nop
  }
}
 800705c:	3720      	adds	r7, #32
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	0800707d 	.word	0x0800707d

08007068 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff ffe5 	bl	8007068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e049      	b.n	800714c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7fa fdb9 	bl	8001c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f000 faa7 	bl	8007638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	d001      	beq.n	800716c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e054      	b.n	8007216 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a26      	ldr	r2, [pc, #152]	@ (8007224 <HAL_TIM_Base_Start_IT+0xd0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d022      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007196:	d01d      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a22      	ldr	r2, [pc, #136]	@ (8007228 <HAL_TIM_Base_Start_IT+0xd4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a21      	ldr	r2, [pc, #132]	@ (800722c <HAL_TIM_Base_Start_IT+0xd8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007230 <HAL_TIM_Base_Start_IT+0xdc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007234 <HAL_TIM_Base_Start_IT+0xe0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007238 <HAL_TIM_Base_Start_IT+0xe4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_TIM_Base_Start_IT+0x80>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1b      	ldr	r2, [pc, #108]	@ (800723c <HAL_TIM_Base_Start_IT+0xe8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d115      	bne.n	8007200 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	4b19      	ldr	r3, [pc, #100]	@ (8007240 <HAL_TIM_Base_Start_IT+0xec>)
 80071dc:	4013      	ands	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b06      	cmp	r3, #6
 80071e4:	d015      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0xbe>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ec:	d011      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fe:	e008      	b.n	8007212 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0201 	orr.w	r2, r2, #1
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e000      	b.n	8007214 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40010000 	.word	0x40010000
 8007228:	40000400 	.word	0x40000400
 800722c:	40000800 	.word	0x40000800
 8007230:	40000c00 	.word	0x40000c00
 8007234:	40010400 	.word	0x40010400
 8007238:	40014000 	.word	0x40014000
 800723c:	40001800 	.word	0x40001800
 8007240:	00010007 	.word	0x00010007

08007244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d020      	beq.n	80072a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01b      	beq.n	80072a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0202 	mvn.w	r2, #2
 8007278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9b4 	bl	80075fc <HAL_TIM_IC_CaptureCallback>
 8007294:	e005      	b.n	80072a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f9a6 	bl	80075e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f9b7 	bl	8007610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d020      	beq.n	80072f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01b      	beq.n	80072f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0204 	mvn.w	r2, #4
 80072c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f98e 	bl	80075fc <HAL_TIM_IC_CaptureCallback>
 80072e0:	e005      	b.n	80072ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f980 	bl	80075e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f991 	bl	8007610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d020      	beq.n	8007340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01b      	beq.n	8007340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0208 	mvn.w	r2, #8
 8007310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2204      	movs	r2, #4
 8007316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f003 0303 	and.w	r3, r3, #3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f968 	bl	80075fc <HAL_TIM_IC_CaptureCallback>
 800732c:	e005      	b.n	800733a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f95a 	bl	80075e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f96b 	bl	8007610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f003 0310 	and.w	r3, r3, #16
 8007346:	2b00      	cmp	r3, #0
 8007348:	d020      	beq.n	800738c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01b      	beq.n	800738c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0210 	mvn.w	r2, #16
 800735c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2208      	movs	r2, #8
 8007362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f942 	bl	80075fc <HAL_TIM_IC_CaptureCallback>
 8007378:	e005      	b.n	8007386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f934 	bl	80075e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f945 	bl	8007610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00c      	beq.n	80073b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d007      	beq.n	80073b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f06f 0201 	mvn.w	r2, #1
 80073a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7f9 ff52 	bl	8001254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00c      	beq.n	80073de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80073d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fb05 	bl	80079e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00c      	beq.n	8007402 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d007      	beq.n	8007402 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80073fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fafd 	bl	80079fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00c      	beq.n	8007426 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800741e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8ff 	bl	8007624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00c      	beq.n	800744a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f06f 0220 	mvn.w	r2, #32
 8007442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fac5 	bl	80079d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800744a:	bf00      	nop
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_TIM_ConfigClockSource+0x1c>
 800746c:	2302      	movs	r3, #2
 800746e:	e0b4      	b.n	80075da <HAL_TIM_ConfigClockSource+0x186>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	4b56      	ldr	r3, [pc, #344]	@ (80075e4 <HAL_TIM_ConfigClockSource+0x190>)
 800748c:	4013      	ands	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a8:	d03e      	beq.n	8007528 <HAL_TIM_ConfigClockSource+0xd4>
 80074aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ae:	f200 8087 	bhi.w	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b6:	f000 8086 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x172>
 80074ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074be:	d87f      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c0:	2b70      	cmp	r3, #112	@ 0x70
 80074c2:	d01a      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0xa6>
 80074c4:	2b70      	cmp	r3, #112	@ 0x70
 80074c6:	d87b      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c8:	2b60      	cmp	r3, #96	@ 0x60
 80074ca:	d050      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x11a>
 80074cc:	2b60      	cmp	r3, #96	@ 0x60
 80074ce:	d877      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d0:	2b50      	cmp	r3, #80	@ 0x50
 80074d2:	d03c      	beq.n	800754e <HAL_TIM_ConfigClockSource+0xfa>
 80074d4:	2b50      	cmp	r3, #80	@ 0x50
 80074d6:	d873      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d8:	2b40      	cmp	r3, #64	@ 0x40
 80074da:	d058      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x13a>
 80074dc:	2b40      	cmp	r3, #64	@ 0x40
 80074de:	d86f      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e0:	2b30      	cmp	r3, #48	@ 0x30
 80074e2:	d064      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x15a>
 80074e4:	2b30      	cmp	r3, #48	@ 0x30
 80074e6:	d86b      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d060      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x15a>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d867      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d05c      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x15a>
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d05a      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x15a>
 80074f8:	e062      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800750a:	f000 f9b5 	bl	8007878 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800751c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	609a      	str	r2, [r3, #8]
      break;
 8007526:	e04f      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007538:	f000 f99e 	bl	8007878 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800754a:	609a      	str	r2, [r3, #8]
      break;
 800754c:	e03c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755a:	461a      	mov	r2, r3
 800755c:	f000 f912 	bl	8007784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2150      	movs	r1, #80	@ 0x50
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f96b 	bl	8007842 <TIM_ITRx_SetConfig>
      break;
 800756c:	e02c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800757a:	461a      	mov	r2, r3
 800757c:	f000 f931 	bl	80077e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2160      	movs	r1, #96	@ 0x60
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f95b 	bl	8007842 <TIM_ITRx_SetConfig>
      break;
 800758c:	e01c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800759a:	461a      	mov	r2, r3
 800759c:	f000 f8f2 	bl	8007784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2140      	movs	r1, #64	@ 0x40
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 f94b 	bl	8007842 <TIM_ITRx_SetConfig>
      break;
 80075ac:	e00c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f000 f942 	bl	8007842 <TIM_ITRx_SetConfig>
      break;
 80075be:	e003      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
      break;
 80075c4:	e000      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	fffeff88 	.word	0xfffeff88

080075e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a43      	ldr	r2, [pc, #268]	@ (8007758 <TIM_Base_SetConfig+0x120>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007656:	d00f      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a40      	ldr	r2, [pc, #256]	@ (800775c <TIM_Base_SetConfig+0x124>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00b      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a3f      	ldr	r2, [pc, #252]	@ (8007760 <TIM_Base_SetConfig+0x128>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d007      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a3e      	ldr	r2, [pc, #248]	@ (8007764 <TIM_Base_SetConfig+0x12c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_Base_SetConfig+0x40>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a3d      	ldr	r2, [pc, #244]	@ (8007768 <TIM_Base_SetConfig+0x130>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d108      	bne.n	800768a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800767e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a32      	ldr	r2, [pc, #200]	@ (8007758 <TIM_Base_SetConfig+0x120>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d02b      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007698:	d027      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a2f      	ldr	r2, [pc, #188]	@ (800775c <TIM_Base_SetConfig+0x124>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d023      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007760 <TIM_Base_SetConfig+0x128>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d01f      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007764 <TIM_Base_SetConfig+0x12c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01b      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007768 <TIM_Base_SetConfig+0x130>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d017      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a2b      	ldr	r2, [pc, #172]	@ (800776c <TIM_Base_SetConfig+0x134>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007770 <TIM_Base_SetConfig+0x138>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00f      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a29      	ldr	r2, [pc, #164]	@ (8007774 <TIM_Base_SetConfig+0x13c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00b      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a28      	ldr	r2, [pc, #160]	@ (8007778 <TIM_Base_SetConfig+0x140>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d007      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a27      	ldr	r2, [pc, #156]	@ (800777c <TIM_Base_SetConfig+0x144>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a26      	ldr	r2, [pc, #152]	@ (8007780 <TIM_Base_SetConfig+0x148>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d108      	bne.n	80076fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a0e      	ldr	r2, [pc, #56]	@ (8007758 <TIM_Base_SetConfig+0x120>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d003      	beq.n	800772a <TIM_Base_SetConfig+0xf2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a10      	ldr	r2, [pc, #64]	@ (8007768 <TIM_Base_SetConfig+0x130>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d103      	bne.n	8007732 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f043 0204 	orr.w	r2, r3, #4
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	601a      	str	r2, [r3, #0]
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40010000 	.word	0x40010000
 800775c:	40000400 	.word	0x40000400
 8007760:	40000800 	.word	0x40000800
 8007764:	40000c00 	.word	0x40000c00
 8007768:	40010400 	.word	0x40010400
 800776c:	40014000 	.word	0x40014000
 8007770:	40014400 	.word	0x40014400
 8007774:	40014800 	.word	0x40014800
 8007778:	40001800 	.word	0x40001800
 800777c:	40001c00 	.word	0x40001c00
 8007780:	40002000 	.word	0x40002000

08007784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f023 0201 	bic.w	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f023 030a 	bic.w	r3, r3, #10
 80077c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	621a      	str	r2, [r3, #32]
}
 80077d6:	bf00      	nop
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b087      	sub	sp, #28
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	f023 0210 	bic.w	r2, r3, #16
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800780c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	031b      	lsls	r3, r3, #12
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	4313      	orrs	r3, r2
 8007816:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800781e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007858:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	f043 0307 	orr.w	r3, r3, #7
 8007864:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	609a      	str	r2, [r3, #8]
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007892:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	021a      	lsls	r2, r3, #8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	431a      	orrs	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4313      	orrs	r3, r2
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	609a      	str	r2, [r3, #8]
}
 80078ac:	bf00      	nop
 80078ae:	371c      	adds	r7, #28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e06d      	b.n	80079ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a30      	ldr	r2, [pc, #192]	@ (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a2f      	ldr	r2, [pc, #188]	@ (80079bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d108      	bne.n	8007916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800790a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a20      	ldr	r2, [pc, #128]	@ (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d022      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007942:	d01d      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1d      	ldr	r2, [pc, #116]	@ (80079c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d018      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1c      	ldr	r2, [pc, #112]	@ (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d013      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1a      	ldr	r2, [pc, #104]	@ (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00e      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a15      	ldr	r2, [pc, #84]	@ (80079bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d009      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a16      	ldr	r2, [pc, #88]	@ (80079cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a15      	ldr	r2, [pc, #84]	@ (80079d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d10c      	bne.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	4313      	orrs	r3, r2
 8007990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40010400 	.word	0x40010400
 80079c0:	40000400 	.word	0x40000400
 80079c4:	40000800 	.word	0x40000800
 80079c8:	40000c00 	.word	0x40000c00
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40001800 	.word	0x40001800

080079d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e040      	b.n	8007aa4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fa fa02 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2224      	movs	r2, #36	@ 0x24
 8007a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0201 	bic.w	r2, r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fe22 	bl	80086a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fbbb 	bl	80081d8 <UART_SetConfig>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e01b      	b.n	8007aa4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fea1 	bl	80087e4 <UART_CheckIdleState>
 8007aa2:	4603      	mov	r3, r0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	@ 0x28
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	603b      	str	r3, [r7, #0]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d177      	bne.n	8007bb4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_UART_Transmit+0x24>
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e070      	b.n	8007bb6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2221      	movs	r2, #33	@ 0x21
 8007ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ae2:	f7fa fc85 	bl	80023f0 <HAL_GetTick>
 8007ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	88fa      	ldrh	r2, [r7, #6]
 8007aec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	88fa      	ldrh	r2, [r7, #6]
 8007af4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b00:	d108      	bne.n	8007b14 <HAL_UART_Transmit+0x68>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	e003      	b.n	8007b1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b1c:	e02f      	b.n	8007b7e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2180      	movs	r1, #128	@ 0x80
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 feb2 	bl	8008892 <UART_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2220      	movs	r2, #32
 8007b38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e03b      	b.n	8007bb6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10b      	bne.n	8007b5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	3302      	adds	r3, #2
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	e007      	b.n	8007b6c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	781a      	ldrb	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1c9      	bne.n	8007b1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	2200      	movs	r2, #0
 8007b92:	2140      	movs	r1, #64	@ 0x40
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 fe7c 	bl	8008892 <UART_WaitOnFlagUntilTimeout>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d004      	beq.n	8007baa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e005      	b.n	8007bb6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2220      	movs	r2, #32
 8007bae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e000      	b.n	8007bb6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007bb4:	2302      	movs	r3, #2
  }
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3720      	adds	r7, #32
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b0ba      	sub	sp, #232	@ 0xe8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007be6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007bea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007bee:	4013      	ands	r3, r2
 8007bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d115      	bne.n	8007c28 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c00:	f003 0320 	and.w	r3, r3, #32
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00f      	beq.n	8007c28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 82b1 	beq.w	8008180 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
      }
      return;
 8007c26:	e2ab      	b.n	8008180 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 8117 	beq.w	8007e60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007c42:	4b85      	ldr	r3, [pc, #532]	@ (8007e58 <HAL_UART_IRQHandler+0x298>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 810a 	beq.w	8007e60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d011      	beq.n	8007c7c <HAL_UART_IRQHandler+0xbc>
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c72:	f043 0201 	orr.w	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d011      	beq.n	8007cac <HAL_UART_IRQHandler+0xec>
 8007c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca2:	f043 0204 	orr.w	r2, r3, #4
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d011      	beq.n	8007cdc <HAL_UART_IRQHandler+0x11c>
 8007cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2204      	movs	r2, #4
 8007cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cd2:	f043 0202 	orr.w	r2, r3, #2
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d017      	beq.n	8007d18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cf8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2208      	movs	r2, #8
 8007d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d0e:	f043 0208 	orr.w	r2, r3, #8
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d012      	beq.n	8007d4a <HAL_UART_IRQHandler+0x18a>
 8007d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00c      	beq.n	8007d4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d40:	f043 0220 	orr.w	r2, r3, #32
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 8217 	beq.w	8008184 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00d      	beq.n	8007d7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d007      	beq.n	8007d7e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d92:	2b40      	cmp	r3, #64	@ 0x40
 8007d94:	d005      	beq.n	8007da2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d04f      	beq.n	8007e42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fde2 	bl	800896c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db2:	2b40      	cmp	r3, #64	@ 0x40
 8007db4:	d141      	bne.n	8007e3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007de2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1d9      	bne.n	8007db6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d013      	beq.n	8007e32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e0e:	4a13      	ldr	r2, [pc, #76]	@ (8007e5c <HAL_UART_IRQHandler+0x29c>)
 8007e10:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fb f8a4 	bl	8002f64 <HAL_DMA_Abort_IT>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d017      	beq.n	8007e52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e30:	e00f      	b.n	8007e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f9ba 	bl	80081ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e38:	e00b      	b.n	8007e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9b6 	bl	80081ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e40:	e007      	b.n	8007e52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9b2 	bl	80081ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007e50:	e198      	b.n	8008184 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e52:	bf00      	nop
    return;
 8007e54:	e196      	b.n	8008184 <HAL_UART_IRQHandler+0x5c4>
 8007e56:	bf00      	nop
 8007e58:	04000120 	.word	0x04000120
 8007e5c:	08008a35 	.word	0x08008a35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	f040 8166 	bne.w	8008136 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6e:	f003 0310 	and.w	r3, r3, #16
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 815f 	beq.w	8008136 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 8158 	beq.w	8008136 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2210      	movs	r2, #16
 8007e8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e98:	2b40      	cmp	r3, #64	@ 0x40
 8007e9a:	f040 80d0 	bne.w	800803e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007eaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 80ab 	beq.w	800800a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	f080 80a3 	bcs.w	800800a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007eca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed8:	f000 8086 	beq.w	8007fe8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1da      	bne.n	8007edc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f38:	f023 0301 	bic.w	r3, r3, #1
 8007f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e1      	bne.n	8007f26 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e3      	bne.n	8007f62 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fb8:	f023 0310 	bic.w	r3, r3, #16
 8007fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007fca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fcc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e4      	bne.n	8007fa8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fa ff4e 	bl	8002e84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f8dc 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008008:	e0be      	b.n	8008188 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008014:	429a      	cmp	r2, r3
 8008016:	f040 80b7 	bne.w	8008188 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008024:	f040 80b0 	bne.w	8008188 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8c2 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
      return;
 800803c:	e0a4      	b.n	8008188 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800804a:	b29b      	uxth	r3, r3
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 8096 	beq.w	800818c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8008060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 8091 	beq.w	800818c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800807e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800808c:	647b      	str	r3, [r7, #68]	@ 0x44
 800808e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800809a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e4      	bne.n	800806a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3308      	adds	r3, #8
 80080a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	623b      	str	r3, [r7, #32]
   return(result);
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	f023 0301 	bic.w	r3, r3, #1
 80080b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3308      	adds	r3, #8
 80080c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80080c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e3      	bne.n	80080a0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2220      	movs	r2, #32
 80080dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f023 0310 	bic.w	r3, r3, #16
 8008100:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800810e:	61fb      	str	r3, [r7, #28]
 8008110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	69b9      	ldr	r1, [r7, #24]
 8008114:	69fa      	ldr	r2, [r7, #28]
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	617b      	str	r3, [r7, #20]
   return(result);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e4      	bne.n	80080ec <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2202      	movs	r2, #2
 8008126:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f846 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008134:	e02a      	b.n	800818c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00e      	beq.n	8008160 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814a:	2b00      	cmp	r3, #0
 800814c:	d008      	beq.n	8008160 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d01c      	beq.n	8008190 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
    }
    return;
 800815e:	e017      	b.n	8008190 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	d012      	beq.n	8008192 <HAL_UART_IRQHandler+0x5d2>
 800816c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00c      	beq.n	8008192 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fc6d 	bl	8008a58 <UART_EndTransmit_IT>
    return;
 800817e:	e008      	b.n	8008192 <HAL_UART_IRQHandler+0x5d2>
      return;
 8008180:	bf00      	nop
 8008182:	e006      	b.n	8008192 <HAL_UART_IRQHandler+0x5d2>
    return;
 8008184:	bf00      	nop
 8008186:	e004      	b.n	8008192 <HAL_UART_IRQHandler+0x5d2>
      return;
 8008188:	bf00      	nop
 800818a:	e002      	b.n	8008192 <HAL_UART_IRQHandler+0x5d2>
      return;
 800818c:	bf00      	nop
 800818e:	e000      	b.n	8008192 <HAL_UART_IRQHandler+0x5d2>
    return;
 8008190:	bf00      	nop
  }

}
 8008192:	37e8      	adds	r7, #232	@ 0xe8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	431a      	orrs	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	431a      	orrs	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4ba6      	ldr	r3, [pc, #664]	@ (800849c <UART_SetConfig+0x2c4>)
 8008204:	4013      	ands	r3, r2
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6812      	ldr	r2, [r2, #0]
 800820a:	6979      	ldr	r1, [r7, #20]
 800820c:	430b      	orrs	r3, r1
 800820e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	430a      	orrs	r2, r1
 8008248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a94      	ldr	r2, [pc, #592]	@ (80084a0 <UART_SetConfig+0x2c8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d120      	bne.n	8008296 <UART_SetConfig+0xbe>
 8008254:	4b93      	ldr	r3, [pc, #588]	@ (80084a4 <UART_SetConfig+0x2cc>)
 8008256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	2b03      	cmp	r3, #3
 8008260:	d816      	bhi.n	8008290 <UART_SetConfig+0xb8>
 8008262:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <UART_SetConfig+0x90>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	08008279 	.word	0x08008279
 800826c:	08008285 	.word	0x08008285
 8008270:	0800827f 	.word	0x0800827f
 8008274:	0800828b 	.word	0x0800828b
 8008278:	2301      	movs	r3, #1
 800827a:	77fb      	strb	r3, [r7, #31]
 800827c:	e150      	b.n	8008520 <UART_SetConfig+0x348>
 800827e:	2302      	movs	r3, #2
 8008280:	77fb      	strb	r3, [r7, #31]
 8008282:	e14d      	b.n	8008520 <UART_SetConfig+0x348>
 8008284:	2304      	movs	r3, #4
 8008286:	77fb      	strb	r3, [r7, #31]
 8008288:	e14a      	b.n	8008520 <UART_SetConfig+0x348>
 800828a:	2308      	movs	r3, #8
 800828c:	77fb      	strb	r3, [r7, #31]
 800828e:	e147      	b.n	8008520 <UART_SetConfig+0x348>
 8008290:	2310      	movs	r3, #16
 8008292:	77fb      	strb	r3, [r7, #31]
 8008294:	e144      	b.n	8008520 <UART_SetConfig+0x348>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a83      	ldr	r2, [pc, #524]	@ (80084a8 <UART_SetConfig+0x2d0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d132      	bne.n	8008306 <UART_SetConfig+0x12e>
 80082a0:	4b80      	ldr	r3, [pc, #512]	@ (80084a4 <UART_SetConfig+0x2cc>)
 80082a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a6:	f003 030c 	and.w	r3, r3, #12
 80082aa:	2b0c      	cmp	r3, #12
 80082ac:	d828      	bhi.n	8008300 <UART_SetConfig+0x128>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <UART_SetConfig+0xdc>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082e9 	.word	0x080082e9
 80082b8:	08008301 	.word	0x08008301
 80082bc:	08008301 	.word	0x08008301
 80082c0:	08008301 	.word	0x08008301
 80082c4:	080082f5 	.word	0x080082f5
 80082c8:	08008301 	.word	0x08008301
 80082cc:	08008301 	.word	0x08008301
 80082d0:	08008301 	.word	0x08008301
 80082d4:	080082ef 	.word	0x080082ef
 80082d8:	08008301 	.word	0x08008301
 80082dc:	08008301 	.word	0x08008301
 80082e0:	08008301 	.word	0x08008301
 80082e4:	080082fb 	.word	0x080082fb
 80082e8:	2300      	movs	r3, #0
 80082ea:	77fb      	strb	r3, [r7, #31]
 80082ec:	e118      	b.n	8008520 <UART_SetConfig+0x348>
 80082ee:	2302      	movs	r3, #2
 80082f0:	77fb      	strb	r3, [r7, #31]
 80082f2:	e115      	b.n	8008520 <UART_SetConfig+0x348>
 80082f4:	2304      	movs	r3, #4
 80082f6:	77fb      	strb	r3, [r7, #31]
 80082f8:	e112      	b.n	8008520 <UART_SetConfig+0x348>
 80082fa:	2308      	movs	r3, #8
 80082fc:	77fb      	strb	r3, [r7, #31]
 80082fe:	e10f      	b.n	8008520 <UART_SetConfig+0x348>
 8008300:	2310      	movs	r3, #16
 8008302:	77fb      	strb	r3, [r7, #31]
 8008304:	e10c      	b.n	8008520 <UART_SetConfig+0x348>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a68      	ldr	r2, [pc, #416]	@ (80084ac <UART_SetConfig+0x2d4>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d120      	bne.n	8008352 <UART_SetConfig+0x17a>
 8008310:	4b64      	ldr	r3, [pc, #400]	@ (80084a4 <UART_SetConfig+0x2cc>)
 8008312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008316:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800831a:	2b30      	cmp	r3, #48	@ 0x30
 800831c:	d013      	beq.n	8008346 <UART_SetConfig+0x16e>
 800831e:	2b30      	cmp	r3, #48	@ 0x30
 8008320:	d814      	bhi.n	800834c <UART_SetConfig+0x174>
 8008322:	2b20      	cmp	r3, #32
 8008324:	d009      	beq.n	800833a <UART_SetConfig+0x162>
 8008326:	2b20      	cmp	r3, #32
 8008328:	d810      	bhi.n	800834c <UART_SetConfig+0x174>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <UART_SetConfig+0x15c>
 800832e:	2b10      	cmp	r3, #16
 8008330:	d006      	beq.n	8008340 <UART_SetConfig+0x168>
 8008332:	e00b      	b.n	800834c <UART_SetConfig+0x174>
 8008334:	2300      	movs	r3, #0
 8008336:	77fb      	strb	r3, [r7, #31]
 8008338:	e0f2      	b.n	8008520 <UART_SetConfig+0x348>
 800833a:	2302      	movs	r3, #2
 800833c:	77fb      	strb	r3, [r7, #31]
 800833e:	e0ef      	b.n	8008520 <UART_SetConfig+0x348>
 8008340:	2304      	movs	r3, #4
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e0ec      	b.n	8008520 <UART_SetConfig+0x348>
 8008346:	2308      	movs	r3, #8
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e0e9      	b.n	8008520 <UART_SetConfig+0x348>
 800834c:	2310      	movs	r3, #16
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e0e6      	b.n	8008520 <UART_SetConfig+0x348>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a56      	ldr	r2, [pc, #344]	@ (80084b0 <UART_SetConfig+0x2d8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d120      	bne.n	800839e <UART_SetConfig+0x1c6>
 800835c:	4b51      	ldr	r3, [pc, #324]	@ (80084a4 <UART_SetConfig+0x2cc>)
 800835e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008362:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008366:	2bc0      	cmp	r3, #192	@ 0xc0
 8008368:	d013      	beq.n	8008392 <UART_SetConfig+0x1ba>
 800836a:	2bc0      	cmp	r3, #192	@ 0xc0
 800836c:	d814      	bhi.n	8008398 <UART_SetConfig+0x1c0>
 800836e:	2b80      	cmp	r3, #128	@ 0x80
 8008370:	d009      	beq.n	8008386 <UART_SetConfig+0x1ae>
 8008372:	2b80      	cmp	r3, #128	@ 0x80
 8008374:	d810      	bhi.n	8008398 <UART_SetConfig+0x1c0>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <UART_SetConfig+0x1a8>
 800837a:	2b40      	cmp	r3, #64	@ 0x40
 800837c:	d006      	beq.n	800838c <UART_SetConfig+0x1b4>
 800837e:	e00b      	b.n	8008398 <UART_SetConfig+0x1c0>
 8008380:	2300      	movs	r3, #0
 8008382:	77fb      	strb	r3, [r7, #31]
 8008384:	e0cc      	b.n	8008520 <UART_SetConfig+0x348>
 8008386:	2302      	movs	r3, #2
 8008388:	77fb      	strb	r3, [r7, #31]
 800838a:	e0c9      	b.n	8008520 <UART_SetConfig+0x348>
 800838c:	2304      	movs	r3, #4
 800838e:	77fb      	strb	r3, [r7, #31]
 8008390:	e0c6      	b.n	8008520 <UART_SetConfig+0x348>
 8008392:	2308      	movs	r3, #8
 8008394:	77fb      	strb	r3, [r7, #31]
 8008396:	e0c3      	b.n	8008520 <UART_SetConfig+0x348>
 8008398:	2310      	movs	r3, #16
 800839a:	77fb      	strb	r3, [r7, #31]
 800839c:	e0c0      	b.n	8008520 <UART_SetConfig+0x348>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a44      	ldr	r2, [pc, #272]	@ (80084b4 <UART_SetConfig+0x2dc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d125      	bne.n	80083f4 <UART_SetConfig+0x21c>
 80083a8:	4b3e      	ldr	r3, [pc, #248]	@ (80084a4 <UART_SetConfig+0x2cc>)
 80083aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083b6:	d017      	beq.n	80083e8 <UART_SetConfig+0x210>
 80083b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083bc:	d817      	bhi.n	80083ee <UART_SetConfig+0x216>
 80083be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c2:	d00b      	beq.n	80083dc <UART_SetConfig+0x204>
 80083c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c8:	d811      	bhi.n	80083ee <UART_SetConfig+0x216>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <UART_SetConfig+0x1fe>
 80083ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d2:	d006      	beq.n	80083e2 <UART_SetConfig+0x20a>
 80083d4:	e00b      	b.n	80083ee <UART_SetConfig+0x216>
 80083d6:	2300      	movs	r3, #0
 80083d8:	77fb      	strb	r3, [r7, #31]
 80083da:	e0a1      	b.n	8008520 <UART_SetConfig+0x348>
 80083dc:	2302      	movs	r3, #2
 80083de:	77fb      	strb	r3, [r7, #31]
 80083e0:	e09e      	b.n	8008520 <UART_SetConfig+0x348>
 80083e2:	2304      	movs	r3, #4
 80083e4:	77fb      	strb	r3, [r7, #31]
 80083e6:	e09b      	b.n	8008520 <UART_SetConfig+0x348>
 80083e8:	2308      	movs	r3, #8
 80083ea:	77fb      	strb	r3, [r7, #31]
 80083ec:	e098      	b.n	8008520 <UART_SetConfig+0x348>
 80083ee:	2310      	movs	r3, #16
 80083f0:	77fb      	strb	r3, [r7, #31]
 80083f2:	e095      	b.n	8008520 <UART_SetConfig+0x348>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a2f      	ldr	r2, [pc, #188]	@ (80084b8 <UART_SetConfig+0x2e0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d125      	bne.n	800844a <UART_SetConfig+0x272>
 80083fe:	4b29      	ldr	r3, [pc, #164]	@ (80084a4 <UART_SetConfig+0x2cc>)
 8008400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008404:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008408:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800840c:	d017      	beq.n	800843e <UART_SetConfig+0x266>
 800840e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008412:	d817      	bhi.n	8008444 <UART_SetConfig+0x26c>
 8008414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008418:	d00b      	beq.n	8008432 <UART_SetConfig+0x25a>
 800841a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800841e:	d811      	bhi.n	8008444 <UART_SetConfig+0x26c>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d003      	beq.n	800842c <UART_SetConfig+0x254>
 8008424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008428:	d006      	beq.n	8008438 <UART_SetConfig+0x260>
 800842a:	e00b      	b.n	8008444 <UART_SetConfig+0x26c>
 800842c:	2301      	movs	r3, #1
 800842e:	77fb      	strb	r3, [r7, #31]
 8008430:	e076      	b.n	8008520 <UART_SetConfig+0x348>
 8008432:	2302      	movs	r3, #2
 8008434:	77fb      	strb	r3, [r7, #31]
 8008436:	e073      	b.n	8008520 <UART_SetConfig+0x348>
 8008438:	2304      	movs	r3, #4
 800843a:	77fb      	strb	r3, [r7, #31]
 800843c:	e070      	b.n	8008520 <UART_SetConfig+0x348>
 800843e:	2308      	movs	r3, #8
 8008440:	77fb      	strb	r3, [r7, #31]
 8008442:	e06d      	b.n	8008520 <UART_SetConfig+0x348>
 8008444:	2310      	movs	r3, #16
 8008446:	77fb      	strb	r3, [r7, #31]
 8008448:	e06a      	b.n	8008520 <UART_SetConfig+0x348>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a1b      	ldr	r2, [pc, #108]	@ (80084bc <UART_SetConfig+0x2e4>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d138      	bne.n	80084c6 <UART_SetConfig+0x2ee>
 8008454:	4b13      	ldr	r3, [pc, #76]	@ (80084a4 <UART_SetConfig+0x2cc>)
 8008456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800845e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008462:	d017      	beq.n	8008494 <UART_SetConfig+0x2bc>
 8008464:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008468:	d82a      	bhi.n	80084c0 <UART_SetConfig+0x2e8>
 800846a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800846e:	d00b      	beq.n	8008488 <UART_SetConfig+0x2b0>
 8008470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008474:	d824      	bhi.n	80084c0 <UART_SetConfig+0x2e8>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <UART_SetConfig+0x2aa>
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800847e:	d006      	beq.n	800848e <UART_SetConfig+0x2b6>
 8008480:	e01e      	b.n	80084c0 <UART_SetConfig+0x2e8>
 8008482:	2300      	movs	r3, #0
 8008484:	77fb      	strb	r3, [r7, #31]
 8008486:	e04b      	b.n	8008520 <UART_SetConfig+0x348>
 8008488:	2302      	movs	r3, #2
 800848a:	77fb      	strb	r3, [r7, #31]
 800848c:	e048      	b.n	8008520 <UART_SetConfig+0x348>
 800848e:	2304      	movs	r3, #4
 8008490:	77fb      	strb	r3, [r7, #31]
 8008492:	e045      	b.n	8008520 <UART_SetConfig+0x348>
 8008494:	2308      	movs	r3, #8
 8008496:	77fb      	strb	r3, [r7, #31]
 8008498:	e042      	b.n	8008520 <UART_SetConfig+0x348>
 800849a:	bf00      	nop
 800849c:	efff69f3 	.word	0xefff69f3
 80084a0:	40011000 	.word	0x40011000
 80084a4:	40023800 	.word	0x40023800
 80084a8:	40004400 	.word	0x40004400
 80084ac:	40004800 	.word	0x40004800
 80084b0:	40004c00 	.word	0x40004c00
 80084b4:	40005000 	.word	0x40005000
 80084b8:	40011400 	.word	0x40011400
 80084bc:	40007800 	.word	0x40007800
 80084c0:	2310      	movs	r3, #16
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	e02c      	b.n	8008520 <UART_SetConfig+0x348>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a72      	ldr	r2, [pc, #456]	@ (8008694 <UART_SetConfig+0x4bc>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d125      	bne.n	800851c <UART_SetConfig+0x344>
 80084d0:	4b71      	ldr	r3, [pc, #452]	@ (8008698 <UART_SetConfig+0x4c0>)
 80084d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80084da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80084de:	d017      	beq.n	8008510 <UART_SetConfig+0x338>
 80084e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80084e4:	d817      	bhi.n	8008516 <UART_SetConfig+0x33e>
 80084e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084ea:	d00b      	beq.n	8008504 <UART_SetConfig+0x32c>
 80084ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084f0:	d811      	bhi.n	8008516 <UART_SetConfig+0x33e>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d003      	beq.n	80084fe <UART_SetConfig+0x326>
 80084f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084fa:	d006      	beq.n	800850a <UART_SetConfig+0x332>
 80084fc:	e00b      	b.n	8008516 <UART_SetConfig+0x33e>
 80084fe:	2300      	movs	r3, #0
 8008500:	77fb      	strb	r3, [r7, #31]
 8008502:	e00d      	b.n	8008520 <UART_SetConfig+0x348>
 8008504:	2302      	movs	r3, #2
 8008506:	77fb      	strb	r3, [r7, #31]
 8008508:	e00a      	b.n	8008520 <UART_SetConfig+0x348>
 800850a:	2304      	movs	r3, #4
 800850c:	77fb      	strb	r3, [r7, #31]
 800850e:	e007      	b.n	8008520 <UART_SetConfig+0x348>
 8008510:	2308      	movs	r3, #8
 8008512:	77fb      	strb	r3, [r7, #31]
 8008514:	e004      	b.n	8008520 <UART_SetConfig+0x348>
 8008516:	2310      	movs	r3, #16
 8008518:	77fb      	strb	r3, [r7, #31]
 800851a:	e001      	b.n	8008520 <UART_SetConfig+0x348>
 800851c:	2310      	movs	r3, #16
 800851e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008528:	d15b      	bne.n	80085e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800852a:	7ffb      	ldrb	r3, [r7, #31]
 800852c:	2b08      	cmp	r3, #8
 800852e:	d828      	bhi.n	8008582 <UART_SetConfig+0x3aa>
 8008530:	a201      	add	r2, pc, #4	@ (adr r2, 8008538 <UART_SetConfig+0x360>)
 8008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008536:	bf00      	nop
 8008538:	0800855d 	.word	0x0800855d
 800853c:	08008565 	.word	0x08008565
 8008540:	0800856d 	.word	0x0800856d
 8008544:	08008583 	.word	0x08008583
 8008548:	08008573 	.word	0x08008573
 800854c:	08008583 	.word	0x08008583
 8008550:	08008583 	.word	0x08008583
 8008554:	08008583 	.word	0x08008583
 8008558:	0800857b 	.word	0x0800857b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800855c:	f7fd ff8e 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 8008560:	61b8      	str	r0, [r7, #24]
        break;
 8008562:	e013      	b.n	800858c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008564:	f7fd ff9e 	bl	80064a4 <HAL_RCC_GetPCLK2Freq>
 8008568:	61b8      	str	r0, [r7, #24]
        break;
 800856a:	e00f      	b.n	800858c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800856c:	4b4b      	ldr	r3, [pc, #300]	@ (800869c <UART_SetConfig+0x4c4>)
 800856e:	61bb      	str	r3, [r7, #24]
        break;
 8008570:	e00c      	b.n	800858c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008572:	f7fd feb1 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 8008576:	61b8      	str	r0, [r7, #24]
        break;
 8008578:	e008      	b.n	800858c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800857a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800857e:	61bb      	str	r3, [r7, #24]
        break;
 8008580:	e004      	b.n	800858c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	77bb      	strb	r3, [r7, #30]
        break;
 800858a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d074      	beq.n	800867c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	005a      	lsls	r2, r3, #1
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	085b      	lsrs	r3, r3, #1
 800859c:	441a      	add	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	d916      	bls.n	80085dc <UART_SetConfig+0x404>
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085b4:	d212      	bcs.n	80085dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	f023 030f 	bic.w	r3, r3, #15
 80085be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	085b      	lsrs	r3, r3, #1
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	89fb      	ldrh	r3, [r7, #14]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	89fa      	ldrh	r2, [r7, #14]
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	e04f      	b.n	800867c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	77bb      	strb	r3, [r7, #30]
 80085e0:	e04c      	b.n	800867c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085e2:	7ffb      	ldrb	r3, [r7, #31]
 80085e4:	2b08      	cmp	r3, #8
 80085e6:	d828      	bhi.n	800863a <UART_SetConfig+0x462>
 80085e8:	a201      	add	r2, pc, #4	@ (adr r2, 80085f0 <UART_SetConfig+0x418>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	08008615 	.word	0x08008615
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	08008625 	.word	0x08008625
 80085fc:	0800863b 	.word	0x0800863b
 8008600:	0800862b 	.word	0x0800862b
 8008604:	0800863b 	.word	0x0800863b
 8008608:	0800863b 	.word	0x0800863b
 800860c:	0800863b 	.word	0x0800863b
 8008610:	08008633 	.word	0x08008633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008614:	f7fd ff32 	bl	800647c <HAL_RCC_GetPCLK1Freq>
 8008618:	61b8      	str	r0, [r7, #24]
        break;
 800861a:	e013      	b.n	8008644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800861c:	f7fd ff42 	bl	80064a4 <HAL_RCC_GetPCLK2Freq>
 8008620:	61b8      	str	r0, [r7, #24]
        break;
 8008622:	e00f      	b.n	8008644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008624:	4b1d      	ldr	r3, [pc, #116]	@ (800869c <UART_SetConfig+0x4c4>)
 8008626:	61bb      	str	r3, [r7, #24]
        break;
 8008628:	e00c      	b.n	8008644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800862a:	f7fd fe55 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 800862e:	61b8      	str	r0, [r7, #24]
        break;
 8008630:	e008      	b.n	8008644 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008636:	61bb      	str	r3, [r7, #24]
        break;
 8008638:	e004      	b.n	8008644 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	77bb      	strb	r3, [r7, #30]
        break;
 8008642:	bf00      	nop
    }

    if (pclk != 0U)
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d018      	beq.n	800867c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	085a      	lsrs	r2, r3, #1
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	441a      	add	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	fbb2 f3f3 	udiv	r3, r2, r3
 800865c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b0f      	cmp	r3, #15
 8008662:	d909      	bls.n	8008678 <UART_SetConfig+0x4a0>
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800866a:	d205      	bcs.n	8008678 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	b29a      	uxth	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60da      	str	r2, [r3, #12]
 8008676:	e001      	b.n	800867c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008688:	7fbb      	ldrb	r3, [r7, #30]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3720      	adds	r7, #32
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	40007c00 	.word	0x40007c00
 8008698:	40023800 	.word	0x40023800
 800869c:	00f42400 	.word	0x00f42400

080086a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	f003 0308 	and.w	r3, r3, #8
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01a      	beq.n	80087b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800879e:	d10a      	bne.n	80087b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	605a      	str	r2, [r3, #4]
  }
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08c      	sub	sp, #48	@ 0x30
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f4:	f7f9 fdfc 	bl	80023f0 <HAL_GetTick>
 80087f8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b08      	cmp	r3, #8
 8008806:	d12e      	bne.n	8008866 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	2200      	movs	r2, #0
 8008812:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f83b 	bl	8008892 <UART_WaitOnFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d021      	beq.n	8008866 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008836:	623b      	str	r3, [r7, #32]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	461a      	mov	r2, r3
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	61fb      	str	r3, [r7, #28]
 8008842:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	69b9      	ldr	r1, [r7, #24]
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	617b      	str	r3, [r7, #20]
   return(result);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e6      	bne.n	8008822 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e011      	b.n	800888a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2220      	movs	r2, #32
 800886a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3728      	adds	r7, #40	@ 0x28
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	60f8      	str	r0, [r7, #12]
 800889a:	60b9      	str	r1, [r7, #8]
 800889c:	603b      	str	r3, [r7, #0]
 800889e:	4613      	mov	r3, r2
 80088a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a2:	e04f      	b.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088aa:	d04b      	beq.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ac:	f7f9 fda0 	bl	80023f0 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d302      	bcc.n	80088c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e04e      	b.n	8008964 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d037      	beq.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb2>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b80      	cmp	r3, #128	@ 0x80
 80088d8:	d034      	beq.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb2>
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b40      	cmp	r3, #64	@ 0x40
 80088de:	d031      	beq.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	2b08      	cmp	r3, #8
 80088ec:	d110      	bne.n	8008910 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2208      	movs	r2, #8
 80088f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 f838 	bl	800896c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2208      	movs	r2, #8
 8008900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e029      	b.n	8008964 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800891a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800891e:	d111      	bne.n	8008944 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008928:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f81e 	bl	800896c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2220      	movs	r2, #32
 8008934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e00f      	b.n	8008964 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69da      	ldr	r2, [r3, #28]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4013      	ands	r3, r2
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	429a      	cmp	r2, r3
 8008952:	bf0c      	ite	eq
 8008954:	2301      	moveq	r3, #1
 8008956:	2300      	movne	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	429a      	cmp	r2, r3
 8008960:	d0a0      	beq.n	80088a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800896c:	b480      	push	{r7}
 800896e:	b095      	sub	sp, #84	@ 0x54
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008992:	643b      	str	r3, [r7, #64]	@ 0x40
 8008994:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008998:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e6      	bne.n	8008974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e5      	bne.n	80089a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d118      	bne.n	8008a14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	e853 3f00 	ldrex	r3, [r3]
 80089ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f023 0310 	bic.w	r3, r3, #16
 80089f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	461a      	mov	r2, r3
 80089fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a04:	6979      	ldr	r1, [r7, #20]
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	e841 2300 	strex	r3, r2, [r1]
 8008a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1e6      	bne.n	80089e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008a28:	bf00      	nop
 8008a2a:	3754      	adds	r7, #84	@ 0x54
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f7ff fbae 	bl	80081ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a50:	bf00      	nop
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6979      	ldr	r1, [r7, #20]
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e6      	bne.n	8008a60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7ff fb7a 	bl	8008198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aa4:	bf00      	nop
 8008aa6:	3720      	adds	r7, #32
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8008ab2:	4b92      	ldr	r3, [pc, #584]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8008ab8:	4b90      	ldr	r3, [pc, #576]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8008abe:	4b8f      	ldr	r3, [pc, #572]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8008ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008ac6:	2264      	movs	r2, #100	@ 0x64
 8008ac8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008aca:	4b8d      	ldr	r3, [pc, #564]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008acc:	22ff      	movs	r2, #255	@ 0xff
 8008ace:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008ad0:	4b8b      	ldr	r3, [pc, #556]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008ad2:	22ff      	movs	r2, #255	@ 0xff
 8008ad4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008ad8:	22ff      	movs	r2, #255	@ 0xff
 8008ada:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008adc:	4b88      	ldr	r3, [pc, #544]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8008ae2:	4b88      	ldr	r3, [pc, #544]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008ae4:	220a      	movs	r2, #10
 8008ae6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8008ae8:	4b86      	ldr	r3, [pc, #536]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8008aee:	4b85      	ldr	r3, [pc, #532]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008af0:	2201      	movs	r2, #1
 8008af2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 8008af4:	4b83      	ldr	r3, [pc, #524]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008af6:	2265      	movs	r2, #101	@ 0x65
 8008af8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008afa:	2100      	movs	r1, #0
 8008afc:	2000      	movs	r0, #0
 8008afe:	f007 fc1f 	bl	8010340 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008b02:	4b7e      	ldr	r3, [pc, #504]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	061a      	lsls	r2, r3, #24
 8008b08:	4b7c      	ldr	r3, [pc, #496]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	4b7a      	ldr	r3, [pc, #488]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b12:	789b      	ldrb	r3, [r3, #2]
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	4313      	orrs	r3, r2
 8008b18:	4a78      	ldr	r2, [pc, #480]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b1a:	78d2      	ldrb	r2, [r2, #3]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	061a      	lsls	r2, r3, #24
 8008b20:	4b76      	ldr	r3, [pc, #472]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	0619      	lsls	r1, r3, #24
 8008b26:	4b75      	ldr	r3, [pc, #468]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	041b      	lsls	r3, r3, #16
 8008b2c:	4319      	orrs	r1, r3
 8008b2e:	4b73      	ldr	r3, [pc, #460]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b30:	789b      	ldrb	r3, [r3, #2]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	430b      	orrs	r3, r1
 8008b36:	4971      	ldr	r1, [pc, #452]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b38:	78c9      	ldrb	r1, [r1, #3]
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b42:	431a      	orrs	r2, r3
 8008b44:	4b6d      	ldr	r3, [pc, #436]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	0619      	lsls	r1, r3, #24
 8008b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	041b      	lsls	r3, r3, #16
 8008b50:	4319      	orrs	r1, r3
 8008b52:	4b6a      	ldr	r3, [pc, #424]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b54:	789b      	ldrb	r3, [r3, #2]
 8008b56:	021b      	lsls	r3, r3, #8
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	4968      	ldr	r1, [pc, #416]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b5c:	78c9      	ldrb	r1, [r1, #3]
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	0a1b      	lsrs	r3, r3, #8
 8008b62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008b66:	431a      	orrs	r2, r3
 8008b68:	4b64      	ldr	r3, [pc, #400]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	0619      	lsls	r1, r3, #24
 8008b6e:	4b63      	ldr	r3, [pc, #396]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	041b      	lsls	r3, r3, #16
 8008b74:	4319      	orrs	r1, r3
 8008b76:	4b61      	ldr	r3, [pc, #388]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b78:	789b      	ldrb	r3, [r3, #2]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	495f      	ldr	r1, [pc, #380]	@ (8008cfc <MX_LWIP_Init+0x250>)
 8008b80:	78c9      	ldrb	r1, [r1, #3]
 8008b82:	430b      	orrs	r3, r1
 8008b84:	0e1b      	lsrs	r3, r3, #24
 8008b86:	4313      	orrs	r3, r2
 8008b88:	4a5f      	ldr	r2, [pc, #380]	@ (8008d08 <MX_LWIP_Init+0x25c>)
 8008b8a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	061a      	lsls	r2, r3, #24
 8008b92:	4b5b      	ldr	r3, [pc, #364]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	041b      	lsls	r3, r3, #16
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	4b59      	ldr	r3, [pc, #356]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008b9c:	789b      	ldrb	r3, [r3, #2]
 8008b9e:	021b      	lsls	r3, r3, #8
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	4a57      	ldr	r2, [pc, #348]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008ba4:	78d2      	ldrb	r2, [r2, #3]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	061a      	lsls	r2, r3, #24
 8008baa:	4b55      	ldr	r3, [pc, #340]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	0619      	lsls	r1, r3, #24
 8008bb0:	4b53      	ldr	r3, [pc, #332]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	041b      	lsls	r3, r3, #16
 8008bb6:	4319      	orrs	r1, r3
 8008bb8:	4b51      	ldr	r3, [pc, #324]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bba:	789b      	ldrb	r3, [r3, #2]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	494f      	ldr	r1, [pc, #316]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bc2:	78c9      	ldrb	r1, [r1, #3]
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	021b      	lsls	r3, r3, #8
 8008bc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	4b4c      	ldr	r3, [pc, #304]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	0619      	lsls	r1, r3, #24
 8008bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bd6:	785b      	ldrb	r3, [r3, #1]
 8008bd8:	041b      	lsls	r3, r3, #16
 8008bda:	4319      	orrs	r1, r3
 8008bdc:	4b48      	ldr	r3, [pc, #288]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bde:	789b      	ldrb	r3, [r3, #2]
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	430b      	orrs	r3, r1
 8008be4:	4946      	ldr	r1, [pc, #280]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008be6:	78c9      	ldrb	r1, [r1, #3]
 8008be8:	430b      	orrs	r3, r1
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	4b43      	ldr	r3, [pc, #268]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	0619      	lsls	r1, r3, #24
 8008bf8:	4b41      	ldr	r3, [pc, #260]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008bfa:	785b      	ldrb	r3, [r3, #1]
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	4319      	orrs	r1, r3
 8008c00:	4b3f      	ldr	r3, [pc, #252]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008c02:	789b      	ldrb	r3, [r3, #2]
 8008c04:	021b      	lsls	r3, r3, #8
 8008c06:	430b      	orrs	r3, r1
 8008c08:	493d      	ldr	r1, [pc, #244]	@ (8008d00 <MX_LWIP_Init+0x254>)
 8008c0a:	78c9      	ldrb	r1, [r1, #3]
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	0e1b      	lsrs	r3, r3, #24
 8008c10:	4313      	orrs	r3, r2
 8008c12:	4a3e      	ldr	r2, [pc, #248]	@ (8008d0c <MX_LWIP_Init+0x260>)
 8008c14:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008c16:	4b3b      	ldr	r3, [pc, #236]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	061a      	lsls	r2, r3, #24
 8008c1c:	4b39      	ldr	r3, [pc, #228]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	041b      	lsls	r3, r3, #16
 8008c22:	431a      	orrs	r2, r3
 8008c24:	4b37      	ldr	r3, [pc, #220]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c26:	789b      	ldrb	r3, [r3, #2]
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	4a35      	ldr	r2, [pc, #212]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c2e:	78d2      	ldrb	r2, [r2, #3]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	061a      	lsls	r2, r3, #24
 8008c34:	4b33      	ldr	r3, [pc, #204]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	0619      	lsls	r1, r3, #24
 8008c3a:	4b32      	ldr	r3, [pc, #200]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	041b      	lsls	r3, r3, #16
 8008c40:	4319      	orrs	r1, r3
 8008c42:	4b30      	ldr	r3, [pc, #192]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c44:	789b      	ldrb	r3, [r3, #2]
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	492e      	ldr	r1, [pc, #184]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c4c:	78c9      	ldrb	r1, [r1, #3]
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	021b      	lsls	r3, r3, #8
 8008c52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c56:	431a      	orrs	r2, r3
 8008c58:	4b2a      	ldr	r3, [pc, #168]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	0619      	lsls	r1, r3, #24
 8008c5e:	4b29      	ldr	r3, [pc, #164]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	041b      	lsls	r3, r3, #16
 8008c64:	4319      	orrs	r1, r3
 8008c66:	4b27      	ldr	r3, [pc, #156]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c68:	789b      	ldrb	r3, [r3, #2]
 8008c6a:	021b      	lsls	r3, r3, #8
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	4925      	ldr	r1, [pc, #148]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c70:	78c9      	ldrb	r1, [r1, #3]
 8008c72:	430b      	orrs	r3, r1
 8008c74:	0a1b      	lsrs	r3, r3, #8
 8008c76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	4b21      	ldr	r3, [pc, #132]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	0619      	lsls	r1, r3, #24
 8008c82:	4b20      	ldr	r3, [pc, #128]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	041b      	lsls	r3, r3, #16
 8008c88:	4319      	orrs	r1, r3
 8008c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c8c:	789b      	ldrb	r3, [r3, #2]
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	430b      	orrs	r3, r1
 8008c92:	491c      	ldr	r1, [pc, #112]	@ (8008d04 <MX_LWIP_Init+0x258>)
 8008c94:	78c9      	ldrb	r1, [r1, #3]
 8008c96:	430b      	orrs	r3, r1
 8008c98:	0e1b      	lsrs	r3, r3, #24
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d10 <MX_LWIP_Init+0x264>)
 8008c9e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8008d14 <MX_LWIP_Init+0x268>)
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8008d18 <MX_LWIP_Init+0x26c>)
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	4b18      	ldr	r3, [pc, #96]	@ (8008d10 <MX_LWIP_Init+0x264>)
 8008cae:	4a17      	ldr	r2, [pc, #92]	@ (8008d0c <MX_LWIP_Init+0x260>)
 8008cb0:	4915      	ldr	r1, [pc, #84]	@ (8008d08 <MX_LWIP_Init+0x25c>)
 8008cb2:	481a      	ldr	r0, [pc, #104]	@ (8008d1c <MX_LWIP_Init+0x270>)
 8008cb4:	f008 f90a 	bl	8010ecc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008cb8:	4818      	ldr	r0, [pc, #96]	@ (8008d1c <MX_LWIP_Init+0x270>)
 8008cba:	f008 fb9b 	bl	80113f4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008cbe:	4817      	ldr	r0, [pc, #92]	@ (8008d1c <MX_LWIP_Init+0x270>)
 8008cc0:	f008 fbbc 	bl	801143c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008cc4:	4916      	ldr	r1, [pc, #88]	@ (8008d20 <MX_LWIP_Init+0x274>)
 8008cc6:	4815      	ldr	r0, [pc, #84]	@ (8008d1c <MX_LWIP_Init+0x270>)
 8008cc8:	f008 fcba 	bl	8011640 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008ccc:	2224      	movs	r2, #36	@ 0x24
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4814      	ldr	r0, [pc, #80]	@ (8008d24 <MX_LWIP_Init+0x278>)
 8008cd2:	f013 fe1d 	bl	801c910 <memset>
  attributes.name = "EthLink";
 8008cd6:	4b13      	ldr	r3, [pc, #76]	@ (8008d24 <MX_LWIP_Init+0x278>)
 8008cd8:	4a13      	ldr	r2, [pc, #76]	@ (8008d28 <MX_LWIP_Init+0x27c>)
 8008cda:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008cdc:	4b11      	ldr	r3, [pc, #68]	@ (8008d24 <MX_LWIP_Init+0x278>)
 8008cde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008ce2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8008ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8008d24 <MX_LWIP_Init+0x278>)
 8008ce6:	2210      	movs	r2, #16
 8008ce8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8008cea:	4a0e      	ldr	r2, [pc, #56]	@ (8008d24 <MX_LWIP_Init+0x278>)
 8008cec:	490b      	ldr	r1, [pc, #44]	@ (8008d1c <MX_LWIP_Init+0x270>)
 8008cee:	480f      	ldr	r0, [pc, #60]	@ (8008d2c <MX_LWIP_Init+0x280>)
 8008cf0:	f000 fdce 	bl	8009890 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008cf4:	bf00      	nop
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20000b98 	.word	0x20000b98
 8008d00:	20000b9c 	.word	0x20000b9c
 8008d04:	20000ba0 	.word	0x20000ba0
 8008d08:	20000b8c 	.word	0x20000b8c
 8008d0c:	20000b90 	.word	0x20000b90
 8008d10:	20000b94 	.word	0x20000b94
 8008d14:	08010251 	.word	0x08010251
 8008d18:	08009271 	.word	0x08009271
 8008d1c:	20000b58 	.word	0x20000b58
 8008d20:	08008d31 	.word	0x08008d31
 8008d24:	20000ba4 	.word	0x20000ba4
 8008d28:	0801d730 	.word	0x0801d730
 8008d2c:	08009549 	.word	0x08009549

08008d30 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008d56:	2320      	movs	r3, #32
 8008d58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d5a:	f3bf 8f4f 	dsb	sy
}
 8008d5e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8008d60:	e00b      	b.n	8008d7a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008d62:	4a0d      	ldr	r2, [pc, #52]	@ (8008d98 <SCB_InvalidateDCache_by_Addr+0x54>)
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4413      	add	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dcf0      	bgt.n	8008d62 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008d80:	f3bf 8f4f 	dsb	sy
}
 8008d84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008d86:	f3bf 8f6f 	isb	sy
}
 8008d8a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8008d8c:	bf00      	nop
 8008d8e:	371c      	adds	r7, #28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	e000ed00 	.word	0xe000ed00

08008d9c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008da4:	4b04      	ldr	r3, [pc, #16]	@ (8008db8 <HAL_ETH_RxCpltCallback+0x1c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f001 f9ad 	bl	800a108 <osSemaphoreRelease>
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20005554 	.word	0x20005554

08008dbc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008dc4:	4b04      	ldr	r3, [pc, #16]	@ (8008dd8 <HAL_ETH_TxCpltCallback+0x1c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 f99d 	bl	800a108 <osSemaphoreRelease>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20005558 	.word	0x20005558

08008ddc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7fb f972 	bl	80040ce <HAL_ETH_GetDMAError>
 8008dea:	4603      	mov	r3, r0
 8008dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008df0:	2b80      	cmp	r3, #128	@ 0x80
 8008df2:	d104      	bne.n	8008dfe <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8008df4:	4b04      	ldr	r3, [pc, #16]	@ (8008e08 <HAL_ETH_ErrorCallback+0x2c>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 f985 	bl	800a108 <osSemaphoreRelease>
  }
}
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20005554 	.word	0x20005554

08008e0c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b0aa      	sub	sp, #168	@ 0xa8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8008e26:	f107 0310 	add.w	r3, r7, #16
 8008e2a:	2264      	movs	r2, #100	@ 0x64
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f013 fd6e 	bl	801c910 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008e34:	4b89      	ldr	r3, [pc, #548]	@ (800905c <low_level_init+0x250>)
 8008e36:	4a8a      	ldr	r2, [pc, #552]	@ (8009060 <low_level_init+0x254>)
 8008e38:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008e3e:	2380      	movs	r3, #128	@ 0x80
 8008e40:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008e42:	23e1      	movs	r3, #225	@ 0xe1
 8008e44:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008e46:	2300      	movs	r3, #0
 8008e48:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008e52:	4a82      	ldr	r2, [pc, #520]	@ (800905c <low_level_init+0x250>)
 8008e54:	f107 0308 	add.w	r3, r7, #8
 8008e58:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008e5a:	4b80      	ldr	r3, [pc, #512]	@ (800905c <low_level_init+0x250>)
 8008e5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008e60:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008e62:	4b7e      	ldr	r3, [pc, #504]	@ (800905c <low_level_init+0x250>)
 8008e64:	4a7f      	ldr	r2, [pc, #508]	@ (8009064 <low_level_init+0x258>)
 8008e66:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008e68:	4b7c      	ldr	r3, [pc, #496]	@ (800905c <low_level_init+0x250>)
 8008e6a:	4a7f      	ldr	r2, [pc, #508]	@ (8009068 <low_level_init+0x25c>)
 8008e6c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800905c <low_level_init+0x250>)
 8008e70:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008e74:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008e76:	4879      	ldr	r0, [pc, #484]	@ (800905c <low_level_init+0x250>)
 8008e78:	f7fa fae0 	bl	800343c <HAL_ETH_Init>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008e82:	2238      	movs	r2, #56	@ 0x38
 8008e84:	2100      	movs	r1, #0
 8008e86:	4879      	ldr	r0, [pc, #484]	@ (800906c <low_level_init+0x260>)
 8008e88:	f013 fd42 	bl	801c910 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008e8c:	4b77      	ldr	r3, [pc, #476]	@ (800906c <low_level_init+0x260>)
 8008e8e:	2221      	movs	r2, #33	@ 0x21
 8008e90:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008e92:	4b76      	ldr	r3, [pc, #472]	@ (800906c <low_level_init+0x260>)
 8008e94:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8008e98:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008e9a:	4b74      	ldr	r3, [pc, #464]	@ (800906c <low_level_init+0x260>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008ea0:	4873      	ldr	r0, [pc, #460]	@ (8009070 <low_level_init+0x264>)
 8008ea2:	f007 fecd 	bl	8010c40 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2206      	movs	r2, #6
 8008eaa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008eae:	4b6b      	ldr	r3, [pc, #428]	@ (800905c <low_level_init+0x250>)
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	781a      	ldrb	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008eba:	4b68      	ldr	r3, [pc, #416]	@ (800905c <low_level_init+0x250>)
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	785a      	ldrb	r2, [r3, #1]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008ec6:	4b65      	ldr	r3, [pc, #404]	@ (800905c <low_level_init+0x250>)
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	789a      	ldrb	r2, [r3, #2]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008ed2:	4b62      	ldr	r3, [pc, #392]	@ (800905c <low_level_init+0x250>)
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	78da      	ldrb	r2, [r3, #3]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008ede:	4b5f      	ldr	r3, [pc, #380]	@ (800905c <low_level_init+0x250>)
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	791a      	ldrb	r2, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008eea:	4b5c      	ldr	r3, [pc, #368]	@ (800905c <low_level_init+0x250>)
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	795a      	ldrb	r2, [r3, #5]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8008efc:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008f04:	f043 030a 	orr.w	r3, r3, #10
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8008f10:	2200      	movs	r2, #0
 8008f12:	2100      	movs	r1, #0
 8008f14:	2001      	movs	r0, #1
 8008f16:	f000 fff5 	bl	8009f04 <osSemaphoreNew>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	4a55      	ldr	r2, [pc, #340]	@ (8009074 <low_level_init+0x268>)
 8008f1e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8008f20:	2200      	movs	r2, #0
 8008f22:	2100      	movs	r1, #0
 8008f24:	2001      	movs	r0, #1
 8008f26:	f000 ffed 	bl	8009f04 <osSemaphoreNew>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	4a52      	ldr	r2, [pc, #328]	@ (8009078 <low_level_init+0x26c>)
 8008f2e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008f30:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008f34:	2224      	movs	r2, #36	@ 0x24
 8008f36:	2100      	movs	r1, #0
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f013 fce9 	bl	801c910 <memset>
  attributes.name = "EthIf";
 8008f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800907c <low_level_init+0x270>)
 8008f40:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008f42:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8008f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8008f4a:	2330      	movs	r3, #48	@ 0x30
 8008f4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008f50:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008f54:	461a      	mov	r2, r3
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	4849      	ldr	r0, [pc, #292]	@ (8009080 <low_level_init+0x274>)
 8008f5a:	f000 fc99 	bl	8009890 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008f5e:	4949      	ldr	r1, [pc, #292]	@ (8009084 <low_level_init+0x278>)
 8008f60:	4849      	ldr	r0, [pc, #292]	@ (8009088 <low_level_init+0x27c>)
 8008f62:	f7f9 f91e 	bl	80021a2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8008f66:	4848      	ldr	r0, [pc, #288]	@ (8009088 <low_level_init+0x27c>)
 8008f68:	f7f9 f94d 	bl	8002206 <LAN8742_Init>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d006      	beq.n	8008f80 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f008 fb34 	bl	80115e0 <netif_set_link_down>
    netif_set_down(netif);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f008 facb 	bl	8011514 <netif_set_down>
 8008f7e:	e06a      	b.n	8009056 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8008f80:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d164      	bne.n	8009052 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008f88:	483f      	ldr	r0, [pc, #252]	@ (8009088 <low_level_init+0x27c>)
 8008f8a:	f7f9 f989 	bl	80022a0 <LAN8742_GetLinkState>
 8008f8e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	dc06      	bgt.n	8008fa8 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f008 fb20 	bl	80115e0 <netif_set_link_down>
      netif_set_down(netif);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f008 fab7 	bl	8011514 <netif_set_down>
 8008fa6:	e056      	b.n	8009056 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8008fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fac:	3b02      	subs	r3, #2
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d82a      	bhi.n	8009008 <low_level_init+0x1fc>
 8008fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb8 <low_level_init+0x1ac>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	08008fc9 	.word	0x08008fc9
 8008fbc:	08008fdb 	.word	0x08008fdb
 8008fc0:	08008feb 	.word	0x08008feb
 8008fc4:	08008ffb 	.word	0x08008ffb
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8008fc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8008fd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008fd8:	e01f      	b.n	800901a <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8008fe0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008fe8:	e017      	b.n	800901a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8008fea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008ff8:	e00f      	b.n	800901a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8009000:	2300      	movs	r3, #0
 8009002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009006:	e008      	b.n	800901a <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8009008:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800900c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8009010:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009014:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009018:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800901a:	f107 0310 	add.w	r3, r7, #16
 800901e:	4619      	mov	r1, r3
 8009020:	480e      	ldr	r0, [pc, #56]	@ (800905c <low_level_init+0x250>)
 8009022:	f7fa fef3 	bl	8003e0c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800902a:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800902c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009032:	f107 0310 	add.w	r3, r7, #16
 8009036:	4619      	mov	r1, r3
 8009038:	4808      	ldr	r0, [pc, #32]	@ (800905c <low_level_init+0x250>)
 800903a:	f7fa ffde 	bl	8003ffa <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800903e:	4807      	ldr	r0, [pc, #28]	@ (800905c <low_level_init+0x250>)
 8009040:	f7fa fa96 	bl	8003570 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f008 f9f9 	bl	801143c <netif_set_up>
    netif_set_link_up(netif);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f008 fa94 	bl	8011578 <netif_set_link_up>
 8009050:	e001      	b.n	8009056 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8009052:	f7f8 f911 	bl	8001278 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8009056:	37a8      	adds	r7, #168	@ 0xa8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	2000555c 	.word	0x2000555c
 8009060:	40028000 	.word	0x40028000
 8009064:	20000170 	.word	0x20000170
 8009068:	200000d0 	.word	0x200000d0
 800906c:	2000560c 	.word	0x2000560c
 8009070:	080219a8 	.word	0x080219a8
 8009074:	20005554 	.word	0x20005554
 8009078:	20005558 	.word	0x20005558
 800907c:	0801d750 	.word	0x0801d750
 8009080:	0800921d 	.word	0x0800921d
 8009084:	2000000c 	.word	0x2000000c
 8009088:	20005644 	.word	0x20005644

0800908c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b092      	sub	sp, #72	@ 0x48
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800909a:	2300      	movs	r3, #0
 800909c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80090a4:	f107 030c 	add.w	r3, r7, #12
 80090a8:	2230      	movs	r2, #48	@ 0x30
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f013 fc2f 	bl	801c910 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80090b2:	f107 030c 	add.w	r3, r7, #12
 80090b6:	2230      	movs	r2, #48	@ 0x30
 80090b8:	2100      	movs	r1, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f013 fc28 	bl	801c910 <memset>

  for(q = p; q != NULL; q = q->next)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090c4:	e045      	b.n	8009152 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80090c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d902      	bls.n	80090d2 <low_level_output+0x46>
      return ERR_IF;
 80090cc:	f06f 030b 	mvn.w	r3, #11
 80090d0:	e07f      	b.n	80091d2 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80090d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090d4:	6859      	ldr	r1, [r3, #4]
 80090d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090d8:	4613      	mov	r3, r2
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	3348      	adds	r3, #72	@ 0x48
 80090e2:	443b      	add	r3, r7
 80090e4:	3b3c      	subs	r3, #60	@ 0x3c
 80090e6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80090e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090ea:	895b      	ldrh	r3, [r3, #10]
 80090ec:	4619      	mov	r1, r3
 80090ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090f0:	4613      	mov	r3, r2
 80090f2:	005b      	lsls	r3, r3, #1
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	3348      	adds	r3, #72	@ 0x48
 80090fa:	443b      	add	r3, r7
 80090fc:	3b38      	subs	r3, #56	@ 0x38
 80090fe:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009102:	2b00      	cmp	r3, #0
 8009104:	d011      	beq.n	800912a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009108:	1e5a      	subs	r2, r3, #1
 800910a:	f107 000c 	add.w	r0, r7, #12
 800910e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009110:	460b      	mov	r3, r1
 8009112:	005b      	lsls	r3, r3, #1
 8009114:	440b      	add	r3, r1
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	18c1      	adds	r1, r0, r3
 800911a:	4613      	mov	r3, r2
 800911c:	005b      	lsls	r3, r3, #1
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	3348      	adds	r3, #72	@ 0x48
 8009124:	443b      	add	r3, r7
 8009126:	3b34      	subs	r3, #52	@ 0x34
 8009128:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800912a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009134:	4613      	mov	r3, r2
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	3348      	adds	r3, #72	@ 0x48
 800913e:	443b      	add	r3, r7
 8009140:	3b34      	subs	r3, #52	@ 0x34
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009148:	3301      	adds	r3, #1
 800914a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800914c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	643b      	str	r3, [r7, #64]	@ 0x40
 8009152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1b6      	bne.n	80090c6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	891b      	ldrh	r3, [r3, #8]
 800915c:	461a      	mov	r2, r3
 800915e:	4b1f      	ldr	r3, [pc, #124]	@ (80091dc <low_level_output+0x150>)
 8009160:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009162:	4a1e      	ldr	r2, [pc, #120]	@ (80091dc <low_level_output+0x150>)
 8009164:	f107 030c 	add.w	r3, r7, #12
 8009168:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800916a:	4a1c      	ldr	r2, [pc, #112]	@ (80091dc <low_level_output+0x150>)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8009170:	6838      	ldr	r0, [r7, #0]
 8009172:	f008 feb9 	bl	8011ee8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8009176:	4919      	ldr	r1, [pc, #100]	@ (80091dc <low_level_output+0x150>)
 8009178:	4819      	ldr	r0, [pc, #100]	@ (80091e0 <low_level_output+0x154>)
 800917a:	f7fa fae9 	bl	8003750 <HAL_ETH_Transmit_IT>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <low_level_output+0x100>
    {
      errval = ERR_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800918a:	e01b      	b.n	80091c4 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800918c:	4814      	ldr	r0, [pc, #80]	@ (80091e0 <low_level_output+0x154>)
 800918e:	f7fa ff91 	bl	80040b4 <HAL_ETH_GetError>
 8009192:	4603      	mov	r3, r0
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00d      	beq.n	80091b8 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800919c:	4b11      	ldr	r3, [pc, #68]	@ (80091e4 <low_level_output+0x158>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 ff49 	bl	800a03c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 80091aa:	480d      	ldr	r0, [pc, #52]	@ (80091e0 <low_level_output+0x154>)
 80091ac:	f7fa fc70 	bl	8003a90 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80091b0:	23fe      	movs	r3, #254	@ 0xfe
 80091b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80091b6:	e005      	b.n	80091c4 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80091b8:	6838      	ldr	r0, [r7, #0]
 80091ba:	f008 fdef 	bl	8011d9c <pbuf_free>
        errval =  ERR_IF;
 80091be:	23f4      	movs	r3, #244	@ 0xf4
 80091c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80091c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80091c8:	f113 0f02 	cmn.w	r3, #2
 80091cc:	d0d3      	beq.n	8009176 <low_level_output+0xea>

  return errval;
 80091ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3748      	adds	r7, #72	@ 0x48
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	2000560c 	.word	0x2000560c
 80091e0:	2000555c 	.word	0x2000555c
 80091e4:	20005558 	.word	0x20005558

080091e8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80091f0:	2300      	movs	r3, #0
 80091f2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80091f4:	4b07      	ldr	r3, [pc, #28]	@ (8009214 <low_level_input+0x2c>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d105      	bne.n	8009208 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80091fc:	f107 030c 	add.w	r3, r7, #12
 8009200:	4619      	mov	r1, r3
 8009202:	4805      	ldr	r0, [pc, #20]	@ (8009218 <low_level_input+0x30>)
 8009204:	f7fa fb00 	bl	8003808 <HAL_ETH_ReadData>
  }

  return p;
 8009208:	68fb      	ldr	r3, [r7, #12]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20005550 	.word	0x20005550
 8009218:	2000555c 	.word	0x2000555c

0800921c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800922c:	4b0f      	ldr	r3, [pc, #60]	@ (800926c <ethernetif_input+0x50>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009234:	4618      	mov	r0, r3
 8009236:	f000 ff01 	bl	800a03c <osSemaphoreAcquire>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f5      	bne.n	800922c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8009240:	68b8      	ldr	r0, [r7, #8]
 8009242:	f7ff ffd1 	bl	80091e8 <low_level_input>
 8009246:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	68b9      	ldr	r1, [r7, #8]
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	4798      	blx	r3
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f008 fd9c 	bl	8011d9c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1ea      	bne.n	8009240 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800926a:	e7df      	b.n	800922c <ethernetif_input+0x10>
 800926c:	20005554 	.word	0x20005554

08009270 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <ethernetif_init+0x1c>
 800927e:	4b0e      	ldr	r3, [pc, #56]	@ (80092b8 <ethernetif_init+0x48>)
 8009280:	f240 220d 	movw	r2, #525	@ 0x20d
 8009284:	490d      	ldr	r1, [pc, #52]	@ (80092bc <ethernetif_init+0x4c>)
 8009286:	480e      	ldr	r0, [pc, #56]	@ (80092c0 <ethernetif_init+0x50>)
 8009288:	f013 f9e2 	bl	801c650 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2273      	movs	r2, #115	@ 0x73
 8009290:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2274      	movs	r2, #116	@ 0x74
 8009298:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a09      	ldr	r2, [pc, #36]	@ (80092c4 <ethernetif_init+0x54>)
 80092a0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a08      	ldr	r2, [pc, #32]	@ (80092c8 <ethernetif_init+0x58>)
 80092a6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff fdaf 	bl	8008e0c <low_level_init>

  return ERR_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	0801d758 	.word	0x0801d758
 80092bc:	0801d774 	.word	0x0801d774
 80092c0:	0801d784 	.word	0x0801d784
 80092c4:	0801a04d 	.word	0x0801a04d
 80092c8:	0800908d 	.word	0x0800908d

080092cc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80092d8:	68f9      	ldr	r1, [r7, #12]
 80092da:	4809      	ldr	r0, [pc, #36]	@ (8009300 <pbuf_free_custom+0x34>)
 80092dc:	f007 fda0 	bl	8010e20 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80092e0:	4b08      	ldr	r3, [pc, #32]	@ (8009304 <pbuf_free_custom+0x38>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d107      	bne.n	80092f8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80092e8:	4b06      	ldr	r3, [pc, #24]	@ (8009304 <pbuf_free_custom+0x38>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80092ee:	4b06      	ldr	r3, [pc, #24]	@ (8009308 <pbuf_free_custom+0x3c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 ff08 	bl	800a108 <osSemaphoreRelease>
  }
}
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	080219a8 	.word	0x080219a8
 8009304:	20005550 	.word	0x20005550
 8009308:	20005554 	.word	0x20005554

0800930c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009310:	f7f9 f86e 	bl	80023f0 <HAL_GetTick>
 8009314:	4603      	mov	r3, r0
}
 8009316:	4618      	mov	r0, r3
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08e      	sub	sp, #56	@ 0x38
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	605a      	str	r2, [r3, #4]
 800932e:	609a      	str	r2, [r3, #8]
 8009330:	60da      	str	r2, [r3, #12]
 8009332:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a56      	ldr	r2, [pc, #344]	@ (8009494 <HAL_ETH_MspInit+0x178>)
 800933a:	4293      	cmp	r3, r2
 800933c:	f040 80a6 	bne.w	800948c <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009340:	4b55      	ldr	r3, [pc, #340]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 8009342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009344:	4a54      	ldr	r2, [pc, #336]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 8009346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800934a:	6313      	str	r3, [r2, #48]	@ 0x30
 800934c:	4b52      	ldr	r3, [pc, #328]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 800934e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009354:	623b      	str	r3, [r7, #32]
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	4b4f      	ldr	r3, [pc, #316]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 800935a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800935c:	4a4e      	ldr	r2, [pc, #312]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 800935e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009362:	6313      	str	r3, [r2, #48]	@ 0x30
 8009364:	4b4c      	ldr	r3, [pc, #304]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 8009366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009368:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800936c:	61fb      	str	r3, [r7, #28]
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4b49      	ldr	r3, [pc, #292]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 8009372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009374:	4a48      	ldr	r2, [pc, #288]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 8009376:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800937a:	6313      	str	r3, [r2, #48]	@ 0x30
 800937c:	4b46      	ldr	r3, [pc, #280]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 800937e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009384:	61bb      	str	r3, [r7, #24]
 8009386:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009388:	4b43      	ldr	r3, [pc, #268]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 800938a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800938c:	4a42      	ldr	r2, [pc, #264]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 800938e:	f043 0304 	orr.w	r3, r3, #4
 8009392:	6313      	str	r3, [r2, #48]	@ 0x30
 8009394:	4b40      	ldr	r3, [pc, #256]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 8009396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	617b      	str	r3, [r7, #20]
 800939e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093a0:	4b3d      	ldr	r3, [pc, #244]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a4:	4a3c      	ldr	r2, [pc, #240]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093a6:	f043 0301 	orr.w	r3, r3, #1
 80093aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80093ac:	4b3a      	ldr	r3, [pc, #232]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	613b      	str	r3, [r7, #16]
 80093b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093b8:	4b37      	ldr	r3, [pc, #220]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093bc:	4a36      	ldr	r2, [pc, #216]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093be:	f043 0302 	orr.w	r3, r3, #2
 80093c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80093c4:	4b34      	ldr	r3, [pc, #208]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c8:	f003 0302 	and.w	r3, r3, #2
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80093d0:	4b31      	ldr	r3, [pc, #196]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d4:	4a30      	ldr	r2, [pc, #192]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093da:	6313      	str	r3, [r2, #48]	@ 0x30
 80093dc:	4b2e      	ldr	r3, [pc, #184]	@ (8009498 <HAL_ETH_MspInit+0x17c>)
 80093de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e4:	60bb      	str	r3, [r7, #8]
 80093e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80093e8:	2332      	movs	r3, #50	@ 0x32
 80093ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ec:	2302      	movs	r3, #2
 80093ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f0:	2300      	movs	r3, #0
 80093f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093f4:	2303      	movs	r3, #3
 80093f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80093f8:	230b      	movs	r3, #11
 80093fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009400:	4619      	mov	r1, r3
 8009402:	4826      	ldr	r0, [pc, #152]	@ (800949c <HAL_ETH_MspInit+0x180>)
 8009404:	f7fb fa90 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009408:	2386      	movs	r3, #134	@ 0x86
 800940a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800940c:	2302      	movs	r3, #2
 800940e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009410:	2300      	movs	r3, #0
 8009412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009414:	2303      	movs	r3, #3
 8009416:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009418:	230b      	movs	r3, #11
 800941a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800941c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009420:	4619      	mov	r1, r3
 8009422:	481f      	ldr	r0, [pc, #124]	@ (80094a0 <HAL_ETH_MspInit+0x184>)
 8009424:	f7fb fa80 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800942c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800942e:	2302      	movs	r3, #2
 8009430:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009432:	2300      	movs	r3, #0
 8009434:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009436:	2303      	movs	r3, #3
 8009438:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800943a:	230b      	movs	r3, #11
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800943e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009442:	4619      	mov	r1, r3
 8009444:	4817      	ldr	r0, [pc, #92]	@ (80094a4 <HAL_ETH_MspInit+0x188>)
 8009446:	f7fb fa6f 	bl	8004928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800944a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800944e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009450:	2302      	movs	r3, #2
 8009452:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009454:	2300      	movs	r3, #0
 8009456:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009458:	2303      	movs	r3, #3
 800945a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800945c:	230b      	movs	r3, #11
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009464:	4619      	mov	r1, r3
 8009466:	4810      	ldr	r0, [pc, #64]	@ (80094a8 <HAL_ETH_MspInit+0x18c>)
 8009468:	f7fb fa5e 	bl	8004928 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800946c:	2200      	movs	r2, #0
 800946e:	2105      	movs	r1, #5
 8009470:	203d      	movs	r0, #61	@ 0x3d
 8009472:	f7f9 fb3d 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009476:	203d      	movs	r0, #61	@ 0x3d
 8009478:	f7f9 fb56 	bl	8002b28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800947c:	2200      	movs	r2, #0
 800947e:	2105      	movs	r1, #5
 8009480:	203e      	movs	r0, #62	@ 0x3e
 8009482:	f7f9 fb35 	bl	8002af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8009486:	203e      	movs	r0, #62	@ 0x3e
 8009488:	f7f9 fb4e 	bl	8002b28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800948c:	bf00      	nop
 800948e:	3738      	adds	r7, #56	@ 0x38
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	40028000 	.word	0x40028000
 8009498:	40023800 	.word	0x40023800
 800949c:	40020800 	.word	0x40020800
 80094a0:	40020000 	.word	0x40020000
 80094a4:	40020400 	.word	0x40020400
 80094a8:	40021800 	.word	0x40021800

080094ac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80094b0:	4802      	ldr	r0, [pc, #8]	@ (80094bc <ETH_PHY_IO_Init+0x10>)
 80094b2:	f7fa fdbd 	bl	8004030 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	2000555c 	.word	0x2000555c

080094c0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
  return 0;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	68f9      	ldr	r1, [r7, #12]
 80094e2:	4807      	ldr	r0, [pc, #28]	@ (8009500 <ETH_PHY_IO_ReadReg+0x30>)
 80094e4:	f7fa fbfe 	bl	8003ce4 <HAL_ETH_ReadPHYRegister>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80094ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094f2:	e000      	b.n	80094f6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	2000555c 	.word	0x2000555c

08009504 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	68f9      	ldr	r1, [r7, #12]
 8009516:	4807      	ldr	r0, [pc, #28]	@ (8009534 <ETH_PHY_IO_WriteReg+0x30>)
 8009518:	f7fa fc2f 	bl	8003d7a <HAL_ETH_WritePHYRegister>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009526:	e000      	b.n	800952a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	2000555c 	.word	0x2000555c

08009538 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800953c:	f7f8 ff58 	bl	80023f0 <HAL_GetTick>
 8009540:	4603      	mov	r3, r0
}
 8009542:	4618      	mov	r0, r3
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b0a0      	sub	sp, #128	@ 0x80
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009550:	f107 0308 	add.w	r3, r7, #8
 8009554:	2264      	movs	r2, #100	@ 0x64
 8009556:	2100      	movs	r1, #0
 8009558:	4618      	mov	r0, r3
 800955a:	f013 f9d9 	bl	801c910 <memset>
  int32_t PHYLinkState = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009566:	2300      	movs	r3, #0
 8009568:	67bb      	str	r3, [r7, #120]	@ 0x78
 800956a:	2300      	movs	r3, #0
 800956c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009572:	483a      	ldr	r0, [pc, #232]	@ (800965c <ethernet_link_thread+0x114>)
 8009574:	f7f8 fe94 	bl	80022a0 <LAN8742_GetLinkState>
 8009578:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800957a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800957c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009580:	089b      	lsrs	r3, r3, #2
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00c      	beq.n	80095a6 <ethernet_link_thread+0x5e>
 800958c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800958e:	2b01      	cmp	r3, #1
 8009590:	dc09      	bgt.n	80095a6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8009592:	4833      	ldr	r0, [pc, #204]	@ (8009660 <ethernet_link_thread+0x118>)
 8009594:	f7fa f85c 	bl	8003650 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009598:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800959a:	f007 ffbb 	bl	8011514 <netif_set_down>
    netif_set_link_down(netif);
 800959e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80095a0:	f008 f81e 	bl	80115e0 <netif_set_link_down>
 80095a4:	e055      	b.n	8009652 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80095a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d14e      	bne.n	8009652 <ethernet_link_thread+0x10a>
 80095b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	dd4b      	ble.n	8009652 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80095ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095bc:	3b02      	subs	r3, #2
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d82a      	bhi.n	8009618 <ethernet_link_thread+0xd0>
 80095c2:	a201      	add	r2, pc, #4	@ (adr r2, 80095c8 <ethernet_link_thread+0x80>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	080095d9 	.word	0x080095d9
 80095cc:	080095eb 	.word	0x080095eb
 80095d0:	080095fb 	.word	0x080095fb
 80095d4:	0800960b 	.word	0x0800960b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80095d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095dc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80095de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80095e2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80095e4:	2301      	movs	r3, #1
 80095e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80095e8:	e017      	b.n	800961a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80095ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80095f2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80095f4:	2301      	movs	r3, #1
 80095f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80095f8:	e00f      	b.n	800961a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80095fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095fe:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009600:	2300      	movs	r3, #0
 8009602:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009604:	2301      	movs	r3, #1
 8009606:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009608:	e007      	b.n	800961a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800960a:	2300      	movs	r3, #0
 800960c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800960e:	2300      	movs	r3, #0
 8009610:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009612:	2301      	movs	r3, #1
 8009614:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009616:	e000      	b.n	800961a <ethernet_link_thread+0xd2>
    default:
      break;
 8009618:	bf00      	nop
    }

    if(linkchanged)
 800961a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d018      	beq.n	8009652 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	4619      	mov	r1, r3
 8009626:	480e      	ldr	r0, [pc, #56]	@ (8009660 <ethernet_link_thread+0x118>)
 8009628:	f7fa fbf0 	bl	8003e0c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800962c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800962e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009632:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009634:	f107 0308 	add.w	r3, r7, #8
 8009638:	4619      	mov	r1, r3
 800963a:	4809      	ldr	r0, [pc, #36]	@ (8009660 <ethernet_link_thread+0x118>)
 800963c:	f7fa fcdd 	bl	8003ffa <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009640:	4807      	ldr	r0, [pc, #28]	@ (8009660 <ethernet_link_thread+0x118>)
 8009642:	f7f9 ff95 	bl	8003570 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009646:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009648:	f007 fef8 	bl	801143c <netif_set_up>
      netif_set_link_up(netif);
 800964c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800964e:	f007 ff93 	bl	8011578 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009652:	2064      	movs	r0, #100	@ 0x64
 8009654:	f000 f9c2 	bl	80099dc <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009658:	e78b      	b.n	8009572 <ethernet_link_thread+0x2a>
 800965a:	bf00      	nop
 800965c:	20005644 	.word	0x20005644
 8009660:	2000555c 	.word	0x2000555c

08009664 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af02      	add	r7, sp, #8
 800966a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800966c:	4812      	ldr	r0, [pc, #72]	@ (80096b8 <HAL_ETH_RxAllocateCallback+0x54>)
 800966e:	f007 fb63 	bl	8010d38 <memp_malloc_pool>
 8009672:	60f8      	str	r0, [r7, #12]
  if (p)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d014      	beq.n	80096a4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f103 0220 	add.w	r2, r3, #32
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4a0d      	ldr	r2, [pc, #52]	@ (80096bc <HAL_ETH_RxAllocateCallback+0x58>)
 8009688:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009692:	9201      	str	r2, [sp, #4]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2241      	movs	r2, #65	@ 0x41
 800969a:	2100      	movs	r1, #0
 800969c:	2000      	movs	r0, #0
 800969e:	f008 f9c3 	bl	8011a28 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80096a2:	e005      	b.n	80096b0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80096a4:	4b06      	ldr	r3, [pc, #24]	@ (80096c0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80096a6:	2201      	movs	r2, #1
 80096a8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]
}
 80096b0:	bf00      	nop
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	080219a8 	.word	0x080219a8
 80096bc:	080092cd 	.word	0x080092cd
 80096c0:	20005550 	.word	0x20005550

080096c4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80096da:	2300      	movs	r3, #0
 80096dc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3b20      	subs	r3, #32
 80096e2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	2200      	movs	r2, #0
 80096ee:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	887a      	ldrh	r2, [r7, #2]
 80096f4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d103      	bne.n	8009706 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	69fa      	ldr	r2, [r7, #28]
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	e003      	b.n	800970e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	69fa      	ldr	r2, [r7, #28]
 8009712:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	e009      	b.n	8009730 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	891a      	ldrh	r2, [r3, #8]
 8009720:	887b      	ldrh	r3, [r7, #2]
 8009722:	4413      	add	r3, r2
 8009724:	b29a      	uxth	r2, r3
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	61fb      	str	r3, [r7, #28]
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1f2      	bne.n	800971c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009736:	887b      	ldrh	r3, [r7, #2]
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff fb02 	bl	8008d44 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009740:	bf00      	nop
 8009742:	3720      	adds	r7, #32
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f008 fb23 	bl	8011d9c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800975e:	b480      	push	{r7}
 8009760:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009762:	bf00      	nop
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009772:	f3ef 8305 	mrs	r3, IPSR
 8009776:	60bb      	str	r3, [r7, #8]
  return(result);
 8009778:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10f      	bne.n	800979e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800977e:	f3ef 8310 	mrs	r3, PRIMASK
 8009782:	607b      	str	r3, [r7, #4]
  return(result);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d105      	bne.n	8009796 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800978a:	f3ef 8311 	mrs	r3, BASEPRI
 800978e:	603b      	str	r3, [r7, #0]
  return(result);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d007      	beq.n	80097a6 <osKernelInitialize+0x3a>
 8009796:	4b0e      	ldr	r3, [pc, #56]	@ (80097d0 <osKernelInitialize+0x64>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d103      	bne.n	80097a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800979e:	f06f 0305 	mvn.w	r3, #5
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	e00c      	b.n	80097c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097a6:	4b0a      	ldr	r3, [pc, #40]	@ (80097d0 <osKernelInitialize+0x64>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d105      	bne.n	80097ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097ae:	4b08      	ldr	r3, [pc, #32]	@ (80097d0 <osKernelInitialize+0x64>)
 80097b0:	2201      	movs	r2, #1
 80097b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	e002      	b.n	80097c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80097ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80097c0:	68fb      	ldr	r3, [r7, #12]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20005664 	.word	0x20005664

080097d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097da:	f3ef 8305 	mrs	r3, IPSR
 80097de:	60bb      	str	r3, [r7, #8]
  return(result);
 80097e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10f      	bne.n	8009806 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e6:	f3ef 8310 	mrs	r3, PRIMASK
 80097ea:	607b      	str	r3, [r7, #4]
  return(result);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d105      	bne.n	80097fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097f2:	f3ef 8311 	mrs	r3, BASEPRI
 80097f6:	603b      	str	r3, [r7, #0]
  return(result);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d007      	beq.n	800980e <osKernelStart+0x3a>
 80097fe:	4b0f      	ldr	r3, [pc, #60]	@ (800983c <osKernelStart+0x68>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d103      	bne.n	800980e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009806:	f06f 0305 	mvn.w	r3, #5
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	e010      	b.n	8009830 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800980e:	4b0b      	ldr	r3, [pc, #44]	@ (800983c <osKernelStart+0x68>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d109      	bne.n	800982a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009816:	f7ff ffa2 	bl	800975e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800981a:	4b08      	ldr	r3, [pc, #32]	@ (800983c <osKernelStart+0x68>)
 800981c:	2202      	movs	r2, #2
 800981e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009820:	f002 fd32 	bl	800c288 <vTaskStartScheduler>
      stat = osOK;
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	e002      	b.n	8009830 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800982a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800982e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009830:	68fb      	ldr	r3, [r7, #12]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20005664 	.word	0x20005664

08009840 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009846:	f3ef 8305 	mrs	r3, IPSR
 800984a:	60bb      	str	r3, [r7, #8]
  return(result);
 800984c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10f      	bne.n	8009872 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009852:	f3ef 8310 	mrs	r3, PRIMASK
 8009856:	607b      	str	r3, [r7, #4]
  return(result);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800985e:	f3ef 8311 	mrs	r3, BASEPRI
 8009862:	603b      	str	r3, [r7, #0]
  return(result);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <osKernelGetTickCount+0x3a>
 800986a:	4b08      	ldr	r3, [pc, #32]	@ (800988c <osKernelGetTickCount+0x4c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b02      	cmp	r3, #2
 8009870:	d103      	bne.n	800987a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8009872:	f002 fe3b 	bl	800c4ec <xTaskGetTickCountFromISR>
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	e002      	b.n	8009880 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800987a:	f002 fe27 	bl	800c4cc <xTaskGetTickCount>
 800987e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009880:	68fb      	ldr	r3, [r7, #12]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20005664 	.word	0x20005664

08009890 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009890:	b580      	push	{r7, lr}
 8009892:	b090      	sub	sp, #64	@ 0x40
 8009894:	af04      	add	r7, sp, #16
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800989c:	2300      	movs	r3, #0
 800989e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098a0:	f3ef 8305 	mrs	r3, IPSR
 80098a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80098a6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f040 8090 	bne.w	80099ce <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ae:	f3ef 8310 	mrs	r3, PRIMASK
 80098b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d105      	bne.n	80098c6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098ba:	f3ef 8311 	mrs	r3, BASEPRI
 80098be:	617b      	str	r3, [r7, #20]
  return(result);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <osThreadNew+0x3e>
 80098c6:	4b44      	ldr	r3, [pc, #272]	@ (80099d8 <osThreadNew+0x148>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d07f      	beq.n	80099ce <osThreadNew+0x13e>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d07c      	beq.n	80099ce <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80098d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80098da:	2318      	movs	r3, #24
 80098dc:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098e6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d045      	beq.n	800997a <osThreadNew+0xea>
      if (attr->name != NULL) {
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <osThreadNew+0x6c>
        name = attr->name;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	2b00      	cmp	r3, #0
 800990e:	d008      	beq.n	8009922 <osThreadNew+0x92>
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	2b38      	cmp	r3, #56	@ 0x38
 8009914:	d805      	bhi.n	8009922 <osThreadNew+0x92>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <osThreadNew+0x96>
        return (NULL);
 8009922:	2300      	movs	r3, #0
 8009924:	e054      	b.n	80099d0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	089b      	lsrs	r3, r3, #2
 8009934:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00e      	beq.n	800995c <osThreadNew+0xcc>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	2ba7      	cmp	r3, #167	@ 0xa7
 8009944:	d90a      	bls.n	800995c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800994a:	2b00      	cmp	r3, #0
 800994c:	d006      	beq.n	800995c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <osThreadNew+0xcc>
        mem = 1;
 8009956:	2301      	movs	r3, #1
 8009958:	623b      	str	r3, [r7, #32]
 800995a:	e010      	b.n	800997e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10c      	bne.n	800997e <osThreadNew+0xee>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d108      	bne.n	800997e <osThreadNew+0xee>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d104      	bne.n	800997e <osThreadNew+0xee>
          mem = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	623b      	str	r3, [r7, #32]
 8009978:	e001      	b.n	800997e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d110      	bne.n	80099a6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800998c:	9202      	str	r2, [sp, #8]
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f002 fa76 	bl	800be8c <xTaskCreateStatic>
 80099a0:	4603      	mov	r3, r0
 80099a2:	613b      	str	r3, [r7, #16]
 80099a4:	e013      	b.n	80099ce <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d110      	bne.n	80099ce <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	f107 0310 	add.w	r3, r7, #16
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f002 faca 	bl	800bf58 <xTaskCreate>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d001      	beq.n	80099ce <osThreadNew+0x13e>
          hTask = NULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099ce:	693b      	ldr	r3, [r7, #16]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3730      	adds	r7, #48	@ 0x30
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20005664 	.word	0x20005664

080099dc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e4:	f3ef 8305 	mrs	r3, IPSR
 80099e8:	613b      	str	r3, [r7, #16]
  return(result);
 80099ea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10f      	bne.n	8009a10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099f0:	f3ef 8310 	mrs	r3, PRIMASK
 80099f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d105      	bne.n	8009a08 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099fc:	f3ef 8311 	mrs	r3, BASEPRI
 8009a00:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d007      	beq.n	8009a18 <osDelay+0x3c>
 8009a08:	4b0a      	ldr	r3, [pc, #40]	@ (8009a34 <osDelay+0x58>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d103      	bne.n	8009a18 <osDelay+0x3c>
    stat = osErrorISR;
 8009a10:	f06f 0305 	mvn.w	r3, #5
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	e007      	b.n	8009a28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f002 fbf8 	bl	800c218 <vTaskDelay>
    }
  }

  return (stat);
 8009a28:	697b      	ldr	r3, [r7, #20]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20005664 	.word	0x20005664

08009a38 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a44:	f3ef 8305 	mrs	r3, IPSR
 8009a48:	617b      	str	r3, [r7, #20]
  return(result);
 8009a4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d13d      	bne.n	8009acc <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a50:	f3ef 8310 	mrs	r3, PRIMASK
 8009a54:	613b      	str	r3, [r7, #16]
  return(result);
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d105      	bne.n	8009a68 <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8009a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d003      	beq.n	8009a70 <osEventFlagsNew+0x38>
 8009a68:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad8 <osEventFlagsNew+0xa0>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d02d      	beq.n	8009acc <osEventFlagsNew+0x94>
    mem = -1;
 8009a70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d015      	beq.n	8009aa8 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d006      	beq.n	8009a92 <osEventFlagsNew+0x5a>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b1f      	cmp	r3, #31
 8009a8a:	d902      	bls.n	8009a92 <osEventFlagsNew+0x5a>
        mem = 1;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	61bb      	str	r3, [r7, #24]
 8009a90:	e00c      	b.n	8009aac <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d108      	bne.n	8009aac <osEventFlagsNew+0x74>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d104      	bne.n	8009aac <osEventFlagsNew+0x74>
          mem = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	e001      	b.n	8009aac <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d106      	bne.n	8009ac0 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fdbc 	bl	800a634 <xEventGroupCreateStatic>
 8009abc:	61f8      	str	r0, [r7, #28]
 8009abe:	e005      	b.n	8009acc <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d102      	bne.n	8009acc <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8009ac6:	f000 fdf2 	bl	800a6ae <xEventGroupCreate>
 8009aca:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009acc:	69fb      	ldr	r3, [r7, #28]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20005664 	.word	0x20005664

08009adc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <osEventFlagsSet+0x1c>
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009af6:	d303      	bcc.n	8009b00 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8009af8:	f06f 0303 	mvn.w	r3, #3
 8009afc:	61fb      	str	r3, [r7, #28]
 8009afe:	e03a      	b.n	8009b76 <osEventFlagsSet+0x9a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b00:	f3ef 8305 	mrs	r3, IPSR
 8009b04:	617b      	str	r3, [r7, #20]
  return(result);
 8009b06:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10f      	bne.n	8009b2c <osEventFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b10:	613b      	str	r3, [r7, #16]
  return(result);
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d105      	bne.n	8009b24 <osEventFlagsSet+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b18:	f3ef 8311 	mrs	r3, BASEPRI
 8009b1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d021      	beq.n	8009b68 <osEventFlagsSet+0x8c>
 8009b24:	4b16      	ldr	r3, [pc, #88]	@ (8009b80 <osEventFlagsSet+0xa4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d11d      	bne.n	8009b68 <osEventFlagsSet+0x8c>
    yield = pdFALSE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009b30:	f107 0308 	add.w	r3, r7, #8
 8009b34:	461a      	mov	r2, r3
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	69b8      	ldr	r0, [r7, #24]
 8009b3a:	f000 ff6d 	bl	800aa18 <xEventGroupSetBitsFromISR>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d103      	bne.n	8009b4c <osEventFlagsSet+0x70>
      rflags = (uint32_t)osErrorResource;
 8009b44:	f06f 0302 	mvn.w	r3, #2
 8009b48:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009b4a:	e013      	b.n	8009b74 <osEventFlagsSet+0x98>
    } else {
      rflags = flags;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00e      	beq.n	8009b74 <osEventFlagsSet+0x98>
 8009b56:	4b0b      	ldr	r3, [pc, #44]	@ (8009b84 <osEventFlagsSet+0xa8>)
 8009b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b5c:	601a      	str	r2, [r3, #0]
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009b66:	e005      	b.n	8009b74 <osEventFlagsSet+0x98>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	69b8      	ldr	r0, [r7, #24]
 8009b6c:	f000 fe94 	bl	800a898 <xEventGroupSetBits>
 8009b70:	61f8      	str	r0, [r7, #28]
 8009b72:	e000      	b.n	8009b76 <osEventFlagsSet+0x9a>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009b74:	bf00      	nop
  }

  return (rflags);
 8009b76:	69fb      	ldr	r3, [r7, #28]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3720      	adds	r7, #32
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20005664 	.word	0x20005664
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08e      	sub	sp, #56	@ 0x38
 8009b8c:	af02      	add	r7, sp, #8
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <osEventFlagsWait+0x20>
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ba6:	d303      	bcc.n	8009bb0 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8009ba8:	f06f 0303 	mvn.w	r3, #3
 8009bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bae:	e059      	b.n	8009c64 <osEventFlagsWait+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bb0:	f3ef 8305 	mrs	r3, IPSR
 8009bb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8009bb6:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10f      	bne.n	8009bdc <osEventFlagsWait+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d105      	bne.n	8009bd4 <osEventFlagsWait+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8009bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d007      	beq.n	8009be4 <osEventFlagsWait+0x5c>
 8009bd4:	4b26      	ldr	r3, [pc, #152]	@ (8009c70 <osEventFlagsWait+0xe8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d103      	bne.n	8009be4 <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorISR;
 8009bdc:	f06f 0305 	mvn.w	r3, #5
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009be2:	e03f      	b.n	8009c64 <osEventFlagsWait+0xdc>
  }
  else {
    if (options & osFlagsWaitAll) {
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <osEventFlagsWait+0x6c>
      wait_all = pdTRUE;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bf2:	e001      	b.n	8009bf8 <osEventFlagsWait+0x70>
    } else {
      wait_all = pdFAIL;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    if (options & osFlagsNoClear) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d002      	beq.n	8009c08 <osEventFlagsWait+0x80>
      exit_clr = pdFAIL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c06:	e001      	b.n	8009c0c <osEventFlagsWait+0x84>
    } else {
      exit_clr = pdTRUE;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	6a38      	ldr	r0, [r7, #32]
 8009c18:	f000 fd64 	bl	800a6e4 <xEventGroupWaitBits>
 8009c1c:	6278      	str	r0, [r7, #36]	@ 0x24

    if (options & osFlagsWaitAll) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00e      	beq.n	8009c46 <osEventFlagsWait+0xbe>
      if (flags != rflags) {
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d019      	beq.n	8009c64 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <osEventFlagsWait+0xb6>
          rflags = (uint32_t)osErrorTimeout;
 8009c36:	f06f 0301 	mvn.w	r3, #1
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c3c:	e012      	b.n	8009c64 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009c3e:	f06f 0302 	mvn.w	r3, #2
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c44:	e00e      	b.n	8009c64 <osEventFlagsWait+0xdc>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d109      	bne.n	8009c64 <osEventFlagsWait+0xdc>
        if (timeout > 0U) {
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <osEventFlagsWait+0xd6>
          rflags = (uint32_t)osErrorTimeout;
 8009c56:	f06f 0301 	mvn.w	r3, #1
 8009c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c5c:	e002      	b.n	8009c64 <osEventFlagsWait+0xdc>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009c5e:	f06f 0302 	mvn.w	r3, #2
 8009c62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }
  }

  return (rflags);
 8009c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3730      	adds	r7, #48	@ 0x30
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20005664 	.word	0x20005664

08009c74 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08a      	sub	sp, #40	@ 0x28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c80:	f3ef 8305 	mrs	r3, IPSR
 8009c84:	613b      	str	r3, [r7, #16]
  return(result);
 8009c86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f040 8085 	bne.w	8009d98 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c92:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d105      	bne.n	8009ca6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009c9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <osMutexNew+0x3a>
 8009ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8009da4 <osMutexNew+0x130>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d074      	beq.n	8009d98 <osMutexNew+0x124>
    if (attr != NULL) {
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <osMutexNew+0x48>
      type = attr->attr_bits;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	623b      	str	r3, [r7, #32]
 8009cba:	e001      	b.n	8009cc0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <osMutexNew+0x5c>
      rmtx = 1U;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	61fb      	str	r3, [r7, #28]
 8009cce:	e001      	b.n	8009cd4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	f003 0308 	and.w	r3, r3, #8
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d15c      	bne.n	8009d98 <osMutexNew+0x124>
      mem = -1;
 8009cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ce2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d015      	beq.n	8009d16 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d006      	beq.n	8009d00 <osMutexNew+0x8c>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	2b4f      	cmp	r3, #79	@ 0x4f
 8009cf8:	d902      	bls.n	8009d00 <osMutexNew+0x8c>
          mem = 1;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	61bb      	str	r3, [r7, #24]
 8009cfe:	e00c      	b.n	8009d1a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d108      	bne.n	8009d1a <osMutexNew+0xa6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <osMutexNew+0xa6>
            mem = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	61bb      	str	r3, [r7, #24]
 8009d14:	e001      	b.n	8009d1a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d112      	bne.n	8009d46 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d007      	beq.n	8009d36 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	2004      	movs	r0, #4
 8009d2e:	f001 f8c6 	bl	800aebe <xQueueCreateMutexStatic>
 8009d32:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d34:	e016      	b.n	8009d64 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	2001      	movs	r0, #1
 8009d3e:	f001 f8be 	bl	800aebe <xQueueCreateMutexStatic>
 8009d42:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d44:	e00e      	b.n	8009d64 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10b      	bne.n	8009d64 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d004      	beq.n	8009d5c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8009d52:	2004      	movs	r0, #4
 8009d54:	f001 f89b 	bl	800ae8e <xQueueCreateMutex>
 8009d58:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d5a:	e003      	b.n	8009d64 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	f001 f896 	bl	800ae8e <xQueueCreateMutex>
 8009d62:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00c      	beq.n	8009d84 <osMutexNew+0x110>
        if (attr != NULL) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <osMutexNew+0x104>
          name = attr->name;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	617b      	str	r3, [r7, #20]
 8009d76:	e001      	b.n	8009d7c <osMutexNew+0x108>
        } else {
          name = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009d7c:	6979      	ldr	r1, [r7, #20]
 8009d7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d80:	f001 fffc 	bl	800bd7c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d006      	beq.n	8009d98 <osMutexNew+0x124>
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d92:	f043 0301 	orr.w	r3, r3, #1
 8009d96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3728      	adds	r7, #40	@ 0x28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20005664 	.word	0x20005664

08009da8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dc6:	f3ef 8305 	mrs	r3, IPSR
 8009dca:	613b      	str	r3, [r7, #16]
  return(result);
 8009dcc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10f      	bne.n	8009df2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8009dd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d105      	bne.n	8009dea <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009dde:	f3ef 8311 	mrs	r3, BASEPRI
 8009de2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d007      	beq.n	8009dfa <osMutexAcquire+0x52>
 8009dea:	4b1d      	ldr	r3, [pc, #116]	@ (8009e60 <osMutexAcquire+0xb8>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d103      	bne.n	8009dfa <osMutexAcquire+0x52>
    stat = osErrorISR;
 8009df2:	f06f 0305 	mvn.w	r3, #5
 8009df6:	61fb      	str	r3, [r7, #28]
 8009df8:	e02c      	b.n	8009e54 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d103      	bne.n	8009e08 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009e00:	f06f 0303 	mvn.w	r3, #3
 8009e04:	61fb      	str	r3, [r7, #28]
 8009e06:	e025      	b.n	8009e54 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d011      	beq.n	8009e32 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	69b8      	ldr	r0, [r7, #24]
 8009e12:	f001 f8a6 	bl	800af62 <xQueueTakeMutexRecursive>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d01b      	beq.n	8009e54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8009e22:	f06f 0301 	mvn.w	r3, #1
 8009e26:	61fb      	str	r3, [r7, #28]
 8009e28:	e014      	b.n	8009e54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009e2a:	f06f 0302 	mvn.w	r3, #2
 8009e2e:	61fb      	str	r3, [r7, #28]
 8009e30:	e010      	b.n	8009e54 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	69b8      	ldr	r0, [r7, #24]
 8009e36:	f001 fc71 	bl	800b71c <xQueueSemaphoreTake>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d009      	beq.n	8009e54 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8009e46:	f06f 0301 	mvn.w	r3, #1
 8009e4a:	61fb      	str	r3, [r7, #28]
 8009e4c:	e002      	b.n	8009e54 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009e4e:	f06f 0302 	mvn.w	r3, #2
 8009e52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009e54:	69fb      	ldr	r3, [r7, #28]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20005664 	.word	0x20005664

08009e64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f023 0301 	bic.w	r3, r3, #1
 8009e72:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e80:	f3ef 8305 	mrs	r3, IPSR
 8009e84:	613b      	str	r3, [r7, #16]
  return(result);
 8009e86:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10f      	bne.n	8009eac <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d105      	bne.n	8009ea4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e98:	f3ef 8311 	mrs	r3, BASEPRI
 8009e9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <osMutexRelease+0x50>
 8009ea4:	4b16      	ldr	r3, [pc, #88]	@ (8009f00 <osMutexRelease+0x9c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d103      	bne.n	8009eb4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8009eac:	f06f 0305 	mvn.w	r3, #5
 8009eb0:	61fb      	str	r3, [r7, #28]
 8009eb2:	e01f      	b.n	8009ef4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d103      	bne.n	8009ec2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009eba:	f06f 0303 	mvn.w	r3, #3
 8009ebe:	61fb      	str	r3, [r7, #28]
 8009ec0:	e018      	b.n	8009ef4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d009      	beq.n	8009edc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009ec8:	69b8      	ldr	r0, [r7, #24]
 8009eca:	f001 f813 	bl	800aef4 <xQueueGiveMutexRecursive>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d00f      	beq.n	8009ef4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009ed4:	f06f 0302 	mvn.w	r3, #2
 8009ed8:	61fb      	str	r3, [r7, #28]
 8009eda:	e00b      	b.n	8009ef4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009edc:	2300      	movs	r3, #0
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	69b8      	ldr	r0, [r7, #24]
 8009ee4:	f001 f8ec 	bl	800b0c0 <xQueueGenericSend>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d002      	beq.n	8009ef4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8009eee:	f06f 0302 	mvn.w	r3, #2
 8009ef2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8009ef4:	69fb      	ldr	r3, [r7, #28]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20005664 	.word	0x20005664

08009f04 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08c      	sub	sp, #48	@ 0x30
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009f10:	2300      	movs	r3, #0
 8009f12:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f14:	f3ef 8305 	mrs	r3, IPSR
 8009f18:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f1a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f040 8086 	bne.w	800a02e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f22:	f3ef 8310 	mrs	r3, PRIMASK
 8009f26:	617b      	str	r3, [r7, #20]
  return(result);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d105      	bne.n	8009f3a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8009f32:	613b      	str	r3, [r7, #16]
  return(result);
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <osSemaphoreNew+0x3e>
 8009f3a:	4b3f      	ldr	r3, [pc, #252]	@ (800a038 <osSemaphoreNew+0x134>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d075      	beq.n	800a02e <osSemaphoreNew+0x12a>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d072      	beq.n	800a02e <osSemaphoreNew+0x12a>
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d86e      	bhi.n	800a02e <osSemaphoreNew+0x12a>
    mem = -1;
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d015      	beq.n	8009f88 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d006      	beq.n	8009f72 <osSemaphoreNew+0x6e>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	2b4f      	cmp	r3, #79	@ 0x4f
 8009f6a:	d902      	bls.n	8009f72 <osSemaphoreNew+0x6e>
        mem = 1;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	623b      	str	r3, [r7, #32]
 8009f70:	e00c      	b.n	8009f8c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d108      	bne.n	8009f8c <osSemaphoreNew+0x88>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <osSemaphoreNew+0x88>
          mem = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	623b      	str	r3, [r7, #32]
 8009f86:	e001      	b.n	8009f8c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f92:	d04c      	beq.n	800a02e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d128      	bne.n	8009fec <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d10a      	bne.n	8009fb6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	2203      	movs	r2, #3
 8009fa6:	9200      	str	r2, [sp, #0]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2100      	movs	r1, #0
 8009fac:	2001      	movs	r0, #1
 8009fae:	f000 fe67 	bl	800ac80 <xQueueGenericCreateStatic>
 8009fb2:	6278      	str	r0, [r7, #36]	@ 0x24
 8009fb4:	e005      	b.n	8009fc2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8009fb6:	2203      	movs	r2, #3
 8009fb8:	2100      	movs	r1, #0
 8009fba:	2001      	movs	r0, #1
 8009fbc:	f000 fee7 	bl	800ad8e <xQueueGenericCreate>
 8009fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d022      	beq.n	800a00e <osSemaphoreNew+0x10a>
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d01f      	beq.n	800a00e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009fce:	2300      	movs	r3, #0
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009fd6:	f001 f873 	bl	800b0c0 <xQueueGenericSend>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d016      	beq.n	800a00e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8009fe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009fe2:	f001 fd7d 	bl	800bae0 <vQueueDelete>
            hSemaphore = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fea:	e010      	b.n	800a00e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8009fec:	6a3b      	ldr	r3, [r7, #32]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d108      	bne.n	800a004 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68b9      	ldr	r1, [r7, #8]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 ffea 	bl	800afd4 <xQueueCreateCountingSemaphoreStatic>
 800a000:	6278      	str	r0, [r7, #36]	@ 0x24
 800a002:	e004      	b.n	800a00e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f001 f821 	bl	800b04e <xQueueCreateCountingSemaphore>
 800a00c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00c      	beq.n	800a02e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <osSemaphoreNew+0x11e>
          name = attr->name;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	61fb      	str	r3, [r7, #28]
 800a020:	e001      	b.n	800a026 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a022:	2300      	movs	r3, #0
 800a024:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a026:	69f9      	ldr	r1, [r7, #28]
 800a028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a02a:	f001 fea7 	bl	800bd7c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a030:	4618      	mov	r0, r3
 800a032:	3728      	adds	r7, #40	@ 0x28
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20005664 	.word	0x20005664

0800a03c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b088      	sub	sp, #32
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d103      	bne.n	800a05c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a054:	f06f 0303 	mvn.w	r3, #3
 800a058:	61fb      	str	r3, [r7, #28]
 800a05a:	e04b      	b.n	800a0f4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a05c:	f3ef 8305 	mrs	r3, IPSR
 800a060:	617b      	str	r3, [r7, #20]
  return(result);
 800a062:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10f      	bne.n	800a088 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a068:	f3ef 8310 	mrs	r3, PRIMASK
 800a06c:	613b      	str	r3, [r7, #16]
  return(result);
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d105      	bne.n	800a080 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a074:	f3ef 8311 	mrs	r3, BASEPRI
 800a078:	60fb      	str	r3, [r7, #12]
  return(result);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d026      	beq.n	800a0ce <osSemaphoreAcquire+0x92>
 800a080:	4b1f      	ldr	r3, [pc, #124]	@ (800a100 <osSemaphoreAcquire+0xc4>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d122      	bne.n	800a0ce <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a08e:	f06f 0303 	mvn.w	r3, #3
 800a092:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a094:	e02d      	b.n	800a0f2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a096:	2300      	movs	r3, #0
 800a098:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a09a:	f107 0308 	add.w	r3, r7, #8
 800a09e:	461a      	mov	r2, r3
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	69b8      	ldr	r0, [r7, #24]
 800a0a4:	f001 fc52 	bl	800b94c <xQueueReceiveFromISR>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d003      	beq.n	800a0b6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a0ae:	f06f 0302 	mvn.w	r3, #2
 800a0b2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a0b4:	e01d      	b.n	800a0f2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d01a      	beq.n	800a0f2 <osSemaphoreAcquire+0xb6>
 800a0bc:	4b11      	ldr	r3, [pc, #68]	@ (800a104 <osSemaphoreAcquire+0xc8>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a0cc:	e011      	b.n	800a0f2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	69b8      	ldr	r0, [r7, #24]
 800a0d2:	f001 fb23 	bl	800b71c <xQueueSemaphoreTake>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d00b      	beq.n	800a0f4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a0e2:	f06f 0301 	mvn.w	r3, #1
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	e004      	b.n	800a0f4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a0ea:	f06f 0302 	mvn.w	r3, #2
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	e000      	b.n	800a0f4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a0f2:	bf00      	nop
      }
    }
  }

  return (stat);
 800a0f4:	69fb      	ldr	r3, [r7, #28]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3720      	adds	r7, #32
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20005664 	.word	0x20005664
 800a104:	e000ed04 	.word	0xe000ed04

0800a108 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a114:	2300      	movs	r3, #0
 800a116:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d103      	bne.n	800a126 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a11e:	f06f 0303 	mvn.w	r3, #3
 800a122:	61fb      	str	r3, [r7, #28]
 800a124:	e03e      	b.n	800a1a4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a126:	f3ef 8305 	mrs	r3, IPSR
 800a12a:	617b      	str	r3, [r7, #20]
  return(result);
 800a12c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10f      	bne.n	800a152 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a132:	f3ef 8310 	mrs	r3, PRIMASK
 800a136:	613b      	str	r3, [r7, #16]
  return(result);
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d105      	bne.n	800a14a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a13e:	f3ef 8311 	mrs	r3, BASEPRI
 800a142:	60fb      	str	r3, [r7, #12]
  return(result);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d01e      	beq.n	800a188 <osSemaphoreRelease+0x80>
 800a14a:	4b19      	ldr	r3, [pc, #100]	@ (800a1b0 <osSemaphoreRelease+0xa8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d11a      	bne.n	800a188 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a152:	2300      	movs	r3, #0
 800a154:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a156:	f107 0308 	add.w	r3, r7, #8
 800a15a:	4619      	mov	r1, r3
 800a15c:	69b8      	ldr	r0, [r7, #24]
 800a15e:	f001 f95c 	bl	800b41a <xQueueGiveFromISR>
 800a162:	4603      	mov	r3, r0
 800a164:	2b01      	cmp	r3, #1
 800a166:	d003      	beq.n	800a170 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a168:	f06f 0302 	mvn.w	r3, #2
 800a16c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a16e:	e018      	b.n	800a1a2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d015      	beq.n	800a1a2 <osSemaphoreRelease+0x9a>
 800a176:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b4 <osSemaphoreRelease+0xac>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a186:	e00c      	b.n	800a1a2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a188:	2300      	movs	r3, #0
 800a18a:	2200      	movs	r2, #0
 800a18c:	2100      	movs	r1, #0
 800a18e:	69b8      	ldr	r0, [r7, #24]
 800a190:	f000 ff96 	bl	800b0c0 <xQueueGenericSend>
 800a194:	4603      	mov	r3, r0
 800a196:	2b01      	cmp	r3, #1
 800a198:	d004      	beq.n	800a1a4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a19a:	f06f 0302 	mvn.w	r3, #2
 800a19e:	61fb      	str	r3, [r7, #28]
 800a1a0:	e000      	b.n	800a1a4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1a2:	bf00      	nop
    }
  }

  return (stat);
 800a1a4:	69fb      	ldr	r3, [r7, #28]
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3720      	adds	r7, #32
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20005664 	.word	0x20005664
 800a1b4:	e000ed04 	.word	0xe000ed04

0800a1b8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c4:	f3ef 8305 	mrs	r3, IPSR
 800a1c8:	617b      	str	r3, [r7, #20]
  return(result);
 800a1ca:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10f      	bne.n	800a1f0 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d4:	613b      	str	r3, [r7, #16]
  return(result);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d105      	bne.n	800a1e8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1dc:	f3ef 8311 	mrs	r3, BASEPRI
 800a1e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d007      	beq.n	800a1f8 <osSemaphoreDelete+0x40>
 800a1e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a220 <osSemaphoreDelete+0x68>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d103      	bne.n	800a1f8 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800a1f0:	f06f 0305 	mvn.w	r3, #5
 800a1f4:	61fb      	str	r3, [r7, #28]
 800a1f6:	e00e      	b.n	800a216 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d103      	bne.n	800a206 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800a1fe:	f06f 0303 	mvn.w	r3, #3
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e007      	b.n	800a216 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a206:	69b8      	ldr	r0, [r7, #24]
 800a208:	f001 fde2 	bl	800bdd0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800a210:	69b8      	ldr	r0, [r7, #24]
 800a212:	f001 fc65 	bl	800bae0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a216:	69fb      	ldr	r3, [r7, #28]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3720      	adds	r7, #32
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	20005664 	.word	0x20005664

0800a224 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b08c      	sub	sp, #48	@ 0x30
 800a228:	af02      	add	r7, sp, #8
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a230:	2300      	movs	r3, #0
 800a232:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a234:	f3ef 8305 	mrs	r3, IPSR
 800a238:	61bb      	str	r3, [r7, #24]
  return(result);
 800a23a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d16f      	bne.n	800a320 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a240:	f3ef 8310 	mrs	r3, PRIMASK
 800a244:	617b      	str	r3, [r7, #20]
  return(result);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d105      	bne.n	800a258 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a24c:	f3ef 8311 	mrs	r3, BASEPRI
 800a250:	613b      	str	r3, [r7, #16]
  return(result);
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d003      	beq.n	800a260 <osMessageQueueNew+0x3c>
 800a258:	4b34      	ldr	r3, [pc, #208]	@ (800a32c <osMessageQueueNew+0x108>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d05f      	beq.n	800a320 <osMessageQueueNew+0xfc>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d05c      	beq.n	800a320 <osMessageQueueNew+0xfc>
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d059      	beq.n	800a320 <osMessageQueueNew+0xfc>
    mem = -1;
 800a26c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a270:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d029      	beq.n	800a2cc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d012      	beq.n	800a2a6 <osMessageQueueNew+0x82>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	2b4f      	cmp	r3, #79	@ 0x4f
 800a286:	d90e      	bls.n	800a2a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00a      	beq.n	800a2a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	695a      	ldr	r2, [r3, #20]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	fb01 f303 	mul.w	r3, r1, r3
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d302      	bcc.n	800a2a6 <osMessageQueueNew+0x82>
        mem = 1;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	623b      	str	r3, [r7, #32]
 800a2a4:	e014      	b.n	800a2d0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d110      	bne.n	800a2d0 <osMessageQueueNew+0xac>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10c      	bne.n	800a2d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d108      	bne.n	800a2d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d104      	bne.n	800a2d0 <osMessageQueueNew+0xac>
          mem = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	623b      	str	r3, [r7, #32]
 800a2ca:	e001      	b.n	800a2d0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a2d0:	6a3b      	ldr	r3, [r7, #32]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d10b      	bne.n	800a2ee <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	691a      	ldr	r2, [r3, #16]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	2100      	movs	r1, #0
 800a2e0:	9100      	str	r1, [sp, #0]
 800a2e2:	68b9      	ldr	r1, [r7, #8]
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 fccb 	bl	800ac80 <xQueueGenericCreateStatic>
 800a2ea:	6278      	str	r0, [r7, #36]	@ 0x24
 800a2ec:	e008      	b.n	800a300 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d105      	bne.n	800a300 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	68b9      	ldr	r1, [r7, #8]
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 fd48 	bl	800ad8e <xQueueGenericCreate>
 800a2fe:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d003      	beq.n	800a314 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	61fb      	str	r3, [r7, #28]
 800a312:	e001      	b.n	800a318 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a314:	2300      	movs	r3, #0
 800a316:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a318:	69f9      	ldr	r1, [r7, #28]
 800a31a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a31c:	f001 fd2e 	bl	800bd7c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a322:	4618      	mov	r0, r3
 800a324:	3728      	adds	r7, #40	@ 0x28
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20005664 	.word	0x20005664

0800a330 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a330:	b580      	push	{r7, lr}
 800a332:	b08a      	sub	sp, #40	@ 0x28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	4613      	mov	r3, r2
 800a33e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a344:	2300      	movs	r3, #0
 800a346:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a348:	f3ef 8305 	mrs	r3, IPSR
 800a34c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a34e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10f      	bne.n	800a374 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a354:	f3ef 8310 	mrs	r3, PRIMASK
 800a358:	61bb      	str	r3, [r7, #24]
  return(result);
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a360:	f3ef 8311 	mrs	r3, BASEPRI
 800a364:	617b      	str	r3, [r7, #20]
  return(result);
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d02c      	beq.n	800a3c6 <osMessageQueuePut+0x96>
 800a36c:	4b28      	ldr	r3, [pc, #160]	@ (800a410 <osMessageQueuePut+0xe0>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b02      	cmp	r3, #2
 800a372:	d128      	bne.n	800a3c6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d005      	beq.n	800a386 <osMessageQueuePut+0x56>
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <osMessageQueuePut+0x56>
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a386:	f06f 0303 	mvn.w	r3, #3
 800a38a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a38c:	e039      	b.n	800a402 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a38e:	2300      	movs	r3, #0
 800a390:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a392:	f107 0210 	add.w	r2, r7, #16
 800a396:	2300      	movs	r3, #0
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	6a38      	ldr	r0, [r7, #32]
 800a39c:	f000 ff9a 	bl	800b2d4 <xQueueGenericSendFromISR>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d003      	beq.n	800a3ae <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800a3a6:	f06f 0302 	mvn.w	r3, #2
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a3ac:	e029      	b.n	800a402 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d026      	beq.n	800a402 <osMessageQueuePut+0xd2>
 800a3b4:	4b17      	ldr	r3, [pc, #92]	@ (800a414 <osMessageQueuePut+0xe4>)
 800a3b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a3c4:	e01d      	b.n	800a402 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <osMessageQueuePut+0xa2>
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d103      	bne.n	800a3da <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800a3d2:	f06f 0303 	mvn.w	r3, #3
 800a3d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3d8:	e014      	b.n	800a404 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a3da:	2300      	movs	r3, #0
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	6a38      	ldr	r0, [r7, #32]
 800a3e2:	f000 fe6d 	bl	800b0c0 <xQueueGenericSend>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d00b      	beq.n	800a404 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800a3f2:	f06f 0301 	mvn.w	r3, #1
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3f8:	e004      	b.n	800a404 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800a3fa:	f06f 0302 	mvn.w	r3, #2
 800a3fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800a400:	e000      	b.n	800a404 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a402:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a406:	4618      	mov	r0, r3
 800a408:	3728      	adds	r7, #40	@ 0x28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20005664 	.word	0x20005664
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08a      	sub	sp, #40	@ 0x28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a42e:	f3ef 8305 	mrs	r3, IPSR
 800a432:	61fb      	str	r3, [r7, #28]
  return(result);
 800a434:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10f      	bne.n	800a45a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a43a:	f3ef 8310 	mrs	r3, PRIMASK
 800a43e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d105      	bne.n	800a452 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a446:	f3ef 8311 	mrs	r3, BASEPRI
 800a44a:	617b      	str	r3, [r7, #20]
  return(result);
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d02c      	beq.n	800a4ac <osMessageQueueGet+0x94>
 800a452:	4b28      	ldr	r3, [pc, #160]	@ (800a4f4 <osMessageQueueGet+0xdc>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b02      	cmp	r3, #2
 800a458:	d128      	bne.n	800a4ac <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d005      	beq.n	800a46c <osMessageQueueGet+0x54>
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <osMessageQueueGet+0x54>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d003      	beq.n	800a474 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800a46c:	f06f 0303 	mvn.w	r3, #3
 800a470:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a472:	e038      	b.n	800a4e6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800a474:	2300      	movs	r3, #0
 800a476:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a478:	f107 0310 	add.w	r3, r7, #16
 800a47c:	461a      	mov	r2, r3
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	6a38      	ldr	r0, [r7, #32]
 800a482:	f001 fa63 	bl	800b94c <xQueueReceiveFromISR>
 800a486:	4603      	mov	r3, r0
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d003      	beq.n	800a494 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800a48c:	f06f 0302 	mvn.w	r3, #2
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a492:	e028      	b.n	800a4e6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d025      	beq.n	800a4e6 <osMessageQueueGet+0xce>
 800a49a:	4b17      	ldr	r3, [pc, #92]	@ (800a4f8 <osMessageQueueGet+0xe0>)
 800a49c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4aa:	e01c      	b.n	800a4e6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <osMessageQueueGet+0xa0>
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d103      	bne.n	800a4c0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800a4b8:	f06f 0303 	mvn.w	r3, #3
 800a4bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4be:	e013      	b.n	800a4e8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	6a38      	ldr	r0, [r7, #32]
 800a4c6:	f001 f841 	bl	800b54c <xQueueReceive>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d00b      	beq.n	800a4e8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800a4d6:	f06f 0301 	mvn.w	r3, #1
 800a4da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4dc:	e004      	b.n	800a4e8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800a4de:	f06f 0302 	mvn.w	r3, #2
 800a4e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4e4:	e000      	b.n	800a4e8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3728      	adds	r7, #40	@ 0x28
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	20005664 	.word	0x20005664
 800a4f8:	e000ed04 	.word	0xe000ed04

0800a4fc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d102      	bne.n	800a514 <osMessageQueueGetCount+0x18>
    count = 0U;
 800a50e:	2300      	movs	r3, #0
 800a510:	61fb      	str	r3, [r7, #28]
 800a512:	e01e      	b.n	800a552 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a514:	f3ef 8305 	mrs	r3, IPSR
 800a518:	617b      	str	r3, [r7, #20]
  return(result);
 800a51a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10f      	bne.n	800a540 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a520:	f3ef 8310 	mrs	r3, PRIMASK
 800a524:	613b      	str	r3, [r7, #16]
  return(result);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d105      	bne.n	800a538 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a52c:	f3ef 8311 	mrs	r3, BASEPRI
 800a530:	60fb      	str	r3, [r7, #12]
  return(result);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d008      	beq.n	800a54a <osMessageQueueGetCount+0x4e>
 800a538:	4b08      	ldr	r3, [pc, #32]	@ (800a55c <osMessageQueueGetCount+0x60>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d104      	bne.n	800a54a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800a540:	69b8      	ldr	r0, [r7, #24]
 800a542:	f001 faac 	bl	800ba9e <uxQueueMessagesWaitingFromISR>
 800a546:	61f8      	str	r0, [r7, #28]
 800a548:	e003      	b.n	800a552 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800a54a:	69b8      	ldr	r0, [r7, #24]
 800a54c:	f001 fa86 	bl	800ba5c <uxQueueMessagesWaiting>
 800a550:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800a552:	69fb      	ldr	r3, [r7, #28]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3720      	adds	r7, #32
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	20005664 	.word	0x20005664

0800a560 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a56c:	f3ef 8305 	mrs	r3, IPSR
 800a570:	617b      	str	r3, [r7, #20]
  return(result);
 800a572:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10f      	bne.n	800a598 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a578:	f3ef 8310 	mrs	r3, PRIMASK
 800a57c:	613b      	str	r3, [r7, #16]
  return(result);
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a584:	f3ef 8311 	mrs	r3, BASEPRI
 800a588:	60fb      	str	r3, [r7, #12]
  return(result);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d007      	beq.n	800a5a0 <osMessageQueueDelete+0x40>
 800a590:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c8 <osMessageQueueDelete+0x68>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d103      	bne.n	800a5a0 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800a598:	f06f 0305 	mvn.w	r3, #5
 800a59c:	61fb      	str	r3, [r7, #28]
 800a59e:	e00e      	b.n	800a5be <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d103      	bne.n	800a5ae <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800a5a6:	f06f 0303 	mvn.w	r3, #3
 800a5aa:	61fb      	str	r3, [r7, #28]
 800a5ac:	e007      	b.n	800a5be <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800a5ae:	69b8      	ldr	r0, [r7, #24]
 800a5b0:	f001 fc0e 	bl	800bdd0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800a5b8:	69b8      	ldr	r0, [r7, #24]
 800a5ba:	f001 fa91 	bl	800bae0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a5be:	69fb      	ldr	r3, [r7, #28]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20005664 	.word	0x20005664

0800a5cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	4a07      	ldr	r2, [pc, #28]	@ (800a5f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a5dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	4a06      	ldr	r2, [pc, #24]	@ (800a5fc <vApplicationGetIdleTaskMemory+0x30>)
 800a5e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5ea:	601a      	str	r2, [r3, #0]
}
 800a5ec:	bf00      	nop
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	20005668 	.word	0x20005668
 800a5fc:	20005710 	.word	0x20005710

0800a600 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4a07      	ldr	r2, [pc, #28]	@ (800a62c <vApplicationGetTimerTaskMemory+0x2c>)
 800a610:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4a06      	ldr	r2, [pc, #24]	@ (800a630 <vApplicationGetTimerTaskMemory+0x30>)
 800a616:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a61e:	601a      	str	r2, [r3, #0]
}
 800a620:	bf00      	nop
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	20005f10 	.word	0x20005f10
 800a630:	20005fb8 	.word	0x20005fb8

0800a634 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10d      	bne.n	800a65e <xEventGroupCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a646:	b672      	cpsid	i
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	b662      	cpsie	i
 800a656:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a658:	bf00      	nop
 800a65a:	bf00      	nop
 800a65c:	e7fd      	b.n	800a65a <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800a65e:	2320      	movs	r3, #32
 800a660:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	2b20      	cmp	r3, #32
 800a666:	d00d      	beq.n	800a684 <xEventGroupCreateStatic+0x50>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66c:	b672      	cpsid	i
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	b662      	cpsie	i
 800a67c:	60fb      	str	r3, [r7, #12]
}
 800a67e:	bf00      	nop
 800a680:	bf00      	nop
 800a682:	e7fd      	b.n	800a680 <xEventGroupCreateStatic+0x4c>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <xEventGroupCreateStatic+0x70>
		{
			pxEventBits->uxEventBits = 0;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	3304      	adds	r3, #4
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 f9d1 	bl	800aa40 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800a6a4:	697b      	ldr	r3, [r7, #20]
	}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a6b4:	2020      	movs	r0, #32
 800a6b6:	f003 fab7 	bl	800dc28 <pvPortMalloc>
 800a6ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f9b7 	bl	800aa40 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a6d8:	687b      	ldr	r3, [r7, #4]
	}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
	...

0800a6e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b090      	sub	sp, #64	@ 0x40
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10d      	bne.n	800a720 <xEventGroupWaitBits+0x3c>
	__asm volatile
 800a704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a708:	b672      	cpsid	i
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	b662      	cpsie	i
 800a718:	623b      	str	r3, [r7, #32]
}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	e7fd      	b.n	800a71c <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a726:	d30d      	bcc.n	800a744 <xEventGroupWaitBits+0x60>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	b672      	cpsid	i
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	b662      	cpsie	i
 800a73c:	61fb      	str	r3, [r7, #28]
}
 800a73e:	bf00      	nop
 800a740:	bf00      	nop
 800a742:	e7fd      	b.n	800a740 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10d      	bne.n	800a766 <xEventGroupWaitBits+0x82>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74e:	b672      	cpsid	i
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	b662      	cpsie	i
 800a75e:	61bb      	str	r3, [r7, #24]
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	e7fd      	b.n	800a762 <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a766:	f002 fa95 	bl	800cc94 <xTaskGetSchedulerState>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <xEventGroupWaitBits+0x92>
 800a770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <xEventGroupWaitBits+0x96>
 800a776:	2301      	movs	r3, #1
 800a778:	e000      	b.n	800a77c <xEventGroupWaitBits+0x98>
 800a77a:	2300      	movs	r3, #0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10d      	bne.n	800a79c <xEventGroupWaitBits+0xb8>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a784:	b672      	cpsid	i
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	b662      	cpsie	i
 800a794:	617b      	str	r3, [r7, #20]
}
 800a796:	bf00      	nop
 800a798:	bf00      	nop
 800a79a:	e7fd      	b.n	800a798 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 800a79c:	f001 fde8 	bl	800c370 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	68b9      	ldr	r1, [r7, #8]
 800a7aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a7ac:	f000 f911 	bl	800a9d2 <prvTestWaitCondition>
 800a7b0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00e      	beq.n	800a7d6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d028      	beq.n	800a818 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	43db      	mvns	r3, r3
 800a7ce:	401a      	ands	r2, r3
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	e020      	b.n	800a818 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a7d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d104      	bne.n	800a7e6 <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7e4:	e018      	b.n	800a818 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a7f2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a800:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a804:	1d18      	adds	r0, r3, #4
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80a:	4313      	orrs	r3, r2
 800a80c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a80e:	4619      	mov	r1, r3
 800a810:	f001 ffee 	bl	800c7f0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a818:	f001 fdb8 	bl	800c38c <xTaskResumeAll>
 800a81c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a81e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a820:	2b00      	cmp	r3, #0
 800a822:	d031      	beq.n	800a888 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 800a824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a826:	2b00      	cmp	r3, #0
 800a828:	d107      	bne.n	800a83a <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 800a82a:	4b1a      	ldr	r3, [pc, #104]	@ (800a894 <xEventGroupWaitBits+0x1b0>)
 800a82c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a83a:	f002 fbad 	bl	800cf98 <uxTaskResetEventItemValue>
 800a83e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d11a      	bne.n	800a880 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 800a84a:	f003 f8bf 	bl	800d9cc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	68b9      	ldr	r1, [r7, #8]
 800a858:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a85a:	f000 f8ba 	bl	800a9d2 <prvTestWaitCondition>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d009      	beq.n	800a878 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d006      	beq.n	800a878 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	43db      	mvns	r3, r3
 800a872:	401a      	ands	r2, r3
 800a874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a876:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a878:	2301      	movs	r3, #1
 800a87a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800a87c:	f003 f8dc 	bl	800da38 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a882:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3740      	adds	r7, #64	@ 0x40
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	e000ed04 	.word	0xe000ed04

0800a898 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08e      	sub	sp, #56	@ 0x38
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10d      	bne.n	800a8d0 <xEventGroupSetBits+0x38>
	__asm volatile
 800a8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b8:	b672      	cpsid	i
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	b662      	cpsie	i
 800a8c8:	613b      	str	r3, [r7, #16]
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	e7fd      	b.n	800a8cc <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8d6:	d30d      	bcc.n	800a8f4 <xEventGroupSetBits+0x5c>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8dc:	b672      	cpsid	i
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	b662      	cpsie	i
 800a8ec:	60fb      	str	r3, [r7, #12]
}
 800a8ee:	bf00      	nop
 800a8f0:	bf00      	nop
 800a8f2:	e7fd      	b.n	800a8f0 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	3308      	adds	r3, #8
 800a8fe:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a900:	f001 fd36 	bl	800c370 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	431a      	orrs	r2, r3
 800a912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a914:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a916:	e03c      	b.n	800a992 <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a91e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a924:	2300      	movs	r3, #0
 800a926:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a92e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a936:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d108      	bne.n	800a954 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	4013      	ands	r3, r2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00b      	beq.n	800a966 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 800a94e:	2301      	movs	r3, #1
 800a950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a952:	e008      	b.n	800a966 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	4013      	ands	r3, r2
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d101      	bne.n	800a966 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a962:	2301      	movs	r3, #1
 800a964:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d010      	beq.n	800a98e <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a986:	4619      	mov	r1, r3
 800a988:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a98a:	f002 f807 	bl	800c99c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800a992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	429a      	cmp	r2, r3
 800a998:	d1be      	bne.n	800a918 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a0:	43db      	mvns	r3, r3
 800a9a2:	401a      	ands	r2, r3
 800a9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a9a8:	f001 fcf0 	bl	800c38c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ae:	681b      	ldr	r3, [r3, #0]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3738      	adds	r7, #56	@ 0x38
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff ff67 	bl	800a898 <xEventGroupSetBits>
}
 800a9ca:	bf00      	nop
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b087      	sub	sp, #28
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	60f8      	str	r0, [r7, #12]
 800a9da:	60b9      	str	r1, [r7, #8]
 800a9dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d107      	bne.n	800a9f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00a      	beq.n	800aa08 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	617b      	str	r3, [r7, #20]
 800a9f6:	e007      	b.n	800aa08 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d101      	bne.n	800aa08 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800aa04:	2301      	movs	r3, #1
 800aa06:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800aa08:	697b      	ldr	r3, [r7, #20]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	371c      	adds	r7, #28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
	...

0800aa18 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	68f9      	ldr	r1, [r7, #12]
 800aa2a:	4804      	ldr	r0, [pc, #16]	@ (800aa3c <xEventGroupSetBitsFromISR+0x24>)
 800aa2c:	f002 fe9c 	bl	800d768 <xTimerPendFunctionCallFromISR>
 800aa30:	6178      	str	r0, [r7, #20]

		return xReturn;
 800aa32:	697b      	ldr	r3, [r7, #20]
	}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	0800a9b9 	.word	0x0800a9b9

0800aa40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f103 0208 	add.w	r2, r3, #8
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f103 0208 	add.w	r2, r3, #8
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f103 0208 	add.w	r2, r3, #8
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b085      	sub	sp, #20
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	601a      	str	r2, [r3, #0]
}
 800aad6:	bf00      	nop
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aae2:	b480      	push	{r7}
 800aae4:	b085      	sub	sp, #20
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaf8:	d103      	bne.n	800ab02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	e00c      	b.n	800ab1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3308      	adds	r3, #8
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	e002      	b.n	800ab10 <vListInsert+0x2e>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d2f6      	bcs.n	800ab0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	601a      	str	r2, [r3, #0]
}
 800ab48:	bf00      	nop
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	6892      	ldr	r2, [r2, #8]
 800ab6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	6852      	ldr	r2, [r2, #4]
 800ab74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d103      	bne.n	800ab88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	689a      	ldr	r2, [r3, #8]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	1e5a      	subs	r2, r3, #1
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10d      	bne.n	800abd8 <xQueueGenericReset+0x30>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc0:	b672      	cpsid	i
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	b662      	cpsie	i
 800abd0:	60bb      	str	r3, [r7, #8]
}
 800abd2:	bf00      	nop
 800abd4:	bf00      	nop
 800abd6:	e7fd      	b.n	800abd4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800abd8:	f002 fef8 	bl	800d9cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abe4:	68f9      	ldr	r1, [r7, #12]
 800abe6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800abe8:	fb01 f303 	mul.w	r3, r1, r3
 800abec:	441a      	add	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	68f9      	ldr	r1, [r7, #12]
 800ac0c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ac0e:	fb01 f303 	mul.w	r3, r1, r3
 800ac12:	441a      	add	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	22ff      	movs	r2, #255	@ 0xff
 800ac1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	22ff      	movs	r2, #255	@ 0xff
 800ac24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d114      	bne.n	800ac58 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d01a      	beq.n	800ac6c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3310      	adds	r3, #16
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 fe48 	bl	800c8d0 <xTaskRemoveFromEventList>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d012      	beq.n	800ac6c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac46:	4b0d      	ldr	r3, [pc, #52]	@ (800ac7c <xQueueGenericReset+0xd4>)
 800ac48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	e009      	b.n	800ac6c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3310      	adds	r3, #16
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff feef 	bl	800aa40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3324      	adds	r3, #36	@ 0x24
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff feea 	bl	800aa40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac6c:	f002 fee4 	bl	800da38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac70:	2301      	movs	r3, #1
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08e      	sub	sp, #56	@ 0x38
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
 800ac8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10d      	bne.n	800acb0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac98:	b672      	cpsid	i
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	b662      	cpsie	i
 800aca8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800acaa:	bf00      	nop
 800acac:	bf00      	nop
 800acae:	e7fd      	b.n	800acac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10d      	bne.n	800acd2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800acb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acba:	b672      	cpsid	i
 800acbc:	f383 8811 	msr	BASEPRI, r3
 800acc0:	f3bf 8f6f 	isb	sy
 800acc4:	f3bf 8f4f 	dsb	sy
 800acc8:	b662      	cpsie	i
 800acca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	e7fd      	b.n	800acce <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <xQueueGenericCreateStatic+0x5e>
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d001      	beq.n	800ace2 <xQueueGenericCreateStatic+0x62>
 800acde:	2301      	movs	r3, #1
 800ace0:	e000      	b.n	800ace4 <xQueueGenericCreateStatic+0x64>
 800ace2:	2300      	movs	r3, #0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10d      	bne.n	800ad04 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acec:	b672      	cpsid	i
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	b662      	cpsie	i
 800acfc:	623b      	str	r3, [r7, #32]
}
 800acfe:	bf00      	nop
 800ad00:	bf00      	nop
 800ad02:	e7fd      	b.n	800ad00 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d102      	bne.n	800ad10 <xQueueGenericCreateStatic+0x90>
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <xQueueGenericCreateStatic+0x94>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e000      	b.n	800ad16 <xQueueGenericCreateStatic+0x96>
 800ad14:	2300      	movs	r3, #0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10d      	bne.n	800ad36 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1e:	b672      	cpsid	i
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	b662      	cpsie	i
 800ad2e:	61fb      	str	r3, [r7, #28]
}
 800ad30:	bf00      	nop
 800ad32:	bf00      	nop
 800ad34:	e7fd      	b.n	800ad32 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad36:	2350      	movs	r3, #80	@ 0x50
 800ad38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b50      	cmp	r3, #80	@ 0x50
 800ad3e:	d00d      	beq.n	800ad5c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad44:	b672      	cpsid	i
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	b662      	cpsie	i
 800ad54:	61bb      	str	r3, [r7, #24]
}
 800ad56:	bf00      	nop
 800ad58:	bf00      	nop
 800ad5a:	e7fd      	b.n	800ad58 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ad62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00d      	beq.n	800ad84 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ad74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 f848 	bl	800ae14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3730      	adds	r7, #48	@ 0x30
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b08a      	sub	sp, #40	@ 0x28
 800ad92:	af02      	add	r7, sp, #8
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10d      	bne.n	800adbe <xQueueGenericCreate+0x30>
	__asm volatile
 800ada2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada6:	b672      	cpsid	i
 800ada8:	f383 8811 	msr	BASEPRI, r3
 800adac:	f3bf 8f6f 	isb	sy
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	b662      	cpsie	i
 800adb6:	613b      	str	r3, [r7, #16]
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	e7fd      	b.n	800adba <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d102      	bne.n	800adca <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	61fb      	str	r3, [r7, #28]
 800adc8:	e004      	b.n	800add4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	fb02 f303 	mul.w	r3, r2, r3
 800add2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	3350      	adds	r3, #80	@ 0x50
 800add8:	4618      	mov	r0, r3
 800adda:	f002 ff25 	bl	800dc28 <pvPortMalloc>
 800adde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d011      	beq.n	800ae0a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	3350      	adds	r3, #80	@ 0x50
 800adee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adf8:	79fa      	ldrb	r2, [r7, #7]
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	4613      	mov	r3, r2
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f805 	bl	800ae14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae0a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d103      	bne.n	800ae30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	69ba      	ldr	r2, [r7, #24]
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	e002      	b.n	800ae36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae42:	2101      	movs	r1, #1
 800ae44:	69b8      	ldr	r0, [r7, #24]
 800ae46:	f7ff feaf 	bl	800aba8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	78fa      	ldrb	r2, [r7, #3]
 800ae4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b082      	sub	sp, #8
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00e      	beq.n	800ae86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2100      	movs	r1, #0
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f91d 	bl	800b0c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ae86:	bf00      	nop
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b086      	sub	sp, #24
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	4603      	mov	r3, r0
 800ae96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	461a      	mov	r2, r3
 800aea4:	6939      	ldr	r1, [r7, #16]
 800aea6:	6978      	ldr	r0, [r7, #20]
 800aea8:	f7ff ff71 	bl	800ad8e <xQueueGenericCreate>
 800aeac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f7ff ffd3 	bl	800ae5a <prvInitialiseMutex>

		return xNewQueue;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
	}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b088      	sub	sp, #32
 800aec2:	af02      	add	r7, sp, #8
 800aec4:	4603      	mov	r3, r0
 800aec6:	6039      	str	r1, [r7, #0]
 800aec8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aeca:	2301      	movs	r3, #1
 800aecc:	617b      	str	r3, [r7, #20]
 800aece:	2300      	movs	r3, #0
 800aed0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2200      	movs	r2, #0
 800aeda:	6939      	ldr	r1, [r7, #16]
 800aedc:	6978      	ldr	r0, [r7, #20]
 800aede:	f7ff fecf 	bl	800ac80 <xQueueGenericCreateStatic>
 800aee2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f7ff ffb8 	bl	800ae5a <prvInitialiseMutex>

		return xNewQueue;
 800aeea:	68fb      	ldr	r3, [r7, #12]
	}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800aef4:	b590      	push	{r4, r7, lr}
 800aef6:	b087      	sub	sp, #28
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10d      	bne.n	800af22 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0a:	b672      	cpsid	i
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	b662      	cpsie	i
 800af1a:	60fb      	str	r3, [r7, #12]
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	e7fd      	b.n	800af1e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	689c      	ldr	r4, [r3, #8]
 800af26:	f001 fea5 	bl	800cc74 <xTaskGetCurrentTaskHandle>
 800af2a:	4603      	mov	r3, r0
 800af2c:	429c      	cmp	r4, r3
 800af2e:	d111      	bne.n	800af54 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	1e5a      	subs	r2, r3, #1
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d105      	bne.n	800af4e <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800af42:	2300      	movs	r3, #0
 800af44:	2200      	movs	r2, #0
 800af46:	2100      	movs	r1, #0
 800af48:	6938      	ldr	r0, [r7, #16]
 800af4a:	f000 f8b9 	bl	800b0c0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800af4e:	2301      	movs	r3, #1
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	e001      	b.n	800af58 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800af54:	2300      	movs	r3, #0
 800af56:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800af58:	697b      	ldr	r3, [r7, #20]
	}
 800af5a:	4618      	mov	r0, r3
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd90      	pop	{r4, r7, pc}

0800af62 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800af62:	b590      	push	{r4, r7, lr}
 800af64:	b087      	sub	sp, #28
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10d      	bne.n	800af92 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	b672      	cpsid	i
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	b662      	cpsie	i
 800af8a:	60fb      	str	r3, [r7, #12]
}
 800af8c:	bf00      	nop
 800af8e:	bf00      	nop
 800af90:	e7fd      	b.n	800af8e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	689c      	ldr	r4, [r3, #8]
 800af96:	f001 fe6d 	bl	800cc74 <xTaskGetCurrentTaskHandle>
 800af9a:	4603      	mov	r3, r0
 800af9c:	429c      	cmp	r4, r3
 800af9e:	d107      	bne.n	800afb0 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800afaa:	2301      	movs	r3, #1
 800afac:	617b      	str	r3, [r7, #20]
 800afae:	e00c      	b.n	800afca <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6938      	ldr	r0, [r7, #16]
 800afb4:	f000 fbb2 	bl	800b71c <xQueueSemaphoreTake>
 800afb8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800afca:	697b      	ldr	r3, [r7, #20]
	}
 800afcc:	4618      	mov	r0, r3
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd90      	pop	{r4, r7, pc}

0800afd4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08a      	sub	sp, #40	@ 0x28
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10d      	bne.n	800b002 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afea:	b672      	cpsid	i
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	b662      	cpsie	i
 800affa:	61bb      	str	r3, [r7, #24]
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	e7fd      	b.n	800affe <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	429a      	cmp	r2, r3
 800b008:	d90d      	bls.n	800b026 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00e:	b672      	cpsid	i
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	b662      	cpsie	i
 800b01e:	617b      	str	r3, [r7, #20]
}
 800b020:	bf00      	nop
 800b022:	bf00      	nop
 800b024:	e7fd      	b.n	800b022 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b026:	2302      	movs	r3, #2
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	2100      	movs	r1, #0
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff fe25 	bl	800ac80 <xQueueGenericCreateStatic>
 800b036:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b044:	69fb      	ldr	r3, [r7, #28]
	}
 800b046:	4618      	mov	r0, r3
 800b048:	3720      	adds	r7, #32
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b086      	sub	sp, #24
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10d      	bne.n	800b07a <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b062:	b672      	cpsid	i
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	b662      	cpsie	i
 800b072:	613b      	str	r3, [r7, #16]
}
 800b074:	bf00      	nop
 800b076:	bf00      	nop
 800b078:	e7fd      	b.n	800b076 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d90d      	bls.n	800b09e <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b086:	b672      	cpsid	i
 800b088:	f383 8811 	msr	BASEPRI, r3
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	b662      	cpsie	i
 800b096:	60fb      	str	r3, [r7, #12]
}
 800b098:	bf00      	nop
 800b09a:	bf00      	nop
 800b09c:	e7fd      	b.n	800b09a <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b09e:	2202      	movs	r2, #2
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7ff fe73 	bl	800ad8e <xQueueGenericCreate>
 800b0a8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d002      	beq.n	800b0b6 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	683a      	ldr	r2, [r7, #0]
 800b0b4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b0b6:	697b      	ldr	r3, [r7, #20]
	}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3718      	adds	r7, #24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08e      	sub	sp, #56	@ 0x38
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10d      	bne.n	800b0f8 <xQueueGenericSend+0x38>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e0:	b672      	cpsid	i
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	b662      	cpsie	i
 800b0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b0f2:	bf00      	nop
 800b0f4:	bf00      	nop
 800b0f6:	e7fd      	b.n	800b0f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d103      	bne.n	800b106 <xQueueGenericSend+0x46>
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <xQueueGenericSend+0x4a>
 800b106:	2301      	movs	r3, #1
 800b108:	e000      	b.n	800b10c <xQueueGenericSend+0x4c>
 800b10a:	2300      	movs	r3, #0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10d      	bne.n	800b12c <xQueueGenericSend+0x6c>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b114:	b672      	cpsid	i
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	b662      	cpsie	i
 800b124:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b126:	bf00      	nop
 800b128:	bf00      	nop
 800b12a:	e7fd      	b.n	800b128 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d103      	bne.n	800b13a <xQueueGenericSend+0x7a>
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b136:	2b01      	cmp	r3, #1
 800b138:	d101      	bne.n	800b13e <xQueueGenericSend+0x7e>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e000      	b.n	800b140 <xQueueGenericSend+0x80>
 800b13e:	2300      	movs	r3, #0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d10d      	bne.n	800b160 <xQueueGenericSend+0xa0>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b148:	b672      	cpsid	i
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	b662      	cpsie	i
 800b158:	623b      	str	r3, [r7, #32]
}
 800b15a:	bf00      	nop
 800b15c:	bf00      	nop
 800b15e:	e7fd      	b.n	800b15c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b160:	f001 fd98 	bl	800cc94 <xTaskGetSchedulerState>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d102      	bne.n	800b170 <xQueueGenericSend+0xb0>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <xQueueGenericSend+0xb4>
 800b170:	2301      	movs	r3, #1
 800b172:	e000      	b.n	800b176 <xQueueGenericSend+0xb6>
 800b174:	2300      	movs	r3, #0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10d      	bne.n	800b196 <xQueueGenericSend+0xd6>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17e:	b672      	cpsid	i
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	b662      	cpsie	i
 800b18e:	61fb      	str	r3, [r7, #28]
}
 800b190:	bf00      	nop
 800b192:	bf00      	nop
 800b194:	e7fd      	b.n	800b192 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b196:	f002 fc19 	bl	800d9cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d302      	bcc.n	800b1ac <xQueueGenericSend+0xec>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b02      	cmp	r3, #2
 800b1aa:	d129      	bne.n	800b200 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b1b2:	f000 fcd3 	bl	800bb5c <prvCopyDataToQueue>
 800b1b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d010      	beq.n	800b1e2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c2:	3324      	adds	r3, #36	@ 0x24
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f001 fb83 	bl	800c8d0 <xTaskRemoveFromEventList>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d013      	beq.n	800b1f8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1d0:	4b3f      	ldr	r3, [pc, #252]	@ (800b2d0 <xQueueGenericSend+0x210>)
 800b1d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1d6:	601a      	str	r2, [r3, #0]
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	e00a      	b.n	800b1f8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d007      	beq.n	800b1f8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1e8:	4b39      	ldr	r3, [pc, #228]	@ (800b2d0 <xQueueGenericSend+0x210>)
 800b1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ee:	601a      	str	r2, [r3, #0]
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b1f8:	f002 fc1e 	bl	800da38 <vPortExitCritical>
				return pdPASS;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e063      	b.n	800b2c8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d103      	bne.n	800b20e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b206:	f002 fc17 	bl	800da38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	e05c      	b.n	800b2c8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b214:	f107 0314 	add.w	r3, r7, #20
 800b218:	4618      	mov	r0, r3
 800b21a:	f001 fc27 	bl	800ca6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b21e:	2301      	movs	r3, #1
 800b220:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b222:	f002 fc09 	bl	800da38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b226:	f001 f8a3 	bl	800c370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b22a:	f002 fbcf 	bl	800d9cc <vPortEnterCritical>
 800b22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b230:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b234:	b25b      	sxtb	r3, r3
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b23a:	d103      	bne.n	800b244 <xQueueGenericSend+0x184>
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b246:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b24a:	b25b      	sxtb	r3, r3
 800b24c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b250:	d103      	bne.n	800b25a <xQueueGenericSend+0x19a>
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b25a:	f002 fbed 	bl	800da38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b25e:	1d3a      	adds	r2, r7, #4
 800b260:	f107 0314 	add.w	r3, r7, #20
 800b264:	4611      	mov	r1, r2
 800b266:	4618      	mov	r0, r3
 800b268:	f001 fc16 	bl	800ca98 <xTaskCheckForTimeOut>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d124      	bne.n	800b2bc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b272:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b274:	f000 fd6a 	bl	800bd4c <prvIsQueueFull>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d018      	beq.n	800b2b0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b280:	3310      	adds	r3, #16
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f001 fa8a 	bl	800c7a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b28c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b28e:	f000 fcf5 	bl	800bc7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b292:	f001 f87b 	bl	800c38c <xTaskResumeAll>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f47f af7c 	bne.w	800b196 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b29e:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d0 <xQueueGenericSend+0x210>)
 800b2a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	e772      	b.n	800b196 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2b2:	f000 fce3 	bl	800bc7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2b6:	f001 f869 	bl	800c38c <xTaskResumeAll>
 800b2ba:	e76c      	b.n	800b196 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2be:	f000 fcdd 	bl	800bc7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2c2:	f001 f863 	bl	800c38c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3738      	adds	r7, #56	@ 0x38
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	e000ed04 	.word	0xe000ed04

0800b2d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08e      	sub	sp, #56	@ 0x38
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10d      	bne.n	800b308 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f0:	b672      	cpsid	i
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	b662      	cpsie	i
 800b300:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b302:	bf00      	nop
 800b304:	bf00      	nop
 800b306:	e7fd      	b.n	800b304 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d103      	bne.n	800b316 <xQueueGenericSendFromISR+0x42>
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <xQueueGenericSendFromISR+0x46>
 800b316:	2301      	movs	r3, #1
 800b318:	e000      	b.n	800b31c <xQueueGenericSendFromISR+0x48>
 800b31a:	2300      	movs	r3, #0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10d      	bne.n	800b33c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	b672      	cpsid	i
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	b662      	cpsie	i
 800b334:	623b      	str	r3, [r7, #32]
}
 800b336:	bf00      	nop
 800b338:	bf00      	nop
 800b33a:	e7fd      	b.n	800b338 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d103      	bne.n	800b34a <xQueueGenericSendFromISR+0x76>
 800b342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b346:	2b01      	cmp	r3, #1
 800b348:	d101      	bne.n	800b34e <xQueueGenericSendFromISR+0x7a>
 800b34a:	2301      	movs	r3, #1
 800b34c:	e000      	b.n	800b350 <xQueueGenericSendFromISR+0x7c>
 800b34e:	2300      	movs	r3, #0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10d      	bne.n	800b370 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b358:	b672      	cpsid	i
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	b662      	cpsie	i
 800b368:	61fb      	str	r3, [r7, #28]
}
 800b36a:	bf00      	nop
 800b36c:	bf00      	nop
 800b36e:	e7fd      	b.n	800b36c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b370:	f002 fc14 	bl	800db9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b374:	f3ef 8211 	mrs	r2, BASEPRI
 800b378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37c:	b672      	cpsid	i
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	b662      	cpsie	i
 800b38c:	61ba      	str	r2, [r7, #24]
 800b38e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b390:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b392:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d302      	bcc.n	800b3a6 <xQueueGenericSendFromISR+0xd2>
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d12c      	bne.n	800b400 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3b6:	f000 fbd1 	bl	800bb5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3ba:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3c2:	d112      	bne.n	800b3ea <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d016      	beq.n	800b3fa <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ce:	3324      	adds	r3, #36	@ 0x24
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f001 fa7d 	bl	800c8d0 <xTaskRemoveFromEventList>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00e      	beq.n	800b3fa <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00b      	beq.n	800b3fa <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	e007      	b.n	800b3fa <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	b25a      	sxtb	r2, r3
 800b3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b3fe:	e001      	b.n	800b404 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b400:	2300      	movs	r3, #0
 800b402:	637b      	str	r3, [r7, #52]	@ 0x34
 800b404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b406:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b40e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b412:	4618      	mov	r0, r3
 800b414:	3738      	adds	r7, #56	@ 0x38
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b08e      	sub	sp, #56	@ 0x38
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10d      	bne.n	800b44a <xQueueGiveFromISR+0x30>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b432:	b672      	cpsid	i
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	b662      	cpsie	i
 800b442:	623b      	str	r3, [r7, #32]
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop
 800b448:	e7fd      	b.n	800b446 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00d      	beq.n	800b46e <xQueueGiveFromISR+0x54>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b456:	b672      	cpsid	i
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	b662      	cpsie	i
 800b466:	61fb      	str	r3, [r7, #28]
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	e7fd      	b.n	800b46a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d103      	bne.n	800b47e <xQueueGiveFromISR+0x64>
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <xQueueGiveFromISR+0x68>
 800b47e:	2301      	movs	r3, #1
 800b480:	e000      	b.n	800b484 <xQueueGiveFromISR+0x6a>
 800b482:	2300      	movs	r3, #0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10d      	bne.n	800b4a4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48c:	b672      	cpsid	i
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	b662      	cpsie	i
 800b49c:	61bb      	str	r3, [r7, #24]
}
 800b49e:	bf00      	nop
 800b4a0:	bf00      	nop
 800b4a2:	e7fd      	b.n	800b4a0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4a4:	f002 fb7a 	bl	800db9c <vPortValidateInterruptPriority>
	__asm volatile
 800b4a8:	f3ef 8211 	mrs	r2, BASEPRI
 800b4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b0:	b672      	cpsid	i
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	b662      	cpsie	i
 800b4c0:	617a      	str	r2, [r7, #20]
 800b4c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b4c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4cc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d22b      	bcs.n	800b530 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b4ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4f2:	d112      	bne.n	800b51a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d016      	beq.n	800b52a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fe:	3324      	adds	r3, #36	@ 0x24
 800b500:	4618      	mov	r0, r3
 800b502:	f001 f9e5 	bl	800c8d0 <xTaskRemoveFromEventList>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00e      	beq.n	800b52a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00b      	beq.n	800b52a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2201      	movs	r2, #1
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	e007      	b.n	800b52a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b51a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b51e:	3301      	adds	r3, #1
 800b520:	b2db      	uxtb	r3, r3
 800b522:	b25a      	sxtb	r2, r3
 800b524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b52a:	2301      	movs	r3, #1
 800b52c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b52e:	e001      	b.n	800b534 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b530:	2300      	movs	r3, #0
 800b532:	637b      	str	r3, [r7, #52]	@ 0x34
 800b534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b536:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f383 8811 	msr	BASEPRI, r3
}
 800b53e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b542:	4618      	mov	r0, r3
 800b544:	3738      	adds	r7, #56	@ 0x38
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08c      	sub	sp, #48	@ 0x30
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b558:	2300      	movs	r3, #0
 800b55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10d      	bne.n	800b582 <xQueueReceive+0x36>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56a:	b672      	cpsid	i
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	b662      	cpsie	i
 800b57a:	623b      	str	r3, [r7, #32]
}
 800b57c:	bf00      	nop
 800b57e:	bf00      	nop
 800b580:	e7fd      	b.n	800b57e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d103      	bne.n	800b590 <xQueueReceive+0x44>
 800b588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d101      	bne.n	800b594 <xQueueReceive+0x48>
 800b590:	2301      	movs	r3, #1
 800b592:	e000      	b.n	800b596 <xQueueReceive+0x4a>
 800b594:	2300      	movs	r3, #0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d10d      	bne.n	800b5b6 <xQueueReceive+0x6a>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59e:	b672      	cpsid	i
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	b662      	cpsie	i
 800b5ae:	61fb      	str	r3, [r7, #28]
}
 800b5b0:	bf00      	nop
 800b5b2:	bf00      	nop
 800b5b4:	e7fd      	b.n	800b5b2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5b6:	f001 fb6d 	bl	800cc94 <xTaskGetSchedulerState>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <xQueueReceive+0x7a>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <xQueueReceive+0x7e>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e000      	b.n	800b5cc <xQueueReceive+0x80>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10d      	bne.n	800b5ec <xQueueReceive+0xa0>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d4:	b672      	cpsid	i
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	b662      	cpsie	i
 800b5e4:	61bb      	str	r3, [r7, #24]
}
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
 800b5ea:	e7fd      	b.n	800b5e8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5ec:	f002 f9ee 	bl	800d9cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01f      	beq.n	800b63c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b5fc:	68b9      	ldr	r1, [r7, #8]
 800b5fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b600:	f000 fb16 	bl	800bc30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b606:	1e5a      	subs	r2, r3, #1
 800b608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00f      	beq.n	800b634 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b616:	3310      	adds	r3, #16
 800b618:	4618      	mov	r0, r3
 800b61a:	f001 f959 	bl	800c8d0 <xTaskRemoveFromEventList>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d007      	beq.n	800b634 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b624:	4b3c      	ldr	r3, [pc, #240]	@ (800b718 <xQueueReceive+0x1cc>)
 800b626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b634:	f002 fa00 	bl	800da38 <vPortExitCritical>
				return pdPASS;
 800b638:	2301      	movs	r3, #1
 800b63a:	e069      	b.n	800b710 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d103      	bne.n	800b64a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b642:	f002 f9f9 	bl	800da38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b646:	2300      	movs	r3, #0
 800b648:	e062      	b.n	800b710 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d106      	bne.n	800b65e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b650:	f107 0310 	add.w	r3, r7, #16
 800b654:	4618      	mov	r0, r3
 800b656:	f001 fa09 	bl	800ca6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b65a:	2301      	movs	r3, #1
 800b65c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b65e:	f002 f9eb 	bl	800da38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b662:	f000 fe85 	bl	800c370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b666:	f002 f9b1 	bl	800d9cc <vPortEnterCritical>
 800b66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b66c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b670:	b25b      	sxtb	r3, r3
 800b672:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b676:	d103      	bne.n	800b680 <xQueueReceive+0x134>
 800b678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b686:	b25b      	sxtb	r3, r3
 800b688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b68c:	d103      	bne.n	800b696 <xQueueReceive+0x14a>
 800b68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b690:	2200      	movs	r2, #0
 800b692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b696:	f002 f9cf 	bl	800da38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b69a:	1d3a      	adds	r2, r7, #4
 800b69c:	f107 0310 	add.w	r3, r7, #16
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f001 f9f8 	bl	800ca98 <xTaskCheckForTimeOut>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d123      	bne.n	800b6f6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6b0:	f000 fb36 	bl	800bd20 <prvIsQueueEmpty>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d017      	beq.n	800b6ea <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6bc:	3324      	adds	r3, #36	@ 0x24
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f001 f86c 	bl	800c7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b6c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6ca:	f000 fad7 	bl	800bc7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b6ce:	f000 fe5d 	bl	800c38c <xTaskResumeAll>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d189      	bne.n	800b5ec <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b6d8:	4b0f      	ldr	r3, [pc, #60]	@ (800b718 <xQueueReceive+0x1cc>)
 800b6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6de:	601a      	str	r2, [r3, #0]
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	e780      	b.n	800b5ec <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b6ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6ec:	f000 fac6 	bl	800bc7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b6f0:	f000 fe4c 	bl	800c38c <xTaskResumeAll>
 800b6f4:	e77a      	b.n	800b5ec <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6f8:	f000 fac0 	bl	800bc7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b6fc:	f000 fe46 	bl	800c38c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b702:	f000 fb0d 	bl	800bd20 <prvIsQueueEmpty>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f43f af6f 	beq.w	800b5ec <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b70e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b710:	4618      	mov	r0, r3
 800b712:	3730      	adds	r7, #48	@ 0x30
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	e000ed04 	.word	0xe000ed04

0800b71c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08e      	sub	sp, #56	@ 0x38
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b726:	2300      	movs	r3, #0
 800b728:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b72e:	2300      	movs	r3, #0
 800b730:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10d      	bne.n	800b754 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73c:	b672      	cpsid	i
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	b662      	cpsie	i
 800b74c:	623b      	str	r3, [r7, #32]
}
 800b74e:	bf00      	nop
 800b750:	bf00      	nop
 800b752:	e7fd      	b.n	800b750 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00d      	beq.n	800b778 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b760:	b672      	cpsid	i
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	b662      	cpsie	i
 800b770:	61fb      	str	r3, [r7, #28]
}
 800b772:	bf00      	nop
 800b774:	bf00      	nop
 800b776:	e7fd      	b.n	800b774 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b778:	f001 fa8c 	bl	800cc94 <xTaskGetSchedulerState>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d102      	bne.n	800b788 <xQueueSemaphoreTake+0x6c>
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <xQueueSemaphoreTake+0x70>
 800b788:	2301      	movs	r3, #1
 800b78a:	e000      	b.n	800b78e <xQueueSemaphoreTake+0x72>
 800b78c:	2300      	movs	r3, #0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10d      	bne.n	800b7ae <xQueueSemaphoreTake+0x92>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	b672      	cpsid	i
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	b662      	cpsie	i
 800b7a6:	61bb      	str	r3, [r7, #24]
}
 800b7a8:	bf00      	nop
 800b7aa:	bf00      	nop
 800b7ac:	e7fd      	b.n	800b7aa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7ae:	f002 f90d 	bl	800d9cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d024      	beq.n	800b808 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c0:	1e5a      	subs	r2, r3, #1
 800b7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d104      	bne.n	800b7d8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b7ce:	f001 fbfb 	bl	800cfc8 <pvTaskIncrementMutexHeldCount>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00f      	beq.n	800b800 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e2:	3310      	adds	r3, #16
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 f873 	bl	800c8d0 <xTaskRemoveFromEventList>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d007      	beq.n	800b800 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b7f0:	4b55      	ldr	r3, [pc, #340]	@ (800b948 <xQueueSemaphoreTake+0x22c>)
 800b7f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7f6:	601a      	str	r2, [r3, #0]
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b800:	f002 f91a 	bl	800da38 <vPortExitCritical>
				return pdPASS;
 800b804:	2301      	movs	r3, #1
 800b806:	e09a      	b.n	800b93e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d114      	bne.n	800b838 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00d      	beq.n	800b830 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b818:	b672      	cpsid	i
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	b662      	cpsie	i
 800b828:	617b      	str	r3, [r7, #20]
}
 800b82a:	bf00      	nop
 800b82c:	bf00      	nop
 800b82e:	e7fd      	b.n	800b82c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b830:	f002 f902 	bl	800da38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b834:	2300      	movs	r3, #0
 800b836:	e082      	b.n	800b93e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d106      	bne.n	800b84c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b83e:	f107 030c 	add.w	r3, r7, #12
 800b842:	4618      	mov	r0, r3
 800b844:	f001 f912 	bl	800ca6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b848:	2301      	movs	r3, #1
 800b84a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b84c:	f002 f8f4 	bl	800da38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b850:	f000 fd8e 	bl	800c370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b854:	f002 f8ba 	bl	800d9cc <vPortEnterCritical>
 800b858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b85e:	b25b      	sxtb	r3, r3
 800b860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b864:	d103      	bne.n	800b86e <xQueueSemaphoreTake+0x152>
 800b866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b870:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b874:	b25b      	sxtb	r3, r3
 800b876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b87a:	d103      	bne.n	800b884 <xQueueSemaphoreTake+0x168>
 800b87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b884:	f002 f8d8 	bl	800da38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b888:	463a      	mov	r2, r7
 800b88a:	f107 030c 	add.w	r3, r7, #12
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f001 f901 	bl	800ca98 <xTaskCheckForTimeOut>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d132      	bne.n	800b902 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b89c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b89e:	f000 fa3f 	bl	800bd20 <prvIsQueueEmpty>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d026      	beq.n	800b8f6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d109      	bne.n	800b8c4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800b8b0:	f002 f88c 	bl	800d9cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f001 fa09 	bl	800ccd0 <xTaskPriorityInherit>
 800b8be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b8c0:	f002 f8ba 	bl	800da38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c6:	3324      	adds	r3, #36	@ 0x24
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 ff67 	bl	800c7a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b8d4:	f000 f9d2 	bl	800bc7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8d8:	f000 fd58 	bl	800c38c <xTaskResumeAll>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f47f af65 	bne.w	800b7ae <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800b8e4:	4b18      	ldr	r3, [pc, #96]	@ (800b948 <xQueueSemaphoreTake+0x22c>)
 800b8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	e75b      	b.n	800b7ae <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b8f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b8f8:	f000 f9c0 	bl	800bc7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8fc:	f000 fd46 	bl	800c38c <xTaskResumeAll>
 800b900:	e755      	b.n	800b7ae <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b902:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b904:	f000 f9ba 	bl	800bc7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b908:	f000 fd40 	bl	800c38c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b90c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b90e:	f000 fa07 	bl	800bd20 <prvIsQueueEmpty>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	f43f af4a 	beq.w	800b7ae <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00d      	beq.n	800b93c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800b920:	f002 f854 	bl	800d9cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b924:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b926:	f000 f901 	bl	800bb2c <prvGetDisinheritPriorityAfterTimeout>
 800b92a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b932:	4618      	mov	r0, r3
 800b934:	f001 faa8 	bl	800ce88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b938:	f002 f87e 	bl	800da38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b93c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3738      	adds	r7, #56	@ 0x38
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	e000ed04 	.word	0xe000ed04

0800b94c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b08e      	sub	sp, #56	@ 0x38
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10d      	bne.n	800b97e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b966:	b672      	cpsid	i
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	b662      	cpsie	i
 800b976:	623b      	str	r3, [r7, #32]
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	e7fd      	b.n	800b97a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d103      	bne.n	800b98c <xQueueReceiveFromISR+0x40>
 800b984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <xQueueReceiveFromISR+0x44>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e000      	b.n	800b992 <xQueueReceiveFromISR+0x46>
 800b990:	2300      	movs	r3, #0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10d      	bne.n	800b9b2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99a:	b672      	cpsid	i
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	b662      	cpsie	i
 800b9aa:	61fb      	str	r3, [r7, #28]
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	e7fd      	b.n	800b9ae <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9b2:	f002 f8f3 	bl	800db9c <vPortValidateInterruptPriority>
	__asm volatile
 800b9b6:	f3ef 8211 	mrs	r2, BASEPRI
 800b9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9be:	b672      	cpsid	i
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	b662      	cpsie	i
 800b9ce:	61ba      	str	r2, [r7, #24]
 800b9d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b9d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d02f      	beq.n	800ba42 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9ec:	68b9      	ldr	r1, [r7, #8]
 800b9ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9f0:	f000 f91e 	bl	800bc30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f6:	1e5a      	subs	r2, r3, #1
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b9fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba04:	d112      	bne.n	800ba2c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d016      	beq.n	800ba3c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba10:	3310      	adds	r3, #16
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 ff5c 	bl	800c8d0 <xTaskRemoveFromEventList>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00e      	beq.n	800ba3c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00b      	beq.n	800ba3c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	601a      	str	r2, [r3, #0]
 800ba2a:	e007      	b.n	800ba3c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ba2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba30:	3301      	adds	r3, #1
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	b25a      	sxtb	r2, r3
 800ba36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba40:	e001      	b.n	800ba46 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba48:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f383 8811 	msr	BASEPRI, r3
}
 800ba50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3738      	adds	r7, #56	@ 0x38
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10d      	bne.n	800ba86 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6e:	b672      	cpsid	i
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	b662      	cpsie	i
 800ba7e:	60bb      	str	r3, [r7, #8]
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	e7fd      	b.n	800ba82 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800ba86:	f001 ffa1 	bl	800d9cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ba90:	f001 ffd2 	bl	800da38 <vPortExitCritical>

	return uxReturn;
 800ba94:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b087      	sub	sp, #28
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10d      	bne.n	800bacc <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab4:	b672      	cpsid	i
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	b662      	cpsie	i
 800bac4:	60fb      	str	r3, [r7, #12]
}
 800bac6:	bf00      	nop
 800bac8:	bf00      	nop
 800baca:	e7fd      	b.n	800bac8 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bad0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800bad2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800bad4:	4618      	mov	r0, r3
 800bad6:	371c      	adds	r7, #28
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10d      	bne.n	800bb0e <vQueueDelete+0x2e>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf6:	b672      	cpsid	i
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	b662      	cpsie	i
 800bb06:	60bb      	str	r3, [r7, #8]
}
 800bb08:	bf00      	nop
 800bb0a:	bf00      	nop
 800bb0c:	e7fd      	b.n	800bb0a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f000 f95e 	bl	800bdd0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d102      	bne.n	800bb24 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f002 f954 	bl	800ddcc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bb24:	bf00      	nop
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d006      	beq.n	800bb4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	e001      	b.n	800bb4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10d      	bne.n	800bb96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d14d      	bne.n	800bc1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f001 f90a 	bl	800cda0 <xTaskPriorityDisinherit>
 800bb8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	609a      	str	r2, [r3, #8]
 800bb94:	e043      	b.n	800bc1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d119      	bne.n	800bbd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6858      	ldr	r0, [r3, #4]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bba4:	461a      	mov	r2, r3
 800bba6:	68b9      	ldr	r1, [r7, #8]
 800bba8:	f010 ff27 	bl	801c9fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb4:	441a      	add	r2, r3
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d32b      	bcc.n	800bc1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	605a      	str	r2, [r3, #4]
 800bbce:	e026      	b.n	800bc1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	68d8      	ldr	r0, [r3, #12]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbd8:	461a      	mov	r2, r3
 800bbda:	68b9      	ldr	r1, [r7, #8]
 800bbdc:	f010 ff0d 	bl	801c9fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	68da      	ldr	r2, [r3, #12]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe8:	425b      	negs	r3, r3
 800bbea:	441a      	add	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	68da      	ldr	r2, [r3, #12]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d207      	bcs.n	800bc0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	689a      	ldr	r2, [r3, #8]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc04:	425b      	negs	r3, r3
 800bc06:	441a      	add	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d105      	bne.n	800bc1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bc26:	697b      	ldr	r3, [r7, #20]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d018      	beq.n	800bc74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68da      	ldr	r2, [r3, #12]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc4a:	441a      	add	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d303      	bcc.n	800bc64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68d9      	ldr	r1, [r3, #12]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	6838      	ldr	r0, [r7, #0]
 800bc70:	f010 fec3 	bl	801c9fa <memcpy>
	}
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc84:	f001 fea2 	bl	800d9cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc90:	e011      	b.n	800bcb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d012      	beq.n	800bcc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	3324      	adds	r3, #36	@ 0x24
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fe16 	bl	800c8d0 <xTaskRemoveFromEventList>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bcaa:	f000 ff5d 	bl	800cb68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dce9      	bgt.n	800bc92 <prvUnlockQueue+0x16>
 800bcbe:	e000      	b.n	800bcc2 <prvUnlockQueue+0x46>
					break;
 800bcc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	22ff      	movs	r2, #255	@ 0xff
 800bcc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bcca:	f001 feb5 	bl	800da38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bcce:	f001 fe7d 	bl	800d9cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bcd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcda:	e011      	b.n	800bd00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d012      	beq.n	800bd0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	3310      	adds	r3, #16
 800bce8:	4618      	mov	r0, r3
 800bcea:	f000 fdf1 	bl	800c8d0 <xTaskRemoveFromEventList>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcf4:	f000 ff38 	bl	800cb68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dce9      	bgt.n	800bcdc <prvUnlockQueue+0x60>
 800bd08:	e000      	b.n	800bd0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	22ff      	movs	r2, #255	@ 0xff
 800bd10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bd14:	f001 fe90 	bl	800da38 <vPortExitCritical>
}
 800bd18:	bf00      	nop
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd28:	f001 fe50 	bl	800d9cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d102      	bne.n	800bd3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd34:	2301      	movs	r3, #1
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	e001      	b.n	800bd3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd3e:	f001 fe7b 	bl	800da38 <vPortExitCritical>

	return xReturn;
 800bd42:	68fb      	ldr	r3, [r7, #12]
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd54:	f001 fe3a 	bl	800d9cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d102      	bne.n	800bd6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd64:	2301      	movs	r3, #1
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	e001      	b.n	800bd6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd6e:	f001 fe63 	bl	800da38 <vPortExitCritical>

	return xReturn;
 800bd72:	68fb      	ldr	r3, [r7, #12]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	e014      	b.n	800bdb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd8c:	4a0f      	ldr	r2, [pc, #60]	@ (800bdcc <vQueueAddToRegistry+0x50>)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10b      	bne.n	800bdb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd98:	490c      	ldr	r1, [pc, #48]	@ (800bdcc <vQueueAddToRegistry+0x50>)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bda2:	4a0a      	ldr	r2, [pc, #40]	@ (800bdcc <vQueueAddToRegistry+0x50>)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	4413      	add	r3, r2
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bdae:	e006      	b.n	800bdbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	60fb      	str	r3, [r7, #12]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b0b      	cmp	r3, #11
 800bdba:	d9e7      	bls.n	800bd8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bdbc:	bf00      	nop
 800bdbe:	bf00      	nop
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	20006fb8 	.word	0x20006fb8

0800bdd0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	e016      	b.n	800be0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bdde:	4a10      	ldr	r2, [pc, #64]	@ (800be20 <vQueueUnregisterQueue+0x50>)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	4413      	add	r3, r2
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d10b      	bne.n	800be06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bdee:	4a0c      	ldr	r2, [pc, #48]	@ (800be20 <vQueueUnregisterQueue+0x50>)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bdf8:	4a09      	ldr	r2, [pc, #36]	@ (800be20 <vQueueUnregisterQueue+0x50>)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	4413      	add	r3, r2
 800be00:	2200      	movs	r2, #0
 800be02:	605a      	str	r2, [r3, #4]
				break;
 800be04:	e006      	b.n	800be14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b0b      	cmp	r3, #11
 800be10:	d9e5      	bls.n	800bdde <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	20006fb8 	.word	0x20006fb8

0800be24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800be34:	f001 fdca 	bl	800d9cc <vPortEnterCritical>
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be3e:	b25b      	sxtb	r3, r3
 800be40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be44:	d103      	bne.n	800be4e <vQueueWaitForMessageRestricted+0x2a>
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be54:	b25b      	sxtb	r3, r3
 800be56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be5a:	d103      	bne.n	800be64 <vQueueWaitForMessageRestricted+0x40>
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be64:	f001 fde8 	bl	800da38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d106      	bne.n	800be7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	3324      	adds	r3, #36	@ 0x24
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	68b9      	ldr	r1, [r7, #8]
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 fcfb 	bl	800c874 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be7e:	6978      	ldr	r0, [r7, #20]
 800be80:	f7ff fefc 	bl	800bc7c <prvUnlockQueue>
	}
 800be84:	bf00      	nop
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08e      	sub	sp, #56	@ 0x38
 800be90:	af04      	add	r7, sp, #16
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
 800be98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10d      	bne.n	800bebc <xTaskCreateStatic+0x30>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea4:	b672      	cpsid	i
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	b662      	cpsie	i
 800beb4:	623b      	str	r3, [r7, #32]
}
 800beb6:	bf00      	nop
 800beb8:	bf00      	nop
 800beba:	e7fd      	b.n	800beb8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10d      	bne.n	800bede <xTaskCreateStatic+0x52>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	b672      	cpsid	i
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	b662      	cpsie	i
 800bed6:	61fb      	str	r3, [r7, #28]
}
 800bed8:	bf00      	nop
 800beda:	bf00      	nop
 800bedc:	e7fd      	b.n	800beda <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bede:	23a8      	movs	r3, #168	@ 0xa8
 800bee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	2ba8      	cmp	r3, #168	@ 0xa8
 800bee6:	d00d      	beq.n	800bf04 <xTaskCreateStatic+0x78>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	b672      	cpsid	i
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	b662      	cpsie	i
 800befc:	61bb      	str	r3, [r7, #24]
}
 800befe:	bf00      	nop
 800bf00:	bf00      	nop
 800bf02:	e7fd      	b.n	800bf00 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bf04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bf06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d01e      	beq.n	800bf4a <xTaskCreateStatic+0xbe>
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d01b      	beq.n	800bf4a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bf1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1e:	2202      	movs	r2, #2
 800bf20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bf24:	2300      	movs	r3, #0
 800bf26:	9303      	str	r3, [sp, #12]
 800bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2a:	9302      	str	r3, [sp, #8]
 800bf2c:	f107 0314 	add.w	r3, r7, #20
 800bf30:	9301      	str	r3, [sp, #4]
 800bf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	68b9      	ldr	r1, [r7, #8]
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f000 f851 	bl	800bfe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf44:	f000 f8f8 	bl	800c138 <prvAddNewTaskToReadyList>
 800bf48:	e001      	b.n	800bf4e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf4e:	697b      	ldr	r3, [r7, #20]
	}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3728      	adds	r7, #40	@ 0x28
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08c      	sub	sp, #48	@ 0x30
 800bf5c:	af04      	add	r7, sp, #16
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	603b      	str	r3, [r7, #0]
 800bf64:	4613      	mov	r3, r2
 800bf66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf68:	88fb      	ldrh	r3, [r7, #6]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 fe5b 	bl	800dc28 <pvPortMalloc>
 800bf72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00e      	beq.n	800bf98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf7a:	20a8      	movs	r0, #168	@ 0xa8
 800bf7c:	f001 fe54 	bl	800dc28 <pvPortMalloc>
 800bf80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf8e:	e005      	b.n	800bf9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf90:	6978      	ldr	r0, [r7, #20]
 800bf92:	f001 ff1b 	bl	800ddcc <vPortFree>
 800bf96:	e001      	b.n	800bf9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d017      	beq.n	800bfd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bfaa:	88fa      	ldrh	r2, [r7, #6]
 800bfac:	2300      	movs	r3, #0
 800bfae:	9303      	str	r3, [sp, #12]
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	9302      	str	r3, [sp, #8]
 800bfb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb6:	9301      	str	r3, [sp, #4]
 800bfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	68b9      	ldr	r1, [r7, #8]
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 f80f 	bl	800bfe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bfc6:	69f8      	ldr	r0, [r7, #28]
 800bfc8:	f000 f8b6 	bl	800c138 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	61bb      	str	r3, [r7, #24]
 800bfd0:	e002      	b.n	800bfd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
	}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3720      	adds	r7, #32
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
 800bff0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	461a      	mov	r2, r3
 800bffc:	21a5      	movs	r1, #165	@ 0xa5
 800bffe:	f010 fc87 	bl	801c910 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c00c:	440b      	add	r3, r1
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	f023 0307 	bic.w	r3, r3, #7
 800c01a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	f003 0307 	and.w	r3, r3, #7
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00d      	beq.n	800c042 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800c026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c02a:	b672      	cpsid	i
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	b662      	cpsie	i
 800c03a:	617b      	str	r3, [r7, #20]
}
 800c03c:	bf00      	nop
 800c03e:	bf00      	nop
 800c040:	e7fd      	b.n	800c03e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d01f      	beq.n	800c088 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c048:	2300      	movs	r3, #0
 800c04a:	61fb      	str	r3, [r7, #28]
 800c04c:	e012      	b.n	800c074 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c04e:	68ba      	ldr	r2, [r7, #8]
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	4413      	add	r3, r2
 800c054:	7819      	ldrb	r1, [r3, #0]
 800c056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	4413      	add	r3, r2
 800c05c:	3334      	adds	r3, #52	@ 0x34
 800c05e:	460a      	mov	r2, r1
 800c060:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	4413      	add	r3, r2
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d006      	beq.n	800c07c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	3301      	adds	r3, #1
 800c072:	61fb      	str	r3, [r7, #28]
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	2b0f      	cmp	r3, #15
 800c078:	d9e9      	bls.n	800c04e <prvInitialiseNewTask+0x6a>
 800c07a:	e000      	b.n	800c07e <prvInitialiseNewTask+0x9a>
			{
				break;
 800c07c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c086:	e003      	b.n	800c090 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c092:	2b37      	cmp	r3, #55	@ 0x37
 800c094:	d901      	bls.n	800c09a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c096:	2337      	movs	r3, #55	@ 0x37
 800c098:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c09e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fe fce5 	bl	800aa80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b8:	3318      	adds	r3, #24
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe fce0 	bl	800aa80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e8:	3354      	adds	r3, #84	@ 0x54
 800c0ea:	224c      	movs	r2, #76	@ 0x4c
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f010 fc0e 	bl	801c910 <memset>
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c12c <prvInitialiseNewTask+0x148>)
 800c0f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c130 <prvInitialiseNewTask+0x14c>)
 800c0fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c102:	4a0c      	ldr	r2, [pc, #48]	@ (800c134 <prvInitialiseNewTask+0x150>)
 800c104:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	68f9      	ldr	r1, [r7, #12]
 800c10a:	69b8      	ldr	r0, [r7, #24]
 800c10c:	f001 fb4c 	bl	800d7a8 <pxPortInitialiseStack>
 800c110:	4602      	mov	r2, r0
 800c112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c114:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c122:	bf00      	nop
 800c124:	3720      	adds	r7, #32
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20022904 	.word	0x20022904
 800c130:	2002296c 	.word	0x2002296c
 800c134:	200229d4 	.word	0x200229d4

0800c138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c140:	f001 fc44 	bl	800d9cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c144:	4b2d      	ldr	r3, [pc, #180]	@ (800c1fc <prvAddNewTaskToReadyList+0xc4>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	3301      	adds	r3, #1
 800c14a:	4a2c      	ldr	r2, [pc, #176]	@ (800c1fc <prvAddNewTaskToReadyList+0xc4>)
 800c14c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c14e:	4b2c      	ldr	r3, [pc, #176]	@ (800c200 <prvAddNewTaskToReadyList+0xc8>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d109      	bne.n	800c16a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c156:	4a2a      	ldr	r2, [pc, #168]	@ (800c200 <prvAddNewTaskToReadyList+0xc8>)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c15c:	4b27      	ldr	r3, [pc, #156]	@ (800c1fc <prvAddNewTaskToReadyList+0xc4>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d110      	bne.n	800c186 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c164:	f000 fd24 	bl	800cbb0 <prvInitialiseTaskLists>
 800c168:	e00d      	b.n	800c186 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c16a:	4b26      	ldr	r3, [pc, #152]	@ (800c204 <prvAddNewTaskToReadyList+0xcc>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d109      	bne.n	800c186 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c172:	4b23      	ldr	r3, [pc, #140]	@ (800c200 <prvAddNewTaskToReadyList+0xc8>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d802      	bhi.n	800c186 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c180:	4a1f      	ldr	r2, [pc, #124]	@ (800c200 <prvAddNewTaskToReadyList+0xc8>)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c186:	4b20      	ldr	r3, [pc, #128]	@ (800c208 <prvAddNewTaskToReadyList+0xd0>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3301      	adds	r3, #1
 800c18c:	4a1e      	ldr	r2, [pc, #120]	@ (800c208 <prvAddNewTaskToReadyList+0xd0>)
 800c18e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c190:	4b1d      	ldr	r3, [pc, #116]	@ (800c208 <prvAddNewTaskToReadyList+0xd0>)
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19c:	4b1b      	ldr	r3, [pc, #108]	@ (800c20c <prvAddNewTaskToReadyList+0xd4>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d903      	bls.n	800c1ac <prvAddNewTaskToReadyList+0x74>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a8:	4a18      	ldr	r2, [pc, #96]	@ (800c20c <prvAddNewTaskToReadyList+0xd4>)
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4a15      	ldr	r2, [pc, #84]	@ (800c210 <prvAddNewTaskToReadyList+0xd8>)
 800c1ba:	441a      	add	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	3304      	adds	r3, #4
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	f7fe fc69 	bl	800aa9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c1c8:	f001 fc36 	bl	800da38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c204 <prvAddNewTaskToReadyList+0xcc>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00e      	beq.n	800c1f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c200 <prvAddNewTaskToReadyList+0xc8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d207      	bcs.n	800c1f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c214 <prvAddNewTaskToReadyList+0xdc>)
 800c1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1e8:	601a      	str	r2, [r3, #0]
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1f2:	bf00      	nop
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	200074d4 	.word	0x200074d4
 800c200:	20007018 	.word	0x20007018
 800c204:	200074e0 	.word	0x200074e0
 800c208:	200074f0 	.word	0x200074f0
 800c20c:	200074dc 	.word	0x200074dc
 800c210:	2000701c 	.word	0x2000701c
 800c214:	e000ed04 	.word	0xe000ed04

0800c218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c220:	2300      	movs	r3, #0
 800c222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d01a      	beq.n	800c260 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c22a:	4b15      	ldr	r3, [pc, #84]	@ (800c280 <vTaskDelay+0x68>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d00d      	beq.n	800c24e <vTaskDelay+0x36>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c236:	b672      	cpsid	i
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	b662      	cpsie	i
 800c246:	60bb      	str	r3, [r7, #8]
}
 800c248:	bf00      	nop
 800c24a:	bf00      	nop
 800c24c:	e7fd      	b.n	800c24a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c24e:	f000 f88f 	bl	800c370 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c252:	2100      	movs	r1, #0
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fecb 	bl	800cff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c25a:	f000 f897 	bl	800c38c <xTaskResumeAll>
 800c25e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d107      	bne.n	800c276 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800c266:	4b07      	ldr	r3, [pc, #28]	@ (800c284 <vTaskDelay+0x6c>)
 800c268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c276:	bf00      	nop
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	200074fc 	.word	0x200074fc
 800c284:	e000ed04 	.word	0xe000ed04

0800c288 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08a      	sub	sp, #40	@ 0x28
 800c28c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c296:	463a      	mov	r2, r7
 800c298:	1d39      	adds	r1, r7, #4
 800c29a:	f107 0308 	add.w	r3, r7, #8
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fe f994 	bl	800a5cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	9202      	str	r2, [sp, #8]
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	460a      	mov	r2, r1
 800c2b6:	4926      	ldr	r1, [pc, #152]	@ (800c350 <vTaskStartScheduler+0xc8>)
 800c2b8:	4826      	ldr	r0, [pc, #152]	@ (800c354 <vTaskStartScheduler+0xcc>)
 800c2ba:	f7ff fde7 	bl	800be8c <xTaskCreateStatic>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	4a25      	ldr	r2, [pc, #148]	@ (800c358 <vTaskStartScheduler+0xd0>)
 800c2c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2c4:	4b24      	ldr	r3, [pc, #144]	@ (800c358 <vTaskStartScheduler+0xd0>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	e001      	b.n	800c2d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d102      	bne.n	800c2e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c2dc:	f000 fedc 	bl	800d098 <xTimerCreateTimerTask>
 800c2e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d11d      	bne.n	800c324 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ec:	b672      	cpsid	i
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	b662      	cpsie	i
 800c2fc:	613b      	str	r3, [r7, #16]
}
 800c2fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c300:	4b16      	ldr	r3, [pc, #88]	@ (800c35c <vTaskStartScheduler+0xd4>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	3354      	adds	r3, #84	@ 0x54
 800c306:	4a16      	ldr	r2, [pc, #88]	@ (800c360 <vTaskStartScheduler+0xd8>)
 800c308:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c30a:	4b16      	ldr	r3, [pc, #88]	@ (800c364 <vTaskStartScheduler+0xdc>)
 800c30c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c310:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c312:	4b15      	ldr	r3, [pc, #84]	@ (800c368 <vTaskStartScheduler+0xe0>)
 800c314:	2201      	movs	r2, #1
 800c316:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c318:	4b14      	ldr	r3, [pc, #80]	@ (800c36c <vTaskStartScheduler+0xe4>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c31e:	f001 fad7 	bl	800d8d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c322:	e011      	b.n	800c348 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c32a:	d10d      	bne.n	800c348 <vTaskStartScheduler+0xc0>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c330:	b672      	cpsid	i
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	b662      	cpsie	i
 800c340:	60fb      	str	r3, [r7, #12]
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	e7fd      	b.n	800c344 <vTaskStartScheduler+0xbc>
}
 800c348:	bf00      	nop
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	0801d7ac 	.word	0x0801d7ac
 800c354:	0800cb81 	.word	0x0800cb81
 800c358:	200074f8 	.word	0x200074f8
 800c35c:	20007018 	.word	0x20007018
 800c360:	20000080 	.word	0x20000080
 800c364:	200074f4 	.word	0x200074f4
 800c368:	200074e0 	.word	0x200074e0
 800c36c:	200074d8 	.word	0x200074d8

0800c370 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c370:	b480      	push	{r7}
 800c372:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c374:	4b04      	ldr	r3, [pc, #16]	@ (800c388 <vTaskSuspendAll+0x18>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	3301      	adds	r3, #1
 800c37a:	4a03      	ldr	r2, [pc, #12]	@ (800c388 <vTaskSuspendAll+0x18>)
 800c37c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c37e:	bf00      	nop
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	200074fc 	.word	0x200074fc

0800c38c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c396:	2300      	movs	r3, #0
 800c398:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c39a:	4b43      	ldr	r3, [pc, #268]	@ (800c4a8 <xTaskResumeAll+0x11c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10d      	bne.n	800c3be <xTaskResumeAll+0x32>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a6:	b672      	cpsid	i
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	b662      	cpsie	i
 800c3b6:	603b      	str	r3, [r7, #0]
}
 800c3b8:	bf00      	nop
 800c3ba:	bf00      	nop
 800c3bc:	e7fd      	b.n	800c3ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c3be:	f001 fb05 	bl	800d9cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c3c2:	4b39      	ldr	r3, [pc, #228]	@ (800c4a8 <xTaskResumeAll+0x11c>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	4a37      	ldr	r2, [pc, #220]	@ (800c4a8 <xTaskResumeAll+0x11c>)
 800c3ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3cc:	4b36      	ldr	r3, [pc, #216]	@ (800c4a8 <xTaskResumeAll+0x11c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d162      	bne.n	800c49a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3d4:	4b35      	ldr	r3, [pc, #212]	@ (800c4ac <xTaskResumeAll+0x120>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d05e      	beq.n	800c49a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3dc:	e02f      	b.n	800c43e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3de:	4b34      	ldr	r3, [pc, #208]	@ (800c4b0 <xTaskResumeAll+0x124>)
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3318      	adds	r3, #24
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fbb2 	bl	800ab54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fe fbad 	bl	800ab54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3fe:	4b2d      	ldr	r3, [pc, #180]	@ (800c4b4 <xTaskResumeAll+0x128>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	429a      	cmp	r2, r3
 800c404:	d903      	bls.n	800c40e <xTaskResumeAll+0x82>
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c40a:	4a2a      	ldr	r2, [pc, #168]	@ (800c4b4 <xTaskResumeAll+0x128>)
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4a27      	ldr	r2, [pc, #156]	@ (800c4b8 <xTaskResumeAll+0x12c>)
 800c41c:	441a      	add	r2, r3
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	3304      	adds	r3, #4
 800c422:	4619      	mov	r1, r3
 800c424:	4610      	mov	r0, r2
 800c426:	f7fe fb38 	bl	800aa9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c42e:	4b23      	ldr	r3, [pc, #140]	@ (800c4bc <xTaskResumeAll+0x130>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c434:	429a      	cmp	r2, r3
 800c436:	d302      	bcc.n	800c43e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800c438:	4b21      	ldr	r3, [pc, #132]	@ (800c4c0 <xTaskResumeAll+0x134>)
 800c43a:	2201      	movs	r2, #1
 800c43c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c43e:	4b1c      	ldr	r3, [pc, #112]	@ (800c4b0 <xTaskResumeAll+0x124>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1cb      	bne.n	800c3de <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c44c:	f000 fbf2 	bl	800cc34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c450:	4b1c      	ldr	r3, [pc, #112]	@ (800c4c4 <xTaskResumeAll+0x138>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d010      	beq.n	800c47e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c45c:	f000 f858 	bl	800c510 <xTaskIncrementTick>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d002      	beq.n	800c46c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800c466:	4b16      	ldr	r3, [pc, #88]	@ (800c4c0 <xTaskResumeAll+0x134>)
 800c468:	2201      	movs	r2, #1
 800c46a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3b01      	subs	r3, #1
 800c470:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1f1      	bne.n	800c45c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800c478:	4b12      	ldr	r3, [pc, #72]	@ (800c4c4 <xTaskResumeAll+0x138>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c47e:	4b10      	ldr	r3, [pc, #64]	@ (800c4c0 <xTaskResumeAll+0x134>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d009      	beq.n	800c49a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c486:	2301      	movs	r3, #1
 800c488:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c48a:	4b0f      	ldr	r3, [pc, #60]	@ (800c4c8 <xTaskResumeAll+0x13c>)
 800c48c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c49a:	f001 facd 	bl	800da38 <vPortExitCritical>

	return xAlreadyYielded;
 800c49e:	68bb      	ldr	r3, [r7, #8]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	200074fc 	.word	0x200074fc
 800c4ac:	200074d4 	.word	0x200074d4
 800c4b0:	200074ac 	.word	0x200074ac
 800c4b4:	200074dc 	.word	0x200074dc
 800c4b8:	2000701c 	.word	0x2000701c
 800c4bc:	20007018 	.word	0x20007018
 800c4c0:	200074e8 	.word	0x200074e8
 800c4c4:	200074e4 	.word	0x200074e4
 800c4c8:	e000ed04 	.word	0xe000ed04

0800c4cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4d2:	4b05      	ldr	r3, [pc, #20]	@ (800c4e8 <xTaskGetTickCount+0x1c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4d8:	687b      	ldr	r3, [r7, #4]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	200074d8 	.word	0x200074d8

0800c4ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4f2:	f001 fb53 	bl	800db9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c4fa:	4b04      	ldr	r3, [pc, #16]	@ (800c50c <xTaskGetTickCountFromISR+0x20>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c500:	683b      	ldr	r3, [r7, #0]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	200074d8 	.word	0x200074d8

0800c510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c516:	2300      	movs	r3, #0
 800c518:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c51a:	4b50      	ldr	r3, [pc, #320]	@ (800c65c <xTaskIncrementTick+0x14c>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f040 808c 	bne.w	800c63c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c524:	4b4e      	ldr	r3, [pc, #312]	@ (800c660 <xTaskIncrementTick+0x150>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	3301      	adds	r3, #1
 800c52a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c52c:	4a4c      	ldr	r2, [pc, #304]	@ (800c660 <xTaskIncrementTick+0x150>)
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d123      	bne.n	800c580 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c538:	4b4a      	ldr	r3, [pc, #296]	@ (800c664 <xTaskIncrementTick+0x154>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00d      	beq.n	800c55e <xTaskIncrementTick+0x4e>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c546:	b672      	cpsid	i
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	b662      	cpsie	i
 800c556:	603b      	str	r3, [r7, #0]
}
 800c558:	bf00      	nop
 800c55a:	bf00      	nop
 800c55c:	e7fd      	b.n	800c55a <xTaskIncrementTick+0x4a>
 800c55e:	4b41      	ldr	r3, [pc, #260]	@ (800c664 <xTaskIncrementTick+0x154>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	4b40      	ldr	r3, [pc, #256]	@ (800c668 <xTaskIncrementTick+0x158>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a3e      	ldr	r2, [pc, #248]	@ (800c664 <xTaskIncrementTick+0x154>)
 800c56a:	6013      	str	r3, [r2, #0]
 800c56c:	4a3e      	ldr	r2, [pc, #248]	@ (800c668 <xTaskIncrementTick+0x158>)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	4b3e      	ldr	r3, [pc, #248]	@ (800c66c <xTaskIncrementTick+0x15c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3301      	adds	r3, #1
 800c578:	4a3c      	ldr	r2, [pc, #240]	@ (800c66c <xTaskIncrementTick+0x15c>)
 800c57a:	6013      	str	r3, [r2, #0]
 800c57c:	f000 fb5a 	bl	800cc34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c580:	4b3b      	ldr	r3, [pc, #236]	@ (800c670 <xTaskIncrementTick+0x160>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	429a      	cmp	r2, r3
 800c588:	d349      	bcc.n	800c61e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c58a:	4b36      	ldr	r3, [pc, #216]	@ (800c664 <xTaskIncrementTick+0x154>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d104      	bne.n	800c59e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c594:	4b36      	ldr	r3, [pc, #216]	@ (800c670 <xTaskIncrementTick+0x160>)
 800c596:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c59a:	601a      	str	r2, [r3, #0]
					break;
 800c59c:	e03f      	b.n	800c61e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c59e:	4b31      	ldr	r3, [pc, #196]	@ (800c664 <xTaskIncrementTick+0x154>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d203      	bcs.n	800c5be <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c5b6:	4a2e      	ldr	r2, [pc, #184]	@ (800c670 <xTaskIncrementTick+0x160>)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5bc:	e02f      	b.n	800c61e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fe fac6 	bl	800ab54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d004      	beq.n	800c5da <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	3318      	adds	r3, #24
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fe fabd 	bl	800ab54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5de:	4b25      	ldr	r3, [pc, #148]	@ (800c674 <xTaskIncrementTick+0x164>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d903      	bls.n	800c5ee <xTaskIncrementTick+0xde>
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ea:	4a22      	ldr	r2, [pc, #136]	@ (800c674 <xTaskIncrementTick+0x164>)
 800c5ec:	6013      	str	r3, [r2, #0]
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4a1f      	ldr	r2, [pc, #124]	@ (800c678 <xTaskIncrementTick+0x168>)
 800c5fc:	441a      	add	r2, r3
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	3304      	adds	r3, #4
 800c602:	4619      	mov	r1, r3
 800c604:	4610      	mov	r0, r2
 800c606:	f7fe fa48 	bl	800aa9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c60e:	4b1b      	ldr	r3, [pc, #108]	@ (800c67c <xTaskIncrementTick+0x16c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c614:	429a      	cmp	r2, r3
 800c616:	d3b8      	bcc.n	800c58a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c618:	2301      	movs	r3, #1
 800c61a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c61c:	e7b5      	b.n	800c58a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c61e:	4b17      	ldr	r3, [pc, #92]	@ (800c67c <xTaskIncrementTick+0x16c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c624:	4914      	ldr	r1, [pc, #80]	@ (800c678 <xTaskIncrementTick+0x168>)
 800c626:	4613      	mov	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	440b      	add	r3, r1
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b01      	cmp	r3, #1
 800c634:	d907      	bls.n	800c646 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800c636:	2301      	movs	r3, #1
 800c638:	617b      	str	r3, [r7, #20]
 800c63a:	e004      	b.n	800c646 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c63c:	4b10      	ldr	r3, [pc, #64]	@ (800c680 <xTaskIncrementTick+0x170>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	3301      	adds	r3, #1
 800c642:	4a0f      	ldr	r2, [pc, #60]	@ (800c680 <xTaskIncrementTick+0x170>)
 800c644:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c646:	4b0f      	ldr	r3, [pc, #60]	@ (800c684 <xTaskIncrementTick+0x174>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800c64e:	2301      	movs	r3, #1
 800c650:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c652:	697b      	ldr	r3, [r7, #20]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	200074fc 	.word	0x200074fc
 800c660:	200074d8 	.word	0x200074d8
 800c664:	200074a4 	.word	0x200074a4
 800c668:	200074a8 	.word	0x200074a8
 800c66c:	200074ec 	.word	0x200074ec
 800c670:	200074f4 	.word	0x200074f4
 800c674:	200074dc 	.word	0x200074dc
 800c678:	2000701c 	.word	0x2000701c
 800c67c:	20007018 	.word	0x20007018
 800c680:	200074e4 	.word	0x200074e4
 800c684:	200074e8 	.word	0x200074e8

0800c688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c68e:	4b3e      	ldr	r3, [pc, #248]	@ (800c788 <vTaskSwitchContext+0x100>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c696:	4b3d      	ldr	r3, [pc, #244]	@ (800c78c <vTaskSwitchContext+0x104>)
 800c698:	2201      	movs	r2, #1
 800c69a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c69c:	e070      	b.n	800c780 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800c69e:	4b3b      	ldr	r3, [pc, #236]	@ (800c78c <vTaskSwitchContext+0x104>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c6a4:	4b3a      	ldr	r3, [pc, #232]	@ (800c790 <vTaskSwitchContext+0x108>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6aa:	613b      	str	r3, [r7, #16]
 800c6ac:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800c6b0:	60fb      	str	r3, [r7, #12]
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d111      	bne.n	800c6e0 <vTaskSwitchContext+0x58>
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d10b      	bne.n	800c6e0 <vTaskSwitchContext+0x58>
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d105      	bne.n	800c6e0 <vTaskSwitchContext+0x58>
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	330c      	adds	r3, #12
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d008      	beq.n	800c6f2 <vTaskSwitchContext+0x6a>
 800c6e0:	4b2b      	ldr	r3, [pc, #172]	@ (800c790 <vTaskSwitchContext+0x108>)
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	4b2a      	ldr	r3, [pc, #168]	@ (800c790 <vTaskSwitchContext+0x108>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3334      	adds	r3, #52	@ 0x34
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	f7f4 f8fd 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6f2:	4b28      	ldr	r3, [pc, #160]	@ (800c794 <vTaskSwitchContext+0x10c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	617b      	str	r3, [r7, #20]
 800c6f8:	e013      	b.n	800c722 <vTaskSwitchContext+0x9a>
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10d      	bne.n	800c71c <vTaskSwitchContext+0x94>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c704:	b672      	cpsid	i
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	b662      	cpsie	i
 800c714:	607b      	str	r3, [r7, #4]
}
 800c716:	bf00      	nop
 800c718:	bf00      	nop
 800c71a:	e7fd      	b.n	800c718 <vTaskSwitchContext+0x90>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	3b01      	subs	r3, #1
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	491d      	ldr	r1, [pc, #116]	@ (800c798 <vTaskSwitchContext+0x110>)
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	4613      	mov	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	440b      	add	r3, r1
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d0e1      	beq.n	800c6fa <vTaskSwitchContext+0x72>
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	4613      	mov	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4a15      	ldr	r2, [pc, #84]	@ (800c798 <vTaskSwitchContext+0x110>)
 800c742:	4413      	add	r3, r2
 800c744:	60bb      	str	r3, [r7, #8]
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	605a      	str	r2, [r3, #4]
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	3308      	adds	r3, #8
 800c758:	429a      	cmp	r2, r3
 800c75a:	d104      	bne.n	800c766 <vTaskSwitchContext+0xde>
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	605a      	str	r2, [r3, #4]
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	4a08      	ldr	r2, [pc, #32]	@ (800c790 <vTaskSwitchContext+0x108>)
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	4a08      	ldr	r2, [pc, #32]	@ (800c794 <vTaskSwitchContext+0x10c>)
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c776:	4b06      	ldr	r3, [pc, #24]	@ (800c790 <vTaskSwitchContext+0x108>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3354      	adds	r3, #84	@ 0x54
 800c77c:	4a07      	ldr	r2, [pc, #28]	@ (800c79c <vTaskSwitchContext+0x114>)
 800c77e:	6013      	str	r3, [r2, #0]
}
 800c780:	bf00      	nop
 800c782:	3718      	adds	r7, #24
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	200074fc 	.word	0x200074fc
 800c78c:	200074e8 	.word	0x200074e8
 800c790:	20007018 	.word	0x20007018
 800c794:	200074dc 	.word	0x200074dc
 800c798:	2000701c 	.word	0x2000701c
 800c79c:	20000080 	.word	0x20000080

0800c7a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d10d      	bne.n	800c7cc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b4:	b672      	cpsid	i
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	b662      	cpsie	i
 800c7c4:	60fb      	str	r3, [r7, #12]
}
 800c7c6:	bf00      	nop
 800c7c8:	bf00      	nop
 800c7ca:	e7fd      	b.n	800c7c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7cc:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <vTaskPlaceOnEventList+0x4c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	3318      	adds	r3, #24
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7fe f984 	bl	800aae2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7da:	2101      	movs	r1, #1
 800c7dc:	6838      	ldr	r0, [r7, #0]
 800c7de:	f000 fc07 	bl	800cff0 <prvAddCurrentTaskToDelayedList>
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20007018 	.word	0x20007018

0800c7f0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10d      	bne.n	800c81e <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	b672      	cpsid	i
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	b662      	cpsie	i
 800c816:	617b      	str	r3, [r7, #20]
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c81e:	4b13      	ldr	r3, [pc, #76]	@ (800c86c <vTaskPlaceOnUnorderedEventList+0x7c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10d      	bne.n	800c842 <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82a:	b672      	cpsid	i
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	b662      	cpsie	i
 800c83a:	613b      	str	r3, [r7, #16]
}
 800c83c:	bf00      	nop
 800c83e:	bf00      	nop
 800c840:	e7fd      	b.n	800c83e <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c842:	4b0b      	ldr	r3, [pc, #44]	@ (800c870 <vTaskPlaceOnUnorderedEventList+0x80>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c84c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c84e:	4b08      	ldr	r3, [pc, #32]	@ (800c870 <vTaskPlaceOnUnorderedEventList+0x80>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	3318      	adds	r3, #24
 800c854:	4619      	mov	r1, r3
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f7fe f91f 	bl	800aa9a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c85c:	2101      	movs	r1, #1
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 fbc6 	bl	800cff0 <prvAddCurrentTaskToDelayedList>
}
 800c864:	bf00      	nop
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	200074fc 	.word	0x200074fc
 800c870:	20007018 	.word	0x20007018

0800c874 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10d      	bne.n	800c8a2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	b672      	cpsid	i
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	b662      	cpsie	i
 800c89a:	617b      	str	r3, [r7, #20]
}
 800c89c:	bf00      	nop
 800c89e:	bf00      	nop
 800c8a0:	e7fd      	b.n	800c89e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c8cc <vTaskPlaceOnEventListRestricted+0x58>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	3318      	adds	r3, #24
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f7fe f8f5 	bl	800aa9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800c8b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c8bc:	6879      	ldr	r1, [r7, #4]
 800c8be:	68b8      	ldr	r0, [r7, #8]
 800c8c0:	f000 fb96 	bl	800cff0 <prvAddCurrentTaskToDelayedList>
	}
 800c8c4:	bf00      	nop
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	20007018 	.word	0x20007018

0800c8d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10d      	bne.n	800c902 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ea:	b672      	cpsid	i
 800c8ec:	f383 8811 	msr	BASEPRI, r3
 800c8f0:	f3bf 8f6f 	isb	sy
 800c8f4:	f3bf 8f4f 	dsb	sy
 800c8f8:	b662      	cpsie	i
 800c8fa:	60fb      	str	r3, [r7, #12]
}
 800c8fc:	bf00      	nop
 800c8fe:	bf00      	nop
 800c900:	e7fd      	b.n	800c8fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	3318      	adds	r3, #24
 800c906:	4618      	mov	r0, r3
 800c908:	f7fe f924 	bl	800ab54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c90c:	4b1d      	ldr	r3, [pc, #116]	@ (800c984 <xTaskRemoveFromEventList+0xb4>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d11d      	bne.n	800c950 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	3304      	adds	r3, #4
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fe f91b 	bl	800ab54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c922:	4b19      	ldr	r3, [pc, #100]	@ (800c988 <xTaskRemoveFromEventList+0xb8>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d903      	bls.n	800c932 <xTaskRemoveFromEventList+0x62>
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c92e:	4a16      	ldr	r2, [pc, #88]	@ (800c988 <xTaskRemoveFromEventList+0xb8>)
 800c930:	6013      	str	r3, [r2, #0]
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c936:	4613      	mov	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4413      	add	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4a13      	ldr	r2, [pc, #76]	@ (800c98c <xTaskRemoveFromEventList+0xbc>)
 800c940:	441a      	add	r2, r3
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	3304      	adds	r3, #4
 800c946:	4619      	mov	r1, r3
 800c948:	4610      	mov	r0, r2
 800c94a:	f7fe f8a6 	bl	800aa9a <vListInsertEnd>
 800c94e:	e005      	b.n	800c95c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	3318      	adds	r3, #24
 800c954:	4619      	mov	r1, r3
 800c956:	480e      	ldr	r0, [pc, #56]	@ (800c990 <xTaskRemoveFromEventList+0xc0>)
 800c958:	f7fe f89f 	bl	800aa9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c960:	4b0c      	ldr	r3, [pc, #48]	@ (800c994 <xTaskRemoveFromEventList+0xc4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c966:	429a      	cmp	r2, r3
 800c968:	d905      	bls.n	800c976 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c96a:	2301      	movs	r3, #1
 800c96c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c96e:	4b0a      	ldr	r3, [pc, #40]	@ (800c998 <xTaskRemoveFromEventList+0xc8>)
 800c970:	2201      	movs	r2, #1
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	e001      	b.n	800c97a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800c976:	2300      	movs	r3, #0
 800c978:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c97a:	697b      	ldr	r3, [r7, #20]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	200074fc 	.word	0x200074fc
 800c988:	200074dc 	.word	0x200074dc
 800c98c:	2000701c 	.word	0x2000701c
 800c990:	200074ac 	.word	0x200074ac
 800c994:	20007018 	.word	0x20007018
 800c998:	200074e8 	.word	0x200074e8

0800c99c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800c9a6:	4b2c      	ldr	r3, [pc, #176]	@ (800ca58 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10d      	bne.n	800c9ca <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b2:	b672      	cpsid	i
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	b662      	cpsie	i
 800c9c2:	613b      	str	r3, [r7, #16]
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	e7fd      	b.n	800c9c6 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10d      	bne.n	800c9fc <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 800c9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e4:	b672      	cpsid	i
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	b662      	cpsie	i
 800c9f4:	60fb      	str	r3, [r7, #12]
}
 800c9f6:	bf00      	nop
 800c9f8:	bf00      	nop
 800c9fa:	e7fd      	b.n	800c9f8 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7fe f8a9 	bl	800ab54 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	3304      	adds	r3, #4
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fe f8a4 	bl	800ab54 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca10:	4b12      	ldr	r3, [pc, #72]	@ (800ca5c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d903      	bls.n	800ca20 <vTaskRemoveFromUnorderedEventList+0x84>
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca1c:	4a0f      	ldr	r2, [pc, #60]	@ (800ca5c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ca1e:	6013      	str	r3, [r2, #0]
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca24:	4613      	mov	r3, r2
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4a0c      	ldr	r2, [pc, #48]	@ (800ca60 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800ca2e:	441a      	add	r2, r3
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	3304      	adds	r3, #4
 800ca34:	4619      	mov	r1, r3
 800ca36:	4610      	mov	r0, r2
 800ca38:	f7fe f82f 	bl	800aa9a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca40:	4b08      	ldr	r3, [pc, #32]	@ (800ca64 <vTaskRemoveFromUnorderedEventList+0xc8>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d902      	bls.n	800ca50 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ca4a:	4b07      	ldr	r3, [pc, #28]	@ (800ca68 <vTaskRemoveFromUnorderedEventList+0xcc>)
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	601a      	str	r2, [r3, #0]
	}
}
 800ca50:	bf00      	nop
 800ca52:	3718      	adds	r7, #24
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	200074fc 	.word	0x200074fc
 800ca5c:	200074dc 	.word	0x200074dc
 800ca60:	2000701c 	.word	0x2000701c
 800ca64:	20007018 	.word	0x20007018
 800ca68:	200074e8 	.word	0x200074e8

0800ca6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca74:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <vTaskInternalSetTimeOutState+0x24>)
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca7c:	4b05      	ldr	r3, [pc, #20]	@ (800ca94 <vTaskInternalSetTimeOutState+0x28>)
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	605a      	str	r2, [r3, #4]
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	200074ec 	.word	0x200074ec
 800ca94:	200074d8 	.word	0x200074d8

0800ca98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b088      	sub	sp, #32
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10d      	bne.n	800cac4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caac:	b672      	cpsid	i
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	b662      	cpsie	i
 800cabc:	613b      	str	r3, [r7, #16]
}
 800cabe:	bf00      	nop
 800cac0:	bf00      	nop
 800cac2:	e7fd      	b.n	800cac0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10d      	bne.n	800cae6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cace:	b672      	cpsid	i
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	b662      	cpsie	i
 800cade:	60fb      	str	r3, [r7, #12]
}
 800cae0:	bf00      	nop
 800cae2:	bf00      	nop
 800cae4:	e7fd      	b.n	800cae2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800cae6:	f000 ff71 	bl	800d9cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800caea:	4b1d      	ldr	r3, [pc, #116]	@ (800cb60 <xTaskCheckForTimeOut+0xc8>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	69ba      	ldr	r2, [r7, #24]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb02:	d102      	bne.n	800cb0a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]
 800cb08:	e023      	b.n	800cb52 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	4b15      	ldr	r3, [pc, #84]	@ (800cb64 <xTaskCheckForTimeOut+0xcc>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d007      	beq.n	800cb26 <xTaskCheckForTimeOut+0x8e>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	69ba      	ldr	r2, [r7, #24]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d302      	bcc.n	800cb26 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb20:	2301      	movs	r3, #1
 800cb22:	61fb      	str	r3, [r7, #28]
 800cb24:	e015      	b.n	800cb52 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d20b      	bcs.n	800cb48 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	1ad2      	subs	r2, r2, r3
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7ff ff95 	bl	800ca6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb42:	2300      	movs	r3, #0
 800cb44:	61fb      	str	r3, [r7, #28]
 800cb46:	e004      	b.n	800cb52 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb52:	f000 ff71 	bl	800da38 <vPortExitCritical>

	return xReturn;
 800cb56:	69fb      	ldr	r3, [r7, #28]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3720      	adds	r7, #32
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	200074d8 	.word	0x200074d8
 800cb64:	200074ec 	.word	0x200074ec

0800cb68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb6c:	4b03      	ldr	r3, [pc, #12]	@ (800cb7c <vTaskMissedYield+0x14>)
 800cb6e:	2201      	movs	r2, #1
 800cb70:	601a      	str	r2, [r3, #0]
}
 800cb72:	bf00      	nop
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr
 800cb7c:	200074e8 	.word	0x200074e8

0800cb80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb88:	f000 f84c 	bl	800cc24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb8c:	4b06      	ldr	r3, [pc, #24]	@ (800cba8 <prvIdleTask+0x28>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d9f9      	bls.n	800cb88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb94:	4b05      	ldr	r3, [pc, #20]	@ (800cbac <prvIdleTask+0x2c>)
 800cb96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cba4:	e7f0      	b.n	800cb88 <prvIdleTask+0x8>
 800cba6:	bf00      	nop
 800cba8:	2000701c 	.word	0x2000701c
 800cbac:	e000ed04 	.word	0xe000ed04

0800cbb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	607b      	str	r3, [r7, #4]
 800cbba:	e00c      	b.n	800cbd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	4413      	add	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	4a10      	ldr	r2, [pc, #64]	@ (800cc08 <prvInitialiseTaskLists+0x58>)
 800cbc8:	4413      	add	r3, r2
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fd ff38 	bl	800aa40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	607b      	str	r3, [r7, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b37      	cmp	r3, #55	@ 0x37
 800cbda:	d9ef      	bls.n	800cbbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cbdc:	480b      	ldr	r0, [pc, #44]	@ (800cc0c <prvInitialiseTaskLists+0x5c>)
 800cbde:	f7fd ff2f 	bl	800aa40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cbe2:	480b      	ldr	r0, [pc, #44]	@ (800cc10 <prvInitialiseTaskLists+0x60>)
 800cbe4:	f7fd ff2c 	bl	800aa40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cbe8:	480a      	ldr	r0, [pc, #40]	@ (800cc14 <prvInitialiseTaskLists+0x64>)
 800cbea:	f7fd ff29 	bl	800aa40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cbee:	480a      	ldr	r0, [pc, #40]	@ (800cc18 <prvInitialiseTaskLists+0x68>)
 800cbf0:	f7fd ff26 	bl	800aa40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbf4:	4b09      	ldr	r3, [pc, #36]	@ (800cc1c <prvInitialiseTaskLists+0x6c>)
 800cbf6:	4a05      	ldr	r2, [pc, #20]	@ (800cc0c <prvInitialiseTaskLists+0x5c>)
 800cbf8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbfa:	4b09      	ldr	r3, [pc, #36]	@ (800cc20 <prvInitialiseTaskLists+0x70>)
 800cbfc:	4a04      	ldr	r2, [pc, #16]	@ (800cc10 <prvInitialiseTaskLists+0x60>)
 800cbfe:	601a      	str	r2, [r3, #0]
}
 800cc00:	bf00      	nop
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	2000701c 	.word	0x2000701c
 800cc0c:	2000747c 	.word	0x2000747c
 800cc10:	20007490 	.word	0x20007490
 800cc14:	200074ac 	.word	0x200074ac
 800cc18:	200074c0 	.word	0x200074c0
 800cc1c:	200074a4 	.word	0x200074a4
 800cc20:	200074a8 	.word	0x200074a8

0800cc24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc24:	b480      	push	{r7}
 800cc26:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc28:	bf00      	nop
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
	...

0800cc34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc6c <prvResetNextTaskUnblockTime+0x38>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d104      	bne.n	800cc4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc44:	4b0a      	ldr	r3, [pc, #40]	@ (800cc70 <prvResetNextTaskUnblockTime+0x3c>)
 800cc46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc4c:	e008      	b.n	800cc60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc4e:	4b07      	ldr	r3, [pc, #28]	@ (800cc6c <prvResetNextTaskUnblockTime+0x38>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	4a04      	ldr	r2, [pc, #16]	@ (800cc70 <prvResetNextTaskUnblockTime+0x3c>)
 800cc5e:	6013      	str	r3, [r2, #0]
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	200074a4 	.word	0x200074a4
 800cc70:	200074f4 	.word	0x200074f4

0800cc74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800cc7a:	4b05      	ldr	r3, [pc, #20]	@ (800cc90 <xTaskGetCurrentTaskHandle+0x1c>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800cc80:	687b      	ldr	r3, [r7, #4]
	}
 800cc82:	4618      	mov	r0, r3
 800cc84:	370c      	adds	r7, #12
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20007018 	.word	0x20007018

0800cc94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cc9a:	4b0b      	ldr	r3, [pc, #44]	@ (800ccc8 <xTaskGetSchedulerState+0x34>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cca2:	2301      	movs	r3, #1
 800cca4:	607b      	str	r3, [r7, #4]
 800cca6:	e008      	b.n	800ccba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cca8:	4b08      	ldr	r3, [pc, #32]	@ (800cccc <xTaskGetSchedulerState+0x38>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	607b      	str	r3, [r7, #4]
 800ccb4:	e001      	b.n	800ccba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccba:	687b      	ldr	r3, [r7, #4]
	}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	200074e0 	.word	0x200074e0
 800cccc:	200074fc 	.word	0x200074fc

0800ccd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d051      	beq.n	800cd8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccea:	4b2a      	ldr	r3, [pc, #168]	@ (800cd94 <xTaskPriorityInherit+0xc4>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d241      	bcs.n	800cd78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	db06      	blt.n	800cd0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccfc:	4b25      	ldr	r3, [pc, #148]	@ (800cd94 <xTaskPriorityInherit+0xc4>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	6959      	ldr	r1, [r3, #20]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd12:	4613      	mov	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4a1f      	ldr	r2, [pc, #124]	@ (800cd98 <xTaskPriorityInherit+0xc8>)
 800cd1c:	4413      	add	r3, r2
 800cd1e:	4299      	cmp	r1, r3
 800cd20:	d122      	bne.n	800cd68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	3304      	adds	r3, #4
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fd ff14 	bl	800ab54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd2c:	4b19      	ldr	r3, [pc, #100]	@ (800cd94 <xTaskPriorityInherit+0xc4>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd3a:	4b18      	ldr	r3, [pc, #96]	@ (800cd9c <xTaskPriorityInherit+0xcc>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d903      	bls.n	800cd4a <xTaskPriorityInherit+0x7a>
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd46:	4a15      	ldr	r2, [pc, #84]	@ (800cd9c <xTaskPriorityInherit+0xcc>)
 800cd48:	6013      	str	r3, [r2, #0]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd4e:	4613      	mov	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4a10      	ldr	r2, [pc, #64]	@ (800cd98 <xTaskPriorityInherit+0xc8>)
 800cd58:	441a      	add	r2, r3
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	4619      	mov	r1, r3
 800cd60:	4610      	mov	r0, r2
 800cd62:	f7fd fe9a 	bl	800aa9a <vListInsertEnd>
 800cd66:	e004      	b.n	800cd72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd68:	4b0a      	ldr	r3, [pc, #40]	@ (800cd94 <xTaskPriorityInherit+0xc4>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cd72:	2301      	movs	r3, #1
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	e008      	b.n	800cd8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd7c:	4b05      	ldr	r3, [pc, #20]	@ (800cd94 <xTaskPriorityInherit+0xc4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d201      	bcs.n	800cd8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cd86:	2301      	movs	r3, #1
 800cd88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
	}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	20007018 	.word	0x20007018
 800cd98:	2000701c 	.word	0x2000701c
 800cd9c:	200074dc 	.word	0x200074dc

0800cda0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cdac:	2300      	movs	r3, #0
 800cdae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d05c      	beq.n	800ce70 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cdb6:	4b31      	ldr	r3, [pc, #196]	@ (800ce7c <xTaskPriorityDisinherit+0xdc>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d00d      	beq.n	800cddc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc4:	b672      	cpsid	i
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	b662      	cpsie	i
 800cdd4:	60fb      	str	r3, [r7, #12]
}
 800cdd6:	bf00      	nop
 800cdd8:	bf00      	nop
 800cdda:	e7fd      	b.n	800cdd8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10d      	bne.n	800ce00 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800cde4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde8:	b672      	cpsid	i
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	b662      	cpsie	i
 800cdf8:	60bb      	str	r3, [r7, #8]
}
 800cdfa:	bf00      	nop
 800cdfc:	bf00      	nop
 800cdfe:	e7fd      	b.n	800cdfc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce04:	1e5a      	subs	r2, r3, #1
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d02c      	beq.n	800ce70 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d128      	bne.n	800ce70 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	3304      	adds	r3, #4
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fd fe96 	bl	800ab54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce40:	4b0f      	ldr	r3, [pc, #60]	@ (800ce80 <xTaskPriorityDisinherit+0xe0>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d903      	bls.n	800ce50 <xTaskPriorityDisinherit+0xb0>
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce4c:	4a0c      	ldr	r2, [pc, #48]	@ (800ce80 <xTaskPriorityDisinherit+0xe0>)
 800ce4e:	6013      	str	r3, [r2, #0]
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce54:	4613      	mov	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	4413      	add	r3, r2
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4a09      	ldr	r2, [pc, #36]	@ (800ce84 <xTaskPriorityDisinherit+0xe4>)
 800ce5e:	441a      	add	r2, r3
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	3304      	adds	r3, #4
 800ce64:	4619      	mov	r1, r3
 800ce66:	4610      	mov	r0, r2
 800ce68:	f7fd fe17 	bl	800aa9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce70:	697b      	ldr	r3, [r7, #20]
	}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3718      	adds	r7, #24
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20007018 	.word	0x20007018
 800ce80:	200074dc 	.word	0x200074dc
 800ce84:	2000701c 	.word	0x2000701c

0800ce88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b088      	sub	sp, #32
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ce96:	2301      	movs	r3, #1
 800ce98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d070      	beq.n	800cf82 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10d      	bne.n	800cec4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceac:	b672      	cpsid	i
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	b662      	cpsie	i
 800cebc:	60fb      	str	r3, [r7, #12]
}
 800cebe:	bf00      	nop
 800cec0:	bf00      	nop
 800cec2:	e7fd      	b.n	800cec0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cec8:	683a      	ldr	r2, [r7, #0]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d902      	bls.n	800ced4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	61fb      	str	r3, [r7, #28]
 800ced2:	e002      	b.n	800ceda <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ced8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cede:	69fa      	ldr	r2, [r7, #28]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d04e      	beq.n	800cf82 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cee8:	697a      	ldr	r2, [r7, #20]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d149      	bne.n	800cf82 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ceee:	4b27      	ldr	r3, [pc, #156]	@ (800cf8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	69ba      	ldr	r2, [r7, #24]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d10d      	bne.n	800cf14 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800cef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefc:	b672      	cpsid	i
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	b662      	cpsie	i
 800cf0c:	60bb      	str	r3, [r7, #8]
}
 800cf0e:	bf00      	nop
 800cf10:	bf00      	nop
 800cf12:	e7fd      	b.n	800cf10 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	69fa      	ldr	r2, [r7, #28]
 800cf1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	db04      	blt.n	800cf32 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf28:	69fb      	ldr	r3, [r7, #28]
 800cf2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	6959      	ldr	r1, [r3, #20]
 800cf36:	693a      	ldr	r2, [r7, #16]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	4413      	add	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4a13      	ldr	r2, [pc, #76]	@ (800cf90 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cf42:	4413      	add	r3, r2
 800cf44:	4299      	cmp	r1, r3
 800cf46:	d11c      	bne.n	800cf82 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fd fe01 	bl	800ab54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf56:	4b0f      	ldr	r3, [pc, #60]	@ (800cf94 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d903      	bls.n	800cf66 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf62:	4a0c      	ldr	r2, [pc, #48]	@ (800cf94 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800cf64:	6013      	str	r3, [r2, #0]
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4a07      	ldr	r2, [pc, #28]	@ (800cf90 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cf74:	441a      	add	r2, r3
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	3304      	adds	r3, #4
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	f7fd fd8c 	bl	800aa9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf82:	bf00      	nop
 800cf84:	3720      	adds	r7, #32
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20007018 	.word	0x20007018
 800cf90:	2000701c 	.word	0x2000701c
 800cf94:	200074dc 	.word	0x200074dc

0800cf98 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800cf9e:	4b09      	ldr	r3, [pc, #36]	@ (800cfc4 <uxTaskResetEventItemValue+0x2c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfa6:	4b07      	ldr	r3, [pc, #28]	@ (800cfc4 <uxTaskResetEventItemValue+0x2c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfac:	4b05      	ldr	r3, [pc, #20]	@ (800cfc4 <uxTaskResetEventItemValue+0x2c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800cfb4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800cfb6:	687b      	ldr	r3, [r7, #4]
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	20007018 	.word	0x20007018

0800cfc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cfc8:	b480      	push	{r7}
 800cfca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cfcc:	4b07      	ldr	r3, [pc, #28]	@ (800cfec <pvTaskIncrementMutexHeldCount+0x24>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d004      	beq.n	800cfde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cfd4:	4b05      	ldr	r3, [pc, #20]	@ (800cfec <pvTaskIncrementMutexHeldCount+0x24>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfda:	3201      	adds	r2, #1
 800cfdc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cfde:	4b03      	ldr	r3, [pc, #12]	@ (800cfec <pvTaskIncrementMutexHeldCount+0x24>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
	}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	20007018 	.word	0x20007018

0800cff0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cffa:	4b21      	ldr	r3, [pc, #132]	@ (800d080 <prvAddCurrentTaskToDelayedList+0x90>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d000:	4b20      	ldr	r3, [pc, #128]	@ (800d084 <prvAddCurrentTaskToDelayedList+0x94>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3304      	adds	r3, #4
 800d006:	4618      	mov	r0, r3
 800d008:	f7fd fda4 	bl	800ab54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d012:	d10a      	bne.n	800d02a <prvAddCurrentTaskToDelayedList+0x3a>
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d007      	beq.n	800d02a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d01a:	4b1a      	ldr	r3, [pc, #104]	@ (800d084 <prvAddCurrentTaskToDelayedList+0x94>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	3304      	adds	r3, #4
 800d020:	4619      	mov	r1, r3
 800d022:	4819      	ldr	r0, [pc, #100]	@ (800d088 <prvAddCurrentTaskToDelayedList+0x98>)
 800d024:	f7fd fd39 	bl	800aa9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d028:	e026      	b.n	800d078 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4413      	add	r3, r2
 800d030:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d032:	4b14      	ldr	r3, [pc, #80]	@ (800d084 <prvAddCurrentTaskToDelayedList+0x94>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d209      	bcs.n	800d056 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d042:	4b12      	ldr	r3, [pc, #72]	@ (800d08c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	4b0f      	ldr	r3, [pc, #60]	@ (800d084 <prvAddCurrentTaskToDelayedList+0x94>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3304      	adds	r3, #4
 800d04c:	4619      	mov	r1, r3
 800d04e:	4610      	mov	r0, r2
 800d050:	f7fd fd47 	bl	800aae2 <vListInsert>
}
 800d054:	e010      	b.n	800d078 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d056:	4b0e      	ldr	r3, [pc, #56]	@ (800d090 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	4b0a      	ldr	r3, [pc, #40]	@ (800d084 <prvAddCurrentTaskToDelayedList+0x94>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3304      	adds	r3, #4
 800d060:	4619      	mov	r1, r3
 800d062:	4610      	mov	r0, r2
 800d064:	f7fd fd3d 	bl	800aae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d068:	4b0a      	ldr	r3, [pc, #40]	@ (800d094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d202      	bcs.n	800d078 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d072:	4a08      	ldr	r2, [pc, #32]	@ (800d094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	6013      	str	r3, [r2, #0]
}
 800d078:	bf00      	nop
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	200074d8 	.word	0x200074d8
 800d084:	20007018 	.word	0x20007018
 800d088:	200074c0 	.word	0x200074c0
 800d08c:	200074a8 	.word	0x200074a8
 800d090:	200074a4 	.word	0x200074a4
 800d094:	200074f4 	.word	0x200074f4

0800d098 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b08a      	sub	sp, #40	@ 0x28
 800d09c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d0a2:	f000 fb21 	bl	800d6e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d0a6:	4b1e      	ldr	r3, [pc, #120]	@ (800d120 <xTimerCreateTimerTask+0x88>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d021      	beq.n	800d0f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d0b6:	1d3a      	adds	r2, r7, #4
 800d0b8:	f107 0108 	add.w	r1, r7, #8
 800d0bc:	f107 030c 	add.w	r3, r7, #12
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fd fa9d 	bl	800a600 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0c6:	6879      	ldr	r1, [r7, #4]
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	9202      	str	r2, [sp, #8]
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	460a      	mov	r2, r1
 800d0d8:	4912      	ldr	r1, [pc, #72]	@ (800d124 <xTimerCreateTimerTask+0x8c>)
 800d0da:	4813      	ldr	r0, [pc, #76]	@ (800d128 <xTimerCreateTimerTask+0x90>)
 800d0dc:	f7fe fed6 	bl	800be8c <xTaskCreateStatic>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	4a12      	ldr	r2, [pc, #72]	@ (800d12c <xTimerCreateTimerTask+0x94>)
 800d0e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d0e6:	4b11      	ldr	r3, [pc, #68]	@ (800d12c <xTimerCreateTimerTask+0x94>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10d      	bne.n	800d114 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fc:	b672      	cpsid	i
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	b662      	cpsie	i
 800d10c:	613b      	str	r3, [r7, #16]
}
 800d10e:	bf00      	nop
 800d110:	bf00      	nop
 800d112:	e7fd      	b.n	800d110 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d114:	697b      	ldr	r3, [r7, #20]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	20007530 	.word	0x20007530
 800d124:	0801d7b4 	.word	0x0801d7b4
 800d128:	0800d271 	.word	0x0800d271
 800d12c:	20007534 	.word	0x20007534

0800d130 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b08a      	sub	sp, #40	@ 0x28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d13e:	2300      	movs	r3, #0
 800d140:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10d      	bne.n	800d164 <xTimerGenericCommand+0x34>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14c:	b672      	cpsid	i
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	b662      	cpsie	i
 800d15c:	623b      	str	r3, [r7, #32]
}
 800d15e:	bf00      	nop
 800d160:	bf00      	nop
 800d162:	e7fd      	b.n	800d160 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d164:	4b19      	ldr	r3, [pc, #100]	@ (800d1cc <xTimerGenericCommand+0x9c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d02a      	beq.n	800d1c2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	2b05      	cmp	r3, #5
 800d17c:	dc18      	bgt.n	800d1b0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d17e:	f7ff fd89 	bl	800cc94 <xTaskGetSchedulerState>
 800d182:	4603      	mov	r3, r0
 800d184:	2b02      	cmp	r3, #2
 800d186:	d109      	bne.n	800d19c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d188:	4b10      	ldr	r3, [pc, #64]	@ (800d1cc <xTimerGenericCommand+0x9c>)
 800d18a:	6818      	ldr	r0, [r3, #0]
 800d18c:	f107 0110 	add.w	r1, r7, #16
 800d190:	2300      	movs	r3, #0
 800d192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d194:	f7fd ff94 	bl	800b0c0 <xQueueGenericSend>
 800d198:	6278      	str	r0, [r7, #36]	@ 0x24
 800d19a:	e012      	b.n	800d1c2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d19c:	4b0b      	ldr	r3, [pc, #44]	@ (800d1cc <xTimerGenericCommand+0x9c>)
 800d19e:	6818      	ldr	r0, [r3, #0]
 800d1a0:	f107 0110 	add.w	r1, r7, #16
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f7fd ff8a 	bl	800b0c0 <xQueueGenericSend>
 800d1ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800d1ae:	e008      	b.n	800d1c2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1b0:	4b06      	ldr	r3, [pc, #24]	@ (800d1cc <xTimerGenericCommand+0x9c>)
 800d1b2:	6818      	ldr	r0, [r3, #0]
 800d1b4:	f107 0110 	add.w	r1, r7, #16
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	f7fe f88a 	bl	800b2d4 <xQueueGenericSendFromISR>
 800d1c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3728      	adds	r7, #40	@ 0x28
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	20007530 	.word	0x20007530

0800d1d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b088      	sub	sp, #32
 800d1d4:	af02      	add	r7, sp, #8
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1da:	4b24      	ldr	r3, [pc, #144]	@ (800d26c <prvProcessExpiredTimer+0x9c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fd fcb3 	bl	800ab54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1f4:	f003 0304 	and.w	r3, r3, #4
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d025      	beq.n	800d248 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	699a      	ldr	r2, [r3, #24]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	18d1      	adds	r1, r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	6978      	ldr	r0, [r7, #20]
 800d20a:	f000 f8d7 	bl	800d3bc <prvInsertTimerInActiveList>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d022      	beq.n	800d25a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d214:	2300      	movs	r3, #0
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	2300      	movs	r3, #0
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	2100      	movs	r1, #0
 800d21e:	6978      	ldr	r0, [r7, #20]
 800d220:	f7ff ff86 	bl	800d130 <xTimerGenericCommand>
 800d224:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d116      	bne.n	800d25a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d230:	b672      	cpsid	i
 800d232:	f383 8811 	msr	BASEPRI, r3
 800d236:	f3bf 8f6f 	isb	sy
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	b662      	cpsie	i
 800d240:	60fb      	str	r3, [r7, #12]
}
 800d242:	bf00      	nop
 800d244:	bf00      	nop
 800d246:	e7fd      	b.n	800d244 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d24e:	f023 0301 	bic.w	r3, r3, #1
 800d252:	b2da      	uxtb	r2, r3
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	6978      	ldr	r0, [r7, #20]
 800d260:	4798      	blx	r3
}
 800d262:	bf00      	nop
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	20007528 	.word	0x20007528

0800d270 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d278:	f107 0308 	add.w	r3, r7, #8
 800d27c:	4618      	mov	r0, r3
 800d27e:	f000 f859 	bl	800d334 <prvGetNextExpireTime>
 800d282:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	4619      	mov	r1, r3
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f000 f805 	bl	800d298 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d28e:	f000 f8d7 	bl	800d440 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d292:	bf00      	nop
 800d294:	e7f0      	b.n	800d278 <prvTimerTask+0x8>
	...

0800d298 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d2a2:	f7ff f865 	bl	800c370 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2a6:	f107 0308 	add.w	r3, r7, #8
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 f866 	bl	800d37c <prvSampleTimeNow>
 800d2b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d130      	bne.n	800d31a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10a      	bne.n	800d2d4 <prvProcessTimerOrBlockTask+0x3c>
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d806      	bhi.n	800d2d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d2c6:	f7ff f861 	bl	800c38c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d2ca:	68f9      	ldr	r1, [r7, #12]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7ff ff7f 	bl	800d1d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d2d2:	e024      	b.n	800d31e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d008      	beq.n	800d2ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2da:	4b13      	ldr	r3, [pc, #76]	@ (800d328 <prvProcessTimerOrBlockTask+0x90>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <prvProcessTimerOrBlockTask+0x50>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e000      	b.n	800d2ea <prvProcessTimerOrBlockTask+0x52>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d32c <prvProcessTimerOrBlockTask+0x94>)
 800d2ee:	6818      	ldr	r0, [r3, #0]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	1ad3      	subs	r3, r2, r3
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f7fe fd93 	bl	800be24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d2fe:	f7ff f845 	bl	800c38c <xTaskResumeAll>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10a      	bne.n	800d31e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d308:	4b09      	ldr	r3, [pc, #36]	@ (800d330 <prvProcessTimerOrBlockTask+0x98>)
 800d30a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	f3bf 8f6f 	isb	sy
}
 800d318:	e001      	b.n	800d31e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d31a:	f7ff f837 	bl	800c38c <xTaskResumeAll>
}
 800d31e:	bf00      	nop
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	2000752c 	.word	0x2000752c
 800d32c:	20007530 	.word	0x20007530
 800d330:	e000ed04 	.word	0xe000ed04

0800d334 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d33c:	4b0e      	ldr	r3, [pc, #56]	@ (800d378 <prvGetNextExpireTime+0x44>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d101      	bne.n	800d34a <prvGetNextExpireTime+0x16>
 800d346:	2201      	movs	r2, #1
 800d348:	e000      	b.n	800d34c <prvGetNextExpireTime+0x18>
 800d34a:	2200      	movs	r2, #0
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d105      	bne.n	800d364 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d358:	4b07      	ldr	r3, [pc, #28]	@ (800d378 <prvGetNextExpireTime+0x44>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	60fb      	str	r3, [r7, #12]
 800d362:	e001      	b.n	800d368 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d364:	2300      	movs	r3, #0
 800d366:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d368:	68fb      	ldr	r3, [r7, #12]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3714      	adds	r7, #20
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	20007528 	.word	0x20007528

0800d37c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d384:	f7ff f8a2 	bl	800c4cc <xTaskGetTickCount>
 800d388:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d38a:	4b0b      	ldr	r3, [pc, #44]	@ (800d3b8 <prvSampleTimeNow+0x3c>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	429a      	cmp	r2, r3
 800d392:	d205      	bcs.n	800d3a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d394:	f000 f940 	bl	800d618 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	e002      	b.n	800d3a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d3a6:	4a04      	ldr	r2, [pc, #16]	@ (800d3b8 <prvSampleTimeNow+0x3c>)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20007538 	.word	0x20007538

0800d3bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
 800d3c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d812      	bhi.n	800d408 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	1ad2      	subs	r2, r2, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	699b      	ldr	r3, [r3, #24]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d302      	bcc.n	800d3f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	617b      	str	r3, [r7, #20]
 800d3f4:	e01b      	b.n	800d42e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d3f6:	4b10      	ldr	r3, [pc, #64]	@ (800d438 <prvInsertTimerInActiveList+0x7c>)
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f7fd fb6e 	bl	800aae2 <vListInsert>
 800d406:	e012      	b.n	800d42e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d206      	bcs.n	800d41e <prvInsertTimerInActiveList+0x62>
 800d410:	68ba      	ldr	r2, [r7, #8]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	429a      	cmp	r2, r3
 800d416:	d302      	bcc.n	800d41e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d418:	2301      	movs	r3, #1
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	e007      	b.n	800d42e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d41e:	4b07      	ldr	r3, [pc, #28]	@ (800d43c <prvInsertTimerInActiveList+0x80>)
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3304      	adds	r3, #4
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f7fd fb5a 	bl	800aae2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d42e:	697b      	ldr	r3, [r7, #20]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3718      	adds	r7, #24
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	2000752c 	.word	0x2000752c
 800d43c:	20007528 	.word	0x20007528

0800d440 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b08e      	sub	sp, #56	@ 0x38
 800d444:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d446:	e0d4      	b.n	800d5f2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	da1b      	bge.n	800d486 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d44e:	1d3b      	adds	r3, r7, #4
 800d450:	3304      	adds	r3, #4
 800d452:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10d      	bne.n	800d476 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45e:	b672      	cpsid	i
 800d460:	f383 8811 	msr	BASEPRI, r3
 800d464:	f3bf 8f6f 	isb	sy
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	b662      	cpsie	i
 800d46e:	61fb      	str	r3, [r7, #28]
}
 800d470:	bf00      	nop
 800d472:	bf00      	nop
 800d474:	e7fd      	b.n	800d472 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d47c:	6850      	ldr	r0, [r2, #4]
 800d47e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d480:	6892      	ldr	r2, [r2, #8]
 800d482:	4611      	mov	r1, r2
 800d484:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f2c0 80b2 	blt.w	800d5f2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d004      	beq.n	800d4a4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d49c:	3304      	adds	r3, #4
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fd fb58 	bl	800ab54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4a4:	463b      	mov	r3, r7
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff ff68 	bl	800d37c <prvSampleTimeNow>
 800d4ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b09      	cmp	r3, #9
 800d4b2:	f200 809b 	bhi.w	800d5ec <prvProcessReceivedCommands+0x1ac>
 800d4b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d4bc <prvProcessReceivedCommands+0x7c>)
 800d4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4bc:	0800d4e5 	.word	0x0800d4e5
 800d4c0:	0800d4e5 	.word	0x0800d4e5
 800d4c4:	0800d4e5 	.word	0x0800d4e5
 800d4c8:	0800d55f 	.word	0x0800d55f
 800d4cc:	0800d573 	.word	0x0800d573
 800d4d0:	0800d5c3 	.word	0x0800d5c3
 800d4d4:	0800d4e5 	.word	0x0800d4e5
 800d4d8:	0800d4e5 	.word	0x0800d4e5
 800d4dc:	0800d55f 	.word	0x0800d55f
 800d4e0:	0800d573 	.word	0x0800d573
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4ea:	f043 0301 	orr.w	r3, r3, #1
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fa:	699b      	ldr	r3, [r3, #24]
 800d4fc:	18d1      	adds	r1, r2, r3
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d504:	f7ff ff5a 	bl	800d3bc <prvInsertTimerInActiveList>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d070      	beq.n	800d5f0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d514:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d51c:	f003 0304 	and.w	r3, r3, #4
 800d520:	2b00      	cmp	r3, #0
 800d522:	d065      	beq.n	800d5f0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d524:	68ba      	ldr	r2, [r7, #8]
 800d526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	441a      	add	r2, r3
 800d52c:	2300      	movs	r3, #0
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	2300      	movs	r3, #0
 800d532:	2100      	movs	r1, #0
 800d534:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d536:	f7ff fdfb 	bl	800d130 <xTimerGenericCommand>
 800d53a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d156      	bne.n	800d5f0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d546:	b672      	cpsid	i
 800d548:	f383 8811 	msr	BASEPRI, r3
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	b662      	cpsie	i
 800d556:	61bb      	str	r3, [r7, #24]
}
 800d558:	bf00      	nop
 800d55a:	bf00      	nop
 800d55c:	e7fd      	b.n	800d55a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d564:	f023 0301 	bic.w	r3, r3, #1
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d570:	e03f      	b.n	800d5f2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d578:	f043 0301 	orr.w	r3, r3, #1
 800d57c:	b2da      	uxtb	r2, r3
 800d57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d580:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d588:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d10d      	bne.n	800d5ae <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800d592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d596:	b672      	cpsid	i
 800d598:	f383 8811 	msr	BASEPRI, r3
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	b662      	cpsie	i
 800d5a6:	617b      	str	r3, [r7, #20]
}
 800d5a8:	bf00      	nop
 800d5aa:	bf00      	nop
 800d5ac:	e7fd      	b.n	800d5aa <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b0:	699a      	ldr	r2, [r3, #24]
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b4:	18d1      	adds	r1, r2, r3
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5bc:	f7ff fefe 	bl	800d3bc <prvInsertTimerInActiveList>
					break;
 800d5c0:	e017      	b.n	800d5f2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5c8:	f003 0302 	and.w	r3, r3, #2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d103      	bne.n	800d5d8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800d5d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5d2:	f000 fbfb 	bl	800ddcc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5d6:	e00c      	b.n	800d5f2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5de:	f023 0301 	bic.w	r3, r3, #1
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d5ea:	e002      	b.n	800d5f2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800d5ec:	bf00      	nop
 800d5ee:	e000      	b.n	800d5f2 <prvProcessReceivedCommands+0x1b2>
					break;
 800d5f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5f2:	4b08      	ldr	r3, [pc, #32]	@ (800d614 <prvProcessReceivedCommands+0x1d4>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	1d39      	adds	r1, r7, #4
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fd ffa6 	bl	800b54c <xQueueReceive>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	f47f af20 	bne.w	800d448 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d608:	bf00      	nop
 800d60a:	bf00      	nop
 800d60c:	3730      	adds	r7, #48	@ 0x30
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	20007530 	.word	0x20007530

0800d618 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d61e:	e04b      	b.n	800d6b8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d620:	4b2f      	ldr	r3, [pc, #188]	@ (800d6e0 <prvSwitchTimerLists+0xc8>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d62a:	4b2d      	ldr	r3, [pc, #180]	@ (800d6e0 <prvSwitchTimerLists+0xc8>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3304      	adds	r3, #4
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fd fa8b 	bl	800ab54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6a1b      	ldr	r3, [r3, #32]
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d031      	beq.n	800d6b8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	693a      	ldr	r2, [r7, #16]
 800d65a:	4413      	add	r3, r2
 800d65c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d65e:	68ba      	ldr	r2, [r7, #8]
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	429a      	cmp	r2, r3
 800d664:	d90e      	bls.n	800d684 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d672:	4b1b      	ldr	r3, [pc, #108]	@ (800d6e0 <prvSwitchTimerLists+0xc8>)
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	3304      	adds	r3, #4
 800d67a:	4619      	mov	r1, r3
 800d67c:	4610      	mov	r0, r2
 800d67e:	f7fd fa30 	bl	800aae2 <vListInsert>
 800d682:	e019      	b.n	800d6b8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d684:	2300      	movs	r3, #0
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	2300      	movs	r3, #0
 800d68a:	693a      	ldr	r2, [r7, #16]
 800d68c:	2100      	movs	r1, #0
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f7ff fd4e 	bl	800d130 <xTimerGenericCommand>
 800d694:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10d      	bne.n	800d6b8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a0:	b672      	cpsid	i
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	b662      	cpsie	i
 800d6b0:	603b      	str	r3, [r7, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	bf00      	nop
 800d6b6:	e7fd      	b.n	800d6b4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6b8:	4b09      	ldr	r3, [pc, #36]	@ (800d6e0 <prvSwitchTimerLists+0xc8>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1ae      	bne.n	800d620 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d6c2:	4b07      	ldr	r3, [pc, #28]	@ (800d6e0 <prvSwitchTimerLists+0xc8>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d6c8:	4b06      	ldr	r3, [pc, #24]	@ (800d6e4 <prvSwitchTimerLists+0xcc>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a04      	ldr	r2, [pc, #16]	@ (800d6e0 <prvSwitchTimerLists+0xc8>)
 800d6ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d6d0:	4a04      	ldr	r2, [pc, #16]	@ (800d6e4 <prvSwitchTimerLists+0xcc>)
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	6013      	str	r3, [r2, #0]
}
 800d6d6:	bf00      	nop
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20007528 	.word	0x20007528
 800d6e4:	2000752c 	.word	0x2000752c

0800d6e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6ee:	f000 f96d 	bl	800d9cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6f2:	4b15      	ldr	r3, [pc, #84]	@ (800d748 <prvCheckForValidListAndQueue+0x60>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d120      	bne.n	800d73c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6fa:	4814      	ldr	r0, [pc, #80]	@ (800d74c <prvCheckForValidListAndQueue+0x64>)
 800d6fc:	f7fd f9a0 	bl	800aa40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d700:	4813      	ldr	r0, [pc, #76]	@ (800d750 <prvCheckForValidListAndQueue+0x68>)
 800d702:	f7fd f99d 	bl	800aa40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d706:	4b13      	ldr	r3, [pc, #76]	@ (800d754 <prvCheckForValidListAndQueue+0x6c>)
 800d708:	4a10      	ldr	r2, [pc, #64]	@ (800d74c <prvCheckForValidListAndQueue+0x64>)
 800d70a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d70c:	4b12      	ldr	r3, [pc, #72]	@ (800d758 <prvCheckForValidListAndQueue+0x70>)
 800d70e:	4a10      	ldr	r2, [pc, #64]	@ (800d750 <prvCheckForValidListAndQueue+0x68>)
 800d710:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d712:	2300      	movs	r3, #0
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	4b11      	ldr	r3, [pc, #68]	@ (800d75c <prvCheckForValidListAndQueue+0x74>)
 800d718:	4a11      	ldr	r2, [pc, #68]	@ (800d760 <prvCheckForValidListAndQueue+0x78>)
 800d71a:	2110      	movs	r1, #16
 800d71c:	200a      	movs	r0, #10
 800d71e:	f7fd faaf 	bl	800ac80 <xQueueGenericCreateStatic>
 800d722:	4603      	mov	r3, r0
 800d724:	4a08      	ldr	r2, [pc, #32]	@ (800d748 <prvCheckForValidListAndQueue+0x60>)
 800d726:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d728:	4b07      	ldr	r3, [pc, #28]	@ (800d748 <prvCheckForValidListAndQueue+0x60>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d005      	beq.n	800d73c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d730:	4b05      	ldr	r3, [pc, #20]	@ (800d748 <prvCheckForValidListAndQueue+0x60>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	490b      	ldr	r1, [pc, #44]	@ (800d764 <prvCheckForValidListAndQueue+0x7c>)
 800d736:	4618      	mov	r0, r3
 800d738:	f7fe fb20 	bl	800bd7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d73c:	f000 f97c 	bl	800da38 <vPortExitCritical>
}
 800d740:	bf00      	nop
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20007530 	.word	0x20007530
 800d74c:	20007500 	.word	0x20007500
 800d750:	20007514 	.word	0x20007514
 800d754:	20007528 	.word	0x20007528
 800d758:	2000752c 	.word	0x2000752c
 800d75c:	200075dc 	.word	0x200075dc
 800d760:	2000753c 	.word	0x2000753c
 800d764:	0801d7bc 	.word	0x0801d7bc

0800d768 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08a      	sub	sp, #40	@ 0x28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
 800d774:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800d776:	f06f 0301 	mvn.w	r3, #1
 800d77a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d788:	4b06      	ldr	r3, [pc, #24]	@ (800d7a4 <xTimerPendFunctionCallFromISR+0x3c>)
 800d78a:	6818      	ldr	r0, [r3, #0]
 800d78c:	f107 0114 	add.w	r1, r7, #20
 800d790:	2300      	movs	r3, #0
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	f7fd fd9e 	bl	800b2d4 <xQueueGenericSendFromISR>
 800d798:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800d79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3728      	adds	r7, #40	@ 0x28
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20007530 	.word	0x20007530

0800d7a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	3b04      	subs	r3, #4
 800d7b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d7c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	3b04      	subs	r3, #4
 800d7c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	f023 0201 	bic.w	r2, r3, #1
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	3b04      	subs	r3, #4
 800d7d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d7d8:	4a0c      	ldr	r2, [pc, #48]	@ (800d80c <pxPortInitialiseStack+0x64>)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3b14      	subs	r3, #20
 800d7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	3b04      	subs	r3, #4
 800d7ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f06f 0202 	mvn.w	r2, #2
 800d7f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	3b20      	subs	r3, #32
 800d7fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	0800d811 	.word	0x0800d811

0800d810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d816:	2300      	movs	r3, #0
 800d818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d81a:	4b15      	ldr	r3, [pc, #84]	@ (800d870 <prvTaskExitError+0x60>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d822:	d00d      	beq.n	800d840 <prvTaskExitError+0x30>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d828:	b672      	cpsid	i
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	b662      	cpsie	i
 800d838:	60fb      	str	r3, [r7, #12]
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	e7fd      	b.n	800d83c <prvTaskExitError+0x2c>
	__asm volatile
 800d840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d844:	b672      	cpsid	i
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	b662      	cpsie	i
 800d854:	60bb      	str	r3, [r7, #8]
}
 800d856:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d858:	bf00      	nop
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d0fc      	beq.n	800d85a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d860:	bf00      	nop
 800d862:	bf00      	nop
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	20000020 	.word	0x20000020
	...

0800d880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d880:	4b07      	ldr	r3, [pc, #28]	@ (800d8a0 <pxCurrentTCBConst2>)
 800d882:	6819      	ldr	r1, [r3, #0]
 800d884:	6808      	ldr	r0, [r1, #0]
 800d886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88a:	f380 8809 	msr	PSP, r0
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f04f 0000 	mov.w	r0, #0
 800d896:	f380 8811 	msr	BASEPRI, r0
 800d89a:	4770      	bx	lr
 800d89c:	f3af 8000 	nop.w

0800d8a0 <pxCurrentTCBConst2>:
 800d8a0:	20007018 	.word	0x20007018
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d8a4:	bf00      	nop
 800d8a6:	bf00      	nop

0800d8a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d8a8:	4808      	ldr	r0, [pc, #32]	@ (800d8cc <prvPortStartFirstTask+0x24>)
 800d8aa:	6800      	ldr	r0, [r0, #0]
 800d8ac:	6800      	ldr	r0, [r0, #0]
 800d8ae:	f380 8808 	msr	MSP, r0
 800d8b2:	f04f 0000 	mov.w	r0, #0
 800d8b6:	f380 8814 	msr	CONTROL, r0
 800d8ba:	b662      	cpsie	i
 800d8bc:	b661      	cpsie	f
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	df00      	svc	0
 800d8c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d8ca:	bf00      	nop
 800d8cc:	e000ed08 	.word	0xe000ed08

0800d8d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d8d6:	4b37      	ldr	r3, [pc, #220]	@ (800d9b4 <xPortStartScheduler+0xe4>)
 800d8d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	22ff      	movs	r2, #255	@ 0xff
 800d8e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8f0:	78fb      	ldrb	r3, [r7, #3]
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	4b2f      	ldr	r3, [pc, #188]	@ (800d9b8 <xPortStartScheduler+0xe8>)
 800d8fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d8fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d9bc <xPortStartScheduler+0xec>)
 800d900:	2207      	movs	r2, #7
 800d902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d904:	e009      	b.n	800d91a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d906:	4b2d      	ldr	r3, [pc, #180]	@ (800d9bc <xPortStartScheduler+0xec>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	4a2b      	ldr	r2, [pc, #172]	@ (800d9bc <xPortStartScheduler+0xec>)
 800d90e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d910:	78fb      	ldrb	r3, [r7, #3]
 800d912:	b2db      	uxtb	r3, r3
 800d914:	005b      	lsls	r3, r3, #1
 800d916:	b2db      	uxtb	r3, r3
 800d918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d922:	2b80      	cmp	r3, #128	@ 0x80
 800d924:	d0ef      	beq.n	800d906 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d926:	4b25      	ldr	r3, [pc, #148]	@ (800d9bc <xPortStartScheduler+0xec>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f1c3 0307 	rsb	r3, r3, #7
 800d92e:	2b04      	cmp	r3, #4
 800d930:	d00d      	beq.n	800d94e <xPortStartScheduler+0x7e>
	__asm volatile
 800d932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d936:	b672      	cpsid	i
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	b662      	cpsie	i
 800d946:	60bb      	str	r3, [r7, #8]
}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	e7fd      	b.n	800d94a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d94e:	4b1b      	ldr	r3, [pc, #108]	@ (800d9bc <xPortStartScheduler+0xec>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	021b      	lsls	r3, r3, #8
 800d954:	4a19      	ldr	r2, [pc, #100]	@ (800d9bc <xPortStartScheduler+0xec>)
 800d956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d958:	4b18      	ldr	r3, [pc, #96]	@ (800d9bc <xPortStartScheduler+0xec>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d960:	4a16      	ldr	r2, [pc, #88]	@ (800d9bc <xPortStartScheduler+0xec>)
 800d962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	b2da      	uxtb	r2, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d96c:	4b14      	ldr	r3, [pc, #80]	@ (800d9c0 <xPortStartScheduler+0xf0>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a13      	ldr	r2, [pc, #76]	@ (800d9c0 <xPortStartScheduler+0xf0>)
 800d972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d978:	4b11      	ldr	r3, [pc, #68]	@ (800d9c0 <xPortStartScheduler+0xf0>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a10      	ldr	r2, [pc, #64]	@ (800d9c0 <xPortStartScheduler+0xf0>)
 800d97e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d984:	f000 f8dc 	bl	800db40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d988:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c4 <xPortStartScheduler+0xf4>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d98e:	f000 f8fb 	bl	800db88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d992:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c8 <xPortStartScheduler+0xf8>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c8 <xPortStartScheduler+0xf8>)
 800d998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d99c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d99e:	f7ff ff83 	bl	800d8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d9a2:	f7fe fe71 	bl	800c688 <vTaskSwitchContext>
	prvTaskExitError();
 800d9a6:	f7ff ff33 	bl	800d810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	e000e400 	.word	0xe000e400
 800d9b8:	2000762c 	.word	0x2000762c
 800d9bc:	20007630 	.word	0x20007630
 800d9c0:	e000ed20 	.word	0xe000ed20
 800d9c4:	20000020 	.word	0x20000020
 800d9c8:	e000ef34 	.word	0xe000ef34

0800d9cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
	__asm volatile
 800d9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d6:	b672      	cpsid	i
 800d9d8:	f383 8811 	msr	BASEPRI, r3
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	b662      	cpsie	i
 800d9e6:	607b      	str	r3, [r7, #4]
}
 800d9e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9ea:	4b11      	ldr	r3, [pc, #68]	@ (800da30 <vPortEnterCritical+0x64>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	4a0f      	ldr	r2, [pc, #60]	@ (800da30 <vPortEnterCritical+0x64>)
 800d9f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800da30 <vPortEnterCritical+0x64>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d112      	bne.n	800da22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800da34 <vPortEnterCritical+0x68>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	b2db      	uxtb	r3, r3
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00d      	beq.n	800da22 <vPortEnterCritical+0x56>
	__asm volatile
 800da06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0a:	b672      	cpsid	i
 800da0c:	f383 8811 	msr	BASEPRI, r3
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	b662      	cpsie	i
 800da1a:	603b      	str	r3, [r7, #0]
}
 800da1c:	bf00      	nop
 800da1e:	bf00      	nop
 800da20:	e7fd      	b.n	800da1e <vPortEnterCritical+0x52>
	}
}
 800da22:	bf00      	nop
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	20000020 	.word	0x20000020
 800da34:	e000ed04 	.word	0xe000ed04

0800da38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da3e:	4b13      	ldr	r3, [pc, #76]	@ (800da8c <vPortExitCritical+0x54>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10d      	bne.n	800da62 <vPortExitCritical+0x2a>
	__asm volatile
 800da46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4a:	b672      	cpsid	i
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	b662      	cpsie	i
 800da5a:	607b      	str	r3, [r7, #4]
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	e7fd      	b.n	800da5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800da62:	4b0a      	ldr	r3, [pc, #40]	@ (800da8c <vPortExitCritical+0x54>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	3b01      	subs	r3, #1
 800da68:	4a08      	ldr	r2, [pc, #32]	@ (800da8c <vPortExitCritical+0x54>)
 800da6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da6c:	4b07      	ldr	r3, [pc, #28]	@ (800da8c <vPortExitCritical+0x54>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d105      	bne.n	800da80 <vPortExitCritical+0x48>
 800da74:	2300      	movs	r3, #0
 800da76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	f383 8811 	msr	BASEPRI, r3
}
 800da7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	20000020 	.word	0x20000020

0800da90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da90:	f3ef 8009 	mrs	r0, PSP
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	4b15      	ldr	r3, [pc, #84]	@ (800daf0 <pxCurrentTCBConst>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	f01e 0f10 	tst.w	lr, #16
 800daa0:	bf08      	it	eq
 800daa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800daa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daaa:	6010      	str	r0, [r2, #0]
 800daac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dab4:	b672      	cpsid	i
 800dab6:	f380 8811 	msr	BASEPRI, r0
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	b662      	cpsie	i
 800dac4:	f7fe fde0 	bl	800c688 <vTaskSwitchContext>
 800dac8:	f04f 0000 	mov.w	r0, #0
 800dacc:	f380 8811 	msr	BASEPRI, r0
 800dad0:	bc09      	pop	{r0, r3}
 800dad2:	6819      	ldr	r1, [r3, #0]
 800dad4:	6808      	ldr	r0, [r1, #0]
 800dad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dada:	f01e 0f10 	tst.w	lr, #16
 800dade:	bf08      	it	eq
 800dae0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dae4:	f380 8809 	msr	PSP, r0
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop

0800daf0 <pxCurrentTCBConst>:
 800daf0:	20007018 	.word	0x20007018
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop

0800daf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db02:	b672      	cpsid	i
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	b662      	cpsie	i
 800db12:	607b      	str	r3, [r7, #4]
}
 800db14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db16:	f7fe fcfb 	bl	800c510 <xTaskIncrementTick>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db20:	4b06      	ldr	r3, [pc, #24]	@ (800db3c <SysTick_Handler+0x44>)
 800db22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db26:	601a      	str	r2, [r3, #0]
 800db28:	2300      	movs	r3, #0
 800db2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	f383 8811 	msr	BASEPRI, r3
}
 800db32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800db34:	bf00      	nop
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	e000ed04 	.word	0xe000ed04

0800db40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db40:	b480      	push	{r7}
 800db42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db44:	4b0b      	ldr	r3, [pc, #44]	@ (800db74 <vPortSetupTimerInterrupt+0x34>)
 800db46:	2200      	movs	r2, #0
 800db48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db4a:	4b0b      	ldr	r3, [pc, #44]	@ (800db78 <vPortSetupTimerInterrupt+0x38>)
 800db4c:	2200      	movs	r2, #0
 800db4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db50:	4b0a      	ldr	r3, [pc, #40]	@ (800db7c <vPortSetupTimerInterrupt+0x3c>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a0a      	ldr	r2, [pc, #40]	@ (800db80 <vPortSetupTimerInterrupt+0x40>)
 800db56:	fba2 2303 	umull	r2, r3, r2, r3
 800db5a:	099b      	lsrs	r3, r3, #6
 800db5c:	4a09      	ldr	r2, [pc, #36]	@ (800db84 <vPortSetupTimerInterrupt+0x44>)
 800db5e:	3b01      	subs	r3, #1
 800db60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db62:	4b04      	ldr	r3, [pc, #16]	@ (800db74 <vPortSetupTimerInterrupt+0x34>)
 800db64:	2207      	movs	r2, #7
 800db66:	601a      	str	r2, [r3, #0]
}
 800db68:	bf00      	nop
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	e000e010 	.word	0xe000e010
 800db78:	e000e018 	.word	0xe000e018
 800db7c:	20000000 	.word	0x20000000
 800db80:	10624dd3 	.word	0x10624dd3
 800db84:	e000e014 	.word	0xe000e014

0800db88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800db98 <vPortEnableVFP+0x10>
 800db8c:	6801      	ldr	r1, [r0, #0]
 800db8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800db92:	6001      	str	r1, [r0, #0]
 800db94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db96:	bf00      	nop
 800db98:	e000ed88 	.word	0xe000ed88

0800db9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dba2:	f3ef 8305 	mrs	r3, IPSR
 800dba6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b0f      	cmp	r3, #15
 800dbac:	d917      	bls.n	800dbde <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dbae:	4a1a      	ldr	r2, [pc, #104]	@ (800dc18 <vPortValidateInterruptPriority+0x7c>)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dbb8:	4b18      	ldr	r3, [pc, #96]	@ (800dc1c <vPortValidateInterruptPriority+0x80>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	7afa      	ldrb	r2, [r7, #11]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d20d      	bcs.n	800dbde <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc6:	b672      	cpsid	i
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	b662      	cpsie	i
 800dbd6:	607b      	str	r3, [r7, #4]
}
 800dbd8:	bf00      	nop
 800dbda:	bf00      	nop
 800dbdc:	e7fd      	b.n	800dbda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dbde:	4b10      	ldr	r3, [pc, #64]	@ (800dc20 <vPortValidateInterruptPriority+0x84>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dbe6:	4b0f      	ldr	r3, [pc, #60]	@ (800dc24 <vPortValidateInterruptPriority+0x88>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d90d      	bls.n	800dc0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf2:	b672      	cpsid	i
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	b662      	cpsie	i
 800dc02:	603b      	str	r3, [r7, #0]
}
 800dc04:	bf00      	nop
 800dc06:	bf00      	nop
 800dc08:	e7fd      	b.n	800dc06 <vPortValidateInterruptPriority+0x6a>
	}
 800dc0a:	bf00      	nop
 800dc0c:	3714      	adds	r7, #20
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	e000e3f0 	.word	0xe000e3f0
 800dc1c:	2000762c 	.word	0x2000762c
 800dc20:	e000ed0c 	.word	0xe000ed0c
 800dc24:	20007630 	.word	0x20007630

0800dc28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b08a      	sub	sp, #40	@ 0x28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dc30:	2300      	movs	r3, #0
 800dc32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dc34:	f7fe fb9c 	bl	800c370 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dc38:	4b5f      	ldr	r3, [pc, #380]	@ (800ddb8 <pvPortMalloc+0x190>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dc40:	f000 f924 	bl	800de8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dc44:	4b5d      	ldr	r3, [pc, #372]	@ (800ddbc <pvPortMalloc+0x194>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4013      	ands	r3, r2
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f040 8094 	bne.w	800dd7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d020      	beq.n	800dc9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800dc58:	2208      	movs	r2, #8
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f003 0307 	and.w	r3, r3, #7
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d017      	beq.n	800dc9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f023 0307 	bic.w	r3, r3, #7
 800dc70:	3308      	adds	r3, #8
 800dc72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f003 0307 	and.w	r3, r3, #7
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00d      	beq.n	800dc9a <pvPortMalloc+0x72>
	__asm volatile
 800dc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc82:	b672      	cpsid	i
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	b662      	cpsie	i
 800dc92:	617b      	str	r3, [r7, #20]
}
 800dc94:	bf00      	nop
 800dc96:	bf00      	nop
 800dc98:	e7fd      	b.n	800dc96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d06c      	beq.n	800dd7a <pvPortMalloc+0x152>
 800dca0:	4b47      	ldr	r3, [pc, #284]	@ (800ddc0 <pvPortMalloc+0x198>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d867      	bhi.n	800dd7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dcaa:	4b46      	ldr	r3, [pc, #280]	@ (800ddc4 <pvPortMalloc+0x19c>)
 800dcac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dcae:	4b45      	ldr	r3, [pc, #276]	@ (800ddc4 <pvPortMalloc+0x19c>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dcb4:	e004      	b.n	800dcc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d903      	bls.n	800dcd2 <pvPortMalloc+0xaa>
 800dcca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1f1      	bne.n	800dcb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dcd2:	4b39      	ldr	r3, [pc, #228]	@ (800ddb8 <pvPortMalloc+0x190>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d04e      	beq.n	800dd7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2208      	movs	r2, #8
 800dce2:	4413      	add	r3, r2
 800dce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	6a3b      	ldr	r3, [r7, #32]
 800dcec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf0:	685a      	ldr	r2, [r3, #4]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	1ad2      	subs	r2, r2, r3
 800dcf6:	2308      	movs	r3, #8
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d922      	bls.n	800dd44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dcfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4413      	add	r3, r2
 800dd04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	f003 0307 	and.w	r3, r3, #7
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00d      	beq.n	800dd2c <pvPortMalloc+0x104>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd14:	b672      	cpsid	i
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	b662      	cpsie	i
 800dd24:	613b      	str	r3, [r7, #16]
}
 800dd26:	bf00      	nop
 800dd28:	bf00      	nop
 800dd2a:	e7fd      	b.n	800dd28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	1ad2      	subs	r2, r2, r3
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dd3e:	69b8      	ldr	r0, [r7, #24]
 800dd40:	f000 f906 	bl	800df50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dd44:	4b1e      	ldr	r3, [pc, #120]	@ (800ddc0 <pvPortMalloc+0x198>)
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	4a1c      	ldr	r2, [pc, #112]	@ (800ddc0 <pvPortMalloc+0x198>)
 800dd50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dd52:	4b1b      	ldr	r3, [pc, #108]	@ (800ddc0 <pvPortMalloc+0x198>)
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	4b1c      	ldr	r3, [pc, #112]	@ (800ddc8 <pvPortMalloc+0x1a0>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d203      	bcs.n	800dd66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd5e:	4b18      	ldr	r3, [pc, #96]	@ (800ddc0 <pvPortMalloc+0x198>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a19      	ldr	r2, [pc, #100]	@ (800ddc8 <pvPortMalloc+0x1a0>)
 800dd64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	4b14      	ldr	r3, [pc, #80]	@ (800ddbc <pvPortMalloc+0x194>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd76:	2200      	movs	r2, #0
 800dd78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd7a:	f7fe fb07 	bl	800c38c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d101      	bne.n	800dd88 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800dd84:	f7f2 fdc2 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	f003 0307 	and.w	r3, r3, #7
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d00d      	beq.n	800ddae <pvPortMalloc+0x186>
	__asm volatile
 800dd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd96:	b672      	cpsid	i
 800dd98:	f383 8811 	msr	BASEPRI, r3
 800dd9c:	f3bf 8f6f 	isb	sy
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	b662      	cpsie	i
 800dda6:	60fb      	str	r3, [r7, #12]
}
 800dda8:	bf00      	nop
 800ddaa:	bf00      	nop
 800ddac:	e7fd      	b.n	800ddaa <pvPortMalloc+0x182>
	return pvReturn;
 800ddae:	69fb      	ldr	r3, [r7, #28]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3728      	adds	r7, #40	@ 0x28
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	2001f63c 	.word	0x2001f63c
 800ddbc:	2001f648 	.word	0x2001f648
 800ddc0:	2001f640 	.word	0x2001f640
 800ddc4:	2001f634 	.word	0x2001f634
 800ddc8:	2001f644 	.word	0x2001f644

0800ddcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d04e      	beq.n	800de7c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ddde:	2308      	movs	r3, #8
 800dde0:	425b      	negs	r3, r3
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	4413      	add	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	685a      	ldr	r2, [r3, #4]
 800ddf0:	4b24      	ldr	r3, [pc, #144]	@ (800de84 <vPortFree+0xb8>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10d      	bne.n	800de16 <vPortFree+0x4a>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfe:	b672      	cpsid	i
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	b662      	cpsie	i
 800de0e:	60fb      	str	r3, [r7, #12]
}
 800de10:	bf00      	nop
 800de12:	bf00      	nop
 800de14:	e7fd      	b.n	800de12 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00d      	beq.n	800de3a <vPortFree+0x6e>
	__asm volatile
 800de1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de22:	b672      	cpsid	i
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	b662      	cpsie	i
 800de32:	60bb      	str	r3, [r7, #8]
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop
 800de38:	e7fd      	b.n	800de36 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	685a      	ldr	r2, [r3, #4]
 800de3e:	4b11      	ldr	r3, [pc, #68]	@ (800de84 <vPortFree+0xb8>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4013      	ands	r3, r2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d019      	beq.n	800de7c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d115      	bne.n	800de7c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	4b0b      	ldr	r3, [pc, #44]	@ (800de84 <vPortFree+0xb8>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	43db      	mvns	r3, r3
 800de5a:	401a      	ands	r2, r3
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800de60:	f7fe fa86 	bl	800c370 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	685a      	ldr	r2, [r3, #4]
 800de68:	4b07      	ldr	r3, [pc, #28]	@ (800de88 <vPortFree+0xbc>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4413      	add	r3, r2
 800de6e:	4a06      	ldr	r2, [pc, #24]	@ (800de88 <vPortFree+0xbc>)
 800de70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de72:	6938      	ldr	r0, [r7, #16]
 800de74:	f000 f86c 	bl	800df50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800de78:	f7fe fa88 	bl	800c38c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de7c:	bf00      	nop
 800de7e:	3718      	adds	r7, #24
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	2001f648 	.word	0x2001f648
 800de88:	2001f640 	.word	0x2001f640

0800de8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de92:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800de96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de98:	4b27      	ldr	r3, [pc, #156]	@ (800df38 <prvHeapInit+0xac>)
 800de9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f003 0307 	and.w	r3, r3, #7
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00c      	beq.n	800dec0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	3307      	adds	r3, #7
 800deaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f023 0307 	bic.w	r3, r3, #7
 800deb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	4a1f      	ldr	r2, [pc, #124]	@ (800df38 <prvHeapInit+0xac>)
 800debc:	4413      	add	r3, r2
 800debe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dec4:	4a1d      	ldr	r2, [pc, #116]	@ (800df3c <prvHeapInit+0xb0>)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800deca:	4b1c      	ldr	r3, [pc, #112]	@ (800df3c <prvHeapInit+0xb0>)
 800decc:	2200      	movs	r2, #0
 800dece:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	4413      	add	r3, r2
 800ded6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ded8:	2208      	movs	r2, #8
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	1a9b      	subs	r3, r3, r2
 800dede:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f023 0307 	bic.w	r3, r3, #7
 800dee6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	4a15      	ldr	r2, [pc, #84]	@ (800df40 <prvHeapInit+0xb4>)
 800deec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800deee:	4b14      	ldr	r3, [pc, #80]	@ (800df40 <prvHeapInit+0xb4>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2200      	movs	r2, #0
 800def4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800def6:	4b12      	ldr	r3, [pc, #72]	@ (800df40 <prvHeapInit+0xb4>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2200      	movs	r2, #0
 800defc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	1ad2      	subs	r2, r2, r3
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800df0c:	4b0c      	ldr	r3, [pc, #48]	@ (800df40 <prvHeapInit+0xb4>)
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	4a0a      	ldr	r2, [pc, #40]	@ (800df44 <prvHeapInit+0xb8>)
 800df1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	4a09      	ldr	r2, [pc, #36]	@ (800df48 <prvHeapInit+0xbc>)
 800df22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800df24:	4b09      	ldr	r3, [pc, #36]	@ (800df4c <prvHeapInit+0xc0>)
 800df26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800df2a:	601a      	str	r2, [r3, #0]
}
 800df2c:	bf00      	nop
 800df2e:	3714      	adds	r7, #20
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr
 800df38:	20007634 	.word	0x20007634
 800df3c:	2001f634 	.word	0x2001f634
 800df40:	2001f63c 	.word	0x2001f63c
 800df44:	2001f644 	.word	0x2001f644
 800df48:	2001f640 	.word	0x2001f640
 800df4c:	2001f648 	.word	0x2001f648

0800df50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df58:	4b28      	ldr	r3, [pc, #160]	@ (800dffc <prvInsertBlockIntoFreeList+0xac>)
 800df5a:	60fb      	str	r3, [r7, #12]
 800df5c:	e002      	b.n	800df64 <prvInsertBlockIntoFreeList+0x14>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d8f7      	bhi.n	800df5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	4413      	add	r3, r2
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d108      	bne.n	800df92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	441a      	add	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	68ba      	ldr	r2, [r7, #8]
 800df9c:	441a      	add	r2, r3
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d118      	bne.n	800dfd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	4b15      	ldr	r3, [pc, #84]	@ (800e000 <prvInsertBlockIntoFreeList+0xb0>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d00d      	beq.n	800dfce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	685a      	ldr	r2, [r3, #4]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	441a      	add	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	e008      	b.n	800dfe0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dfce:	4b0c      	ldr	r3, [pc, #48]	@ (800e000 <prvInsertBlockIntoFreeList+0xb0>)
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	e003      	b.n	800dfe0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d002      	beq.n	800dfee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfee:	bf00      	nop
 800dff0:	3714      	adds	r7, #20
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop
 800dffc:	2001f634 	.word	0x2001f634
 800e000:	2001f63c 	.word	0x2001f63c

0800e004 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	22fa      	movs	r2, #250	@ 0xfa
 800e012:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	330c      	adds	r3, #12
 800e01a:	461a      	mov	r2, r3
 800e01c:	6839      	ldr	r1, [r7, #0]
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f002 f978 	bl	8010314 <tcpip_send_msg_wait_sem>
 800e024:	4603      	mov	r3, r0
 800e026:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d103      	bne.n	800e038 <netconn_apimsg+0x34>
    return apimsg->err;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e036:	e001      	b.n	800e03c <netconn_apimsg+0x38>
  }
  return err;
 800e038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08c      	sub	sp, #48	@ 0x30
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	603a      	str	r2, [r7, #0]
 800e04e:	71fb      	strb	r3, [r7, #7]
 800e050:	460b      	mov	r3, r1
 800e052:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	4618      	mov	r0, r3
 800e05a:	f000 ff61 	bl	800ef20 <netconn_alloc>
 800e05e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800e060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e062:	2b00      	cmp	r3, #0
 800e064:	d054      	beq.n	800e110 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e066:	79bb      	ldrb	r3, [r7, #6]
 800e068:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e06c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e06e:	f107 0308 	add.w	r3, r7, #8
 800e072:	4619      	mov	r1, r3
 800e074:	4829      	ldr	r0, [pc, #164]	@ (800e11c <netconn_new_with_proto_and_callback+0xd8>)
 800e076:	f7ff ffc5 	bl	800e004 <netconn_apimsg>
 800e07a:	4603      	mov	r3, r0
 800e07c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800e080:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e084:	2b00      	cmp	r3, #0
 800e086:	d043      	beq.n	800e110 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d005      	beq.n	800e09c <netconn_new_with_proto_and_callback+0x58>
 800e090:	4b23      	ldr	r3, [pc, #140]	@ (800e120 <netconn_new_with_proto_and_callback+0xdc>)
 800e092:	22a3      	movs	r2, #163	@ 0xa3
 800e094:	4923      	ldr	r1, [pc, #140]	@ (800e124 <netconn_new_with_proto_and_callback+0xe0>)
 800e096:	4824      	ldr	r0, [pc, #144]	@ (800e128 <netconn_new_with_proto_and_callback+0xe4>)
 800e098:	f00e fada 	bl	801c650 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09e:	3310      	adds	r3, #16
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f00d ff6d 	bl	801bf80 <sys_mbox_valid>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d105      	bne.n	800e0b8 <netconn_new_with_proto_and_callback+0x74>
 800e0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800e120 <netconn_new_with_proto_and_callback+0xdc>)
 800e0ae:	22a4      	movs	r2, #164	@ 0xa4
 800e0b0:	491e      	ldr	r1, [pc, #120]	@ (800e12c <netconn_new_with_proto_and_callback+0xe8>)
 800e0b2:	481d      	ldr	r0, [pc, #116]	@ (800e128 <netconn_new_with_proto_and_callback+0xe4>)
 800e0b4:	f00e facc 	bl	801c650 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ba:	3314      	adds	r3, #20
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f00d ff5f 	bl	801bf80 <sys_mbox_valid>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d005      	beq.n	800e0d4 <netconn_new_with_proto_and_callback+0x90>
 800e0c8:	4b15      	ldr	r3, [pc, #84]	@ (800e120 <netconn_new_with_proto_and_callback+0xdc>)
 800e0ca:	22a6      	movs	r2, #166	@ 0xa6
 800e0cc:	4918      	ldr	r1, [pc, #96]	@ (800e130 <netconn_new_with_proto_and_callback+0xec>)
 800e0ce:	4816      	ldr	r0, [pc, #88]	@ (800e128 <netconn_new_with_proto_and_callback+0xe4>)
 800e0d0:	f00e fabe 	bl	801c650 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d6:	330c      	adds	r3, #12
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f00d ffdf 	bl	801c09c <sys_sem_valid>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d105      	bne.n	800e0f0 <netconn_new_with_proto_and_callback+0xac>
 800e0e4:	4b0e      	ldr	r3, [pc, #56]	@ (800e120 <netconn_new_with_proto_and_callback+0xdc>)
 800e0e6:	22a9      	movs	r2, #169	@ 0xa9
 800e0e8:	4912      	ldr	r1, [pc, #72]	@ (800e134 <netconn_new_with_proto_and_callback+0xf0>)
 800e0ea:	480f      	ldr	r0, [pc, #60]	@ (800e128 <netconn_new_with_proto_and_callback+0xe4>)
 800e0ec:	f00e fab0 	bl	801c650 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f2:	330c      	adds	r3, #12
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f00d ffc4 	bl	801c082 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fc:	3310      	adds	r3, #16
 800e0fe:	4618      	mov	r0, r3
 800e100:	f00d feca 	bl	801be98 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e106:	2007      	movs	r0, #7
 800e108:	f002 feae 	bl	8010e68 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e10c:	2300      	movs	r3, #0
 800e10e:	e000      	b.n	800e112 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e112:	4618      	mov	r0, r3
 800e114:	3730      	adds	r7, #48	@ 0x30
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	0800eef5 	.word	0x0800eef5
 800e120:	0801d7c4 	.word	0x0801d7c4
 800e124:	0801d7f8 	.word	0x0801d7f8
 800e128:	0801d81c 	.word	0x0801d81c
 800e12c:	0801d844 	.word	0x0801d844
 800e130:	0801d85c 	.word	0x0801d85c
 800e134:	0801d880 	.word	0x0801d880

0800e138 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b08c      	sub	sp, #48	@ 0x30
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d101      	bne.n	800e14a <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e146:	2300      	movs	r3, #0
 800e148:	e014      	b.n	800e174 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e14e:	2329      	movs	r3, #41	@ 0x29
 800e150:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e152:	f107 030c 	add.w	r3, r7, #12
 800e156:	4619      	mov	r1, r3
 800e158:	4808      	ldr	r0, [pc, #32]	@ (800e17c <netconn_prepare_delete+0x44>)
 800e15a:	f7ff ff53 	bl	800e004 <netconn_apimsg>
 800e15e:	4603      	mov	r3, r0
 800e160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e164:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <netconn_prepare_delete+0x3a>
    return err;
 800e16c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e170:	e000      	b.n	800e174 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e172:	2300      	movs	r3, #0
}
 800e174:	4618      	mov	r0, r3
 800e176:	3730      	adds	r7, #48	@ 0x30
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	0800f461 	.word	0x0800f461

0800e180 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <netconn_delete+0x12>
    return ERR_OK;
 800e18e:	2300      	movs	r3, #0
 800e190:	e00d      	b.n	800e1ae <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7ff ffd0 	bl	800e138 <netconn_prepare_delete>
 800e198:	4603      	mov	r3, r0
 800e19a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e19c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d102      	bne.n	800e1aa <netconn_delete+0x2a>
    netconn_free(conn);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 ff29 	bl	800effc <netconn_free>
  }
  return err;
 800e1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
	...

0800e1b8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08e      	sub	sp, #56	@ 0x38
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d109      	bne.n	800e1e0 <netconn_bind+0x28>
 800e1cc:	4b11      	ldr	r3, [pc, #68]	@ (800e214 <netconn_bind+0x5c>)
 800e1ce:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800e1d2:	4911      	ldr	r1, [pc, #68]	@ (800e218 <netconn_bind+0x60>)
 800e1d4:	4811      	ldr	r0, [pc, #68]	@ (800e21c <netconn_bind+0x64>)
 800e1d6:	f00e fa3b 	bl	801c650 <iprintf>
 800e1da:	f06f 030f 	mvn.w	r3, #15
 800e1de:	e015      	b.n	800e20c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d101      	bne.n	800e1ea <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e1e6:	4b0e      	ldr	r3, [pc, #56]	@ (800e220 <netconn_bind+0x68>)
 800e1e8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e1f2:	88fb      	ldrh	r3, [r7, #6]
 800e1f4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e1f6:	f107 0314 	add.w	r3, r7, #20
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	4809      	ldr	r0, [pc, #36]	@ (800e224 <netconn_bind+0x6c>)
 800e1fe:	f7ff ff01 	bl	800e004 <netconn_apimsg>
 800e202:	4603      	mov	r3, r0
 800e204:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e208:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3738      	adds	r7, #56	@ 0x38
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	0801d7c4 	.word	0x0801d7c4
 800e218:	0801d8fc 	.word	0x0801d8fc
 800e21c:	0801d81c 	.word	0x0801d81c
 800e220:	08021b00 	.word	0x08021b00
 800e224:	0800f629 	.word	0x0800f629

0800e228 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08e      	sub	sp, #56	@ 0x38
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	4613      	mov	r3, r2
 800e234:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d109      	bne.n	800e250 <netconn_connect+0x28>
 800e23c:	4b11      	ldr	r3, [pc, #68]	@ (800e284 <netconn_connect+0x5c>)
 800e23e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 800e242:	4911      	ldr	r1, [pc, #68]	@ (800e288 <netconn_connect+0x60>)
 800e244:	4811      	ldr	r0, [pc, #68]	@ (800e28c <netconn_connect+0x64>)
 800e246:	f00e fa03 	bl	801c650 <iprintf>
 800e24a:	f06f 030f 	mvn.w	r3, #15
 800e24e:	e015      	b.n	800e27c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800e256:	4b0e      	ldr	r3, [pc, #56]	@ (800e290 <netconn_connect+0x68>)
 800e258:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e262:	88fb      	ldrh	r3, [r7, #6]
 800e264:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800e266:	f107 0314 	add.w	r3, r7, #20
 800e26a:	4619      	mov	r1, r3
 800e26c:	4809      	ldr	r0, [pc, #36]	@ (800e294 <netconn_connect+0x6c>)
 800e26e:	f7ff fec9 	bl	800e004 <netconn_apimsg>
 800e272:	4603      	mov	r3, r0
 800e274:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e278:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3738      	adds	r7, #56	@ 0x38
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	0801d7c4 	.word	0x0801d7c4
 800e288:	0801d938 	.word	0x0801d938
 800e28c:	0801d81c 	.word	0x0801d81c
 800e290:	08021b00 	.word	0x08021b00
 800e294:	0800f7bd 	.word	0x0800f7bd

0800e298 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b08c      	sub	sp, #48	@ 0x30
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d109      	bne.n	800e2ba <netconn_disconnect+0x22>
 800e2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2dc <netconn_disconnect+0x44>)
 800e2a8:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800e2ac:	490c      	ldr	r1, [pc, #48]	@ (800e2e0 <netconn_disconnect+0x48>)
 800e2ae:	480d      	ldr	r0, [pc, #52]	@ (800e2e4 <netconn_disconnect+0x4c>)
 800e2b0:	f00e f9ce 	bl	801c650 <iprintf>
 800e2b4:	f06f 030f 	mvn.w	r3, #15
 800e2b8:	e00c      	b.n	800e2d4 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800e2be:	f107 030c 	add.w	r3, r7, #12
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	4808      	ldr	r0, [pc, #32]	@ (800e2e8 <netconn_disconnect+0x50>)
 800e2c6:	f7ff fe9d 	bl	800e004 <netconn_apimsg>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e2d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3730      	adds	r7, #48	@ 0x30
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	0801d7c4 	.word	0x0801d7c4
 800e2e0:	0801d958 	.word	0x0801d958
 800e2e4:	0801d81c 	.word	0x0801d81c
 800e2e8:	0800f939 	.word	0x0800f939

0800e2ec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d109      	bne.n	800e318 <netconn_recv_data+0x2c>
 800e304:	4b58      	ldr	r3, [pc, #352]	@ (800e468 <netconn_recv_data+0x17c>)
 800e306:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800e30a:	4958      	ldr	r1, [pc, #352]	@ (800e46c <netconn_recv_data+0x180>)
 800e30c:	4858      	ldr	r0, [pc, #352]	@ (800e470 <netconn_recv_data+0x184>)
 800e30e:	f00e f99f 	bl	801c650 <iprintf>
 800e312:	f06f 030f 	mvn.w	r3, #15
 800e316:	e0a2      	b.n	800e45e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d109      	bne.n	800e338 <netconn_recv_data+0x4c>
 800e324:	4b50      	ldr	r3, [pc, #320]	@ (800e468 <netconn_recv_data+0x17c>)
 800e326:	f240 224a 	movw	r2, #586	@ 0x24a
 800e32a:	4952      	ldr	r1, [pc, #328]	@ (800e474 <netconn_recv_data+0x188>)
 800e32c:	4850      	ldr	r0, [pc, #320]	@ (800e470 <netconn_recv_data+0x184>)
 800e32e:	f00e f98f 	bl	801c650 <iprintf>
 800e332:	f06f 030f 	mvn.w	r3, #15
 800e336:	e092      	b.n	800e45e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3310      	adds	r3, #16
 800e33c:	4618      	mov	r0, r3
 800e33e:	f00d fe1f 	bl	801bf80 <sys_mbox_valid>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10e      	bne.n	800e366 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f000 fa23 	bl	800e794 <netconn_err>
 800e34e:	4603      	mov	r3, r0
 800e350:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800e352:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d002      	beq.n	800e360 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800e35a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e35e:	e07e      	b.n	800e45e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800e360:	f06f 030a 	mvn.w	r3, #10
 800e364:	e07b      	b.n	800e45e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	7f1b      	ldrb	r3, [r3, #28]
 800e36a:	f003 0302 	and.w	r3, r3, #2
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10f      	bne.n	800e392 <netconn_recv_data+0xa6>
 800e372:	79fb      	ldrb	r3, [r7, #7]
 800e374:	f003 0304 	and.w	r3, r3, #4
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d10a      	bne.n	800e392 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	7f1b      	ldrb	r3, [r3, #28]
 800e380:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e384:	2b00      	cmp	r3, #0
 800e386:	d104      	bne.n	800e392 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d023      	beq.n	800e3da <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	3310      	adds	r3, #16
 800e396:	f107 0218 	add.w	r2, r7, #24
 800e39a:	4611      	mov	r1, r2
 800e39c:	4618      	mov	r0, r3
 800e39e:	f00d fdd8 	bl	801bf52 <sys_arch_mbox_tryfetch>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3a8:	d11f      	bne.n	800e3ea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f000 f9f2 	bl	800e794 <netconn_err>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800e3b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800e3bc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e3c0:	e04d      	b.n	800e45e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	7f1b      	ldrb	r3, [r3, #28]
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d002      	beq.n	800e3d4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800e3ce:	f06f 030a 	mvn.w	r3, #10
 800e3d2:	e044      	b.n	800e45e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800e3d4:	f06f 0306 	mvn.w	r3, #6
 800e3d8:	e041      	b.n	800e45e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	3310      	adds	r3, #16
 800e3de:	f107 0118 	add.w	r1, r7, #24
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f00d fd83 	bl	801bef0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e3f2:	2b10      	cmp	r3, #16
 800e3f4:	d117      	bne.n	800e426 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	f107 0217 	add.w	r2, r7, #23
 800e3fc:	4611      	mov	r1, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 fa1a 	bl	800e838 <lwip_netconn_is_err_msg>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d009      	beq.n	800e41e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e40a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e40e:	f113 0f0f 	cmn.w	r3, #15
 800e412:	d101      	bne.n	800e418 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e414:	2300      	movs	r3, #0
 800e416:	e022      	b.n	800e45e <netconn_recv_data+0x172>
      }
      return err;
 800e418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e41c:	e01f      	b.n	800e45e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	891b      	ldrh	r3, [r3, #8]
 800e422:	83fb      	strh	r3, [r7, #30]
 800e424:	e00d      	b.n	800e442 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d106      	bne.n	800e43a <netconn_recv_data+0x14e>
 800e42c:	4b0e      	ldr	r3, [pc, #56]	@ (800e468 <netconn_recv_data+0x17c>)
 800e42e:	f240 2291 	movw	r2, #657	@ 0x291
 800e432:	4911      	ldr	r1, [pc, #68]	@ (800e478 <netconn_recv_data+0x18c>)
 800e434:	480e      	ldr	r0, [pc, #56]	@ (800e470 <netconn_recv_data+0x184>)
 800e436:	f00e f90b 	bl	801c650 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	891b      	ldrh	r3, [r3, #8]
 800e440:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e446:	2b00      	cmp	r3, #0
 800e448:	d005      	beq.n	800e456 <netconn_recv_data+0x16a>
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44e:	8bfa      	ldrh	r2, [r7, #30]
 800e450:	2101      	movs	r1, #1
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e456:	69ba      	ldr	r2, [r7, #24]
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e45c:	2300      	movs	r3, #0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3720      	adds	r7, #32
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	0801d7c4 	.word	0x0801d7c4
 800e46c:	0801d9dc 	.word	0x0801d9dc
 800e470:	0801d81c 	.word	0x0801d81c
 800e474:	0801d9fc 	.word	0x0801d9fc
 800e478:	0801da18 	.word	0x0801da18

0800e47c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d005      	beq.n	800e49a <netconn_tcp_recvd_msg+0x1e>
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e496:	2b10      	cmp	r3, #16
 800e498:	d009      	beq.n	800e4ae <netconn_tcp_recvd_msg+0x32>
 800e49a:	4b0c      	ldr	r3, [pc, #48]	@ (800e4cc <netconn_tcp_recvd_msg+0x50>)
 800e49c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800e4a0:	490b      	ldr	r1, [pc, #44]	@ (800e4d0 <netconn_tcp_recvd_msg+0x54>)
 800e4a2:	480c      	ldr	r0, [pc, #48]	@ (800e4d4 <netconn_tcp_recvd_msg+0x58>)
 800e4a4:	f00e f8d4 	bl	801c650 <iprintf>
 800e4a8:	f06f 030f 	mvn.w	r3, #15
 800e4ac:	e00a      	b.n	800e4c4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e4ba:	6879      	ldr	r1, [r7, #4]
 800e4bc:	4806      	ldr	r0, [pc, #24]	@ (800e4d8 <netconn_tcp_recvd_msg+0x5c>)
 800e4be:	f7ff fda1 	bl	800e004 <netconn_apimsg>
 800e4c2:	4603      	mov	r3, r0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	0801d7c4 	.word	0x0801d7c4
 800e4d0:	0801da24 	.word	0x0801da24
 800e4d4:	0801d81c 	.word	0x0801d81c
 800e4d8:	0800fa0f 	.word	0x0800fa0f

0800e4dc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b090      	sub	sp, #64	@ 0x40
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	3310      	adds	r3, #16
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f00d fd46 	bl	801bf80 <sys_mbox_valid>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d102      	bne.n	800e500 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e4fa:	f06f 030a 	mvn.w	r3, #10
 800e4fe:	e06d      	b.n	800e5dc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	7f1b      	ldrb	r3, [r3, #28]
 800e504:	b25b      	sxtb	r3, r3
 800e506:	2b00      	cmp	r3, #0
 800e508:	da07      	bge.n	800e51a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	7f1b      	ldrb	r3, [r3, #28]
 800e50e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e512:	b2da      	uxtb	r2, r3
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e518:	e039      	b.n	800e58e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e51a:	79fb      	ldrb	r3, [r7, #7]
 800e51c:	461a      	mov	r2, r3
 800e51e:	68b9      	ldr	r1, [r7, #8]
 800e520:	68f8      	ldr	r0, [r7, #12]
 800e522:	f7ff fee3 	bl	800e2ec <netconn_recv_data>
 800e526:	4603      	mov	r3, r0
 800e528:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800e52c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e530:	2b00      	cmp	r3, #0
 800e532:	d002      	beq.n	800e53a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e534:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e538:	e050      	b.n	800e5dc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e540:	79fb      	ldrb	r3, [r7, #7]
 800e542:	f003 0308 	and.w	r3, r3, #8
 800e546:	2b00      	cmp	r3, #0
 800e548:	d10e      	bne.n	800e568 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <netconn_recv_data_tcp+0x7a>
 800e550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e552:	891b      	ldrh	r3, [r3, #8]
 800e554:	e000      	b.n	800e558 <netconn_recv_data_tcp+0x7c>
 800e556:	2301      	movs	r3, #1
 800e558:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e55a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e55c:	f107 0214 	add.w	r2, r7, #20
 800e560:	4619      	mov	r1, r3
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f7ff ff8a 	bl	800e47c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d134      	bne.n	800e5d8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e56e:	79fb      	ldrb	r3, [r7, #7]
 800e570:	f003 0310 	and.w	r3, r3, #16
 800e574:	2b00      	cmp	r3, #0
 800e576:	d009      	beq.n	800e58c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	7f1b      	ldrb	r3, [r3, #28]
 800e57c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e580:	b2da      	uxtb	r2, r3
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e586:	f06f 0306 	mvn.w	r3, #6
 800e58a:	e027      	b.n	800e5dc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e58c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e592:	2b00      	cmp	r3, #0
 800e594:	d005      	beq.n	800e5a2 <netconn_recv_data_tcp+0xc6>
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e59a:	2200      	movs	r2, #0
 800e59c:	2101      	movs	r1, #1
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d10f      	bne.n	800e5ca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f000 f8f2 	bl	800e794 <netconn_err>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800e5b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <netconn_recv_data_tcp+0xe8>
          return err;
 800e5be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e5c2:	e00b      	b.n	800e5dc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e5c4:	f06f 030d 	mvn.w	r3, #13
 800e5c8:	e008      	b.n	800e5dc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e5ca:	2101      	movs	r1, #1
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f000 f8b1 	bl	800e734 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e5d2:	f06f 030e 	mvn.w	r3, #14
 800e5d6:	e001      	b.n	800e5dc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e5d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3740      	adds	r7, #64	@ 0x40
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d109      	bne.n	800e60c <netconn_recv+0x28>
 800e5f8:	4b32      	ldr	r3, [pc, #200]	@ (800e6c4 <netconn_recv+0xe0>)
 800e5fa:	f240 3263 	movw	r2, #867	@ 0x363
 800e5fe:	4932      	ldr	r1, [pc, #200]	@ (800e6c8 <netconn_recv+0xe4>)
 800e600:	4832      	ldr	r0, [pc, #200]	@ (800e6cc <netconn_recv+0xe8>)
 800e602:	f00e f825 	bl	801c650 <iprintf>
 800e606:	f06f 030f 	mvn.w	r3, #15
 800e60a:	e056      	b.n	800e6ba <netconn_recv+0xd6>
  *new_buf = NULL;
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	2200      	movs	r2, #0
 800e610:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d109      	bne.n	800e62c <netconn_recv+0x48>
 800e618:	4b2a      	ldr	r3, [pc, #168]	@ (800e6c4 <netconn_recv+0xe0>)
 800e61a:	f240 3265 	movw	r2, #869	@ 0x365
 800e61e:	492c      	ldr	r1, [pc, #176]	@ (800e6d0 <netconn_recv+0xec>)
 800e620:	482a      	ldr	r0, [pc, #168]	@ (800e6cc <netconn_recv+0xe8>)
 800e622:	f00e f815 	bl	801c650 <iprintf>
 800e626:	f06f 030f 	mvn.w	r3, #15
 800e62a:	e046      	b.n	800e6ba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e634:	2b10      	cmp	r3, #16
 800e636:	d13a      	bne.n	800e6ae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800e638:	2300      	movs	r3, #0
 800e63a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e63c:	2006      	movs	r0, #6
 800e63e:	f002 fb9d 	bl	8010d7c <memp_malloc>
 800e642:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d102      	bne.n	800e650 <netconn_recv+0x6c>
      return ERR_MEM;
 800e64a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e64e:	e034      	b.n	800e6ba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800e650:	f107 030c 	add.w	r3, r7, #12
 800e654:	2200      	movs	r2, #0
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7ff ff3f 	bl	800e4dc <netconn_recv_data_tcp>
 800e65e:	4603      	mov	r3, r0
 800e660:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e662:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d006      	beq.n	800e678 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800e66a:	6979      	ldr	r1, [r7, #20]
 800e66c:	2006      	movs	r0, #6
 800e66e:	f002 fbfb 	bl	8010e68 <memp_free>
      return err;
 800e672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e676:	e020      	b.n	800e6ba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d106      	bne.n	800e68c <netconn_recv+0xa8>
 800e67e:	4b11      	ldr	r3, [pc, #68]	@ (800e6c4 <netconn_recv+0xe0>)
 800e680:	f240 3279 	movw	r2, #889	@ 0x379
 800e684:	4913      	ldr	r1, [pc, #76]	@ (800e6d4 <netconn_recv+0xf0>)
 800e686:	4811      	ldr	r0, [pc, #68]	@ (800e6cc <netconn_recv+0xe8>)
 800e688:	f00d ffe2 	bl	801c650 <iprintf>

    buf->p = p;
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	2200      	movs	r2, #0
 800e69c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e005      	b.n	800e6ba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7ff fe1a 	bl	800e2ec <netconn_recv_data>
 800e6b8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3718      	adds	r7, #24
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	0801d7c4 	.word	0x0801d7c4
 800e6c8:	0801d9dc 	.word	0x0801d9dc
 800e6cc:	0801d81c 	.word	0x0801d81c
 800e6d0:	0801d9fc 	.word	0x0801d9fc
 800e6d4:	0801da74 	.word	0x0801da74

0800e6d8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08c      	sub	sp, #48	@ 0x30
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d109      	bne.n	800e6fc <netconn_send+0x24>
 800e6e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e724 <netconn_send+0x4c>)
 800e6ea:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800e6ee:	490e      	ldr	r1, [pc, #56]	@ (800e728 <netconn_send+0x50>)
 800e6f0:	480e      	ldr	r0, [pc, #56]	@ (800e72c <netconn_send+0x54>)
 800e6f2:	f00d ffad 	bl	801c650 <iprintf>
 800e6f6:	f06f 030f 	mvn.w	r3, #15
 800e6fa:	e00e      	b.n	800e71a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e704:	f107 030c 	add.w	r3, r7, #12
 800e708:	4619      	mov	r1, r3
 800e70a:	4809      	ldr	r0, [pc, #36]	@ (800e730 <netconn_send+0x58>)
 800e70c:	f7ff fc7a 	bl	800e004 <netconn_apimsg>
 800e710:	4603      	mov	r3, r0
 800e712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e716:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3730      	adds	r7, #48	@ 0x30
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	0801d7c4 	.word	0x0801d7c4
 800e728:	0801da80 	.word	0x0801da80
 800e72c:	0801d81c 	.word	0x0801d81c
 800e730:	0800f975 	.word	0x0800f975

0800e734 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b08c      	sub	sp, #48	@ 0x30
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	460b      	mov	r3, r1
 800e73e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d109      	bne.n	800e75a <netconn_close_shutdown+0x26>
 800e746:	4b0f      	ldr	r3, [pc, #60]	@ (800e784 <netconn_close_shutdown+0x50>)
 800e748:	f240 4247 	movw	r2, #1095	@ 0x447
 800e74c:	490e      	ldr	r1, [pc, #56]	@ (800e788 <netconn_close_shutdown+0x54>)
 800e74e:	480f      	ldr	r0, [pc, #60]	@ (800e78c <netconn_close_shutdown+0x58>)
 800e750:	f00d ff7e 	bl	801c650 <iprintf>
 800e754:	f06f 030f 	mvn.w	r3, #15
 800e758:	e010      	b.n	800e77c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e75e:	78fb      	ldrb	r3, [r7, #3]
 800e760:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e762:	2329      	movs	r3, #41	@ 0x29
 800e764:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e766:	f107 030c 	add.w	r3, r7, #12
 800e76a:	4619      	mov	r1, r3
 800e76c:	4808      	ldr	r0, [pc, #32]	@ (800e790 <netconn_close_shutdown+0x5c>)
 800e76e:	f7ff fc49 	bl	800e004 <netconn_apimsg>
 800e772:	4603      	mov	r3, r0
 800e774:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e778:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3730      	adds	r7, #48	@ 0x30
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	0801d7c4 	.word	0x0801d7c4
 800e788:	0801db00 	.word	0x0801db00
 800e78c:	0801d81c 	.word	0x0801d81c
 800e790:	0800fe11 	.word	0x0800fe11

0800e794 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <netconn_err+0x12>
    return ERR_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e00d      	b.n	800e7c2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e7a6:	f00d fcf5 	bl	801c194 <sys_arch_protect>
 800e7aa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	7a1b      	ldrb	r3, [r3, #8]
 800e7b0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f00d fcf9 	bl	801c1b0 <sys_arch_unprotect>
  return err;
 800e7be:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
	...

0800e7cc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800e7d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7da:	f113 0f0d 	cmn.w	r3, #13
 800e7de:	d009      	beq.n	800e7f4 <lwip_netconn_err_to_msg+0x28>
 800e7e0:	f113 0f0d 	cmn.w	r3, #13
 800e7e4:	dc0c      	bgt.n	800e800 <lwip_netconn_err_to_msg+0x34>
 800e7e6:	f113 0f0f 	cmn.w	r3, #15
 800e7ea:	d007      	beq.n	800e7fc <lwip_netconn_err_to_msg+0x30>
 800e7ec:	f113 0f0e 	cmn.w	r3, #14
 800e7f0:	d002      	beq.n	800e7f8 <lwip_netconn_err_to_msg+0x2c>
 800e7f2:	e005      	b.n	800e800 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800e7f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e820 <lwip_netconn_err_to_msg+0x54>)
 800e7f6:	e00e      	b.n	800e816 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800e7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800e824 <lwip_netconn_err_to_msg+0x58>)
 800e7fa:	e00c      	b.n	800e816 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800e7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e828 <lwip_netconn_err_to_msg+0x5c>)
 800e7fe:	e00a      	b.n	800e816 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800e800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d005      	beq.n	800e814 <lwip_netconn_err_to_msg+0x48>
 800e808:	4b08      	ldr	r3, [pc, #32]	@ (800e82c <lwip_netconn_err_to_msg+0x60>)
 800e80a:	227d      	movs	r2, #125	@ 0x7d
 800e80c:	4908      	ldr	r1, [pc, #32]	@ (800e830 <lwip_netconn_err_to_msg+0x64>)
 800e80e:	4809      	ldr	r0, [pc, #36]	@ (800e834 <lwip_netconn_err_to_msg+0x68>)
 800e810:	f00d ff1e 	bl	801c650 <iprintf>
      return NULL;
 800e814:	2300      	movs	r3, #0
  }
}
 800e816:	4618      	mov	r0, r3
 800e818:	3708      	adds	r7, #8
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	080219b8 	.word	0x080219b8
 800e824:	080219b9 	.word	0x080219b9
 800e828:	080219ba 	.word	0x080219ba
 800e82c:	0801db1c 	.word	0x0801db1c
 800e830:	0801db50 	.word	0x0801db50
 800e834:	0801db60 	.word	0x0801db60

0800e838 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d105      	bne.n	800e854 <lwip_netconn_is_err_msg+0x1c>
 800e848:	4b12      	ldr	r3, [pc, #72]	@ (800e894 <lwip_netconn_is_err_msg+0x5c>)
 800e84a:	2285      	movs	r2, #133	@ 0x85
 800e84c:	4912      	ldr	r1, [pc, #72]	@ (800e898 <lwip_netconn_is_err_msg+0x60>)
 800e84e:	4813      	ldr	r0, [pc, #76]	@ (800e89c <lwip_netconn_is_err_msg+0x64>)
 800e850:	f00d fefe 	bl	801c650 <iprintf>

  if (msg == &netconn_aborted) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a12      	ldr	r2, [pc, #72]	@ (800e8a0 <lwip_netconn_is_err_msg+0x68>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d104      	bne.n	800e866 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	22f3      	movs	r2, #243	@ 0xf3
 800e860:	701a      	strb	r2, [r3, #0]
    return 1;
 800e862:	2301      	movs	r3, #1
 800e864:	e012      	b.n	800e88c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4a0e      	ldr	r2, [pc, #56]	@ (800e8a4 <lwip_netconn_is_err_msg+0x6c>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d104      	bne.n	800e878 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	22f2      	movs	r2, #242	@ 0xf2
 800e872:	701a      	strb	r2, [r3, #0]
    return 1;
 800e874:	2301      	movs	r3, #1
 800e876:	e009      	b.n	800e88c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	4a0b      	ldr	r2, [pc, #44]	@ (800e8a8 <lwip_netconn_is_err_msg+0x70>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d104      	bne.n	800e88a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	22f1      	movs	r2, #241	@ 0xf1
 800e884:	701a      	strb	r2, [r3, #0]
    return 1;
 800e886:	2301      	movs	r3, #1
 800e888:	e000      	b.n	800e88c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800e88a:	2300      	movs	r3, #0
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	0801db1c 	.word	0x0801db1c
 800e898:	0801db88 	.word	0x0801db88
 800e89c:	0801db60 	.word	0x0801db60
 800e8a0:	080219b8 	.word	0x080219b8
 800e8a4:	080219b9 	.word	0x080219b9
 800e8a8:	080219ba 	.word	0x080219ba

0800e8ac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b088      	sub	sp, #32
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
 800e8b8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d105      	bne.n	800e8cc <recv_udp+0x20>
 800e8c0:	4b34      	ldr	r3, [pc, #208]	@ (800e994 <recv_udp+0xe8>)
 800e8c2:	22e5      	movs	r2, #229	@ 0xe5
 800e8c4:	4934      	ldr	r1, [pc, #208]	@ (800e998 <recv_udp+0xec>)
 800e8c6:	4835      	ldr	r0, [pc, #212]	@ (800e99c <recv_udp+0xf0>)
 800e8c8:	f00d fec2 	bl	801c650 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d105      	bne.n	800e8de <recv_udp+0x32>
 800e8d2:	4b30      	ldr	r3, [pc, #192]	@ (800e994 <recv_udp+0xe8>)
 800e8d4:	22e6      	movs	r2, #230	@ 0xe6
 800e8d6:	4932      	ldr	r1, [pc, #200]	@ (800e9a0 <recv_udp+0xf4>)
 800e8d8:	4830      	ldr	r0, [pc, #192]	@ (800e99c <recv_udp+0xf0>)
 800e8da:	f00d feb9 	bl	801c650 <iprintf>
  conn = (struct netconn *)arg;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d103      	bne.n	800e8f0 <recv_udp+0x44>
    pbuf_free(p);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f003 fa57 	bl	8011d9c <pbuf_free>
    return;
 800e8ee:	e04d      	b.n	800e98c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d005      	beq.n	800e906 <recv_udp+0x5a>
 800e8fa:	4b26      	ldr	r3, [pc, #152]	@ (800e994 <recv_udp+0xe8>)
 800e8fc:	22ee      	movs	r2, #238	@ 0xee
 800e8fe:	4929      	ldr	r1, [pc, #164]	@ (800e9a4 <recv_udp+0xf8>)
 800e900:	4826      	ldr	r0, [pc, #152]	@ (800e99c <recv_udp+0xf0>)
 800e902:	f00d fea5 	bl	801c650 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	3310      	adds	r3, #16
 800e90a:	4618      	mov	r0, r3
 800e90c:	f00d fb38 	bl	801bf80 <sys_mbox_valid>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d103      	bne.n	800e91e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f003 fa40 	bl	8011d9c <pbuf_free>
    return;
 800e91c:	e036      	b.n	800e98c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e91e:	2006      	movs	r0, #6
 800e920:	f002 fa2c 	bl	8010d7c <memp_malloc>
 800e924:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d103      	bne.n	800e934 <recv_udp+0x88>
    pbuf_free(p);
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f003 fa35 	bl	8011d9c <pbuf_free>
    return;
 800e932:	e02b      	b.n	800e98c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <recv_udp+0xa0>
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	e000      	b.n	800e94e <recv_udp+0xa2>
 800e94c:	2300      	movs	r3, #0
 800e94e:	69ba      	ldr	r2, [r7, #24]
 800e950:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e956:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	891b      	ldrh	r3, [r3, #8]
 800e95c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	3310      	adds	r3, #16
 800e962:	69b9      	ldr	r1, [r7, #24]
 800e964:	4618      	mov	r0, r3
 800e966:	f00d faa9 	bl	801bebc <sys_mbox_trypost>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d003      	beq.n	800e978 <recv_udp+0xcc>
    netbuf_delete(buf);
 800e970:	69b8      	ldr	r0, [r7, #24]
 800e972:	f001 fb0d 	bl	800ff90 <netbuf_delete>
    return;
 800e976:	e009      	b.n	800e98c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d005      	beq.n	800e98c <recv_udp+0xe0>
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e984:	8afa      	ldrh	r2, [r7, #22]
 800e986:	2100      	movs	r1, #0
 800e988:	69f8      	ldr	r0, [r7, #28]
 800e98a:	4798      	blx	r3
  }
}
 800e98c:	3720      	adds	r7, #32
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	0801db1c 	.word	0x0801db1c
 800e998:	0801db94 	.word	0x0801db94
 800e99c:	0801db60 	.word	0x0801db60
 800e9a0:	0801dbb8 	.word	0x0801dbb8
 800e9a4:	0801dbd8 	.word	0x0801dbd8

0800e9a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b088      	sub	sp, #32
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
 800e9b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d106      	bne.n	800e9ca <recv_tcp+0x22>
 800e9bc:	4b36      	ldr	r3, [pc, #216]	@ (800ea98 <recv_tcp+0xf0>)
 800e9be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e9c2:	4936      	ldr	r1, [pc, #216]	@ (800ea9c <recv_tcp+0xf4>)
 800e9c4:	4836      	ldr	r0, [pc, #216]	@ (800eaa0 <recv_tcp+0xf8>)
 800e9c6:	f00d fe43 	bl	801c650 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d106      	bne.n	800e9de <recv_tcp+0x36>
 800e9d0:	4b31      	ldr	r3, [pc, #196]	@ (800ea98 <recv_tcp+0xf0>)
 800e9d2:	f240 122d 	movw	r2, #301	@ 0x12d
 800e9d6:	4933      	ldr	r1, [pc, #204]	@ (800eaa4 <recv_tcp+0xfc>)
 800e9d8:	4831      	ldr	r0, [pc, #196]	@ (800eaa0 <recv_tcp+0xf8>)
 800e9da:	f00d fe39 	bl	801c650 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800e9de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d006      	beq.n	800e9f4 <recv_tcp+0x4c>
 800e9e6:	4b2c      	ldr	r3, [pc, #176]	@ (800ea98 <recv_tcp+0xf0>)
 800e9e8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800e9ec:	492e      	ldr	r1, [pc, #184]	@ (800eaa8 <recv_tcp+0x100>)
 800e9ee:	482c      	ldr	r0, [pc, #176]	@ (800eaa0 <recv_tcp+0xf8>)
 800e9f0:	f00d fe2e 	bl	801c650 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d102      	bne.n	800ea04 <recv_tcp+0x5c>
    return ERR_VAL;
 800e9fe:	f06f 0305 	mvn.w	r3, #5
 800ea02:	e045      	b.n	800ea90 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	68ba      	ldr	r2, [r7, #8]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d006      	beq.n	800ea1c <recv_tcp+0x74>
 800ea0e:	4b22      	ldr	r3, [pc, #136]	@ (800ea98 <recv_tcp+0xf0>)
 800ea10:	f240 1235 	movw	r2, #309	@ 0x135
 800ea14:	4925      	ldr	r1, [pc, #148]	@ (800eaac <recv_tcp+0x104>)
 800ea16:	4822      	ldr	r0, [pc, #136]	@ (800eaa0 <recv_tcp+0xf8>)
 800ea18:	f00d fe1a 	bl	801c650 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	3310      	adds	r3, #16
 800ea20:	4618      	mov	r0, r3
 800ea22:	f00d faad 	bl	801bf80 <sys_mbox_valid>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10d      	bne.n	800ea48 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d008      	beq.n	800ea44 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	891b      	ldrh	r3, [r3, #8]
 800ea36:	4619      	mov	r1, r3
 800ea38:	68b8      	ldr	r0, [r7, #8]
 800ea3a:	f004 f8ad 	bl	8012b98 <tcp_recved>
      pbuf_free(p);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f003 f9ac 	bl	8011d9c <pbuf_free>
    }
    return ERR_OK;
 800ea44:	2300      	movs	r3, #0
 800ea46:	e023      	b.n	800ea90 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d005      	beq.n	800ea5a <recv_tcp+0xb2>
    msg = p;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	891b      	ldrh	r3, [r3, #8]
 800ea56:	83fb      	strh	r3, [r7, #30]
 800ea58:	e003      	b.n	800ea62 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ea5a:	4b15      	ldr	r3, [pc, #84]	@ (800eab0 <recv_tcp+0x108>)
 800ea5c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	3310      	adds	r3, #16
 800ea66:	69b9      	ldr	r1, [r7, #24]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f00d fa27 	bl	801bebc <sys_mbox_trypost>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ea74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea78:	e00a      	b.n	800ea90 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d005      	beq.n	800ea8e <recv_tcp+0xe6>
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea86:	8bfa      	ldrh	r2, [r7, #30]
 800ea88:	2100      	movs	r1, #0
 800ea8a:	6978      	ldr	r0, [r7, #20]
 800ea8c:	4798      	blx	r3
  }

  return ERR_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3720      	adds	r7, #32
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	0801db1c 	.word	0x0801db1c
 800ea9c:	0801dbf8 	.word	0x0801dbf8
 800eaa0:	0801db60 	.word	0x0801db60
 800eaa4:	0801dc1c 	.word	0x0801dc1c
 800eaa8:	0801dc3c 	.word	0x0801dc3c
 800eaac:	0801dc54 	.word	0x0801dc54
 800eab0:	080219ba 	.word	0x080219ba

0800eab4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d106      	bne.n	800ead6 <poll_tcp+0x22>
 800eac8:	4b29      	ldr	r3, [pc, #164]	@ (800eb70 <poll_tcp+0xbc>)
 800eaca:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800eace:	4929      	ldr	r1, [pc, #164]	@ (800eb74 <poll_tcp+0xc0>)
 800ead0:	4829      	ldr	r0, [pc, #164]	@ (800eb78 <poll_tcp+0xc4>)
 800ead2:	f00d fdbd 	bl	801c650 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	785b      	ldrb	r3, [r3, #1]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d104      	bne.n	800eae8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800eade:	2101      	movs	r1, #1
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f000 ffc9 	bl	800fa78 <lwip_netconn_do_writemore>
 800eae6:	e016      	b.n	800eb16 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	785b      	ldrb	r3, [r3, #1]
 800eaec:	2b04      	cmp	r3, #4
 800eaee:	d112      	bne.n	800eb16 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6a1b      	ldr	r3, [r3, #32]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00a      	beq.n	800eb0e <poll_tcp+0x5a>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6a1b      	ldr	r3, [r3, #32]
 800eafc:	7a5b      	ldrb	r3, [r3, #9]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d005      	beq.n	800eb0e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6a1b      	ldr	r3, [r3, #32]
 800eb06:	7a5a      	ldrb	r2, [r3, #9]
 800eb08:	3a01      	subs	r2, #1
 800eb0a:	b2d2      	uxtb	r2, r2
 800eb0c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800eb0e:	2101      	movs	r1, #1
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f000 fb3b 	bl	800f18c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	7f1b      	ldrb	r3, [r3, #28]
 800eb1a:	f003 0310 	and.w	r3, r3, #16
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d021      	beq.n	800eb66 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d01d      	beq.n	800eb66 <poll_tcp+0xb2>
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800eb32:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800eb36:	d316      	bcc.n	800eb66 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	d810      	bhi.n	800eb66 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	7f1b      	ldrb	r3, [r3, #28]
 800eb48:	f023 0310 	bic.w	r3, r3, #16
 800eb4c:	b2da      	uxtb	r2, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d005      	beq.n	800eb66 <poll_tcp+0xb2>
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb5e:	2200      	movs	r2, #0
 800eb60:	2102      	movs	r1, #2
 800eb62:	68f8      	ldr	r0, [r7, #12]
 800eb64:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	0801db1c 	.word	0x0801db1c
 800eb74:	0801dc74 	.word	0x0801dc74
 800eb78:	0801db60 	.word	0x0801db60

0800eb7c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b086      	sub	sp, #24
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	4613      	mov	r3, r2
 800eb88:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d106      	bne.n	800eba2 <sent_tcp+0x26>
 800eb94:	4b20      	ldr	r3, [pc, #128]	@ (800ec18 <sent_tcp+0x9c>)
 800eb96:	f240 1293 	movw	r2, #403	@ 0x193
 800eb9a:	4920      	ldr	r1, [pc, #128]	@ (800ec1c <sent_tcp+0xa0>)
 800eb9c:	4820      	ldr	r0, [pc, #128]	@ (800ec20 <sent_tcp+0xa4>)
 800eb9e:	f00d fd57 	bl	801c650 <iprintf>

  if (conn) {
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d032      	beq.n	800ec0e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	785b      	ldrb	r3, [r3, #1]
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d104      	bne.n	800ebba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ebb0:	2101      	movs	r1, #1
 800ebb2:	6978      	ldr	r0, [r7, #20]
 800ebb4:	f000 ff60 	bl	800fa78 <lwip_netconn_do_writemore>
 800ebb8:	e007      	b.n	800ebca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	785b      	ldrb	r3, [r3, #1]
 800ebbe:	2b04      	cmp	r3, #4
 800ebc0:	d103      	bne.n	800ebca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ebc2:	2101      	movs	r1, #1
 800ebc4:	6978      	ldr	r0, [r7, #20]
 800ebc6:	f000 fae1 	bl	800f18c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d01d      	beq.n	800ec0e <sent_tcp+0x92>
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ebda:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ebde:	d316      	bcc.n	800ec0e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ebe8:	2b04      	cmp	r3, #4
 800ebea:	d810      	bhi.n	800ec0e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	7f1b      	ldrb	r3, [r3, #28]
 800ebf0:	f023 0310 	bic.w	r3, r3, #16
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d005      	beq.n	800ec0e <sent_tcp+0x92>
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec06:	88fa      	ldrh	r2, [r7, #6]
 800ec08:	2102      	movs	r1, #2
 800ec0a:	6978      	ldr	r0, [r7, #20]
 800ec0c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3718      	adds	r7, #24
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	0801db1c 	.word	0x0801db1c
 800ec1c:	0801dc74 	.word	0x0801dc74
 800ec20:	0801db60 	.word	0x0801db60

0800ec24 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b088      	sub	sp, #32
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d106      	bne.n	800ec48 <err_tcp+0x24>
 800ec3a:	4b5f      	ldr	r3, [pc, #380]	@ (800edb8 <err_tcp+0x194>)
 800ec3c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800ec40:	495e      	ldr	r1, [pc, #376]	@ (800edbc <err_tcp+0x198>)
 800ec42:	485f      	ldr	r0, [pc, #380]	@ (800edc0 <err_tcp+0x19c>)
 800ec44:	f00d fd04 	bl	801c650 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ec48:	f00d faa4 	bl	801c194 <sys_arch_protect>
 800ec4c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	2200      	movs	r2, #0
 800ec52:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	78fa      	ldrb	r2, [r7, #3]
 800ec58:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	7f1b      	ldrb	r3, [r3, #28]
 800ec5e:	f043 0301 	orr.w	r3, r3, #1
 800ec62:	b2da      	uxtb	r2, r3
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	785b      	ldrb	r3, [r3, #1]
 800ec6c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	2200      	movs	r2, #0
 800ec72:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ec74:	69b8      	ldr	r0, [r7, #24]
 800ec76:	f00d fa9b 	bl	801c1b0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d005      	beq.n	800ec8e <err_tcp+0x6a>
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec86:	2200      	movs	r2, #0
 800ec88:	2104      	movs	r1, #4
 800ec8a:	69f8      	ldr	r0, [r7, #28]
 800ec8c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d005      	beq.n	800eca2 <err_tcp+0x7e>
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	69f8      	ldr	r0, [r7, #28]
 800eca0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d005      	beq.n	800ecb6 <err_tcp+0x92>
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecae:	2200      	movs	r2, #0
 800ecb0:	2102      	movs	r1, #2
 800ecb2:	69f8      	ldr	r0, [r7, #28]
 800ecb4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800ecb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7ff fd86 	bl	800e7cc <lwip_netconn_err_to_msg>
 800ecc0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	3310      	adds	r3, #16
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f00d f95a 	bl	801bf80 <sys_mbox_valid>
 800eccc:	4603      	mov	r3, r0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d005      	beq.n	800ecde <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	3310      	adds	r3, #16
 800ecd6:	6939      	ldr	r1, [r7, #16]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f00d f8ef 	bl	801bebc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	3314      	adds	r3, #20
 800ece2:	4618      	mov	r0, r3
 800ece4:	f00d f94c 	bl	801bf80 <sys_mbox_valid>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d005      	beq.n	800ecfa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	3314      	adds	r3, #20
 800ecf2:	6939      	ldr	r1, [r7, #16]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f00d f8e1 	bl	801bebc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ecfa:	7dfb      	ldrb	r3, [r7, #23]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d005      	beq.n	800ed0c <err_tcp+0xe8>
 800ed00:	7dfb      	ldrb	r3, [r7, #23]
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	d002      	beq.n	800ed0c <err_tcp+0xe8>
 800ed06:	7dfb      	ldrb	r3, [r7, #23]
 800ed08:	2b03      	cmp	r3, #3
 800ed0a:	d143      	bne.n	800ed94 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	7f1b      	ldrb	r3, [r3, #28]
 800ed10:	f003 0304 	and.w	r3, r3, #4
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	bf14      	ite	ne
 800ed18:	2301      	movne	r3, #1
 800ed1a:	2300      	moveq	r3, #0
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	7f1b      	ldrb	r3, [r3, #28]
 800ed24:	f023 0304 	bic.w	r3, r3, #4
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d13b      	bne.n	800edac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	6a1b      	ldr	r3, [r3, #32]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d106      	bne.n	800ed4a <err_tcp+0x126>
 800ed3c:	4b1e      	ldr	r3, [pc, #120]	@ (800edb8 <err_tcp+0x194>)
 800ed3e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ed42:	4920      	ldr	r1, [pc, #128]	@ (800edc4 <err_tcp+0x1a0>)
 800ed44:	481e      	ldr	r0, [pc, #120]	@ (800edc0 <err_tcp+0x19c>)
 800ed46:	f00d fc83 	bl	801c650 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ed4a:	7dfb      	ldrb	r3, [r7, #23]
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	d104      	bne.n	800ed5a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	6a1b      	ldr	r3, [r3, #32]
 800ed54:	2200      	movs	r2, #0
 800ed56:	711a      	strb	r2, [r3, #4]
 800ed58:	e003      	b.n	800ed62 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	6a1b      	ldr	r3, [r3, #32]
 800ed5e:	78fa      	ldrb	r2, [r7, #3]
 800ed60:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	330c      	adds	r3, #12
 800ed6a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ed6c:	68b8      	ldr	r0, [r7, #8]
 800ed6e:	f00d f995 	bl	801c09c <sys_sem_valid>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d106      	bne.n	800ed86 <err_tcp+0x162>
 800ed78:	4b0f      	ldr	r3, [pc, #60]	@ (800edb8 <err_tcp+0x194>)
 800ed7a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800ed7e:	4912      	ldr	r1, [pc, #72]	@ (800edc8 <err_tcp+0x1a4>)
 800ed80:	480f      	ldr	r0, [pc, #60]	@ (800edc0 <err_tcp+0x19c>)
 800ed82:	f00d fc65 	bl	801c650 <iprintf>
      conn->current_msg = NULL;
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800ed8c:	68b8      	ldr	r0, [r7, #8]
 800ed8e:	f00d f96b 	bl	801c068 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ed92:	e00b      	b.n	800edac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	6a1b      	ldr	r3, [r3, #32]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d008      	beq.n	800edae <err_tcp+0x18a>
 800ed9c:	4b06      	ldr	r3, [pc, #24]	@ (800edb8 <err_tcp+0x194>)
 800ed9e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800eda2:	490a      	ldr	r1, [pc, #40]	@ (800edcc <err_tcp+0x1a8>)
 800eda4:	4806      	ldr	r0, [pc, #24]	@ (800edc0 <err_tcp+0x19c>)
 800eda6:	f00d fc53 	bl	801c650 <iprintf>
  }
}
 800edaa:	e000      	b.n	800edae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800edac:	bf00      	nop
}
 800edae:	bf00      	nop
 800edb0:	3720      	adds	r7, #32
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	0801db1c 	.word	0x0801db1c
 800edbc:	0801dc74 	.word	0x0801dc74
 800edc0:	0801db60 	.word	0x0801db60
 800edc4:	0801dc84 	.word	0x0801dc84
 800edc8:	0801dca0 	.word	0x0801dca0
 800edcc:	0801dcbc 	.word	0x0801dcbc

0800edd0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800edde:	6879      	ldr	r1, [r7, #4]
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f004 feb9 	bl	8013b58 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ede6:	490a      	ldr	r1, [pc, #40]	@ (800ee10 <setup_tcp+0x40>)
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f004 fec7 	bl	8013b7c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800edee:	4909      	ldr	r1, [pc, #36]	@ (800ee14 <setup_tcp+0x44>)
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f004 fee5 	bl	8013bc0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800edf6:	2202      	movs	r2, #2
 800edf8:	4907      	ldr	r1, [pc, #28]	@ (800ee18 <setup_tcp+0x48>)
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f004 ff3c 	bl	8013c78 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ee00:	4906      	ldr	r1, [pc, #24]	@ (800ee1c <setup_tcp+0x4c>)
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	f004 fefe 	bl	8013c04 <tcp_err>
}
 800ee08:	bf00      	nop
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}
 800ee10:	0800e9a9 	.word	0x0800e9a9
 800ee14:	0800eb7d 	.word	0x0800eb7d
 800ee18:	0800eab5 	.word	0x0800eab5
 800ee1c:	0800ec25 	.word	0x0800ec25

0800ee20 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ee20:	b590      	push	{r4, r7, lr}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d006      	beq.n	800ee44 <pcb_new+0x24>
 800ee36:	4b2b      	ldr	r3, [pc, #172]	@ (800eee4 <pcb_new+0xc4>)
 800ee38:	f240 2265 	movw	r2, #613	@ 0x265
 800ee3c:	492a      	ldr	r1, [pc, #168]	@ (800eee8 <pcb_new+0xc8>)
 800ee3e:	482b      	ldr	r0, [pc, #172]	@ (800eeec <pcb_new+0xcc>)
 800ee40:	f00d fc06 	bl	801c650 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ee4e:	2b10      	cmp	r3, #16
 800ee50:	d022      	beq.n	800ee98 <pcb_new+0x78>
 800ee52:	2b20      	cmp	r3, #32
 800ee54:	d133      	bne.n	800eebe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681c      	ldr	r4, [r3, #0]
 800ee5a:	7bfb      	ldrb	r3, [r7, #15]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f00a fbfa 	bl	8019656 <udp_new_ip_type>
 800ee62:	4603      	mov	r3, r0
 800ee64:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d02a      	beq.n	800eec6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	2b22      	cmp	r3, #34	@ 0x22
 800ee78:	d104      	bne.n	800ee84 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	2201      	movs	r2, #1
 800ee82:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	6858      	ldr	r0, [r3, #4]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	4917      	ldr	r1, [pc, #92]	@ (800eef0 <pcb_new+0xd0>)
 800ee92:	f00a fb67 	bl	8019564 <udp_recv>
      }
      break;
 800ee96:	e016      	b.n	800eec6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681c      	ldr	r4, [r3, #0]
 800ee9c:	7bfb      	ldrb	r3, [r7, #15]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f004 fe4c 	bl	8013b3c <tcp_new_ip_type>
 800eea4:	4603      	mov	r3, r0
 800eea6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00b      	beq.n	800eeca <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7ff ff8a 	bl	800edd0 <setup_tcp>
      }
      break;
 800eebc:	e005      	b.n	800eeca <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	22fa      	movs	r2, #250	@ 0xfa
 800eec2:	711a      	strb	r2, [r3, #4]
      return;
 800eec4:	e00a      	b.n	800eedc <pcb_new+0xbc>
      break;
 800eec6:	bf00      	nop
 800eec8:	e000      	b.n	800eecc <pcb_new+0xac>
      break;
 800eeca:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d102      	bne.n	800eedc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	22ff      	movs	r2, #255	@ 0xff
 800eeda:	711a      	strb	r2, [r3, #4]
  }
}
 800eedc:	3714      	adds	r7, #20
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd90      	pop	{r4, r7, pc}
 800eee2:	bf00      	nop
 800eee4:	0801db1c 	.word	0x0801db1c
 800eee8:	0801dd00 	.word	0x0801dd00
 800eeec:	0801db60 	.word	0x0801db60
 800eef0:	0800e8ad 	.word	0x0800e8ad

0800eef4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2200      	movs	r2, #0
 800ef04:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d102      	bne.n	800ef16 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f7ff ff85 	bl	800ee20 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ef16:	bf00      	nop
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
	...

0800ef20 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	6039      	str	r1, [r7, #0]
 800ef2a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ef30:	2007      	movs	r0, #7
 800ef32:	f001 ff23 	bl	8010d7c <memp_malloc>
 800ef36:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d101      	bne.n	800ef42 <netconn_alloc+0x22>
    return NULL;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	e052      	b.n	800efe8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2200      	movs	r2, #0
 800ef46:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	79fa      	ldrb	r2, [r7, #7]
 800ef4c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ef54:	79fb      	ldrb	r3, [r7, #7]
 800ef56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef5a:	2b10      	cmp	r3, #16
 800ef5c:	d004      	beq.n	800ef68 <netconn_alloc+0x48>
 800ef5e:	2b20      	cmp	r3, #32
 800ef60:	d105      	bne.n	800ef6e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ef62:	2306      	movs	r3, #6
 800ef64:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ef66:	e00a      	b.n	800ef7e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ef68:	2306      	movs	r3, #6
 800ef6a:	617b      	str	r3, [r7, #20]
      break;
 800ef6c:	e007      	b.n	800ef7e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ef6e:	4b20      	ldr	r3, [pc, #128]	@ (800eff0 <netconn_alloc+0xd0>)
 800ef70:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800ef74:	491f      	ldr	r1, [pc, #124]	@ (800eff4 <netconn_alloc+0xd4>)
 800ef76:	4820      	ldr	r0, [pc, #128]	@ (800eff8 <netconn_alloc+0xd8>)
 800ef78:	f00d fb6a 	bl	801c650 <iprintf>
      goto free_and_return;
 800ef7c:	e02f      	b.n	800efde <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	3310      	adds	r3, #16
 800ef82:	6979      	ldr	r1, [r7, #20]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f00c ff6d 	bl	801be64 <sys_mbox_new>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d125      	bne.n	800efdc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	330c      	adds	r3, #12
 800ef94:	2100      	movs	r1, #0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f00d f810 	bl	801bfbc <sys_sem_new>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d005      	beq.n	800efae <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	3310      	adds	r3, #16
 800efa6:	4618      	mov	r0, r3
 800efa8:	f00c ff76 	bl	801be98 <sys_mbox_free>
    goto free_and_return;
 800efac:	e017      	b.n	800efde <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	3314      	adds	r3, #20
 800efb2:	4618      	mov	r0, r3
 800efb4:	f00c fff5 	bl	801bfa2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2200      	movs	r2, #0
 800efbc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800efc4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	7cfa      	ldrb	r2, [r7, #19]
 800efd6:	771a      	strb	r2, [r3, #28]
  return conn;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	e005      	b.n	800efe8 <netconn_alloc+0xc8>
    goto free_and_return;
 800efdc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800efde:	68f9      	ldr	r1, [r7, #12]
 800efe0:	2007      	movs	r0, #7
 800efe2:	f001 ff41 	bl	8010e68 <memp_free>
  return NULL;
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3718      	adds	r7, #24
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	0801db1c 	.word	0x0801db1c
 800eff4:	0801dd20 	.word	0x0801dd20
 800eff8:	0801db60 	.word	0x0801db60

0800effc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d006      	beq.n	800f01a <netconn_free+0x1e>
 800f00c:	4b1b      	ldr	r3, [pc, #108]	@ (800f07c <netconn_free+0x80>)
 800f00e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f012:	491b      	ldr	r1, [pc, #108]	@ (800f080 <netconn_free+0x84>)
 800f014:	481b      	ldr	r0, [pc, #108]	@ (800f084 <netconn_free+0x88>)
 800f016:	f00d fb1b 	bl	801c650 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	3310      	adds	r3, #16
 800f01e:	4618      	mov	r0, r3
 800f020:	f00c ffae 	bl	801bf80 <sys_mbox_valid>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d006      	beq.n	800f038 <netconn_free+0x3c>
 800f02a:	4b14      	ldr	r3, [pc, #80]	@ (800f07c <netconn_free+0x80>)
 800f02c:	f240 3223 	movw	r2, #803	@ 0x323
 800f030:	4915      	ldr	r1, [pc, #84]	@ (800f088 <netconn_free+0x8c>)
 800f032:	4814      	ldr	r0, [pc, #80]	@ (800f084 <netconn_free+0x88>)
 800f034:	f00d fb0c 	bl	801c650 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3314      	adds	r3, #20
 800f03c:	4618      	mov	r0, r3
 800f03e:	f00c ff9f 	bl	801bf80 <sys_mbox_valid>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d006      	beq.n	800f056 <netconn_free+0x5a>
 800f048:	4b0c      	ldr	r3, [pc, #48]	@ (800f07c <netconn_free+0x80>)
 800f04a:	f240 3226 	movw	r2, #806	@ 0x326
 800f04e:	490f      	ldr	r1, [pc, #60]	@ (800f08c <netconn_free+0x90>)
 800f050:	480c      	ldr	r0, [pc, #48]	@ (800f084 <netconn_free+0x88>)
 800f052:	f00d fafd 	bl	801c650 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	330c      	adds	r3, #12
 800f05a:	4618      	mov	r0, r3
 800f05c:	f00d f811 	bl	801c082 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	330c      	adds	r3, #12
 800f064:	4618      	mov	r0, r3
 800f066:	f00d f82a 	bl	801c0be <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f06a:	6879      	ldr	r1, [r7, #4]
 800f06c:	2007      	movs	r0, #7
 800f06e:	f001 fefb 	bl	8010e68 <memp_free>
}
 800f072:	bf00      	nop
 800f074:	3708      	adds	r7, #8
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	0801db1c 	.word	0x0801db1c
 800f080:	0801dd48 	.word	0x0801dd48
 800f084:	0801db60 	.word	0x0801db60
 800f088:	0801dd78 	.word	0x0801dd78
 800f08c:	0801ddb4 	.word	0x0801ddb4

0800f090 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	3310      	adds	r3, #16
 800f09c:	4618      	mov	r0, r3
 800f09e:	f00c ff6f 	bl	801bf80 <sys_mbox_valid>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d02f      	beq.n	800f108 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f0a8:	e018      	b.n	800f0dc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f0b2:	2b10      	cmp	r3, #16
 800f0b4:	d10e      	bne.n	800f0d4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	f107 020f 	add.w	r2, r7, #15
 800f0bc:	4611      	mov	r1, r2
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7ff fbba 	bl	800e838 <lwip_netconn_is_err_msg>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d108      	bne.n	800f0dc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f002 fe65 	bl	8011d9c <pbuf_free>
 800f0d2:	e003      	b.n	800f0dc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 ff5a 	bl	800ff90 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	3310      	adds	r3, #16
 800f0e0:	f107 0210 	add.w	r2, r7, #16
 800f0e4:	4611      	mov	r1, r2
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f00c ff33 	bl	801bf52 <sys_arch_mbox_tryfetch>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f0f2:	d1da      	bne.n	800f0aa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	3310      	adds	r3, #16
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f00c fecd 	bl	801be98 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	3310      	adds	r3, #16
 800f102:	4618      	mov	r0, r3
 800f104:	f00c ff4d 	bl	801bfa2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	3314      	adds	r3, #20
 800f10c:	4618      	mov	r0, r3
 800f10e:	f00c ff37 	bl	801bf80 <sys_mbox_valid>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d034      	beq.n	800f182 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f118:	e01d      	b.n	800f156 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	f107 020e 	add.w	r2, r7, #14
 800f120:	4611      	mov	r1, r2
 800f122:	4618      	mov	r0, r3
 800f124:	f7ff fb88 	bl	800e838 <lwip_netconn_is_err_msg>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d113      	bne.n	800f156 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f132:	6978      	ldr	r0, [r7, #20]
 800f134:	f7ff ffac 	bl	800f090 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d007      	beq.n	800f150 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	4618      	mov	r0, r3
 800f146:	f003 fc29 	bl	801299c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	2200      	movs	r2, #0
 800f14e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f150:	6978      	ldr	r0, [r7, #20]
 800f152:	f7ff ff53 	bl	800effc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	3314      	adds	r3, #20
 800f15a:	f107 0210 	add.w	r2, r7, #16
 800f15e:	4611      	mov	r1, r2
 800f160:	4618      	mov	r0, r3
 800f162:	f00c fef6 	bl	801bf52 <sys_arch_mbox_tryfetch>
 800f166:	4603      	mov	r3, r0
 800f168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f16c:	d1d5      	bne.n	800f11a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	3314      	adds	r3, #20
 800f172:	4618      	mov	r0, r3
 800f174:	f00c fe90 	bl	801be98 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	3314      	adds	r3, #20
 800f17c:	4618      	mov	r0, r3
 800f17e:	f00c ff10 	bl	801bfa2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f182:	bf00      	nop
 800f184:	3718      	adds	r7, #24
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
	...

0800f18c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b086      	sub	sp, #24
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f198:	2300      	movs	r3, #0
 800f19a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d106      	bne.n	800f1b0 <lwip_netconn_do_close_internal+0x24>
 800f1a2:	4b87      	ldr	r3, [pc, #540]	@ (800f3c0 <lwip_netconn_do_close_internal+0x234>)
 800f1a4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800f1a8:	4986      	ldr	r1, [pc, #536]	@ (800f3c4 <lwip_netconn_do_close_internal+0x238>)
 800f1aa:	4887      	ldr	r0, [pc, #540]	@ (800f3c8 <lwip_netconn_do_close_internal+0x23c>)
 800f1ac:	f00d fa50 	bl	801c650 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f1b8:	2b10      	cmp	r3, #16
 800f1ba:	d006      	beq.n	800f1ca <lwip_netconn_do_close_internal+0x3e>
 800f1bc:	4b80      	ldr	r3, [pc, #512]	@ (800f3c0 <lwip_netconn_do_close_internal+0x234>)
 800f1be:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800f1c2:	4982      	ldr	r1, [pc, #520]	@ (800f3cc <lwip_netconn_do_close_internal+0x240>)
 800f1c4:	4880      	ldr	r0, [pc, #512]	@ (800f3c8 <lwip_netconn_do_close_internal+0x23c>)
 800f1c6:	f00d fa43 	bl	801c650 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	785b      	ldrb	r3, [r3, #1]
 800f1ce:	2b04      	cmp	r3, #4
 800f1d0:	d006      	beq.n	800f1e0 <lwip_netconn_do_close_internal+0x54>
 800f1d2:	4b7b      	ldr	r3, [pc, #492]	@ (800f3c0 <lwip_netconn_do_close_internal+0x234>)
 800f1d4:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800f1d8:	497d      	ldr	r1, [pc, #500]	@ (800f3d0 <lwip_netconn_do_close_internal+0x244>)
 800f1da:	487b      	ldr	r0, [pc, #492]	@ (800f3c8 <lwip_netconn_do_close_internal+0x23c>)
 800f1dc:	f00d fa38 	bl	801c650 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d106      	bne.n	800f1f6 <lwip_netconn_do_close_internal+0x6a>
 800f1e8:	4b75      	ldr	r3, [pc, #468]	@ (800f3c0 <lwip_netconn_do_close_internal+0x234>)
 800f1ea:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800f1ee:	4979      	ldr	r1, [pc, #484]	@ (800f3d4 <lwip_netconn_do_close_internal+0x248>)
 800f1f0:	4875      	ldr	r0, [pc, #468]	@ (800f3c8 <lwip_netconn_do_close_internal+0x23c>)
 800f1f2:	f00d fa2d 	bl	801c650 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d106      	bne.n	800f20c <lwip_netconn_do_close_internal+0x80>
 800f1fe:	4b70      	ldr	r3, [pc, #448]	@ (800f3c0 <lwip_netconn_do_close_internal+0x234>)
 800f200:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f204:	4974      	ldr	r1, [pc, #464]	@ (800f3d8 <lwip_netconn_do_close_internal+0x24c>)
 800f206:	4870      	ldr	r0, [pc, #448]	@ (800f3c8 <lwip_netconn_do_close_internal+0x23c>)
 800f208:	f00d fa22 	bl	801c650 <iprintf>

  tpcb = conn->pcb.tcp;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	7a1b      	ldrb	r3, [r3, #8]
 800f218:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f21a:	7bfb      	ldrb	r3, [r7, #15]
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f222:	7bfb      	ldrb	r3, [r7, #15]
 800f224:	f003 0302 	and.w	r3, r3, #2
 800f228:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f22a:	7bfb      	ldrb	r3, [r7, #15]
 800f22c:	2b03      	cmp	r3, #3
 800f22e:	d102      	bne.n	800f236 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f230:	2301      	movs	r3, #1
 800f232:	75bb      	strb	r3, [r7, #22]
 800f234:	e01f      	b.n	800f276 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f236:	7bbb      	ldrb	r3, [r7, #14]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00e      	beq.n	800f25a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f240:	2b05      	cmp	r3, #5
 800f242:	d007      	beq.n	800f254 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f248:	2b06      	cmp	r3, #6
 800f24a:	d003      	beq.n	800f254 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f250:	2b08      	cmp	r3, #8
 800f252:	d102      	bne.n	800f25a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f254:	2301      	movs	r3, #1
 800f256:	75bb      	strb	r3, [r7, #22]
 800f258:	e00d      	b.n	800f276 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f25a:	7b7b      	ldrb	r3, [r7, #13]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d008      	beq.n	800f272 <lwip_netconn_do_close_internal+0xe6>
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	8b5b      	ldrh	r3, [r3, #26]
 800f264:	f003 0310 	and.w	r3, r3, #16
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f26c:	2301      	movs	r3, #1
 800f26e:	75bb      	strb	r3, [r7, #22]
 800f270:	e001      	b.n	800f276 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f276:	7dbb      	ldrb	r3, [r7, #22]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d003      	beq.n	800f284 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f27c:	2100      	movs	r1, #0
 800f27e:	6938      	ldr	r0, [r7, #16]
 800f280:	f004 fc6a 	bl	8013b58 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	7d1b      	ldrb	r3, [r3, #20]
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d104      	bne.n	800f296 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f28c:	2100      	movs	r1, #0
 800f28e:	6938      	ldr	r0, [r7, #16]
 800f290:	f004 fcda 	bl	8013c48 <tcp_accept>
 800f294:	e01d      	b.n	800f2d2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f296:	7bbb      	ldrb	r3, [r7, #14]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d007      	beq.n	800f2ac <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f29c:	2100      	movs	r1, #0
 800f29e:	6938      	ldr	r0, [r7, #16]
 800f2a0:	f004 fc6c 	bl	8013b7c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f2a4:	2100      	movs	r1, #0
 800f2a6:	6938      	ldr	r0, [r7, #16]
 800f2a8:	f004 fcce 	bl	8013c48 <tcp_accept>
    }
    if (shut_tx) {
 800f2ac:	7b7b      	ldrb	r3, [r7, #13]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d003      	beq.n	800f2ba <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	6938      	ldr	r0, [r7, #16]
 800f2b6:	f004 fc83 	bl	8013bc0 <tcp_sent>
    }
    if (shut_close) {
 800f2ba:	7dbb      	ldrb	r3, [r7, #22]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d008      	beq.n	800f2d2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	6938      	ldr	r0, [r7, #16]
 800f2c6:	f004 fcd7 	bl	8013c78 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	6938      	ldr	r0, [r7, #16]
 800f2ce:	f004 fc99 	bl	8013c04 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f2d2:	7dbb      	ldrb	r3, [r7, #22]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d005      	beq.n	800f2e4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f2d8:	6938      	ldr	r0, [r7, #16]
 800f2da:	f003 fa19 	bl	8012710 <tcp_close>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	75fb      	strb	r3, [r7, #23]
 800f2e2:	e007      	b.n	800f2f4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f2e4:	7bbb      	ldrb	r3, [r7, #14]
 800f2e6:	7b7a      	ldrb	r2, [r7, #13]
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	6938      	ldr	r0, [r7, #16]
 800f2ec:	f003 fa3c 	bl	8012768 <tcp_shutdown>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d102      	bne.n	800f302 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	757b      	strb	r3, [r7, #21]
 800f300:	e016      	b.n	800f330 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f302:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f30a:	d10f      	bne.n	800f32c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6a1b      	ldr	r3, [r3, #32]
 800f310:	7a5b      	ldrb	r3, [r3, #9]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d10c      	bne.n	800f330 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f316:	2301      	movs	r3, #1
 800f318:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f31a:	7dbb      	ldrb	r3, [r7, #22]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d007      	beq.n	800f330 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f320:	6938      	ldr	r0, [r7, #16]
 800f322:	f003 fb3b 	bl	801299c <tcp_abort>
          err = ERR_OK;
 800f326:	2300      	movs	r3, #0
 800f328:	75fb      	strb	r3, [r7, #23]
 800f32a:	e001      	b.n	800f330 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f32c:	2301      	movs	r3, #1
 800f32e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f330:	7d7b      	ldrb	r3, [r7, #21]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d052      	beq.n	800f3dc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6a1b      	ldr	r3, [r3, #32]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	330c      	adds	r3, #12
 800f33e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6a1b      	ldr	r3, [r3, #32]
 800f344:	7dfa      	ldrb	r2, [r7, #23]
 800f346:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d129      	bne.n	800f3b0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f35c:	7dbb      	ldrb	r3, [r7, #22]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00c      	beq.n	800f37c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2200      	movs	r2, #0
 800f366:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d005      	beq.n	800f37c <lwip_netconn_do_close_internal+0x1f0>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f374:	2200      	movs	r2, #0
 800f376:	2104      	movs	r1, #4
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	4798      	blx	r3
      }
      if (shut_rx) {
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d009      	beq.n	800f396 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f386:	2b00      	cmp	r3, #0
 800f388:	d005      	beq.n	800f396 <lwip_netconn_do_close_internal+0x20a>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f38e:	2200      	movs	r2, #0
 800f390:	2100      	movs	r1, #0
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	4798      	blx	r3
      }
      if (shut_tx) {
 800f396:	7b7b      	ldrb	r3, [r7, #13]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d009      	beq.n	800f3b0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d005      	beq.n	800f3b0 <lwip_netconn_do_close_internal+0x224>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	2102      	movs	r1, #2
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f3b0:	78fb      	ldrb	r3, [r7, #3]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d002      	beq.n	800f3bc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f3b6:	68b8      	ldr	r0, [r7, #8]
 800f3b8:	f00c fe56 	bl	801c068 <sys_sem_signal>
    }
    return ERR_OK;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	e03c      	b.n	800f43a <lwip_netconn_do_close_internal+0x2ae>
 800f3c0:	0801db1c 	.word	0x0801db1c
 800f3c4:	0801ddf0 	.word	0x0801ddf0
 800f3c8:	0801db60 	.word	0x0801db60
 800f3cc:	0801de00 	.word	0x0801de00
 800f3d0:	0801de20 	.word	0x0801de20
 800f3d4:	0801de44 	.word	0x0801de44
 800f3d8:	0801dc84 	.word	0x0801dc84
  }
  if (!close_finished) {
 800f3dc:	7d7b      	ldrb	r3, [r7, #21]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d11e      	bne.n	800f420 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	7d1b      	ldrb	r3, [r3, #20]
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d106      	bne.n	800f3f8 <lwip_netconn_do_close_internal+0x26c>
 800f3ea:	4b16      	ldr	r3, [pc, #88]	@ (800f444 <lwip_netconn_do_close_internal+0x2b8>)
 800f3ec:	f240 4241 	movw	r2, #1089	@ 0x441
 800f3f0:	4915      	ldr	r1, [pc, #84]	@ (800f448 <lwip_netconn_do_close_internal+0x2bc>)
 800f3f2:	4816      	ldr	r0, [pc, #88]	@ (800f44c <lwip_netconn_do_close_internal+0x2c0>)
 800f3f4:	f00d f92c 	bl	801c650 <iprintf>
    if (shut_tx) {
 800f3f8:	7b7b      	ldrb	r3, [r7, #13]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d003      	beq.n	800f406 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800f3fe:	4914      	ldr	r1, [pc, #80]	@ (800f450 <lwip_netconn_do_close_internal+0x2c4>)
 800f400:	6938      	ldr	r0, [r7, #16]
 800f402:	f004 fbdd 	bl	8013bc0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f406:	2201      	movs	r2, #1
 800f408:	4912      	ldr	r1, [pc, #72]	@ (800f454 <lwip_netconn_do_close_internal+0x2c8>)
 800f40a:	6938      	ldr	r0, [r7, #16]
 800f40c:	f004 fc34 	bl	8013c78 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f410:	4911      	ldr	r1, [pc, #68]	@ (800f458 <lwip_netconn_do_close_internal+0x2cc>)
 800f412:	6938      	ldr	r0, [r7, #16]
 800f414:	f004 fbf6 	bl	8013c04 <tcp_err>
    tcp_arg(tpcb, conn);
 800f418:	6879      	ldr	r1, [r7, #4]
 800f41a:	6938      	ldr	r0, [r7, #16]
 800f41c:	f004 fb9c 	bl	8013b58 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d106      	bne.n	800f436 <lwip_netconn_do_close_internal+0x2aa>
 800f428:	4b06      	ldr	r3, [pc, #24]	@ (800f444 <lwip_netconn_do_close_internal+0x2b8>)
 800f42a:	f240 424d 	movw	r2, #1101	@ 0x44d
 800f42e:	490b      	ldr	r1, [pc, #44]	@ (800f45c <lwip_netconn_do_close_internal+0x2d0>)
 800f430:	4806      	ldr	r0, [pc, #24]	@ (800f44c <lwip_netconn_do_close_internal+0x2c0>)
 800f432:	f00d f90d 	bl	801c650 <iprintf>
  return err;
 800f436:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3718      	adds	r7, #24
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	0801db1c 	.word	0x0801db1c
 800f448:	0801de58 	.word	0x0801de58
 800f44c:	0801db60 	.word	0x0801db60
 800f450:	0800eb7d 	.word	0x0800eb7d
 800f454:	0800eab5 	.word	0x0800eab5
 800f458:	0800ec25 	.word	0x0800ec25
 800f45c:	0801de7c 	.word	0x0801de7c

0800f460 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	785b      	ldrb	r3, [r3, #1]
 800f472:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f474:	7afb      	ldrb	r3, [r7, #11]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00d      	beq.n	800f496 <lwip_netconn_do_delconn+0x36>
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f484:	2b10      	cmp	r3, #16
 800f486:	d006      	beq.n	800f496 <lwip_netconn_do_delconn+0x36>
 800f488:	4b60      	ldr	r3, [pc, #384]	@ (800f60c <lwip_netconn_do_delconn+0x1ac>)
 800f48a:	f240 425e 	movw	r2, #1118	@ 0x45e
 800f48e:	4960      	ldr	r1, [pc, #384]	@ (800f610 <lwip_netconn_do_delconn+0x1b0>)
 800f490:	4860      	ldr	r0, [pc, #384]	@ (800f614 <lwip_netconn_do_delconn+0x1b4>)
 800f492:	f00d f8dd 	bl	801c650 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f496:	7afb      	ldrb	r3, [r7, #11]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d005      	beq.n	800f4a8 <lwip_netconn_do_delconn+0x48>
 800f49c:	7afb      	ldrb	r3, [r7, #11]
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d002      	beq.n	800f4a8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f4a2:	7afb      	ldrb	r3, [r7, #11]
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d109      	bne.n	800f4bc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f4a8:	7afb      	ldrb	r3, [r7, #11]
 800f4aa:	2b03      	cmp	r3, #3
 800f4ac:	d10a      	bne.n	800f4c4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	7f1b      	ldrb	r3, [r3, #28]
 800f4b4:	f003 0304 	and.w	r3, r3, #4
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d103      	bne.n	800f4c4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	22fb      	movs	r2, #251	@ 0xfb
 800f4c0:	711a      	strb	r2, [r3, #4]
 800f4c2:	e097      	b.n	800f5f4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f4c4:	7afb      	ldrb	r3, [r7, #11]
 800f4c6:	2b03      	cmp	r3, #3
 800f4c8:	d10d      	bne.n	800f4e6 <lwip_netconn_do_delconn+0x86>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	7f1b      	ldrb	r3, [r3, #28]
 800f4d0:	f003 0304 	and.w	r3, r3, #4
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d106      	bne.n	800f4e6 <lwip_netconn_do_delconn+0x86>
 800f4d8:	4b4c      	ldr	r3, [pc, #304]	@ (800f60c <lwip_netconn_do_delconn+0x1ac>)
 800f4da:	f240 427a 	movw	r2, #1146	@ 0x47a
 800f4de:	494e      	ldr	r1, [pc, #312]	@ (800f618 <lwip_netconn_do_delconn+0x1b8>)
 800f4e0:	484c      	ldr	r0, [pc, #304]	@ (800f614 <lwip_netconn_do_delconn+0x1b4>)
 800f4e2:	f00d f8b5 	bl	801c650 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7ff fdcd 	bl	800f090 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d05f      	beq.n	800f5c0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f50a:	2b10      	cmp	r3, #16
 800f50c:	d00d      	beq.n	800f52a <lwip_netconn_do_delconn+0xca>
 800f50e:	2b20      	cmp	r3, #32
 800f510:	d151      	bne.n	800f5b6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	4618      	mov	r0, r3
 800f524:	f00a f83e 	bl	80195a4 <udp_remove>
          break;
 800f528:	e046      	b.n	800f5b8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	6a1b      	ldr	r3, [r3, #32]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d006      	beq.n	800f542 <lwip_netconn_do_delconn+0xe2>
 800f534:	4b35      	ldr	r3, [pc, #212]	@ (800f60c <lwip_netconn_do_delconn+0x1ac>)
 800f536:	f240 4294 	movw	r2, #1172	@ 0x494
 800f53a:	4938      	ldr	r1, [pc, #224]	@ (800f61c <lwip_netconn_do_delconn+0x1bc>)
 800f53c:	4835      	ldr	r0, [pc, #212]	@ (800f614 <lwip_netconn_do_delconn+0x1b4>)
 800f53e:	f00d f887 	bl	801c650 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2204      	movs	r2, #4
 800f548:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2203      	movs	r2, #3
 800f54e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	68fa      	ldr	r2, [r7, #12]
 800f556:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2100      	movs	r1, #0
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff fe14 	bl	800f18c <lwip_netconn_do_close_internal>
 800f564:	4603      	mov	r3, r0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d04b      	beq.n	800f602 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	785b      	ldrb	r3, [r3, #1]
 800f570:	2b04      	cmp	r3, #4
 800f572:	d006      	beq.n	800f582 <lwip_netconn_do_delconn+0x122>
 800f574:	4b25      	ldr	r3, [pc, #148]	@ (800f60c <lwip_netconn_do_delconn+0x1ac>)
 800f576:	f240 429a 	movw	r2, #1178	@ 0x49a
 800f57a:	4929      	ldr	r1, [pc, #164]	@ (800f620 <lwip_netconn_do_delconn+0x1c0>)
 800f57c:	4825      	ldr	r0, [pc, #148]	@ (800f614 <lwip_netconn_do_delconn+0x1b4>)
 800f57e:	f00d f867 	bl	801c650 <iprintf>
            UNLOCK_TCPIP_CORE();
 800f582:	4828      	ldr	r0, [pc, #160]	@ (800f624 <lwip_netconn_do_delconn+0x1c4>)
 800f584:	f00c fdd9 	bl	801c13a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	330c      	adds	r3, #12
 800f58e:	2100      	movs	r1, #0
 800f590:	4618      	mov	r0, r3
 800f592:	f00c fd38 	bl	801c006 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f596:	4823      	ldr	r0, [pc, #140]	@ (800f624 <lwip_netconn_do_delconn+0x1c4>)
 800f598:	f00c fdc0 	bl	801c11c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	785b      	ldrb	r3, [r3, #1]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d02d      	beq.n	800f602 <lwip_netconn_do_delconn+0x1a2>
 800f5a6:	4b19      	ldr	r3, [pc, #100]	@ (800f60c <lwip_netconn_do_delconn+0x1ac>)
 800f5a8:	f240 429e 	movw	r2, #1182	@ 0x49e
 800f5ac:	491c      	ldr	r1, [pc, #112]	@ (800f620 <lwip_netconn_do_delconn+0x1c0>)
 800f5ae:	4819      	ldr	r0, [pc, #100]	@ (800f614 <lwip_netconn_do_delconn+0x1b4>)
 800f5b0:	f00d f84e 	bl	801c650 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800f5b4:	e025      	b.n	800f602 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800f5b6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d007      	beq.n	800f5da <lwip_netconn_do_delconn+0x17a>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	6810      	ldr	r0, [r2, #0]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d007      	beq.n	800f5f4 <lwip_netconn_do_delconn+0x194>
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ea:	68fa      	ldr	r2, [r7, #12]
 800f5ec:	6810      	ldr	r0, [r2, #0]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	2102      	movs	r1, #2
 800f5f2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	330c      	adds	r3, #12
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f00c fd4e 	bl	801c09c <sys_sem_valid>
 800f600:	e000      	b.n	800f604 <lwip_netconn_do_delconn+0x1a4>
          return;
 800f602:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	0801db1c 	.word	0x0801db1c
 800f610:	0801de8c 	.word	0x0801de8c
 800f614:	0801db60 	.word	0x0801db60
 800f618:	0801dea0 	.word	0x0801dea0
 800f61c:	0801dec0 	.word	0x0801dec0
 800f620:	0801dedc 	.word	0x0801dedc
 800f624:	2001f658 	.word	0x2001f658

0800f628 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d025      	beq.n	800f68a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f648:	2b10      	cmp	r3, #16
 800f64a:	d00e      	beq.n	800f66a <lwip_netconn_do_bind+0x42>
 800f64c:	2b20      	cmp	r3, #32
 800f64e:	d119      	bne.n	800f684 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	6858      	ldr	r0, [r3, #4]
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	6899      	ldr	r1, [r3, #8]
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	899b      	ldrh	r3, [r3, #12]
 800f65e:	461a      	mov	r2, r3
 800f660:	f009 fdd6 	bl	8019210 <udp_bind>
 800f664:	4603      	mov	r3, r0
 800f666:	73fb      	strb	r3, [r7, #15]
        break;
 800f668:	e011      	b.n	800f68e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	6858      	ldr	r0, [r3, #4]
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	6899      	ldr	r1, [r3, #8]
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	899b      	ldrh	r3, [r3, #12]
 800f678:	461a      	mov	r2, r3
 800f67a:	f003 f99b 	bl	80129b4 <tcp_bind>
 800f67e:	4603      	mov	r3, r0
 800f680:	73fb      	strb	r3, [r7, #15]
        break;
 800f682:	e004      	b.n	800f68e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800f684:	23fa      	movs	r3, #250	@ 0xfa
 800f686:	73fb      	strb	r3, [r7, #15]
        break;
 800f688:	e001      	b.n	800f68e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800f68a:	23fa      	movs	r3, #250	@ 0xfa
 800f68c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	7bfa      	ldrb	r2, [r7, #15]
 800f692:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f694:	bf00      	nop
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b088      	sub	sp, #32
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	4613      	mov	r3, r2
 800f6a8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d102      	bne.n	800f6be <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800f6b8:	f06f 0305 	mvn.w	r3, #5
 800f6bc:	e070      	b.n	800f7a0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	785b      	ldrb	r3, [r3, #1]
 800f6c2:	2b03      	cmp	r3, #3
 800f6c4:	d006      	beq.n	800f6d4 <lwip_netconn_do_connected+0x38>
 800f6c6:	4b38      	ldr	r3, [pc, #224]	@ (800f7a8 <lwip_netconn_do_connected+0x10c>)
 800f6c8:	f240 5223 	movw	r2, #1315	@ 0x523
 800f6cc:	4937      	ldr	r1, [pc, #220]	@ (800f7ac <lwip_netconn_do_connected+0x110>)
 800f6ce:	4838      	ldr	r0, [pc, #224]	@ (800f7b0 <lwip_netconn_do_connected+0x114>)
 800f6d0:	f00c ffbe 	bl	801c650 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800f6d4:	69bb      	ldr	r3, [r7, #24]
 800f6d6:	6a1b      	ldr	r3, [r3, #32]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d10c      	bne.n	800f6f6 <lwip_netconn_do_connected+0x5a>
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	7f1b      	ldrb	r3, [r3, #28]
 800f6e0:	f003 0304 	and.w	r3, r3, #4
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d106      	bne.n	800f6f6 <lwip_netconn_do_connected+0x5a>
 800f6e8:	4b2f      	ldr	r3, [pc, #188]	@ (800f7a8 <lwip_netconn_do_connected+0x10c>)
 800f6ea:	f240 5224 	movw	r2, #1316	@ 0x524
 800f6ee:	4931      	ldr	r1, [pc, #196]	@ (800f7b4 <lwip_netconn_do_connected+0x118>)
 800f6f0:	482f      	ldr	r0, [pc, #188]	@ (800f7b0 <lwip_netconn_do_connected+0x114>)
 800f6f2:	f00c ffad 	bl	801c650 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d008      	beq.n	800f710 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	79fa      	ldrb	r2, [r7, #7]
 800f704:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	330c      	adds	r3, #12
 800f70e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f718:	2b10      	cmp	r3, #16
 800f71a:	d106      	bne.n	800f72a <lwip_netconn_do_connected+0x8e>
 800f71c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800f724:	69b8      	ldr	r0, [r7, #24]
 800f726:	f7ff fb53 	bl	800edd0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	7f1b      	ldrb	r3, [r3, #28]
 800f72e:	f003 0304 	and.w	r3, r3, #4
 800f732:	2b00      	cmp	r3, #0
 800f734:	bf0c      	ite	eq
 800f736:	2301      	moveq	r3, #1
 800f738:	2300      	movne	r3, #0
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800f73e:	69bb      	ldr	r3, [r7, #24]
 800f740:	7f1b      	ldrb	r3, [r3, #28]
 800f742:	f023 0304 	bic.w	r3, r3, #4
 800f746:	b2da      	uxtb	r2, r3
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d002      	beq.n	800f758 <lwip_netconn_do_connected+0xbc>
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d10c      	bne.n	800f772 <lwip_netconn_do_connected+0xd6>
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d102      	bne.n	800f764 <lwip_netconn_do_connected+0xc8>
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d006      	beq.n	800f772 <lwip_netconn_do_connected+0xd6>
 800f764:	4b10      	ldr	r3, [pc, #64]	@ (800f7a8 <lwip_netconn_do_connected+0x10c>)
 800f766:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800f76a:	4913      	ldr	r1, [pc, #76]	@ (800f7b8 <lwip_netconn_do_connected+0x11c>)
 800f76c:	4810      	ldr	r0, [pc, #64]	@ (800f7b0 <lwip_netconn_do_connected+0x114>)
 800f76e:	f00c ff6f 	bl	801c650 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	2200      	movs	r2, #0
 800f776:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	2200      	movs	r2, #0
 800f77c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f782:	2b00      	cmp	r3, #0
 800f784:	d005      	beq.n	800f792 <lwip_netconn_do_connected+0xf6>
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f78a:	2200      	movs	r2, #0
 800f78c:	2102      	movs	r1, #2
 800f78e:	69b8      	ldr	r0, [r7, #24]
 800f790:	4798      	blx	r3

  if (was_blocking) {
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d002      	beq.n	800f79e <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800f798:	69f8      	ldr	r0, [r7, #28]
 800f79a:	f00c fc65 	bl	801c068 <sys_sem_signal>
  }
  return ERR_OK;
 800f79e:	2300      	movs	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	3720      	adds	r7, #32
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	0801db1c 	.word	0x0801db1c
 800f7ac:	0801dee4 	.word	0x0801dee4
 800f7b0:	0801db60 	.word	0x0801db60
 800f7b4:	0801df04 	.word	0x0801df04
 800f7b8:	0801df44 	.word	0x0801df44

0800f7bc <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b086      	sub	sp, #24
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d102      	bne.n	800f7d8 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800f7d2:	23f1      	movs	r3, #241	@ 0xf1
 800f7d4:	75fb      	strb	r3, [r7, #23]
 800f7d6:	e09b      	b.n	800f910 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f7e2:	2b10      	cmp	r3, #16
 800f7e4:	d00f      	beq.n	800f806 <lwip_netconn_do_connect+0x4a>
 800f7e6:	2b20      	cmp	r3, #32
 800f7e8:	f040 8087 	bne.w	800f8fa <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	6858      	ldr	r0, [r3, #4]
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	6899      	ldr	r1, [r3, #8]
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	899b      	ldrh	r3, [r3, #12]
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	f009 fdf6 	bl	80193ec <udp_connect>
 800f800:	4603      	mov	r3, r0
 800f802:	75fb      	strb	r3, [r7, #23]
        break;
 800f804:	e084      	b.n	800f910 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	785b      	ldrb	r3, [r3, #1]
 800f80c:	2b03      	cmp	r3, #3
 800f80e:	d102      	bne.n	800f816 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800f810:	23f7      	movs	r3, #247	@ 0xf7
 800f812:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800f814:	e07b      	b.n	800f90e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	785b      	ldrb	r3, [r3, #1]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800f820:	23f6      	movs	r3, #246	@ 0xf6
 800f822:	75fb      	strb	r3, [r7, #23]
        break;
 800f824:	e073      	b.n	800f90e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7ff fad0 	bl	800edd0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	6858      	ldr	r0, [r3, #4]
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	6899      	ldr	r1, [r3, #8]
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	899a      	ldrh	r2, [r3, #12]
 800f83e:	4b38      	ldr	r3, [pc, #224]	@ (800f920 <lwip_netconn_do_connect+0x164>)
 800f840:	f003 fa40 	bl	8012cc4 <tcp_connect>
 800f844:	4603      	mov	r3, r0
 800f846:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800f848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d15e      	bne.n	800f90e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	7f1b      	ldrb	r3, [r3, #28]
 800f856:	f003 0302 	and.w	r3, r3, #2
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	bf14      	ite	ne
 800f85e:	2301      	movne	r3, #1
 800f860:	2300      	moveq	r3, #0
 800f862:	b2db      	uxtb	r3, r3
 800f864:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2203      	movs	r2, #3
 800f86c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800f86e:	7bfb      	ldrb	r3, [r7, #15]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d009      	beq.n	800f888 <lwip_netconn_do_connect+0xcc>
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	7f1a      	ldrb	r2, [r3, #28]
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	f042 0204 	orr.w	r2, r2, #4
 800f882:	b2d2      	uxtb	r2, r2
 800f884:	771a      	strb	r2, [r3, #28]
 800f886:	e008      	b.n	800f89a <lwip_netconn_do_connect+0xde>
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	7f1a      	ldrb	r2, [r3, #28]
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f022 0204 	bic.w	r2, r2, #4
 800f896:	b2d2      	uxtb	r2, r2
 800f898:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800f89a:	7bfb      	ldrb	r3, [r7, #15]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800f8a0:	23fb      	movs	r3, #251	@ 0xfb
 800f8a2:	75fb      	strb	r3, [r7, #23]
        break;
 800f8a4:	e033      	b.n	800f90e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	693a      	ldr	r2, [r7, #16]
 800f8ac:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	785b      	ldrb	r3, [r3, #1]
 800f8b4:	2b03      	cmp	r3, #3
 800f8b6:	d006      	beq.n	800f8c6 <lwip_netconn_do_connect+0x10a>
 800f8b8:	4b1a      	ldr	r3, [pc, #104]	@ (800f924 <lwip_netconn_do_connect+0x168>)
 800f8ba:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800f8be:	491a      	ldr	r1, [pc, #104]	@ (800f928 <lwip_netconn_do_connect+0x16c>)
 800f8c0:	481a      	ldr	r0, [pc, #104]	@ (800f92c <lwip_netconn_do_connect+0x170>)
 800f8c2:	f00c fec5 	bl	801c650 <iprintf>
              UNLOCK_TCPIP_CORE();
 800f8c6:	481a      	ldr	r0, [pc, #104]	@ (800f930 <lwip_netconn_do_connect+0x174>)
 800f8c8:	f00c fc37 	bl	801c13a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	330c      	adds	r3, #12
 800f8d2:	2100      	movs	r1, #0
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f00c fb96 	bl	801c006 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800f8da:	4815      	ldr	r0, [pc, #84]	@ (800f930 <lwip_netconn_do_connect+0x174>)
 800f8dc:	f00c fc1e 	bl	801c11c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	785b      	ldrb	r3, [r3, #1]
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d116      	bne.n	800f918 <lwip_netconn_do_connect+0x15c>
 800f8ea:	4b0e      	ldr	r3, [pc, #56]	@ (800f924 <lwip_netconn_do_connect+0x168>)
 800f8ec:	f240 5274 	movw	r2, #1396	@ 0x574
 800f8f0:	490d      	ldr	r1, [pc, #52]	@ (800f928 <lwip_netconn_do_connect+0x16c>)
 800f8f2:	480e      	ldr	r0, [pc, #56]	@ (800f92c <lwip_netconn_do_connect+0x170>)
 800f8f4:	f00c feac 	bl	801c650 <iprintf>
              return;
 800f8f8:	e00e      	b.n	800f918 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800f8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800f924 <lwip_netconn_do_connect+0x168>)
 800f8fc:	f240 527d 	movw	r2, #1405	@ 0x57d
 800f900:	490c      	ldr	r1, [pc, #48]	@ (800f934 <lwip_netconn_do_connect+0x178>)
 800f902:	480a      	ldr	r0, [pc, #40]	@ (800f92c <lwip_netconn_do_connect+0x170>)
 800f904:	f00c fea4 	bl	801c650 <iprintf>
 800f908:	23fa      	movs	r3, #250	@ 0xfa
 800f90a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800f90c:	e000      	b.n	800f910 <lwip_netconn_do_connect+0x154>
        break;
 800f90e:	bf00      	nop
    }
  }
  msg->err = err;
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	7dfa      	ldrb	r2, [r7, #23]
 800f914:	711a      	strb	r2, [r3, #4]
 800f916:	e000      	b.n	800f91a <lwip_netconn_do_connect+0x15e>
              return;
 800f918:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	0800f69d 	.word	0x0800f69d
 800f924:	0801db1c 	.word	0x0801db1c
 800f928:	0801dedc 	.word	0x0801dedc
 800f92c:	0801db60 	.word	0x0801db60
 800f930:	2001f658 	.word	0x2001f658
 800f934:	0801df64 	.word	0x0801df64

0800f938 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f94e:	2b20      	cmp	r3, #32
 800f950:	d109      	bne.n	800f966 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	4618      	mov	r0, r3
 800f95a:	f009 fddb 	bl	8019514 <udp_disconnect>
    msg->err = ERR_OK;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f964:	e002      	b.n	800f96c <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	22fa      	movs	r2, #250	@ 0xfa
 800f96a:	711a      	strb	r2, [r3, #4]
}
 800f96c:	bf00      	nop
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4618      	mov	r0, r3
 800f986:	f7fe ff05 	bl	800e794 <netconn_err>
 800f98a:	4603      	mov	r3, r0
 800f98c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800f98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d134      	bne.n	800fa00 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d02d      	beq.n	800f9fc <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f9aa:	2b20      	cmp	r3, #32
 800f9ac:	d123      	bne.n	800f9f6 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	689b      	ldr	r3, [r3, #8]
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d10c      	bne.n	800f9d2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	685a      	ldr	r2, [r3, #4]
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	f009 f9c6 	bl	8018d58 <udp_send>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800f9d0:	e016      	b.n	800fa00 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	6858      	ldr	r0, [r3, #4]
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	6819      	ldr	r1, [r3, #0]
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	f103 0208 	add.w	r2, r3, #8
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	899b      	ldrh	r3, [r3, #12]
 800f9ec:	f009 f9e8 	bl	8018dc0 <udp_sendto>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	73fb      	strb	r3, [r7, #15]
          break;
 800f9f4:	e004      	b.n	800fa00 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800f9f6:	23f5      	movs	r3, #245	@ 0xf5
 800f9f8:	73fb      	strb	r3, [r7, #15]
          break;
 800f9fa:	e001      	b.n	800fa00 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800f9fc:	23f5      	movs	r3, #245	@ 0xf5
 800f9fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	7bfa      	ldrb	r2, [r7, #15]
 800fa04:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fa06:	bf00      	nop
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b086      	sub	sp, #24
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d022      	beq.n	800fa70 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa34:	2b10      	cmp	r3, #16
 800fa36:	d11b      	bne.n	800fa70 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	689b      	ldr	r3, [r3, #8]
 800fa3c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa44:	d202      	bcs.n	800fa4c <lwip_netconn_do_recv+0x3e>
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	e001      	b.n	800fa50 <lwip_netconn_do_recv+0x42>
 800fa4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa50:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	89fa      	ldrh	r2, [r7, #14]
 800fa5a:	4611      	mov	r1, r2
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f003 f89b 	bl	8012b98 <tcp_recved>
        remaining -= recved;
 800fa62:	89fb      	ldrh	r3, [r7, #14]
 800fa64:	697a      	ldr	r2, [r7, #20]
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1e6      	bne.n	800fa3e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fa70:	bf00      	nop
 800fa72:	3718      	adds	r7, #24
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b088      	sub	sp, #32
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	460b      	mov	r3, r1
 800fa82:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800fa84:	2300      	movs	r3, #0
 800fa86:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <lwip_netconn_do_writemore+0x24>
 800fa8e:	4b96      	ldr	r3, [pc, #600]	@ (800fce8 <lwip_netconn_do_writemore+0x270>)
 800fa90:	f240 6273 	movw	r2, #1651	@ 0x673
 800fa94:	4995      	ldr	r1, [pc, #596]	@ (800fcec <lwip_netconn_do_writemore+0x274>)
 800fa96:	4896      	ldr	r0, [pc, #600]	@ (800fcf0 <lwip_netconn_do_writemore+0x278>)
 800fa98:	f00c fdda 	bl	801c650 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	785b      	ldrb	r3, [r3, #1]
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d006      	beq.n	800fab2 <lwip_netconn_do_writemore+0x3a>
 800faa4:	4b90      	ldr	r3, [pc, #576]	@ (800fce8 <lwip_netconn_do_writemore+0x270>)
 800faa6:	f240 6274 	movw	r2, #1652	@ 0x674
 800faaa:	4992      	ldr	r1, [pc, #584]	@ (800fcf4 <lwip_netconn_do_writemore+0x27c>)
 800faac:	4890      	ldr	r0, [pc, #576]	@ (800fcf0 <lwip_netconn_do_writemore+0x278>)
 800faae:	f00c fdcf 	bl	801c650 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d106      	bne.n	800fac8 <lwip_netconn_do_writemore+0x50>
 800faba:	4b8b      	ldr	r3, [pc, #556]	@ (800fce8 <lwip_netconn_do_writemore+0x270>)
 800fabc:	f240 6275 	movw	r2, #1653	@ 0x675
 800fac0:	498d      	ldr	r1, [pc, #564]	@ (800fcf8 <lwip_netconn_do_writemore+0x280>)
 800fac2:	488b      	ldr	r0, [pc, #556]	@ (800fcf0 <lwip_netconn_do_writemore+0x278>)
 800fac4:	f00c fdc4 	bl	801c650 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	2b00      	cmp	r3, #0
 800face:	d106      	bne.n	800fade <lwip_netconn_do_writemore+0x66>
 800fad0:	4b85      	ldr	r3, [pc, #532]	@ (800fce8 <lwip_netconn_do_writemore+0x270>)
 800fad2:	f240 6276 	movw	r2, #1654	@ 0x676
 800fad6:	4989      	ldr	r1, [pc, #548]	@ (800fcfc <lwip_netconn_do_writemore+0x284>)
 800fad8:	4885      	ldr	r0, [pc, #532]	@ (800fcf0 <lwip_netconn_do_writemore+0x278>)
 800fada:	f00c fdb9 	bl	801c650 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	699a      	ldr	r2, [r3, #24]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a1b      	ldr	r3, [r3, #32]
 800fae8:	695b      	ldr	r3, [r3, #20]
 800faea:	429a      	cmp	r2, r3
 800faec:	d306      	bcc.n	800fafc <lwip_netconn_do_writemore+0x84>
 800faee:	4b7e      	ldr	r3, [pc, #504]	@ (800fce8 <lwip_netconn_do_writemore+0x270>)
 800faf0:	f240 6277 	movw	r2, #1655	@ 0x677
 800faf4:	4982      	ldr	r1, [pc, #520]	@ (800fd00 <lwip_netconn_do_writemore+0x288>)
 800faf6:	487e      	ldr	r0, [pc, #504]	@ (800fcf0 <lwip_netconn_do_writemore+0x278>)
 800faf8:	f00c fdaa 	bl	801c650 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6a1b      	ldr	r3, [r3, #32]
 800fb00:	899b      	ldrh	r3, [r3, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d106      	bne.n	800fb14 <lwip_netconn_do_writemore+0x9c>
 800fb06:	4b78      	ldr	r3, [pc, #480]	@ (800fce8 <lwip_netconn_do_writemore+0x270>)
 800fb08:	f240 6279 	movw	r2, #1657	@ 0x679
 800fb0c:	497d      	ldr	r1, [pc, #500]	@ (800fd04 <lwip_netconn_do_writemore+0x28c>)
 800fb0e:	4878      	ldr	r0, [pc, #480]	@ (800fcf0 <lwip_netconn_do_writemore+0x278>)
 800fb10:	f00c fd9e 	bl	801c650 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6a1b      	ldr	r3, [r3, #32]
 800fb18:	7f1b      	ldrb	r3, [r3, #28]
 800fb1a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	7f1b      	ldrb	r3, [r3, #28]
 800fb20:	f003 0302 	and.w	r3, r3, #2
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d104      	bne.n	800fb32 <lwip_netconn_do_writemore+0xba>
 800fb28:	7ebb      	ldrb	r3, [r7, #26]
 800fb2a:	f003 0304 	and.w	r3, r3, #4
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d001      	beq.n	800fb36 <lwip_netconn_do_writemore+0xbe>
 800fb32:	2301      	movs	r3, #1
 800fb34:	e000      	b.n	800fb38 <lwip_netconn_do_writemore+0xc0>
 800fb36:	2300      	movs	r3, #0
 800fb38:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6a1b      	ldr	r3, [r3, #32]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6a1b      	ldr	r3, [r3, #32]
 800fb46:	691b      	ldr	r3, [r3, #16]
 800fb48:	4413      	add	r3, r2
 800fb4a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6a1b      	ldr	r3, [r3, #32]
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	685a      	ldr	r2, [r3, #4]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6a1b      	ldr	r3, [r3, #32]
 800fb58:	691b      	ldr	r3, [r3, #16]
 800fb5a:	1ad3      	subs	r3, r2, r3
 800fb5c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb64:	d307      	bcc.n	800fb76 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800fb66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fb6a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fb6c:	7ebb      	ldrb	r3, [r7, #26]
 800fb6e:	f043 0302 	orr.w	r3, r3, #2
 800fb72:	76bb      	strb	r3, [r7, #26]
 800fb74:	e001      	b.n	800fb7a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fb82:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800fb84:	89fa      	ldrh	r2, [r7, #14]
 800fb86:	8bbb      	ldrh	r3, [r7, #28]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d216      	bcs.n	800fbba <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800fb8c:	89fb      	ldrh	r3, [r7, #14]
 800fb8e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800fb90:	7e3b      	ldrb	r3, [r7, #24]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00d      	beq.n	800fbb2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800fb96:	8bbb      	ldrh	r3, [r7, #28]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d10e      	bne.n	800fbba <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6a1b      	ldr	r3, [r3, #32]
 800fba0:	699b      	ldr	r3, [r3, #24]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d102      	bne.n	800fbac <lwip_netconn_do_writemore+0x134>
 800fba6:	f06f 0306 	mvn.w	r3, #6
 800fbaa:	e000      	b.n	800fbae <lwip_netconn_do_writemore+0x136>
 800fbac:	2300      	movs	r3, #0
 800fbae:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800fbb0:	e07d      	b.n	800fcae <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800fbb2:	7ebb      	ldrb	r3, [r7, #26]
 800fbb4:	f043 0302 	orr.w	r3, r3, #2
 800fbb8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6a1b      	ldr	r3, [r3, #32]
 800fbbe:	691a      	ldr	r2, [r3, #16]
 800fbc0:	8bbb      	ldrh	r3, [r7, #28]
 800fbc2:	441a      	add	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a1b      	ldr	r3, [r3, #32]
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d906      	bls.n	800fbde <lwip_netconn_do_writemore+0x166>
 800fbd0:	4b45      	ldr	r3, [pc, #276]	@ (800fce8 <lwip_netconn_do_writemore+0x270>)
 800fbd2:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800fbd6:	494c      	ldr	r1, [pc, #304]	@ (800fd08 <lwip_netconn_do_writemore+0x290>)
 800fbd8:	4845      	ldr	r0, [pc, #276]	@ (800fcf0 <lwip_netconn_do_writemore+0x278>)
 800fbda:	f00c fd39 	bl	801c650 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800fbde:	8bbb      	ldrh	r3, [r7, #28]
 800fbe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d103      	bne.n	800fbf0 <lwip_netconn_do_writemore+0x178>
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbee:	d209      	bcs.n	800fc04 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800fbf4:	8bba      	ldrh	r2, [r7, #28]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d10b      	bne.n	800fc12 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6a1b      	ldr	r3, [r3, #32]
 800fbfe:	899b      	ldrh	r3, [r3, #12]
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d906      	bls.n	800fc12 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800fc04:	2301      	movs	r3, #1
 800fc06:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fc08:	7ebb      	ldrb	r3, [r7, #26]
 800fc0a:	f043 0302 	orr.w	r3, r3, #2
 800fc0e:	76bb      	strb	r3, [r7, #26]
 800fc10:	e001      	b.n	800fc16 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800fc12:	2300      	movs	r3, #0
 800fc14:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6858      	ldr	r0, [r3, #4]
 800fc1a:	7ebb      	ldrb	r3, [r7, #26]
 800fc1c:	8bba      	ldrh	r2, [r7, #28]
 800fc1e:	6979      	ldr	r1, [r7, #20]
 800fc20:	f006 fee0 	bl	80169e4 <tcp_write>
 800fc24:	4603      	mov	r3, r0
 800fc26:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800fc28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d12c      	bne.n	800fc8a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6a1b      	ldr	r3, [r3, #32]
 800fc34:	6999      	ldr	r1, [r3, #24]
 800fc36:	8bba      	ldrh	r2, [r7, #28]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a1b      	ldr	r3, [r3, #32]
 800fc3c:	440a      	add	r2, r1
 800fc3e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6a1b      	ldr	r3, [r3, #32]
 800fc44:	6919      	ldr	r1, [r3, #16]
 800fc46:	8bba      	ldrh	r2, [r7, #28]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6a1b      	ldr	r3, [r3, #32]
 800fc4c:	440a      	add	r2, r1
 800fc4e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6a1b      	ldr	r3, [r3, #32]
 800fc54:	691a      	ldr	r2, [r3, #16]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a1b      	ldr	r3, [r3, #32]
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d113      	bne.n	800fc8a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6a1b      	ldr	r3, [r3, #32]
 800fc66:	899a      	ldrh	r2, [r3, #12]
 800fc68:	3a01      	subs	r2, #1
 800fc6a:	b292      	uxth	r2, r2
 800fc6c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	899b      	ldrh	r3, [r3, #12]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d008      	beq.n	800fc8a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6a1b      	ldr	r3, [r3, #32]
 800fc7c:	689a      	ldr	r2, [r3, #8]
 800fc7e:	3208      	adds	r2, #8
 800fc80:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	2200      	movs	r2, #0
 800fc88:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800fc8a:	7e7b      	ldrb	r3, [r7, #25]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d004      	beq.n	800fc9a <lwip_netconn_do_writemore+0x222>
 800fc90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f43f af50 	beq.w	800fb3a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800fc9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d004      	beq.n	800fcac <lwip_netconn_do_writemore+0x234>
 800fca2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fcaa:	d146      	bne.n	800fd3a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800fcac:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800fcae:	7e3b      	ldrb	r3, [r7, #24]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d02b      	beq.n	800fd0c <lwip_netconn_do_writemore+0x294>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a1b      	ldr	r3, [r3, #32]
 800fcb8:	699a      	ldr	r2, [r3, #24]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	695b      	ldr	r3, [r3, #20]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d223      	bcs.n	800fd0c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d005      	beq.n	800fcd8 <lwip_netconn_do_writemore+0x260>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	2103      	movs	r1, #3
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	7f1b      	ldrb	r3, [r3, #28]
 800fcdc:	f043 0310 	orr.w	r3, r3, #16
 800fce0:	b2da      	uxtb	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	771a      	strb	r2, [r3, #28]
 800fce6:	e028      	b.n	800fd3a <lwip_netconn_do_writemore+0x2c2>
 800fce8:	0801db1c 	.word	0x0801db1c
 800fcec:	0801dc74 	.word	0x0801dc74
 800fcf0:	0801db60 	.word	0x0801db60
 800fcf4:	0801df7c 	.word	0x0801df7c
 800fcf8:	0801dc84 	.word	0x0801dc84
 800fcfc:	0801df9c 	.word	0x0801df9c
 800fd00:	0801dfb4 	.word	0x0801dfb4
 800fd04:	0801dff4 	.word	0x0801dff4
 800fd08:	0801e01c 	.word	0x0801e01c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fd14:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800fd18:	d305      	bcc.n	800fd26 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fd22:	2b04      	cmp	r3, #4
 800fd24:	d909      	bls.n	800fd3a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d005      	beq.n	800fd3a <lwip_netconn_do_writemore+0x2c2>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd32:	2200      	movs	r2, #0
 800fd34:	2103      	movs	r1, #3
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800fd3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d11d      	bne.n	800fd7e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6a1b      	ldr	r3, [r3, #32]
 800fd46:	699a      	ldr	r2, [r3, #24]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6a1b      	ldr	r3, [r3, #32]
 800fd4c:	695b      	ldr	r3, [r3, #20]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d002      	beq.n	800fd58 <lwip_netconn_do_writemore+0x2e0>
 800fd52:	7e3b      	ldrb	r3, [r7, #24]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d001      	beq.n	800fd5c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f007 fc87 	bl	8017674 <tcp_output>
 800fd66:	4603      	mov	r3, r0
 800fd68:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800fd6a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800fd6e:	f113 0f04 	cmn.w	r3, #4
 800fd72:	d12c      	bne.n	800fdce <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fd74:	7b3b      	ldrb	r3, [r7, #12]
 800fd76:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	76fb      	strb	r3, [r7, #27]
 800fd7c:	e027      	b.n	800fdce <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800fd7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fd82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd86:	d120      	bne.n	800fdca <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f007 fc71 	bl	8017674 <tcp_output>
 800fd92:	4603      	mov	r3, r0
 800fd94:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800fd96:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800fd9a:	f113 0f04 	cmn.w	r3, #4
 800fd9e:	d104      	bne.n	800fdaa <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fda0:	7b7b      	ldrb	r3, [r7, #13]
 800fda2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fda4:	2301      	movs	r3, #1
 800fda6:	76fb      	strb	r3, [r7, #27]
 800fda8:	e011      	b.n	800fdce <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800fdaa:	7e3b      	ldrb	r3, [r7, #24]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d00e      	beq.n	800fdce <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a1b      	ldr	r3, [r3, #32]
 800fdb4:	699b      	ldr	r3, [r3, #24]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d102      	bne.n	800fdc0 <lwip_netconn_do_writemore+0x348>
 800fdba:	f06f 0306 	mvn.w	r3, #6
 800fdbe:	e000      	b.n	800fdc2 <lwip_netconn_do_writemore+0x34a>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	76fb      	strb	r3, [r7, #27]
 800fdc8:	e001      	b.n	800fdce <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800fdca:	2301      	movs	r3, #1
 800fdcc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800fdce:	7efb      	ldrb	r3, [r7, #27]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d015      	beq.n	800fe00 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6a1b      	ldr	r3, [r3, #32]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	330c      	adds	r3, #12
 800fddc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a1b      	ldr	r3, [r3, #32]
 800fde2:	7ffa      	ldrb	r2, [r7, #31]
 800fde4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fdf2:	78fb      	ldrb	r3, [r7, #3]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d006      	beq.n	800fe06 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800fdf8:	68b8      	ldr	r0, [r7, #8]
 800fdfa:	f00c f935 	bl	801c068 <sys_sem_signal>
 800fdfe:	e002      	b.n	800fe06 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800fe00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fe04:	e000      	b.n	800fe08 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800fe06:	2300      	movs	r3, #0
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3720      	adds	r7, #32
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	785b      	ldrb	r3, [r3, #1]
 800fe22:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d069      	beq.n	800ff02 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800fe38:	2b10      	cmp	r3, #16
 800fe3a:	d162      	bne.n	800ff02 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fe40:	2b03      	cmp	r3, #3
 800fe42:	d002      	beq.n	800fe4a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fe44:	7afb      	ldrb	r3, [r7, #11]
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d05b      	beq.n	800ff02 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800fe4a:	7afb      	ldrb	r3, [r7, #11]
 800fe4c:	2b03      	cmp	r3, #3
 800fe4e:	d103      	bne.n	800fe58 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	22f5      	movs	r2, #245	@ 0xf5
 800fe54:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fe56:	e059      	b.n	800ff0c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800fe58:	7afb      	ldrb	r3, [r7, #11]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d103      	bne.n	800fe66 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	22fb      	movs	r2, #251	@ 0xfb
 800fe62:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fe64:	e052      	b.n	800ff0c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	7a1b      	ldrb	r3, [r3, #8]
 800fe6a:	f003 0301 	and.w	r3, r3, #1
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d004      	beq.n	800fe7c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7ff f90a 	bl	800f090 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6a1b      	ldr	r3, [r3, #32]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d006      	beq.n	800fe94 <lwip_netconn_do_close+0x84>
 800fe86:	4b23      	ldr	r3, [pc, #140]	@ (800ff14 <lwip_netconn_do_close+0x104>)
 800fe88:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800fe8c:	4922      	ldr	r1, [pc, #136]	@ (800ff18 <lwip_netconn_do_close+0x108>)
 800fe8e:	4823      	ldr	r0, [pc, #140]	@ (800ff1c <lwip_netconn_do_close+0x10c>)
 800fe90:	f00c fbde 	bl	801c650 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2204      	movs	r2, #4
 800fe9a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2100      	movs	r1, #0
 800feaa:	4618      	mov	r0, r3
 800feac:	f7ff f96e 	bl	800f18c <lwip_netconn_do_close_internal>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d029      	beq.n	800ff0a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	785b      	ldrb	r3, [r3, #1]
 800febc:	2b04      	cmp	r3, #4
 800febe:	d006      	beq.n	800fece <lwip_netconn_do_close+0xbe>
 800fec0:	4b14      	ldr	r3, [pc, #80]	@ (800ff14 <lwip_netconn_do_close+0x104>)
 800fec2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800fec6:	4916      	ldr	r1, [pc, #88]	@ (800ff20 <lwip_netconn_do_close+0x110>)
 800fec8:	4814      	ldr	r0, [pc, #80]	@ (800ff1c <lwip_netconn_do_close+0x10c>)
 800feca:	f00c fbc1 	bl	801c650 <iprintf>
        UNLOCK_TCPIP_CORE();
 800fece:	4815      	ldr	r0, [pc, #84]	@ (800ff24 <lwip_netconn_do_close+0x114>)
 800fed0:	f00c f933 	bl	801c13a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	330c      	adds	r3, #12
 800feda:	2100      	movs	r1, #0
 800fedc:	4618      	mov	r0, r3
 800fede:	f00c f892 	bl	801c006 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800fee2:	4810      	ldr	r0, [pc, #64]	@ (800ff24 <lwip_netconn_do_close+0x114>)
 800fee4:	f00c f91a 	bl	801c11c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	785b      	ldrb	r3, [r3, #1]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00b      	beq.n	800ff0a <lwip_netconn_do_close+0xfa>
 800fef2:	4b08      	ldr	r3, [pc, #32]	@ (800ff14 <lwip_netconn_do_close+0x104>)
 800fef4:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800fef8:	4909      	ldr	r1, [pc, #36]	@ (800ff20 <lwip_netconn_do_close+0x110>)
 800fefa:	4808      	ldr	r0, [pc, #32]	@ (800ff1c <lwip_netconn_do_close+0x10c>)
 800fefc:	f00c fba8 	bl	801c650 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ff00:	e003      	b.n	800ff0a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	22f5      	movs	r2, #245	@ 0xf5
 800ff06:	711a      	strb	r2, [r3, #4]
 800ff08:	e000      	b.n	800ff0c <lwip_netconn_do_close+0xfc>
      return;
 800ff0a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ff0c:	3710      	adds	r7, #16
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	0801db1c 	.word	0x0801db1c
 800ff18:	0801dec0 	.word	0x0801dec0
 800ff1c:	0801db60 	.word	0x0801db60
 800ff20:	0801dedc 	.word	0x0801dedc
 800ff24:	2001f658 	.word	0x2001f658

0800ff28 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	4603      	mov	r3, r0
 800ff30:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 800ff32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	dc04      	bgt.n	800ff44 <lwip_strerr+0x1c>
 800ff3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff3e:	f113 0f10 	cmn.w	r3, #16
 800ff42:	da01      	bge.n	800ff48 <lwip_strerr+0x20>
    return "Unknown error.";
 800ff44:	4b06      	ldr	r3, [pc, #24]	@ (800ff60 <lwip_strerr+0x38>)
 800ff46:	e005      	b.n	800ff54 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 800ff48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff4c:	425b      	negs	r3, r3
 800ff4e:	4a05      	ldr	r2, [pc, #20]	@ (800ff64 <lwip_strerr+0x3c>)
 800ff50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	0801e1b0 	.word	0x0801e1b0
 800ff64:	20000024 	.word	0x20000024

0800ff68 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ff6e:	2006      	movs	r0, #6
 800ff70:	f000 ff04 	bl	8010d7c <memp_malloc>
 800ff74:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d004      	beq.n	800ff86 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800ff7c:	2210      	movs	r2, #16
 800ff7e:	2100      	movs	r1, #0
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f00c fcc5 	bl	801c910 <memset>
  }
  return buf;
 800ff86:	687b      	ldr	r3, [r7, #4]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3708      	adds	r7, #8
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d013      	beq.n	800ffc6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d00b      	beq.n	800ffbe <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f001 fef6 	bl	8011d9c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	605a      	str	r2, [r3, #4]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	685a      	ldr	r2, [r3, #4]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ffbe:	6879      	ldr	r1, [r7, #4]
 800ffc0:	2006      	movs	r0, #6
 800ffc2:	f000 ff51 	bl	8010e68 <memp_free>
  }
}
 800ffc6:	bf00      	nop
 800ffc8:	3708      	adds	r7, #8
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
	...

0800ffd0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d108      	bne.n	800fff6 <netbuf_ref+0x26>
 800ffe4:	4b1c      	ldr	r3, [pc, #112]	@ (8010058 <netbuf_ref+0x88>)
 800ffe6:	2299      	movs	r2, #153	@ 0x99
 800ffe8:	491c      	ldr	r1, [pc, #112]	@ (801005c <netbuf_ref+0x8c>)
 800ffea:	481d      	ldr	r0, [pc, #116]	@ (8010060 <netbuf_ref+0x90>)
 800ffec:	f00c fb30 	bl	801c650 <iprintf>
 800fff0:	f06f 030f 	mvn.w	r3, #15
 800fff4:	e02b      	b.n	801004e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d004      	beq.n	8010008 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4618      	mov	r0, r3
 8010004:	f001 feca 	bl	8011d9c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8010008:	2241      	movs	r2, #65	@ 0x41
 801000a:	2100      	movs	r1, #0
 801000c:	2036      	movs	r0, #54	@ 0x36
 801000e:	f001 fbe1 	bl	80117d4 <pbuf_alloc>
 8010012:	4602      	mov	r2, r0
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d105      	bne.n	801002c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2200      	movs	r2, #0
 8010024:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8010026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801002a:	e010      	b.n	801004e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68ba      	ldr	r2, [r7, #8]
 8010032:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	88fa      	ldrh	r2, [r7, #6]
 801003a:	811a      	strh	r2, [r3, #8]
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	6812      	ldr	r2, [r2, #0]
 8010040:	891b      	ldrh	r3, [r3, #8]
 8010042:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	0801e1c0 	.word	0x0801e1c0
 801005c:	0801e278 	.word	0x0801e278
 8010060:	0801e210 	.word	0x0801e210

08010064 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801006e:	f008 fbc5 	bl	80187fc <sys_timeouts_sleeptime>
 8010072:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801007a:	d10b      	bne.n	8010094 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801007c:	4813      	ldr	r0, [pc, #76]	@ (80100cc <tcpip_timeouts_mbox_fetch+0x68>)
 801007e:	f00c f85c 	bl	801c13a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010082:	2200      	movs	r2, #0
 8010084:	6839      	ldr	r1, [r7, #0]
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f00b ff32 	bl	801bef0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801008c:	480f      	ldr	r0, [pc, #60]	@ (80100cc <tcpip_timeouts_mbox_fetch+0x68>)
 801008e:	f00c f845 	bl	801c11c <sys_mutex_lock>
    return;
 8010092:	e018      	b.n	80100c6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d102      	bne.n	80100a0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801009a:	f008 fb75 	bl	8018788 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801009e:	e7e6      	b.n	801006e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80100a0:	480a      	ldr	r0, [pc, #40]	@ (80100cc <tcpip_timeouts_mbox_fetch+0x68>)
 80100a2:	f00c f84a 	bl	801c13a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f00b ff20 	bl	801bef0 <sys_arch_mbox_fetch>
 80100b0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80100b2:	4806      	ldr	r0, [pc, #24]	@ (80100cc <tcpip_timeouts_mbox_fetch+0x68>)
 80100b4:	f00c f832 	bl	801c11c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100be:	d102      	bne.n	80100c6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80100c0:	f008 fb62 	bl	8018788 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80100c4:	e7d3      	b.n	801006e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80100c6:	3710      	adds	r7, #16
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	2001f658 	.word	0x2001f658

080100d0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80100d8:	4810      	ldr	r0, [pc, #64]	@ (801011c <tcpip_thread+0x4c>)
 80100da:	f00c f81f 	bl	801c11c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80100de:	4b10      	ldr	r3, [pc, #64]	@ (8010120 <tcpip_thread+0x50>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d005      	beq.n	80100f2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80100e6:	4b0e      	ldr	r3, [pc, #56]	@ (8010120 <tcpip_thread+0x50>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a0e      	ldr	r2, [pc, #56]	@ (8010124 <tcpip_thread+0x54>)
 80100ec:	6812      	ldr	r2, [r2, #0]
 80100ee:	4610      	mov	r0, r2
 80100f0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80100f2:	f107 030c 	add.w	r3, r7, #12
 80100f6:	4619      	mov	r1, r3
 80100f8:	480b      	ldr	r0, [pc, #44]	@ (8010128 <tcpip_thread+0x58>)
 80100fa:	f7ff ffb3 	bl	8010064 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d106      	bne.n	8010112 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010104:	4b09      	ldr	r3, [pc, #36]	@ (801012c <tcpip_thread+0x5c>)
 8010106:	2291      	movs	r2, #145	@ 0x91
 8010108:	4909      	ldr	r1, [pc, #36]	@ (8010130 <tcpip_thread+0x60>)
 801010a:	480a      	ldr	r0, [pc, #40]	@ (8010134 <tcpip_thread+0x64>)
 801010c:	f00c faa0 	bl	801c650 <iprintf>
      continue;
 8010110:	e003      	b.n	801011a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	4618      	mov	r0, r3
 8010116:	f000 f80f 	bl	8010138 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801011a:	e7ea      	b.n	80100f2 <tcpip_thread+0x22>
 801011c:	2001f658 	.word	0x2001f658
 8010120:	2001f64c 	.word	0x2001f64c
 8010124:	2001f650 	.word	0x2001f650
 8010128:	2001f654 	.word	0x2001f654
 801012c:	0801e358 	.word	0x0801e358
 8010130:	0801e388 	.word	0x0801e388
 8010134:	0801e3a8 	.word	0x0801e3a8

08010138 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2b02      	cmp	r3, #2
 8010146:	d026      	beq.n	8010196 <tcpip_thread_handle_msg+0x5e>
 8010148:	2b02      	cmp	r3, #2
 801014a:	dc2b      	bgt.n	80101a4 <tcpip_thread_handle_msg+0x6c>
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <tcpip_thread_handle_msg+0x1e>
 8010150:	2b01      	cmp	r3, #1
 8010152:	d015      	beq.n	8010180 <tcpip_thread_handle_msg+0x48>
 8010154:	e026      	b.n	80101a4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	6850      	ldr	r0, [r2, #4]
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	6892      	ldr	r2, [r2, #8]
 8010162:	4611      	mov	r1, r2
 8010164:	4798      	blx	r3
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d004      	beq.n	8010176 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	4618      	mov	r0, r3
 8010172:	f001 fe13 	bl	8011d9c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010176:	6879      	ldr	r1, [r7, #4]
 8010178:	2009      	movs	r0, #9
 801017a:	f000 fe75 	bl	8010e68 <memp_free>
      break;
 801017e:	e018      	b.n	80101b2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	6892      	ldr	r2, [r2, #8]
 8010188:	4610      	mov	r0, r2
 801018a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801018c:	6879      	ldr	r1, [r7, #4]
 801018e:	2008      	movs	r0, #8
 8010190:	f000 fe6a 	bl	8010e68 <memp_free>
      break;
 8010194:	e00d      	b.n	80101b2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	6892      	ldr	r2, [r2, #8]
 801019e:	4610      	mov	r0, r2
 80101a0:	4798      	blx	r3
      break;
 80101a2:	e006      	b.n	80101b2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80101a4:	4b05      	ldr	r3, [pc, #20]	@ (80101bc <tcpip_thread_handle_msg+0x84>)
 80101a6:	22cf      	movs	r2, #207	@ 0xcf
 80101a8:	4905      	ldr	r1, [pc, #20]	@ (80101c0 <tcpip_thread_handle_msg+0x88>)
 80101aa:	4806      	ldr	r0, [pc, #24]	@ (80101c4 <tcpip_thread_handle_msg+0x8c>)
 80101ac:	f00c fa50 	bl	801c650 <iprintf>
      break;
 80101b0:	bf00      	nop
  }
}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	0801e358 	.word	0x0801e358
 80101c0:	0801e388 	.word	0x0801e388
 80101c4:	0801e3a8 	.word	0x0801e3a8

080101c8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b086      	sub	sp, #24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80101d4:	481a      	ldr	r0, [pc, #104]	@ (8010240 <tcpip_inpkt+0x78>)
 80101d6:	f00b fed3 	bl	801bf80 <sys_mbox_valid>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d105      	bne.n	80101ec <tcpip_inpkt+0x24>
 80101e0:	4b18      	ldr	r3, [pc, #96]	@ (8010244 <tcpip_inpkt+0x7c>)
 80101e2:	22fc      	movs	r2, #252	@ 0xfc
 80101e4:	4918      	ldr	r1, [pc, #96]	@ (8010248 <tcpip_inpkt+0x80>)
 80101e6:	4819      	ldr	r0, [pc, #100]	@ (801024c <tcpip_inpkt+0x84>)
 80101e8:	f00c fa32 	bl	801c650 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80101ec:	2009      	movs	r0, #9
 80101ee:	f000 fdc5 	bl	8010d7c <memp_malloc>
 80101f2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d102      	bne.n	8010200 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80101fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80101fe:	e01a      	b.n	8010236 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	2200      	movs	r2, #0
 8010204:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	68fa      	ldr	r2, [r7, #12]
 801020a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010218:	6979      	ldr	r1, [r7, #20]
 801021a:	4809      	ldr	r0, [pc, #36]	@ (8010240 <tcpip_inpkt+0x78>)
 801021c:	f00b fe4e 	bl	801bebc <sys_mbox_trypost>
 8010220:	4603      	mov	r3, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	d006      	beq.n	8010234 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010226:	6979      	ldr	r1, [r7, #20]
 8010228:	2009      	movs	r0, #9
 801022a:	f000 fe1d 	bl	8010e68 <memp_free>
    return ERR_MEM;
 801022e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010232:	e000      	b.n	8010236 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010234:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010236:	4618      	mov	r0, r3
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
 801023e:	bf00      	nop
 8010240:	2001f654 	.word	0x2001f654
 8010244:	0801e358 	.word	0x0801e358
 8010248:	0801e3d0 	.word	0x0801e3d0
 801024c:	0801e3a8 	.word	0x0801e3a8

08010250 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010260:	f003 0318 	and.w	r3, r3, #24
 8010264:	2b00      	cmp	r3, #0
 8010266:	d006      	beq.n	8010276 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010268:	4a08      	ldr	r2, [pc, #32]	@ (801028c <tcpip_input+0x3c>)
 801026a:	6839      	ldr	r1, [r7, #0]
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7ff ffab 	bl	80101c8 <tcpip_inpkt>
 8010272:	4603      	mov	r3, r0
 8010274:	e005      	b.n	8010282 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010276:	4a06      	ldr	r2, [pc, #24]	@ (8010290 <tcpip_input+0x40>)
 8010278:	6839      	ldr	r1, [r7, #0]
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff ffa4 	bl	80101c8 <tcpip_inpkt>
 8010280:	4603      	mov	r3, r0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	0801bcb9 	.word	0x0801bcb9
 8010290:	0801abc1 	.word	0x0801abc1

08010294 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801029e:	4819      	ldr	r0, [pc, #100]	@ (8010304 <tcpip_try_callback+0x70>)
 80102a0:	f00b fe6e 	bl	801bf80 <sys_mbox_valid>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d106      	bne.n	80102b8 <tcpip_try_callback+0x24>
 80102aa:	4b17      	ldr	r3, [pc, #92]	@ (8010308 <tcpip_try_callback+0x74>)
 80102ac:	f240 125d 	movw	r2, #349	@ 0x15d
 80102b0:	4916      	ldr	r1, [pc, #88]	@ (801030c <tcpip_try_callback+0x78>)
 80102b2:	4817      	ldr	r0, [pc, #92]	@ (8010310 <tcpip_try_callback+0x7c>)
 80102b4:	f00c f9cc 	bl	801c650 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80102b8:	2008      	movs	r0, #8
 80102ba:	f000 fd5f 	bl	8010d7c <memp_malloc>
 80102be:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d102      	bne.n	80102cc <tcpip_try_callback+0x38>
    return ERR_MEM;
 80102c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80102ca:	e017      	b.n	80102fc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2201      	movs	r2, #1
 80102d0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	683a      	ldr	r2, [r7, #0]
 80102dc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80102de:	68f9      	ldr	r1, [r7, #12]
 80102e0:	4808      	ldr	r0, [pc, #32]	@ (8010304 <tcpip_try_callback+0x70>)
 80102e2:	f00b fdeb 	bl	801bebc <sys_mbox_trypost>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d006      	beq.n	80102fa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80102ec:	68f9      	ldr	r1, [r7, #12]
 80102ee:	2008      	movs	r0, #8
 80102f0:	f000 fdba 	bl	8010e68 <memp_free>
    return ERR_MEM;
 80102f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80102f8:	e000      	b.n	80102fc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80102fa:	2300      	movs	r3, #0
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3710      	adds	r7, #16
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	2001f654 	.word	0x2001f654
 8010308:	0801e358 	.word	0x0801e358
 801030c:	0801e3d0 	.word	0x0801e3d0
 8010310:	0801e3a8 	.word	0x0801e3a8

08010314 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010320:	4806      	ldr	r0, [pc, #24]	@ (801033c <tcpip_send_msg_wait_sem+0x28>)
 8010322:	f00b fefb 	bl	801c11c <sys_mutex_lock>
  fn(apimsg);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	68b8      	ldr	r0, [r7, #8]
 801032a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801032c:	4803      	ldr	r0, [pc, #12]	@ (801033c <tcpip_send_msg_wait_sem+0x28>)
 801032e:	f00b ff04 	bl	801c13a <sys_mutex_unlock>
  return ERR_OK;
 8010332:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010334:	4618      	mov	r0, r3
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	2001f658 	.word	0x2001f658

08010340 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af02      	add	r7, sp, #8
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
  lwip_init();
 801034a:	f000 f872 	bl	8010432 <lwip_init>

  tcpip_init_done = initfunc;
 801034e:	4a17      	ldr	r2, [pc, #92]	@ (80103ac <tcpip_init+0x6c>)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010354:	4a16      	ldr	r2, [pc, #88]	@ (80103b0 <tcpip_init+0x70>)
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801035a:	2106      	movs	r1, #6
 801035c:	4815      	ldr	r0, [pc, #84]	@ (80103b4 <tcpip_init+0x74>)
 801035e:	f00b fd81 	bl	801be64 <sys_mbox_new>
 8010362:	4603      	mov	r3, r0
 8010364:	2b00      	cmp	r3, #0
 8010366:	d006      	beq.n	8010376 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010368:	4b13      	ldr	r3, [pc, #76]	@ (80103b8 <tcpip_init+0x78>)
 801036a:	f240 2261 	movw	r2, #609	@ 0x261
 801036e:	4913      	ldr	r1, [pc, #76]	@ (80103bc <tcpip_init+0x7c>)
 8010370:	4813      	ldr	r0, [pc, #76]	@ (80103c0 <tcpip_init+0x80>)
 8010372:	f00c f96d 	bl	801c650 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010376:	4813      	ldr	r0, [pc, #76]	@ (80103c4 <tcpip_init+0x84>)
 8010378:	f00b feba 	bl	801c0f0 <sys_mutex_new>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d006      	beq.n	8010390 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010382:	4b0d      	ldr	r3, [pc, #52]	@ (80103b8 <tcpip_init+0x78>)
 8010384:	f240 2265 	movw	r2, #613	@ 0x265
 8010388:	490f      	ldr	r1, [pc, #60]	@ (80103c8 <tcpip_init+0x88>)
 801038a:	480d      	ldr	r0, [pc, #52]	@ (80103c0 <tcpip_init+0x80>)
 801038c:	f00c f960 	bl	801c650 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010390:	2318      	movs	r3, #24
 8010392:	9300      	str	r3, [sp, #0]
 8010394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010398:	2200      	movs	r2, #0
 801039a:	490c      	ldr	r1, [pc, #48]	@ (80103cc <tcpip_init+0x8c>)
 801039c:	480c      	ldr	r0, [pc, #48]	@ (80103d0 <tcpip_init+0x90>)
 801039e:	f00b fed9 	bl	801c154 <sys_thread_new>
}
 80103a2:	bf00      	nop
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	2001f64c 	.word	0x2001f64c
 80103b0:	2001f650 	.word	0x2001f650
 80103b4:	2001f654 	.word	0x2001f654
 80103b8:	0801e358 	.word	0x0801e358
 80103bc:	0801e3e0 	.word	0x0801e3e0
 80103c0:	0801e3a8 	.word	0x0801e3a8
 80103c4:	2001f658 	.word	0x2001f658
 80103c8:	0801e404 	.word	0x0801e404
 80103cc:	080100d1 	.word	0x080100d1
 80103d0:	0801e428 	.word	0x0801e428

080103d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	4603      	mov	r3, r0
 80103dc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80103de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80103e2:	021b      	lsls	r3, r3, #8
 80103e4:	b21a      	sxth	r2, r3
 80103e6:	88fb      	ldrh	r3, [r7, #6]
 80103e8:	0a1b      	lsrs	r3, r3, #8
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	b21b      	sxth	r3, r3
 80103ee:	4313      	orrs	r3, r2
 80103f0:	b21b      	sxth	r3, r3
 80103f2:	b29b      	uxth	r3, r3
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	370c      	adds	r7, #12
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr

08010400 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010400:	b480      	push	{r7}
 8010402:	b083      	sub	sp, #12
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	061a      	lsls	r2, r3, #24
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	021b      	lsls	r3, r3, #8
 8010410:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010414:	431a      	orrs	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	0a1b      	lsrs	r3, r3, #8
 801041a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801041e:	431a      	orrs	r2, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	0e1b      	lsrs	r3, r3, #24
 8010424:	4313      	orrs	r3, r2
}
 8010426:	4618      	mov	r0, r3
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr

08010432 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b082      	sub	sp, #8
 8010436:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801043c:	f00b fe4c 	bl	801c0d8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010440:	f000 f8d4 	bl	80105ec <mem_init>
  memp_init();
 8010444:	f000 fc2c 	bl	8010ca0 <memp_init>
  pbuf_init();
  netif_init();
 8010448:	f000 fd38 	bl	8010ebc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801044c:	f008 fa0e 	bl	801886c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010450:	f001 ff4e 	bl	80122f0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010454:	f008 f950 	bl	80186f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010458:	bf00      	nop
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	4603      	mov	r3, r0
 8010468:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801046a:	4b05      	ldr	r3, [pc, #20]	@ (8010480 <ptr_to_mem+0x20>)
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	88fb      	ldrh	r3, [r7, #6]
 8010470:	4413      	add	r3, r2
}
 8010472:	4618      	mov	r0, r3
 8010474:	370c      	adds	r7, #12
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop
 8010480:	2001f674 	.word	0x2001f674

08010484 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010484:	b480      	push	{r7}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801048c:	4b05      	ldr	r3, [pc, #20]	@ (80104a4 <mem_to_ptr+0x20>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	b29b      	uxth	r3, r3
}
 8010496:	4618      	mov	r0, r3
 8010498:	370c      	adds	r7, #12
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	2001f674 	.word	0x2001f674

080104a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80104a8:	b590      	push	{r4, r7, lr}
 80104aa:	b085      	sub	sp, #20
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80104b0:	4b45      	ldr	r3, [pc, #276]	@ (80105c8 <plug_holes+0x120>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d206      	bcs.n	80104c8 <plug_holes+0x20>
 80104ba:	4b44      	ldr	r3, [pc, #272]	@ (80105cc <plug_holes+0x124>)
 80104bc:	f240 12df 	movw	r2, #479	@ 0x1df
 80104c0:	4943      	ldr	r1, [pc, #268]	@ (80105d0 <plug_holes+0x128>)
 80104c2:	4844      	ldr	r0, [pc, #272]	@ (80105d4 <plug_holes+0x12c>)
 80104c4:	f00c f8c4 	bl	801c650 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80104c8:	4b43      	ldr	r3, [pc, #268]	@ (80105d8 <plug_holes+0x130>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d306      	bcc.n	80104e0 <plug_holes+0x38>
 80104d2:	4b3e      	ldr	r3, [pc, #248]	@ (80105cc <plug_holes+0x124>)
 80104d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80104d8:	4940      	ldr	r1, [pc, #256]	@ (80105dc <plug_holes+0x134>)
 80104da:	483e      	ldr	r0, [pc, #248]	@ (80105d4 <plug_holes+0x12c>)
 80104dc:	f00c f8b8 	bl	801c650 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	791b      	ldrb	r3, [r3, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d006      	beq.n	80104f6 <plug_holes+0x4e>
 80104e8:	4b38      	ldr	r3, [pc, #224]	@ (80105cc <plug_holes+0x124>)
 80104ea:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80104ee:	493c      	ldr	r1, [pc, #240]	@ (80105e0 <plug_holes+0x138>)
 80104f0:	4838      	ldr	r0, [pc, #224]	@ (80105d4 <plug_holes+0x12c>)
 80104f2:	f00c f8ad 	bl	801c650 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	881b      	ldrh	r3, [r3, #0]
 80104fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80104fe:	d906      	bls.n	801050e <plug_holes+0x66>
 8010500:	4b32      	ldr	r3, [pc, #200]	@ (80105cc <plug_holes+0x124>)
 8010502:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010506:	4937      	ldr	r1, [pc, #220]	@ (80105e4 <plug_holes+0x13c>)
 8010508:	4832      	ldr	r0, [pc, #200]	@ (80105d4 <plug_holes+0x12c>)
 801050a:	f00c f8a1 	bl	801c650 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	881b      	ldrh	r3, [r3, #0]
 8010512:	4618      	mov	r0, r3
 8010514:	f7ff ffa4 	bl	8010460 <ptr_to_mem>
 8010518:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801051a:	687a      	ldr	r2, [r7, #4]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	429a      	cmp	r2, r3
 8010520:	d024      	beq.n	801056c <plug_holes+0xc4>
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	791b      	ldrb	r3, [r3, #4]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d120      	bne.n	801056c <plug_holes+0xc4>
 801052a:	4b2b      	ldr	r3, [pc, #172]	@ (80105d8 <plug_holes+0x130>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	429a      	cmp	r2, r3
 8010532:	d01b      	beq.n	801056c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010534:	4b2c      	ldr	r3, [pc, #176]	@ (80105e8 <plug_holes+0x140>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	429a      	cmp	r2, r3
 801053c:	d102      	bne.n	8010544 <plug_holes+0x9c>
      lfree = mem;
 801053e:	4a2a      	ldr	r2, [pc, #168]	@ (80105e8 <plug_holes+0x140>)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	881a      	ldrh	r2, [r3, #0]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	881b      	ldrh	r3, [r3, #0]
 8010550:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010554:	d00a      	beq.n	801056c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	4618      	mov	r0, r3
 801055c:	f7ff ff80 	bl	8010460 <ptr_to_mem>
 8010560:	4604      	mov	r4, r0
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7ff ff8e 	bl	8010484 <mem_to_ptr>
 8010568:	4603      	mov	r3, r0
 801056a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	885b      	ldrh	r3, [r3, #2]
 8010570:	4618      	mov	r0, r3
 8010572:	f7ff ff75 	bl	8010460 <ptr_to_mem>
 8010576:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010578:	68ba      	ldr	r2, [r7, #8]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	429a      	cmp	r2, r3
 801057e:	d01f      	beq.n	80105c0 <plug_holes+0x118>
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	791b      	ldrb	r3, [r3, #4]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d11b      	bne.n	80105c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010588:	4b17      	ldr	r3, [pc, #92]	@ (80105e8 <plug_holes+0x140>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	429a      	cmp	r2, r3
 8010590:	d102      	bne.n	8010598 <plug_holes+0xf0>
      lfree = pmem;
 8010592:	4a15      	ldr	r2, [pc, #84]	@ (80105e8 <plug_holes+0x140>)
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	881a      	ldrh	r2, [r3, #0]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	881b      	ldrh	r3, [r3, #0]
 80105a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80105a8:	d00a      	beq.n	80105c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	881b      	ldrh	r3, [r3, #0]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7ff ff56 	bl	8010460 <ptr_to_mem>
 80105b4:	4604      	mov	r4, r0
 80105b6:	68b8      	ldr	r0, [r7, #8]
 80105b8:	f7ff ff64 	bl	8010484 <mem_to_ptr>
 80105bc:	4603      	mov	r3, r0
 80105be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80105c0:	bf00      	nop
 80105c2:	3714      	adds	r7, #20
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd90      	pop	{r4, r7, pc}
 80105c8:	2001f674 	.word	0x2001f674
 80105cc:	0801e438 	.word	0x0801e438
 80105d0:	0801e468 	.word	0x0801e468
 80105d4:	0801e480 	.word	0x0801e480
 80105d8:	2001f678 	.word	0x2001f678
 80105dc:	0801e4a8 	.word	0x0801e4a8
 80105e0:	0801e4c4 	.word	0x0801e4c4
 80105e4:	0801e4e0 	.word	0x0801e4e0
 80105e8:	2001f680 	.word	0x2001f680

080105ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80105f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010668 <mem_init+0x7c>)
 80105f4:	4a1d      	ldr	r2, [pc, #116]	@ (801066c <mem_init+0x80>)
 80105f6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80105f8:	4b1b      	ldr	r3, [pc, #108]	@ (8010668 <mem_init+0x7c>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8010604:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2200      	movs	r2, #0
 801060a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2200      	movs	r2, #0
 8010610:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010612:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 8010616:	f7ff ff23 	bl	8010460 <ptr_to_mem>
 801061a:	4603      	mov	r3, r0
 801061c:	4a14      	ldr	r2, [pc, #80]	@ (8010670 <mem_init+0x84>)
 801061e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010620:	4b13      	ldr	r3, [pc, #76]	@ (8010670 <mem_init+0x84>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2201      	movs	r2, #1
 8010626:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010628:	4b11      	ldr	r3, [pc, #68]	@ (8010670 <mem_init+0x84>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8010630:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010632:	4b0f      	ldr	r3, [pc, #60]	@ (8010670 <mem_init+0x84>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 801063a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801063c:	4b0a      	ldr	r3, [pc, #40]	@ (8010668 <mem_init+0x7c>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4a0c      	ldr	r2, [pc, #48]	@ (8010674 <mem_init+0x88>)
 8010642:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010644:	480c      	ldr	r0, [pc, #48]	@ (8010678 <mem_init+0x8c>)
 8010646:	f00b fd53 	bl	801c0f0 <sys_mutex_new>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d006      	beq.n	801065e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010650:	4b0a      	ldr	r3, [pc, #40]	@ (801067c <mem_init+0x90>)
 8010652:	f240 221f 	movw	r2, #543	@ 0x21f
 8010656:	490a      	ldr	r1, [pc, #40]	@ (8010680 <mem_init+0x94>)
 8010658:	480a      	ldr	r0, [pc, #40]	@ (8010684 <mem_init+0x98>)
 801065a:	f00b fff9 	bl	801c650 <iprintf>
  }
}
 801065e:	bf00      	nop
 8010660:	3708      	adds	r7, #8
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	2001f674 	.word	0x2001f674
 801066c:	20048000 	.word	0x20048000
 8010670:	2001f678 	.word	0x2001f678
 8010674:	2001f680 	.word	0x2001f680
 8010678:	2001f67c 	.word	0x2001f67c
 801067c:	0801e438 	.word	0x0801e438
 8010680:	0801e50c 	.word	0x0801e50c
 8010684:	0801e480 	.word	0x0801e480

08010688 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b086      	sub	sp, #24
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f7ff fef7 	bl	8010484 <mem_to_ptr>
 8010696:	4603      	mov	r3, r0
 8010698:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	881b      	ldrh	r3, [r3, #0]
 801069e:	4618      	mov	r0, r3
 80106a0:	f7ff fede 	bl	8010460 <ptr_to_mem>
 80106a4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	885b      	ldrh	r3, [r3, #2]
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7ff fed8 	bl	8010460 <ptr_to_mem>
 80106b0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	881b      	ldrh	r3, [r3, #0]
 80106b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80106ba:	d818      	bhi.n	80106ee <mem_link_valid+0x66>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	885b      	ldrh	r3, [r3, #2]
 80106c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80106c4:	d813      	bhi.n	80106ee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80106ca:	8afa      	ldrh	r2, [r7, #22]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d004      	beq.n	80106da <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	8afa      	ldrh	r2, [r7, #22]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d109      	bne.n	80106ee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80106da:	4b08      	ldr	r3, [pc, #32]	@ (80106fc <mem_link_valid+0x74>)
 80106dc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80106de:	693a      	ldr	r2, [r7, #16]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d006      	beq.n	80106f2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	885b      	ldrh	r3, [r3, #2]
 80106e8:	8afa      	ldrh	r2, [r7, #22]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d001      	beq.n	80106f2 <mem_link_valid+0x6a>
    return 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	e000      	b.n	80106f4 <mem_link_valid+0x6c>
  }
  return 1;
 80106f2:	2301      	movs	r3, #1
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3718      	adds	r7, #24
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	2001f678 	.word	0x2001f678

08010700 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b088      	sub	sp, #32
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d070      	beq.n	80107f0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f003 0303 	and.w	r3, r3, #3
 8010714:	2b00      	cmp	r3, #0
 8010716:	d00d      	beq.n	8010734 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010718:	4b37      	ldr	r3, [pc, #220]	@ (80107f8 <mem_free+0xf8>)
 801071a:	f240 2273 	movw	r2, #627	@ 0x273
 801071e:	4937      	ldr	r1, [pc, #220]	@ (80107fc <mem_free+0xfc>)
 8010720:	4837      	ldr	r0, [pc, #220]	@ (8010800 <mem_free+0x100>)
 8010722:	f00b ff95 	bl	801c650 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010726:	f00b fd35 	bl	801c194 <sys_arch_protect>
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f00b fd3f 	bl	801c1b0 <sys_arch_unprotect>
    return;
 8010732:	e05e      	b.n	80107f2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	3b08      	subs	r3, #8
 8010738:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801073a:	4b32      	ldr	r3, [pc, #200]	@ (8010804 <mem_free+0x104>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	69fa      	ldr	r2, [r7, #28]
 8010740:	429a      	cmp	r2, r3
 8010742:	d306      	bcc.n	8010752 <mem_free+0x52>
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f103 020c 	add.w	r2, r3, #12
 801074a:	4b2f      	ldr	r3, [pc, #188]	@ (8010808 <mem_free+0x108>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	429a      	cmp	r2, r3
 8010750:	d90d      	bls.n	801076e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010752:	4b29      	ldr	r3, [pc, #164]	@ (80107f8 <mem_free+0xf8>)
 8010754:	f240 227f 	movw	r2, #639	@ 0x27f
 8010758:	492c      	ldr	r1, [pc, #176]	@ (801080c <mem_free+0x10c>)
 801075a:	4829      	ldr	r0, [pc, #164]	@ (8010800 <mem_free+0x100>)
 801075c:	f00b ff78 	bl	801c650 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010760:	f00b fd18 	bl	801c194 <sys_arch_protect>
 8010764:	6138      	str	r0, [r7, #16]
 8010766:	6938      	ldr	r0, [r7, #16]
 8010768:	f00b fd22 	bl	801c1b0 <sys_arch_unprotect>
    return;
 801076c:	e041      	b.n	80107f2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801076e:	4828      	ldr	r0, [pc, #160]	@ (8010810 <mem_free+0x110>)
 8010770:	f00b fcd4 	bl	801c11c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	791b      	ldrb	r3, [r3, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d110      	bne.n	801079e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801077c:	4b1e      	ldr	r3, [pc, #120]	@ (80107f8 <mem_free+0xf8>)
 801077e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8010782:	4924      	ldr	r1, [pc, #144]	@ (8010814 <mem_free+0x114>)
 8010784:	481e      	ldr	r0, [pc, #120]	@ (8010800 <mem_free+0x100>)
 8010786:	f00b ff63 	bl	801c650 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801078a:	4821      	ldr	r0, [pc, #132]	@ (8010810 <mem_free+0x110>)
 801078c:	f00b fcd5 	bl	801c13a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010790:	f00b fd00 	bl	801c194 <sys_arch_protect>
 8010794:	6178      	str	r0, [r7, #20]
 8010796:	6978      	ldr	r0, [r7, #20]
 8010798:	f00b fd0a 	bl	801c1b0 <sys_arch_unprotect>
    return;
 801079c:	e029      	b.n	80107f2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801079e:	69f8      	ldr	r0, [r7, #28]
 80107a0:	f7ff ff72 	bl	8010688 <mem_link_valid>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d110      	bne.n	80107cc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80107aa:	4b13      	ldr	r3, [pc, #76]	@ (80107f8 <mem_free+0xf8>)
 80107ac:	f240 2295 	movw	r2, #661	@ 0x295
 80107b0:	4919      	ldr	r1, [pc, #100]	@ (8010818 <mem_free+0x118>)
 80107b2:	4813      	ldr	r0, [pc, #76]	@ (8010800 <mem_free+0x100>)
 80107b4:	f00b ff4c 	bl	801c650 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80107b8:	4815      	ldr	r0, [pc, #84]	@ (8010810 <mem_free+0x110>)
 80107ba:	f00b fcbe 	bl	801c13a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80107be:	f00b fce9 	bl	801c194 <sys_arch_protect>
 80107c2:	61b8      	str	r0, [r7, #24]
 80107c4:	69b8      	ldr	r0, [r7, #24]
 80107c6:	f00b fcf3 	bl	801c1b0 <sys_arch_unprotect>
    return;
 80107ca:	e012      	b.n	80107f2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	2200      	movs	r2, #0
 80107d0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80107d2:	4b12      	ldr	r3, [pc, #72]	@ (801081c <mem_free+0x11c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	69fa      	ldr	r2, [r7, #28]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d202      	bcs.n	80107e2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80107dc:	4a0f      	ldr	r2, [pc, #60]	@ (801081c <mem_free+0x11c>)
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80107e2:	69f8      	ldr	r0, [r7, #28]
 80107e4:	f7ff fe60 	bl	80104a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80107e8:	4809      	ldr	r0, [pc, #36]	@ (8010810 <mem_free+0x110>)
 80107ea:	f00b fca6 	bl	801c13a <sys_mutex_unlock>
 80107ee:	e000      	b.n	80107f2 <mem_free+0xf2>
    return;
 80107f0:	bf00      	nop
}
 80107f2:	3720      	adds	r7, #32
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	0801e438 	.word	0x0801e438
 80107fc:	0801e528 	.word	0x0801e528
 8010800:	0801e480 	.word	0x0801e480
 8010804:	2001f674 	.word	0x2001f674
 8010808:	2001f678 	.word	0x2001f678
 801080c:	0801e54c 	.word	0x0801e54c
 8010810:	2001f67c 	.word	0x2001f67c
 8010814:	0801e568 	.word	0x0801e568
 8010818:	0801e590 	.word	0x0801e590
 801081c:	2001f680 	.word	0x2001f680

08010820 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b088      	sub	sp, #32
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	460b      	mov	r3, r1
 801082a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801082c:	887b      	ldrh	r3, [r7, #2]
 801082e:	3303      	adds	r3, #3
 8010830:	b29b      	uxth	r3, r3
 8010832:	f023 0303 	bic.w	r3, r3, #3
 8010836:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010838:	8bfb      	ldrh	r3, [r7, #30]
 801083a:	2b0b      	cmp	r3, #11
 801083c:	d801      	bhi.n	8010842 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801083e:	230c      	movs	r3, #12
 8010840:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010842:	8bfb      	ldrh	r3, [r7, #30]
 8010844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010848:	d803      	bhi.n	8010852 <mem_trim+0x32>
 801084a:	8bfa      	ldrh	r2, [r7, #30]
 801084c:	887b      	ldrh	r3, [r7, #2]
 801084e:	429a      	cmp	r2, r3
 8010850:	d201      	bcs.n	8010856 <mem_trim+0x36>
    return NULL;
 8010852:	2300      	movs	r3, #0
 8010854:	e0d8      	b.n	8010a08 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010856:	4b6e      	ldr	r3, [pc, #440]	@ (8010a10 <mem_trim+0x1f0>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	429a      	cmp	r2, r3
 801085e:	d304      	bcc.n	801086a <mem_trim+0x4a>
 8010860:	4b6c      	ldr	r3, [pc, #432]	@ (8010a14 <mem_trim+0x1f4>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	429a      	cmp	r2, r3
 8010868:	d306      	bcc.n	8010878 <mem_trim+0x58>
 801086a:	4b6b      	ldr	r3, [pc, #428]	@ (8010a18 <mem_trim+0x1f8>)
 801086c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010870:	496a      	ldr	r1, [pc, #424]	@ (8010a1c <mem_trim+0x1fc>)
 8010872:	486b      	ldr	r0, [pc, #428]	@ (8010a20 <mem_trim+0x200>)
 8010874:	f00b feec 	bl	801c650 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010878:	4b65      	ldr	r3, [pc, #404]	@ (8010a10 <mem_trim+0x1f0>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	429a      	cmp	r2, r3
 8010880:	d304      	bcc.n	801088c <mem_trim+0x6c>
 8010882:	4b64      	ldr	r3, [pc, #400]	@ (8010a14 <mem_trim+0x1f4>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	429a      	cmp	r2, r3
 801088a:	d307      	bcc.n	801089c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801088c:	f00b fc82 	bl	801c194 <sys_arch_protect>
 8010890:	60b8      	str	r0, [r7, #8]
 8010892:	68b8      	ldr	r0, [r7, #8]
 8010894:	f00b fc8c 	bl	801c1b0 <sys_arch_unprotect>
    return rmem;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	e0b5      	b.n	8010a08 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	3b08      	subs	r3, #8
 80108a0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80108a2:	69b8      	ldr	r0, [r7, #24]
 80108a4:	f7ff fdee 	bl	8010484 <mem_to_ptr>
 80108a8:	4603      	mov	r3, r0
 80108aa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	881a      	ldrh	r2, [r3, #0]
 80108b0:	8afb      	ldrh	r3, [r7, #22]
 80108b2:	1ad3      	subs	r3, r2, r3
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	3b08      	subs	r3, #8
 80108b8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80108ba:	8bfa      	ldrh	r2, [r7, #30]
 80108bc:	8abb      	ldrh	r3, [r7, #20]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d906      	bls.n	80108d0 <mem_trim+0xb0>
 80108c2:	4b55      	ldr	r3, [pc, #340]	@ (8010a18 <mem_trim+0x1f8>)
 80108c4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80108c8:	4956      	ldr	r1, [pc, #344]	@ (8010a24 <mem_trim+0x204>)
 80108ca:	4855      	ldr	r0, [pc, #340]	@ (8010a20 <mem_trim+0x200>)
 80108cc:	f00b fec0 	bl	801c650 <iprintf>
  if (newsize > size) {
 80108d0:	8bfa      	ldrh	r2, [r7, #30]
 80108d2:	8abb      	ldrh	r3, [r7, #20]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d901      	bls.n	80108dc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80108d8:	2300      	movs	r3, #0
 80108da:	e095      	b.n	8010a08 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80108dc:	8bfa      	ldrh	r2, [r7, #30]
 80108de:	8abb      	ldrh	r3, [r7, #20]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d101      	bne.n	80108e8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	e08f      	b.n	8010a08 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80108e8:	484f      	ldr	r0, [pc, #316]	@ (8010a28 <mem_trim+0x208>)
 80108ea:	f00b fc17 	bl	801c11c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7ff fdb4 	bl	8010460 <ptr_to_mem>
 80108f8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	791b      	ldrb	r3, [r3, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d13f      	bne.n	8010982 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	881b      	ldrh	r3, [r3, #0]
 8010906:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801090a:	d106      	bne.n	801091a <mem_trim+0xfa>
 801090c:	4b42      	ldr	r3, [pc, #264]	@ (8010a18 <mem_trim+0x1f8>)
 801090e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8010912:	4946      	ldr	r1, [pc, #280]	@ (8010a2c <mem_trim+0x20c>)
 8010914:	4842      	ldr	r0, [pc, #264]	@ (8010a20 <mem_trim+0x200>)
 8010916:	f00b fe9b 	bl	801c650 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	881b      	ldrh	r3, [r3, #0]
 801091e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010920:	8afa      	ldrh	r2, [r7, #22]
 8010922:	8bfb      	ldrh	r3, [r7, #30]
 8010924:	4413      	add	r3, r2
 8010926:	b29b      	uxth	r3, r3
 8010928:	3308      	adds	r3, #8
 801092a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801092c:	4b40      	ldr	r3, [pc, #256]	@ (8010a30 <mem_trim+0x210>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	693a      	ldr	r2, [r7, #16]
 8010932:	429a      	cmp	r2, r3
 8010934:	d106      	bne.n	8010944 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010936:	89fb      	ldrh	r3, [r7, #14]
 8010938:	4618      	mov	r0, r3
 801093a:	f7ff fd91 	bl	8010460 <ptr_to_mem>
 801093e:	4603      	mov	r3, r0
 8010940:	4a3b      	ldr	r2, [pc, #236]	@ (8010a30 <mem_trim+0x210>)
 8010942:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010944:	89fb      	ldrh	r3, [r7, #14]
 8010946:	4618      	mov	r0, r3
 8010948:	f7ff fd8a 	bl	8010460 <ptr_to_mem>
 801094c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	2200      	movs	r2, #0
 8010952:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	89ba      	ldrh	r2, [r7, #12]
 8010958:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	8afa      	ldrh	r2, [r7, #22]
 801095e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	89fa      	ldrh	r2, [r7, #14]
 8010964:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	881b      	ldrh	r3, [r3, #0]
 801096a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801096e:	d047      	beq.n	8010a00 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	881b      	ldrh	r3, [r3, #0]
 8010974:	4618      	mov	r0, r3
 8010976:	f7ff fd73 	bl	8010460 <ptr_to_mem>
 801097a:	4602      	mov	r2, r0
 801097c:	89fb      	ldrh	r3, [r7, #14]
 801097e:	8053      	strh	r3, [r2, #2]
 8010980:	e03e      	b.n	8010a00 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010982:	8bfb      	ldrh	r3, [r7, #30]
 8010984:	f103 0214 	add.w	r2, r3, #20
 8010988:	8abb      	ldrh	r3, [r7, #20]
 801098a:	429a      	cmp	r2, r3
 801098c:	d838      	bhi.n	8010a00 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801098e:	8afa      	ldrh	r2, [r7, #22]
 8010990:	8bfb      	ldrh	r3, [r7, #30]
 8010992:	4413      	add	r3, r2
 8010994:	b29b      	uxth	r3, r3
 8010996:	3308      	adds	r3, #8
 8010998:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	881b      	ldrh	r3, [r3, #0]
 801099e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80109a2:	d106      	bne.n	80109b2 <mem_trim+0x192>
 80109a4:	4b1c      	ldr	r3, [pc, #112]	@ (8010a18 <mem_trim+0x1f8>)
 80109a6:	f240 3216 	movw	r2, #790	@ 0x316
 80109aa:	4920      	ldr	r1, [pc, #128]	@ (8010a2c <mem_trim+0x20c>)
 80109ac:	481c      	ldr	r0, [pc, #112]	@ (8010a20 <mem_trim+0x200>)
 80109ae:	f00b fe4f 	bl	801c650 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80109b2:	89fb      	ldrh	r3, [r7, #14]
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7ff fd53 	bl	8010460 <ptr_to_mem>
 80109ba:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80109bc:	4b1c      	ldr	r3, [pc, #112]	@ (8010a30 <mem_trim+0x210>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	693a      	ldr	r2, [r7, #16]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d202      	bcs.n	80109cc <mem_trim+0x1ac>
      lfree = mem2;
 80109c6:	4a1a      	ldr	r2, [pc, #104]	@ (8010a30 <mem_trim+0x210>)
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	2200      	movs	r2, #0
 80109d0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80109d2:	69bb      	ldr	r3, [r7, #24]
 80109d4:	881a      	ldrh	r2, [r3, #0]
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	8afa      	ldrh	r2, [r7, #22]
 80109de:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	89fa      	ldrh	r2, [r7, #14]
 80109e4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	881b      	ldrh	r3, [r3, #0]
 80109ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80109ee:	d007      	beq.n	8010a00 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7ff fd33 	bl	8010460 <ptr_to_mem>
 80109fa:	4602      	mov	r2, r0
 80109fc:	89fb      	ldrh	r3, [r7, #14]
 80109fe:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010a00:	4809      	ldr	r0, [pc, #36]	@ (8010a28 <mem_trim+0x208>)
 8010a02:	f00b fb9a 	bl	801c13a <sys_mutex_unlock>
  return rmem;
 8010a06:	687b      	ldr	r3, [r7, #4]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3720      	adds	r7, #32
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	2001f674 	.word	0x2001f674
 8010a14:	2001f678 	.word	0x2001f678
 8010a18:	0801e438 	.word	0x0801e438
 8010a1c:	0801e5c4 	.word	0x0801e5c4
 8010a20:	0801e480 	.word	0x0801e480
 8010a24:	0801e5dc 	.word	0x0801e5dc
 8010a28:	2001f67c 	.word	0x2001f67c
 8010a2c:	0801e5fc 	.word	0x0801e5fc
 8010a30:	2001f680 	.word	0x2001f680

08010a34 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b088      	sub	sp, #32
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010a3e:	88fb      	ldrh	r3, [r7, #6]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d101      	bne.n	8010a48 <mem_malloc+0x14>
    return NULL;
 8010a44:	2300      	movs	r3, #0
 8010a46:	e0e2      	b.n	8010c0e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010a48:	88fb      	ldrh	r3, [r7, #6]
 8010a4a:	3303      	adds	r3, #3
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	f023 0303 	bic.w	r3, r3, #3
 8010a52:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010a54:	8bbb      	ldrh	r3, [r7, #28]
 8010a56:	2b0b      	cmp	r3, #11
 8010a58:	d801      	bhi.n	8010a5e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010a5a:	230c      	movs	r3, #12
 8010a5c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010a5e:	8bbb      	ldrh	r3, [r7, #28]
 8010a60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010a64:	d803      	bhi.n	8010a6e <mem_malloc+0x3a>
 8010a66:	8bba      	ldrh	r2, [r7, #28]
 8010a68:	88fb      	ldrh	r3, [r7, #6]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d201      	bcs.n	8010a72 <mem_malloc+0x3e>
    return NULL;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	e0cd      	b.n	8010c0e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010a72:	4869      	ldr	r0, [pc, #420]	@ (8010c18 <mem_malloc+0x1e4>)
 8010a74:	f00b fb52 	bl	801c11c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010a78:	4b68      	ldr	r3, [pc, #416]	@ (8010c1c <mem_malloc+0x1e8>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7ff fd01 	bl	8010484 <mem_to_ptr>
 8010a82:	4603      	mov	r3, r0
 8010a84:	83fb      	strh	r3, [r7, #30]
 8010a86:	e0b7      	b.n	8010bf8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010a88:	8bfb      	ldrh	r3, [r7, #30]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff fce8 	bl	8010460 <ptr_to_mem>
 8010a90:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	791b      	ldrb	r3, [r3, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	f040 80a7 	bne.w	8010bea <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	881b      	ldrh	r3, [r3, #0]
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	8bfb      	ldrh	r3, [r7, #30]
 8010aa4:	1ad3      	subs	r3, r2, r3
 8010aa6:	f1a3 0208 	sub.w	r2, r3, #8
 8010aaa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010aac:	429a      	cmp	r2, r3
 8010aae:	f0c0 809c 	bcc.w	8010bea <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	881b      	ldrh	r3, [r3, #0]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	8bfb      	ldrh	r3, [r7, #30]
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	f1a3 0208 	sub.w	r2, r3, #8
 8010ac0:	8bbb      	ldrh	r3, [r7, #28]
 8010ac2:	3314      	adds	r3, #20
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d333      	bcc.n	8010b30 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010ac8:	8bfa      	ldrh	r2, [r7, #30]
 8010aca:	8bbb      	ldrh	r3, [r7, #28]
 8010acc:	4413      	add	r3, r2
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	3308      	adds	r3, #8
 8010ad2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010ad4:	8a7b      	ldrh	r3, [r7, #18]
 8010ad6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010ada:	d106      	bne.n	8010aea <mem_malloc+0xb6>
 8010adc:	4b50      	ldr	r3, [pc, #320]	@ (8010c20 <mem_malloc+0x1ec>)
 8010ade:	f240 3287 	movw	r2, #903	@ 0x387
 8010ae2:	4950      	ldr	r1, [pc, #320]	@ (8010c24 <mem_malloc+0x1f0>)
 8010ae4:	4850      	ldr	r0, [pc, #320]	@ (8010c28 <mem_malloc+0x1f4>)
 8010ae6:	f00b fdb3 	bl	801c650 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010aea:	8a7b      	ldrh	r3, [r7, #18]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ff fcb7 	bl	8010460 <ptr_to_mem>
 8010af2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	881a      	ldrh	r2, [r3, #0]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	8bfa      	ldrh	r2, [r7, #30]
 8010b06:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	8a7a      	ldrh	r2, [r7, #18]
 8010b0c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	2201      	movs	r2, #1
 8010b12:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010b1c:	d00b      	beq.n	8010b36 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	881b      	ldrh	r3, [r3, #0]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7ff fc9c 	bl	8010460 <ptr_to_mem>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	8a7b      	ldrh	r3, [r7, #18]
 8010b2c:	8053      	strh	r3, [r2, #2]
 8010b2e:	e002      	b.n	8010b36 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	2201      	movs	r2, #1
 8010b34:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010b36:	4b39      	ldr	r3, [pc, #228]	@ (8010c1c <mem_malloc+0x1e8>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	697a      	ldr	r2, [r7, #20]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d127      	bne.n	8010b90 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010b40:	4b36      	ldr	r3, [pc, #216]	@ (8010c1c <mem_malloc+0x1e8>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010b46:	e005      	b.n	8010b54 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	881b      	ldrh	r3, [r3, #0]
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7ff fc87 	bl	8010460 <ptr_to_mem>
 8010b52:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	791b      	ldrb	r3, [r3, #4]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d004      	beq.n	8010b66 <mem_malloc+0x132>
 8010b5c:	4b33      	ldr	r3, [pc, #204]	@ (8010c2c <mem_malloc+0x1f8>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	69ba      	ldr	r2, [r7, #24]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d1f0      	bne.n	8010b48 <mem_malloc+0x114>
          }
          lfree = cur;
 8010b66:	4a2d      	ldr	r2, [pc, #180]	@ (8010c1c <mem_malloc+0x1e8>)
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8010c1c <mem_malloc+0x1e8>)
 8010b6e:	681a      	ldr	r2, [r3, #0]
 8010b70:	4b2e      	ldr	r3, [pc, #184]	@ (8010c2c <mem_malloc+0x1f8>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d00b      	beq.n	8010b90 <mem_malloc+0x15c>
 8010b78:	4b28      	ldr	r3, [pc, #160]	@ (8010c1c <mem_malloc+0x1e8>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	791b      	ldrb	r3, [r3, #4]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d006      	beq.n	8010b90 <mem_malloc+0x15c>
 8010b82:	4b27      	ldr	r3, [pc, #156]	@ (8010c20 <mem_malloc+0x1ec>)
 8010b84:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8010b88:	4929      	ldr	r1, [pc, #164]	@ (8010c30 <mem_malloc+0x1fc>)
 8010b8a:	4827      	ldr	r0, [pc, #156]	@ (8010c28 <mem_malloc+0x1f4>)
 8010b8c:	f00b fd60 	bl	801c650 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010b90:	4821      	ldr	r0, [pc, #132]	@ (8010c18 <mem_malloc+0x1e4>)
 8010b92:	f00b fad2 	bl	801c13a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010b96:	8bba      	ldrh	r2, [r7, #28]
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	3308      	adds	r3, #8
 8010b9e:	4a23      	ldr	r2, [pc, #140]	@ (8010c2c <mem_malloc+0x1f8>)
 8010ba0:	6812      	ldr	r2, [r2, #0]
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	d906      	bls.n	8010bb4 <mem_malloc+0x180>
 8010ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8010c20 <mem_malloc+0x1ec>)
 8010ba8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8010bac:	4921      	ldr	r1, [pc, #132]	@ (8010c34 <mem_malloc+0x200>)
 8010bae:	481e      	ldr	r0, [pc, #120]	@ (8010c28 <mem_malloc+0x1f4>)
 8010bb0:	f00b fd4e 	bl	801c650 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	f003 0303 	and.w	r3, r3, #3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d006      	beq.n	8010bcc <mem_malloc+0x198>
 8010bbe:	4b18      	ldr	r3, [pc, #96]	@ (8010c20 <mem_malloc+0x1ec>)
 8010bc0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8010bc4:	491c      	ldr	r1, [pc, #112]	@ (8010c38 <mem_malloc+0x204>)
 8010bc6:	4818      	ldr	r0, [pc, #96]	@ (8010c28 <mem_malloc+0x1f4>)
 8010bc8:	f00b fd42 	bl	801c650 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	f003 0303 	and.w	r3, r3, #3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d006      	beq.n	8010be4 <mem_malloc+0x1b0>
 8010bd6:	4b12      	ldr	r3, [pc, #72]	@ (8010c20 <mem_malloc+0x1ec>)
 8010bd8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8010bdc:	4917      	ldr	r1, [pc, #92]	@ (8010c3c <mem_malloc+0x208>)
 8010bde:	4812      	ldr	r0, [pc, #72]	@ (8010c28 <mem_malloc+0x1f4>)
 8010be0:	f00b fd36 	bl	801c650 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	3308      	adds	r3, #8
 8010be8:	e011      	b.n	8010c0e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010bea:	8bfb      	ldrh	r3, [r7, #30]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff fc37 	bl	8010460 <ptr_to_mem>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	881b      	ldrh	r3, [r3, #0]
 8010bf6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010bf8:	8bfa      	ldrh	r2, [r7, #30]
 8010bfa:	8bbb      	ldrh	r3, [r7, #28]
 8010bfc:	f5c3 5340 	rsb	r3, r3, #12288	@ 0x3000
 8010c00:	429a      	cmp	r2, r3
 8010c02:	f4ff af41 	bcc.w	8010a88 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010c06:	4804      	ldr	r0, [pc, #16]	@ (8010c18 <mem_malloc+0x1e4>)
 8010c08:	f00b fa97 	bl	801c13a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3720      	adds	r7, #32
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	2001f67c 	.word	0x2001f67c
 8010c1c:	2001f680 	.word	0x2001f680
 8010c20:	0801e438 	.word	0x0801e438
 8010c24:	0801e5fc 	.word	0x0801e5fc
 8010c28:	0801e480 	.word	0x0801e480
 8010c2c:	2001f678 	.word	0x2001f678
 8010c30:	0801e610 	.word	0x0801e610
 8010c34:	0801e62c 	.word	0x0801e62c
 8010c38:	0801e65c 	.word	0x0801e65c
 8010c3c:	0801e68c 	.word	0x0801e68c

08010c40 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	3303      	adds	r3, #3
 8010c56:	f023 0303 	bic.w	r3, r3, #3
 8010c5a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	60fb      	str	r3, [r7, #12]
 8010c60:	e011      	b.n	8010c86 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	889b      	ldrh	r3, [r3, #4]
 8010c78:	461a      	mov	r2, r3
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	3301      	adds	r3, #1
 8010c84:	60fb      	str	r3, [r7, #12]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	88db      	ldrh	r3, [r3, #6]
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	dbe7      	blt.n	8010c62 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010c92:	bf00      	nop
 8010c94:	bf00      	nop
 8010c96:	3714      	adds	r7, #20
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	80fb      	strh	r3, [r7, #6]
 8010caa:	e009      	b.n	8010cc0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010cac:	88fb      	ldrh	r3, [r7, #6]
 8010cae:	4a08      	ldr	r2, [pc, #32]	@ (8010cd0 <memp_init+0x30>)
 8010cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7ff ffc3 	bl	8010c40 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010cba:	88fb      	ldrh	r3, [r7, #6]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	80fb      	strh	r3, [r7, #6]
 8010cc0:	88fb      	ldrh	r3, [r7, #6]
 8010cc2:	2b0c      	cmp	r3, #12
 8010cc4:	d9f2      	bls.n	8010cac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010cc6:	bf00      	nop
 8010cc8:	bf00      	nop
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	08021a8c 	.word	0x08021a8c

08010cd4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010cdc:	f00b fa5a 	bl	801c194 <sys_arch_protect>
 8010ce0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	68db      	ldr	r3, [r3, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d015      	beq.n	8010d1c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	68ba      	ldr	r2, [r7, #8]
 8010cf6:	6812      	ldr	r2, [r2, #0]
 8010cf8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	f003 0303 	and.w	r3, r3, #3
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d006      	beq.n	8010d12 <do_memp_malloc_pool+0x3e>
 8010d04:	4b09      	ldr	r3, [pc, #36]	@ (8010d2c <do_memp_malloc_pool+0x58>)
 8010d06:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8010d0a:	4909      	ldr	r1, [pc, #36]	@ (8010d30 <do_memp_malloc_pool+0x5c>)
 8010d0c:	4809      	ldr	r0, [pc, #36]	@ (8010d34 <do_memp_malloc_pool+0x60>)
 8010d0e:	f00b fc9f 	bl	801c650 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010d12:	68f8      	ldr	r0, [r7, #12]
 8010d14:	f00b fa4c 	bl	801c1b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	e003      	b.n	8010d24 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f00b fa47 	bl	801c1b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010d22:	2300      	movs	r3, #0
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	0801e748 	.word	0x0801e748
 8010d30:	0801e778 	.word	0x0801e778
 8010d34:	0801e79c 	.word	0x0801e79c

08010d38 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d106      	bne.n	8010d54 <memp_malloc_pool+0x1c>
 8010d46:	4b0a      	ldr	r3, [pc, #40]	@ (8010d70 <memp_malloc_pool+0x38>)
 8010d48:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8010d4c:	4909      	ldr	r1, [pc, #36]	@ (8010d74 <memp_malloc_pool+0x3c>)
 8010d4e:	480a      	ldr	r0, [pc, #40]	@ (8010d78 <memp_malloc_pool+0x40>)
 8010d50:	f00b fc7e 	bl	801c650 <iprintf>
  if (desc == NULL) {
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d101      	bne.n	8010d5e <memp_malloc_pool+0x26>
    return NULL;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	e003      	b.n	8010d66 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ff ffb8 	bl	8010cd4 <do_memp_malloc_pool>
 8010d64:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3708      	adds	r7, #8
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	0801e748 	.word	0x0801e748
 8010d74:	0801e7c4 	.word	0x0801e7c4
 8010d78:	0801e79c 	.word	0x0801e79c

08010d7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	4603      	mov	r3, r0
 8010d84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	2b0c      	cmp	r3, #12
 8010d8a:	d908      	bls.n	8010d9e <memp_malloc+0x22>
 8010d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8010db8 <memp_malloc+0x3c>)
 8010d8e:	f240 1257 	movw	r2, #343	@ 0x157
 8010d92:	490a      	ldr	r1, [pc, #40]	@ (8010dbc <memp_malloc+0x40>)
 8010d94:	480a      	ldr	r0, [pc, #40]	@ (8010dc0 <memp_malloc+0x44>)
 8010d96:	f00b fc5b 	bl	801c650 <iprintf>
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	e008      	b.n	8010db0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010d9e:	79fb      	ldrb	r3, [r7, #7]
 8010da0:	4a08      	ldr	r2, [pc, #32]	@ (8010dc4 <memp_malloc+0x48>)
 8010da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7ff ff94 	bl	8010cd4 <do_memp_malloc_pool>
 8010dac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010dae:	68fb      	ldr	r3, [r7, #12]
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3710      	adds	r7, #16
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}
 8010db8:	0801e748 	.word	0x0801e748
 8010dbc:	0801e7d8 	.word	0x0801e7d8
 8010dc0:	0801e79c 	.word	0x0801e79c
 8010dc4:	08021a8c 	.word	0x08021a8c

08010dc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	f003 0303 	and.w	r3, r3, #3
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d006      	beq.n	8010dea <do_memp_free_pool+0x22>
 8010ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8010e14 <do_memp_free_pool+0x4c>)
 8010dde:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8010de2:	490d      	ldr	r1, [pc, #52]	@ (8010e18 <do_memp_free_pool+0x50>)
 8010de4:	480d      	ldr	r0, [pc, #52]	@ (8010e1c <do_memp_free_pool+0x54>)
 8010de6:	f00b fc33 	bl	801c650 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010dee:	f00b f9d1 	bl	801c194 <sys_arch_protect>
 8010df2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	68fa      	ldr	r2, [r7, #12]
 8010e04:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010e06:	68b8      	ldr	r0, [r7, #8]
 8010e08:	f00b f9d2 	bl	801c1b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010e0c:	bf00      	nop
 8010e0e:	3710      	adds	r7, #16
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	0801e748 	.word	0x0801e748
 8010e18:	0801e7f8 	.word	0x0801e7f8
 8010e1c:	0801e79c 	.word	0x0801e79c

08010e20 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d106      	bne.n	8010e3e <memp_free_pool+0x1e>
 8010e30:	4b0a      	ldr	r3, [pc, #40]	@ (8010e5c <memp_free_pool+0x3c>)
 8010e32:	f240 1295 	movw	r2, #405	@ 0x195
 8010e36:	490a      	ldr	r1, [pc, #40]	@ (8010e60 <memp_free_pool+0x40>)
 8010e38:	480a      	ldr	r0, [pc, #40]	@ (8010e64 <memp_free_pool+0x44>)
 8010e3a:	f00b fc09 	bl	801c650 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d007      	beq.n	8010e54 <memp_free_pool+0x34>
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d004      	beq.n	8010e54 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010e4a:	6839      	ldr	r1, [r7, #0]
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f7ff ffbb 	bl	8010dc8 <do_memp_free_pool>
 8010e52:	e000      	b.n	8010e56 <memp_free_pool+0x36>
    return;
 8010e54:	bf00      	nop
}
 8010e56:	3708      	adds	r7, #8
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	0801e748 	.word	0x0801e748
 8010e60:	0801e7c4 	.word	0x0801e7c4
 8010e64:	0801e79c 	.word	0x0801e79c

08010e68 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	4603      	mov	r3, r0
 8010e70:	6039      	str	r1, [r7, #0]
 8010e72:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010e74:	79fb      	ldrb	r3, [r7, #7]
 8010e76:	2b0c      	cmp	r3, #12
 8010e78:	d907      	bls.n	8010e8a <memp_free+0x22>
 8010e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8010eac <memp_free+0x44>)
 8010e7c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8010e80:	490b      	ldr	r1, [pc, #44]	@ (8010eb0 <memp_free+0x48>)
 8010e82:	480c      	ldr	r0, [pc, #48]	@ (8010eb4 <memp_free+0x4c>)
 8010e84:	f00b fbe4 	bl	801c650 <iprintf>
 8010e88:	e00c      	b.n	8010ea4 <memp_free+0x3c>

  if (mem == NULL) {
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d008      	beq.n	8010ea2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010e90:	79fb      	ldrb	r3, [r7, #7]
 8010e92:	4a09      	ldr	r2, [pc, #36]	@ (8010eb8 <memp_free+0x50>)
 8010e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e98:	6839      	ldr	r1, [r7, #0]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff ff94 	bl	8010dc8 <do_memp_free_pool>
 8010ea0:	e000      	b.n	8010ea4 <memp_free+0x3c>
    return;
 8010ea2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	0801e748 	.word	0x0801e748
 8010eb0:	0801e818 	.word	0x0801e818
 8010eb4:	0801e79c 	.word	0x0801e79c
 8010eb8:	08021a8c 	.word	0x08021a8c

08010ebc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010ec0:	bf00      	nop
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr
	...

08010ecc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b088      	sub	sp, #32
 8010ed0:	af02      	add	r7, sp, #8
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	607a      	str	r2, [r7, #4]
 8010ed8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d108      	bne.n	8010ef2 <netif_add+0x26>
 8010ee0:	4b96      	ldr	r3, [pc, #600]	@ (801113c <netif_add+0x270>)
 8010ee2:	f240 1227 	movw	r2, #295	@ 0x127
 8010ee6:	4996      	ldr	r1, [pc, #600]	@ (8011140 <netif_add+0x274>)
 8010ee8:	4896      	ldr	r0, [pc, #600]	@ (8011144 <netif_add+0x278>)
 8010eea:	f00b fbb1 	bl	801c650 <iprintf>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e14c      	b.n	801118c <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d108      	bne.n	8010f0a <netif_add+0x3e>
 8010ef8:	4b90      	ldr	r3, [pc, #576]	@ (801113c <netif_add+0x270>)
 8010efa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8010efe:	4992      	ldr	r1, [pc, #584]	@ (8011148 <netif_add+0x27c>)
 8010f00:	4890      	ldr	r0, [pc, #576]	@ (8011144 <netif_add+0x278>)
 8010f02:	f00b fba5 	bl	801c650 <iprintf>
 8010f06:	2300      	movs	r3, #0
 8010f08:	e140      	b.n	801118c <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010f10:	4b8e      	ldr	r3, [pc, #568]	@ (801114c <netif_add+0x280>)
 8010f12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d101      	bne.n	8010f1e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010f1a:	4b8c      	ldr	r3, [pc, #560]	@ (801114c <netif_add+0x280>)
 8010f1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d101      	bne.n	8010f28 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010f24:	4b89      	ldr	r3, [pc, #548]	@ (801114c <netif_add+0x280>)
 8010f26:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2200      	movs	r2, #0
 8010f32:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2200      	movs	r2, #0
 8010f38:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	4a84      	ldr	r2, [pc, #528]	@ (8011150 <netif_add+0x284>)
 8010f3e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	2200      	movs	r2, #0
 8010f44:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2200      	movs	r2, #0
 8010f52:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6a3a      	ldr	r2, [r7, #32]
 8010f58:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010f5a:	4b7e      	ldr	r3, [pc, #504]	@ (8011154 <netif_add+0x288>)
 8010f5c:	781a      	ldrb	r2, [r3, #0]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f68:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	68b9      	ldr	r1, [r7, #8]
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f000 f9f5 	bl	8011360 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	4798      	blx	r3
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d001      	beq.n	8010f86 <netif_add+0xba>
    return NULL;
 8010f82:	2300      	movs	r3, #0
 8010f84:	e102      	b.n	801118c <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010f8c:	2bff      	cmp	r3, #255	@ 0xff
 8010f8e:	d103      	bne.n	8010f98 <netif_add+0xcc>
        netif->num = 0;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010f9c:	4b6e      	ldr	r3, [pc, #440]	@ (8011158 <netif_add+0x28c>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	617b      	str	r3, [r7, #20]
 8010fa2:	e02b      	b.n	8010ffc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010fa4:	697a      	ldr	r2, [r7, #20]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d106      	bne.n	8010fba <netif_add+0xee>
 8010fac:	4b63      	ldr	r3, [pc, #396]	@ (801113c <netif_add+0x270>)
 8010fae:	f240 128b 	movw	r2, #395	@ 0x18b
 8010fb2:	496a      	ldr	r1, [pc, #424]	@ (801115c <netif_add+0x290>)
 8010fb4:	4863      	ldr	r0, [pc, #396]	@ (8011144 <netif_add+0x278>)
 8010fb6:	f00b fb4b 	bl	801c650 <iprintf>
        num_netifs++;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	2bff      	cmp	r3, #255	@ 0xff
 8010fc4:	dd06      	ble.n	8010fd4 <netif_add+0x108>
 8010fc6:	4b5d      	ldr	r3, [pc, #372]	@ (801113c <netif_add+0x270>)
 8010fc8:	f240 128d 	movw	r2, #397	@ 0x18d
 8010fcc:	4964      	ldr	r1, [pc, #400]	@ (8011160 <netif_add+0x294>)
 8010fce:	485d      	ldr	r0, [pc, #372]	@ (8011144 <netif_add+0x278>)
 8010fd0:	f00b fb3e 	bl	801c650 <iprintf>
        if (netif2->num == netif->num) {
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d108      	bne.n	8010ff6 <netif_add+0x12a>
          netif->num++;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010fea:	3301      	adds	r3, #1
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8010ff4:	e005      	b.n	8011002 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	617b      	str	r3, [r7, #20]
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1d0      	bne.n	8010fa4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1be      	bne.n	8010f86 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801100e:	2bfe      	cmp	r3, #254	@ 0xfe
 8011010:	d103      	bne.n	801101a <netif_add+0x14e>
    netif_num = 0;
 8011012:	4b50      	ldr	r3, [pc, #320]	@ (8011154 <netif_add+0x288>)
 8011014:	2200      	movs	r2, #0
 8011016:	701a      	strb	r2, [r3, #0]
 8011018:	e006      	b.n	8011028 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011020:	3301      	adds	r3, #1
 8011022:	b2da      	uxtb	r2, r3
 8011024:	4b4b      	ldr	r3, [pc, #300]	@ (8011154 <netif_add+0x288>)
 8011026:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011028:	4b4b      	ldr	r3, [pc, #300]	@ (8011158 <netif_add+0x28c>)
 801102a:	681a      	ldr	r2, [r3, #0]
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011030:	4a49      	ldr	r2, [pc, #292]	@ (8011158 <netif_add+0x28c>)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801103c:	4619      	mov	r1, r3
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011044:	461a      	mov	r2, r3
 8011046:	4847      	ldr	r0, [pc, #284]	@ (8011164 <netif_add+0x298>)
 8011048:	f00b fb02 	bl	801c650 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 801104c:	4846      	ldr	r0, [pc, #280]	@ (8011168 <netif_add+0x29c>)
 801104e:	f00b faff 	bl	801c650 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d003      	beq.n	8011060 <netif_add+0x194>
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	4619      	mov	r1, r3
 801105e:	e000      	b.n	8011062 <netif_add+0x196>
 8011060:	2100      	movs	r1, #0
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d004      	beq.n	8011072 <netif_add+0x1a6>
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	3301      	adds	r3, #1
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	461a      	mov	r2, r3
 8011070:	e000      	b.n	8011074 <netif_add+0x1a8>
 8011072:	2200      	movs	r2, #0
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d004      	beq.n	8011084 <netif_add+0x1b8>
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	3302      	adds	r3, #2
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	4618      	mov	r0, r3
 8011082:	e000      	b.n	8011086 <netif_add+0x1ba>
 8011084:	2000      	movs	r0, #0
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d003      	beq.n	8011094 <netif_add+0x1c8>
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	3303      	adds	r3, #3
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	e000      	b.n	8011096 <netif_add+0x1ca>
 8011094:	2300      	movs	r3, #0
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	4603      	mov	r3, r0
 801109a:	4834      	ldr	r0, [pc, #208]	@ (801116c <netif_add+0x2a0>)
 801109c:	f00b fad8 	bl	801c650 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 80110a0:	4833      	ldr	r0, [pc, #204]	@ (8011170 <netif_add+0x2a4>)
 80110a2:	f00b fad5 	bl	801c650 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d003      	beq.n	80110b4 <netif_add+0x1e8>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	4619      	mov	r1, r3
 80110b2:	e000      	b.n	80110b6 <netif_add+0x1ea>
 80110b4:	2100      	movs	r1, #0
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d004      	beq.n	80110c6 <netif_add+0x1fa>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	3301      	adds	r3, #1
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	461a      	mov	r2, r3
 80110c4:	e000      	b.n	80110c8 <netif_add+0x1fc>
 80110c6:	2200      	movs	r2, #0
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d004      	beq.n	80110d8 <netif_add+0x20c>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	3302      	adds	r3, #2
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	4618      	mov	r0, r3
 80110d6:	e000      	b.n	80110da <netif_add+0x20e>
 80110d8:	2000      	movs	r0, #0
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d003      	beq.n	80110e8 <netif_add+0x21c>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	3303      	adds	r3, #3
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	e000      	b.n	80110ea <netif_add+0x21e>
 80110e8:	2300      	movs	r3, #0
 80110ea:	9300      	str	r3, [sp, #0]
 80110ec:	4603      	mov	r3, r0
 80110ee:	481f      	ldr	r0, [pc, #124]	@ (801116c <netif_add+0x2a0>)
 80110f0:	f00b faae 	bl	801c650 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 80110f4:	481f      	ldr	r0, [pc, #124]	@ (8011174 <netif_add+0x2a8>)
 80110f6:	f00b faab 	bl	801c650 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <netif_add+0x23c>
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	4619      	mov	r1, r3
 8011106:	e000      	b.n	801110a <netif_add+0x23e>
 8011108:	2100      	movs	r1, #0
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d004      	beq.n	801111a <netif_add+0x24e>
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	3301      	adds	r3, #1
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	461a      	mov	r2, r3
 8011118:	e000      	b.n	801111c <netif_add+0x250>
 801111a:	2200      	movs	r2, #0
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d004      	beq.n	801112c <netif_add+0x260>
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	3302      	adds	r3, #2
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	4618      	mov	r0, r3
 801112a:	e000      	b.n	801112e <netif_add+0x262>
 801112c:	2000      	movs	r0, #0
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d021      	beq.n	8011178 <netif_add+0x2ac>
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	3303      	adds	r3, #3
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	e01e      	b.n	801117a <netif_add+0x2ae>
 801113c:	0801e834 	.word	0x0801e834
 8011140:	0801e8c8 	.word	0x0801e8c8
 8011144:	0801e884 	.word	0x0801e884
 8011148:	0801e8e4 	.word	0x0801e8e4
 801114c:	08021b00 	.word	0x08021b00
 8011150:	08011663 	.word	0x08011663
 8011154:	20022798 	.word	0x20022798
 8011158:	20022790 	.word	0x20022790
 801115c:	0801e908 	.word	0x0801e908
 8011160:	0801e91c 	.word	0x0801e91c
 8011164:	0801e94c 	.word	0x0801e94c
 8011168:	0801e96c 	.word	0x0801e96c
 801116c:	0801e974 	.word	0x0801e974
 8011170:	0801e984 	.word	0x0801e984
 8011174:	0801e990 	.word	0x0801e990
 8011178:	2300      	movs	r3, #0
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	4603      	mov	r3, r0
 801117e:	4805      	ldr	r0, [pc, #20]	@ (8011194 <netif_add+0x2c8>)
 8011180:	f00b fa66 	bl	801c650 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8011184:	200a      	movs	r0, #10
 8011186:	f00b fa75 	bl	801c674 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801118a:	68fb      	ldr	r3, [r7, #12]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3718      	adds	r7, #24
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	0801e974 	.word	0x0801e974

08011198 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80111a2:	6839      	ldr	r1, [r7, #0]
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f002 ff13 	bl	8013fd0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80111aa:	6839      	ldr	r1, [r7, #0]
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f008 fa5f 	bl	8019670 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80111b2:	bf00      	nop
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
	...

080111bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b086      	sub	sp, #24
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d106      	bne.n	80111dc <netif_do_set_ipaddr+0x20>
 80111ce:	4b1e      	ldr	r3, [pc, #120]	@ (8011248 <netif_do_set_ipaddr+0x8c>)
 80111d0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80111d4:	491d      	ldr	r1, [pc, #116]	@ (801124c <netif_do_set_ipaddr+0x90>)
 80111d6:	481e      	ldr	r0, [pc, #120]	@ (8011250 <netif_do_set_ipaddr+0x94>)
 80111d8:	f00b fa3a 	bl	801c650 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d106      	bne.n	80111f0 <netif_do_set_ipaddr+0x34>
 80111e2:	4b19      	ldr	r3, [pc, #100]	@ (8011248 <netif_do_set_ipaddr+0x8c>)
 80111e4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80111e8:	4918      	ldr	r1, [pc, #96]	@ (801124c <netif_do_set_ipaddr+0x90>)
 80111ea:	4819      	ldr	r0, [pc, #100]	@ (8011250 <netif_do_set_ipaddr+0x94>)
 80111ec:	f00b fa30 	bl	801c650 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	3304      	adds	r3, #4
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d01f      	beq.n	801123e <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	3304      	adds	r3, #4
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 801120e:	4811      	ldr	r0, [pc, #68]	@ (8011254 <netif_do_set_ipaddr+0x98>)
 8011210:	f00b fa8e 	bl	801c730 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011214:	f107 0314 	add.w	r3, r7, #20
 8011218:	4619      	mov	r1, r3
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f7ff ffbc 	bl	8011198 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d002      	beq.n	801122c <netif_do_set_ipaddr+0x70>
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	e000      	b.n	801122e <netif_do_set_ipaddr+0x72>
 801122c:	2300      	movs	r3, #0
 801122e:	68fa      	ldr	r2, [r7, #12]
 8011230:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011232:	2101      	movs	r1, #1
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f000 f92d 	bl	8011494 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801123a:	2301      	movs	r3, #1
 801123c:	e000      	b.n	8011240 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 801123e:	2300      	movs	r3, #0
}
 8011240:	4618      	mov	r0, r3
 8011242:	3718      	adds	r7, #24
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	0801e834 	.word	0x0801e834
 801124c:	0801e998 	.word	0x0801e998
 8011250:	0801e884 	.word	0x0801e884
 8011254:	0801e9a8 	.word	0x0801e9a8

08011258 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011258:	b5b0      	push	{r4, r5, r7, lr}
 801125a:	b088      	sub	sp, #32
 801125c:	af04      	add	r7, sp, #16
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	681a      	ldr	r2, [r3, #0]
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	3308      	adds	r3, #8
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	429a      	cmp	r2, r3
 8011270:	d02d      	beq.n	80112ce <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d002      	beq.n	801127e <netif_do_set_netmask+0x26>
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	e000      	b.n	8011280 <netif_do_set_netmask+0x28>
 801127e:	2300      	movs	r3, #0
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801128a:	4618      	mov	r0, r3
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011292:	461c      	mov	r4, r3
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	3308      	adds	r3, #8
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	461d      	mov	r5, r3
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	3308      	adds	r3, #8
 80112a0:	3301      	adds	r3, #1
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	461a      	mov	r2, r3
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	3308      	adds	r3, #8
 80112aa:	3302      	adds	r3, #2
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	4619      	mov	r1, r3
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	3308      	adds	r3, #8
 80112b4:	3303      	adds	r3, #3
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	9302      	str	r3, [sp, #8]
 80112ba:	9101      	str	r1, [sp, #4]
 80112bc:	9200      	str	r2, [sp, #0]
 80112be:	462b      	mov	r3, r5
 80112c0:	4622      	mov	r2, r4
 80112c2:	4601      	mov	r1, r0
 80112c4:	4804      	ldr	r0, [pc, #16]	@ (80112d8 <netif_do_set_netmask+0x80>)
 80112c6:	f00b f9c3 	bl	801c650 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80112ca:	2301      	movs	r3, #1
 80112cc:	e000      	b.n	80112d0 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 80112ce:	2300      	movs	r3, #0
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bdb0      	pop	{r4, r5, r7, pc}
 80112d8:	0801e9f8 	.word	0x0801e9f8

080112dc <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80112dc:	b5b0      	push	{r4, r5, r7, lr}
 80112de:	b088      	sub	sp, #32
 80112e0:	af04      	add	r7, sp, #16
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	330c      	adds	r3, #12
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d02d      	beq.n	8011352 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d002      	beq.n	8011302 <netif_do_set_gw+0x26>
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	e000      	b.n	8011304 <netif_do_set_gw+0x28>
 8011302:	2300      	movs	r3, #0
 8011304:	68fa      	ldr	r2, [r7, #12]
 8011306:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801130e:	4618      	mov	r0, r3
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011316:	461c      	mov	r4, r3
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	330c      	adds	r3, #12
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	461d      	mov	r5, r3
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	330c      	adds	r3, #12
 8011324:	3301      	adds	r3, #1
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	461a      	mov	r2, r3
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	330c      	adds	r3, #12
 801132e:	3302      	adds	r3, #2
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	4619      	mov	r1, r3
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	330c      	adds	r3, #12
 8011338:	3303      	adds	r3, #3
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	9302      	str	r3, [sp, #8]
 801133e:	9101      	str	r1, [sp, #4]
 8011340:	9200      	str	r2, [sp, #0]
 8011342:	462b      	mov	r3, r5
 8011344:	4622      	mov	r2, r4
 8011346:	4601      	mov	r1, r0
 8011348:	4804      	ldr	r0, [pc, #16]	@ (801135c <netif_do_set_gw+0x80>)
 801134a:	f00b f981 	bl	801c650 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801134e:	2301      	movs	r3, #1
 8011350:	e000      	b.n	8011354 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8011352:	2300      	movs	r3, #0
}
 8011354:	4618      	mov	r0, r3
 8011356:	3710      	adds	r7, #16
 8011358:	46bd      	mov	sp, r7
 801135a:	bdb0      	pop	{r4, r5, r7, pc}
 801135c:	0801ea58 	.word	0x0801ea58

08011360 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b088      	sub	sp, #32
 8011364:	af00      	add	r7, sp, #0
 8011366:	60f8      	str	r0, [r7, #12]
 8011368:	60b9      	str	r1, [r7, #8]
 801136a:	607a      	str	r2, [r7, #4]
 801136c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801136e:	2300      	movs	r3, #0
 8011370:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011372:	2300      	movs	r3, #0
 8011374:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d101      	bne.n	8011380 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801137c:	4b1c      	ldr	r3, [pc, #112]	@ (80113f0 <netif_set_addr+0x90>)
 801137e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d101      	bne.n	801138a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011386:	4b1a      	ldr	r3, [pc, #104]	@ (80113f0 <netif_set_addr+0x90>)
 8011388:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d101      	bne.n	8011394 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011390:	4b17      	ldr	r3, [pc, #92]	@ (80113f0 <netif_set_addr+0x90>)
 8011392:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d003      	beq.n	80113a2 <netif_set_addr+0x42>
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d101      	bne.n	80113a6 <netif_set_addr+0x46>
 80113a2:	2301      	movs	r3, #1
 80113a4:	e000      	b.n	80113a8 <netif_set_addr+0x48>
 80113a6:	2300      	movs	r3, #0
 80113a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d006      	beq.n	80113be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80113b0:	f107 0310 	add.w	r3, r7, #16
 80113b4:	461a      	mov	r2, r3
 80113b6:	68b9      	ldr	r1, [r7, #8]
 80113b8:	68f8      	ldr	r0, [r7, #12]
 80113ba:	f7ff feff 	bl	80111bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80113be:	69fa      	ldr	r2, [r7, #28]
 80113c0:	6879      	ldr	r1, [r7, #4]
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f7ff ff48 	bl	8011258 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80113c8:	69ba      	ldr	r2, [r7, #24]
 80113ca:	6839      	ldr	r1, [r7, #0]
 80113cc:	68f8      	ldr	r0, [r7, #12]
 80113ce:	f7ff ff85 	bl	80112dc <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d106      	bne.n	80113e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80113d8:	f107 0310 	add.w	r3, r7, #16
 80113dc:	461a      	mov	r2, r3
 80113de:	68b9      	ldr	r1, [r7, #8]
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f7ff feeb 	bl	80111bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80113e6:	bf00      	nop
 80113e8:	3720      	adds	r7, #32
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	08021b00 	.word	0x08021b00

080113f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80113fc:	4a0d      	ldr	r2, [pc, #52]	@ (8011434 <netif_set_default+0x40>)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d004      	beq.n	8011412 <netif_set_default+0x1e>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801140e:	4619      	mov	r1, r3
 8011410:	e000      	b.n	8011414 <netif_set_default+0x20>
 8011412:	2127      	movs	r1, #39	@ 0x27
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d003      	beq.n	8011422 <netif_set_default+0x2e>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011420:	e000      	b.n	8011424 <netif_set_default+0x30>
 8011422:	2327      	movs	r3, #39	@ 0x27
 8011424:	461a      	mov	r2, r3
 8011426:	4804      	ldr	r0, [pc, #16]	@ (8011438 <netif_set_default+0x44>)
 8011428:	f00b f912 	bl	801c650 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801142c:	bf00      	nop
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}
 8011434:	20022794 	.word	0x20022794
 8011438:	0801eacc 	.word	0x0801eacc

0801143c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d107      	bne.n	801145a <netif_set_up+0x1e>
 801144a:	4b0f      	ldr	r3, [pc, #60]	@ (8011488 <netif_set_up+0x4c>)
 801144c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011450:	490e      	ldr	r1, [pc, #56]	@ (801148c <netif_set_up+0x50>)
 8011452:	480f      	ldr	r0, [pc, #60]	@ (8011490 <netif_set_up+0x54>)
 8011454:	f00b f8fc 	bl	801c650 <iprintf>
 8011458:	e013      	b.n	8011482 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011460:	f003 0301 	and.w	r3, r3, #1
 8011464:	2b00      	cmp	r3, #0
 8011466:	d10c      	bne.n	8011482 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801146e:	f043 0301 	orr.w	r3, r3, #1
 8011472:	b2da      	uxtb	r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801147a:	2103      	movs	r1, #3
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f000 f809 	bl	8011494 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	0801e834 	.word	0x0801e834
 801148c:	0801eaf4 	.word	0x0801eaf4
 8011490:	0801e884 	.word	0x0801e884

08011494 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	460b      	mov	r3, r1
 801149e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d106      	bne.n	80114b4 <netif_issue_reports+0x20>
 80114a6:	4b18      	ldr	r3, [pc, #96]	@ (8011508 <netif_issue_reports+0x74>)
 80114a8:	f240 326d 	movw	r2, #877	@ 0x36d
 80114ac:	4917      	ldr	r1, [pc, #92]	@ (801150c <netif_issue_reports+0x78>)
 80114ae:	4818      	ldr	r0, [pc, #96]	@ (8011510 <netif_issue_reports+0x7c>)
 80114b0:	f00b f8ce 	bl	801c650 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80114ba:	f003 0304 	and.w	r3, r3, #4
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d01e      	beq.n	8011500 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80114c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d017      	beq.n	8011500 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80114d0:	78fb      	ldrb	r3, [r7, #3]
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d013      	beq.n	8011502 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	3304      	adds	r3, #4
 80114de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00e      	beq.n	8011502 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80114ea:	f003 0308 	and.w	r3, r3, #8
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d007      	beq.n	8011502 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	3304      	adds	r3, #4
 80114f6:	4619      	mov	r1, r3
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f009 f895 	bl	801a628 <etharp_request>
 80114fe:	e000      	b.n	8011502 <netif_issue_reports+0x6e>
    return;
 8011500:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	0801e834 	.word	0x0801e834
 801150c:	0801eb10 	.word	0x0801eb10
 8011510:	0801e884 	.word	0x0801e884

08011514 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d107      	bne.n	8011532 <netif_set_down+0x1e>
 8011522:	4b12      	ldr	r3, [pc, #72]	@ (801156c <netif_set_down+0x58>)
 8011524:	f240 329b 	movw	r2, #923	@ 0x39b
 8011528:	4911      	ldr	r1, [pc, #68]	@ (8011570 <netif_set_down+0x5c>)
 801152a:	4812      	ldr	r0, [pc, #72]	@ (8011574 <netif_set_down+0x60>)
 801152c:	f00b f890 	bl	801c650 <iprintf>
 8011530:	e019      	b.n	8011566 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011538:	f003 0301 	and.w	r3, r3, #1
 801153c:	2b00      	cmp	r3, #0
 801153e:	d012      	beq.n	8011566 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011546:	f023 0301 	bic.w	r3, r3, #1
 801154a:	b2da      	uxtb	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011558:	f003 0308 	and.w	r3, r3, #8
 801155c:	2b00      	cmp	r3, #0
 801155e:	d002      	beq.n	8011566 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f008 fc1f 	bl	8019da4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011566:	3708      	adds	r7, #8
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	0801e834 	.word	0x0801e834
 8011570:	0801eb34 	.word	0x0801eb34
 8011574:	0801e884 	.word	0x0801e884

08011578 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d107      	bne.n	8011596 <netif_set_link_up+0x1e>
 8011586:	4b13      	ldr	r3, [pc, #76]	@ (80115d4 <netif_set_link_up+0x5c>)
 8011588:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801158c:	4912      	ldr	r1, [pc, #72]	@ (80115d8 <netif_set_link_up+0x60>)
 801158e:	4813      	ldr	r0, [pc, #76]	@ (80115dc <netif_set_link_up+0x64>)
 8011590:	f00b f85e 	bl	801c650 <iprintf>
 8011594:	e01b      	b.n	80115ce <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801159c:	f003 0304 	and.w	r3, r3, #4
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d114      	bne.n	80115ce <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80115aa:	f043 0304 	orr.w	r3, r3, #4
 80115ae:	b2da      	uxtb	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80115b6:	2103      	movs	r1, #3
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7ff ff6b 	bl	8011494 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	69db      	ldr	r3, [r3, #28]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d003      	beq.n	80115ce <netif_set_link_up+0x56>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	69db      	ldr	r3, [r3, #28]
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	0801e834 	.word	0x0801e834
 80115d8:	0801eb54 	.word	0x0801eb54
 80115dc:	0801e884 	.word	0x0801e884

080115e0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d107      	bne.n	80115fe <netif_set_link_down+0x1e>
 80115ee:	4b11      	ldr	r3, [pc, #68]	@ (8011634 <netif_set_link_down+0x54>)
 80115f0:	f240 4206 	movw	r2, #1030	@ 0x406
 80115f4:	4910      	ldr	r1, [pc, #64]	@ (8011638 <netif_set_link_down+0x58>)
 80115f6:	4811      	ldr	r0, [pc, #68]	@ (801163c <netif_set_link_down+0x5c>)
 80115f8:	f00b f82a 	bl	801c650 <iprintf>
 80115fc:	e017      	b.n	801162e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011604:	f003 0304 	and.w	r3, r3, #4
 8011608:	2b00      	cmp	r3, #0
 801160a:	d010      	beq.n	801162e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011612:	f023 0304 	bic.w	r3, r3, #4
 8011616:	b2da      	uxtb	r2, r3
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	69db      	ldr	r3, [r3, #28]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d003      	beq.n	801162e <netif_set_link_down+0x4e>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	69db      	ldr	r3, [r3, #28]
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	0801e834 	.word	0x0801e834
 8011638:	0801eb78 	.word	0x0801eb78
 801163c:	0801e884 	.word	0x0801e884

08011640 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d002      	beq.n	8011656 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	683a      	ldr	r2, [r7, #0]
 8011654:	61da      	str	r2, [r3, #28]
  }
}
 8011656:	bf00      	nop
 8011658:	370c      	adds	r7, #12
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011662:	b480      	push	{r7}
 8011664:	b085      	sub	sp, #20
 8011666:	af00      	add	r7, sp, #0
 8011668:	60f8      	str	r0, [r7, #12]
 801166a:	60b9      	str	r1, [r7, #8]
 801166c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801166e:	f06f 030b 	mvn.w	r3, #11
}
 8011672:	4618      	mov	r0, r3
 8011674:	3714      	adds	r7, #20
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr
	...

08011680 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011680:	b480      	push	{r7}
 8011682:	b085      	sub	sp, #20
 8011684:	af00      	add	r7, sp, #0
 8011686:	4603      	mov	r3, r0
 8011688:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801168a:	79fb      	ldrb	r3, [r7, #7]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d013      	beq.n	80116b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011690:	4b0d      	ldr	r3, [pc, #52]	@ (80116c8 <netif_get_by_index+0x48>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	60fb      	str	r3, [r7, #12]
 8011696:	e00c      	b.n	80116b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801169e:	3301      	adds	r3, #1
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	79fa      	ldrb	r2, [r7, #7]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d101      	bne.n	80116ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	e006      	b.n	80116ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	60fb      	str	r3, [r7, #12]
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1ef      	bne.n	8011698 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3714      	adds	r7, #20
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	20022790 	.word	0x20022790

080116cc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b082      	sub	sp, #8
 80116d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80116d2:	f00a fd5f 	bl	801c194 <sys_arch_protect>
 80116d6:	6038      	str	r0, [r7, #0]
 80116d8:	4b0d      	ldr	r3, [pc, #52]	@ (8011710 <pbuf_free_ooseq+0x44>)
 80116da:	2200      	movs	r2, #0
 80116dc:	701a      	strb	r2, [r3, #0]
 80116de:	6838      	ldr	r0, [r7, #0]
 80116e0:	f00a fd66 	bl	801c1b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80116e4:	4b0b      	ldr	r3, [pc, #44]	@ (8011714 <pbuf_free_ooseq+0x48>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	607b      	str	r3, [r7, #4]
 80116ea:	e00a      	b.n	8011702 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d003      	beq.n	80116fc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f002 fca9 	bl	801404c <tcp_free_ooseq>
      return;
 80116fa:	e005      	b.n	8011708 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	607b      	str	r3, [r7, #4]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1f1      	bne.n	80116ec <pbuf_free_ooseq+0x20>
    }
  }
}
 8011708:	3708      	adds	r7, #8
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	20022799 	.word	0x20022799
 8011714:	200227a8 	.word	0x200227a8

08011718 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011720:	f7ff ffd4 	bl	80116cc <pbuf_free_ooseq>
}
 8011724:	bf00      	nop
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011732:	f00a fd2f 	bl	801c194 <sys_arch_protect>
 8011736:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011738:	4b0f      	ldr	r3, [pc, #60]	@ (8011778 <pbuf_pool_is_empty+0x4c>)
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801173e:	4b0e      	ldr	r3, [pc, #56]	@ (8011778 <pbuf_pool_is_empty+0x4c>)
 8011740:	2201      	movs	r2, #1
 8011742:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f00a fd33 	bl	801c1b0 <sys_arch_unprotect>

  if (!queued) {
 801174a:	78fb      	ldrb	r3, [r7, #3]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d10f      	bne.n	8011770 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011750:	2100      	movs	r1, #0
 8011752:	480a      	ldr	r0, [pc, #40]	@ (801177c <pbuf_pool_is_empty+0x50>)
 8011754:	f7fe fd9e 	bl	8010294 <tcpip_try_callback>
 8011758:	4603      	mov	r3, r0
 801175a:	2b00      	cmp	r3, #0
 801175c:	d008      	beq.n	8011770 <pbuf_pool_is_empty+0x44>
 801175e:	f00a fd19 	bl	801c194 <sys_arch_protect>
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	4b04      	ldr	r3, [pc, #16]	@ (8011778 <pbuf_pool_is_empty+0x4c>)
 8011766:	2200      	movs	r2, #0
 8011768:	701a      	strb	r2, [r3, #0]
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f00a fd20 	bl	801c1b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011770:	bf00      	nop
 8011772:	3708      	adds	r7, #8
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	20022799 	.word	0x20022799
 801177c:	08011719 	.word	0x08011719

08011780 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	4611      	mov	r1, r2
 801178c:	461a      	mov	r2, r3
 801178e:	460b      	mov	r3, r1
 8011790:	80fb      	strh	r3, [r7, #6]
 8011792:	4613      	mov	r3, r2
 8011794:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2200      	movs	r2, #0
 801179a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	68ba      	ldr	r2, [r7, #8]
 80117a0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	88fa      	ldrh	r2, [r7, #6]
 80117a6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	88ba      	ldrh	r2, [r7, #4]
 80117ac:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80117ae:	8b3b      	ldrh	r3, [r7, #24]
 80117b0:	b2da      	uxtb	r2, r3
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	7f3a      	ldrb	r2, [r7, #28]
 80117ba:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	2201      	movs	r2, #1
 80117c0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2200      	movs	r2, #0
 80117c6:	73da      	strb	r2, [r3, #15]
}
 80117c8:	bf00      	nop
 80117ca:	3714      	adds	r7, #20
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr

080117d4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b08c      	sub	sp, #48	@ 0x30
 80117d8:	af02      	add	r7, sp, #8
 80117da:	4603      	mov	r3, r0
 80117dc:	71fb      	strb	r3, [r7, #7]
 80117de:	460b      	mov	r3, r1
 80117e0:	80bb      	strh	r3, [r7, #4]
 80117e2:	4613      	mov	r3, r2
 80117e4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80117e6:	79fb      	ldrb	r3, [r7, #7]
 80117e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80117ea:	887b      	ldrh	r3, [r7, #2]
 80117ec:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80117f0:	d07f      	beq.n	80118f2 <pbuf_alloc+0x11e>
 80117f2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80117f6:	f300 80c8 	bgt.w	801198a <pbuf_alloc+0x1b6>
 80117fa:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80117fe:	d010      	beq.n	8011822 <pbuf_alloc+0x4e>
 8011800:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8011804:	f300 80c1 	bgt.w	801198a <pbuf_alloc+0x1b6>
 8011808:	2b01      	cmp	r3, #1
 801180a:	d002      	beq.n	8011812 <pbuf_alloc+0x3e>
 801180c:	2b41      	cmp	r3, #65	@ 0x41
 801180e:	f040 80bc 	bne.w	801198a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8011812:	887a      	ldrh	r2, [r7, #2]
 8011814:	88bb      	ldrh	r3, [r7, #4]
 8011816:	4619      	mov	r1, r3
 8011818:	2000      	movs	r0, #0
 801181a:	f000 f8d1 	bl	80119c0 <pbuf_alloc_reference>
 801181e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8011820:	e0bd      	b.n	801199e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8011822:	2300      	movs	r3, #0
 8011824:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8011826:	2300      	movs	r3, #0
 8011828:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801182a:	88bb      	ldrh	r3, [r7, #4]
 801182c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801182e:	200c      	movs	r0, #12
 8011830:	f7ff faa4 	bl	8010d7c <memp_malloc>
 8011834:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d109      	bne.n	8011850 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801183c:	f7ff ff76 	bl	801172c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011842:	2b00      	cmp	r3, #0
 8011844:	d002      	beq.n	801184c <pbuf_alloc+0x78>
            pbuf_free(p);
 8011846:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011848:	f000 faa8 	bl	8011d9c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801184c:	2300      	movs	r3, #0
 801184e:	e0a7      	b.n	80119a0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011850:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011852:	3303      	adds	r3, #3
 8011854:	b29b      	uxth	r3, r3
 8011856:	f023 0303 	bic.w	r3, r3, #3
 801185a:	b29b      	uxth	r3, r3
 801185c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8011860:	b29b      	uxth	r3, r3
 8011862:	8b7a      	ldrh	r2, [r7, #26]
 8011864:	4293      	cmp	r3, r2
 8011866:	bf28      	it	cs
 8011868:	4613      	movcs	r3, r2
 801186a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801186c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801186e:	3310      	adds	r3, #16
 8011870:	693a      	ldr	r2, [r7, #16]
 8011872:	4413      	add	r3, r2
 8011874:	3303      	adds	r3, #3
 8011876:	f023 0303 	bic.w	r3, r3, #3
 801187a:	4618      	mov	r0, r3
 801187c:	89f9      	ldrh	r1, [r7, #14]
 801187e:	8b7a      	ldrh	r2, [r7, #26]
 8011880:	2300      	movs	r3, #0
 8011882:	9301      	str	r3, [sp, #4]
 8011884:	887b      	ldrh	r3, [r7, #2]
 8011886:	9300      	str	r3, [sp, #0]
 8011888:	460b      	mov	r3, r1
 801188a:	4601      	mov	r1, r0
 801188c:	6938      	ldr	r0, [r7, #16]
 801188e:	f7ff ff77 	bl	8011780 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	f003 0303 	and.w	r3, r3, #3
 801189a:	2b00      	cmp	r3, #0
 801189c:	d006      	beq.n	80118ac <pbuf_alloc+0xd8>
 801189e:	4b42      	ldr	r3, [pc, #264]	@ (80119a8 <pbuf_alloc+0x1d4>)
 80118a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80118a4:	4941      	ldr	r1, [pc, #260]	@ (80119ac <pbuf_alloc+0x1d8>)
 80118a6:	4842      	ldr	r0, [pc, #264]	@ (80119b0 <pbuf_alloc+0x1dc>)
 80118a8:	f00a fed2 	bl	801c650 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80118ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80118ae:	3303      	adds	r3, #3
 80118b0:	f023 0303 	bic.w	r3, r3, #3
 80118b4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80118b8:	d106      	bne.n	80118c8 <pbuf_alloc+0xf4>
 80118ba:	4b3b      	ldr	r3, [pc, #236]	@ (80119a8 <pbuf_alloc+0x1d4>)
 80118bc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80118c0:	493c      	ldr	r1, [pc, #240]	@ (80119b4 <pbuf_alloc+0x1e0>)
 80118c2:	483b      	ldr	r0, [pc, #236]	@ (80119b0 <pbuf_alloc+0x1dc>)
 80118c4:	f00a fec4 	bl	801c650 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80118c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d102      	bne.n	80118d4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80118d2:	e002      	b.n	80118da <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	693a      	ldr	r2, [r7, #16]
 80118d8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80118de:	8b7a      	ldrh	r2, [r7, #26]
 80118e0:	89fb      	ldrh	r3, [r7, #14]
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80118e6:	2300      	movs	r3, #0
 80118e8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80118ea:	8b7b      	ldrh	r3, [r7, #26]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d19e      	bne.n	801182e <pbuf_alloc+0x5a>
      break;
 80118f0:	e055      	b.n	801199e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80118f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80118f4:	3303      	adds	r3, #3
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	f023 0303 	bic.w	r3, r3, #3
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	88bb      	ldrh	r3, [r7, #4]
 8011900:	3303      	adds	r3, #3
 8011902:	b29b      	uxth	r3, r3
 8011904:	f023 0303 	bic.w	r3, r3, #3
 8011908:	b29b      	uxth	r3, r3
 801190a:	4413      	add	r3, r2
 801190c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801190e:	8b3b      	ldrh	r3, [r7, #24]
 8011910:	3310      	adds	r3, #16
 8011912:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011914:	8b3a      	ldrh	r2, [r7, #24]
 8011916:	88bb      	ldrh	r3, [r7, #4]
 8011918:	3303      	adds	r3, #3
 801191a:	f023 0303 	bic.w	r3, r3, #3
 801191e:	429a      	cmp	r2, r3
 8011920:	d306      	bcc.n	8011930 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011922:	8afa      	ldrh	r2, [r7, #22]
 8011924:	88bb      	ldrh	r3, [r7, #4]
 8011926:	3303      	adds	r3, #3
 8011928:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801192c:	429a      	cmp	r2, r3
 801192e:	d201      	bcs.n	8011934 <pbuf_alloc+0x160>
        return NULL;
 8011930:	2300      	movs	r3, #0
 8011932:	e035      	b.n	80119a0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011934:	8afb      	ldrh	r3, [r7, #22]
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff f87c 	bl	8010a34 <mem_malloc>
 801193c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011940:	2b00      	cmp	r3, #0
 8011942:	d101      	bne.n	8011948 <pbuf_alloc+0x174>
        return NULL;
 8011944:	2300      	movs	r3, #0
 8011946:	e02b      	b.n	80119a0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011948:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801194a:	3310      	adds	r3, #16
 801194c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801194e:	4413      	add	r3, r2
 8011950:	3303      	adds	r3, #3
 8011952:	f023 0303 	bic.w	r3, r3, #3
 8011956:	4618      	mov	r0, r3
 8011958:	88b9      	ldrh	r1, [r7, #4]
 801195a:	88ba      	ldrh	r2, [r7, #4]
 801195c:	2300      	movs	r3, #0
 801195e:	9301      	str	r3, [sp, #4]
 8011960:	887b      	ldrh	r3, [r7, #2]
 8011962:	9300      	str	r3, [sp, #0]
 8011964:	460b      	mov	r3, r1
 8011966:	4601      	mov	r1, r0
 8011968:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801196a:	f7ff ff09 	bl	8011780 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	f003 0303 	and.w	r3, r3, #3
 8011976:	2b00      	cmp	r3, #0
 8011978:	d010      	beq.n	801199c <pbuf_alloc+0x1c8>
 801197a:	4b0b      	ldr	r3, [pc, #44]	@ (80119a8 <pbuf_alloc+0x1d4>)
 801197c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8011980:	490d      	ldr	r1, [pc, #52]	@ (80119b8 <pbuf_alloc+0x1e4>)
 8011982:	480b      	ldr	r0, [pc, #44]	@ (80119b0 <pbuf_alloc+0x1dc>)
 8011984:	f00a fe64 	bl	801c650 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011988:	e008      	b.n	801199c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801198a:	4b07      	ldr	r3, [pc, #28]	@ (80119a8 <pbuf_alloc+0x1d4>)
 801198c:	f240 1227 	movw	r2, #295	@ 0x127
 8011990:	490a      	ldr	r1, [pc, #40]	@ (80119bc <pbuf_alloc+0x1e8>)
 8011992:	4807      	ldr	r0, [pc, #28]	@ (80119b0 <pbuf_alloc+0x1dc>)
 8011994:	f00a fe5c 	bl	801c650 <iprintf>
      return NULL;
 8011998:	2300      	movs	r3, #0
 801199a:	e001      	b.n	80119a0 <pbuf_alloc+0x1cc>
      break;
 801199c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	3728      	adds	r7, #40	@ 0x28
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}
 80119a8:	0801ebd4 	.word	0x0801ebd4
 80119ac:	0801ec04 	.word	0x0801ec04
 80119b0:	0801ec34 	.word	0x0801ec34
 80119b4:	0801ec5c 	.word	0x0801ec5c
 80119b8:	0801ec90 	.word	0x0801ec90
 80119bc:	0801ecbc 	.word	0x0801ecbc

080119c0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b086      	sub	sp, #24
 80119c4:	af02      	add	r7, sp, #8
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	460b      	mov	r3, r1
 80119ca:	807b      	strh	r3, [r7, #2]
 80119cc:	4613      	mov	r3, r2
 80119ce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80119d0:	883b      	ldrh	r3, [r7, #0]
 80119d2:	2b41      	cmp	r3, #65	@ 0x41
 80119d4:	d009      	beq.n	80119ea <pbuf_alloc_reference+0x2a>
 80119d6:	883b      	ldrh	r3, [r7, #0]
 80119d8:	2b01      	cmp	r3, #1
 80119da:	d006      	beq.n	80119ea <pbuf_alloc_reference+0x2a>
 80119dc:	4b0f      	ldr	r3, [pc, #60]	@ (8011a1c <pbuf_alloc_reference+0x5c>)
 80119de:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80119e2:	490f      	ldr	r1, [pc, #60]	@ (8011a20 <pbuf_alloc_reference+0x60>)
 80119e4:	480f      	ldr	r0, [pc, #60]	@ (8011a24 <pbuf_alloc_reference+0x64>)
 80119e6:	f00a fe33 	bl	801c650 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80119ea:	200b      	movs	r0, #11
 80119ec:	f7ff f9c6 	bl	8010d7c <memp_malloc>
 80119f0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d101      	bne.n	80119fc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80119f8:	2300      	movs	r3, #0
 80119fa:	e00b      	b.n	8011a14 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80119fc:	8879      	ldrh	r1, [r7, #2]
 80119fe:	887a      	ldrh	r2, [r7, #2]
 8011a00:	2300      	movs	r3, #0
 8011a02:	9301      	str	r3, [sp, #4]
 8011a04:	883b      	ldrh	r3, [r7, #0]
 8011a06:	9300      	str	r3, [sp, #0]
 8011a08:	460b      	mov	r3, r1
 8011a0a:	6879      	ldr	r1, [r7, #4]
 8011a0c:	68f8      	ldr	r0, [r7, #12]
 8011a0e:	f7ff feb7 	bl	8011780 <pbuf_init_alloced_pbuf>
  return p;
 8011a12:	68fb      	ldr	r3, [r7, #12]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3710      	adds	r7, #16
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	0801ebd4 	.word	0x0801ebd4
 8011a20:	0801ecd8 	.word	0x0801ecd8
 8011a24:	0801ec34 	.word	0x0801ec34

08011a28 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b088      	sub	sp, #32
 8011a2c:	af02      	add	r7, sp, #8
 8011a2e:	607b      	str	r3, [r7, #4]
 8011a30:	4603      	mov	r3, r0
 8011a32:	73fb      	strb	r3, [r7, #15]
 8011a34:	460b      	mov	r3, r1
 8011a36:	81bb      	strh	r3, [r7, #12]
 8011a38:	4613      	mov	r3, r2
 8011a3a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011a3c:	7bfb      	ldrb	r3, [r7, #15]
 8011a3e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011a40:	8a7b      	ldrh	r3, [r7, #18]
 8011a42:	3303      	adds	r3, #3
 8011a44:	f023 0203 	bic.w	r2, r3, #3
 8011a48:	89bb      	ldrh	r3, [r7, #12]
 8011a4a:	441a      	add	r2, r3
 8011a4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d901      	bls.n	8011a56 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011a52:	2300      	movs	r3, #0
 8011a54:	e018      	b.n	8011a88 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011a56:	6a3b      	ldr	r3, [r7, #32]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d007      	beq.n	8011a6c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011a5c:	8a7b      	ldrh	r3, [r7, #18]
 8011a5e:	3303      	adds	r3, #3
 8011a60:	f023 0303 	bic.w	r3, r3, #3
 8011a64:	6a3a      	ldr	r2, [r7, #32]
 8011a66:	4413      	add	r3, r2
 8011a68:	617b      	str	r3, [r7, #20]
 8011a6a:	e001      	b.n	8011a70 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	89b9      	ldrh	r1, [r7, #12]
 8011a74:	89ba      	ldrh	r2, [r7, #12]
 8011a76:	2302      	movs	r3, #2
 8011a78:	9301      	str	r3, [sp, #4]
 8011a7a:	897b      	ldrh	r3, [r7, #10]
 8011a7c:	9300      	str	r3, [sp, #0]
 8011a7e:	460b      	mov	r3, r1
 8011a80:	6979      	ldr	r1, [r7, #20]
 8011a82:	f7ff fe7d 	bl	8011780 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011a86:	687b      	ldr	r3, [r7, #4]
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3718      	adds	r7, #24
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	460b      	mov	r3, r1
 8011a9a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d106      	bne.n	8011ab0 <pbuf_realloc+0x20>
 8011aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8011b8c <pbuf_realloc+0xfc>)
 8011aa4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8011aa8:	4939      	ldr	r1, [pc, #228]	@ (8011b90 <pbuf_realloc+0x100>)
 8011aaa:	483a      	ldr	r0, [pc, #232]	@ (8011b94 <pbuf_realloc+0x104>)
 8011aac:	f00a fdd0 	bl	801c650 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	891b      	ldrh	r3, [r3, #8]
 8011ab4:	887a      	ldrh	r2, [r7, #2]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d263      	bcs.n	8011b82 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	891a      	ldrh	r2, [r3, #8]
 8011abe:	887b      	ldrh	r3, [r7, #2]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011ac4:	887b      	ldrh	r3, [r7, #2]
 8011ac6:	817b      	strh	r3, [r7, #10]
  q = p;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011acc:	e018      	b.n	8011b00 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	895b      	ldrh	r3, [r3, #10]
 8011ad2:	897a      	ldrh	r2, [r7, #10]
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	891a      	ldrh	r2, [r3, #8]
 8011adc:	893b      	ldrh	r3, [r7, #8]
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d106      	bne.n	8011b00 <pbuf_realloc+0x70>
 8011af2:	4b26      	ldr	r3, [pc, #152]	@ (8011b8c <pbuf_realloc+0xfc>)
 8011af4:	f240 12af 	movw	r2, #431	@ 0x1af
 8011af8:	4927      	ldr	r1, [pc, #156]	@ (8011b98 <pbuf_realloc+0x108>)
 8011afa:	4826      	ldr	r0, [pc, #152]	@ (8011b94 <pbuf_realloc+0x104>)
 8011afc:	f00a fda8 	bl	801c650 <iprintf>
  while (rem_len > q->len) {
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	895b      	ldrh	r3, [r3, #10]
 8011b04:	897a      	ldrh	r2, [r7, #10]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d8e1      	bhi.n	8011ace <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	7b1b      	ldrb	r3, [r3, #12]
 8011b0e:	f003 030f 	and.w	r3, r3, #15
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d121      	bne.n	8011b5a <pbuf_realloc+0xca>
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	895b      	ldrh	r3, [r3, #10]
 8011b1a:	897a      	ldrh	r2, [r7, #10]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d01c      	beq.n	8011b5a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	7b5b      	ldrb	r3, [r3, #13]
 8011b24:	f003 0302 	and.w	r3, r3, #2
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d116      	bne.n	8011b5a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	685a      	ldr	r2, [r3, #4]
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	897b      	ldrh	r3, [r7, #10]
 8011b38:	4413      	add	r3, r2
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	68f8      	ldr	r0, [r7, #12]
 8011b40:	f7fe fe6e 	bl	8010820 <mem_trim>
 8011b44:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d106      	bne.n	8011b5a <pbuf_realloc+0xca>
 8011b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8011b8c <pbuf_realloc+0xfc>)
 8011b4e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8011b52:	4912      	ldr	r1, [pc, #72]	@ (8011b9c <pbuf_realloc+0x10c>)
 8011b54:	480f      	ldr	r0, [pc, #60]	@ (8011b94 <pbuf_realloc+0x104>)
 8011b56:	f00a fd7b 	bl	801c650 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	897a      	ldrh	r2, [r7, #10]
 8011b5e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	895a      	ldrh	r2, [r3, #10]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d004      	beq.n	8011b7a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f000 f911 	bl	8011d9c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	601a      	str	r2, [r3, #0]
 8011b80:	e000      	b.n	8011b84 <pbuf_realloc+0xf4>
    return;
 8011b82:	bf00      	nop

}
 8011b84:	3710      	adds	r7, #16
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
 8011b8a:	bf00      	nop
 8011b8c:	0801ebd4 	.word	0x0801ebd4
 8011b90:	0801ecec 	.word	0x0801ecec
 8011b94:	0801ec34 	.word	0x0801ec34
 8011b98:	0801ed04 	.word	0x0801ed04
 8011b9c:	0801ed1c 	.word	0x0801ed1c

08011ba0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b086      	sub	sp, #24
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	4613      	mov	r3, r2
 8011bac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d106      	bne.n	8011bc2 <pbuf_add_header_impl+0x22>
 8011bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8011c64 <pbuf_add_header_impl+0xc4>)
 8011bb6:	f240 12df 	movw	r2, #479	@ 0x1df
 8011bba:	492b      	ldr	r1, [pc, #172]	@ (8011c68 <pbuf_add_header_impl+0xc8>)
 8011bbc:	482b      	ldr	r0, [pc, #172]	@ (8011c6c <pbuf_add_header_impl+0xcc>)
 8011bbe:	f00a fd47 	bl	801c650 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d003      	beq.n	8011bd0 <pbuf_add_header_impl+0x30>
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011bce:	d301      	bcc.n	8011bd4 <pbuf_add_header_impl+0x34>
    return 1;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	e043      	b.n	8011c5c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d101      	bne.n	8011bde <pbuf_add_header_impl+0x3e>
    return 0;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	e03e      	b.n	8011c5c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	891a      	ldrh	r2, [r3, #8]
 8011be6:	8a7b      	ldrh	r3, [r7, #18]
 8011be8:	4413      	add	r3, r2
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	8a7a      	ldrh	r2, [r7, #18]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d901      	bls.n	8011bf6 <pbuf_add_header_impl+0x56>
    return 1;
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	e032      	b.n	8011c5c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	7b1b      	ldrb	r3, [r3, #12]
 8011bfa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011bfc:	8a3b      	ldrh	r3, [r7, #16]
 8011bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d00c      	beq.n	8011c20 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	685a      	ldr	r2, [r3, #4]
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	425b      	negs	r3, r3
 8011c0e:	4413      	add	r3, r2
 8011c10:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	3310      	adds	r3, #16
 8011c16:	697a      	ldr	r2, [r7, #20]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d20d      	bcs.n	8011c38 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	e01d      	b.n	8011c5c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011c20:	79fb      	ldrb	r3, [r7, #7]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d006      	beq.n	8011c34 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	685a      	ldr	r2, [r3, #4]
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	425b      	negs	r3, r3
 8011c2e:	4413      	add	r3, r2
 8011c30:	617b      	str	r3, [r7, #20]
 8011c32:	e001      	b.n	8011c38 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011c34:	2301      	movs	r3, #1
 8011c36:	e011      	b.n	8011c5c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	895a      	ldrh	r2, [r3, #10]
 8011c42:	8a7b      	ldrh	r3, [r7, #18]
 8011c44:	4413      	add	r3, r2
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	891a      	ldrh	r2, [r3, #8]
 8011c50:	8a7b      	ldrh	r3, [r7, #18]
 8011c52:	4413      	add	r3, r2
 8011c54:	b29a      	uxth	r2, r3
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	811a      	strh	r2, [r3, #8]


  return 0;
 8011c5a:	2300      	movs	r3, #0
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3718      	adds	r7, #24
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	0801ebd4 	.word	0x0801ebd4
 8011c68:	0801ed38 	.word	0x0801ed38
 8011c6c:	0801ec34 	.word	0x0801ec34

08011c70 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	6839      	ldr	r1, [r7, #0]
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7ff ff8e 	bl	8011ba0 <pbuf_add_header_impl>
 8011c84:	4603      	mov	r3, r0
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3708      	adds	r7, #8
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
	...

08011c90 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d106      	bne.n	8011cae <pbuf_remove_header+0x1e>
 8011ca0:	4b20      	ldr	r3, [pc, #128]	@ (8011d24 <pbuf_remove_header+0x94>)
 8011ca2:	f240 224b 	movw	r2, #587	@ 0x24b
 8011ca6:	4920      	ldr	r1, [pc, #128]	@ (8011d28 <pbuf_remove_header+0x98>)
 8011ca8:	4820      	ldr	r0, [pc, #128]	@ (8011d2c <pbuf_remove_header+0x9c>)
 8011caa:	f00a fcd1 	bl	801c650 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d003      	beq.n	8011cbc <pbuf_remove_header+0x2c>
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011cba:	d301      	bcc.n	8011cc0 <pbuf_remove_header+0x30>
    return 1;
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	e02c      	b.n	8011d1a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d101      	bne.n	8011cca <pbuf_remove_header+0x3a>
    return 0;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	e027      	b.n	8011d1a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	895b      	ldrh	r3, [r3, #10]
 8011cd2:	89fa      	ldrh	r2, [r7, #14]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d908      	bls.n	8011cea <pbuf_remove_header+0x5a>
 8011cd8:	4b12      	ldr	r3, [pc, #72]	@ (8011d24 <pbuf_remove_header+0x94>)
 8011cda:	f240 2255 	movw	r2, #597	@ 0x255
 8011cde:	4914      	ldr	r1, [pc, #80]	@ (8011d30 <pbuf_remove_header+0xa0>)
 8011ce0:	4812      	ldr	r0, [pc, #72]	@ (8011d2c <pbuf_remove_header+0x9c>)
 8011ce2:	f00a fcb5 	bl	801c650 <iprintf>
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	e017      	b.n	8011d1a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	685a      	ldr	r2, [r3, #4]
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	441a      	add	r2, r3
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	895a      	ldrh	r2, [r3, #10]
 8011d00:	89fb      	ldrh	r3, [r7, #14]
 8011d02:	1ad3      	subs	r3, r2, r3
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	891a      	ldrh	r2, [r3, #8]
 8011d0e:	89fb      	ldrh	r3, [r7, #14]
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011d18:	2300      	movs	r3, #0
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	0801ebd4 	.word	0x0801ebd4
 8011d28:	0801ed38 	.word	0x0801ed38
 8011d2c:	0801ec34 	.word	0x0801ec34
 8011d30:	0801ed44 	.word	0x0801ed44

08011d34 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	807b      	strh	r3, [r7, #2]
 8011d40:	4613      	mov	r3, r2
 8011d42:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011d44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	da08      	bge.n	8011d5e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011d4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d50:	425b      	negs	r3, r3
 8011d52:	4619      	mov	r1, r3
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7ff ff9b 	bl	8011c90 <pbuf_remove_header>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	e007      	b.n	8011d6e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d62:	787a      	ldrb	r2, [r7, #1]
 8011d64:	4619      	mov	r1, r3
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f7ff ff1a 	bl	8011ba0 <pbuf_add_header_impl>
 8011d6c:	4603      	mov	r3, r0
  }
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3708      	adds	r7, #8
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b082      	sub	sp, #8
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	6078      	str	r0, [r7, #4]
 8011d7e:	460b      	mov	r3, r1
 8011d80:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011d82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d86:	2201      	movs	r2, #1
 8011d88:	4619      	mov	r1, r3
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f7ff ffd2 	bl	8011d34 <pbuf_header_impl>
 8011d90:	4603      	mov	r3, r0
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
	...

08011d9c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b088      	sub	sp, #32
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d10b      	bne.n	8011dc2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d106      	bne.n	8011dbe <pbuf_free+0x22>
 8011db0:	4b3b      	ldr	r3, [pc, #236]	@ (8011ea0 <pbuf_free+0x104>)
 8011db2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8011db6:	493b      	ldr	r1, [pc, #236]	@ (8011ea4 <pbuf_free+0x108>)
 8011db8:	483b      	ldr	r0, [pc, #236]	@ (8011ea8 <pbuf_free+0x10c>)
 8011dba:	f00a fc49 	bl	801c650 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	e069      	b.n	8011e96 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011dc6:	e062      	b.n	8011e8e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011dc8:	f00a f9e4 	bl	801c194 <sys_arch_protect>
 8011dcc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	7b9b      	ldrb	r3, [r3, #14]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d106      	bne.n	8011de4 <pbuf_free+0x48>
 8011dd6:	4b32      	ldr	r3, [pc, #200]	@ (8011ea0 <pbuf_free+0x104>)
 8011dd8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8011ddc:	4933      	ldr	r1, [pc, #204]	@ (8011eac <pbuf_free+0x110>)
 8011dde:	4832      	ldr	r0, [pc, #200]	@ (8011ea8 <pbuf_free+0x10c>)
 8011de0:	f00a fc36 	bl	801c650 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	7b9b      	ldrb	r3, [r3, #14]
 8011de8:	3b01      	subs	r3, #1
 8011dea:	b2da      	uxtb	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	739a      	strb	r2, [r3, #14]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	7b9b      	ldrb	r3, [r3, #14]
 8011df4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011df6:	69b8      	ldr	r0, [r7, #24]
 8011df8:	f00a f9da 	bl	801c1b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011dfc:	7dfb      	ldrb	r3, [r7, #23]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d143      	bne.n	8011e8a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	7b1b      	ldrb	r3, [r3, #12]
 8011e0c:	f003 030f 	and.w	r3, r3, #15
 8011e10:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	7b5b      	ldrb	r3, [r3, #13]
 8011e16:	f003 0302 	and.w	r3, r3, #2
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d011      	beq.n	8011e42 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	691b      	ldr	r3, [r3, #16]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d106      	bne.n	8011e38 <pbuf_free+0x9c>
 8011e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8011ea0 <pbuf_free+0x104>)
 8011e2c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8011e30:	491f      	ldr	r1, [pc, #124]	@ (8011eb0 <pbuf_free+0x114>)
 8011e32:	481d      	ldr	r0, [pc, #116]	@ (8011ea8 <pbuf_free+0x10c>)
 8011e34:	f00a fc0c 	bl	801c650 <iprintf>
        pc->custom_free_function(p);
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	691b      	ldr	r3, [r3, #16]
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	4798      	blx	r3
 8011e40:	e01d      	b.n	8011e7e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011e42:	7bfb      	ldrb	r3, [r7, #15]
 8011e44:	2b02      	cmp	r3, #2
 8011e46:	d104      	bne.n	8011e52 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011e48:	6879      	ldr	r1, [r7, #4]
 8011e4a:	200c      	movs	r0, #12
 8011e4c:	f7ff f80c 	bl	8010e68 <memp_free>
 8011e50:	e015      	b.n	8011e7e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011e52:	7bfb      	ldrb	r3, [r7, #15]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d104      	bne.n	8011e62 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011e58:	6879      	ldr	r1, [r7, #4]
 8011e5a:	200b      	movs	r0, #11
 8011e5c:	f7ff f804 	bl	8010e68 <memp_free>
 8011e60:	e00d      	b.n	8011e7e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011e62:	7bfb      	ldrb	r3, [r7, #15]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d103      	bne.n	8011e70 <pbuf_free+0xd4>
          mem_free(p);
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f7fe fc49 	bl	8010700 <mem_free>
 8011e6e:	e006      	b.n	8011e7e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011e70:	4b0b      	ldr	r3, [pc, #44]	@ (8011ea0 <pbuf_free+0x104>)
 8011e72:	f240 320f 	movw	r2, #783	@ 0x30f
 8011e76:	490f      	ldr	r1, [pc, #60]	@ (8011eb4 <pbuf_free+0x118>)
 8011e78:	480b      	ldr	r0, [pc, #44]	@ (8011ea8 <pbuf_free+0x10c>)
 8011e7a:	f00a fbe9 	bl	801c650 <iprintf>
        }
      }
      count++;
 8011e7e:	7ffb      	ldrb	r3, [r7, #31]
 8011e80:	3301      	adds	r3, #1
 8011e82:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	607b      	str	r3, [r7, #4]
 8011e88:	e001      	b.n	8011e8e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d199      	bne.n	8011dc8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011e94:	7ffb      	ldrb	r3, [r7, #31]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3720      	adds	r7, #32
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	0801ebd4 	.word	0x0801ebd4
 8011ea4:	0801ed38 	.word	0x0801ed38
 8011ea8:	0801ec34 	.word	0x0801ec34
 8011eac:	0801ed64 	.word	0x0801ed64
 8011eb0:	0801ed7c 	.word	0x0801ed7c
 8011eb4:	0801eda0 	.word	0x0801eda0

08011eb8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b085      	sub	sp, #20
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011ec4:	e005      	b.n	8011ed2 <pbuf_clen+0x1a>
    ++len;
 8011ec6:	89fb      	ldrh	r3, [r7, #14]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d1f6      	bne.n	8011ec6 <pbuf_clen+0xe>
  }
  return len;
 8011ed8:	89fb      	ldrh	r3, [r7, #14]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3714      	adds	r7, #20
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr
	...

08011ee8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d016      	beq.n	8011f24 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011ef6:	f00a f94d 	bl	801c194 <sys_arch_protect>
 8011efa:	60f8      	str	r0, [r7, #12]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	7b9b      	ldrb	r3, [r3, #14]
 8011f00:	3301      	adds	r3, #1
 8011f02:	b2da      	uxtb	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	739a      	strb	r2, [r3, #14]
 8011f08:	68f8      	ldr	r0, [r7, #12]
 8011f0a:	f00a f951 	bl	801c1b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	7b9b      	ldrb	r3, [r3, #14]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <pbuf_ref+0x3c>
 8011f16:	4b05      	ldr	r3, [pc, #20]	@ (8011f2c <pbuf_ref+0x44>)
 8011f18:	f240 3242 	movw	r2, #834	@ 0x342
 8011f1c:	4904      	ldr	r1, [pc, #16]	@ (8011f30 <pbuf_ref+0x48>)
 8011f1e:	4805      	ldr	r0, [pc, #20]	@ (8011f34 <pbuf_ref+0x4c>)
 8011f20:	f00a fb96 	bl	801c650 <iprintf>
  }
}
 8011f24:	bf00      	nop
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	0801ebd4 	.word	0x0801ebd4
 8011f30:	0801edb4 	.word	0x0801edb4
 8011f34:	0801ec34 	.word	0x0801ec34

08011f38 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d002      	beq.n	8011f4e <pbuf_cat+0x16>
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d107      	bne.n	8011f5e <pbuf_cat+0x26>
 8011f4e:	4b20      	ldr	r3, [pc, #128]	@ (8011fd0 <pbuf_cat+0x98>)
 8011f50:	f240 3259 	movw	r2, #857	@ 0x359
 8011f54:	491f      	ldr	r1, [pc, #124]	@ (8011fd4 <pbuf_cat+0x9c>)
 8011f56:	4820      	ldr	r0, [pc, #128]	@ (8011fd8 <pbuf_cat+0xa0>)
 8011f58:	f00a fb7a 	bl	801c650 <iprintf>
 8011f5c:	e034      	b.n	8011fc8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	60fb      	str	r3, [r7, #12]
 8011f62:	e00a      	b.n	8011f7a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	891a      	ldrh	r2, [r3, #8]
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	891b      	ldrh	r3, [r3, #8]
 8011f6c:	4413      	add	r3, r2
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d1f0      	bne.n	8011f64 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	891a      	ldrh	r2, [r3, #8]
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	895b      	ldrh	r3, [r3, #10]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d006      	beq.n	8011f9c <pbuf_cat+0x64>
 8011f8e:	4b10      	ldr	r3, [pc, #64]	@ (8011fd0 <pbuf_cat+0x98>)
 8011f90:	f240 3262 	movw	r2, #866	@ 0x362
 8011f94:	4911      	ldr	r1, [pc, #68]	@ (8011fdc <pbuf_cat+0xa4>)
 8011f96:	4810      	ldr	r0, [pc, #64]	@ (8011fd8 <pbuf_cat+0xa0>)
 8011f98:	f00a fb5a 	bl	801c650 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d006      	beq.n	8011fb2 <pbuf_cat+0x7a>
 8011fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8011fd0 <pbuf_cat+0x98>)
 8011fa6:	f240 3263 	movw	r2, #867	@ 0x363
 8011faa:	490d      	ldr	r1, [pc, #52]	@ (8011fe0 <pbuf_cat+0xa8>)
 8011fac:	480a      	ldr	r0, [pc, #40]	@ (8011fd8 <pbuf_cat+0xa0>)
 8011fae:	f00a fb4f 	bl	801c650 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	891a      	ldrh	r2, [r3, #8]
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	891b      	ldrh	r3, [r3, #8]
 8011fba:	4413      	add	r3, r2
 8011fbc:	b29a      	uxth	r2, r3
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	683a      	ldr	r2, [r7, #0]
 8011fc6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011fc8:	3710      	adds	r7, #16
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	0801ebd4 	.word	0x0801ebd4
 8011fd4:	0801edc8 	.word	0x0801edc8
 8011fd8:	0801ec34 	.word	0x0801ec34
 8011fdc:	0801ee00 	.word	0x0801ee00
 8011fe0:	0801ee30 	.word	0x0801ee30

08011fe4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011fee:	6839      	ldr	r1, [r7, #0]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7ff ffa1 	bl	8011f38 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011ff6:	6838      	ldr	r0, [r7, #0]
 8011ff8:	f7ff ff76 	bl	8011ee8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011ffc:	bf00      	nop
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b086      	sub	sp, #24
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801200e:	2300      	movs	r3, #0
 8012010:	617b      	str	r3, [r7, #20]
 8012012:	2300      	movs	r3, #0
 8012014:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d008      	beq.n	801202e <pbuf_copy+0x2a>
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d005      	beq.n	801202e <pbuf_copy+0x2a>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	891a      	ldrh	r2, [r3, #8]
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	891b      	ldrh	r3, [r3, #8]
 801202a:	429a      	cmp	r2, r3
 801202c:	d209      	bcs.n	8012042 <pbuf_copy+0x3e>
 801202e:	4b57      	ldr	r3, [pc, #348]	@ (801218c <pbuf_copy+0x188>)
 8012030:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012034:	4956      	ldr	r1, [pc, #344]	@ (8012190 <pbuf_copy+0x18c>)
 8012036:	4857      	ldr	r0, [pc, #348]	@ (8012194 <pbuf_copy+0x190>)
 8012038:	f00a fb0a 	bl	801c650 <iprintf>
 801203c:	f06f 030f 	mvn.w	r3, #15
 8012040:	e09f      	b.n	8012182 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	895b      	ldrh	r3, [r3, #10]
 8012046:	461a      	mov	r2, r3
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	1ad2      	subs	r2, r2, r3
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	895b      	ldrh	r3, [r3, #10]
 8012050:	4619      	mov	r1, r3
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	1acb      	subs	r3, r1, r3
 8012056:	429a      	cmp	r2, r3
 8012058:	d306      	bcc.n	8012068 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	895b      	ldrh	r3, [r3, #10]
 801205e:	461a      	mov	r2, r3
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	1ad3      	subs	r3, r2, r3
 8012064:	60fb      	str	r3, [r7, #12]
 8012066:	e005      	b.n	8012074 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	895b      	ldrh	r3, [r3, #10]
 801206c:	461a      	mov	r2, r3
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	1ad3      	subs	r3, r2, r3
 8012072:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	685a      	ldr	r2, [r3, #4]
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	18d0      	adds	r0, r2, r3
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	685a      	ldr	r2, [r3, #4]
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	4413      	add	r3, r2
 8012084:	68fa      	ldr	r2, [r7, #12]
 8012086:	4619      	mov	r1, r3
 8012088:	f00a fcb7 	bl	801c9fa <memcpy>
    offset_to += len;
 801208c:	697a      	ldr	r2, [r7, #20]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	4413      	add	r3, r2
 8012092:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012094:	693a      	ldr	r2, [r7, #16]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	4413      	add	r3, r2
 801209a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	895b      	ldrh	r3, [r3, #10]
 80120a0:	461a      	mov	r2, r3
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	4293      	cmp	r3, r2
 80120a6:	d906      	bls.n	80120b6 <pbuf_copy+0xb2>
 80120a8:	4b38      	ldr	r3, [pc, #224]	@ (801218c <pbuf_copy+0x188>)
 80120aa:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80120ae:	493a      	ldr	r1, [pc, #232]	@ (8012198 <pbuf_copy+0x194>)
 80120b0:	4838      	ldr	r0, [pc, #224]	@ (8012194 <pbuf_copy+0x190>)
 80120b2:	f00a facd 	bl	801c650 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	895b      	ldrh	r3, [r3, #10]
 80120ba:	461a      	mov	r2, r3
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	4293      	cmp	r3, r2
 80120c0:	d906      	bls.n	80120d0 <pbuf_copy+0xcc>
 80120c2:	4b32      	ldr	r3, [pc, #200]	@ (801218c <pbuf_copy+0x188>)
 80120c4:	f240 32da 	movw	r2, #986	@ 0x3da
 80120c8:	4934      	ldr	r1, [pc, #208]	@ (801219c <pbuf_copy+0x198>)
 80120ca:	4832      	ldr	r0, [pc, #200]	@ (8012194 <pbuf_copy+0x190>)
 80120cc:	f00a fac0 	bl	801c650 <iprintf>
    if (offset_from >= p_from->len) {
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	895b      	ldrh	r3, [r3, #10]
 80120d4:	461a      	mov	r2, r3
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	4293      	cmp	r3, r2
 80120da:	d304      	bcc.n	80120e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80120dc:	2300      	movs	r3, #0
 80120de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	895b      	ldrh	r3, [r3, #10]
 80120ea:	461a      	mov	r2, r3
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d114      	bne.n	801211c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80120f2:	2300      	movs	r3, #0
 80120f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d10c      	bne.n	801211c <pbuf_copy+0x118>
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d009      	beq.n	801211c <pbuf_copy+0x118>
 8012108:	4b20      	ldr	r3, [pc, #128]	@ (801218c <pbuf_copy+0x188>)
 801210a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801210e:	4924      	ldr	r1, [pc, #144]	@ (80121a0 <pbuf_copy+0x19c>)
 8012110:	4820      	ldr	r0, [pc, #128]	@ (8012194 <pbuf_copy+0x190>)
 8012112:	f00a fa9d 	bl	801c650 <iprintf>
 8012116:	f06f 030f 	mvn.w	r3, #15
 801211a:	e032      	b.n	8012182 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d013      	beq.n	801214a <pbuf_copy+0x146>
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	895a      	ldrh	r2, [r3, #10]
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	891b      	ldrh	r3, [r3, #8]
 801212a:	429a      	cmp	r2, r3
 801212c:	d10d      	bne.n	801214a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d009      	beq.n	801214a <pbuf_copy+0x146>
 8012136:	4b15      	ldr	r3, [pc, #84]	@ (801218c <pbuf_copy+0x188>)
 8012138:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801213c:	4919      	ldr	r1, [pc, #100]	@ (80121a4 <pbuf_copy+0x1a0>)
 801213e:	4815      	ldr	r0, [pc, #84]	@ (8012194 <pbuf_copy+0x190>)
 8012140:	f00a fa86 	bl	801c650 <iprintf>
 8012144:	f06f 0305 	mvn.w	r3, #5
 8012148:	e01b      	b.n	8012182 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d013      	beq.n	8012178 <pbuf_copy+0x174>
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	895a      	ldrh	r2, [r3, #10]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	891b      	ldrh	r3, [r3, #8]
 8012158:	429a      	cmp	r2, r3
 801215a:	d10d      	bne.n	8012178 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d009      	beq.n	8012178 <pbuf_copy+0x174>
 8012164:	4b09      	ldr	r3, [pc, #36]	@ (801218c <pbuf_copy+0x188>)
 8012166:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801216a:	490e      	ldr	r1, [pc, #56]	@ (80121a4 <pbuf_copy+0x1a0>)
 801216c:	4809      	ldr	r0, [pc, #36]	@ (8012194 <pbuf_copy+0x190>)
 801216e:	f00a fa6f 	bl	801c650 <iprintf>
 8012172:	f06f 0305 	mvn.w	r3, #5
 8012176:	e004      	b.n	8012182 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	f47f af61 	bne.w	8012042 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3718      	adds	r7, #24
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	0801ebd4 	.word	0x0801ebd4
 8012190:	0801ee7c 	.word	0x0801ee7c
 8012194:	0801ec34 	.word	0x0801ec34
 8012198:	0801eeac 	.word	0x0801eeac
 801219c:	0801eec4 	.word	0x0801eec4
 80121a0:	0801eee0 	.word	0x0801eee0
 80121a4:	0801eef0 	.word	0x0801eef0

080121a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b088      	sub	sp, #32
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	4611      	mov	r1, r2
 80121b4:	461a      	mov	r2, r3
 80121b6:	460b      	mov	r3, r1
 80121b8:	80fb      	strh	r3, [r7, #6]
 80121ba:	4613      	mov	r3, r2
 80121bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80121c2:	2300      	movs	r3, #0
 80121c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d108      	bne.n	80121de <pbuf_copy_partial+0x36>
 80121cc:	4b2b      	ldr	r3, [pc, #172]	@ (801227c <pbuf_copy_partial+0xd4>)
 80121ce:	f240 420a 	movw	r2, #1034	@ 0x40a
 80121d2:	492b      	ldr	r1, [pc, #172]	@ (8012280 <pbuf_copy_partial+0xd8>)
 80121d4:	482b      	ldr	r0, [pc, #172]	@ (8012284 <pbuf_copy_partial+0xdc>)
 80121d6:	f00a fa3b 	bl	801c650 <iprintf>
 80121da:	2300      	movs	r3, #0
 80121dc:	e04a      	b.n	8012274 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d108      	bne.n	80121f6 <pbuf_copy_partial+0x4e>
 80121e4:	4b25      	ldr	r3, [pc, #148]	@ (801227c <pbuf_copy_partial+0xd4>)
 80121e6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80121ea:	4927      	ldr	r1, [pc, #156]	@ (8012288 <pbuf_copy_partial+0xe0>)
 80121ec:	4825      	ldr	r0, [pc, #148]	@ (8012284 <pbuf_copy_partial+0xdc>)
 80121ee:	f00a fa2f 	bl	801c650 <iprintf>
 80121f2:	2300      	movs	r3, #0
 80121f4:	e03e      	b.n	8012274 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	61fb      	str	r3, [r7, #28]
 80121fa:	e034      	b.n	8012266 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80121fc:	88bb      	ldrh	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00a      	beq.n	8012218 <pbuf_copy_partial+0x70>
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	895b      	ldrh	r3, [r3, #10]
 8012206:	88ba      	ldrh	r2, [r7, #4]
 8012208:	429a      	cmp	r2, r3
 801220a:	d305      	bcc.n	8012218 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	895b      	ldrh	r3, [r3, #10]
 8012210:	88ba      	ldrh	r2, [r7, #4]
 8012212:	1ad3      	subs	r3, r2, r3
 8012214:	80bb      	strh	r3, [r7, #4]
 8012216:	e023      	b.n	8012260 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	895a      	ldrh	r2, [r3, #10]
 801221c:	88bb      	ldrh	r3, [r7, #4]
 801221e:	1ad3      	subs	r3, r2, r3
 8012220:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012222:	8b3a      	ldrh	r2, [r7, #24]
 8012224:	88fb      	ldrh	r3, [r7, #6]
 8012226:	429a      	cmp	r2, r3
 8012228:	d901      	bls.n	801222e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801222a:	88fb      	ldrh	r3, [r7, #6]
 801222c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801222e:	8b7b      	ldrh	r3, [r7, #26]
 8012230:	68ba      	ldr	r2, [r7, #8]
 8012232:	18d0      	adds	r0, r2, r3
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	685a      	ldr	r2, [r3, #4]
 8012238:	88bb      	ldrh	r3, [r7, #4]
 801223a:	4413      	add	r3, r2
 801223c:	8b3a      	ldrh	r2, [r7, #24]
 801223e:	4619      	mov	r1, r3
 8012240:	f00a fbdb 	bl	801c9fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012244:	8afa      	ldrh	r2, [r7, #22]
 8012246:	8b3b      	ldrh	r3, [r7, #24]
 8012248:	4413      	add	r3, r2
 801224a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801224c:	8b7a      	ldrh	r2, [r7, #26]
 801224e:	8b3b      	ldrh	r3, [r7, #24]
 8012250:	4413      	add	r3, r2
 8012252:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012254:	88fa      	ldrh	r2, [r7, #6]
 8012256:	8b3b      	ldrh	r3, [r7, #24]
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801225c:	2300      	movs	r3, #0
 801225e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	61fb      	str	r3, [r7, #28]
 8012266:	88fb      	ldrh	r3, [r7, #6]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d002      	beq.n	8012272 <pbuf_copy_partial+0xca>
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d1c4      	bne.n	80121fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012272:	8afb      	ldrh	r3, [r7, #22]
}
 8012274:	4618      	mov	r0, r3
 8012276:	3720      	adds	r7, #32
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	0801ebd4 	.word	0x0801ebd4
 8012280:	0801ef1c 	.word	0x0801ef1c
 8012284:	0801ec34 	.word	0x0801ec34
 8012288:	0801ef3c 	.word	0x0801ef3c

0801228c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	4603      	mov	r3, r0
 8012294:	603a      	str	r2, [r7, #0]
 8012296:	71fb      	strb	r3, [r7, #7]
 8012298:	460b      	mov	r3, r1
 801229a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	8919      	ldrh	r1, [r3, #8]
 80122a0:	88ba      	ldrh	r2, [r7, #4]
 80122a2:	79fb      	ldrb	r3, [r7, #7]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7ff fa95 	bl	80117d4 <pbuf_alloc>
 80122aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d101      	bne.n	80122b6 <pbuf_clone+0x2a>
    return NULL;
 80122b2:	2300      	movs	r3, #0
 80122b4:	e011      	b.n	80122da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f7ff fea3 	bl	8012004 <pbuf_copy>
 80122be:	4603      	mov	r3, r0
 80122c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80122c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d006      	beq.n	80122d8 <pbuf_clone+0x4c>
 80122ca:	4b06      	ldr	r3, [pc, #24]	@ (80122e4 <pbuf_clone+0x58>)
 80122cc:	f240 5224 	movw	r2, #1316	@ 0x524
 80122d0:	4905      	ldr	r1, [pc, #20]	@ (80122e8 <pbuf_clone+0x5c>)
 80122d2:	4806      	ldr	r0, [pc, #24]	@ (80122ec <pbuf_clone+0x60>)
 80122d4:	f00a f9bc 	bl	801c650 <iprintf>
  return q;
 80122d8:	68fb      	ldr	r3, [r7, #12]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	0801ebd4 	.word	0x0801ebd4
 80122e8:	0801f048 	.word	0x0801f048
 80122ec:	0801ec34 	.word	0x0801ec34

080122f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80122f4:	f00a f8ac 	bl	801c450 <rand>
 80122f8:	4603      	mov	r3, r0
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012300:	b29b      	uxth	r3, r3
 8012302:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012306:	b29a      	uxth	r2, r3
 8012308:	4b01      	ldr	r3, [pc, #4]	@ (8012310 <tcp_init+0x20>)
 801230a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801230c:	bf00      	nop
 801230e:	bd80      	pop	{r7, pc}
 8012310:	20000068 	.word	0x20000068

08012314 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	7d1b      	ldrb	r3, [r3, #20]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d105      	bne.n	8012330 <tcp_free+0x1c>
 8012324:	4b06      	ldr	r3, [pc, #24]	@ (8012340 <tcp_free+0x2c>)
 8012326:	22d4      	movs	r2, #212	@ 0xd4
 8012328:	4906      	ldr	r1, [pc, #24]	@ (8012344 <tcp_free+0x30>)
 801232a:	4807      	ldr	r0, [pc, #28]	@ (8012348 <tcp_free+0x34>)
 801232c:	f00a f990 	bl	801c650 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012330:	6879      	ldr	r1, [r7, #4]
 8012332:	2001      	movs	r0, #1
 8012334:	f7fe fd98 	bl	8010e68 <memp_free>
}
 8012338:	bf00      	nop
 801233a:	3708      	adds	r7, #8
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	0801f0d4 	.word	0x0801f0d4
 8012344:	0801f104 	.word	0x0801f104
 8012348:	0801f118 	.word	0x0801f118

0801234c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	7d1b      	ldrb	r3, [r3, #20]
 8012358:	2b01      	cmp	r3, #1
 801235a:	d105      	bne.n	8012368 <tcp_free_listen+0x1c>
 801235c:	4b06      	ldr	r3, [pc, #24]	@ (8012378 <tcp_free_listen+0x2c>)
 801235e:	22df      	movs	r2, #223	@ 0xdf
 8012360:	4906      	ldr	r1, [pc, #24]	@ (801237c <tcp_free_listen+0x30>)
 8012362:	4807      	ldr	r0, [pc, #28]	@ (8012380 <tcp_free_listen+0x34>)
 8012364:	f00a f974 	bl	801c650 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012368:	6879      	ldr	r1, [r7, #4]
 801236a:	2002      	movs	r0, #2
 801236c:	f7fe fd7c 	bl	8010e68 <memp_free>
}
 8012370:	bf00      	nop
 8012372:	3708      	adds	r7, #8
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}
 8012378:	0801f0d4 	.word	0x0801f0d4
 801237c:	0801f140 	.word	0x0801f140
 8012380:	0801f118 	.word	0x0801f118

08012384 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012388:	f001 f8f6 	bl	8013578 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801238c:	4b07      	ldr	r3, [pc, #28]	@ (80123ac <tcp_tmr+0x28>)
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	3301      	adds	r3, #1
 8012392:	b2da      	uxtb	r2, r3
 8012394:	4b05      	ldr	r3, [pc, #20]	@ (80123ac <tcp_tmr+0x28>)
 8012396:	701a      	strb	r2, [r3, #0]
 8012398:	4b04      	ldr	r3, [pc, #16]	@ (80123ac <tcp_tmr+0x28>)
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	f003 0301 	and.w	r3, r3, #1
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80123a4:	f000 fda6 	bl	8012ef4 <tcp_slowtmr>
  }
}
 80123a8:	bf00      	nop
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	200227b1 	.word	0x200227b1

080123b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d105      	bne.n	80123cc <tcp_remove_listener+0x1c>
 80123c0:	4b0d      	ldr	r3, [pc, #52]	@ (80123f8 <tcp_remove_listener+0x48>)
 80123c2:	22ff      	movs	r2, #255	@ 0xff
 80123c4:	490d      	ldr	r1, [pc, #52]	@ (80123fc <tcp_remove_listener+0x4c>)
 80123c6:	480e      	ldr	r0, [pc, #56]	@ (8012400 <tcp_remove_listener+0x50>)
 80123c8:	f00a f942 	bl	801c650 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	60fb      	str	r3, [r7, #12]
 80123d0:	e00a      	b.n	80123e8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80123d6:	683a      	ldr	r2, [r7, #0]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d102      	bne.n	80123e2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2200      	movs	r2, #0
 80123e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	68db      	ldr	r3, [r3, #12]
 80123e6:	60fb      	str	r3, [r7, #12]
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d1f1      	bne.n	80123d2 <tcp_remove_listener+0x22>
    }
  }
}
 80123ee:	bf00      	nop
 80123f0:	bf00      	nop
 80123f2:	3710      	adds	r7, #16
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	0801f0d4 	.word	0x0801f0d4
 80123fc:	0801f15c 	.word	0x0801f15c
 8012400:	0801f118 	.word	0x0801f118

08012404 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d106      	bne.n	8012420 <tcp_listen_closed+0x1c>
 8012412:	4b14      	ldr	r3, [pc, #80]	@ (8012464 <tcp_listen_closed+0x60>)
 8012414:	f240 1211 	movw	r2, #273	@ 0x111
 8012418:	4913      	ldr	r1, [pc, #76]	@ (8012468 <tcp_listen_closed+0x64>)
 801241a:	4814      	ldr	r0, [pc, #80]	@ (801246c <tcp_listen_closed+0x68>)
 801241c:	f00a f918 	bl	801c650 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	7d1b      	ldrb	r3, [r3, #20]
 8012424:	2b01      	cmp	r3, #1
 8012426:	d006      	beq.n	8012436 <tcp_listen_closed+0x32>
 8012428:	4b0e      	ldr	r3, [pc, #56]	@ (8012464 <tcp_listen_closed+0x60>)
 801242a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801242e:	4910      	ldr	r1, [pc, #64]	@ (8012470 <tcp_listen_closed+0x6c>)
 8012430:	480e      	ldr	r0, [pc, #56]	@ (801246c <tcp_listen_closed+0x68>)
 8012432:	f00a f90d 	bl	801c650 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012436:	2301      	movs	r3, #1
 8012438:	60fb      	str	r3, [r7, #12]
 801243a:	e00b      	b.n	8012454 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801243c:	4a0d      	ldr	r2, [pc, #52]	@ (8012474 <tcp_listen_closed+0x70>)
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	6879      	ldr	r1, [r7, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	f7ff ffb1 	bl	80123b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	3301      	adds	r3, #1
 8012452:	60fb      	str	r3, [r7, #12]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2b03      	cmp	r3, #3
 8012458:	d9f0      	bls.n	801243c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801245a:	bf00      	nop
 801245c:	bf00      	nop
 801245e:	3710      	adds	r7, #16
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	0801f0d4 	.word	0x0801f0d4
 8012468:	0801f184 	.word	0x0801f184
 801246c:	0801f118 	.word	0x0801f118
 8012470:	0801f190 	.word	0x0801f190
 8012474:	08021ad8 	.word	0x08021ad8

08012478 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012478:	b5b0      	push	{r4, r5, r7, lr}
 801247a:	b088      	sub	sp, #32
 801247c:	af04      	add	r7, sp, #16
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	460b      	mov	r3, r1
 8012482:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d106      	bne.n	8012498 <tcp_close_shutdown+0x20>
 801248a:	4b63      	ldr	r3, [pc, #396]	@ (8012618 <tcp_close_shutdown+0x1a0>)
 801248c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8012490:	4962      	ldr	r1, [pc, #392]	@ (801261c <tcp_close_shutdown+0x1a4>)
 8012492:	4863      	ldr	r0, [pc, #396]	@ (8012620 <tcp_close_shutdown+0x1a8>)
 8012494:	f00a f8dc 	bl	801c650 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012498:	78fb      	ldrb	r3, [r7, #3]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d066      	beq.n	801256c <tcp_close_shutdown+0xf4>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	7d1b      	ldrb	r3, [r3, #20]
 80124a2:	2b04      	cmp	r3, #4
 80124a4:	d003      	beq.n	80124ae <tcp_close_shutdown+0x36>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	7d1b      	ldrb	r3, [r3, #20]
 80124aa:	2b07      	cmp	r3, #7
 80124ac:	d15e      	bne.n	801256c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d104      	bne.n	80124c0 <tcp_close_shutdown+0x48>
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80124ba:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80124be:	d055      	beq.n	801256c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	8b5b      	ldrh	r3, [r3, #26]
 80124c4:	f003 0310 	and.w	r3, r3, #16
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d106      	bne.n	80124da <tcp_close_shutdown+0x62>
 80124cc:	4b52      	ldr	r3, [pc, #328]	@ (8012618 <tcp_close_shutdown+0x1a0>)
 80124ce:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80124d2:	4954      	ldr	r1, [pc, #336]	@ (8012624 <tcp_close_shutdown+0x1ac>)
 80124d4:	4852      	ldr	r0, [pc, #328]	@ (8012620 <tcp_close_shutdown+0x1a8>)
 80124d6:	f00a f8bb 	bl	801c650 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80124e2:	687d      	ldr	r5, [r7, #4]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	3304      	adds	r3, #4
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	8ad2      	ldrh	r2, [r2, #22]
 80124ec:	6879      	ldr	r1, [r7, #4]
 80124ee:	8b09      	ldrh	r1, [r1, #24]
 80124f0:	9102      	str	r1, [sp, #8]
 80124f2:	9201      	str	r2, [sp, #4]
 80124f4:	9300      	str	r3, [sp, #0]
 80124f6:	462b      	mov	r3, r5
 80124f8:	4622      	mov	r2, r4
 80124fa:	4601      	mov	r1, r0
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f005 fe79 	bl	80181f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f001 fbe8 	bl	8013cd8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012508:	4b47      	ldr	r3, [pc, #284]	@ (8012628 <tcp_close_shutdown+0x1b0>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	687a      	ldr	r2, [r7, #4]
 801250e:	429a      	cmp	r2, r3
 8012510:	d105      	bne.n	801251e <tcp_close_shutdown+0xa6>
 8012512:	4b45      	ldr	r3, [pc, #276]	@ (8012628 <tcp_close_shutdown+0x1b0>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	4a43      	ldr	r2, [pc, #268]	@ (8012628 <tcp_close_shutdown+0x1b0>)
 801251a:	6013      	str	r3, [r2, #0]
 801251c:	e013      	b.n	8012546 <tcp_close_shutdown+0xce>
 801251e:	4b42      	ldr	r3, [pc, #264]	@ (8012628 <tcp_close_shutdown+0x1b0>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	60fb      	str	r3, [r7, #12]
 8012524:	e00c      	b.n	8012540 <tcp_close_shutdown+0xc8>
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	429a      	cmp	r2, r3
 801252e:	d104      	bne.n	801253a <tcp_close_shutdown+0xc2>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	68da      	ldr	r2, [r3, #12]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	60da      	str	r2, [r3, #12]
 8012538:	e005      	b.n	8012546 <tcp_close_shutdown+0xce>
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	68db      	ldr	r3, [r3, #12]
 801253e:	60fb      	str	r3, [r7, #12]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d1ef      	bne.n	8012526 <tcp_close_shutdown+0xae>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	60da      	str	r2, [r3, #12]
 801254c:	4b37      	ldr	r3, [pc, #220]	@ (801262c <tcp_close_shutdown+0x1b4>)
 801254e:	2201      	movs	r2, #1
 8012550:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012552:	4b37      	ldr	r3, [pc, #220]	@ (8012630 <tcp_close_shutdown+0x1b8>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	429a      	cmp	r2, r3
 801255a:	d102      	bne.n	8012562 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801255c:	f004 f882 	bl	8016664 <tcp_trigger_input_pcb_close>
 8012560:	e002      	b.n	8012568 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f7ff fed6 	bl	8012314 <tcp_free>
      }
      return ERR_OK;
 8012568:	2300      	movs	r3, #0
 801256a:	e050      	b.n	801260e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	7d1b      	ldrb	r3, [r3, #20]
 8012570:	2b02      	cmp	r3, #2
 8012572:	d03b      	beq.n	80125ec <tcp_close_shutdown+0x174>
 8012574:	2b02      	cmp	r3, #2
 8012576:	dc44      	bgt.n	8012602 <tcp_close_shutdown+0x18a>
 8012578:	2b00      	cmp	r3, #0
 801257a:	d002      	beq.n	8012582 <tcp_close_shutdown+0x10a>
 801257c:	2b01      	cmp	r3, #1
 801257e:	d02a      	beq.n	80125d6 <tcp_close_shutdown+0x15e>
 8012580:	e03f      	b.n	8012602 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	8adb      	ldrh	r3, [r3, #22]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d021      	beq.n	80125ce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801258a:	4b2a      	ldr	r3, [pc, #168]	@ (8012634 <tcp_close_shutdown+0x1bc>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	429a      	cmp	r2, r3
 8012592:	d105      	bne.n	80125a0 <tcp_close_shutdown+0x128>
 8012594:	4b27      	ldr	r3, [pc, #156]	@ (8012634 <tcp_close_shutdown+0x1bc>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	4a26      	ldr	r2, [pc, #152]	@ (8012634 <tcp_close_shutdown+0x1bc>)
 801259c:	6013      	str	r3, [r2, #0]
 801259e:	e013      	b.n	80125c8 <tcp_close_shutdown+0x150>
 80125a0:	4b24      	ldr	r3, [pc, #144]	@ (8012634 <tcp_close_shutdown+0x1bc>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	60bb      	str	r3, [r7, #8]
 80125a6:	e00c      	b.n	80125c2 <tcp_close_shutdown+0x14a>
 80125a8:	68bb      	ldr	r3, [r7, #8]
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d104      	bne.n	80125bc <tcp_close_shutdown+0x144>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	68da      	ldr	r2, [r3, #12]
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	60da      	str	r2, [r3, #12]
 80125ba:	e005      	b.n	80125c8 <tcp_close_shutdown+0x150>
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	60bb      	str	r3, [r7, #8]
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d1ef      	bne.n	80125a8 <tcp_close_shutdown+0x130>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2200      	movs	r2, #0
 80125cc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f7ff fea0 	bl	8012314 <tcp_free>
      break;
 80125d4:	e01a      	b.n	801260c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f7ff ff14 	bl	8012404 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80125dc:	6879      	ldr	r1, [r7, #4]
 80125de:	4816      	ldr	r0, [pc, #88]	@ (8012638 <tcp_close_shutdown+0x1c0>)
 80125e0:	f001 fbca 	bl	8013d78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7ff feb1 	bl	801234c <tcp_free_listen>
      break;
 80125ea:	e00f      	b.n	801260c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80125ec:	6879      	ldr	r1, [r7, #4]
 80125ee:	480e      	ldr	r0, [pc, #56]	@ (8012628 <tcp_close_shutdown+0x1b0>)
 80125f0:	f001 fbc2 	bl	8013d78 <tcp_pcb_remove>
 80125f4:	4b0d      	ldr	r3, [pc, #52]	@ (801262c <tcp_close_shutdown+0x1b4>)
 80125f6:	2201      	movs	r2, #1
 80125f8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f7ff fe8a 	bl	8012314 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012600:	e004      	b.n	801260c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f000 f81a 	bl	801263c <tcp_close_shutdown_fin>
 8012608:	4603      	mov	r3, r0
 801260a:	e000      	b.n	801260e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801260c:	2300      	movs	r3, #0
}
 801260e:	4618      	mov	r0, r3
 8012610:	3710      	adds	r7, #16
 8012612:	46bd      	mov	sp, r7
 8012614:	bdb0      	pop	{r4, r5, r7, pc}
 8012616:	bf00      	nop
 8012618:	0801f0d4 	.word	0x0801f0d4
 801261c:	0801f1a8 	.word	0x0801f1a8
 8012620:	0801f118 	.word	0x0801f118
 8012624:	0801f1c8 	.word	0x0801f1c8
 8012628:	200227a8 	.word	0x200227a8
 801262c:	200227b0 	.word	0x200227b0
 8012630:	200227ec 	.word	0x200227ec
 8012634:	200227a0 	.word	0x200227a0
 8012638:	200227a4 	.word	0x200227a4

0801263c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d106      	bne.n	8012658 <tcp_close_shutdown_fin+0x1c>
 801264a:	4b2e      	ldr	r3, [pc, #184]	@ (8012704 <tcp_close_shutdown_fin+0xc8>)
 801264c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8012650:	492d      	ldr	r1, [pc, #180]	@ (8012708 <tcp_close_shutdown_fin+0xcc>)
 8012652:	482e      	ldr	r0, [pc, #184]	@ (801270c <tcp_close_shutdown_fin+0xd0>)
 8012654:	f009 fffc 	bl	801c650 <iprintf>

  switch (pcb->state) {
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	7d1b      	ldrb	r3, [r3, #20]
 801265c:	2b07      	cmp	r3, #7
 801265e:	d020      	beq.n	80126a2 <tcp_close_shutdown_fin+0x66>
 8012660:	2b07      	cmp	r3, #7
 8012662:	dc2b      	bgt.n	80126bc <tcp_close_shutdown_fin+0x80>
 8012664:	2b03      	cmp	r3, #3
 8012666:	d002      	beq.n	801266e <tcp_close_shutdown_fin+0x32>
 8012668:	2b04      	cmp	r3, #4
 801266a:	d00d      	beq.n	8012688 <tcp_close_shutdown_fin+0x4c>
 801266c:	e026      	b.n	80126bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f004 fec2 	bl	80173f8 <tcp_send_fin>
 8012674:	4603      	mov	r3, r0
 8012676:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d11f      	bne.n	80126c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2205      	movs	r2, #5
 8012684:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012686:	e01b      	b.n	80126c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f004 feb5 	bl	80173f8 <tcp_send_fin>
 801268e:	4603      	mov	r3, r0
 8012690:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d114      	bne.n	80126c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2205      	movs	r2, #5
 801269e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80126a0:	e010      	b.n	80126c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f004 fea8 	bl	80173f8 <tcp_send_fin>
 80126a8:	4603      	mov	r3, r0
 80126aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80126ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d109      	bne.n	80126c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2209      	movs	r2, #9
 80126b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80126ba:	e005      	b.n	80126c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80126bc:	2300      	movs	r3, #0
 80126be:	e01c      	b.n	80126fa <tcp_close_shutdown_fin+0xbe>
      break;
 80126c0:	bf00      	nop
 80126c2:	e002      	b.n	80126ca <tcp_close_shutdown_fin+0x8e>
      break;
 80126c4:	bf00      	nop
 80126c6:	e000      	b.n	80126ca <tcp_close_shutdown_fin+0x8e>
      break;
 80126c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80126ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d103      	bne.n	80126da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f004 ffce 	bl	8017674 <tcp_output>
 80126d8:	e00d      	b.n	80126f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80126da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80126e2:	d108      	bne.n	80126f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	8b5b      	ldrh	r3, [r3, #26]
 80126e8:	f043 0308 	orr.w	r3, r3, #8
 80126ec:	b29a      	uxth	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80126f2:	2300      	movs	r3, #0
 80126f4:	e001      	b.n	80126fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80126f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	0801f0d4 	.word	0x0801f0d4
 8012708:	0801f184 	.word	0x0801f184
 801270c:	0801f118 	.word	0x0801f118

08012710 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d109      	bne.n	8012732 <tcp_close+0x22>
 801271e:	4b0f      	ldr	r3, [pc, #60]	@ (801275c <tcp_close+0x4c>)
 8012720:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8012724:	490e      	ldr	r1, [pc, #56]	@ (8012760 <tcp_close+0x50>)
 8012726:	480f      	ldr	r0, [pc, #60]	@ (8012764 <tcp_close+0x54>)
 8012728:	f009 ff92 	bl	801c650 <iprintf>
 801272c:	f06f 030f 	mvn.w	r3, #15
 8012730:	e00f      	b.n	8012752 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	7d1b      	ldrb	r3, [r3, #20]
 8012736:	2b01      	cmp	r3, #1
 8012738:	d006      	beq.n	8012748 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	8b5b      	ldrh	r3, [r3, #26]
 801273e:	f043 0310 	orr.w	r3, r3, #16
 8012742:	b29a      	uxth	r2, r3
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012748:	2101      	movs	r1, #1
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f7ff fe94 	bl	8012478 <tcp_close_shutdown>
 8012750:	4603      	mov	r3, r0
}
 8012752:	4618      	mov	r0, r3
 8012754:	3708      	adds	r7, #8
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	0801f0d4 	.word	0x0801f0d4
 8012760:	0801f1e4 	.word	0x0801f1e4
 8012764:	0801f118 	.word	0x0801f118

08012768 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d109      	bne.n	801278e <tcp_shutdown+0x26>
 801277a:	4b26      	ldr	r3, [pc, #152]	@ (8012814 <tcp_shutdown+0xac>)
 801277c:	f240 2207 	movw	r2, #519	@ 0x207
 8012780:	4925      	ldr	r1, [pc, #148]	@ (8012818 <tcp_shutdown+0xb0>)
 8012782:	4826      	ldr	r0, [pc, #152]	@ (801281c <tcp_shutdown+0xb4>)
 8012784:	f009 ff64 	bl	801c650 <iprintf>
 8012788:	f06f 030f 	mvn.w	r3, #15
 801278c:	e03d      	b.n	801280a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	7d1b      	ldrb	r3, [r3, #20]
 8012792:	2b01      	cmp	r3, #1
 8012794:	d102      	bne.n	801279c <tcp_shutdown+0x34>
    return ERR_CONN;
 8012796:	f06f 030a 	mvn.w	r3, #10
 801279a:	e036      	b.n	801280a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d01b      	beq.n	80127da <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	8b5b      	ldrh	r3, [r3, #26]
 80127a6:	f043 0310 	orr.w	r3, r3, #16
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d005      	beq.n	80127c2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80127b6:	2101      	movs	r1, #1
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f7ff fe5d 	bl	8012478 <tcp_close_shutdown>
 80127be:	4603      	mov	r3, r0
 80127c0:	e023      	b.n	801280a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d007      	beq.n	80127da <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7ff fae4 	bl	8011d9c <pbuf_free>
      pcb->refused_data = NULL;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2200      	movs	r2, #0
 80127d8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d013      	beq.n	8012808 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	7d1b      	ldrb	r3, [r3, #20]
 80127e4:	2b04      	cmp	r3, #4
 80127e6:	dc02      	bgt.n	80127ee <tcp_shutdown+0x86>
 80127e8:	2b03      	cmp	r3, #3
 80127ea:	da02      	bge.n	80127f2 <tcp_shutdown+0x8a>
 80127ec:	e009      	b.n	8012802 <tcp_shutdown+0x9a>
 80127ee:	2b07      	cmp	r3, #7
 80127f0:	d107      	bne.n	8012802 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	4619      	mov	r1, r3
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f7ff fe3d 	bl	8012478 <tcp_close_shutdown>
 80127fe:	4603      	mov	r3, r0
 8012800:	e003      	b.n	801280a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8012802:	f06f 030a 	mvn.w	r3, #10
 8012806:	e000      	b.n	801280a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012808:	2300      	movs	r3, #0
}
 801280a:	4618      	mov	r0, r3
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	0801f0d4 	.word	0x0801f0d4
 8012818:	0801f1fc 	.word	0x0801f1fc
 801281c:	0801f118 	.word	0x0801f118

08012820 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b08e      	sub	sp, #56	@ 0x38
 8012824:	af04      	add	r7, sp, #16
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d107      	bne.n	8012840 <tcp_abandon+0x20>
 8012830:	4b52      	ldr	r3, [pc, #328]	@ (801297c <tcp_abandon+0x15c>)
 8012832:	f240 223d 	movw	r2, #573	@ 0x23d
 8012836:	4952      	ldr	r1, [pc, #328]	@ (8012980 <tcp_abandon+0x160>)
 8012838:	4852      	ldr	r0, [pc, #328]	@ (8012984 <tcp_abandon+0x164>)
 801283a:	f009 ff09 	bl	801c650 <iprintf>
 801283e:	e099      	b.n	8012974 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	7d1b      	ldrb	r3, [r3, #20]
 8012844:	2b01      	cmp	r3, #1
 8012846:	d106      	bne.n	8012856 <tcp_abandon+0x36>
 8012848:	4b4c      	ldr	r3, [pc, #304]	@ (801297c <tcp_abandon+0x15c>)
 801284a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801284e:	494e      	ldr	r1, [pc, #312]	@ (8012988 <tcp_abandon+0x168>)
 8012850:	484c      	ldr	r0, [pc, #304]	@ (8012984 <tcp_abandon+0x164>)
 8012852:	f009 fefd 	bl	801c650 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	7d1b      	ldrb	r3, [r3, #20]
 801285a:	2b0a      	cmp	r3, #10
 801285c:	d107      	bne.n	801286e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801285e:	6879      	ldr	r1, [r7, #4]
 8012860:	484a      	ldr	r0, [pc, #296]	@ (801298c <tcp_abandon+0x16c>)
 8012862:	f001 fa89 	bl	8013d78 <tcp_pcb_remove>
    tcp_free(pcb);
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7ff fd54 	bl	8012314 <tcp_free>
 801286c:	e082      	b.n	8012974 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801286e:	2300      	movs	r3, #0
 8012870:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8012872:	2300      	movs	r3, #0
 8012874:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801287a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012880:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012888:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	691b      	ldr	r3, [r3, #16]
 801288e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	7d1b      	ldrb	r3, [r3, #20]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d126      	bne.n	80128e6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	8adb      	ldrh	r3, [r3, #22]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d02e      	beq.n	80128fe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80128a0:	4b3b      	ldr	r3, [pc, #236]	@ (8012990 <tcp_abandon+0x170>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	687a      	ldr	r2, [r7, #4]
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d105      	bne.n	80128b6 <tcp_abandon+0x96>
 80128aa:	4b39      	ldr	r3, [pc, #228]	@ (8012990 <tcp_abandon+0x170>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	68db      	ldr	r3, [r3, #12]
 80128b0:	4a37      	ldr	r2, [pc, #220]	@ (8012990 <tcp_abandon+0x170>)
 80128b2:	6013      	str	r3, [r2, #0]
 80128b4:	e013      	b.n	80128de <tcp_abandon+0xbe>
 80128b6:	4b36      	ldr	r3, [pc, #216]	@ (8012990 <tcp_abandon+0x170>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	61fb      	str	r3, [r7, #28]
 80128bc:	e00c      	b.n	80128d8 <tcp_abandon+0xb8>
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d104      	bne.n	80128d2 <tcp_abandon+0xb2>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	68da      	ldr	r2, [r3, #12]
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	60da      	str	r2, [r3, #12]
 80128d0:	e005      	b.n	80128de <tcp_abandon+0xbe>
 80128d2:	69fb      	ldr	r3, [r7, #28]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	61fb      	str	r3, [r7, #28]
 80128d8:	69fb      	ldr	r3, [r7, #28]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d1ef      	bne.n	80128be <tcp_abandon+0x9e>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2200      	movs	r2, #0
 80128e2:	60da      	str	r2, [r3, #12]
 80128e4:	e00b      	b.n	80128fe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	8adb      	ldrh	r3, [r3, #22]
 80128ee:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80128f0:	6879      	ldr	r1, [r7, #4]
 80128f2:	4828      	ldr	r0, [pc, #160]	@ (8012994 <tcp_abandon+0x174>)
 80128f4:	f001 fa40 	bl	8013d78 <tcp_pcb_remove>
 80128f8:	4b27      	ldr	r3, [pc, #156]	@ (8012998 <tcp_abandon+0x178>)
 80128fa:	2201      	movs	r2, #1
 80128fc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012902:	2b00      	cmp	r3, #0
 8012904:	d004      	beq.n	8012910 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801290a:	4618      	mov	r0, r3
 801290c:	f000 ff14 	bl	8013738 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012914:	2b00      	cmp	r3, #0
 8012916:	d004      	beq.n	8012922 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801291c:	4618      	mov	r0, r3
 801291e:	f000 ff0b 	bl	8013738 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012926:	2b00      	cmp	r3, #0
 8012928:	d004      	beq.n	8012934 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801292e:	4618      	mov	r0, r3
 8012930:	f000 ff02 	bl	8013738 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012936:	2b00      	cmp	r3, #0
 8012938:	d00e      	beq.n	8012958 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801293a:	6879      	ldr	r1, [r7, #4]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3304      	adds	r3, #4
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	8b12      	ldrh	r2, [r2, #24]
 8012944:	9202      	str	r2, [sp, #8]
 8012946:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012948:	9201      	str	r2, [sp, #4]
 801294a:	9300      	str	r3, [sp, #0]
 801294c:	460b      	mov	r3, r1
 801294e:	697a      	ldr	r2, [r7, #20]
 8012950:	69b9      	ldr	r1, [r7, #24]
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f005 fc4e 	bl	80181f4 <tcp_rst>
    }
    last_state = pcb->state;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	7d1b      	ldrb	r3, [r3, #20]
 801295c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7ff fcd8 	bl	8012314 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d004      	beq.n	8012974 <tcp_abandon+0x154>
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	f06f 010c 	mvn.w	r1, #12
 8012970:	68f8      	ldr	r0, [r7, #12]
 8012972:	4798      	blx	r3
  }
}
 8012974:	3728      	adds	r7, #40	@ 0x28
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	0801f0d4 	.word	0x0801f0d4
 8012980:	0801f218 	.word	0x0801f218
 8012984:	0801f118 	.word	0x0801f118
 8012988:	0801f234 	.word	0x0801f234
 801298c:	200227ac 	.word	0x200227ac
 8012990:	200227a0 	.word	0x200227a0
 8012994:	200227a8 	.word	0x200227a8
 8012998:	200227b0 	.word	0x200227b0

0801299c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b082      	sub	sp, #8
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80129a4:	2101      	movs	r1, #1
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f7ff ff3a 	bl	8012820 <tcp_abandon>
}
 80129ac:	bf00      	nop
 80129ae:	3708      	adds	r7, #8
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b088      	sub	sp, #32
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	4613      	mov	r3, r2
 80129c0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80129c2:	2304      	movs	r3, #4
 80129c4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d101      	bne.n	80129d0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80129cc:	4b3e      	ldr	r3, [pc, #248]	@ (8012ac8 <tcp_bind+0x114>)
 80129ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d109      	bne.n	80129ea <tcp_bind+0x36>
 80129d6:	4b3d      	ldr	r3, [pc, #244]	@ (8012acc <tcp_bind+0x118>)
 80129d8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80129dc:	493c      	ldr	r1, [pc, #240]	@ (8012ad0 <tcp_bind+0x11c>)
 80129de:	483d      	ldr	r0, [pc, #244]	@ (8012ad4 <tcp_bind+0x120>)
 80129e0:	f009 fe36 	bl	801c650 <iprintf>
 80129e4:	f06f 030f 	mvn.w	r3, #15
 80129e8:	e06a      	b.n	8012ac0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	7d1b      	ldrb	r3, [r3, #20]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d009      	beq.n	8012a06 <tcp_bind+0x52>
 80129f2:	4b36      	ldr	r3, [pc, #216]	@ (8012acc <tcp_bind+0x118>)
 80129f4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80129f8:	4937      	ldr	r1, [pc, #220]	@ (8012ad8 <tcp_bind+0x124>)
 80129fa:	4836      	ldr	r0, [pc, #216]	@ (8012ad4 <tcp_bind+0x120>)
 80129fc:	f009 fe28 	bl	801c650 <iprintf>
 8012a00:	f06f 0305 	mvn.w	r3, #5
 8012a04:	e05c      	b.n	8012ac0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012a06:	88fb      	ldrh	r3, [r7, #6]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d109      	bne.n	8012a20 <tcp_bind+0x6c>
    port = tcp_new_port();
 8012a0c:	f000 f914 	bl	8012c38 <tcp_new_port>
 8012a10:	4603      	mov	r3, r0
 8012a12:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012a14:	88fb      	ldrh	r3, [r7, #6]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d135      	bne.n	8012a86 <tcp_bind+0xd2>
      return ERR_BUF;
 8012a1a:	f06f 0301 	mvn.w	r3, #1
 8012a1e:	e04f      	b.n	8012ac0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012a20:	2300      	movs	r3, #0
 8012a22:	61fb      	str	r3, [r7, #28]
 8012a24:	e02b      	b.n	8012a7e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012a26:	4a2d      	ldr	r2, [pc, #180]	@ (8012adc <tcp_bind+0x128>)
 8012a28:	69fb      	ldr	r3, [r7, #28]
 8012a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	61bb      	str	r3, [r7, #24]
 8012a32:	e01e      	b.n	8012a72 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012a34:	69bb      	ldr	r3, [r7, #24]
 8012a36:	8adb      	ldrh	r3, [r3, #22]
 8012a38:	88fa      	ldrh	r2, [r7, #6]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d116      	bne.n	8012a6c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012a3e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d010      	beq.n	8012a66 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012a44:	69bb      	ldr	r3, [r7, #24]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d00c      	beq.n	8012a66 <tcp_bind+0xb2>
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d009      	beq.n	8012a66 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d005      	beq.n	8012a66 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012a5a:	69bb      	ldr	r3, [r7, #24]
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d102      	bne.n	8012a6c <tcp_bind+0xb8>
              return ERR_USE;
 8012a66:	f06f 0307 	mvn.w	r3, #7
 8012a6a:	e029      	b.n	8012ac0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	68db      	ldr	r3, [r3, #12]
 8012a70:	61bb      	str	r3, [r7, #24]
 8012a72:	69bb      	ldr	r3, [r7, #24]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d1dd      	bne.n	8012a34 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	61fb      	str	r3, [r7, #28]
 8012a7e:	69fa      	ldr	r2, [r7, #28]
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	dbcf      	blt.n	8012a26 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00c      	beq.n	8012aa6 <tcp_bind+0xf2>
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d008      	beq.n	8012aa6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d002      	beq.n	8012aa0 <tcp_bind+0xec>
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	e000      	b.n	8012aa2 <tcp_bind+0xee>
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	88fa      	ldrh	r2, [r7, #6]
 8012aaa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012aac:	4b0c      	ldr	r3, [pc, #48]	@ (8012ae0 <tcp_bind+0x12c>)
 8012aae:	681a      	ldr	r2, [r3, #0]
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	60da      	str	r2, [r3, #12]
 8012ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8012ae0 <tcp_bind+0x12c>)
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	6013      	str	r3, [r2, #0]
 8012aba:	f005 fd5d 	bl	8018578 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8012abe:	2300      	movs	r3, #0
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3720      	adds	r7, #32
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	08021b00 	.word	0x08021b00
 8012acc:	0801f0d4 	.word	0x0801f0d4
 8012ad0:	0801f268 	.word	0x0801f268
 8012ad4:	0801f118 	.word	0x0801f118
 8012ad8:	0801f280 	.word	0x0801f280
 8012adc:	08021ad8 	.word	0x08021ad8
 8012ae0:	200227a0 	.word	0x200227a0

08012ae4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d106      	bne.n	8012b00 <tcp_update_rcv_ann_wnd+0x1c>
 8012af2:	4b25      	ldr	r3, [pc, #148]	@ (8012b88 <tcp_update_rcv_ann_wnd+0xa4>)
 8012af4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012af8:	4924      	ldr	r1, [pc, #144]	@ (8012b8c <tcp_update_rcv_ann_wnd+0xa8>)
 8012afa:	4825      	ldr	r0, [pc, #148]	@ (8012b90 <tcp_update_rcv_ann_wnd+0xac>)
 8012afc:	f009 fda8 	bl	801c650 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012b08:	4413      	add	r3, r2
 8012b0a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8012b14:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8012b18:	bf28      	it	cs
 8012b1a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8012b1e:	b292      	uxth	r2, r2
 8012b20:	4413      	add	r3, r2
 8012b22:	68fa      	ldr	r2, [r7, #12]
 8012b24:	1ad3      	subs	r3, r2, r3
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	db08      	blt.n	8012b3c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	1ad3      	subs	r3, r2, r3
 8012b3a:	e020      	b.n	8012b7e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b44:	1ad3      	subs	r3, r2, r3
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	dd03      	ble.n	8012b52 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012b50:	e014      	b.n	8012b7c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b5a:	1ad3      	subs	r3, r2, r3
 8012b5c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b64:	d306      	bcc.n	8012b74 <tcp_update_rcv_ann_wnd+0x90>
 8012b66:	4b08      	ldr	r3, [pc, #32]	@ (8012b88 <tcp_update_rcv_ann_wnd+0xa4>)
 8012b68:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8012b6c:	4909      	ldr	r1, [pc, #36]	@ (8012b94 <tcp_update_rcv_ann_wnd+0xb0>)
 8012b6e:	4808      	ldr	r0, [pc, #32]	@ (8012b90 <tcp_update_rcv_ann_wnd+0xac>)
 8012b70:	f009 fd6e 	bl	801c650 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	b29a      	uxth	r2, r3
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8012b7c:	2300      	movs	r3, #0
  }
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	3710      	adds	r7, #16
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	0801f0d4 	.word	0x0801f0d4
 8012b8c:	0801f330 	.word	0x0801f330
 8012b90:	0801f118 	.word	0x0801f118
 8012b94:	0801f354 	.word	0x0801f354

08012b98 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	460b      	mov	r3, r1
 8012ba2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d107      	bne.n	8012bba <tcp_recved+0x22>
 8012baa:	4b1f      	ldr	r3, [pc, #124]	@ (8012c28 <tcp_recved+0x90>)
 8012bac:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012bb0:	491e      	ldr	r1, [pc, #120]	@ (8012c2c <tcp_recved+0x94>)
 8012bb2:	481f      	ldr	r0, [pc, #124]	@ (8012c30 <tcp_recved+0x98>)
 8012bb4:	f009 fd4c 	bl	801c650 <iprintf>
 8012bb8:	e032      	b.n	8012c20 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	7d1b      	ldrb	r3, [r3, #20]
 8012bbe:	2b01      	cmp	r3, #1
 8012bc0:	d106      	bne.n	8012bd0 <tcp_recved+0x38>
 8012bc2:	4b19      	ldr	r3, [pc, #100]	@ (8012c28 <tcp_recved+0x90>)
 8012bc4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012bc8:	491a      	ldr	r1, [pc, #104]	@ (8012c34 <tcp_recved+0x9c>)
 8012bca:	4819      	ldr	r0, [pc, #100]	@ (8012c30 <tcp_recved+0x98>)
 8012bcc:	f009 fd40 	bl	801c650 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012bd4:	887b      	ldrh	r3, [r7, #2]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012bda:	89fb      	ldrh	r3, [r7, #14]
 8012bdc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012be0:	d804      	bhi.n	8012bec <tcp_recved+0x54>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012be6:	89fa      	ldrh	r2, [r7, #14]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d204      	bcs.n	8012bf6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012bf4:	e002      	b.n	8012bfc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	89fa      	ldrh	r2, [r7, #14]
 8012bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7ff ff71 	bl	8012ae4 <tcp_update_rcv_ann_wnd>
 8012c02:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8012c0a:	d309      	bcc.n	8012c20 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	8b5b      	ldrh	r3, [r3, #26]
 8012c10:	f043 0302 	orr.w	r3, r3, #2
 8012c14:	b29a      	uxth	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f004 fd2a 	bl	8017674 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	0801f0d4 	.word	0x0801f0d4
 8012c2c:	0801f370 	.word	0x0801f370
 8012c30:	0801f118 	.word	0x0801f118
 8012c34:	0801f388 	.word	0x0801f388

08012c38 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b083      	sub	sp, #12
 8012c3c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012c42:	4b1e      	ldr	r3, [pc, #120]	@ (8012cbc <tcp_new_port+0x84>)
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	3301      	adds	r3, #1
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8012cbc <tcp_new_port+0x84>)
 8012c4c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8012cbc <tcp_new_port+0x84>)
 8012c50:	881b      	ldrh	r3, [r3, #0]
 8012c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d103      	bne.n	8012c62 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012c5a:	4b18      	ldr	r3, [pc, #96]	@ (8012cbc <tcp_new_port+0x84>)
 8012c5c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012c60:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012c62:	2300      	movs	r3, #0
 8012c64:	71fb      	strb	r3, [r7, #7]
 8012c66:	e01e      	b.n	8012ca6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012c68:	79fb      	ldrb	r3, [r7, #7]
 8012c6a:	4a15      	ldr	r2, [pc, #84]	@ (8012cc0 <tcp_new_port+0x88>)
 8012c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	603b      	str	r3, [r7, #0]
 8012c74:	e011      	b.n	8012c9a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	8ada      	ldrh	r2, [r3, #22]
 8012c7a:	4b10      	ldr	r3, [pc, #64]	@ (8012cbc <tcp_new_port+0x84>)
 8012c7c:	881b      	ldrh	r3, [r3, #0]
 8012c7e:	429a      	cmp	r2, r3
 8012c80:	d108      	bne.n	8012c94 <tcp_new_port+0x5c>
        n++;
 8012c82:	88bb      	ldrh	r3, [r7, #4]
 8012c84:	3301      	adds	r3, #1
 8012c86:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012c88:	88bb      	ldrh	r3, [r7, #4]
 8012c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012c8e:	d3d8      	bcc.n	8012c42 <tcp_new_port+0xa>
          return 0;
 8012c90:	2300      	movs	r3, #0
 8012c92:	e00d      	b.n	8012cb0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	603b      	str	r3, [r7, #0]
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1ea      	bne.n	8012c76 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012ca0:	79fb      	ldrb	r3, [r7, #7]
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	71fb      	strb	r3, [r7, #7]
 8012ca6:	79fb      	ldrb	r3, [r7, #7]
 8012ca8:	2b03      	cmp	r3, #3
 8012caa:	d9dd      	bls.n	8012c68 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012cac:	4b03      	ldr	r3, [pc, #12]	@ (8012cbc <tcp_new_port+0x84>)
 8012cae:	881b      	ldrh	r3, [r3, #0]
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	370c      	adds	r7, #12
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cba:	4770      	bx	lr
 8012cbc:	20000068 	.word	0x20000068
 8012cc0:	08021ad8 	.word	0x08021ad8

08012cc4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b08a      	sub	sp, #40	@ 0x28
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	603b      	str	r3, [r7, #0]
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d109      	bne.n	8012cf2 <tcp_connect+0x2e>
 8012cde:	4b7d      	ldr	r3, [pc, #500]	@ (8012ed4 <tcp_connect+0x210>)
 8012ce0:	f240 4235 	movw	r2, #1077	@ 0x435
 8012ce4:	497c      	ldr	r1, [pc, #496]	@ (8012ed8 <tcp_connect+0x214>)
 8012ce6:	487d      	ldr	r0, [pc, #500]	@ (8012edc <tcp_connect+0x218>)
 8012ce8:	f009 fcb2 	bl	801c650 <iprintf>
 8012cec:	f06f 030f 	mvn.w	r3, #15
 8012cf0:	e0ec      	b.n	8012ecc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d109      	bne.n	8012d0c <tcp_connect+0x48>
 8012cf8:	4b76      	ldr	r3, [pc, #472]	@ (8012ed4 <tcp_connect+0x210>)
 8012cfa:	f240 4236 	movw	r2, #1078	@ 0x436
 8012cfe:	4978      	ldr	r1, [pc, #480]	@ (8012ee0 <tcp_connect+0x21c>)
 8012d00:	4876      	ldr	r0, [pc, #472]	@ (8012edc <tcp_connect+0x218>)
 8012d02:	f009 fca5 	bl	801c650 <iprintf>
 8012d06:	f06f 030f 	mvn.w	r3, #15
 8012d0a:	e0df      	b.n	8012ecc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	7d1b      	ldrb	r3, [r3, #20]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d009      	beq.n	8012d28 <tcp_connect+0x64>
 8012d14:	4b6f      	ldr	r3, [pc, #444]	@ (8012ed4 <tcp_connect+0x210>)
 8012d16:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8012d1a:	4972      	ldr	r1, [pc, #456]	@ (8012ee4 <tcp_connect+0x220>)
 8012d1c:	486f      	ldr	r0, [pc, #444]	@ (8012edc <tcp_connect+0x218>)
 8012d1e:	f009 fc97 	bl	801c650 <iprintf>
 8012d22:	f06f 0309 	mvn.w	r3, #9
 8012d26:	e0d1      	b.n	8012ecc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012d28:	68bb      	ldr	r3, [r7, #8]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d002      	beq.n	8012d34 <tcp_connect+0x70>
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	e000      	b.n	8012d36 <tcp_connect+0x72>
 8012d34:	2300      	movs	r3, #0
 8012d36:	68fa      	ldr	r2, [r7, #12]
 8012d38:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	88fa      	ldrh	r2, [r7, #6]
 8012d3e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	7a1b      	ldrb	r3, [r3, #8]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d006      	beq.n	8012d56 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	7a1b      	ldrb	r3, [r3, #8]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fe fc97 	bl	8011680 <netif_get_by_index>
 8012d52:	6278      	str	r0, [r7, #36]	@ 0x24
 8012d54:	e005      	b.n	8012d62 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	3304      	adds	r3, #4
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f007 fe96 	bl	801aa8c <ip4_route>
 8012d60:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8012d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d102      	bne.n	8012d6e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012d68:	f06f 0303 	mvn.w	r3, #3
 8012d6c:	e0ae      	b.n	8012ecc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d003      	beq.n	8012d7c <tcp_connect+0xb8>
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d111      	bne.n	8012da0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8012d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d002      	beq.n	8012d88 <tcp_connect+0xc4>
 8012d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d84:	3304      	adds	r3, #4
 8012d86:	e000      	b.n	8012d8a <tcp_connect+0xc6>
 8012d88:	2300      	movs	r3, #0
 8012d8a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d102      	bne.n	8012d98 <tcp_connect+0xd4>
      return ERR_RTE;
 8012d92:	f06f 0303 	mvn.w	r3, #3
 8012d96:	e099      	b.n	8012ecc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	8adb      	ldrh	r3, [r3, #22]
 8012da4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	8adb      	ldrh	r3, [r3, #22]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d10c      	bne.n	8012dc8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8012dae:	f7ff ff43 	bl	8012c38 <tcp_new_port>
 8012db2:	4603      	mov	r3, r0
 8012db4:	461a      	mov	r2, r3
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	8adb      	ldrh	r3, [r3, #22]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d102      	bne.n	8012dc8 <tcp_connect+0x104>
      return ERR_BUF;
 8012dc2:	f06f 0301 	mvn.w	r3, #1
 8012dc6:	e081      	b.n	8012ecc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012dc8:	68f8      	ldr	r0, [r7, #12]
 8012dca:	f001 f869 	bl	8013ea0 <tcp_next_iss>
 8012dce:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	697a      	ldr	r2, [r7, #20]
 8012dda:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	1e5a      	subs	r2, r3, #1
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8012de4:	697b      	ldr	r3, [r7, #20]
 8012de6:	1e5a      	subs	r2, r3, #1
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	1e5a      	subs	r2, r3, #1
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012e12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012e1c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	3304      	adds	r3, #4
 8012e26:	461a      	mov	r2, r3
 8012e28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e2a:	f001 f85f 	bl	8013eec <tcp_eff_send_mss_netif>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	461a      	mov	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	2201      	movs	r2, #1
 8012e3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	683a      	ldr	r2, [r7, #0]
 8012e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012e46:	2102      	movs	r1, #2
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f004 fb25 	bl	8017498 <tcp_enqueue_flags>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012e52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d136      	bne.n	8012ec8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	2202      	movs	r2, #2
 8012e5e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012e60:	8b7b      	ldrh	r3, [r7, #26]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d021      	beq.n	8012eaa <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012e66:	4b20      	ldr	r3, [pc, #128]	@ (8012ee8 <tcp_connect+0x224>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	68fa      	ldr	r2, [r7, #12]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d105      	bne.n	8012e7c <tcp_connect+0x1b8>
 8012e70:	4b1d      	ldr	r3, [pc, #116]	@ (8012ee8 <tcp_connect+0x224>)
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	68db      	ldr	r3, [r3, #12]
 8012e76:	4a1c      	ldr	r2, [pc, #112]	@ (8012ee8 <tcp_connect+0x224>)
 8012e78:	6013      	str	r3, [r2, #0]
 8012e7a:	e013      	b.n	8012ea4 <tcp_connect+0x1e0>
 8012e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8012ee8 <tcp_connect+0x224>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	623b      	str	r3, [r7, #32]
 8012e82:	e00c      	b.n	8012e9e <tcp_connect+0x1da>
 8012e84:	6a3b      	ldr	r3, [r7, #32]
 8012e86:	68db      	ldr	r3, [r3, #12]
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d104      	bne.n	8012e98 <tcp_connect+0x1d4>
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	68da      	ldr	r2, [r3, #12]
 8012e92:	6a3b      	ldr	r3, [r7, #32]
 8012e94:	60da      	str	r2, [r3, #12]
 8012e96:	e005      	b.n	8012ea4 <tcp_connect+0x1e0>
 8012e98:	6a3b      	ldr	r3, [r7, #32]
 8012e9a:	68db      	ldr	r3, [r3, #12]
 8012e9c:	623b      	str	r3, [r7, #32]
 8012e9e:	6a3b      	ldr	r3, [r7, #32]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d1ef      	bne.n	8012e84 <tcp_connect+0x1c0>
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8012eaa:	4b10      	ldr	r3, [pc, #64]	@ (8012eec <tcp_connect+0x228>)
 8012eac:	681a      	ldr	r2, [r3, #0]
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	60da      	str	r2, [r3, #12]
 8012eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8012eec <tcp_connect+0x228>)
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	6013      	str	r3, [r2, #0]
 8012eb8:	f005 fb5e 	bl	8018578 <tcp_timer_needed>
 8012ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8012ef0 <tcp_connect+0x22c>)
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	f004 fbd6 	bl	8017674 <tcp_output>
  }
  return ret;
 8012ec8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3728      	adds	r7, #40	@ 0x28
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	0801f0d4 	.word	0x0801f0d4
 8012ed8:	0801f3b0 	.word	0x0801f3b0
 8012edc:	0801f118 	.word	0x0801f118
 8012ee0:	0801f3cc 	.word	0x0801f3cc
 8012ee4:	0801f3e8 	.word	0x0801f3e8
 8012ee8:	200227a0 	.word	0x200227a0
 8012eec:	200227a8 	.word	0x200227a8
 8012ef0:	200227b0 	.word	0x200227b0

08012ef4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012ef4:	b5b0      	push	{r4, r5, r7, lr}
 8012ef6:	b090      	sub	sp, #64	@ 0x40
 8012ef8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012efa:	2300      	movs	r3, #0
 8012efc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8012f00:	4b95      	ldr	r3, [pc, #596]	@ (8013158 <tcp_slowtmr+0x264>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	3301      	adds	r3, #1
 8012f06:	4a94      	ldr	r2, [pc, #592]	@ (8013158 <tcp_slowtmr+0x264>)
 8012f08:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012f0a:	4b94      	ldr	r3, [pc, #592]	@ (801315c <tcp_slowtmr+0x268>)
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	3301      	adds	r3, #1
 8012f10:	b2da      	uxtb	r2, r3
 8012f12:	4b92      	ldr	r3, [pc, #584]	@ (801315c <tcp_slowtmr+0x268>)
 8012f14:	701a      	strb	r2, [r3, #0]
 8012f16:	e000      	b.n	8012f1a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012f18:	bf00      	nop
  prev = NULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8012f1e:	4b90      	ldr	r3, [pc, #576]	@ (8013160 <tcp_slowtmr+0x26c>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012f24:	e29d      	b.n	8013462 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f28:	7d1b      	ldrb	r3, [r3, #20]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d106      	bne.n	8012f3c <tcp_slowtmr+0x48>
 8012f2e:	4b8d      	ldr	r3, [pc, #564]	@ (8013164 <tcp_slowtmr+0x270>)
 8012f30:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012f34:	498c      	ldr	r1, [pc, #560]	@ (8013168 <tcp_slowtmr+0x274>)
 8012f36:	488d      	ldr	r0, [pc, #564]	@ (801316c <tcp_slowtmr+0x278>)
 8012f38:	f009 fb8a 	bl	801c650 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f3e:	7d1b      	ldrb	r3, [r3, #20]
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	d106      	bne.n	8012f52 <tcp_slowtmr+0x5e>
 8012f44:	4b87      	ldr	r3, [pc, #540]	@ (8013164 <tcp_slowtmr+0x270>)
 8012f46:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8012f4a:	4989      	ldr	r1, [pc, #548]	@ (8013170 <tcp_slowtmr+0x27c>)
 8012f4c:	4887      	ldr	r0, [pc, #540]	@ (801316c <tcp_slowtmr+0x278>)
 8012f4e:	f009 fb7f 	bl	801c650 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f54:	7d1b      	ldrb	r3, [r3, #20]
 8012f56:	2b0a      	cmp	r3, #10
 8012f58:	d106      	bne.n	8012f68 <tcp_slowtmr+0x74>
 8012f5a:	4b82      	ldr	r3, [pc, #520]	@ (8013164 <tcp_slowtmr+0x270>)
 8012f5c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012f60:	4984      	ldr	r1, [pc, #528]	@ (8013174 <tcp_slowtmr+0x280>)
 8012f62:	4882      	ldr	r0, [pc, #520]	@ (801316c <tcp_slowtmr+0x278>)
 8012f64:	f009 fb74 	bl	801c650 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f6a:	7f9a      	ldrb	r2, [r3, #30]
 8012f6c:	4b7b      	ldr	r3, [pc, #492]	@ (801315c <tcp_slowtmr+0x268>)
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d105      	bne.n	8012f80 <tcp_slowtmr+0x8c>
      prev = pcb;
 8012f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f76:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f7a:	68db      	ldr	r3, [r3, #12]
 8012f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8012f7e:	e270      	b.n	8013462 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8012f80:	4b76      	ldr	r3, [pc, #472]	@ (801315c <tcp_slowtmr+0x268>)
 8012f82:	781a      	ldrb	r2, [r3, #0]
 8012f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f86:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f96:	7d1b      	ldrb	r3, [r3, #20]
 8012f98:	2b02      	cmp	r3, #2
 8012f9a:	d10a      	bne.n	8012fb2 <tcp_slowtmr+0xbe>
 8012f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012fa2:	2b05      	cmp	r3, #5
 8012fa4:	d905      	bls.n	8012fb2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012faa:	3301      	adds	r3, #1
 8012fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8012fb0:	e11e      	b.n	80131f0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012fb8:	2b0b      	cmp	r3, #11
 8012fba:	d905      	bls.n	8012fc8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8012fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012fc6:	e113      	b.n	80131f0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8012fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d075      	beq.n	80130be <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d006      	beq.n	8012fe8 <tcp_slowtmr+0xf4>
 8012fda:	4b62      	ldr	r3, [pc, #392]	@ (8013164 <tcp_slowtmr+0x270>)
 8012fdc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8012fe0:	4965      	ldr	r1, [pc, #404]	@ (8013178 <tcp_slowtmr+0x284>)
 8012fe2:	4862      	ldr	r0, [pc, #392]	@ (801316c <tcp_slowtmr+0x278>)
 8012fe4:	f009 fb34 	bl	801c650 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d106      	bne.n	8012ffe <tcp_slowtmr+0x10a>
 8012ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8013164 <tcp_slowtmr+0x270>)
 8012ff2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8012ff6:	4961      	ldr	r1, [pc, #388]	@ (801317c <tcp_slowtmr+0x288>)
 8012ff8:	485c      	ldr	r0, [pc, #368]	@ (801316c <tcp_slowtmr+0x278>)
 8012ffa:	f009 fb29 	bl	801c650 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013000:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013004:	2b0b      	cmp	r3, #11
 8013006:	d905      	bls.n	8013014 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801300c:	3301      	adds	r3, #1
 801300e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013012:	e0ed      	b.n	80131f0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013016:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801301a:	3b01      	subs	r3, #1
 801301c:	4a58      	ldr	r2, [pc, #352]	@ (8013180 <tcp_slowtmr+0x28c>)
 801301e:	5cd3      	ldrb	r3, [r2, r3]
 8013020:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013024:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013028:	7c7a      	ldrb	r2, [r7, #17]
 801302a:	429a      	cmp	r2, r3
 801302c:	d907      	bls.n	801303e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013030:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013034:	3301      	adds	r3, #1
 8013036:	b2da      	uxtb	r2, r3
 8013038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801303a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013040:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013044:	7c7a      	ldrb	r2, [r7, #17]
 8013046:	429a      	cmp	r2, r3
 8013048:	f200 80d2 	bhi.w	80131f0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801304c:	2301      	movs	r3, #1
 801304e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013056:	2b00      	cmp	r3, #0
 8013058:	d108      	bne.n	801306c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801305a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801305c:	f005 f9be 	bl	80183dc <tcp_zero_window_probe>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	d014      	beq.n	8013090 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8013066:	2300      	movs	r3, #0
 8013068:	623b      	str	r3, [r7, #32]
 801306a:	e011      	b.n	8013090 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801306c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801306e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013072:	4619      	mov	r1, r3
 8013074:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013076:	f004 f873 	bl	8017160 <tcp_split_unsent_seg>
 801307a:	4603      	mov	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d107      	bne.n	8013090 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8013080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013082:	f004 faf7 	bl	8017674 <tcp_output>
 8013086:	4603      	mov	r3, r0
 8013088:	2b00      	cmp	r3, #0
 801308a:	d101      	bne.n	8013090 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801308c:	2300      	movs	r3, #0
 801308e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8013090:	6a3b      	ldr	r3, [r7, #32]
 8013092:	2b00      	cmp	r3, #0
 8013094:	f000 80ac 	beq.w	80131f0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801309a:	2200      	movs	r2, #0
 801309c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80130a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80130a6:	2b06      	cmp	r3, #6
 80130a8:	f200 80a2 	bhi.w	80131f0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80130ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80130b2:	3301      	adds	r3, #1
 80130b4:	b2da      	uxtb	r2, r3
 80130b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130b8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80130bc:	e098      	b.n	80131f0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80130be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	db0f      	blt.n	80130e8 <tcp_slowtmr+0x1f4>
 80130c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80130ce:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d008      	beq.n	80130e8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80130d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80130dc:	b29b      	uxth	r3, r3
 80130de:	3301      	adds	r3, #1
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	b21a      	sxth	r2, r3
 80130e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130e6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80130e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80130ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130f0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80130f4:	429a      	cmp	r2, r3
 80130f6:	db7b      	blt.n	80131f0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80130f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80130fa:	f004 fdb1 	bl	8017c60 <tcp_rexmit_rto_prepare>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d007      	beq.n	8013114 <tcp_slowtmr+0x220>
 8013104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013108:	2b00      	cmp	r3, #0
 801310a:	d171      	bne.n	80131f0 <tcp_slowtmr+0x2fc>
 801310c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801310e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013110:	2b00      	cmp	r3, #0
 8013112:	d06d      	beq.n	80131f0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8013114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013116:	7d1b      	ldrb	r3, [r3, #20]
 8013118:	2b02      	cmp	r3, #2
 801311a:	d03a      	beq.n	8013192 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801311e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013122:	2b0c      	cmp	r3, #12
 8013124:	bf28      	it	cs
 8013126:	230c      	movcs	r3, #12
 8013128:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801312c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013130:	10db      	asrs	r3, r3, #3
 8013132:	b21b      	sxth	r3, r3
 8013134:	461a      	mov	r2, r3
 8013136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013138:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801313c:	4413      	add	r3, r2
 801313e:	7efa      	ldrb	r2, [r7, #27]
 8013140:	4910      	ldr	r1, [pc, #64]	@ (8013184 <tcp_slowtmr+0x290>)
 8013142:	5c8a      	ldrb	r2, [r1, r2]
 8013144:	4093      	lsls	r3, r2
 8013146:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801314e:	4293      	cmp	r3, r2
 8013150:	dc1a      	bgt.n	8013188 <tcp_slowtmr+0x294>
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	b21a      	sxth	r2, r3
 8013156:	e019      	b.n	801318c <tcp_slowtmr+0x298>
 8013158:	2002279c 	.word	0x2002279c
 801315c:	200227b2 	.word	0x200227b2
 8013160:	200227a8 	.word	0x200227a8
 8013164:	0801f0d4 	.word	0x0801f0d4
 8013168:	0801f418 	.word	0x0801f418
 801316c:	0801f118 	.word	0x0801f118
 8013170:	0801f444 	.word	0x0801f444
 8013174:	0801f470 	.word	0x0801f470
 8013178:	0801f4a0 	.word	0x0801f4a0
 801317c:	0801f4d4 	.word	0x0801f4d4
 8013180:	08021ad0 	.word	0x08021ad0
 8013184:	08021ac0 	.word	0x08021ac0
 8013188:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801318c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801318e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8013192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013194:	2200      	movs	r2, #0
 8013196:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801319a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801319e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80131a4:	4293      	cmp	r3, r2
 80131a6:	bf28      	it	cs
 80131a8:	4613      	movcs	r3, r2
 80131aa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80131ac:	8a7b      	ldrh	r3, [r7, #18]
 80131ae:	085b      	lsrs	r3, r3, #1
 80131b0:	b29a      	uxth	r2, r3
 80131b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131b4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80131b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80131be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131c2:	005b      	lsls	r3, r3, #1
 80131c4:	b29b      	uxth	r3, r3
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d206      	bcs.n	80131d8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80131ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131ce:	005b      	lsls	r3, r3, #1
 80131d0:	b29a      	uxth	r2, r3
 80131d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80131d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131da:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80131dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80131e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131e4:	2200      	movs	r2, #0
 80131e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80131ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80131ec:	f004 fdb2 	bl	8017d54 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80131f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131f2:	7d1b      	ldrb	r3, [r3, #20]
 80131f4:	2b06      	cmp	r3, #6
 80131f6:	d111      	bne.n	801321c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80131f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131fa:	8b5b      	ldrh	r3, [r3, #26]
 80131fc:	f003 0310 	and.w	r3, r3, #16
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00b      	beq.n	801321c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013204:	4b9c      	ldr	r3, [pc, #624]	@ (8013478 <tcp_slowtmr+0x584>)
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801320a:	6a1b      	ldr	r3, [r3, #32]
 801320c:	1ad3      	subs	r3, r2, r3
 801320e:	2b28      	cmp	r3, #40	@ 0x28
 8013210:	d904      	bls.n	801321c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8013212:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013216:	3301      	adds	r3, #1
 8013218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801321e:	7a5b      	ldrb	r3, [r3, #9]
 8013220:	f003 0308 	and.w	r3, r3, #8
 8013224:	2b00      	cmp	r3, #0
 8013226:	d04a      	beq.n	80132be <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801322a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801322c:	2b04      	cmp	r3, #4
 801322e:	d003      	beq.n	8013238 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8013230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013232:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013234:	2b07      	cmp	r3, #7
 8013236:	d142      	bne.n	80132be <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013238:	4b8f      	ldr	r3, [pc, #572]	@ (8013478 <tcp_slowtmr+0x584>)
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801323e:	6a1b      	ldr	r3, [r3, #32]
 8013240:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013244:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8013248:	4b8c      	ldr	r3, [pc, #560]	@ (801347c <tcp_slowtmr+0x588>)
 801324a:	440b      	add	r3, r1
 801324c:	498c      	ldr	r1, [pc, #560]	@ (8013480 <tcp_slowtmr+0x58c>)
 801324e:	fba1 1303 	umull	r1, r3, r1, r3
 8013252:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013254:	429a      	cmp	r2, r3
 8013256:	d90a      	bls.n	801326e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8013258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801325c:	3301      	adds	r3, #1
 801325e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8013262:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013266:	3301      	adds	r3, #1
 8013268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801326c:	e027      	b.n	80132be <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801326e:	4b82      	ldr	r3, [pc, #520]	@ (8013478 <tcp_slowtmr+0x584>)
 8013270:	681a      	ldr	r2, [r3, #0]
 8013272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013274:	6a1b      	ldr	r3, [r3, #32]
 8013276:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801327a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013280:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013284:	4618      	mov	r0, r3
 8013286:	4b7f      	ldr	r3, [pc, #508]	@ (8013484 <tcp_slowtmr+0x590>)
 8013288:	fb00 f303 	mul.w	r3, r0, r3
 801328c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801328e:	497c      	ldr	r1, [pc, #496]	@ (8013480 <tcp_slowtmr+0x58c>)
 8013290:	fba1 1303 	umull	r1, r3, r1, r3
 8013294:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013296:	429a      	cmp	r2, r3
 8013298:	d911      	bls.n	80132be <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801329a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801329c:	f005 f85e 	bl	801835c <tcp_keepalive>
 80132a0:	4603      	mov	r3, r0
 80132a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80132a6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d107      	bne.n	80132be <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80132ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80132b4:	3301      	adds	r3, #1
 80132b6:	b2da      	uxtb	r2, r3
 80132b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ba:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80132be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d011      	beq.n	80132ea <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80132c6:	4b6c      	ldr	r3, [pc, #432]	@ (8013478 <tcp_slowtmr+0x584>)
 80132c8:	681a      	ldr	r2, [r3, #0]
 80132ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132cc:	6a1b      	ldr	r3, [r3, #32]
 80132ce:	1ad2      	subs	r2, r2, r3
 80132d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80132d6:	4619      	mov	r1, r3
 80132d8:	460b      	mov	r3, r1
 80132da:	005b      	lsls	r3, r3, #1
 80132dc:	440b      	add	r3, r1
 80132de:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d302      	bcc.n	80132ea <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80132e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80132e6:	f000 feb1 	bl	801404c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80132ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ec:	7d1b      	ldrb	r3, [r3, #20]
 80132ee:	2b03      	cmp	r3, #3
 80132f0:	d10b      	bne.n	801330a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132f2:	4b61      	ldr	r3, [pc, #388]	@ (8013478 <tcp_slowtmr+0x584>)
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132f8:	6a1b      	ldr	r3, [r3, #32]
 80132fa:	1ad3      	subs	r3, r2, r3
 80132fc:	2b28      	cmp	r3, #40	@ 0x28
 80132fe:	d904      	bls.n	801330a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8013300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013304:	3301      	adds	r3, #1
 8013306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 801330a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801330c:	7d1b      	ldrb	r3, [r3, #20]
 801330e:	2b09      	cmp	r3, #9
 8013310:	d10b      	bne.n	801332a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013312:	4b59      	ldr	r3, [pc, #356]	@ (8013478 <tcp_slowtmr+0x584>)
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013318:	6a1b      	ldr	r3, [r3, #32]
 801331a:	1ad3      	subs	r3, r2, r3
 801331c:	2bf0      	cmp	r3, #240	@ 0xf0
 801331e:	d904      	bls.n	801332a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013324:	3301      	adds	r3, #1
 8013326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801332a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801332e:	2b00      	cmp	r3, #0
 8013330:	d060      	beq.n	80133f4 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8013332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013338:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801333a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801333c:	f000 fccc 	bl	8013cd8 <tcp_pcb_purge>
      if (prev != NULL) {
 8013340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013342:	2b00      	cmp	r3, #0
 8013344:	d010      	beq.n	8013368 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013346:	4b50      	ldr	r3, [pc, #320]	@ (8013488 <tcp_slowtmr+0x594>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801334c:	429a      	cmp	r2, r3
 801334e:	d106      	bne.n	801335e <tcp_slowtmr+0x46a>
 8013350:	4b4e      	ldr	r3, [pc, #312]	@ (801348c <tcp_slowtmr+0x598>)
 8013352:	f240 526d 	movw	r2, #1389	@ 0x56d
 8013356:	494e      	ldr	r1, [pc, #312]	@ (8013490 <tcp_slowtmr+0x59c>)
 8013358:	484e      	ldr	r0, [pc, #312]	@ (8013494 <tcp_slowtmr+0x5a0>)
 801335a:	f009 f979 	bl	801c650 <iprintf>
        prev->next = pcb->next;
 801335e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013360:	68da      	ldr	r2, [r3, #12]
 8013362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013364:	60da      	str	r2, [r3, #12]
 8013366:	e00f      	b.n	8013388 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013368:	4b47      	ldr	r3, [pc, #284]	@ (8013488 <tcp_slowtmr+0x594>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801336e:	429a      	cmp	r2, r3
 8013370:	d006      	beq.n	8013380 <tcp_slowtmr+0x48c>
 8013372:	4b46      	ldr	r3, [pc, #280]	@ (801348c <tcp_slowtmr+0x598>)
 8013374:	f240 5271 	movw	r2, #1393	@ 0x571
 8013378:	4947      	ldr	r1, [pc, #284]	@ (8013498 <tcp_slowtmr+0x5a4>)
 801337a:	4846      	ldr	r0, [pc, #280]	@ (8013494 <tcp_slowtmr+0x5a0>)
 801337c:	f009 f968 	bl	801c650 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	4a40      	ldr	r2, [pc, #256]	@ (8013488 <tcp_slowtmr+0x594>)
 8013386:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013388:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801338c:	2b00      	cmp	r3, #0
 801338e:	d013      	beq.n	80133b8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013392:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013396:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013398:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801339c:	3304      	adds	r3, #4
 801339e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133a0:	8ad2      	ldrh	r2, [r2, #22]
 80133a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80133a4:	8b09      	ldrh	r1, [r1, #24]
 80133a6:	9102      	str	r1, [sp, #8]
 80133a8:	9201      	str	r2, [sp, #4]
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	462b      	mov	r3, r5
 80133ae:	4622      	mov	r2, r4
 80133b0:	4601      	mov	r1, r0
 80133b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80133b4:	f004 ff1e 	bl	80181f4 <tcp_rst>
      err_arg = pcb->callback_arg;
 80133b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ba:	691b      	ldr	r3, [r3, #16]
 80133bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80133be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c0:	7d1b      	ldrb	r3, [r3, #20]
 80133c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80133c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80133c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ca:	68db      	ldr	r3, [r3, #12]
 80133cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80133ce:	6838      	ldr	r0, [r7, #0]
 80133d0:	f7fe ffa0 	bl	8012314 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80133d4:	4b31      	ldr	r3, [pc, #196]	@ (801349c <tcp_slowtmr+0x5a8>)
 80133d6:	2200      	movs	r2, #0
 80133d8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d004      	beq.n	80133ea <tcp_slowtmr+0x4f6>
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f06f 010c 	mvn.w	r1, #12
 80133e6:	68b8      	ldr	r0, [r7, #8]
 80133e8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80133ea:	4b2c      	ldr	r3, [pc, #176]	@ (801349c <tcp_slowtmr+0x5a8>)
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d037      	beq.n	8013462 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80133f2:	e592      	b.n	8012f1a <tcp_slowtmr+0x26>
      prev = pcb;
 80133f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80133f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80133fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013400:	7f1b      	ldrb	r3, [r3, #28]
 8013402:	3301      	adds	r3, #1
 8013404:	b2da      	uxtb	r2, r3
 8013406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013408:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801340c:	7f1a      	ldrb	r2, [r3, #28]
 801340e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013410:	7f5b      	ldrb	r3, [r3, #29]
 8013412:	429a      	cmp	r2, r3
 8013414:	d325      	bcc.n	8013462 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013418:	2200      	movs	r2, #0
 801341a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 801341c:	4b1f      	ldr	r3, [pc, #124]	@ (801349c <tcp_slowtmr+0x5a8>)
 801341e:	2200      	movs	r2, #0
 8013420:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013428:	2b00      	cmp	r3, #0
 801342a:	d00b      	beq.n	8013444 <tcp_slowtmr+0x550>
 801342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801342e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013434:	6912      	ldr	r2, [r2, #16]
 8013436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013438:	4610      	mov	r0, r2
 801343a:	4798      	blx	r3
 801343c:	4603      	mov	r3, r0
 801343e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8013442:	e002      	b.n	801344a <tcp_slowtmr+0x556>
 8013444:	2300      	movs	r3, #0
 8013446:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801344a:	4b14      	ldr	r3, [pc, #80]	@ (801349c <tcp_slowtmr+0x5a8>)
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	f47f ad62 	bne.w	8012f18 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013454:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013458:	2b00      	cmp	r3, #0
 801345a:	d102      	bne.n	8013462 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801345c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801345e:	f004 f909 	bl	8017674 <tcp_output>
  while (pcb != NULL) {
 8013462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013464:	2b00      	cmp	r3, #0
 8013466:	f47f ad5e 	bne.w	8012f26 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801346a:	2300      	movs	r3, #0
 801346c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801346e:	4b0c      	ldr	r3, [pc, #48]	@ (80134a0 <tcp_slowtmr+0x5ac>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013474:	e069      	b.n	801354a <tcp_slowtmr+0x656>
 8013476:	bf00      	nop
 8013478:	2002279c 	.word	0x2002279c
 801347c:	000a4cb8 	.word	0x000a4cb8
 8013480:	10624dd3 	.word	0x10624dd3
 8013484:	000124f8 	.word	0x000124f8
 8013488:	200227a8 	.word	0x200227a8
 801348c:	0801f0d4 	.word	0x0801f0d4
 8013490:	0801f50c 	.word	0x0801f50c
 8013494:	0801f118 	.word	0x0801f118
 8013498:	0801f538 	.word	0x0801f538
 801349c:	200227b0 	.word	0x200227b0
 80134a0:	200227ac 	.word	0x200227ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80134a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a6:	7d1b      	ldrb	r3, [r3, #20]
 80134a8:	2b0a      	cmp	r3, #10
 80134aa:	d006      	beq.n	80134ba <tcp_slowtmr+0x5c6>
 80134ac:	4b2b      	ldr	r3, [pc, #172]	@ (801355c <tcp_slowtmr+0x668>)
 80134ae:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80134b2:	492b      	ldr	r1, [pc, #172]	@ (8013560 <tcp_slowtmr+0x66c>)
 80134b4:	482b      	ldr	r0, [pc, #172]	@ (8013564 <tcp_slowtmr+0x670>)
 80134b6:	f009 f8cb 	bl	801c650 <iprintf>
    pcb_remove = 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80134c0:	4b29      	ldr	r3, [pc, #164]	@ (8013568 <tcp_slowtmr+0x674>)
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134c6:	6a1b      	ldr	r3, [r3, #32]
 80134c8:	1ad3      	subs	r3, r2, r3
 80134ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80134cc:	d904      	bls.n	80134d8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80134ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134d2:	3301      	adds	r3, #1
 80134d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80134d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d02f      	beq.n	8013540 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80134e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80134e2:	f000 fbf9 	bl	8013cd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80134e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d010      	beq.n	801350e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80134ec:	4b1f      	ldr	r3, [pc, #124]	@ (801356c <tcp_slowtmr+0x678>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d106      	bne.n	8013504 <tcp_slowtmr+0x610>
 80134f6:	4b19      	ldr	r3, [pc, #100]	@ (801355c <tcp_slowtmr+0x668>)
 80134f8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80134fc:	491c      	ldr	r1, [pc, #112]	@ (8013570 <tcp_slowtmr+0x67c>)
 80134fe:	4819      	ldr	r0, [pc, #100]	@ (8013564 <tcp_slowtmr+0x670>)
 8013500:	f009 f8a6 	bl	801c650 <iprintf>
        prev->next = pcb->next;
 8013504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013506:	68da      	ldr	r2, [r3, #12]
 8013508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801350a:	60da      	str	r2, [r3, #12]
 801350c:	e00f      	b.n	801352e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801350e:	4b17      	ldr	r3, [pc, #92]	@ (801356c <tcp_slowtmr+0x678>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013514:	429a      	cmp	r2, r3
 8013516:	d006      	beq.n	8013526 <tcp_slowtmr+0x632>
 8013518:	4b10      	ldr	r3, [pc, #64]	@ (801355c <tcp_slowtmr+0x668>)
 801351a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801351e:	4915      	ldr	r1, [pc, #84]	@ (8013574 <tcp_slowtmr+0x680>)
 8013520:	4810      	ldr	r0, [pc, #64]	@ (8013564 <tcp_slowtmr+0x670>)
 8013522:	f009 f895 	bl	801c650 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	4a10      	ldr	r2, [pc, #64]	@ (801356c <tcp_slowtmr+0x678>)
 801352c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013530:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013538:	69f8      	ldr	r0, [r7, #28]
 801353a:	f7fe feeb 	bl	8012314 <tcp_free>
 801353e:	e004      	b.n	801354a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8013540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013542:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801354a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801354c:	2b00      	cmp	r3, #0
 801354e:	d1a9      	bne.n	80134a4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8013550:	bf00      	nop
 8013552:	bf00      	nop
 8013554:	3730      	adds	r7, #48	@ 0x30
 8013556:	46bd      	mov	sp, r7
 8013558:	bdb0      	pop	{r4, r5, r7, pc}
 801355a:	bf00      	nop
 801355c:	0801f0d4 	.word	0x0801f0d4
 8013560:	0801f564 	.word	0x0801f564
 8013564:	0801f118 	.word	0x0801f118
 8013568:	2002279c 	.word	0x2002279c
 801356c:	200227ac 	.word	0x200227ac
 8013570:	0801f594 	.word	0x0801f594
 8013574:	0801f5bc 	.word	0x0801f5bc

08013578 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801357e:	4b2d      	ldr	r3, [pc, #180]	@ (8013634 <tcp_fasttmr+0xbc>)
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	3301      	adds	r3, #1
 8013584:	b2da      	uxtb	r2, r3
 8013586:	4b2b      	ldr	r3, [pc, #172]	@ (8013634 <tcp_fasttmr+0xbc>)
 8013588:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801358a:	4b2b      	ldr	r3, [pc, #172]	@ (8013638 <tcp_fasttmr+0xc0>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013590:	e048      	b.n	8013624 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	7f9a      	ldrb	r2, [r3, #30]
 8013596:	4b27      	ldr	r3, [pc, #156]	@ (8013634 <tcp_fasttmr+0xbc>)
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	429a      	cmp	r2, r3
 801359c:	d03f      	beq.n	801361e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801359e:	4b25      	ldr	r3, [pc, #148]	@ (8013634 <tcp_fasttmr+0xbc>)
 80135a0:	781a      	ldrb	r2, [r3, #0]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	8b5b      	ldrh	r3, [r3, #26]
 80135aa:	f003 0301 	and.w	r3, r3, #1
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d010      	beq.n	80135d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	8b5b      	ldrh	r3, [r3, #26]
 80135b6:	f043 0302 	orr.w	r3, r3, #2
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f004 f857 	bl	8017674 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	8b5b      	ldrh	r3, [r3, #26]
 80135ca:	f023 0303 	bic.w	r3, r3, #3
 80135ce:	b29a      	uxth	r2, r3
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	8b5b      	ldrh	r3, [r3, #26]
 80135d8:	f003 0308 	and.w	r3, r3, #8
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d009      	beq.n	80135f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	8b5b      	ldrh	r3, [r3, #26]
 80135e4:	f023 0308 	bic.w	r3, r3, #8
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f7ff f824 	bl	801263c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d00a      	beq.n	8013618 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013602:	4b0e      	ldr	r3, [pc, #56]	@ (801363c <tcp_fasttmr+0xc4>)
 8013604:	2200      	movs	r2, #0
 8013606:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f000 f819 	bl	8013640 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801360e:	4b0b      	ldr	r3, [pc, #44]	@ (801363c <tcp_fasttmr+0xc4>)
 8013610:	781b      	ldrb	r3, [r3, #0]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d000      	beq.n	8013618 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013616:	e7b8      	b.n	801358a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	607b      	str	r3, [r7, #4]
 801361c:	e002      	b.n	8013624 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	68db      	ldr	r3, [r3, #12]
 8013622:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d1b3      	bne.n	8013592 <tcp_fasttmr+0x1a>
    }
  }
}
 801362a:	bf00      	nop
 801362c:	bf00      	nop
 801362e:	3708      	adds	r7, #8
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	200227b2 	.word	0x200227b2
 8013638:	200227a8 	.word	0x200227a8
 801363c:	200227b0 	.word	0x200227b0

08013640 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013640:	b590      	push	{r4, r7, lr}
 8013642:	b085      	sub	sp, #20
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d109      	bne.n	8013662 <tcp_process_refused_data+0x22>
 801364e:	4b37      	ldr	r3, [pc, #220]	@ (801372c <tcp_process_refused_data+0xec>)
 8013650:	f240 6209 	movw	r2, #1545	@ 0x609
 8013654:	4936      	ldr	r1, [pc, #216]	@ (8013730 <tcp_process_refused_data+0xf0>)
 8013656:	4837      	ldr	r0, [pc, #220]	@ (8013734 <tcp_process_refused_data+0xf4>)
 8013658:	f008 fffa 	bl	801c650 <iprintf>
 801365c:	f06f 030f 	mvn.w	r3, #15
 8013660:	e060      	b.n	8013724 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013666:	7b5b      	ldrb	r3, [r3, #13]
 8013668:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801366e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801367c:	2b00      	cmp	r3, #0
 801367e:	d00b      	beq.n	8013698 <tcp_process_refused_data+0x58>
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6918      	ldr	r0, [r3, #16]
 801368a:	2300      	movs	r3, #0
 801368c:	68ba      	ldr	r2, [r7, #8]
 801368e:	6879      	ldr	r1, [r7, #4]
 8013690:	47a0      	blx	r4
 8013692:	4603      	mov	r3, r0
 8013694:	73fb      	strb	r3, [r7, #15]
 8013696:	e007      	b.n	80136a8 <tcp_process_refused_data+0x68>
 8013698:	2300      	movs	r3, #0
 801369a:	68ba      	ldr	r2, [r7, #8]
 801369c:	6879      	ldr	r1, [r7, #4]
 801369e:	2000      	movs	r0, #0
 80136a0:	f000 f8a4 	bl	80137ec <tcp_recv_null>
 80136a4:	4603      	mov	r3, r0
 80136a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80136a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d12a      	bne.n	8013706 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80136b0:	7bbb      	ldrb	r3, [r7, #14]
 80136b2:	f003 0320 	and.w	r3, r3, #32
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d033      	beq.n	8013722 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80136c2:	d005      	beq.n	80136d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80136c8:	3301      	adds	r3, #1
 80136ca:	b29a      	uxth	r2, r3
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d00b      	beq.n	80136f2 <tcp_process_refused_data+0xb2>
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6918      	ldr	r0, [r3, #16]
 80136e4:	2300      	movs	r3, #0
 80136e6:	2200      	movs	r2, #0
 80136e8:	6879      	ldr	r1, [r7, #4]
 80136ea:	47a0      	blx	r4
 80136ec:	4603      	mov	r3, r0
 80136ee:	73fb      	strb	r3, [r7, #15]
 80136f0:	e001      	b.n	80136f6 <tcp_process_refused_data+0xb6>
 80136f2:	2300      	movs	r3, #0
 80136f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80136f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136fa:	f113 0f0d 	cmn.w	r3, #13
 80136fe:	d110      	bne.n	8013722 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013700:	f06f 030c 	mvn.w	r3, #12
 8013704:	e00e      	b.n	8013724 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801370a:	f113 0f0d 	cmn.w	r3, #13
 801370e:	d102      	bne.n	8013716 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013710:	f06f 030c 	mvn.w	r3, #12
 8013714:	e006      	b.n	8013724 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	68ba      	ldr	r2, [r7, #8]
 801371a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801371c:	f06f 0304 	mvn.w	r3, #4
 8013720:	e000      	b.n	8013724 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013722:	2300      	movs	r3, #0
}
 8013724:	4618      	mov	r0, r3
 8013726:	3714      	adds	r7, #20
 8013728:	46bd      	mov	sp, r7
 801372a:	bd90      	pop	{r4, r7, pc}
 801372c:	0801f0d4 	.word	0x0801f0d4
 8013730:	0801f5e4 	.word	0x0801f5e4
 8013734:	0801f118 	.word	0x0801f118

08013738 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b084      	sub	sp, #16
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013740:	e007      	b.n	8013752 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f000 f80a 	bl	8013762 <tcp_seg_free>
    seg = next;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d1f4      	bne.n	8013742 <tcp_segs_free+0xa>
  }
}
 8013758:	bf00      	nop
 801375a:	bf00      	nop
 801375c:	3710      	adds	r7, #16
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013762:	b580      	push	{r7, lr}
 8013764:	b082      	sub	sp, #8
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d00c      	beq.n	801378a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d004      	beq.n	8013782 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	4618      	mov	r0, r3
 801377e:	f7fe fb0d 	bl	8011d9c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013782:	6879      	ldr	r1, [r7, #4]
 8013784:	2003      	movs	r0, #3
 8013786:	f7fd fb6f 	bl	8010e68 <memp_free>
  }
}
 801378a:	bf00      	nop
 801378c:	3708      	adds	r7, #8
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
	...

08013794 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b084      	sub	sp, #16
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d106      	bne.n	80137b0 <tcp_seg_copy+0x1c>
 80137a2:	4b0f      	ldr	r3, [pc, #60]	@ (80137e0 <tcp_seg_copy+0x4c>)
 80137a4:	f240 6282 	movw	r2, #1666	@ 0x682
 80137a8:	490e      	ldr	r1, [pc, #56]	@ (80137e4 <tcp_seg_copy+0x50>)
 80137aa:	480f      	ldr	r0, [pc, #60]	@ (80137e8 <tcp_seg_copy+0x54>)
 80137ac:	f008 ff50 	bl	801c650 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80137b0:	2003      	movs	r0, #3
 80137b2:	f7fd fae3 	bl	8010d7c <memp_malloc>
 80137b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d101      	bne.n	80137c2 <tcp_seg_copy+0x2e>
    return NULL;
 80137be:	2300      	movs	r3, #0
 80137c0:	e00a      	b.n	80137d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80137c2:	2214      	movs	r2, #20
 80137c4:	6879      	ldr	r1, [r7, #4]
 80137c6:	68f8      	ldr	r0, [r7, #12]
 80137c8:	f009 f917 	bl	801c9fa <memcpy>
  pbuf_ref(cseg->p);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	685b      	ldr	r3, [r3, #4]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7fe fb89 	bl	8011ee8 <pbuf_ref>
  return cseg;
 80137d6:	68fb      	ldr	r3, [r7, #12]
}
 80137d8:	4618      	mov	r0, r3
 80137da:	3710      	adds	r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}
 80137e0:	0801f0d4 	.word	0x0801f0d4
 80137e4:	0801f628 	.word	0x0801f628
 80137e8:	0801f118 	.word	0x0801f118

080137ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d109      	bne.n	8013814 <tcp_recv_null+0x28>
 8013800:	4b12      	ldr	r3, [pc, #72]	@ (801384c <tcp_recv_null+0x60>)
 8013802:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013806:	4912      	ldr	r1, [pc, #72]	@ (8013850 <tcp_recv_null+0x64>)
 8013808:	4812      	ldr	r0, [pc, #72]	@ (8013854 <tcp_recv_null+0x68>)
 801380a:	f008 ff21 	bl	801c650 <iprintf>
 801380e:	f06f 030f 	mvn.w	r3, #15
 8013812:	e016      	b.n	8013842 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d009      	beq.n	801382e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	891b      	ldrh	r3, [r3, #8]
 801381e:	4619      	mov	r1, r3
 8013820:	68b8      	ldr	r0, [r7, #8]
 8013822:	f7ff f9b9 	bl	8012b98 <tcp_recved>
    pbuf_free(p);
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f7fe fab8 	bl	8011d9c <pbuf_free>
 801382c:	e008      	b.n	8013840 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801382e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d104      	bne.n	8013840 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013836:	68b8      	ldr	r0, [r7, #8]
 8013838:	f7fe ff6a 	bl	8012710 <tcp_close>
 801383c:	4603      	mov	r3, r0
 801383e:	e000      	b.n	8013842 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013840:	2300      	movs	r3, #0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3710      	adds	r7, #16
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}
 801384a:	bf00      	nop
 801384c:	0801f0d4 	.word	0x0801f0d4
 8013850:	0801f644 	.word	0x0801f644
 8013854:	0801f118 	.word	0x0801f118

08013858 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b086      	sub	sp, #24
 801385c:	af00      	add	r7, sp, #0
 801385e:	4603      	mov	r3, r0
 8013860:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013866:	2b00      	cmp	r3, #0
 8013868:	db01      	blt.n	801386e <tcp_kill_prio+0x16>
 801386a:	79fb      	ldrb	r3, [r7, #7]
 801386c:	e000      	b.n	8013870 <tcp_kill_prio+0x18>
 801386e:	237f      	movs	r3, #127	@ 0x7f
 8013870:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013872:	7afb      	ldrb	r3, [r7, #11]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d034      	beq.n	80138e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013878:	7afb      	ldrb	r3, [r7, #11]
 801387a:	3b01      	subs	r3, #1
 801387c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801387e:	2300      	movs	r3, #0
 8013880:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013882:	2300      	movs	r3, #0
 8013884:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013886:	4b19      	ldr	r3, [pc, #100]	@ (80138ec <tcp_kill_prio+0x94>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	617b      	str	r3, [r7, #20]
 801388c:	e01f      	b.n	80138ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	7d5b      	ldrb	r3, [r3, #21]
 8013892:	7afa      	ldrb	r2, [r7, #11]
 8013894:	429a      	cmp	r2, r3
 8013896:	d80c      	bhi.n	80138b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801389c:	7afa      	ldrb	r2, [r7, #11]
 801389e:	429a      	cmp	r2, r3
 80138a0:	d112      	bne.n	80138c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80138a2:	4b13      	ldr	r3, [pc, #76]	@ (80138f0 <tcp_kill_prio+0x98>)
 80138a4:	681a      	ldr	r2, [r3, #0]
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	6a1b      	ldr	r3, [r3, #32]
 80138aa:	1ad3      	subs	r3, r2, r3
 80138ac:	68fa      	ldr	r2, [r7, #12]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d80a      	bhi.n	80138c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80138b2:	4b0f      	ldr	r3, [pc, #60]	@ (80138f0 <tcp_kill_prio+0x98>)
 80138b4:	681a      	ldr	r2, [r3, #0]
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	6a1b      	ldr	r3, [r3, #32]
 80138ba:	1ad3      	subs	r3, r2, r3
 80138bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	7d5b      	ldrb	r3, [r3, #21]
 80138c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	68db      	ldr	r3, [r3, #12]
 80138cc:	617b      	str	r3, [r7, #20]
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d1dc      	bne.n	801388e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d004      	beq.n	80138e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80138da:	6938      	ldr	r0, [r7, #16]
 80138dc:	f7ff f85e 	bl	801299c <tcp_abort>
 80138e0:	e000      	b.n	80138e4 <tcp_kill_prio+0x8c>
    return;
 80138e2:	bf00      	nop
  }
}
 80138e4:	3718      	adds	r7, #24
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	200227a8 	.word	0x200227a8
 80138f0:	2002279c 	.word	0x2002279c

080138f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b086      	sub	sp, #24
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	4603      	mov	r3, r0
 80138fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80138fe:	79fb      	ldrb	r3, [r7, #7]
 8013900:	2b08      	cmp	r3, #8
 8013902:	d009      	beq.n	8013918 <tcp_kill_state+0x24>
 8013904:	79fb      	ldrb	r3, [r7, #7]
 8013906:	2b09      	cmp	r3, #9
 8013908:	d006      	beq.n	8013918 <tcp_kill_state+0x24>
 801390a:	4b1a      	ldr	r3, [pc, #104]	@ (8013974 <tcp_kill_state+0x80>)
 801390c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013910:	4919      	ldr	r1, [pc, #100]	@ (8013978 <tcp_kill_state+0x84>)
 8013912:	481a      	ldr	r0, [pc, #104]	@ (801397c <tcp_kill_state+0x88>)
 8013914:	f008 fe9c 	bl	801c650 <iprintf>

  inactivity = 0;
 8013918:	2300      	movs	r3, #0
 801391a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801391c:	2300      	movs	r3, #0
 801391e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013920:	4b17      	ldr	r3, [pc, #92]	@ (8013980 <tcp_kill_state+0x8c>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	617b      	str	r3, [r7, #20]
 8013926:	e017      	b.n	8013958 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	7d1b      	ldrb	r3, [r3, #20]
 801392c:	79fa      	ldrb	r2, [r7, #7]
 801392e:	429a      	cmp	r2, r3
 8013930:	d10f      	bne.n	8013952 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013932:	4b14      	ldr	r3, [pc, #80]	@ (8013984 <tcp_kill_state+0x90>)
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	6a1b      	ldr	r3, [r3, #32]
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	68fa      	ldr	r2, [r7, #12]
 801393e:	429a      	cmp	r2, r3
 8013940:	d807      	bhi.n	8013952 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013942:	4b10      	ldr	r3, [pc, #64]	@ (8013984 <tcp_kill_state+0x90>)
 8013944:	681a      	ldr	r2, [r3, #0]
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	6a1b      	ldr	r3, [r3, #32]
 801394a:	1ad3      	subs	r3, r2, r3
 801394c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	68db      	ldr	r3, [r3, #12]
 8013956:	617b      	str	r3, [r7, #20]
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d1e4      	bne.n	8013928 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801395e:	693b      	ldr	r3, [r7, #16]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d003      	beq.n	801396c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013964:	2100      	movs	r1, #0
 8013966:	6938      	ldr	r0, [r7, #16]
 8013968:	f7fe ff5a 	bl	8012820 <tcp_abandon>
  }
}
 801396c:	bf00      	nop
 801396e:	3718      	adds	r7, #24
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	0801f0d4 	.word	0x0801f0d4
 8013978:	0801f660 	.word	0x0801f660
 801397c:	0801f118 	.word	0x0801f118
 8013980:	200227a8 	.word	0x200227a8
 8013984:	2002279c 	.word	0x2002279c

08013988 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b084      	sub	sp, #16
 801398c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801398e:	2300      	movs	r3, #0
 8013990:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013992:	2300      	movs	r3, #0
 8013994:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013996:	4b12      	ldr	r3, [pc, #72]	@ (80139e0 <tcp_kill_timewait+0x58>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	60fb      	str	r3, [r7, #12]
 801399c:	e012      	b.n	80139c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801399e:	4b11      	ldr	r3, [pc, #68]	@ (80139e4 <tcp_kill_timewait+0x5c>)
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6a1b      	ldr	r3, [r3, #32]
 80139a6:	1ad3      	subs	r3, r2, r3
 80139a8:	687a      	ldr	r2, [r7, #4]
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d807      	bhi.n	80139be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80139ae:	4b0d      	ldr	r3, [pc, #52]	@ (80139e4 <tcp_kill_timewait+0x5c>)
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	6a1b      	ldr	r3, [r3, #32]
 80139b6:	1ad3      	subs	r3, r2, r3
 80139b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	68db      	ldr	r3, [r3, #12]
 80139c2:	60fb      	str	r3, [r7, #12]
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d1e9      	bne.n	801399e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d002      	beq.n	80139d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80139d0:	68b8      	ldr	r0, [r7, #8]
 80139d2:	f7fe ffe3 	bl	801299c <tcp_abort>
  }
}
 80139d6:	bf00      	nop
 80139d8:	3710      	adds	r7, #16
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	200227ac 	.word	0x200227ac
 80139e4:	2002279c 	.word	0x2002279c

080139e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80139ee:	4b10      	ldr	r3, [pc, #64]	@ (8013a30 <tcp_handle_closepend+0x48>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80139f4:	e014      	b.n	8013a20 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	8b5b      	ldrh	r3, [r3, #26]
 8013a00:	f003 0308 	and.w	r3, r3, #8
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d009      	beq.n	8013a1c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	8b5b      	ldrh	r3, [r3, #26]
 8013a0c:	f023 0308 	bic.w	r3, r3, #8
 8013a10:	b29a      	uxth	r2, r3
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f7fe fe10 	bl	801263c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d1e7      	bne.n	80139f6 <tcp_handle_closepend+0xe>
  }
}
 8013a26:	bf00      	nop
 8013a28:	bf00      	nop
 8013a2a:	3708      	adds	r7, #8
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	200227a8 	.word	0x200227a8

08013a34 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b084      	sub	sp, #16
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a3e:	2001      	movs	r0, #1
 8013a40:	f7fd f99c 	bl	8010d7c <memp_malloc>
 8013a44:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d126      	bne.n	8013a9a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013a4c:	f7ff ffcc 	bl	80139e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013a50:	f7ff ff9a 	bl	8013988 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a54:	2001      	movs	r0, #1
 8013a56:	f7fd f991 	bl	8010d7c <memp_malloc>
 8013a5a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d11b      	bne.n	8013a9a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013a62:	2009      	movs	r0, #9
 8013a64:	f7ff ff46 	bl	80138f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a68:	2001      	movs	r0, #1
 8013a6a:	f7fd f987 	bl	8010d7c <memp_malloc>
 8013a6e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d111      	bne.n	8013a9a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013a76:	2008      	movs	r0, #8
 8013a78:	f7ff ff3c 	bl	80138f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a7c:	2001      	movs	r0, #1
 8013a7e:	f7fd f97d 	bl	8010d7c <memp_malloc>
 8013a82:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d107      	bne.n	8013a9a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013a8a:	79fb      	ldrb	r3, [r7, #7]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f7ff fee3 	bl	8013858 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a92:	2001      	movs	r0, #1
 8013a94:	f7fd f972 	bl	8010d7c <memp_malloc>
 8013a98:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d03f      	beq.n	8013b20 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013aa0:	229c      	movs	r2, #156	@ 0x9c
 8013aa2:	2100      	movs	r1, #0
 8013aa4:	68f8      	ldr	r0, [r7, #12]
 8013aa6:	f008 ff33 	bl	801c910 <memset>
    pcb->prio = prio;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	79fa      	ldrb	r2, [r7, #7]
 8013aae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013ab6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	22ff      	movs	r2, #255	@ 0xff
 8013ace:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013ad6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2206      	movs	r2, #6
 8013adc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	2206      	movs	r2, #6
 8013ae4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013aec:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	2201      	movs	r2, #1
 8013af2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8013af6:	4b0d      	ldr	r3, [pc, #52]	@ (8013b2c <tcp_alloc+0xf8>)
 8013af8:	681a      	ldr	r2, [r3, #0]
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013afe:	4b0c      	ldr	r3, [pc, #48]	@ (8013b30 <tcp_alloc+0xfc>)
 8013b00:	781a      	ldrb	r2, [r3, #0]
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013b0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	4a08      	ldr	r2, [pc, #32]	@ (8013b34 <tcp_alloc+0x100>)
 8013b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	4a07      	ldr	r2, [pc, #28]	@ (8013b38 <tcp_alloc+0x104>)
 8013b1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013b20:	68fb      	ldr	r3, [r7, #12]
}
 8013b22:	4618      	mov	r0, r3
 8013b24:	3710      	adds	r7, #16
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	2002279c 	.word	0x2002279c
 8013b30:	200227b2 	.word	0x200227b2
 8013b34:	080137ed 	.word	0x080137ed
 8013b38:	006ddd00 	.word	0x006ddd00

08013b3c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	4603      	mov	r3, r0
 8013b44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013b46:	2040      	movs	r0, #64	@ 0x40
 8013b48:	f7ff ff74 	bl	8013a34 <tcp_alloc>
 8013b4c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3710      	adds	r7, #16
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	b083      	sub	sp, #12
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d002      	beq.n	8013b6e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	683a      	ldr	r2, [r7, #0]
 8013b6c:	611a      	str	r2, [r3, #16]
  }
}
 8013b6e:	bf00      	nop
 8013b70:	370c      	adds	r7, #12
 8013b72:	46bd      	mov	sp, r7
 8013b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b78:	4770      	bx	lr
	...

08013b7c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d00e      	beq.n	8013baa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	7d1b      	ldrb	r3, [r3, #20]
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d106      	bne.n	8013ba2 <tcp_recv+0x26>
 8013b94:	4b07      	ldr	r3, [pc, #28]	@ (8013bb4 <tcp_recv+0x38>)
 8013b96:	f240 72df 	movw	r2, #2015	@ 0x7df
 8013b9a:	4907      	ldr	r1, [pc, #28]	@ (8013bb8 <tcp_recv+0x3c>)
 8013b9c:	4807      	ldr	r0, [pc, #28]	@ (8013bbc <tcp_recv+0x40>)
 8013b9e:	f008 fd57 	bl	801c650 <iprintf>
    pcb->recv = recv;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	683a      	ldr	r2, [r7, #0]
 8013ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8013baa:	bf00      	nop
 8013bac:	3708      	adds	r7, #8
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	0801f0d4 	.word	0x0801f0d4
 8013bb8:	0801f670 	.word	0x0801f670
 8013bbc:	0801f118 	.word	0x0801f118

08013bc0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d00e      	beq.n	8013bee <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	7d1b      	ldrb	r3, [r3, #20]
 8013bd4:	2b01      	cmp	r3, #1
 8013bd6:	d106      	bne.n	8013be6 <tcp_sent+0x26>
 8013bd8:	4b07      	ldr	r3, [pc, #28]	@ (8013bf8 <tcp_sent+0x38>)
 8013bda:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8013bde:	4907      	ldr	r1, [pc, #28]	@ (8013bfc <tcp_sent+0x3c>)
 8013be0:	4807      	ldr	r0, [pc, #28]	@ (8013c00 <tcp_sent+0x40>)
 8013be2:	f008 fd35 	bl	801c650 <iprintf>
    pcb->sent = sent;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	683a      	ldr	r2, [r7, #0]
 8013bea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8013bee:	bf00      	nop
 8013bf0:	3708      	adds	r7, #8
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	bf00      	nop
 8013bf8:	0801f0d4 	.word	0x0801f0d4
 8013bfc:	0801f698 	.word	0x0801f698
 8013c00:	0801f118 	.word	0x0801f118

08013c04 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d00e      	beq.n	8013c32 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	7d1b      	ldrb	r3, [r3, #20]
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	d106      	bne.n	8013c2a <tcp_err+0x26>
 8013c1c:	4b07      	ldr	r3, [pc, #28]	@ (8013c3c <tcp_err+0x38>)
 8013c1e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8013c22:	4907      	ldr	r1, [pc, #28]	@ (8013c40 <tcp_err+0x3c>)
 8013c24:	4807      	ldr	r0, [pc, #28]	@ (8013c44 <tcp_err+0x40>)
 8013c26:	f008 fd13 	bl	801c650 <iprintf>
    pcb->errf = err;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	683a      	ldr	r2, [r7, #0]
 8013c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8013c32:	bf00      	nop
 8013c34:	3708      	adds	r7, #8
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	0801f0d4 	.word	0x0801f0d4
 8013c40:	0801f6c0 	.word	0x0801f6c0
 8013c44:	0801f118 	.word	0x0801f118

08013c48 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b085      	sub	sp, #20
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
 8013c50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d008      	beq.n	8013c6a <tcp_accept+0x22>
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	7d1b      	ldrb	r3, [r3, #20]
 8013c5c:	2b01      	cmp	r3, #1
 8013c5e:	d104      	bne.n	8013c6a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	683a      	ldr	r2, [r7, #0]
 8013c68:	619a      	str	r2, [r3, #24]
  }
}
 8013c6a:	bf00      	nop
 8013c6c:	3714      	adds	r7, #20
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c74:	4770      	bx	lr
	...

08013c78 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b084      	sub	sp, #16
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	60b9      	str	r1, [r7, #8]
 8013c82:	4613      	mov	r3, r2
 8013c84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d107      	bne.n	8013c9c <tcp_poll+0x24>
 8013c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8013cc8 <tcp_poll+0x50>)
 8013c8e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8013c92:	490e      	ldr	r1, [pc, #56]	@ (8013ccc <tcp_poll+0x54>)
 8013c94:	480e      	ldr	r0, [pc, #56]	@ (8013cd0 <tcp_poll+0x58>)
 8013c96:	f008 fcdb 	bl	801c650 <iprintf>
 8013c9a:	e011      	b.n	8013cc0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	7d1b      	ldrb	r3, [r3, #20]
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	d106      	bne.n	8013cb2 <tcp_poll+0x3a>
 8013ca4:	4b08      	ldr	r3, [pc, #32]	@ (8013cc8 <tcp_poll+0x50>)
 8013ca6:	f640 023e 	movw	r2, #2110	@ 0x83e
 8013caa:	490a      	ldr	r1, [pc, #40]	@ (8013cd4 <tcp_poll+0x5c>)
 8013cac:	4808      	ldr	r0, [pc, #32]	@ (8013cd0 <tcp_poll+0x58>)
 8013cae:	f008 fccf 	bl	801c650 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	68ba      	ldr	r2, [r7, #8]
 8013cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	79fa      	ldrb	r2, [r7, #7]
 8013cbe:	775a      	strb	r2, [r3, #29]
}
 8013cc0:	3710      	adds	r7, #16
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
 8013cc6:	bf00      	nop
 8013cc8:	0801f0d4 	.word	0x0801f0d4
 8013ccc:	0801f6e8 	.word	0x0801f6e8
 8013cd0:	0801f118 	.word	0x0801f118
 8013cd4:	0801f700 	.word	0x0801f700

08013cd8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d107      	bne.n	8013cf6 <tcp_pcb_purge+0x1e>
 8013ce6:	4b21      	ldr	r3, [pc, #132]	@ (8013d6c <tcp_pcb_purge+0x94>)
 8013ce8:	f640 0251 	movw	r2, #2129	@ 0x851
 8013cec:	4920      	ldr	r1, [pc, #128]	@ (8013d70 <tcp_pcb_purge+0x98>)
 8013cee:	4821      	ldr	r0, [pc, #132]	@ (8013d74 <tcp_pcb_purge+0x9c>)
 8013cf0:	f008 fcae 	bl	801c650 <iprintf>
 8013cf4:	e037      	b.n	8013d66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	7d1b      	ldrb	r3, [r3, #20]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d033      	beq.n	8013d66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013d02:	2b0a      	cmp	r3, #10
 8013d04:	d02f      	beq.n	8013d66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013d0a:	2b01      	cmp	r3, #1
 8013d0c:	d02b      	beq.n	8013d66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d007      	beq.n	8013d26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fe f83e 	bl	8011d9c <pbuf_free>
      pcb->refused_data = NULL;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2200      	movs	r2, #0
 8013d24:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d002      	beq.n	8013d34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f000 f98c 	bl	801404c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d3a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7ff fcf9 	bl	8013738 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7ff fcf4 	bl	8013738 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2200      	movs	r2, #0
 8013d54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2200      	movs	r2, #0
 8013d62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013d66:	3708      	adds	r7, #8
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	0801f0d4 	.word	0x0801f0d4
 8013d70:	0801f720 	.word	0x0801f720
 8013d74:	0801f118 	.word	0x0801f118

08013d78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d106      	bne.n	8013d96 <tcp_pcb_remove+0x1e>
 8013d88:	4b3e      	ldr	r3, [pc, #248]	@ (8013e84 <tcp_pcb_remove+0x10c>)
 8013d8a:	f640 0283 	movw	r2, #2179	@ 0x883
 8013d8e:	493e      	ldr	r1, [pc, #248]	@ (8013e88 <tcp_pcb_remove+0x110>)
 8013d90:	483e      	ldr	r0, [pc, #248]	@ (8013e8c <tcp_pcb_remove+0x114>)
 8013d92:	f008 fc5d 	bl	801c650 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d106      	bne.n	8013daa <tcp_pcb_remove+0x32>
 8013d9c:	4b39      	ldr	r3, [pc, #228]	@ (8013e84 <tcp_pcb_remove+0x10c>)
 8013d9e:	f640 0284 	movw	r2, #2180	@ 0x884
 8013da2:	493b      	ldr	r1, [pc, #236]	@ (8013e90 <tcp_pcb_remove+0x118>)
 8013da4:	4839      	ldr	r0, [pc, #228]	@ (8013e8c <tcp_pcb_remove+0x114>)
 8013da6:	f008 fc53 	bl	801c650 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	683a      	ldr	r2, [r7, #0]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d105      	bne.n	8013dc0 <tcp_pcb_remove+0x48>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	68da      	ldr	r2, [r3, #12]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	601a      	str	r2, [r3, #0]
 8013dbe:	e013      	b.n	8013de8 <tcp_pcb_remove+0x70>
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	60fb      	str	r3, [r7, #12]
 8013dc6:	e00c      	b.n	8013de2 <tcp_pcb_remove+0x6a>
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	683a      	ldr	r2, [r7, #0]
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d104      	bne.n	8013ddc <tcp_pcb_remove+0x64>
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	68da      	ldr	r2, [r3, #12]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	60da      	str	r2, [r3, #12]
 8013dda:	e005      	b.n	8013de8 <tcp_pcb_remove+0x70>
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	68db      	ldr	r3, [r3, #12]
 8013de0:	60fb      	str	r3, [r7, #12]
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d1ef      	bne.n	8013dc8 <tcp_pcb_remove+0x50>
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	2200      	movs	r2, #0
 8013dec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013dee:	6838      	ldr	r0, [r7, #0]
 8013df0:	f7ff ff72 	bl	8013cd8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	7d1b      	ldrb	r3, [r3, #20]
 8013df8:	2b0a      	cmp	r3, #10
 8013dfa:	d013      	beq.n	8013e24 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	d00f      	beq.n	8013e24 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	8b5b      	ldrh	r3, [r3, #26]
 8013e08:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d009      	beq.n	8013e24 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	8b5b      	ldrh	r3, [r3, #26]
 8013e14:	f043 0302 	orr.w	r3, r3, #2
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013e1e:	6838      	ldr	r0, [r7, #0]
 8013e20:	f003 fc28 	bl	8017674 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	7d1b      	ldrb	r3, [r3, #20]
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d020      	beq.n	8013e6e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d006      	beq.n	8013e42 <tcp_pcb_remove+0xca>
 8013e34:	4b13      	ldr	r3, [pc, #76]	@ (8013e84 <tcp_pcb_remove+0x10c>)
 8013e36:	f640 0293 	movw	r2, #2195	@ 0x893
 8013e3a:	4916      	ldr	r1, [pc, #88]	@ (8013e94 <tcp_pcb_remove+0x11c>)
 8013e3c:	4813      	ldr	r0, [pc, #76]	@ (8013e8c <tcp_pcb_remove+0x114>)
 8013e3e:	f008 fc07 	bl	801c650 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d006      	beq.n	8013e58 <tcp_pcb_remove+0xe0>
 8013e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8013e84 <tcp_pcb_remove+0x10c>)
 8013e4c:	f640 0294 	movw	r2, #2196	@ 0x894
 8013e50:	4911      	ldr	r1, [pc, #68]	@ (8013e98 <tcp_pcb_remove+0x120>)
 8013e52:	480e      	ldr	r0, [pc, #56]	@ (8013e8c <tcp_pcb_remove+0x114>)
 8013e54:	f008 fbfc 	bl	801c650 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d006      	beq.n	8013e6e <tcp_pcb_remove+0xf6>
 8013e60:	4b08      	ldr	r3, [pc, #32]	@ (8013e84 <tcp_pcb_remove+0x10c>)
 8013e62:	f640 0296 	movw	r2, #2198	@ 0x896
 8013e66:	490d      	ldr	r1, [pc, #52]	@ (8013e9c <tcp_pcb_remove+0x124>)
 8013e68:	4808      	ldr	r0, [pc, #32]	@ (8013e8c <tcp_pcb_remove+0x114>)
 8013e6a:	f008 fbf1 	bl	801c650 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	2200      	movs	r2, #0
 8013e72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	2200      	movs	r2, #0
 8013e78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013e7a:	bf00      	nop
 8013e7c:	3710      	adds	r7, #16
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}
 8013e82:	bf00      	nop
 8013e84:	0801f0d4 	.word	0x0801f0d4
 8013e88:	0801f73c 	.word	0x0801f73c
 8013e8c:	0801f118 	.word	0x0801f118
 8013e90:	0801f758 	.word	0x0801f758
 8013e94:	0801f778 	.word	0x0801f778
 8013e98:	0801f790 	.word	0x0801f790
 8013e9c:	0801f7ac 	.word	0x0801f7ac

08013ea0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d106      	bne.n	8013ebc <tcp_next_iss+0x1c>
 8013eae:	4b0a      	ldr	r3, [pc, #40]	@ (8013ed8 <tcp_next_iss+0x38>)
 8013eb0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8013eb4:	4909      	ldr	r1, [pc, #36]	@ (8013edc <tcp_next_iss+0x3c>)
 8013eb6:	480a      	ldr	r0, [pc, #40]	@ (8013ee0 <tcp_next_iss+0x40>)
 8013eb8:	f008 fbca 	bl	801c650 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013ebc:	4b09      	ldr	r3, [pc, #36]	@ (8013ee4 <tcp_next_iss+0x44>)
 8013ebe:	681a      	ldr	r2, [r3, #0]
 8013ec0:	4b09      	ldr	r3, [pc, #36]	@ (8013ee8 <tcp_next_iss+0x48>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	4a07      	ldr	r2, [pc, #28]	@ (8013ee4 <tcp_next_iss+0x44>)
 8013ec8:	6013      	str	r3, [r2, #0]
  return iss;
 8013eca:	4b06      	ldr	r3, [pc, #24]	@ (8013ee4 <tcp_next_iss+0x44>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	0801f0d4 	.word	0x0801f0d4
 8013edc:	0801f7c4 	.word	0x0801f7c4
 8013ee0:	0801f118 	.word	0x0801f118
 8013ee4:	2000006c 	.word	0x2000006c
 8013ee8:	2002279c 	.word	0x2002279c

08013eec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	60b9      	str	r1, [r7, #8]
 8013ef6:	607a      	str	r2, [r7, #4]
 8013ef8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d106      	bne.n	8013f0e <tcp_eff_send_mss_netif+0x22>
 8013f00:	4b14      	ldr	r3, [pc, #80]	@ (8013f54 <tcp_eff_send_mss_netif+0x68>)
 8013f02:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8013f06:	4914      	ldr	r1, [pc, #80]	@ (8013f58 <tcp_eff_send_mss_netif+0x6c>)
 8013f08:	4814      	ldr	r0, [pc, #80]	@ (8013f5c <tcp_eff_send_mss_netif+0x70>)
 8013f0a:	f008 fba1 	bl	801c650 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d101      	bne.n	8013f18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013f14:	89fb      	ldrh	r3, [r7, #14]
 8013f16:	e019      	b.n	8013f4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013f1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013f1e:	8afb      	ldrh	r3, [r7, #22]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d012      	beq.n	8013f4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013f24:	2328      	movs	r3, #40	@ 0x28
 8013f26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013f28:	8afa      	ldrh	r2, [r7, #22]
 8013f2a:	8abb      	ldrh	r3, [r7, #20]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d904      	bls.n	8013f3a <tcp_eff_send_mss_netif+0x4e>
 8013f30:	8afa      	ldrh	r2, [r7, #22]
 8013f32:	8abb      	ldrh	r3, [r7, #20]
 8013f34:	1ad3      	subs	r3, r2, r3
 8013f36:	b29b      	uxth	r3, r3
 8013f38:	e000      	b.n	8013f3c <tcp_eff_send_mss_netif+0x50>
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013f3e:	8a7a      	ldrh	r2, [r7, #18]
 8013f40:	89fb      	ldrh	r3, [r7, #14]
 8013f42:	4293      	cmp	r3, r2
 8013f44:	bf28      	it	cs
 8013f46:	4613      	movcs	r3, r2
 8013f48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013f4a:	89fb      	ldrh	r3, [r7, #14]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3718      	adds	r7, #24
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	0801f0d4 	.word	0x0801f0d4
 8013f58:	0801f7e0 	.word	0x0801f7e0
 8013f5c:	0801f118 	.word	0x0801f118

08013f60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b084      	sub	sp, #16
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d11d      	bne.n	8013fb0 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8013f74:	4b12      	ldr	r3, [pc, #72]	@ (8013fc0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013f76:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8013f7a:	4912      	ldr	r1, [pc, #72]	@ (8013fc4 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8013f7c:	4812      	ldr	r0, [pc, #72]	@ (8013fc8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8013f7e:	f008 fb67 	bl	801c650 <iprintf>

  while (pcb != NULL) {
 8013f82:	e015      	b.n	8013fb0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	681a      	ldr	r2, [r3, #0]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d10c      	bne.n	8013faa <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	68db      	ldr	r3, [r3, #12]
 8013f94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8013f96:	68f9      	ldr	r1, [r7, #12]
 8013f98:	480c      	ldr	r0, [pc, #48]	@ (8013fcc <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 8013f9a:	f008 fb59 	bl	801c650 <iprintf>
      tcp_abort(pcb);
 8013f9e:	68f8      	ldr	r0, [r7, #12]
 8013fa0:	f7fe fcfc 	bl	801299c <tcp_abort>
      pcb = next;
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	60fb      	str	r3, [r7, #12]
 8013fa8:	e002      	b.n	8013fb0 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d1e6      	bne.n	8013f84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013fb6:	bf00      	nop
 8013fb8:	bf00      	nop
 8013fba:	3710      	adds	r7, #16
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}
 8013fc0:	0801f0d4 	.word	0x0801f0d4
 8013fc4:	0801f808 	.word	0x0801f808
 8013fc8:	0801f118 	.word	0x0801f118
 8013fcc:	0801f83c 	.word	0x0801f83c

08013fd0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d02a      	beq.n	8014036 <tcp_netif_ip_addr_changed+0x66>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d026      	beq.n	8014036 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013fe8:	4b15      	ldr	r3, [pc, #84]	@ (8014040 <tcp_netif_ip_addr_changed+0x70>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4619      	mov	r1, r3
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f7ff ffb6 	bl	8013f60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013ff4:	4b13      	ldr	r3, [pc, #76]	@ (8014044 <tcp_netif_ip_addr_changed+0x74>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	6878      	ldr	r0, [r7, #4]
 8013ffc:	f7ff ffb0 	bl	8013f60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d017      	beq.n	8014036 <tcp_netif_ip_addr_changed+0x66>
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d013      	beq.n	8014036 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801400e:	4b0e      	ldr	r3, [pc, #56]	@ (8014048 <tcp_netif_ip_addr_changed+0x78>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	60fb      	str	r3, [r7, #12]
 8014014:	e00c      	b.n	8014030 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	429a      	cmp	r2, r3
 8014020:	d103      	bne.n	801402a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	681a      	ldr	r2, [r3, #0]
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	60fb      	str	r3, [r7, #12]
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d1ef      	bne.n	8014016 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014036:	bf00      	nop
 8014038:	3710      	adds	r7, #16
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	bf00      	nop
 8014040:	200227a8 	.word	0x200227a8
 8014044:	200227a0 	.word	0x200227a0
 8014048:	200227a4 	.word	0x200227a4

0801404c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b082      	sub	sp, #8
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014058:	2b00      	cmp	r3, #0
 801405a:	d007      	beq.n	801406c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014060:	4618      	mov	r0, r3
 8014062:	f7ff fb69 	bl	8013738 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2200      	movs	r2, #0
 801406a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801406c:	bf00      	nop
 801406e:	3708      	adds	r7, #8
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014074:	b590      	push	{r4, r7, lr}
 8014076:	b08d      	sub	sp, #52	@ 0x34
 8014078:	af04      	add	r7, sp, #16
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d105      	bne.n	8014090 <tcp_input+0x1c>
 8014084:	4b9b      	ldr	r3, [pc, #620]	@ (80142f4 <tcp_input+0x280>)
 8014086:	2283      	movs	r2, #131	@ 0x83
 8014088:	499b      	ldr	r1, [pc, #620]	@ (80142f8 <tcp_input+0x284>)
 801408a:	489c      	ldr	r0, [pc, #624]	@ (80142fc <tcp_input+0x288>)
 801408c:	f008 fae0 	bl	801c650 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	4a9a      	ldr	r2, [pc, #616]	@ (8014300 <tcp_input+0x28c>)
 8014096:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	895b      	ldrh	r3, [r3, #10]
 801409c:	2b13      	cmp	r3, #19
 801409e:	f240 83d1 	bls.w	8014844 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80140a2:	4b98      	ldr	r3, [pc, #608]	@ (8014304 <tcp_input+0x290>)
 80140a4:	695b      	ldr	r3, [r3, #20]
 80140a6:	4a97      	ldr	r2, [pc, #604]	@ (8014304 <tcp_input+0x290>)
 80140a8:	6812      	ldr	r2, [r2, #0]
 80140aa:	4611      	mov	r1, r2
 80140ac:	4618      	mov	r0, r3
 80140ae:	f006 ff83 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f040 83c7 	bne.w	8014848 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80140ba:	4b92      	ldr	r3, [pc, #584]	@ (8014304 <tcp_input+0x290>)
 80140bc:	695b      	ldr	r3, [r3, #20]
 80140be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80140c2:	2be0      	cmp	r3, #224	@ 0xe0
 80140c4:	f000 83c0 	beq.w	8014848 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80140c8:	4b8d      	ldr	r3, [pc, #564]	@ (8014300 <tcp_input+0x28c>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	899b      	ldrh	r3, [r3, #12]
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7fc f97f 	bl	80103d4 <lwip_htons>
 80140d6:	4603      	mov	r3, r0
 80140d8:	0b1b      	lsrs	r3, r3, #12
 80140da:	b29b      	uxth	r3, r3
 80140dc:	b2db      	uxtb	r3, r3
 80140de:	009b      	lsls	r3, r3, #2
 80140e0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80140e2:	7cbb      	ldrb	r3, [r7, #18]
 80140e4:	2b13      	cmp	r3, #19
 80140e6:	f240 83b1 	bls.w	801484c <tcp_input+0x7d8>
 80140ea:	7cbb      	ldrb	r3, [r7, #18]
 80140ec:	b29a      	uxth	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	891b      	ldrh	r3, [r3, #8]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	f200 83aa 	bhi.w	801484c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80140f8:	7cbb      	ldrb	r3, [r7, #18]
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	3b14      	subs	r3, #20
 80140fe:	b29a      	uxth	r2, r3
 8014100:	4b81      	ldr	r3, [pc, #516]	@ (8014308 <tcp_input+0x294>)
 8014102:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014104:	4b81      	ldr	r3, [pc, #516]	@ (801430c <tcp_input+0x298>)
 8014106:	2200      	movs	r2, #0
 8014108:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	895a      	ldrh	r2, [r3, #10]
 801410e:	7cbb      	ldrb	r3, [r7, #18]
 8014110:	b29b      	uxth	r3, r3
 8014112:	429a      	cmp	r2, r3
 8014114:	d309      	bcc.n	801412a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014116:	4b7c      	ldr	r3, [pc, #496]	@ (8014308 <tcp_input+0x294>)
 8014118:	881a      	ldrh	r2, [r3, #0]
 801411a:	4b7d      	ldr	r3, [pc, #500]	@ (8014310 <tcp_input+0x29c>)
 801411c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801411e:	7cbb      	ldrb	r3, [r7, #18]
 8014120:	4619      	mov	r1, r3
 8014122:	6878      	ldr	r0, [r7, #4]
 8014124:	f7fd fdb4 	bl	8011c90 <pbuf_remove_header>
 8014128:	e04e      	b.n	80141c8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d105      	bne.n	801413e <tcp_input+0xca>
 8014132:	4b70      	ldr	r3, [pc, #448]	@ (80142f4 <tcp_input+0x280>)
 8014134:	22c2      	movs	r2, #194	@ 0xc2
 8014136:	4977      	ldr	r1, [pc, #476]	@ (8014314 <tcp_input+0x2a0>)
 8014138:	4870      	ldr	r0, [pc, #448]	@ (80142fc <tcp_input+0x288>)
 801413a:	f008 fa89 	bl	801c650 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801413e:	2114      	movs	r1, #20
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f7fd fda5 	bl	8011c90 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	895a      	ldrh	r2, [r3, #10]
 801414a:	4b71      	ldr	r3, [pc, #452]	@ (8014310 <tcp_input+0x29c>)
 801414c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801414e:	4b6e      	ldr	r3, [pc, #440]	@ (8014308 <tcp_input+0x294>)
 8014150:	881a      	ldrh	r2, [r3, #0]
 8014152:	4b6f      	ldr	r3, [pc, #444]	@ (8014310 <tcp_input+0x29c>)
 8014154:	881b      	ldrh	r3, [r3, #0]
 8014156:	1ad3      	subs	r3, r2, r3
 8014158:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801415a:	4b6d      	ldr	r3, [pc, #436]	@ (8014310 <tcp_input+0x29c>)
 801415c:	881b      	ldrh	r3, [r3, #0]
 801415e:	4619      	mov	r1, r3
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f7fd fd95 	bl	8011c90 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	895b      	ldrh	r3, [r3, #10]
 801416c:	8a3a      	ldrh	r2, [r7, #16]
 801416e:	429a      	cmp	r2, r3
 8014170:	f200 836e 	bhi.w	8014850 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	685b      	ldr	r3, [r3, #4]
 801417a:	4a64      	ldr	r2, [pc, #400]	@ (801430c <tcp_input+0x298>)
 801417c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	8a3a      	ldrh	r2, [r7, #16]
 8014184:	4611      	mov	r1, r2
 8014186:	4618      	mov	r0, r3
 8014188:	f7fd fd82 	bl	8011c90 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	891a      	ldrh	r2, [r3, #8]
 8014190:	8a3b      	ldrh	r3, [r7, #16]
 8014192:	1ad3      	subs	r3, r2, r3
 8014194:	b29a      	uxth	r2, r3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	895b      	ldrh	r3, [r3, #10]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d005      	beq.n	80141ae <tcp_input+0x13a>
 80141a2:	4b54      	ldr	r3, [pc, #336]	@ (80142f4 <tcp_input+0x280>)
 80141a4:	22df      	movs	r2, #223	@ 0xdf
 80141a6:	495c      	ldr	r1, [pc, #368]	@ (8014318 <tcp_input+0x2a4>)
 80141a8:	4854      	ldr	r0, [pc, #336]	@ (80142fc <tcp_input+0x288>)
 80141aa:	f008 fa51 	bl	801c650 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	891a      	ldrh	r2, [r3, #8]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	891b      	ldrh	r3, [r3, #8]
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d005      	beq.n	80141c8 <tcp_input+0x154>
 80141bc:	4b4d      	ldr	r3, [pc, #308]	@ (80142f4 <tcp_input+0x280>)
 80141be:	22e0      	movs	r2, #224	@ 0xe0
 80141c0:	4956      	ldr	r1, [pc, #344]	@ (801431c <tcp_input+0x2a8>)
 80141c2:	484e      	ldr	r0, [pc, #312]	@ (80142fc <tcp_input+0x288>)
 80141c4:	f008 fa44 	bl	801c650 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80141c8:	4b4d      	ldr	r3, [pc, #308]	@ (8014300 <tcp_input+0x28c>)
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	881b      	ldrh	r3, [r3, #0]
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	4a4b      	ldr	r2, [pc, #300]	@ (8014300 <tcp_input+0x28c>)
 80141d2:	6814      	ldr	r4, [r2, #0]
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7fc f8fd 	bl	80103d4 <lwip_htons>
 80141da:	4603      	mov	r3, r0
 80141dc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80141de:	4b48      	ldr	r3, [pc, #288]	@ (8014300 <tcp_input+0x28c>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	885b      	ldrh	r3, [r3, #2]
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	4a46      	ldr	r2, [pc, #280]	@ (8014300 <tcp_input+0x28c>)
 80141e8:	6814      	ldr	r4, [r2, #0]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7fc f8f2 	bl	80103d4 <lwip_htons>
 80141f0:	4603      	mov	r3, r0
 80141f2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80141f4:	4b42      	ldr	r3, [pc, #264]	@ (8014300 <tcp_input+0x28c>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	4a41      	ldr	r2, [pc, #260]	@ (8014300 <tcp_input+0x28c>)
 80141fc:	6814      	ldr	r4, [r2, #0]
 80141fe:	4618      	mov	r0, r3
 8014200:	f7fc f8fe 	bl	8010400 <lwip_htonl>
 8014204:	4603      	mov	r3, r0
 8014206:	6063      	str	r3, [r4, #4]
 8014208:	6863      	ldr	r3, [r4, #4]
 801420a:	4a45      	ldr	r2, [pc, #276]	@ (8014320 <tcp_input+0x2ac>)
 801420c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801420e:	4b3c      	ldr	r3, [pc, #240]	@ (8014300 <tcp_input+0x28c>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	689b      	ldr	r3, [r3, #8]
 8014214:	4a3a      	ldr	r2, [pc, #232]	@ (8014300 <tcp_input+0x28c>)
 8014216:	6814      	ldr	r4, [r2, #0]
 8014218:	4618      	mov	r0, r3
 801421a:	f7fc f8f1 	bl	8010400 <lwip_htonl>
 801421e:	4603      	mov	r3, r0
 8014220:	60a3      	str	r3, [r4, #8]
 8014222:	68a3      	ldr	r3, [r4, #8]
 8014224:	4a3f      	ldr	r2, [pc, #252]	@ (8014324 <tcp_input+0x2b0>)
 8014226:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014228:	4b35      	ldr	r3, [pc, #212]	@ (8014300 <tcp_input+0x28c>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	89db      	ldrh	r3, [r3, #14]
 801422e:	b29b      	uxth	r3, r3
 8014230:	4a33      	ldr	r2, [pc, #204]	@ (8014300 <tcp_input+0x28c>)
 8014232:	6814      	ldr	r4, [r2, #0]
 8014234:	4618      	mov	r0, r3
 8014236:	f7fc f8cd 	bl	80103d4 <lwip_htons>
 801423a:	4603      	mov	r3, r0
 801423c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801423e:	4b30      	ldr	r3, [pc, #192]	@ (8014300 <tcp_input+0x28c>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	899b      	ldrh	r3, [r3, #12]
 8014244:	b29b      	uxth	r3, r3
 8014246:	4618      	mov	r0, r3
 8014248:	f7fc f8c4 	bl	80103d4 <lwip_htons>
 801424c:	4603      	mov	r3, r0
 801424e:	b2db      	uxtb	r3, r3
 8014250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014254:	b2da      	uxtb	r2, r3
 8014256:	4b34      	ldr	r3, [pc, #208]	@ (8014328 <tcp_input+0x2b4>)
 8014258:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	891a      	ldrh	r2, [r3, #8]
 801425e:	4b33      	ldr	r3, [pc, #204]	@ (801432c <tcp_input+0x2b8>)
 8014260:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014262:	4b31      	ldr	r3, [pc, #196]	@ (8014328 <tcp_input+0x2b4>)
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	f003 0303 	and.w	r3, r3, #3
 801426a:	2b00      	cmp	r3, #0
 801426c:	d00c      	beq.n	8014288 <tcp_input+0x214>
    tcplen++;
 801426e:	4b2f      	ldr	r3, [pc, #188]	@ (801432c <tcp_input+0x2b8>)
 8014270:	881b      	ldrh	r3, [r3, #0]
 8014272:	3301      	adds	r3, #1
 8014274:	b29a      	uxth	r2, r3
 8014276:	4b2d      	ldr	r3, [pc, #180]	@ (801432c <tcp_input+0x2b8>)
 8014278:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	891a      	ldrh	r2, [r3, #8]
 801427e:	4b2b      	ldr	r3, [pc, #172]	@ (801432c <tcp_input+0x2b8>)
 8014280:	881b      	ldrh	r3, [r3, #0]
 8014282:	429a      	cmp	r2, r3
 8014284:	f200 82e6 	bhi.w	8014854 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014288:	2300      	movs	r3, #0
 801428a:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801428c:	4b28      	ldr	r3, [pc, #160]	@ (8014330 <tcp_input+0x2bc>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	61bb      	str	r3, [r7, #24]
 8014292:	e09d      	b.n	80143d0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	7d1b      	ldrb	r3, [r3, #20]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d105      	bne.n	80142a8 <tcp_input+0x234>
 801429c:	4b15      	ldr	r3, [pc, #84]	@ (80142f4 <tcp_input+0x280>)
 801429e:	22fb      	movs	r2, #251	@ 0xfb
 80142a0:	4924      	ldr	r1, [pc, #144]	@ (8014334 <tcp_input+0x2c0>)
 80142a2:	4816      	ldr	r0, [pc, #88]	@ (80142fc <tcp_input+0x288>)
 80142a4:	f008 f9d4 	bl	801c650 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	7d1b      	ldrb	r3, [r3, #20]
 80142ac:	2b0a      	cmp	r3, #10
 80142ae:	d105      	bne.n	80142bc <tcp_input+0x248>
 80142b0:	4b10      	ldr	r3, [pc, #64]	@ (80142f4 <tcp_input+0x280>)
 80142b2:	22fc      	movs	r2, #252	@ 0xfc
 80142b4:	4920      	ldr	r1, [pc, #128]	@ (8014338 <tcp_input+0x2c4>)
 80142b6:	4811      	ldr	r0, [pc, #68]	@ (80142fc <tcp_input+0x288>)
 80142b8:	f008 f9ca 	bl	801c650 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	7d1b      	ldrb	r3, [r3, #20]
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d105      	bne.n	80142d0 <tcp_input+0x25c>
 80142c4:	4b0b      	ldr	r3, [pc, #44]	@ (80142f4 <tcp_input+0x280>)
 80142c6:	22fd      	movs	r2, #253	@ 0xfd
 80142c8:	491c      	ldr	r1, [pc, #112]	@ (801433c <tcp_input+0x2c8>)
 80142ca:	480c      	ldr	r0, [pc, #48]	@ (80142fc <tcp_input+0x288>)
 80142cc:	f008 f9c0 	bl	801c650 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80142d0:	69bb      	ldr	r3, [r7, #24]
 80142d2:	7a1b      	ldrb	r3, [r3, #8]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d033      	beq.n	8014340 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80142d8:	69bb      	ldr	r3, [r7, #24]
 80142da:	7a1a      	ldrb	r2, [r3, #8]
 80142dc:	4b09      	ldr	r3, [pc, #36]	@ (8014304 <tcp_input+0x290>)
 80142de:	685b      	ldr	r3, [r3, #4]
 80142e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80142e4:	3301      	adds	r3, #1
 80142e6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d029      	beq.n	8014340 <tcp_input+0x2cc>
      prev = pcb;
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	61fb      	str	r3, [r7, #28]
      continue;
 80142f0:	e06b      	b.n	80143ca <tcp_input+0x356>
 80142f2:	bf00      	nop
 80142f4:	0801f864 	.word	0x0801f864
 80142f8:	0801f898 	.word	0x0801f898
 80142fc:	0801f8b0 	.word	0x0801f8b0
 8014300:	200227c8 	.word	0x200227c8
 8014304:	2001f65c 	.word	0x2001f65c
 8014308:	200227cc 	.word	0x200227cc
 801430c:	200227d0 	.word	0x200227d0
 8014310:	200227ce 	.word	0x200227ce
 8014314:	0801f8d8 	.word	0x0801f8d8
 8014318:	0801f8e8 	.word	0x0801f8e8
 801431c:	0801f8f4 	.word	0x0801f8f4
 8014320:	200227d8 	.word	0x200227d8
 8014324:	200227dc 	.word	0x200227dc
 8014328:	200227e4 	.word	0x200227e4
 801432c:	200227e2 	.word	0x200227e2
 8014330:	200227a8 	.word	0x200227a8
 8014334:	0801f914 	.word	0x0801f914
 8014338:	0801f93c 	.word	0x0801f93c
 801433c:	0801f968 	.word	0x0801f968
    }

    if (pcb->remote_port == tcphdr->src &&
 8014340:	69bb      	ldr	r3, [r7, #24]
 8014342:	8b1a      	ldrh	r2, [r3, #24]
 8014344:	4b72      	ldr	r3, [pc, #456]	@ (8014510 <tcp_input+0x49c>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	881b      	ldrh	r3, [r3, #0]
 801434a:	b29b      	uxth	r3, r3
 801434c:	429a      	cmp	r2, r3
 801434e:	d13a      	bne.n	80143c6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014350:	69bb      	ldr	r3, [r7, #24]
 8014352:	8ada      	ldrh	r2, [r3, #22]
 8014354:	4b6e      	ldr	r3, [pc, #440]	@ (8014510 <tcp_input+0x49c>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	885b      	ldrh	r3, [r3, #2]
 801435a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801435c:	429a      	cmp	r2, r3
 801435e:	d132      	bne.n	80143c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	685a      	ldr	r2, [r3, #4]
 8014364:	4b6b      	ldr	r3, [pc, #428]	@ (8014514 <tcp_input+0x4a0>)
 8014366:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014368:	429a      	cmp	r2, r3
 801436a:	d12c      	bne.n	80143c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	681a      	ldr	r2, [r3, #0]
 8014370:	4b68      	ldr	r3, [pc, #416]	@ (8014514 <tcp_input+0x4a0>)
 8014372:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014374:	429a      	cmp	r2, r3
 8014376:	d126      	bne.n	80143c6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014378:	69bb      	ldr	r3, [r7, #24]
 801437a:	68db      	ldr	r3, [r3, #12]
 801437c:	69ba      	ldr	r2, [r7, #24]
 801437e:	429a      	cmp	r2, r3
 8014380:	d106      	bne.n	8014390 <tcp_input+0x31c>
 8014382:	4b65      	ldr	r3, [pc, #404]	@ (8014518 <tcp_input+0x4a4>)
 8014384:	f240 120d 	movw	r2, #269	@ 0x10d
 8014388:	4964      	ldr	r1, [pc, #400]	@ (801451c <tcp_input+0x4a8>)
 801438a:	4865      	ldr	r0, [pc, #404]	@ (8014520 <tcp_input+0x4ac>)
 801438c:	f008 f960 	bl	801c650 <iprintf>
      if (prev != NULL) {
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d00a      	beq.n	80143ac <tcp_input+0x338>
        prev->next = pcb->next;
 8014396:	69bb      	ldr	r3, [r7, #24]
 8014398:	68da      	ldr	r2, [r3, #12]
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801439e:	4b61      	ldr	r3, [pc, #388]	@ (8014524 <tcp_input+0x4b0>)
 80143a0:	681a      	ldr	r2, [r3, #0]
 80143a2:	69bb      	ldr	r3, [r7, #24]
 80143a4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80143a6:	4a5f      	ldr	r2, [pc, #380]	@ (8014524 <tcp_input+0x4b0>)
 80143a8:	69bb      	ldr	r3, [r7, #24]
 80143aa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80143ac:	69bb      	ldr	r3, [r7, #24]
 80143ae:	68db      	ldr	r3, [r3, #12]
 80143b0:	69ba      	ldr	r2, [r7, #24]
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d111      	bne.n	80143da <tcp_input+0x366>
 80143b6:	4b58      	ldr	r3, [pc, #352]	@ (8014518 <tcp_input+0x4a4>)
 80143b8:	f240 1215 	movw	r2, #277	@ 0x115
 80143bc:	495a      	ldr	r1, [pc, #360]	@ (8014528 <tcp_input+0x4b4>)
 80143be:	4858      	ldr	r0, [pc, #352]	@ (8014520 <tcp_input+0x4ac>)
 80143c0:	f008 f946 	bl	801c650 <iprintf>
      break;
 80143c4:	e009      	b.n	80143da <tcp_input+0x366>
    }
    prev = pcb;
 80143c6:	69bb      	ldr	r3, [r7, #24]
 80143c8:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80143ca:	69bb      	ldr	r3, [r7, #24]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	61bb      	str	r3, [r7, #24]
 80143d0:	69bb      	ldr	r3, [r7, #24]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	f47f af5e 	bne.w	8014294 <tcp_input+0x220>
 80143d8:	e000      	b.n	80143dc <tcp_input+0x368>
      break;
 80143da:	bf00      	nop
  }

  if (pcb == NULL) {
 80143dc:	69bb      	ldr	r3, [r7, #24]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	f040 80aa 	bne.w	8014538 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80143e4:	4b51      	ldr	r3, [pc, #324]	@ (801452c <tcp_input+0x4b8>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	61bb      	str	r3, [r7, #24]
 80143ea:	e03f      	b.n	801446c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80143ec:	69bb      	ldr	r3, [r7, #24]
 80143ee:	7d1b      	ldrb	r3, [r3, #20]
 80143f0:	2b0a      	cmp	r3, #10
 80143f2:	d006      	beq.n	8014402 <tcp_input+0x38e>
 80143f4:	4b48      	ldr	r3, [pc, #288]	@ (8014518 <tcp_input+0x4a4>)
 80143f6:	f240 121f 	movw	r2, #287	@ 0x11f
 80143fa:	494d      	ldr	r1, [pc, #308]	@ (8014530 <tcp_input+0x4bc>)
 80143fc:	4848      	ldr	r0, [pc, #288]	@ (8014520 <tcp_input+0x4ac>)
 80143fe:	f008 f927 	bl	801c650 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014402:	69bb      	ldr	r3, [r7, #24]
 8014404:	7a1b      	ldrb	r3, [r3, #8]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d009      	beq.n	801441e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801440a:	69bb      	ldr	r3, [r7, #24]
 801440c:	7a1a      	ldrb	r2, [r3, #8]
 801440e:	4b41      	ldr	r3, [pc, #260]	@ (8014514 <tcp_input+0x4a0>)
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014416:	3301      	adds	r3, #1
 8014418:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801441a:	429a      	cmp	r2, r3
 801441c:	d122      	bne.n	8014464 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	8b1a      	ldrh	r2, [r3, #24]
 8014422:	4b3b      	ldr	r3, [pc, #236]	@ (8014510 <tcp_input+0x49c>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	881b      	ldrh	r3, [r3, #0]
 8014428:	b29b      	uxth	r3, r3
 801442a:	429a      	cmp	r2, r3
 801442c:	d11b      	bne.n	8014466 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801442e:	69bb      	ldr	r3, [r7, #24]
 8014430:	8ada      	ldrh	r2, [r3, #22]
 8014432:	4b37      	ldr	r3, [pc, #220]	@ (8014510 <tcp_input+0x49c>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	885b      	ldrh	r3, [r3, #2]
 8014438:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801443a:	429a      	cmp	r2, r3
 801443c:	d113      	bne.n	8014466 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801443e:	69bb      	ldr	r3, [r7, #24]
 8014440:	685a      	ldr	r2, [r3, #4]
 8014442:	4b34      	ldr	r3, [pc, #208]	@ (8014514 <tcp_input+0x4a0>)
 8014444:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014446:	429a      	cmp	r2, r3
 8014448:	d10d      	bne.n	8014466 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	4b31      	ldr	r3, [pc, #196]	@ (8014514 <tcp_input+0x4a0>)
 8014450:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014452:	429a      	cmp	r2, r3
 8014454:	d107      	bne.n	8014466 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014456:	69b8      	ldr	r0, [r7, #24]
 8014458:	f000 fb56 	bl	8014b08 <tcp_timewait_input>
        }
        pbuf_free(p);
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7fd fc9d 	bl	8011d9c <pbuf_free>
        return;
 8014462:	e1fd      	b.n	8014860 <tcp_input+0x7ec>
        continue;
 8014464:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	68db      	ldr	r3, [r3, #12]
 801446a:	61bb      	str	r3, [r7, #24]
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d1bc      	bne.n	80143ec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014472:	2300      	movs	r3, #0
 8014474:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014476:	4b2f      	ldr	r3, [pc, #188]	@ (8014534 <tcp_input+0x4c0>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	617b      	str	r3, [r7, #20]
 801447c:	e02a      	b.n	80144d4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	7a1b      	ldrb	r3, [r3, #8]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d00c      	beq.n	80144a0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	7a1a      	ldrb	r2, [r3, #8]
 801448a:	4b22      	ldr	r3, [pc, #136]	@ (8014514 <tcp_input+0x4a0>)
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014492:	3301      	adds	r3, #1
 8014494:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014496:	429a      	cmp	r2, r3
 8014498:	d002      	beq.n	80144a0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	61fb      	str	r3, [r7, #28]
        continue;
 801449e:	e016      	b.n	80144ce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	8ada      	ldrh	r2, [r3, #22]
 80144a4:	4b1a      	ldr	r3, [pc, #104]	@ (8014510 <tcp_input+0x49c>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	885b      	ldrh	r3, [r3, #2]
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d10c      	bne.n	80144ca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	681a      	ldr	r2, [r3, #0]
 80144b4:	4b17      	ldr	r3, [pc, #92]	@ (8014514 <tcp_input+0x4a0>)
 80144b6:	695b      	ldr	r3, [r3, #20]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d00f      	beq.n	80144dc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80144bc:	697b      	ldr	r3, [r7, #20]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d00d      	beq.n	80144de <tcp_input+0x46a>
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d009      	beq.n	80144de <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	68db      	ldr	r3, [r3, #12]
 80144d2:	617b      	str	r3, [r7, #20]
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1d1      	bne.n	801447e <tcp_input+0x40a>
 80144da:	e000      	b.n	80144de <tcp_input+0x46a>
            break;
 80144dc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d029      	beq.n	8014538 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80144e4:	69fb      	ldr	r3, [r7, #28]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d00a      	beq.n	8014500 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	68da      	ldr	r2, [r3, #12]
 80144ee:	69fb      	ldr	r3, [r7, #28]
 80144f0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80144f2:	4b10      	ldr	r3, [pc, #64]	@ (8014534 <tcp_input+0x4c0>)
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80144fa:	4a0e      	ldr	r2, [pc, #56]	@ (8014534 <tcp_input+0x4c0>)
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014500:	6978      	ldr	r0, [r7, #20]
 8014502:	f000 fa03 	bl	801490c <tcp_listen_input>
      }
      pbuf_free(p);
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f7fd fc48 	bl	8011d9c <pbuf_free>
      return;
 801450c:	e1a8      	b.n	8014860 <tcp_input+0x7ec>
 801450e:	bf00      	nop
 8014510:	200227c8 	.word	0x200227c8
 8014514:	2001f65c 	.word	0x2001f65c
 8014518:	0801f864 	.word	0x0801f864
 801451c:	0801f990 	.word	0x0801f990
 8014520:	0801f8b0 	.word	0x0801f8b0
 8014524:	200227a8 	.word	0x200227a8
 8014528:	0801f9bc 	.word	0x0801f9bc
 801452c:	200227ac 	.word	0x200227ac
 8014530:	0801f9e8 	.word	0x0801f9e8
 8014534:	200227a4 	.word	0x200227a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014538:	69bb      	ldr	r3, [r7, #24]
 801453a:	2b00      	cmp	r3, #0
 801453c:	f000 8158 	beq.w	80147f0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014540:	4b95      	ldr	r3, [pc, #596]	@ (8014798 <tcp_input+0x724>)
 8014542:	2200      	movs	r2, #0
 8014544:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	891a      	ldrh	r2, [r3, #8]
 801454a:	4b93      	ldr	r3, [pc, #588]	@ (8014798 <tcp_input+0x724>)
 801454c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801454e:	4a92      	ldr	r2, [pc, #584]	@ (8014798 <tcp_input+0x724>)
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014554:	4b91      	ldr	r3, [pc, #580]	@ (801479c <tcp_input+0x728>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a8f      	ldr	r2, [pc, #572]	@ (8014798 <tcp_input+0x724>)
 801455a:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801455c:	4b90      	ldr	r3, [pc, #576]	@ (80147a0 <tcp_input+0x72c>)
 801455e:	2200      	movs	r2, #0
 8014560:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014562:	4b90      	ldr	r3, [pc, #576]	@ (80147a4 <tcp_input+0x730>)
 8014564:	2200      	movs	r2, #0
 8014566:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014568:	4b8f      	ldr	r3, [pc, #572]	@ (80147a8 <tcp_input+0x734>)
 801456a:	2200      	movs	r2, #0
 801456c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801456e:	4b8f      	ldr	r3, [pc, #572]	@ (80147ac <tcp_input+0x738>)
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	f003 0308 	and.w	r3, r3, #8
 8014576:	2b00      	cmp	r3, #0
 8014578:	d006      	beq.n	8014588 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	7b5b      	ldrb	r3, [r3, #13]
 801457e:	f043 0301 	orr.w	r3, r3, #1
 8014582:	b2da      	uxtb	r2, r3
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014588:	69bb      	ldr	r3, [r7, #24]
 801458a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801458c:	2b00      	cmp	r3, #0
 801458e:	d017      	beq.n	80145c0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014590:	69b8      	ldr	r0, [r7, #24]
 8014592:	f7ff f855 	bl	8013640 <tcp_process_refused_data>
 8014596:	4603      	mov	r3, r0
 8014598:	f113 0f0d 	cmn.w	r3, #13
 801459c:	d007      	beq.n	80145ae <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d00c      	beq.n	80145c0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80145a6:	4b82      	ldr	r3, [pc, #520]	@ (80147b0 <tcp_input+0x73c>)
 80145a8:	881b      	ldrh	r3, [r3, #0]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d008      	beq.n	80145c0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	f040 80e3 	bne.w	801477e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80145b8:	69b8      	ldr	r0, [r7, #24]
 80145ba:	f003 fe6d 	bl	8018298 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80145be:	e0de      	b.n	801477e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80145c0:	4a7c      	ldr	r2, [pc, #496]	@ (80147b4 <tcp_input+0x740>)
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80145c6:	69b8      	ldr	r0, [r7, #24]
 80145c8:	f000 fb18 	bl	8014bfc <tcp_process>
 80145cc:	4603      	mov	r3, r0
 80145ce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80145d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145d4:	f113 0f0d 	cmn.w	r3, #13
 80145d8:	f000 80d3 	beq.w	8014782 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80145dc:	4b71      	ldr	r3, [pc, #452]	@ (80147a4 <tcp_input+0x730>)
 80145de:	781b      	ldrb	r3, [r3, #0]
 80145e0:	f003 0308 	and.w	r3, r3, #8
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d015      	beq.n	8014614 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d008      	beq.n	8014604 <tcp_input+0x590>
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80145f8:	69ba      	ldr	r2, [r7, #24]
 80145fa:	6912      	ldr	r2, [r2, #16]
 80145fc:	f06f 010d 	mvn.w	r1, #13
 8014600:	4610      	mov	r0, r2
 8014602:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014604:	69b9      	ldr	r1, [r7, #24]
 8014606:	486c      	ldr	r0, [pc, #432]	@ (80147b8 <tcp_input+0x744>)
 8014608:	f7ff fbb6 	bl	8013d78 <tcp_pcb_remove>
        tcp_free(pcb);
 801460c:	69b8      	ldr	r0, [r7, #24]
 801460e:	f7fd fe81 	bl	8012314 <tcp_free>
 8014612:	e0da      	b.n	80147ca <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014614:	2300      	movs	r3, #0
 8014616:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014618:	4b63      	ldr	r3, [pc, #396]	@ (80147a8 <tcp_input+0x734>)
 801461a:	881b      	ldrh	r3, [r3, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d01d      	beq.n	801465c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014620:	4b61      	ldr	r3, [pc, #388]	@ (80147a8 <tcp_input+0x734>)
 8014622:	881b      	ldrh	r3, [r3, #0]
 8014624:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014626:	69bb      	ldr	r3, [r7, #24]
 8014628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801462c:	2b00      	cmp	r3, #0
 801462e:	d00a      	beq.n	8014646 <tcp_input+0x5d2>
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014636:	69ba      	ldr	r2, [r7, #24]
 8014638:	6910      	ldr	r0, [r2, #16]
 801463a:	89fa      	ldrh	r2, [r7, #14]
 801463c:	69b9      	ldr	r1, [r7, #24]
 801463e:	4798      	blx	r3
 8014640:	4603      	mov	r3, r0
 8014642:	74fb      	strb	r3, [r7, #19]
 8014644:	e001      	b.n	801464a <tcp_input+0x5d6>
 8014646:	2300      	movs	r3, #0
 8014648:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801464a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801464e:	f113 0f0d 	cmn.w	r3, #13
 8014652:	f000 8098 	beq.w	8014786 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014656:	4b54      	ldr	r3, [pc, #336]	@ (80147a8 <tcp_input+0x734>)
 8014658:	2200      	movs	r2, #0
 801465a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801465c:	69b8      	ldr	r0, [r7, #24]
 801465e:	f000 f915 	bl	801488c <tcp_input_delayed_close>
 8014662:	4603      	mov	r3, r0
 8014664:	2b00      	cmp	r3, #0
 8014666:	f040 8090 	bne.w	801478a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801466a:	4b4d      	ldr	r3, [pc, #308]	@ (80147a0 <tcp_input+0x72c>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d041      	beq.n	80146f6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014672:	69bb      	ldr	r3, [r7, #24]
 8014674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014676:	2b00      	cmp	r3, #0
 8014678:	d006      	beq.n	8014688 <tcp_input+0x614>
 801467a:	4b50      	ldr	r3, [pc, #320]	@ (80147bc <tcp_input+0x748>)
 801467c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014680:	494f      	ldr	r1, [pc, #316]	@ (80147c0 <tcp_input+0x74c>)
 8014682:	4850      	ldr	r0, [pc, #320]	@ (80147c4 <tcp_input+0x750>)
 8014684:	f007 ffe4 	bl	801c650 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	8b5b      	ldrh	r3, [r3, #26]
 801468c:	f003 0310 	and.w	r3, r3, #16
 8014690:	2b00      	cmp	r3, #0
 8014692:	d008      	beq.n	80146a6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014694:	4b42      	ldr	r3, [pc, #264]	@ (80147a0 <tcp_input+0x72c>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	4618      	mov	r0, r3
 801469a:	f7fd fb7f 	bl	8011d9c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801469e:	69b8      	ldr	r0, [r7, #24]
 80146a0:	f7fe f97c 	bl	801299c <tcp_abort>
            goto aborted;
 80146a4:	e091      	b.n	80147ca <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d00c      	beq.n	80146ca <tcp_input+0x656>
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80146b6:	69bb      	ldr	r3, [r7, #24]
 80146b8:	6918      	ldr	r0, [r3, #16]
 80146ba:	4b39      	ldr	r3, [pc, #228]	@ (80147a0 <tcp_input+0x72c>)
 80146bc:	681a      	ldr	r2, [r3, #0]
 80146be:	2300      	movs	r3, #0
 80146c0:	69b9      	ldr	r1, [r7, #24]
 80146c2:	47a0      	blx	r4
 80146c4:	4603      	mov	r3, r0
 80146c6:	74fb      	strb	r3, [r7, #19]
 80146c8:	e008      	b.n	80146dc <tcp_input+0x668>
 80146ca:	4b35      	ldr	r3, [pc, #212]	@ (80147a0 <tcp_input+0x72c>)
 80146cc:	681a      	ldr	r2, [r3, #0]
 80146ce:	2300      	movs	r3, #0
 80146d0:	69b9      	ldr	r1, [r7, #24]
 80146d2:	2000      	movs	r0, #0
 80146d4:	f7ff f88a 	bl	80137ec <tcp_recv_null>
 80146d8:	4603      	mov	r3, r0
 80146da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80146dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146e0:	f113 0f0d 	cmn.w	r3, #13
 80146e4:	d053      	beq.n	801478e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80146e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d003      	beq.n	80146f6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80146ee:	4b2c      	ldr	r3, [pc, #176]	@ (80147a0 <tcp_input+0x72c>)
 80146f0:	681a      	ldr	r2, [r3, #0]
 80146f2:	69bb      	ldr	r3, [r7, #24]
 80146f4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80146f6:	4b2b      	ldr	r3, [pc, #172]	@ (80147a4 <tcp_input+0x730>)
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	f003 0320 	and.w	r3, r3, #32
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d030      	beq.n	8014764 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014702:	69bb      	ldr	r3, [r7, #24]
 8014704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014706:	2b00      	cmp	r3, #0
 8014708:	d009      	beq.n	801471e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801470a:	69bb      	ldr	r3, [r7, #24]
 801470c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801470e:	7b5a      	ldrb	r2, [r3, #13]
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014714:	f042 0220 	orr.w	r2, r2, #32
 8014718:	b2d2      	uxtb	r2, r2
 801471a:	735a      	strb	r2, [r3, #13]
 801471c:	e022      	b.n	8014764 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801471e:	69bb      	ldr	r3, [r7, #24]
 8014720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014722:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014726:	d005      	beq.n	8014734 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801472c:	3301      	adds	r3, #1
 801472e:	b29a      	uxth	r2, r3
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801473a:	2b00      	cmp	r3, #0
 801473c:	d00b      	beq.n	8014756 <tcp_input+0x6e2>
 801473e:	69bb      	ldr	r3, [r7, #24]
 8014740:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	6918      	ldr	r0, [r3, #16]
 8014748:	2300      	movs	r3, #0
 801474a:	2200      	movs	r2, #0
 801474c:	69b9      	ldr	r1, [r7, #24]
 801474e:	47a0      	blx	r4
 8014750:	4603      	mov	r3, r0
 8014752:	74fb      	strb	r3, [r7, #19]
 8014754:	e001      	b.n	801475a <tcp_input+0x6e6>
 8014756:	2300      	movs	r3, #0
 8014758:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801475a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801475e:	f113 0f0d 	cmn.w	r3, #13
 8014762:	d016      	beq.n	8014792 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014764:	4b13      	ldr	r3, [pc, #76]	@ (80147b4 <tcp_input+0x740>)
 8014766:	2200      	movs	r2, #0
 8014768:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801476a:	69b8      	ldr	r0, [r7, #24]
 801476c:	f000 f88e 	bl	801488c <tcp_input_delayed_close>
 8014770:	4603      	mov	r3, r0
 8014772:	2b00      	cmp	r3, #0
 8014774:	d128      	bne.n	80147c8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014776:	69b8      	ldr	r0, [r7, #24]
 8014778:	f002 ff7c 	bl	8017674 <tcp_output>
 801477c:	e025      	b.n	80147ca <tcp_input+0x756>
        goto aborted;
 801477e:	bf00      	nop
 8014780:	e023      	b.n	80147ca <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014782:	bf00      	nop
 8014784:	e021      	b.n	80147ca <tcp_input+0x756>
              goto aborted;
 8014786:	bf00      	nop
 8014788:	e01f      	b.n	80147ca <tcp_input+0x756>
          goto aborted;
 801478a:	bf00      	nop
 801478c:	e01d      	b.n	80147ca <tcp_input+0x756>
            goto aborted;
 801478e:	bf00      	nop
 8014790:	e01b      	b.n	80147ca <tcp_input+0x756>
              goto aborted;
 8014792:	bf00      	nop
 8014794:	e019      	b.n	80147ca <tcp_input+0x756>
 8014796:	bf00      	nop
 8014798:	200227b4 	.word	0x200227b4
 801479c:	200227c8 	.word	0x200227c8
 80147a0:	200227e8 	.word	0x200227e8
 80147a4:	200227e5 	.word	0x200227e5
 80147a8:	200227e0 	.word	0x200227e0
 80147ac:	200227e4 	.word	0x200227e4
 80147b0:	200227e2 	.word	0x200227e2
 80147b4:	200227ec 	.word	0x200227ec
 80147b8:	200227a8 	.word	0x200227a8
 80147bc:	0801f864 	.word	0x0801f864
 80147c0:	0801fa18 	.word	0x0801fa18
 80147c4:	0801f8b0 	.word	0x0801f8b0
          goto aborted;
 80147c8:	bf00      	nop
    tcp_input_pcb = NULL;
 80147ca:	4b27      	ldr	r3, [pc, #156]	@ (8014868 <tcp_input+0x7f4>)
 80147cc:	2200      	movs	r2, #0
 80147ce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80147d0:	4b26      	ldr	r3, [pc, #152]	@ (801486c <tcp_input+0x7f8>)
 80147d2:	2200      	movs	r2, #0
 80147d4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80147d6:	4b26      	ldr	r3, [pc, #152]	@ (8014870 <tcp_input+0x7fc>)
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d03f      	beq.n	801485e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80147de:	4b24      	ldr	r3, [pc, #144]	@ (8014870 <tcp_input+0x7fc>)
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7fd fada 	bl	8011d9c <pbuf_free>
      inseg.p = NULL;
 80147e8:	4b21      	ldr	r3, [pc, #132]	@ (8014870 <tcp_input+0x7fc>)
 80147ea:	2200      	movs	r2, #0
 80147ec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80147ee:	e036      	b.n	801485e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80147f0:	4b20      	ldr	r3, [pc, #128]	@ (8014874 <tcp_input+0x800>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	899b      	ldrh	r3, [r3, #12]
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7fb fdeb 	bl	80103d4 <lwip_htons>
 80147fe:	4603      	mov	r3, r0
 8014800:	b2db      	uxtb	r3, r3
 8014802:	f003 0304 	and.w	r3, r3, #4
 8014806:	2b00      	cmp	r3, #0
 8014808:	d118      	bne.n	801483c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801480a:	4b1b      	ldr	r3, [pc, #108]	@ (8014878 <tcp_input+0x804>)
 801480c:	6819      	ldr	r1, [r3, #0]
 801480e:	4b1b      	ldr	r3, [pc, #108]	@ (801487c <tcp_input+0x808>)
 8014810:	881b      	ldrh	r3, [r3, #0]
 8014812:	461a      	mov	r2, r3
 8014814:	4b1a      	ldr	r3, [pc, #104]	@ (8014880 <tcp_input+0x80c>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801481a:	4b16      	ldr	r3, [pc, #88]	@ (8014874 <tcp_input+0x800>)
 801481c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801481e:	885b      	ldrh	r3, [r3, #2]
 8014820:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014822:	4a14      	ldr	r2, [pc, #80]	@ (8014874 <tcp_input+0x800>)
 8014824:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014826:	8812      	ldrh	r2, [r2, #0]
 8014828:	b292      	uxth	r2, r2
 801482a:	9202      	str	r2, [sp, #8]
 801482c:	9301      	str	r3, [sp, #4]
 801482e:	4b15      	ldr	r3, [pc, #84]	@ (8014884 <tcp_input+0x810>)
 8014830:	9300      	str	r3, [sp, #0]
 8014832:	4b15      	ldr	r3, [pc, #84]	@ (8014888 <tcp_input+0x814>)
 8014834:	4602      	mov	r2, r0
 8014836:	2000      	movs	r0, #0
 8014838:	f003 fcdc 	bl	80181f4 <tcp_rst>
    pbuf_free(p);
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7fd faad 	bl	8011d9c <pbuf_free>
  return;
 8014842:	e00c      	b.n	801485e <tcp_input+0x7ea>
    goto dropped;
 8014844:	bf00      	nop
 8014846:	e006      	b.n	8014856 <tcp_input+0x7e2>
    goto dropped;
 8014848:	bf00      	nop
 801484a:	e004      	b.n	8014856 <tcp_input+0x7e2>
    goto dropped;
 801484c:	bf00      	nop
 801484e:	e002      	b.n	8014856 <tcp_input+0x7e2>
      goto dropped;
 8014850:	bf00      	nop
 8014852:	e000      	b.n	8014856 <tcp_input+0x7e2>
      goto dropped;
 8014854:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f7fd faa0 	bl	8011d9c <pbuf_free>
 801485c:	e000      	b.n	8014860 <tcp_input+0x7ec>
  return;
 801485e:	bf00      	nop
}
 8014860:	3724      	adds	r7, #36	@ 0x24
 8014862:	46bd      	mov	sp, r7
 8014864:	bd90      	pop	{r4, r7, pc}
 8014866:	bf00      	nop
 8014868:	200227ec 	.word	0x200227ec
 801486c:	200227e8 	.word	0x200227e8
 8014870:	200227b4 	.word	0x200227b4
 8014874:	200227c8 	.word	0x200227c8
 8014878:	200227dc 	.word	0x200227dc
 801487c:	200227e2 	.word	0x200227e2
 8014880:	200227d8 	.word	0x200227d8
 8014884:	2001f66c 	.word	0x2001f66c
 8014888:	2001f670 	.word	0x2001f670

0801488c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d106      	bne.n	80148a8 <tcp_input_delayed_close+0x1c>
 801489a:	4b17      	ldr	r3, [pc, #92]	@ (80148f8 <tcp_input_delayed_close+0x6c>)
 801489c:	f240 225a 	movw	r2, #602	@ 0x25a
 80148a0:	4916      	ldr	r1, [pc, #88]	@ (80148fc <tcp_input_delayed_close+0x70>)
 80148a2:	4817      	ldr	r0, [pc, #92]	@ (8014900 <tcp_input_delayed_close+0x74>)
 80148a4:	f007 fed4 	bl	801c650 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80148a8:	4b16      	ldr	r3, [pc, #88]	@ (8014904 <tcp_input_delayed_close+0x78>)
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	f003 0310 	and.w	r3, r3, #16
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d01c      	beq.n	80148ee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	8b5b      	ldrh	r3, [r3, #26]
 80148b8:	f003 0310 	and.w	r3, r3, #16
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d10d      	bne.n	80148dc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d008      	beq.n	80148dc <tcp_input_delayed_close+0x50>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80148d0:	687a      	ldr	r2, [r7, #4]
 80148d2:	6912      	ldr	r2, [r2, #16]
 80148d4:	f06f 010e 	mvn.w	r1, #14
 80148d8:	4610      	mov	r0, r2
 80148da:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80148dc:	6879      	ldr	r1, [r7, #4]
 80148de:	480a      	ldr	r0, [pc, #40]	@ (8014908 <tcp_input_delayed_close+0x7c>)
 80148e0:	f7ff fa4a 	bl	8013d78 <tcp_pcb_remove>
    tcp_free(pcb);
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f7fd fd15 	bl	8012314 <tcp_free>
    return 1;
 80148ea:	2301      	movs	r3, #1
 80148ec:	e000      	b.n	80148f0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3708      	adds	r7, #8
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	0801f864 	.word	0x0801f864
 80148fc:	0801fa34 	.word	0x0801fa34
 8014900:	0801f8b0 	.word	0x0801f8b0
 8014904:	200227e5 	.word	0x200227e5
 8014908:	200227a8 	.word	0x200227a8

0801490c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801490c:	b590      	push	{r4, r7, lr}
 801490e:	b08b      	sub	sp, #44	@ 0x2c
 8014910:	af04      	add	r7, sp, #16
 8014912:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014914:	4b6f      	ldr	r3, [pc, #444]	@ (8014ad4 <tcp_listen_input+0x1c8>)
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	f003 0304 	and.w	r3, r3, #4
 801491c:	2b00      	cmp	r3, #0
 801491e:	f040 80d2 	bne.w	8014ac6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d106      	bne.n	8014936 <tcp_listen_input+0x2a>
 8014928:	4b6b      	ldr	r3, [pc, #428]	@ (8014ad8 <tcp_listen_input+0x1cc>)
 801492a:	f240 2281 	movw	r2, #641	@ 0x281
 801492e:	496b      	ldr	r1, [pc, #428]	@ (8014adc <tcp_listen_input+0x1d0>)
 8014930:	486b      	ldr	r0, [pc, #428]	@ (8014ae0 <tcp_listen_input+0x1d4>)
 8014932:	f007 fe8d 	bl	801c650 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014936:	4b67      	ldr	r3, [pc, #412]	@ (8014ad4 <tcp_listen_input+0x1c8>)
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	f003 0310 	and.w	r3, r3, #16
 801493e:	2b00      	cmp	r3, #0
 8014940:	d019      	beq.n	8014976 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014942:	4b68      	ldr	r3, [pc, #416]	@ (8014ae4 <tcp_listen_input+0x1d8>)
 8014944:	6819      	ldr	r1, [r3, #0]
 8014946:	4b68      	ldr	r3, [pc, #416]	@ (8014ae8 <tcp_listen_input+0x1dc>)
 8014948:	881b      	ldrh	r3, [r3, #0]
 801494a:	461a      	mov	r2, r3
 801494c:	4b67      	ldr	r3, [pc, #412]	@ (8014aec <tcp_listen_input+0x1e0>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014952:	4b67      	ldr	r3, [pc, #412]	@ (8014af0 <tcp_listen_input+0x1e4>)
 8014954:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014956:	885b      	ldrh	r3, [r3, #2]
 8014958:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801495a:	4a65      	ldr	r2, [pc, #404]	@ (8014af0 <tcp_listen_input+0x1e4>)
 801495c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801495e:	8812      	ldrh	r2, [r2, #0]
 8014960:	b292      	uxth	r2, r2
 8014962:	9202      	str	r2, [sp, #8]
 8014964:	9301      	str	r3, [sp, #4]
 8014966:	4b63      	ldr	r3, [pc, #396]	@ (8014af4 <tcp_listen_input+0x1e8>)
 8014968:	9300      	str	r3, [sp, #0]
 801496a:	4b63      	ldr	r3, [pc, #396]	@ (8014af8 <tcp_listen_input+0x1ec>)
 801496c:	4602      	mov	r2, r0
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f003 fc40 	bl	80181f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014974:	e0a9      	b.n	8014aca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014976:	4b57      	ldr	r3, [pc, #348]	@ (8014ad4 <tcp_listen_input+0x1c8>)
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	f003 0302 	and.w	r3, r3, #2
 801497e:	2b00      	cmp	r3, #0
 8014980:	f000 80a3 	beq.w	8014aca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	7d5b      	ldrb	r3, [r3, #21]
 8014988:	4618      	mov	r0, r3
 801498a:	f7ff f853 	bl	8013a34 <tcp_alloc>
 801498e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d111      	bne.n	80149ba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	699b      	ldr	r3, [r3, #24]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d00a      	beq.n	80149b4 <tcp_listen_input+0xa8>
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	699b      	ldr	r3, [r3, #24]
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	6910      	ldr	r0, [r2, #16]
 80149a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80149aa:	2100      	movs	r1, #0
 80149ac:	4798      	blx	r3
 80149ae:	4603      	mov	r3, r0
 80149b0:	73bb      	strb	r3, [r7, #14]
      return;
 80149b2:	e08b      	b.n	8014acc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80149b4:	23f0      	movs	r3, #240	@ 0xf0
 80149b6:	73bb      	strb	r3, [r7, #14]
      return;
 80149b8:	e088      	b.n	8014acc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80149ba:	4b50      	ldr	r3, [pc, #320]	@ (8014afc <tcp_listen_input+0x1f0>)
 80149bc:	695a      	ldr	r2, [r3, #20]
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80149c2:	4b4e      	ldr	r3, [pc, #312]	@ (8014afc <tcp_listen_input+0x1f0>)
 80149c4:	691a      	ldr	r2, [r3, #16]
 80149c6:	697b      	ldr	r3, [r7, #20]
 80149c8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	8ada      	ldrh	r2, [r3, #22]
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80149d2:	4b47      	ldr	r3, [pc, #284]	@ (8014af0 <tcp_listen_input+0x1e4>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	881b      	ldrh	r3, [r3, #0]
 80149d8:	b29a      	uxth	r2, r3
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	2203      	movs	r2, #3
 80149e2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80149e4:	4b41      	ldr	r3, [pc, #260]	@ (8014aec <tcp_listen_input+0x1e0>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	1c5a      	adds	r2, r3, #1
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80149f6:	6978      	ldr	r0, [r7, #20]
 80149f8:	f7ff fa52 	bl	8013ea0 <tcp_next_iss>
 80149fc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	693a      	ldr	r2, [r7, #16]
 8014a02:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	693a      	ldr	r2, [r7, #16]
 8014a08:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	693a      	ldr	r2, [r7, #16]
 8014a0e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	693a      	ldr	r2, [r7, #16]
 8014a14:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014a16:	4b35      	ldr	r3, [pc, #212]	@ (8014aec <tcp_listen_input+0x1e0>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	1e5a      	subs	r2, r3, #1
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	691a      	ldr	r2, [r3, #16]
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	687a      	ldr	r2, [r7, #4]
 8014a2c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	7a5b      	ldrb	r3, [r3, #9]
 8014a32:	f003 030c 	and.w	r3, r3, #12
 8014a36:	b2da      	uxtb	r2, r3
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	7a1a      	ldrb	r2, [r3, #8]
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014a44:	4b2e      	ldr	r3, [pc, #184]	@ (8014b00 <tcp_listen_input+0x1f4>)
 8014a46:	681a      	ldr	r2, [r3, #0]
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	60da      	str	r2, [r3, #12]
 8014a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8014b00 <tcp_listen_input+0x1f4>)
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	6013      	str	r3, [r2, #0]
 8014a52:	f003 fd91 	bl	8018578 <tcp_timer_needed>
 8014a56:	4b2b      	ldr	r3, [pc, #172]	@ (8014b04 <tcp_listen_input+0x1f8>)
 8014a58:	2201      	movs	r2, #1
 8014a5a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014a5c:	6978      	ldr	r0, [r7, #20]
 8014a5e:	f001 fd8b 	bl	8016578 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014a62:	4b23      	ldr	r3, [pc, #140]	@ (8014af0 <tcp_listen_input+0x1e4>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	89db      	ldrh	r3, [r3, #14]
 8014a68:	b29a      	uxth	r2, r3
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	3304      	adds	r3, #4
 8014a84:	4618      	mov	r0, r3
 8014a86:	f006 f801 	bl	801aa8c <ip4_route>
 8014a8a:	4601      	mov	r1, r0
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	3304      	adds	r3, #4
 8014a90:	461a      	mov	r2, r3
 8014a92:	4620      	mov	r0, r4
 8014a94:	f7ff fa2a 	bl	8013eec <tcp_eff_send_mss_netif>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	461a      	mov	r2, r3
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014aa0:	2112      	movs	r1, #18
 8014aa2:	6978      	ldr	r0, [r7, #20]
 8014aa4:	f002 fcf8 	bl	8017498 <tcp_enqueue_flags>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d004      	beq.n	8014abe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014ab4:	2100      	movs	r1, #0
 8014ab6:	6978      	ldr	r0, [r7, #20]
 8014ab8:	f7fd feb2 	bl	8012820 <tcp_abandon>
      return;
 8014abc:	e006      	b.n	8014acc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014abe:	6978      	ldr	r0, [r7, #20]
 8014ac0:	f002 fdd8 	bl	8017674 <tcp_output>
  return;
 8014ac4:	e001      	b.n	8014aca <tcp_listen_input+0x1be>
    return;
 8014ac6:	bf00      	nop
 8014ac8:	e000      	b.n	8014acc <tcp_listen_input+0x1c0>
  return;
 8014aca:	bf00      	nop
}
 8014acc:	371c      	adds	r7, #28
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd90      	pop	{r4, r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	200227e4 	.word	0x200227e4
 8014ad8:	0801f864 	.word	0x0801f864
 8014adc:	0801fa5c 	.word	0x0801fa5c
 8014ae0:	0801f8b0 	.word	0x0801f8b0
 8014ae4:	200227dc 	.word	0x200227dc
 8014ae8:	200227e2 	.word	0x200227e2
 8014aec:	200227d8 	.word	0x200227d8
 8014af0:	200227c8 	.word	0x200227c8
 8014af4:	2001f66c 	.word	0x2001f66c
 8014af8:	2001f670 	.word	0x2001f670
 8014afc:	2001f65c 	.word	0x2001f65c
 8014b00:	200227a8 	.word	0x200227a8
 8014b04:	200227b0 	.word	0x200227b0

08014b08 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b086      	sub	sp, #24
 8014b0c:	af04      	add	r7, sp, #16
 8014b0e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014b10:	4b2f      	ldr	r3, [pc, #188]	@ (8014bd0 <tcp_timewait_input+0xc8>)
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	f003 0304 	and.w	r3, r3, #4
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d153      	bne.n	8014bc4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d106      	bne.n	8014b30 <tcp_timewait_input+0x28>
 8014b22:	4b2c      	ldr	r3, [pc, #176]	@ (8014bd4 <tcp_timewait_input+0xcc>)
 8014b24:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014b28:	492b      	ldr	r1, [pc, #172]	@ (8014bd8 <tcp_timewait_input+0xd0>)
 8014b2a:	482c      	ldr	r0, [pc, #176]	@ (8014bdc <tcp_timewait_input+0xd4>)
 8014b2c:	f007 fd90 	bl	801c650 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014b30:	4b27      	ldr	r3, [pc, #156]	@ (8014bd0 <tcp_timewait_input+0xc8>)
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	f003 0302 	and.w	r3, r3, #2
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d02a      	beq.n	8014b92 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014b3c:	4b28      	ldr	r3, [pc, #160]	@ (8014be0 <tcp_timewait_input+0xd8>)
 8014b3e:	681a      	ldr	r2, [r3, #0]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b44:	1ad3      	subs	r3, r2, r3
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	db2d      	blt.n	8014ba6 <tcp_timewait_input+0x9e>
 8014b4a:	4b25      	ldr	r3, [pc, #148]	@ (8014be0 <tcp_timewait_input+0xd8>)
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b52:	6879      	ldr	r1, [r7, #4]
 8014b54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014b56:	440b      	add	r3, r1
 8014b58:	1ad3      	subs	r3, r2, r3
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	dc23      	bgt.n	8014ba6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b5e:	4b21      	ldr	r3, [pc, #132]	@ (8014be4 <tcp_timewait_input+0xdc>)
 8014b60:	6819      	ldr	r1, [r3, #0]
 8014b62:	4b21      	ldr	r3, [pc, #132]	@ (8014be8 <tcp_timewait_input+0xe0>)
 8014b64:	881b      	ldrh	r3, [r3, #0]
 8014b66:	461a      	mov	r2, r3
 8014b68:	4b1d      	ldr	r3, [pc, #116]	@ (8014be0 <tcp_timewait_input+0xd8>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8014bec <tcp_timewait_input+0xe4>)
 8014b70:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b72:	885b      	ldrh	r3, [r3, #2]
 8014b74:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b76:	4a1d      	ldr	r2, [pc, #116]	@ (8014bec <tcp_timewait_input+0xe4>)
 8014b78:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b7a:	8812      	ldrh	r2, [r2, #0]
 8014b7c:	b292      	uxth	r2, r2
 8014b7e:	9202      	str	r2, [sp, #8]
 8014b80:	9301      	str	r3, [sp, #4]
 8014b82:	4b1b      	ldr	r3, [pc, #108]	@ (8014bf0 <tcp_timewait_input+0xe8>)
 8014b84:	9300      	str	r3, [sp, #0]
 8014b86:	4b1b      	ldr	r3, [pc, #108]	@ (8014bf4 <tcp_timewait_input+0xec>)
 8014b88:	4602      	mov	r2, r0
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f003 fb32 	bl	80181f4 <tcp_rst>
      return;
 8014b90:	e01b      	b.n	8014bca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014b92:	4b0f      	ldr	r3, [pc, #60]	@ (8014bd0 <tcp_timewait_input+0xc8>)
 8014b94:	781b      	ldrb	r3, [r3, #0]
 8014b96:	f003 0301 	and.w	r3, r3, #1
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d003      	beq.n	8014ba6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014b9e:	4b16      	ldr	r3, [pc, #88]	@ (8014bf8 <tcp_timewait_input+0xf0>)
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014ba6:	4b10      	ldr	r3, [pc, #64]	@ (8014be8 <tcp_timewait_input+0xe0>)
 8014ba8:	881b      	ldrh	r3, [r3, #0]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d00c      	beq.n	8014bc8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	8b5b      	ldrh	r3, [r3, #26]
 8014bb2:	f043 0302 	orr.w	r3, r3, #2
 8014bb6:	b29a      	uxth	r2, r3
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f002 fd59 	bl	8017674 <tcp_output>
  }
  return;
 8014bc2:	e001      	b.n	8014bc8 <tcp_timewait_input+0xc0>
    return;
 8014bc4:	bf00      	nop
 8014bc6:	e000      	b.n	8014bca <tcp_timewait_input+0xc2>
  return;
 8014bc8:	bf00      	nop
}
 8014bca:	3708      	adds	r7, #8
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}
 8014bd0:	200227e4 	.word	0x200227e4
 8014bd4:	0801f864 	.word	0x0801f864
 8014bd8:	0801fa7c 	.word	0x0801fa7c
 8014bdc:	0801f8b0 	.word	0x0801f8b0
 8014be0:	200227d8 	.word	0x200227d8
 8014be4:	200227dc 	.word	0x200227dc
 8014be8:	200227e2 	.word	0x200227e2
 8014bec:	200227c8 	.word	0x200227c8
 8014bf0:	2001f66c 	.word	0x2001f66c
 8014bf4:	2001f670 	.word	0x2001f670
 8014bf8:	2002279c 	.word	0x2002279c

08014bfc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014bfc:	b590      	push	{r4, r7, lr}
 8014bfe:	b08d      	sub	sp, #52	@ 0x34
 8014c00:	af04      	add	r7, sp, #16
 8014c02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014c04:	2300      	movs	r3, #0
 8014c06:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d106      	bne.n	8014c20 <tcp_process+0x24>
 8014c12:	4b9d      	ldr	r3, [pc, #628]	@ (8014e88 <tcp_process+0x28c>)
 8014c14:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8014c18:	499c      	ldr	r1, [pc, #624]	@ (8014e8c <tcp_process+0x290>)
 8014c1a:	489d      	ldr	r0, [pc, #628]	@ (8014e90 <tcp_process+0x294>)
 8014c1c:	f007 fd18 	bl	801c650 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014c20:	4b9c      	ldr	r3, [pc, #624]	@ (8014e94 <tcp_process+0x298>)
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	f003 0304 	and.w	r3, r3, #4
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d04e      	beq.n	8014cca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	7d1b      	ldrb	r3, [r3, #20]
 8014c30:	2b02      	cmp	r3, #2
 8014c32:	d108      	bne.n	8014c46 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014c38:	4b97      	ldr	r3, [pc, #604]	@ (8014e98 <tcp_process+0x29c>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d123      	bne.n	8014c88 <tcp_process+0x8c>
        acceptable = 1;
 8014c40:	2301      	movs	r3, #1
 8014c42:	77fb      	strb	r3, [r7, #31]
 8014c44:	e020      	b.n	8014c88 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c4a:	4b94      	ldr	r3, [pc, #592]	@ (8014e9c <tcp_process+0x2a0>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d102      	bne.n	8014c58 <tcp_process+0x5c>
        acceptable = 1;
 8014c52:	2301      	movs	r3, #1
 8014c54:	77fb      	strb	r3, [r7, #31]
 8014c56:	e017      	b.n	8014c88 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014c58:	4b90      	ldr	r3, [pc, #576]	@ (8014e9c <tcp_process+0x2a0>)
 8014c5a:	681a      	ldr	r2, [r3, #0]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c60:	1ad3      	subs	r3, r2, r3
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	db10      	blt.n	8014c88 <tcp_process+0x8c>
 8014c66:	4b8d      	ldr	r3, [pc, #564]	@ (8014e9c <tcp_process+0x2a0>)
 8014c68:	681a      	ldr	r2, [r3, #0]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c6e:	6879      	ldr	r1, [r7, #4]
 8014c70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014c72:	440b      	add	r3, r1
 8014c74:	1ad3      	subs	r3, r2, r3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	dc06      	bgt.n	8014c88 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	8b5b      	ldrh	r3, [r3, #26]
 8014c7e:	f043 0302 	orr.w	r3, r3, #2
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014c88:	7ffb      	ldrb	r3, [r7, #31]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d01b      	beq.n	8014cc6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	7d1b      	ldrb	r3, [r3, #20]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d106      	bne.n	8014ca4 <tcp_process+0xa8>
 8014c96:	4b7c      	ldr	r3, [pc, #496]	@ (8014e88 <tcp_process+0x28c>)
 8014c98:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8014c9c:	4980      	ldr	r1, [pc, #512]	@ (8014ea0 <tcp_process+0x2a4>)
 8014c9e:	487c      	ldr	r0, [pc, #496]	@ (8014e90 <tcp_process+0x294>)
 8014ca0:	f007 fcd6 	bl	801c650 <iprintf>
      recv_flags |= TF_RESET;
 8014ca4:	4b7f      	ldr	r3, [pc, #508]	@ (8014ea4 <tcp_process+0x2a8>)
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	f043 0308 	orr.w	r3, r3, #8
 8014cac:	b2da      	uxtb	r2, r3
 8014cae:	4b7d      	ldr	r3, [pc, #500]	@ (8014ea4 <tcp_process+0x2a8>)
 8014cb0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	8b5b      	ldrh	r3, [r3, #26]
 8014cb6:	f023 0301 	bic.w	r3, r3, #1
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014cc0:	f06f 030d 	mvn.w	r3, #13
 8014cc4:	e37a      	b.n	80153bc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	e378      	b.n	80153bc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014cca:	4b72      	ldr	r3, [pc, #456]	@ (8014e94 <tcp_process+0x298>)
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	f003 0302 	and.w	r3, r3, #2
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d010      	beq.n	8014cf8 <tcp_process+0xfc>
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	7d1b      	ldrb	r3, [r3, #20]
 8014cda:	2b02      	cmp	r3, #2
 8014cdc:	d00c      	beq.n	8014cf8 <tcp_process+0xfc>
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	7d1b      	ldrb	r3, [r3, #20]
 8014ce2:	2b03      	cmp	r3, #3
 8014ce4:	d008      	beq.n	8014cf8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	8b5b      	ldrh	r3, [r3, #26]
 8014cea:	f043 0302 	orr.w	r3, r3, #2
 8014cee:	b29a      	uxth	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	e361      	b.n	80153bc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	8b5b      	ldrh	r3, [r3, #26]
 8014cfc:	f003 0310 	and.w	r3, r3, #16
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d103      	bne.n	8014d0c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014d04:	4b68      	ldr	r3, [pc, #416]	@ (8014ea8 <tcp_process+0x2ac>)
 8014d06:	681a      	ldr	r2, [r3, #0]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2200      	movs	r2, #0
 8014d18:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f001 fc2b 	bl	8016578 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	7d1b      	ldrb	r3, [r3, #20]
 8014d26:	3b02      	subs	r3, #2
 8014d28:	2b07      	cmp	r3, #7
 8014d2a:	f200 8337 	bhi.w	801539c <tcp_process+0x7a0>
 8014d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8014d34 <tcp_process+0x138>)
 8014d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d34:	08014d55 	.word	0x08014d55
 8014d38:	08014f85 	.word	0x08014f85
 8014d3c:	080150fd 	.word	0x080150fd
 8014d40:	08015127 	.word	0x08015127
 8014d44:	0801524b 	.word	0x0801524b
 8014d48:	080150fd 	.word	0x080150fd
 8014d4c:	080152d7 	.word	0x080152d7
 8014d50:	08015367 	.word	0x08015367
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014d54:	4b4f      	ldr	r3, [pc, #316]	@ (8014e94 <tcp_process+0x298>)
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	f003 0310 	and.w	r3, r3, #16
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	f000 80e4 	beq.w	8014f2a <tcp_process+0x32e>
 8014d62:	4b4c      	ldr	r3, [pc, #304]	@ (8014e94 <tcp_process+0x298>)
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	f003 0302 	and.w	r3, r3, #2
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	f000 80dd 	beq.w	8014f2a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d74:	1c5a      	adds	r2, r3, #1
 8014d76:	4b48      	ldr	r3, [pc, #288]	@ (8014e98 <tcp_process+0x29c>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	f040 80d5 	bne.w	8014f2a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014d80:	4b46      	ldr	r3, [pc, #280]	@ (8014e9c <tcp_process+0x2a0>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	1c5a      	adds	r2, r3, #1
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014d92:	4b41      	ldr	r3, [pc, #260]	@ (8014e98 <tcp_process+0x29c>)
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014d9a:	4b44      	ldr	r3, [pc, #272]	@ (8014eac <tcp_process+0x2b0>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	89db      	ldrh	r3, [r3, #14]
 8014da0:	b29a      	uxth	r2, r3
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014db4:	4b39      	ldr	r3, [pc, #228]	@ (8014e9c <tcp_process+0x2a0>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	1e5a      	subs	r2, r3, #1
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2204      	movs	r2, #4
 8014dc2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	3304      	adds	r3, #4
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f005 fe5d 	bl	801aa8c <ip4_route>
 8014dd2:	4601      	mov	r1, r0
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	3304      	adds	r3, #4
 8014dd8:	461a      	mov	r2, r3
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f7ff f886 	bl	8013eec <tcp_eff_send_mss_netif>
 8014de0:	4603      	mov	r3, r0
 8014de2:	461a      	mov	r2, r3
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014dec:	009a      	lsls	r2, r3, #2
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014df2:	005b      	lsls	r3, r3, #1
 8014df4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8014df8:	428b      	cmp	r3, r1
 8014dfa:	bf38      	it	cc
 8014dfc:	460b      	movcc	r3, r1
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d204      	bcs.n	8014e0c <tcp_process+0x210>
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	b29b      	uxth	r3, r3
 8014e0a:	e00d      	b.n	8014e28 <tcp_process+0x22c>
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e10:	005b      	lsls	r3, r3, #1
 8014e12:	f241 121c 	movw	r2, #4380	@ 0x111c
 8014e16:	4293      	cmp	r3, r2
 8014e18:	d904      	bls.n	8014e24 <tcp_process+0x228>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e1e:	005b      	lsls	r3, r3, #1
 8014e20:	b29b      	uxth	r3, r3
 8014e22:	e001      	b.n	8014e28 <tcp_process+0x22c>
 8014e24:	f241 131c 	movw	r3, #4380	@ 0x111c
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d106      	bne.n	8014e46 <tcp_process+0x24a>
 8014e38:	4b13      	ldr	r3, [pc, #76]	@ (8014e88 <tcp_process+0x28c>)
 8014e3a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014e3e:	491c      	ldr	r1, [pc, #112]	@ (8014eb0 <tcp_process+0x2b4>)
 8014e40:	4813      	ldr	r0, [pc, #76]	@ (8014e90 <tcp_process+0x294>)
 8014e42:	f007 fc05 	bl	801c650 <iprintf>
        --pcb->snd_queuelen;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014e4c:	3b01      	subs	r3, #1
 8014e4e:	b29a      	uxth	r2, r3
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e5a:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d12a      	bne.n	8014eb8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e66:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d106      	bne.n	8014e7c <tcp_process+0x280>
 8014e6e:	4b06      	ldr	r3, [pc, #24]	@ (8014e88 <tcp_process+0x28c>)
 8014e70:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014e74:	490f      	ldr	r1, [pc, #60]	@ (8014eb4 <tcp_process+0x2b8>)
 8014e76:	4806      	ldr	r0, [pc, #24]	@ (8014e90 <tcp_process+0x294>)
 8014e78:	f007 fbea 	bl	801c650 <iprintf>
          pcb->unsent = rseg->next;
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014e84:	e01c      	b.n	8014ec0 <tcp_process+0x2c4>
 8014e86:	bf00      	nop
 8014e88:	0801f864 	.word	0x0801f864
 8014e8c:	0801fa9c 	.word	0x0801fa9c
 8014e90:	0801f8b0 	.word	0x0801f8b0
 8014e94:	200227e4 	.word	0x200227e4
 8014e98:	200227dc 	.word	0x200227dc
 8014e9c:	200227d8 	.word	0x200227d8
 8014ea0:	0801fab8 	.word	0x0801fab8
 8014ea4:	200227e5 	.word	0x200227e5
 8014ea8:	2002279c 	.word	0x2002279c
 8014eac:	200227c8 	.word	0x200227c8
 8014eb0:	0801fad8 	.word	0x0801fad8
 8014eb4:	0801faf0 	.word	0x0801faf0
        } else {
          pcb->unacked = rseg->next;
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8014ec0:	6978      	ldr	r0, [r7, #20]
 8014ec2:	f7fe fc4e 	bl	8013762 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d104      	bne.n	8014ed8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014ed4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014ed6:	e006      	b.n	8014ee6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2200      	movs	r2, #0
 8014edc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d00a      	beq.n	8014f06 <tcp_process+0x30a>
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ef6:	687a      	ldr	r2, [r7, #4]
 8014ef8:	6910      	ldr	r0, [r2, #16]
 8014efa:	2200      	movs	r2, #0
 8014efc:	6879      	ldr	r1, [r7, #4]
 8014efe:	4798      	blx	r3
 8014f00:	4603      	mov	r3, r0
 8014f02:	77bb      	strb	r3, [r7, #30]
 8014f04:	e001      	b.n	8014f0a <tcp_process+0x30e>
 8014f06:	2300      	movs	r3, #0
 8014f08:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8014f0a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014f0e:	f113 0f0d 	cmn.w	r3, #13
 8014f12:	d102      	bne.n	8014f1a <tcp_process+0x31e>
          return ERR_ABRT;
 8014f14:	f06f 030c 	mvn.w	r3, #12
 8014f18:	e250      	b.n	80153bc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	8b5b      	ldrh	r3, [r3, #26]
 8014f1e:	f043 0302 	orr.w	r3, r3, #2
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014f28:	e23a      	b.n	80153a0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014f2a:	4b98      	ldr	r3, [pc, #608]	@ (801518c <tcp_process+0x590>)
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	f003 0310 	and.w	r3, r3, #16
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	f000 8234 	beq.w	80153a0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f38:	4b95      	ldr	r3, [pc, #596]	@ (8015190 <tcp_process+0x594>)
 8014f3a:	6819      	ldr	r1, [r3, #0]
 8014f3c:	4b95      	ldr	r3, [pc, #596]	@ (8015194 <tcp_process+0x598>)
 8014f3e:	881b      	ldrh	r3, [r3, #0]
 8014f40:	461a      	mov	r2, r3
 8014f42:	4b95      	ldr	r3, [pc, #596]	@ (8015198 <tcp_process+0x59c>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f48:	4b94      	ldr	r3, [pc, #592]	@ (801519c <tcp_process+0x5a0>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f4c:	885b      	ldrh	r3, [r3, #2]
 8014f4e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f50:	4a92      	ldr	r2, [pc, #584]	@ (801519c <tcp_process+0x5a0>)
 8014f52:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f54:	8812      	ldrh	r2, [r2, #0]
 8014f56:	b292      	uxth	r2, r2
 8014f58:	9202      	str	r2, [sp, #8]
 8014f5a:	9301      	str	r3, [sp, #4]
 8014f5c:	4b90      	ldr	r3, [pc, #576]	@ (80151a0 <tcp_process+0x5a4>)
 8014f5e:	9300      	str	r3, [sp, #0]
 8014f60:	4b90      	ldr	r3, [pc, #576]	@ (80151a4 <tcp_process+0x5a8>)
 8014f62:	4602      	mov	r2, r0
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f003 f945 	bl	80181f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014f70:	2b05      	cmp	r3, #5
 8014f72:	f200 8215 	bhi.w	80153a0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f002 ff11 	bl	8017da4 <tcp_rexmit_rto>
      break;
 8014f82:	e20d      	b.n	80153a0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014f84:	4b81      	ldr	r3, [pc, #516]	@ (801518c <tcp_process+0x590>)
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	f003 0310 	and.w	r3, r3, #16
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	f000 80a1 	beq.w	80150d4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f92:	4b7f      	ldr	r3, [pc, #508]	@ (8015190 <tcp_process+0x594>)
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f9a:	1ad3      	subs	r3, r2, r3
 8014f9c:	3b01      	subs	r3, #1
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	db7e      	blt.n	80150a0 <tcp_process+0x4a4>
 8014fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8015190 <tcp_process+0x594>)
 8014fa4:	681a      	ldr	r2, [r3, #0]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014faa:	1ad3      	subs	r3, r2, r3
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	dc77      	bgt.n	80150a0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2204      	movs	r2, #4
 8014fb4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d102      	bne.n	8014fc4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014fbe:	23fa      	movs	r3, #250	@ 0xfa
 8014fc0:	77bb      	strb	r3, [r7, #30]
 8014fc2:	e01d      	b.n	8015000 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014fc8:	699b      	ldr	r3, [r3, #24]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d106      	bne.n	8014fdc <tcp_process+0x3e0>
 8014fce:	4b76      	ldr	r3, [pc, #472]	@ (80151a8 <tcp_process+0x5ac>)
 8014fd0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8014fd4:	4975      	ldr	r1, [pc, #468]	@ (80151ac <tcp_process+0x5b0>)
 8014fd6:	4876      	ldr	r0, [pc, #472]	@ (80151b0 <tcp_process+0x5b4>)
 8014fd8:	f007 fb3a 	bl	801c650 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014fe0:	699b      	ldr	r3, [r3, #24]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d00a      	beq.n	8014ffc <tcp_process+0x400>
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014fea:	699b      	ldr	r3, [r3, #24]
 8014fec:	687a      	ldr	r2, [r7, #4]
 8014fee:	6910      	ldr	r0, [r2, #16]
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	6879      	ldr	r1, [r7, #4]
 8014ff4:	4798      	blx	r3
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	77bb      	strb	r3, [r7, #30]
 8014ffa:	e001      	b.n	8015000 <tcp_process+0x404>
 8014ffc:	23f0      	movs	r3, #240	@ 0xf0
 8014ffe:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8015000:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d00a      	beq.n	801501e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015008:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801500c:	f113 0f0d 	cmn.w	r3, #13
 8015010:	d002      	beq.n	8015018 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f7fd fcc2 	bl	801299c <tcp_abort>
            }
            return ERR_ABRT;
 8015018:	f06f 030c 	mvn.w	r3, #12
 801501c:	e1ce      	b.n	80153bc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f000 fae0 	bl	80155e4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015024:	4b63      	ldr	r3, [pc, #396]	@ (80151b4 <tcp_process+0x5b8>)
 8015026:	881b      	ldrh	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d005      	beq.n	8015038 <tcp_process+0x43c>
            recv_acked--;
 801502c:	4b61      	ldr	r3, [pc, #388]	@ (80151b4 <tcp_process+0x5b8>)
 801502e:	881b      	ldrh	r3, [r3, #0]
 8015030:	3b01      	subs	r3, #1
 8015032:	b29a      	uxth	r2, r3
 8015034:	4b5f      	ldr	r3, [pc, #380]	@ (80151b4 <tcp_process+0x5b8>)
 8015036:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801503c:	009a      	lsls	r2, r3, #2
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015042:	005b      	lsls	r3, r3, #1
 8015044:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015048:	428b      	cmp	r3, r1
 801504a:	bf38      	it	cc
 801504c:	460b      	movcc	r3, r1
 801504e:	429a      	cmp	r2, r3
 8015050:	d204      	bcs.n	801505c <tcp_process+0x460>
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015056:	009b      	lsls	r3, r3, #2
 8015058:	b29b      	uxth	r3, r3
 801505a:	e00d      	b.n	8015078 <tcp_process+0x47c>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015060:	005b      	lsls	r3, r3, #1
 8015062:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015066:	4293      	cmp	r3, r2
 8015068:	d904      	bls.n	8015074 <tcp_process+0x478>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801506e:	005b      	lsls	r3, r3, #1
 8015070:	b29b      	uxth	r3, r3
 8015072:	e001      	b.n	8015078 <tcp_process+0x47c>
 8015074:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015078:	687a      	ldr	r2, [r7, #4]
 801507a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801507e:	4b4e      	ldr	r3, [pc, #312]	@ (80151b8 <tcp_process+0x5bc>)
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	f003 0320 	and.w	r3, r3, #32
 8015086:	2b00      	cmp	r3, #0
 8015088:	d037      	beq.n	80150fa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	8b5b      	ldrh	r3, [r3, #26]
 801508e:	f043 0302 	orr.w	r3, r3, #2
 8015092:	b29a      	uxth	r2, r3
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2207      	movs	r2, #7
 801509c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801509e:	e02c      	b.n	80150fa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150a0:	4b3b      	ldr	r3, [pc, #236]	@ (8015190 <tcp_process+0x594>)
 80150a2:	6819      	ldr	r1, [r3, #0]
 80150a4:	4b3b      	ldr	r3, [pc, #236]	@ (8015194 <tcp_process+0x598>)
 80150a6:	881b      	ldrh	r3, [r3, #0]
 80150a8:	461a      	mov	r2, r3
 80150aa:	4b3b      	ldr	r3, [pc, #236]	@ (8015198 <tcp_process+0x59c>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150b0:	4b3a      	ldr	r3, [pc, #232]	@ (801519c <tcp_process+0x5a0>)
 80150b2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150b4:	885b      	ldrh	r3, [r3, #2]
 80150b6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150b8:	4a38      	ldr	r2, [pc, #224]	@ (801519c <tcp_process+0x5a0>)
 80150ba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150bc:	8812      	ldrh	r2, [r2, #0]
 80150be:	b292      	uxth	r2, r2
 80150c0:	9202      	str	r2, [sp, #8]
 80150c2:	9301      	str	r3, [sp, #4]
 80150c4:	4b36      	ldr	r3, [pc, #216]	@ (80151a0 <tcp_process+0x5a4>)
 80150c6:	9300      	str	r3, [sp, #0]
 80150c8:	4b36      	ldr	r3, [pc, #216]	@ (80151a4 <tcp_process+0x5a8>)
 80150ca:	4602      	mov	r2, r0
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f003 f891 	bl	80181f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80150d2:	e167      	b.n	80153a4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80150d4:	4b2d      	ldr	r3, [pc, #180]	@ (801518c <tcp_process+0x590>)
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	f003 0302 	and.w	r3, r3, #2
 80150dc:	2b00      	cmp	r3, #0
 80150de:	f000 8161 	beq.w	80153a4 <tcp_process+0x7a8>
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150e6:	1e5a      	subs	r2, r3, #1
 80150e8:	4b2b      	ldr	r3, [pc, #172]	@ (8015198 <tcp_process+0x59c>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	f040 8159 	bne.w	80153a4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f002 fe78 	bl	8017de8 <tcp_rexmit>
      break;
 80150f8:	e154      	b.n	80153a4 <tcp_process+0x7a8>
 80150fa:	e153      	b.n	80153a4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 fa71 	bl	80155e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015102:	4b2d      	ldr	r3, [pc, #180]	@ (80151b8 <tcp_process+0x5bc>)
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	f003 0320 	and.w	r3, r3, #32
 801510a:	2b00      	cmp	r3, #0
 801510c:	f000 814c 	beq.w	80153a8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	8b5b      	ldrh	r3, [r3, #26]
 8015114:	f043 0302 	orr.w	r3, r3, #2
 8015118:	b29a      	uxth	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2207      	movs	r2, #7
 8015122:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015124:	e140      	b.n	80153a8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015126:	6878      	ldr	r0, [r7, #4]
 8015128:	f000 fa5c 	bl	80155e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801512c:	4b22      	ldr	r3, [pc, #136]	@ (80151b8 <tcp_process+0x5bc>)
 801512e:	781b      	ldrb	r3, [r3, #0]
 8015130:	f003 0320 	and.w	r3, r3, #32
 8015134:	2b00      	cmp	r3, #0
 8015136:	d071      	beq.n	801521c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015138:	4b14      	ldr	r3, [pc, #80]	@ (801518c <tcp_process+0x590>)
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	f003 0310 	and.w	r3, r3, #16
 8015140:	2b00      	cmp	r3, #0
 8015142:	d060      	beq.n	8015206 <tcp_process+0x60a>
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015148:	4b11      	ldr	r3, [pc, #68]	@ (8015190 <tcp_process+0x594>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	429a      	cmp	r2, r3
 801514e:	d15a      	bne.n	8015206 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015154:	2b00      	cmp	r3, #0
 8015156:	d156      	bne.n	8015206 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	8b5b      	ldrh	r3, [r3, #26]
 801515c:	f043 0302 	orr.w	r3, r3, #2
 8015160:	b29a      	uxth	r2, r3
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f7fe fdb6 	bl	8013cd8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801516c:	4b13      	ldr	r3, [pc, #76]	@ (80151bc <tcp_process+0x5c0>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	429a      	cmp	r2, r3
 8015174:	d105      	bne.n	8015182 <tcp_process+0x586>
 8015176:	4b11      	ldr	r3, [pc, #68]	@ (80151bc <tcp_process+0x5c0>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	68db      	ldr	r3, [r3, #12]
 801517c:	4a0f      	ldr	r2, [pc, #60]	@ (80151bc <tcp_process+0x5c0>)
 801517e:	6013      	str	r3, [r2, #0]
 8015180:	e02e      	b.n	80151e0 <tcp_process+0x5e4>
 8015182:	4b0e      	ldr	r3, [pc, #56]	@ (80151bc <tcp_process+0x5c0>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	613b      	str	r3, [r7, #16]
 8015188:	e027      	b.n	80151da <tcp_process+0x5de>
 801518a:	bf00      	nop
 801518c:	200227e4 	.word	0x200227e4
 8015190:	200227dc 	.word	0x200227dc
 8015194:	200227e2 	.word	0x200227e2
 8015198:	200227d8 	.word	0x200227d8
 801519c:	200227c8 	.word	0x200227c8
 80151a0:	2001f66c 	.word	0x2001f66c
 80151a4:	2001f670 	.word	0x2001f670
 80151a8:	0801f864 	.word	0x0801f864
 80151ac:	0801fb04 	.word	0x0801fb04
 80151b0:	0801f8b0 	.word	0x0801f8b0
 80151b4:	200227e0 	.word	0x200227e0
 80151b8:	200227e5 	.word	0x200227e5
 80151bc:	200227a8 	.word	0x200227a8
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	68db      	ldr	r3, [r3, #12]
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d104      	bne.n	80151d4 <tcp_process+0x5d8>
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	68da      	ldr	r2, [r3, #12]
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	60da      	str	r2, [r3, #12]
 80151d2:	e005      	b.n	80151e0 <tcp_process+0x5e4>
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	613b      	str	r3, [r7, #16]
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d1ef      	bne.n	80151c0 <tcp_process+0x5c4>
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2200      	movs	r2, #0
 80151e4:	60da      	str	r2, [r3, #12]
 80151e6:	4b77      	ldr	r3, [pc, #476]	@ (80153c4 <tcp_process+0x7c8>)
 80151e8:	2201      	movs	r2, #1
 80151ea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	220a      	movs	r2, #10
 80151f0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80151f2:	4b75      	ldr	r3, [pc, #468]	@ (80153c8 <tcp_process+0x7cc>)
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	60da      	str	r2, [r3, #12]
 80151fa:	4a73      	ldr	r2, [pc, #460]	@ (80153c8 <tcp_process+0x7cc>)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6013      	str	r3, [r2, #0]
 8015200:	f003 f9ba 	bl	8018578 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015204:	e0d2      	b.n	80153ac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	8b5b      	ldrh	r3, [r3, #26]
 801520a:	f043 0302 	orr.w	r3, r3, #2
 801520e:	b29a      	uxth	r2, r3
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2208      	movs	r2, #8
 8015218:	751a      	strb	r2, [r3, #20]
      break;
 801521a:	e0c7      	b.n	80153ac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801521c:	4b6b      	ldr	r3, [pc, #428]	@ (80153cc <tcp_process+0x7d0>)
 801521e:	781b      	ldrb	r3, [r3, #0]
 8015220:	f003 0310 	and.w	r3, r3, #16
 8015224:	2b00      	cmp	r3, #0
 8015226:	f000 80c1 	beq.w	80153ac <tcp_process+0x7b0>
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801522e:	4b68      	ldr	r3, [pc, #416]	@ (80153d0 <tcp_process+0x7d4>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	429a      	cmp	r2, r3
 8015234:	f040 80ba 	bne.w	80153ac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801523c:	2b00      	cmp	r3, #0
 801523e:	f040 80b5 	bne.w	80153ac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	2206      	movs	r2, #6
 8015246:	751a      	strb	r2, [r3, #20]
      break;
 8015248:	e0b0      	b.n	80153ac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f000 f9ca 	bl	80155e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015250:	4b60      	ldr	r3, [pc, #384]	@ (80153d4 <tcp_process+0x7d8>)
 8015252:	781b      	ldrb	r3, [r3, #0]
 8015254:	f003 0320 	and.w	r3, r3, #32
 8015258:	2b00      	cmp	r3, #0
 801525a:	f000 80a9 	beq.w	80153b0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	8b5b      	ldrh	r3, [r3, #26]
 8015262:	f043 0302 	orr.w	r3, r3, #2
 8015266:	b29a      	uxth	r2, r3
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f7fe fd33 	bl	8013cd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015272:	4b59      	ldr	r3, [pc, #356]	@ (80153d8 <tcp_process+0x7dc>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	687a      	ldr	r2, [r7, #4]
 8015278:	429a      	cmp	r2, r3
 801527a:	d105      	bne.n	8015288 <tcp_process+0x68c>
 801527c:	4b56      	ldr	r3, [pc, #344]	@ (80153d8 <tcp_process+0x7dc>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	68db      	ldr	r3, [r3, #12]
 8015282:	4a55      	ldr	r2, [pc, #340]	@ (80153d8 <tcp_process+0x7dc>)
 8015284:	6013      	str	r3, [r2, #0]
 8015286:	e013      	b.n	80152b0 <tcp_process+0x6b4>
 8015288:	4b53      	ldr	r3, [pc, #332]	@ (80153d8 <tcp_process+0x7dc>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	60fb      	str	r3, [r7, #12]
 801528e:	e00c      	b.n	80152aa <tcp_process+0x6ae>
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	68db      	ldr	r3, [r3, #12]
 8015294:	687a      	ldr	r2, [r7, #4]
 8015296:	429a      	cmp	r2, r3
 8015298:	d104      	bne.n	80152a4 <tcp_process+0x6a8>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	68da      	ldr	r2, [r3, #12]
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	60da      	str	r2, [r3, #12]
 80152a2:	e005      	b.n	80152b0 <tcp_process+0x6b4>
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	68db      	ldr	r3, [r3, #12]
 80152a8:	60fb      	str	r3, [r7, #12]
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d1ef      	bne.n	8015290 <tcp_process+0x694>
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	2200      	movs	r2, #0
 80152b4:	60da      	str	r2, [r3, #12]
 80152b6:	4b43      	ldr	r3, [pc, #268]	@ (80153c4 <tcp_process+0x7c8>)
 80152b8:	2201      	movs	r2, #1
 80152ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	220a      	movs	r2, #10
 80152c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80152c2:	4b41      	ldr	r3, [pc, #260]	@ (80153c8 <tcp_process+0x7cc>)
 80152c4:	681a      	ldr	r2, [r3, #0]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	60da      	str	r2, [r3, #12]
 80152ca:	4a3f      	ldr	r2, [pc, #252]	@ (80153c8 <tcp_process+0x7cc>)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6013      	str	r3, [r2, #0]
 80152d0:	f003 f952 	bl	8018578 <tcp_timer_needed>
      }
      break;
 80152d4:	e06c      	b.n	80153b0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f000 f984 	bl	80155e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80152dc:	4b3b      	ldr	r3, [pc, #236]	@ (80153cc <tcp_process+0x7d0>)
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	f003 0310 	and.w	r3, r3, #16
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d065      	beq.n	80153b4 <tcp_process+0x7b8>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80152ec:	4b38      	ldr	r3, [pc, #224]	@ (80153d0 <tcp_process+0x7d4>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d15f      	bne.n	80153b4 <tcp_process+0x7b8>
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d15b      	bne.n	80153b4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f7fe fceb 	bl	8013cd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015302:	4b35      	ldr	r3, [pc, #212]	@ (80153d8 <tcp_process+0x7dc>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	429a      	cmp	r2, r3
 801530a:	d105      	bne.n	8015318 <tcp_process+0x71c>
 801530c:	4b32      	ldr	r3, [pc, #200]	@ (80153d8 <tcp_process+0x7dc>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	68db      	ldr	r3, [r3, #12]
 8015312:	4a31      	ldr	r2, [pc, #196]	@ (80153d8 <tcp_process+0x7dc>)
 8015314:	6013      	str	r3, [r2, #0]
 8015316:	e013      	b.n	8015340 <tcp_process+0x744>
 8015318:	4b2f      	ldr	r3, [pc, #188]	@ (80153d8 <tcp_process+0x7dc>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	61bb      	str	r3, [r7, #24]
 801531e:	e00c      	b.n	801533a <tcp_process+0x73e>
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	68db      	ldr	r3, [r3, #12]
 8015324:	687a      	ldr	r2, [r7, #4]
 8015326:	429a      	cmp	r2, r3
 8015328:	d104      	bne.n	8015334 <tcp_process+0x738>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	68da      	ldr	r2, [r3, #12]
 801532e:	69bb      	ldr	r3, [r7, #24]
 8015330:	60da      	str	r2, [r3, #12]
 8015332:	e005      	b.n	8015340 <tcp_process+0x744>
 8015334:	69bb      	ldr	r3, [r7, #24]
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	61bb      	str	r3, [r7, #24]
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d1ef      	bne.n	8015320 <tcp_process+0x724>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	2200      	movs	r2, #0
 8015344:	60da      	str	r2, [r3, #12]
 8015346:	4b1f      	ldr	r3, [pc, #124]	@ (80153c4 <tcp_process+0x7c8>)
 8015348:	2201      	movs	r2, #1
 801534a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	220a      	movs	r2, #10
 8015350:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015352:	4b1d      	ldr	r3, [pc, #116]	@ (80153c8 <tcp_process+0x7cc>)
 8015354:	681a      	ldr	r2, [r3, #0]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	60da      	str	r2, [r3, #12]
 801535a:	4a1b      	ldr	r2, [pc, #108]	@ (80153c8 <tcp_process+0x7cc>)
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6013      	str	r3, [r2, #0]
 8015360:	f003 f90a 	bl	8018578 <tcp_timer_needed>
      }
      break;
 8015364:	e026      	b.n	80153b4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f000 f93c 	bl	80155e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801536c:	4b17      	ldr	r3, [pc, #92]	@ (80153cc <tcp_process+0x7d0>)
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	f003 0310 	and.w	r3, r3, #16
 8015374:	2b00      	cmp	r3, #0
 8015376:	d01f      	beq.n	80153b8 <tcp_process+0x7bc>
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801537c:	4b14      	ldr	r3, [pc, #80]	@ (80153d0 <tcp_process+0x7d4>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	429a      	cmp	r2, r3
 8015382:	d119      	bne.n	80153b8 <tcp_process+0x7bc>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015388:	2b00      	cmp	r3, #0
 801538a:	d115      	bne.n	80153b8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801538c:	4b11      	ldr	r3, [pc, #68]	@ (80153d4 <tcp_process+0x7d8>)
 801538e:	781b      	ldrb	r3, [r3, #0]
 8015390:	f043 0310 	orr.w	r3, r3, #16
 8015394:	b2da      	uxtb	r2, r3
 8015396:	4b0f      	ldr	r3, [pc, #60]	@ (80153d4 <tcp_process+0x7d8>)
 8015398:	701a      	strb	r2, [r3, #0]
      }
      break;
 801539a:	e00d      	b.n	80153b8 <tcp_process+0x7bc>
    default:
      break;
 801539c:	bf00      	nop
 801539e:	e00c      	b.n	80153ba <tcp_process+0x7be>
      break;
 80153a0:	bf00      	nop
 80153a2:	e00a      	b.n	80153ba <tcp_process+0x7be>
      break;
 80153a4:	bf00      	nop
 80153a6:	e008      	b.n	80153ba <tcp_process+0x7be>
      break;
 80153a8:	bf00      	nop
 80153aa:	e006      	b.n	80153ba <tcp_process+0x7be>
      break;
 80153ac:	bf00      	nop
 80153ae:	e004      	b.n	80153ba <tcp_process+0x7be>
      break;
 80153b0:	bf00      	nop
 80153b2:	e002      	b.n	80153ba <tcp_process+0x7be>
      break;
 80153b4:	bf00      	nop
 80153b6:	e000      	b.n	80153ba <tcp_process+0x7be>
      break;
 80153b8:	bf00      	nop
  }
  return ERR_OK;
 80153ba:	2300      	movs	r3, #0
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3724      	adds	r7, #36	@ 0x24
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd90      	pop	{r4, r7, pc}
 80153c4:	200227b0 	.word	0x200227b0
 80153c8:	200227ac 	.word	0x200227ac
 80153cc:	200227e4 	.word	0x200227e4
 80153d0:	200227dc 	.word	0x200227dc
 80153d4:	200227e5 	.word	0x200227e5
 80153d8:	200227a8 	.word	0x200227a8

080153dc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80153dc:	b590      	push	{r4, r7, lr}
 80153de:	b085      	sub	sp, #20
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d106      	bne.n	80153fa <tcp_oos_insert_segment+0x1e>
 80153ec:	4b3b      	ldr	r3, [pc, #236]	@ (80154dc <tcp_oos_insert_segment+0x100>)
 80153ee:	f240 421f 	movw	r2, #1055	@ 0x41f
 80153f2:	493b      	ldr	r1, [pc, #236]	@ (80154e0 <tcp_oos_insert_segment+0x104>)
 80153f4:	483b      	ldr	r0, [pc, #236]	@ (80154e4 <tcp_oos_insert_segment+0x108>)
 80153f6:	f007 f92b 	bl	801c650 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	899b      	ldrh	r3, [r3, #12]
 8015400:	b29b      	uxth	r3, r3
 8015402:	4618      	mov	r0, r3
 8015404:	f7fa ffe6 	bl	80103d4 <lwip_htons>
 8015408:	4603      	mov	r3, r0
 801540a:	b2db      	uxtb	r3, r3
 801540c:	f003 0301 	and.w	r3, r3, #1
 8015410:	2b00      	cmp	r3, #0
 8015412:	d028      	beq.n	8015466 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015414:	6838      	ldr	r0, [r7, #0]
 8015416:	f7fe f98f 	bl	8013738 <tcp_segs_free>
    next = NULL;
 801541a:	2300      	movs	r3, #0
 801541c:	603b      	str	r3, [r7, #0]
 801541e:	e056      	b.n	80154ce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	691b      	ldr	r3, [r3, #16]
 8015424:	899b      	ldrh	r3, [r3, #12]
 8015426:	b29b      	uxth	r3, r3
 8015428:	4618      	mov	r0, r3
 801542a:	f7fa ffd3 	bl	80103d4 <lwip_htons>
 801542e:	4603      	mov	r3, r0
 8015430:	b2db      	uxtb	r3, r3
 8015432:	f003 0301 	and.w	r3, r3, #1
 8015436:	2b00      	cmp	r3, #0
 8015438:	d00d      	beq.n	8015456 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	691b      	ldr	r3, [r3, #16]
 801543e:	899b      	ldrh	r3, [r3, #12]
 8015440:	b29c      	uxth	r4, r3
 8015442:	2001      	movs	r0, #1
 8015444:	f7fa ffc6 	bl	80103d4 <lwip_htons>
 8015448:	4603      	mov	r3, r0
 801544a:	461a      	mov	r2, r3
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	691b      	ldr	r3, [r3, #16]
 8015450:	4322      	orrs	r2, r4
 8015452:	b292      	uxth	r2, r2
 8015454:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015456:	683b      	ldr	r3, [r7, #0]
 8015458:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015460:	68f8      	ldr	r0, [r7, #12]
 8015462:	f7fe f97e 	bl	8013762 <tcp_seg_free>
    while (next &&
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d00e      	beq.n	801548a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	891b      	ldrh	r3, [r3, #8]
 8015470:	461a      	mov	r2, r3
 8015472:	4b1d      	ldr	r3, [pc, #116]	@ (80154e8 <tcp_oos_insert_segment+0x10c>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	441a      	add	r2, r3
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	691b      	ldr	r3, [r3, #16]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	6839      	ldr	r1, [r7, #0]
 8015480:	8909      	ldrh	r1, [r1, #8]
 8015482:	440b      	add	r3, r1
 8015484:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015486:	2b00      	cmp	r3, #0
 8015488:	daca      	bge.n	8015420 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d01e      	beq.n	80154ce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	891b      	ldrh	r3, [r3, #8]
 8015494:	461a      	mov	r2, r3
 8015496:	4b14      	ldr	r3, [pc, #80]	@ (80154e8 <tcp_oos_insert_segment+0x10c>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	441a      	add	r2, r3
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	691b      	ldr	r3, [r3, #16]
 80154a0:	685b      	ldr	r3, [r3, #4]
 80154a2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	dd12      	ble.n	80154ce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	691b      	ldr	r3, [r3, #16]
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	b29a      	uxth	r2, r3
 80154b0:	4b0d      	ldr	r3, [pc, #52]	@ (80154e8 <tcp_oos_insert_segment+0x10c>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	b29b      	uxth	r3, r3
 80154b6:	1ad3      	subs	r3, r2, r3
 80154b8:	b29a      	uxth	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	685a      	ldr	r2, [r3, #4]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	891b      	ldrh	r3, [r3, #8]
 80154c6:	4619      	mov	r1, r3
 80154c8:	4610      	mov	r0, r2
 80154ca:	f7fc fae1 	bl	8011a90 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	683a      	ldr	r2, [r7, #0]
 80154d2:	601a      	str	r2, [r3, #0]
}
 80154d4:	bf00      	nop
 80154d6:	3714      	adds	r7, #20
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd90      	pop	{r4, r7, pc}
 80154dc:	0801f864 	.word	0x0801f864
 80154e0:	0801fb24 	.word	0x0801fb24
 80154e4:	0801f8b0 	.word	0x0801f8b0
 80154e8:	200227d8 	.word	0x200227d8

080154ec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80154ec:	b5b0      	push	{r4, r5, r7, lr}
 80154ee:	b086      	sub	sp, #24
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	60f8      	str	r0, [r7, #12]
 80154f4:	60b9      	str	r1, [r7, #8]
 80154f6:	607a      	str	r2, [r7, #4]
 80154f8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80154fa:	e03e      	b.n	801557a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	4618      	mov	r0, r3
 801550c:	f7fc fcd4 	bl	8011eb8 <pbuf_clen>
 8015510:	4603      	mov	r3, r0
 8015512:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801551a:	8a7a      	ldrh	r2, [r7, #18]
 801551c:	429a      	cmp	r2, r3
 801551e:	d906      	bls.n	801552e <tcp_free_acked_segments+0x42>
 8015520:	4b2a      	ldr	r3, [pc, #168]	@ (80155cc <tcp_free_acked_segments+0xe0>)
 8015522:	f240 4257 	movw	r2, #1111	@ 0x457
 8015526:	492a      	ldr	r1, [pc, #168]	@ (80155d0 <tcp_free_acked_segments+0xe4>)
 8015528:	482a      	ldr	r0, [pc, #168]	@ (80155d4 <tcp_free_acked_segments+0xe8>)
 801552a:	f007 f891 	bl	801c650 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8015534:	8a7b      	ldrh	r3, [r7, #18]
 8015536:	1ad3      	subs	r3, r2, r3
 8015538:	b29a      	uxth	r2, r3
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	891a      	ldrh	r2, [r3, #8]
 8015544:	4b24      	ldr	r3, [pc, #144]	@ (80155d8 <tcp_free_acked_segments+0xec>)
 8015546:	881b      	ldrh	r3, [r3, #0]
 8015548:	4413      	add	r3, r2
 801554a:	b29a      	uxth	r2, r3
 801554c:	4b22      	ldr	r3, [pc, #136]	@ (80155d8 <tcp_free_acked_segments+0xec>)
 801554e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015550:	6978      	ldr	r0, [r7, #20]
 8015552:	f7fe f906 	bl	8013762 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00c      	beq.n	801557a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d109      	bne.n	801557a <tcp_free_acked_segments+0x8e>
 8015566:	683b      	ldr	r3, [r7, #0]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d106      	bne.n	801557a <tcp_free_acked_segments+0x8e>
 801556c:	4b17      	ldr	r3, [pc, #92]	@ (80155cc <tcp_free_acked_segments+0xe0>)
 801556e:	f240 4261 	movw	r2, #1121	@ 0x461
 8015572:	491a      	ldr	r1, [pc, #104]	@ (80155dc <tcp_free_acked_segments+0xf0>)
 8015574:	4817      	ldr	r0, [pc, #92]	@ (80155d4 <tcp_free_acked_segments+0xe8>)
 8015576:	f007 f86b 	bl	801c650 <iprintf>
  while (seg_list != NULL &&
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d020      	beq.n	80155c2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	691b      	ldr	r3, [r3, #16]
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	4618      	mov	r0, r3
 8015588:	f7fa ff3a 	bl	8010400 <lwip_htonl>
 801558c:	4604      	mov	r4, r0
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	891b      	ldrh	r3, [r3, #8]
 8015592:	461d      	mov	r5, r3
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	691b      	ldr	r3, [r3, #16]
 8015598:	899b      	ldrh	r3, [r3, #12]
 801559a:	b29b      	uxth	r3, r3
 801559c:	4618      	mov	r0, r3
 801559e:	f7fa ff19 	bl	80103d4 <lwip_htons>
 80155a2:	4603      	mov	r3, r0
 80155a4:	b2db      	uxtb	r3, r3
 80155a6:	f003 0303 	and.w	r3, r3, #3
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d001      	beq.n	80155b2 <tcp_free_acked_segments+0xc6>
 80155ae:	2301      	movs	r3, #1
 80155b0:	e000      	b.n	80155b4 <tcp_free_acked_segments+0xc8>
 80155b2:	2300      	movs	r3, #0
 80155b4:	442b      	add	r3, r5
 80155b6:	18e2      	adds	r2, r4, r3
 80155b8:	4b09      	ldr	r3, [pc, #36]	@ (80155e0 <tcp_free_acked_segments+0xf4>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80155be:	2b00      	cmp	r3, #0
 80155c0:	dd9c      	ble.n	80154fc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80155c2:	68bb      	ldr	r3, [r7, #8]
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	3718      	adds	r7, #24
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bdb0      	pop	{r4, r5, r7, pc}
 80155cc:	0801f864 	.word	0x0801f864
 80155d0:	0801fb4c 	.word	0x0801fb4c
 80155d4:	0801f8b0 	.word	0x0801f8b0
 80155d8:	200227e0 	.word	0x200227e0
 80155dc:	0801fb74 	.word	0x0801fb74
 80155e0:	200227dc 	.word	0x200227dc

080155e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80155e4:	b5b0      	push	{r4, r5, r7, lr}
 80155e6:	b094      	sub	sp, #80	@ 0x50
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80155ec:	2300      	movs	r3, #0
 80155ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d106      	bne.n	8015604 <tcp_receive+0x20>
 80155f6:	4b91      	ldr	r3, [pc, #580]	@ (801583c <tcp_receive+0x258>)
 80155f8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80155fc:	4990      	ldr	r1, [pc, #576]	@ (8015840 <tcp_receive+0x25c>)
 80155fe:	4891      	ldr	r0, [pc, #580]	@ (8015844 <tcp_receive+0x260>)
 8015600:	f007 f826 	bl	801c650 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	7d1b      	ldrb	r3, [r3, #20]
 8015608:	2b03      	cmp	r3, #3
 801560a:	d806      	bhi.n	801561a <tcp_receive+0x36>
 801560c:	4b8b      	ldr	r3, [pc, #556]	@ (801583c <tcp_receive+0x258>)
 801560e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8015612:	498d      	ldr	r1, [pc, #564]	@ (8015848 <tcp_receive+0x264>)
 8015614:	488b      	ldr	r0, [pc, #556]	@ (8015844 <tcp_receive+0x260>)
 8015616:	f007 f81b 	bl	801c650 <iprintf>

  if (flags & TCP_ACK) {
 801561a:	4b8c      	ldr	r3, [pc, #560]	@ (801584c <tcp_receive+0x268>)
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	f003 0310 	and.w	r3, r3, #16
 8015622:	2b00      	cmp	r3, #0
 8015624:	f000 8264 	beq.w	8015af0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801562e:	461a      	mov	r2, r3
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015634:	4413      	add	r3, r2
 8015636:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801563c:	4b84      	ldr	r3, [pc, #528]	@ (8015850 <tcp_receive+0x26c>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	1ad3      	subs	r3, r2, r3
 8015642:	2b00      	cmp	r3, #0
 8015644:	db1b      	blt.n	801567e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801564a:	4b81      	ldr	r3, [pc, #516]	@ (8015850 <tcp_receive+0x26c>)
 801564c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801564e:	429a      	cmp	r2, r3
 8015650:	d106      	bne.n	8015660 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015656:	4b7f      	ldr	r3, [pc, #508]	@ (8015854 <tcp_receive+0x270>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	1ad3      	subs	r3, r2, r3
 801565c:	2b00      	cmp	r3, #0
 801565e:	db0e      	blt.n	801567e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015664:	4b7b      	ldr	r3, [pc, #492]	@ (8015854 <tcp_receive+0x270>)
 8015666:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015668:	429a      	cmp	r2, r3
 801566a:	d125      	bne.n	80156b8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801566c:	4b7a      	ldr	r3, [pc, #488]	@ (8015858 <tcp_receive+0x274>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	89db      	ldrh	r3, [r3, #14]
 8015672:	b29a      	uxth	r2, r3
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801567a:	429a      	cmp	r2, r3
 801567c:	d91c      	bls.n	80156b8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801567e:	4b76      	ldr	r3, [pc, #472]	@ (8015858 <tcp_receive+0x274>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	89db      	ldrh	r3, [r3, #14]
 8015684:	b29a      	uxth	r2, r3
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015698:	429a      	cmp	r2, r3
 801569a:	d205      	bcs.n	80156a8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80156a8:	4b69      	ldr	r3, [pc, #420]	@ (8015850 <tcp_receive+0x26c>)
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80156b0:	4b68      	ldr	r3, [pc, #416]	@ (8015854 <tcp_receive+0x270>)
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80156b8:	4b66      	ldr	r3, [pc, #408]	@ (8015854 <tcp_receive+0x270>)
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156c0:	1ad3      	subs	r3, r2, r3
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	dc58      	bgt.n	8015778 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80156c6:	4b65      	ldr	r3, [pc, #404]	@ (801585c <tcp_receive+0x278>)
 80156c8:	881b      	ldrh	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d14b      	bne.n	8015766 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80156d8:	4413      	add	r3, r2
 80156da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156dc:	429a      	cmp	r2, r3
 80156de:	d142      	bne.n	8015766 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	db3d      	blt.n	8015766 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80156ee:	4b59      	ldr	r3, [pc, #356]	@ (8015854 <tcp_receive+0x270>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	429a      	cmp	r2, r3
 80156f4:	d137      	bne.n	8015766 <tcp_receive+0x182>
              found_dupack = 1;
 80156f6:	2301      	movs	r3, #1
 80156f8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015700:	2bff      	cmp	r3, #255	@ 0xff
 8015702:	d007      	beq.n	8015714 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801570a:	3301      	adds	r3, #1
 801570c:	b2da      	uxtb	r2, r3
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801571a:	2b03      	cmp	r3, #3
 801571c:	d91b      	bls.n	8015756 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015728:	4413      	add	r3, r2
 801572a:	b29a      	uxth	r2, r3
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015732:	429a      	cmp	r2, r3
 8015734:	d30a      	bcc.n	801574c <tcp_receive+0x168>
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015740:	4413      	add	r3, r2
 8015742:	b29a      	uxth	r2, r3
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801574a:	e004      	b.n	8015756 <tcp_receive+0x172>
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015752:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801575c:	2b02      	cmp	r3, #2
 801575e:	d902      	bls.n	8015766 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f002 fbad 	bl	8017ec0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015768:	2b00      	cmp	r3, #0
 801576a:	f040 8161 	bne.w	8015a30 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2200      	movs	r2, #0
 8015772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015776:	e15b      	b.n	8015a30 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015778:	4b36      	ldr	r3, [pc, #216]	@ (8015854 <tcp_receive+0x270>)
 801577a:	681a      	ldr	r2, [r3, #0]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015780:	1ad3      	subs	r3, r2, r3
 8015782:	3b01      	subs	r3, #1
 8015784:	2b00      	cmp	r3, #0
 8015786:	f2c0 814e 	blt.w	8015a26 <tcp_receive+0x442>
 801578a:	4b32      	ldr	r3, [pc, #200]	@ (8015854 <tcp_receive+0x270>)
 801578c:	681a      	ldr	r2, [r3, #0]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015792:	1ad3      	subs	r3, r2, r3
 8015794:	2b00      	cmp	r3, #0
 8015796:	f300 8146 	bgt.w	8015a26 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	8b5b      	ldrh	r3, [r3, #26]
 801579e:	f003 0304 	and.w	r3, r3, #4
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d010      	beq.n	80157c8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	8b5b      	ldrh	r3, [r3, #26]
 80157aa:	f023 0304 	bic.w	r3, r3, #4
 80157ae:	b29a      	uxth	r2, r3
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2200      	movs	r2, #0
 80157c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2200      	movs	r2, #0
 80157cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80157d6:	10db      	asrs	r3, r3, #3
 80157d8:	b21b      	sxth	r3, r3
 80157da:	b29a      	uxth	r2, r3
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	4413      	add	r3, r2
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	b21a      	sxth	r2, r3
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80157f0:	4b18      	ldr	r3, [pc, #96]	@ (8015854 <tcp_receive+0x270>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	b29a      	uxth	r2, r3
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157fa:	b29b      	uxth	r3, r3
 80157fc:	1ad3      	subs	r3, r2, r3
 80157fe:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	2200      	movs	r2, #0
 8015804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015808:	4b12      	ldr	r3, [pc, #72]	@ (8015854 <tcp_receive+0x270>)
 801580a:	681a      	ldr	r2, [r3, #0]
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	7d1b      	ldrb	r3, [r3, #20]
 8015814:	2b03      	cmp	r3, #3
 8015816:	f240 8097 	bls.w	8015948 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015826:	429a      	cmp	r2, r3
 8015828:	d245      	bcs.n	80158b6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	8b5b      	ldrh	r3, [r3, #26]
 801582e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015832:	2b00      	cmp	r3, #0
 8015834:	d014      	beq.n	8015860 <tcp_receive+0x27c>
 8015836:	2301      	movs	r3, #1
 8015838:	e013      	b.n	8015862 <tcp_receive+0x27e>
 801583a:	bf00      	nop
 801583c:	0801f864 	.word	0x0801f864
 8015840:	0801fb94 	.word	0x0801fb94
 8015844:	0801f8b0 	.word	0x0801f8b0
 8015848:	0801fbb0 	.word	0x0801fbb0
 801584c:	200227e4 	.word	0x200227e4
 8015850:	200227d8 	.word	0x200227d8
 8015854:	200227dc 	.word	0x200227dc
 8015858:	200227c8 	.word	0x200227c8
 801585c:	200227e2 	.word	0x200227e2
 8015860:	2302      	movs	r3, #2
 8015862:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015866:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801586a:	b29a      	uxth	r2, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015870:	fb12 f303 	smulbb	r3, r2, r3
 8015874:	b29b      	uxth	r3, r3
 8015876:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015878:	4293      	cmp	r3, r2
 801587a:	bf28      	it	cs
 801587c:	4613      	movcs	r3, r2
 801587e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015886:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015888:	4413      	add	r3, r2
 801588a:	b29a      	uxth	r2, r3
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015892:	429a      	cmp	r2, r3
 8015894:	d309      	bcc.n	80158aa <tcp_receive+0x2c6>
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801589c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801589e:	4413      	add	r3, r2
 80158a0:	b29a      	uxth	r2, r3
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80158a8:	e04e      	b.n	8015948 <tcp_receive+0x364>
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80158b4:	e048      	b.n	8015948 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80158bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80158be:	4413      	add	r3, r2
 80158c0:	b29a      	uxth	r2, r3
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d309      	bcc.n	80158e0 <tcp_receive+0x2fc>
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80158d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80158d4:	4413      	add	r3, r2
 80158d6:	b29a      	uxth	r2, r3
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80158de:	e004      	b.n	80158ea <tcp_receive+0x306>
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d326      	bcc.n	8015948 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015906:	1ad3      	subs	r3, r2, r3
 8015908:	b29a      	uxth	r2, r3
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801591a:	4413      	add	r3, r2
 801591c:	b29a      	uxth	r2, r3
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015924:	429a      	cmp	r2, r3
 8015926:	d30a      	bcc.n	801593e <tcp_receive+0x35a>
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015932:	4413      	add	r3, r2
 8015934:	b29a      	uxth	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801593c:	e004      	b.n	8015948 <tcp_receive+0x364>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015944:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015950:	4a98      	ldr	r2, [pc, #608]	@ (8015bb4 <tcp_receive+0x5d0>)
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f7ff fdca 	bl	80154ec <tcp_free_acked_segments>
 8015958:	4602      	mov	r2, r0
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015966:	4a94      	ldr	r2, [pc, #592]	@ (8015bb8 <tcp_receive+0x5d4>)
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f7ff fdbf 	bl	80154ec <tcp_free_acked_segments>
 801596e:	4602      	mov	r2, r0
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015978:	2b00      	cmp	r3, #0
 801597a:	d104      	bne.n	8015986 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015982:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015984:	e002      	b.n	801598c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	2200      	movs	r2, #0
 801598a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2200      	movs	r2, #0
 8015990:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015996:	2b00      	cmp	r3, #0
 8015998:	d103      	bne.n	80159a2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	2200      	movs	r2, #0
 801599e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80159a8:	4b84      	ldr	r3, [pc, #528]	@ (8015bbc <tcp_receive+0x5d8>)
 80159aa:	881b      	ldrh	r3, [r3, #0]
 80159ac:	4413      	add	r3, r2
 80159ae:	b29a      	uxth	r2, r3
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	8b5b      	ldrh	r3, [r3, #26]
 80159ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d035      	beq.n	8015a2e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d118      	bne.n	80159fc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d00c      	beq.n	80159ec <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80159da:	691b      	ldr	r3, [r3, #16]
 80159dc:	685b      	ldr	r3, [r3, #4]
 80159de:	4618      	mov	r0, r3
 80159e0:	f7fa fd0e 	bl	8010400 <lwip_htonl>
 80159e4:	4603      	mov	r3, r0
 80159e6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	dc20      	bgt.n	8015a2e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	8b5b      	ldrh	r3, [r3, #26]
 80159f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80159f4:	b29a      	uxth	r2, r3
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80159fa:	e018      	b.n	8015a2e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a04:	691b      	ldr	r3, [r3, #16]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7fa fcf9 	bl	8010400 <lwip_htonl>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	1ae3      	subs	r3, r4, r3
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	dc0b      	bgt.n	8015a2e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	8b5b      	ldrh	r3, [r3, #26]
 8015a1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015a1e:	b29a      	uxth	r2, r3
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015a24:	e003      	b.n	8015a2e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015a26:	6878      	ldr	r0, [r7, #4]
 8015a28:	f002 fc36 	bl	8018298 <tcp_send_empty_ack>
 8015a2c:	e000      	b.n	8015a30 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015a2e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d05b      	beq.n	8015af0 <tcp_receive+0x50c>
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015a3c:	4b60      	ldr	r3, [pc, #384]	@ (8015bc0 <tcp_receive+0x5dc>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	1ad3      	subs	r3, r2, r3
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	da54      	bge.n	8015af0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015a46:	4b5f      	ldr	r3, [pc, #380]	@ (8015bc4 <tcp_receive+0x5e0>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	b29a      	uxth	r2, r3
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	1ad3      	subs	r3, r2, r3
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015a5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015a64:	10db      	asrs	r3, r3, #3
 8015a66:	b21b      	sxth	r3, r3
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	1ad3      	subs	r3, r2, r3
 8015a6c:	b29b      	uxth	r3, r3
 8015a6e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015a78:	b29a      	uxth	r2, r3
 8015a7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015a7e:	4413      	add	r3, r2
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	b21a      	sxth	r2, r3
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015a88:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	da05      	bge.n	8015a9c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015a90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015a94:	425b      	negs	r3, r3
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015a9c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015aa6:	109b      	asrs	r3, r3, #2
 8015aa8:	b21b      	sxth	r3, r3
 8015aaa:	b29b      	uxth	r3, r3
 8015aac:	1ad3      	subs	r3, r2, r3
 8015aae:	b29b      	uxth	r3, r3
 8015ab0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015aba:	b29a      	uxth	r2, r3
 8015abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015ac0:	4413      	add	r3, r2
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	b21a      	sxth	r2, r3
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015ad0:	10db      	asrs	r3, r3, #3
 8015ad2:	b21b      	sxth	r3, r3
 8015ad4:	b29a      	uxth	r2, r3
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015adc:	b29b      	uxth	r3, r3
 8015ade:	4413      	add	r3, r2
 8015ae0:	b29b      	uxth	r3, r3
 8015ae2:	b21a      	sxth	r2, r3
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2200      	movs	r2, #0
 8015aee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015af0:	4b35      	ldr	r3, [pc, #212]	@ (8015bc8 <tcp_receive+0x5e4>)
 8015af2:	881b      	ldrh	r3, [r3, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	f000 84df 	beq.w	80164b8 <tcp_receive+0xed4>
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	7d1b      	ldrb	r3, [r3, #20]
 8015afe:	2b06      	cmp	r3, #6
 8015b00:	f200 84da 	bhi.w	80164b8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b08:	4b30      	ldr	r3, [pc, #192]	@ (8015bcc <tcp_receive+0x5e8>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	1ad3      	subs	r3, r2, r3
 8015b0e:	3b01      	subs	r3, #1
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	f2c0 808f 	blt.w	8015c34 <tcp_receive+0x650>
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8015bc8 <tcp_receive+0x5e4>)
 8015b1c:	881b      	ldrh	r3, [r3, #0]
 8015b1e:	4619      	mov	r1, r3
 8015b20:	4b2a      	ldr	r3, [pc, #168]	@ (8015bcc <tcp_receive+0x5e8>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	440b      	add	r3, r1
 8015b26:	1ad3      	subs	r3, r2, r3
 8015b28:	3301      	adds	r3, #1
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	f300 8082 	bgt.w	8015c34 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015b30:	4b27      	ldr	r3, [pc, #156]	@ (8015bd0 <tcp_receive+0x5ec>)
 8015b32:	685b      	ldr	r3, [r3, #4]
 8015b34:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b3a:	4b24      	ldr	r3, [pc, #144]	@ (8015bcc <tcp_receive+0x5e8>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	1ad3      	subs	r3, r2, r3
 8015b40:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015b42:	4b23      	ldr	r3, [pc, #140]	@ (8015bd0 <tcp_receive+0x5ec>)
 8015b44:	685b      	ldr	r3, [r3, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d106      	bne.n	8015b58 <tcp_receive+0x574>
 8015b4a:	4b22      	ldr	r3, [pc, #136]	@ (8015bd4 <tcp_receive+0x5f0>)
 8015b4c:	f240 5294 	movw	r2, #1428	@ 0x594
 8015b50:	4921      	ldr	r1, [pc, #132]	@ (8015bd8 <tcp_receive+0x5f4>)
 8015b52:	4822      	ldr	r0, [pc, #136]	@ (8015bdc <tcp_receive+0x5f8>)
 8015b54:	f006 fd7c 	bl	801c650 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015b5e:	4293      	cmp	r3, r2
 8015b60:	d906      	bls.n	8015b70 <tcp_receive+0x58c>
 8015b62:	4b1c      	ldr	r3, [pc, #112]	@ (8015bd4 <tcp_receive+0x5f0>)
 8015b64:	f240 5295 	movw	r2, #1429	@ 0x595
 8015b68:	491d      	ldr	r1, [pc, #116]	@ (8015be0 <tcp_receive+0x5fc>)
 8015b6a:	481c      	ldr	r0, [pc, #112]	@ (8015bdc <tcp_receive+0x5f8>)
 8015b6c:	f006 fd70 	bl	801c650 <iprintf>
      off = (u16_t)off32;
 8015b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b72:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015b76:	4b16      	ldr	r3, [pc, #88]	@ (8015bd0 <tcp_receive+0x5ec>)
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	891b      	ldrh	r3, [r3, #8]
 8015b7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015b80:	429a      	cmp	r2, r3
 8015b82:	d906      	bls.n	8015b92 <tcp_receive+0x5ae>
 8015b84:	4b13      	ldr	r3, [pc, #76]	@ (8015bd4 <tcp_receive+0x5f0>)
 8015b86:	f240 5297 	movw	r2, #1431	@ 0x597
 8015b8a:	4916      	ldr	r1, [pc, #88]	@ (8015be4 <tcp_receive+0x600>)
 8015b8c:	4813      	ldr	r0, [pc, #76]	@ (8015bdc <tcp_receive+0x5f8>)
 8015b8e:	f006 fd5f 	bl	801c650 <iprintf>
      inseg.len -= off;
 8015b92:	4b0f      	ldr	r3, [pc, #60]	@ (8015bd0 <tcp_receive+0x5ec>)
 8015b94:	891a      	ldrh	r2, [r3, #8]
 8015b96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015b9a:	1ad3      	subs	r3, r2, r3
 8015b9c:	b29a      	uxth	r2, r3
 8015b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8015bd0 <tcp_receive+0x5ec>)
 8015ba0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8015bd0 <tcp_receive+0x5ec>)
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	891a      	ldrh	r2, [r3, #8]
 8015ba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015bb0:	e02a      	b.n	8015c08 <tcp_receive+0x624>
 8015bb2:	bf00      	nop
 8015bb4:	0801fbcc 	.word	0x0801fbcc
 8015bb8:	0801fbd4 	.word	0x0801fbd4
 8015bbc:	200227e0 	.word	0x200227e0
 8015bc0:	200227dc 	.word	0x200227dc
 8015bc4:	2002279c 	.word	0x2002279c
 8015bc8:	200227e2 	.word	0x200227e2
 8015bcc:	200227d8 	.word	0x200227d8
 8015bd0:	200227b4 	.word	0x200227b4
 8015bd4:	0801f864 	.word	0x0801f864
 8015bd8:	0801fbdc 	.word	0x0801fbdc
 8015bdc:	0801f8b0 	.word	0x0801f8b0
 8015be0:	0801fbec 	.word	0x0801fbec
 8015be4:	0801fbfc 	.word	0x0801fbfc
        off -= p->len;
 8015be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015bea:	895b      	ldrh	r3, [r3, #10]
 8015bec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015bf8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015bfa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015bfe:	2200      	movs	r2, #0
 8015c00:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8015c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c0a:	895b      	ldrh	r3, [r3, #10]
 8015c0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d8e9      	bhi.n	8015be8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015c18:	4619      	mov	r1, r3
 8015c1a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015c1c:	f7fc f838 	bl	8011c90 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c24:	4a90      	ldr	r2, [pc, #576]	@ (8015e68 <tcp_receive+0x884>)
 8015c26:	6013      	str	r3, [r2, #0]
 8015c28:	4b90      	ldr	r3, [pc, #576]	@ (8015e6c <tcp_receive+0x888>)
 8015c2a:	691b      	ldr	r3, [r3, #16]
 8015c2c:	4a8e      	ldr	r2, [pc, #568]	@ (8015e68 <tcp_receive+0x884>)
 8015c2e:	6812      	ldr	r2, [r2, #0]
 8015c30:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015c32:	e00d      	b.n	8015c50 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015c34:	4b8c      	ldr	r3, [pc, #560]	@ (8015e68 <tcp_receive+0x884>)
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c3c:	1ad3      	subs	r3, r2, r3
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	da06      	bge.n	8015c50 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	8b5b      	ldrh	r3, [r3, #26]
 8015c46:	f043 0302 	orr.w	r3, r3, #2
 8015c4a:	b29a      	uxth	r2, r3
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015c50:	4b85      	ldr	r3, [pc, #532]	@ (8015e68 <tcp_receive+0x884>)
 8015c52:	681a      	ldr	r2, [r3, #0]
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c58:	1ad3      	subs	r3, r2, r3
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	f2c0 8427 	blt.w	80164ae <tcp_receive+0xeca>
 8015c60:	4b81      	ldr	r3, [pc, #516]	@ (8015e68 <tcp_receive+0x884>)
 8015c62:	681a      	ldr	r2, [r3, #0]
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c68:	6879      	ldr	r1, [r7, #4]
 8015c6a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015c6c:	440b      	add	r3, r1
 8015c6e:	1ad3      	subs	r3, r2, r3
 8015c70:	3301      	adds	r3, #1
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	f300 841b 	bgt.w	80164ae <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c7c:	4b7a      	ldr	r3, [pc, #488]	@ (8015e68 <tcp_receive+0x884>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	429a      	cmp	r2, r3
 8015c82:	f040 8298 	bne.w	80161b6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015c86:	4b79      	ldr	r3, [pc, #484]	@ (8015e6c <tcp_receive+0x888>)
 8015c88:	891c      	ldrh	r4, [r3, #8]
 8015c8a:	4b78      	ldr	r3, [pc, #480]	@ (8015e6c <tcp_receive+0x888>)
 8015c8c:	691b      	ldr	r3, [r3, #16]
 8015c8e:	899b      	ldrh	r3, [r3, #12]
 8015c90:	b29b      	uxth	r3, r3
 8015c92:	4618      	mov	r0, r3
 8015c94:	f7fa fb9e 	bl	80103d4 <lwip_htons>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	f003 0303 	and.w	r3, r3, #3
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d001      	beq.n	8015ca8 <tcp_receive+0x6c4>
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	e000      	b.n	8015caa <tcp_receive+0x6c6>
 8015ca8:	2300      	movs	r3, #0
 8015caa:	4423      	add	r3, r4
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	4b70      	ldr	r3, [pc, #448]	@ (8015e70 <tcp_receive+0x88c>)
 8015cb0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8015e70 <tcp_receive+0x88c>)
 8015cb8:	881b      	ldrh	r3, [r3, #0]
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d274      	bcs.n	8015da8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8015e6c <tcp_receive+0x888>)
 8015cc0:	691b      	ldr	r3, [r3, #16]
 8015cc2:	899b      	ldrh	r3, [r3, #12]
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7fa fb84 	bl	80103d4 <lwip_htons>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	f003 0301 	and.w	r3, r3, #1
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d01e      	beq.n	8015d16 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015cd8:	4b64      	ldr	r3, [pc, #400]	@ (8015e6c <tcp_receive+0x888>)
 8015cda:	691b      	ldr	r3, [r3, #16]
 8015cdc:	899b      	ldrh	r3, [r3, #12]
 8015cde:	b29b      	uxth	r3, r3
 8015ce0:	b21b      	sxth	r3, r3
 8015ce2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015ce6:	b21c      	sxth	r4, r3
 8015ce8:	4b60      	ldr	r3, [pc, #384]	@ (8015e6c <tcp_receive+0x888>)
 8015cea:	691b      	ldr	r3, [r3, #16]
 8015cec:	899b      	ldrh	r3, [r3, #12]
 8015cee:	b29b      	uxth	r3, r3
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7fa fb6f 	bl	80103d4 <lwip_htons>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	b2db      	uxtb	r3, r3
 8015cfa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7fa fb67 	bl	80103d4 <lwip_htons>
 8015d06:	4603      	mov	r3, r0
 8015d08:	b21b      	sxth	r3, r3
 8015d0a:	4323      	orrs	r3, r4
 8015d0c:	b21a      	sxth	r2, r3
 8015d0e:	4b57      	ldr	r3, [pc, #348]	@ (8015e6c <tcp_receive+0x888>)
 8015d10:	691b      	ldr	r3, [r3, #16]
 8015d12:	b292      	uxth	r2, r2
 8015d14:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015d1a:	4b54      	ldr	r3, [pc, #336]	@ (8015e6c <tcp_receive+0x888>)
 8015d1c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015d1e:	4b53      	ldr	r3, [pc, #332]	@ (8015e6c <tcp_receive+0x888>)
 8015d20:	691b      	ldr	r3, [r3, #16]
 8015d22:	899b      	ldrh	r3, [r3, #12]
 8015d24:	b29b      	uxth	r3, r3
 8015d26:	4618      	mov	r0, r3
 8015d28:	f7fa fb54 	bl	80103d4 <lwip_htons>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	b2db      	uxtb	r3, r3
 8015d30:	f003 0302 	and.w	r3, r3, #2
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d005      	beq.n	8015d44 <tcp_receive+0x760>
            inseg.len -= 1;
 8015d38:	4b4c      	ldr	r3, [pc, #304]	@ (8015e6c <tcp_receive+0x888>)
 8015d3a:	891b      	ldrh	r3, [r3, #8]
 8015d3c:	3b01      	subs	r3, #1
 8015d3e:	b29a      	uxth	r2, r3
 8015d40:	4b4a      	ldr	r3, [pc, #296]	@ (8015e6c <tcp_receive+0x888>)
 8015d42:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015d44:	4b49      	ldr	r3, [pc, #292]	@ (8015e6c <tcp_receive+0x888>)
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	4a48      	ldr	r2, [pc, #288]	@ (8015e6c <tcp_receive+0x888>)
 8015d4a:	8912      	ldrh	r2, [r2, #8]
 8015d4c:	4611      	mov	r1, r2
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7fb fe9e 	bl	8011a90 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015d54:	4b45      	ldr	r3, [pc, #276]	@ (8015e6c <tcp_receive+0x888>)
 8015d56:	891c      	ldrh	r4, [r3, #8]
 8015d58:	4b44      	ldr	r3, [pc, #272]	@ (8015e6c <tcp_receive+0x888>)
 8015d5a:	691b      	ldr	r3, [r3, #16]
 8015d5c:	899b      	ldrh	r3, [r3, #12]
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7fa fb37 	bl	80103d4 <lwip_htons>
 8015d66:	4603      	mov	r3, r0
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	f003 0303 	and.w	r3, r3, #3
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d001      	beq.n	8015d76 <tcp_receive+0x792>
 8015d72:	2301      	movs	r3, #1
 8015d74:	e000      	b.n	8015d78 <tcp_receive+0x794>
 8015d76:	2300      	movs	r3, #0
 8015d78:	4423      	add	r3, r4
 8015d7a:	b29a      	uxth	r2, r3
 8015d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8015e70 <tcp_receive+0x88c>)
 8015d7e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d80:	4b3b      	ldr	r3, [pc, #236]	@ (8015e70 <tcp_receive+0x88c>)
 8015d82:	881b      	ldrh	r3, [r3, #0]
 8015d84:	461a      	mov	r2, r3
 8015d86:	4b38      	ldr	r3, [pc, #224]	@ (8015e68 <tcp_receive+0x884>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	441a      	add	r2, r3
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d90:	6879      	ldr	r1, [r7, #4]
 8015d92:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015d94:	440b      	add	r3, r1
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d006      	beq.n	8015da8 <tcp_receive+0x7c4>
 8015d9a:	4b36      	ldr	r3, [pc, #216]	@ (8015e74 <tcp_receive+0x890>)
 8015d9c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015da0:	4935      	ldr	r1, [pc, #212]	@ (8015e78 <tcp_receive+0x894>)
 8015da2:	4836      	ldr	r0, [pc, #216]	@ (8015e7c <tcp_receive+0x898>)
 8015da4:	f006 fc54 	bl	801c650 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	f000 80e6 	beq.w	8015f7e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015db2:	4b2e      	ldr	r3, [pc, #184]	@ (8015e6c <tcp_receive+0x888>)
 8015db4:	691b      	ldr	r3, [r3, #16]
 8015db6:	899b      	ldrh	r3, [r3, #12]
 8015db8:	b29b      	uxth	r3, r3
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f7fa fb0a 	bl	80103d4 <lwip_htons>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	f003 0301 	and.w	r3, r3, #1
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d010      	beq.n	8015dee <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015dcc:	e00a      	b.n	8015de4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015dd2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8015dde:	68f8      	ldr	r0, [r7, #12]
 8015de0:	f7fd fcbf 	bl	8013762 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d1f0      	bne.n	8015dce <tcp_receive+0x7ea>
 8015dec:	e0c7      	b.n	8015f7e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015df4:	e051      	b.n	8015e9a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015df8:	691b      	ldr	r3, [r3, #16]
 8015dfa:	899b      	ldrh	r3, [r3, #12]
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f7fa fae8 	bl	80103d4 <lwip_htons>
 8015e04:	4603      	mov	r3, r0
 8015e06:	b2db      	uxtb	r3, r3
 8015e08:	f003 0301 	and.w	r3, r3, #1
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d03c      	beq.n	8015e8a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015e10:	4b16      	ldr	r3, [pc, #88]	@ (8015e6c <tcp_receive+0x888>)
 8015e12:	691b      	ldr	r3, [r3, #16]
 8015e14:	899b      	ldrh	r3, [r3, #12]
 8015e16:	b29b      	uxth	r3, r3
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7fa fadb 	bl	80103d4 <lwip_htons>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d12f      	bne.n	8015e8a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015e2a:	4b10      	ldr	r3, [pc, #64]	@ (8015e6c <tcp_receive+0x888>)
 8015e2c:	691b      	ldr	r3, [r3, #16]
 8015e2e:	899b      	ldrh	r3, [r3, #12]
 8015e30:	b29c      	uxth	r4, r3
 8015e32:	2001      	movs	r0, #1
 8015e34:	f7fa face 	bl	80103d4 <lwip_htons>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	461a      	mov	r2, r3
 8015e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8015e6c <tcp_receive+0x888>)
 8015e3e:	691b      	ldr	r3, [r3, #16]
 8015e40:	4322      	orrs	r2, r4
 8015e42:	b292      	uxth	r2, r2
 8015e44:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015e46:	4b09      	ldr	r3, [pc, #36]	@ (8015e6c <tcp_receive+0x888>)
 8015e48:	891c      	ldrh	r4, [r3, #8]
 8015e4a:	4b08      	ldr	r3, [pc, #32]	@ (8015e6c <tcp_receive+0x888>)
 8015e4c:	691b      	ldr	r3, [r3, #16]
 8015e4e:	899b      	ldrh	r3, [r3, #12]
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7fa fabe 	bl	80103d4 <lwip_htons>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	f003 0303 	and.w	r3, r3, #3
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d00d      	beq.n	8015e80 <tcp_receive+0x89c>
 8015e64:	2301      	movs	r3, #1
 8015e66:	e00c      	b.n	8015e82 <tcp_receive+0x89e>
 8015e68:	200227d8 	.word	0x200227d8
 8015e6c:	200227b4 	.word	0x200227b4
 8015e70:	200227e2 	.word	0x200227e2
 8015e74:	0801f864 	.word	0x0801f864
 8015e78:	0801fc0c 	.word	0x0801fc0c
 8015e7c:	0801f8b0 	.word	0x0801f8b0
 8015e80:	2300      	movs	r3, #0
 8015e82:	4423      	add	r3, r4
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	4b98      	ldr	r3, [pc, #608]	@ (80160e8 <tcp_receive+0xb04>)
 8015e88:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e8c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015e94:	6938      	ldr	r0, [r7, #16]
 8015e96:	f7fd fc64 	bl	8013762 <tcp_seg_free>
            while (next &&
 8015e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d00e      	beq.n	8015ebe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015ea0:	4b91      	ldr	r3, [pc, #580]	@ (80160e8 <tcp_receive+0xb04>)
 8015ea2:	881b      	ldrh	r3, [r3, #0]
 8015ea4:	461a      	mov	r2, r3
 8015ea6:	4b91      	ldr	r3, [pc, #580]	@ (80160ec <tcp_receive+0xb08>)
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	441a      	add	r2, r3
 8015eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015eae:	691b      	ldr	r3, [r3, #16]
 8015eb0:	685b      	ldr	r3, [r3, #4]
 8015eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015eb4:	8909      	ldrh	r1, [r1, #8]
 8015eb6:	440b      	add	r3, r1
 8015eb8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	da9b      	bge.n	8015df6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d059      	beq.n	8015f78 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015ec4:	4b88      	ldr	r3, [pc, #544]	@ (80160e8 <tcp_receive+0xb04>)
 8015ec6:	881b      	ldrh	r3, [r3, #0]
 8015ec8:	461a      	mov	r2, r3
 8015eca:	4b88      	ldr	r3, [pc, #544]	@ (80160ec <tcp_receive+0xb08>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	441a      	add	r2, r3
 8015ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ed2:	691b      	ldr	r3, [r3, #16]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	dd4d      	ble.n	8015f78 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ede:	691b      	ldr	r3, [r3, #16]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	b29a      	uxth	r2, r3
 8015ee4:	4b81      	ldr	r3, [pc, #516]	@ (80160ec <tcp_receive+0xb08>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	b29b      	uxth	r3, r3
 8015eea:	1ad3      	subs	r3, r2, r3
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	4b80      	ldr	r3, [pc, #512]	@ (80160f0 <tcp_receive+0xb0c>)
 8015ef0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80160f0 <tcp_receive+0xb0c>)
 8015ef4:	691b      	ldr	r3, [r3, #16]
 8015ef6:	899b      	ldrh	r3, [r3, #12]
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	4618      	mov	r0, r3
 8015efc:	f7fa fa6a 	bl	80103d4 <lwip_htons>
 8015f00:	4603      	mov	r3, r0
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	f003 0302 	and.w	r3, r3, #2
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d005      	beq.n	8015f18 <tcp_receive+0x934>
                inseg.len -= 1;
 8015f0c:	4b78      	ldr	r3, [pc, #480]	@ (80160f0 <tcp_receive+0xb0c>)
 8015f0e:	891b      	ldrh	r3, [r3, #8]
 8015f10:	3b01      	subs	r3, #1
 8015f12:	b29a      	uxth	r2, r3
 8015f14:	4b76      	ldr	r3, [pc, #472]	@ (80160f0 <tcp_receive+0xb0c>)
 8015f16:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015f18:	4b75      	ldr	r3, [pc, #468]	@ (80160f0 <tcp_receive+0xb0c>)
 8015f1a:	685b      	ldr	r3, [r3, #4]
 8015f1c:	4a74      	ldr	r2, [pc, #464]	@ (80160f0 <tcp_receive+0xb0c>)
 8015f1e:	8912      	ldrh	r2, [r2, #8]
 8015f20:	4611      	mov	r1, r2
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7fb fdb4 	bl	8011a90 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015f28:	4b71      	ldr	r3, [pc, #452]	@ (80160f0 <tcp_receive+0xb0c>)
 8015f2a:	891c      	ldrh	r4, [r3, #8]
 8015f2c:	4b70      	ldr	r3, [pc, #448]	@ (80160f0 <tcp_receive+0xb0c>)
 8015f2e:	691b      	ldr	r3, [r3, #16]
 8015f30:	899b      	ldrh	r3, [r3, #12]
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7fa fa4d 	bl	80103d4 <lwip_htons>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	b2db      	uxtb	r3, r3
 8015f3e:	f003 0303 	and.w	r3, r3, #3
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d001      	beq.n	8015f4a <tcp_receive+0x966>
 8015f46:	2301      	movs	r3, #1
 8015f48:	e000      	b.n	8015f4c <tcp_receive+0x968>
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	4423      	add	r3, r4
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	4b65      	ldr	r3, [pc, #404]	@ (80160e8 <tcp_receive+0xb04>)
 8015f52:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015f54:	4b64      	ldr	r3, [pc, #400]	@ (80160e8 <tcp_receive+0xb04>)
 8015f56:	881b      	ldrh	r3, [r3, #0]
 8015f58:	461a      	mov	r2, r3
 8015f5a:	4b64      	ldr	r3, [pc, #400]	@ (80160ec <tcp_receive+0xb08>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	441a      	add	r2, r3
 8015f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015f62:	691b      	ldr	r3, [r3, #16]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d006      	beq.n	8015f78 <tcp_receive+0x994>
 8015f6a:	4b62      	ldr	r3, [pc, #392]	@ (80160f4 <tcp_receive+0xb10>)
 8015f6c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015f70:	4961      	ldr	r1, [pc, #388]	@ (80160f8 <tcp_receive+0xb14>)
 8015f72:	4862      	ldr	r0, [pc, #392]	@ (80160fc <tcp_receive+0xb18>)
 8015f74:	f006 fb6c 	bl	801c650 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015f7c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015f7e:	4b5a      	ldr	r3, [pc, #360]	@ (80160e8 <tcp_receive+0xb04>)
 8015f80:	881b      	ldrh	r3, [r3, #0]
 8015f82:	461a      	mov	r2, r3
 8015f84:	4b59      	ldr	r3, [pc, #356]	@ (80160ec <tcp_receive+0xb08>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	441a      	add	r2, r3
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015f92:	4b55      	ldr	r3, [pc, #340]	@ (80160e8 <tcp_receive+0xb04>)
 8015f94:	881b      	ldrh	r3, [r3, #0]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d206      	bcs.n	8015fa8 <tcp_receive+0x9c4>
 8015f9a:	4b56      	ldr	r3, [pc, #344]	@ (80160f4 <tcp_receive+0xb10>)
 8015f9c:	f240 6207 	movw	r2, #1543	@ 0x607
 8015fa0:	4957      	ldr	r1, [pc, #348]	@ (8016100 <tcp_receive+0xb1c>)
 8015fa2:	4856      	ldr	r0, [pc, #344]	@ (80160fc <tcp_receive+0xb18>)
 8015fa4:	f006 fb54 	bl	801c650 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015fac:	4b4e      	ldr	r3, [pc, #312]	@ (80160e8 <tcp_receive+0xb04>)
 8015fae:	881b      	ldrh	r3, [r3, #0]
 8015fb0:	1ad3      	subs	r3, r2, r3
 8015fb2:	b29a      	uxth	r2, r3
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f7fc fd93 	bl	8012ae4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80160f0 <tcp_receive+0xb0c>)
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	891b      	ldrh	r3, [r3, #8]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d006      	beq.n	8015fd6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015fc8:	4b49      	ldr	r3, [pc, #292]	@ (80160f0 <tcp_receive+0xb0c>)
 8015fca:	685b      	ldr	r3, [r3, #4]
 8015fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8016104 <tcp_receive+0xb20>)
 8015fce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015fd0:	4b47      	ldr	r3, [pc, #284]	@ (80160f0 <tcp_receive+0xb0c>)
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015fd6:	4b46      	ldr	r3, [pc, #280]	@ (80160f0 <tcp_receive+0xb0c>)
 8015fd8:	691b      	ldr	r3, [r3, #16]
 8015fda:	899b      	ldrh	r3, [r3, #12]
 8015fdc:	b29b      	uxth	r3, r3
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f7fa f9f8 	bl	80103d4 <lwip_htons>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	b2db      	uxtb	r3, r3
 8015fe8:	f003 0301 	and.w	r3, r3, #1
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	f000 80b8 	beq.w	8016162 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015ff2:	4b45      	ldr	r3, [pc, #276]	@ (8016108 <tcp_receive+0xb24>)
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	f043 0320 	orr.w	r3, r3, #32
 8015ffa:	b2da      	uxtb	r2, r3
 8015ffc:	4b42      	ldr	r3, [pc, #264]	@ (8016108 <tcp_receive+0xb24>)
 8015ffe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016000:	e0af      	b.n	8016162 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016006:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801600c:	691b      	ldr	r3, [r3, #16]
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	4a36      	ldr	r2, [pc, #216]	@ (80160ec <tcp_receive+0xb08>)
 8016012:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	891b      	ldrh	r3, [r3, #8]
 8016018:	461c      	mov	r4, r3
 801601a:	68bb      	ldr	r3, [r7, #8]
 801601c:	691b      	ldr	r3, [r3, #16]
 801601e:	899b      	ldrh	r3, [r3, #12]
 8016020:	b29b      	uxth	r3, r3
 8016022:	4618      	mov	r0, r3
 8016024:	f7fa f9d6 	bl	80103d4 <lwip_htons>
 8016028:	4603      	mov	r3, r0
 801602a:	b2db      	uxtb	r3, r3
 801602c:	f003 0303 	and.w	r3, r3, #3
 8016030:	2b00      	cmp	r3, #0
 8016032:	d001      	beq.n	8016038 <tcp_receive+0xa54>
 8016034:	2301      	movs	r3, #1
 8016036:	e000      	b.n	801603a <tcp_receive+0xa56>
 8016038:	2300      	movs	r3, #0
 801603a:	191a      	adds	r2, r3, r4
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016040:	441a      	add	r2, r3
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801604a:	461c      	mov	r4, r3
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	891b      	ldrh	r3, [r3, #8]
 8016050:	461d      	mov	r5, r3
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	691b      	ldr	r3, [r3, #16]
 8016056:	899b      	ldrh	r3, [r3, #12]
 8016058:	b29b      	uxth	r3, r3
 801605a:	4618      	mov	r0, r3
 801605c:	f7fa f9ba 	bl	80103d4 <lwip_htons>
 8016060:	4603      	mov	r3, r0
 8016062:	b2db      	uxtb	r3, r3
 8016064:	f003 0303 	and.w	r3, r3, #3
 8016068:	2b00      	cmp	r3, #0
 801606a:	d001      	beq.n	8016070 <tcp_receive+0xa8c>
 801606c:	2301      	movs	r3, #1
 801606e:	e000      	b.n	8016072 <tcp_receive+0xa8e>
 8016070:	2300      	movs	r3, #0
 8016072:	442b      	add	r3, r5
 8016074:	429c      	cmp	r4, r3
 8016076:	d206      	bcs.n	8016086 <tcp_receive+0xaa2>
 8016078:	4b1e      	ldr	r3, [pc, #120]	@ (80160f4 <tcp_receive+0xb10>)
 801607a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801607e:	4923      	ldr	r1, [pc, #140]	@ (801610c <tcp_receive+0xb28>)
 8016080:	481e      	ldr	r0, [pc, #120]	@ (80160fc <tcp_receive+0xb18>)
 8016082:	f006 fae5 	bl	801c650 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016086:	68bb      	ldr	r3, [r7, #8]
 8016088:	891b      	ldrh	r3, [r3, #8]
 801608a:	461c      	mov	r4, r3
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	691b      	ldr	r3, [r3, #16]
 8016090:	899b      	ldrh	r3, [r3, #12]
 8016092:	b29b      	uxth	r3, r3
 8016094:	4618      	mov	r0, r3
 8016096:	f7fa f99d 	bl	80103d4 <lwip_htons>
 801609a:	4603      	mov	r3, r0
 801609c:	b2db      	uxtb	r3, r3
 801609e:	f003 0303 	and.w	r3, r3, #3
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d001      	beq.n	80160aa <tcp_receive+0xac6>
 80160a6:	2301      	movs	r3, #1
 80160a8:	e000      	b.n	80160ac <tcp_receive+0xac8>
 80160aa:	2300      	movs	r3, #0
 80160ac:	1919      	adds	r1, r3, r4
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80160b2:	b28b      	uxth	r3, r1
 80160b4:	1ad3      	subs	r3, r2, r3
 80160b6:	b29a      	uxth	r2, r3
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f7fc fd11 	bl	8012ae4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	891b      	ldrh	r3, [r3, #8]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d028      	beq.n	801611e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80160cc:	4b0d      	ldr	r3, [pc, #52]	@ (8016104 <tcp_receive+0xb20>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d01d      	beq.n	8016110 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80160d4:	4b0b      	ldr	r3, [pc, #44]	@ (8016104 <tcp_receive+0xb20>)
 80160d6:	681a      	ldr	r2, [r3, #0]
 80160d8:	68bb      	ldr	r3, [r7, #8]
 80160da:	685b      	ldr	r3, [r3, #4]
 80160dc:	4619      	mov	r1, r3
 80160de:	4610      	mov	r0, r2
 80160e0:	f7fb ff2a 	bl	8011f38 <pbuf_cat>
 80160e4:	e018      	b.n	8016118 <tcp_receive+0xb34>
 80160e6:	bf00      	nop
 80160e8:	200227e2 	.word	0x200227e2
 80160ec:	200227d8 	.word	0x200227d8
 80160f0:	200227b4 	.word	0x200227b4
 80160f4:	0801f864 	.word	0x0801f864
 80160f8:	0801fc44 	.word	0x0801fc44
 80160fc:	0801f8b0 	.word	0x0801f8b0
 8016100:	0801fc80 	.word	0x0801fc80
 8016104:	200227e8 	.word	0x200227e8
 8016108:	200227e5 	.word	0x200227e5
 801610c:	0801fca0 	.word	0x0801fca0
            } else {
              recv_data = cseg->p;
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	685b      	ldr	r3, [r3, #4]
 8016114:	4a70      	ldr	r2, [pc, #448]	@ (80162d8 <tcp_receive+0xcf4>)
 8016116:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	2200      	movs	r2, #0
 801611c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	691b      	ldr	r3, [r3, #16]
 8016122:	899b      	ldrh	r3, [r3, #12]
 8016124:	b29b      	uxth	r3, r3
 8016126:	4618      	mov	r0, r3
 8016128:	f7fa f954 	bl	80103d4 <lwip_htons>
 801612c:	4603      	mov	r3, r0
 801612e:	b2db      	uxtb	r3, r3
 8016130:	f003 0301 	and.w	r3, r3, #1
 8016134:	2b00      	cmp	r3, #0
 8016136:	d00d      	beq.n	8016154 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016138:	4b68      	ldr	r3, [pc, #416]	@ (80162dc <tcp_receive+0xcf8>)
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	f043 0320 	orr.w	r3, r3, #32
 8016140:	b2da      	uxtb	r2, r3
 8016142:	4b66      	ldr	r3, [pc, #408]	@ (80162dc <tcp_receive+0xcf8>)
 8016144:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	7d1b      	ldrb	r3, [r3, #20]
 801614a:	2b04      	cmp	r3, #4
 801614c:	d102      	bne.n	8016154 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	2207      	movs	r2, #7
 8016152:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	681a      	ldr	r2, [r3, #0]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801615c:	68b8      	ldr	r0, [r7, #8]
 801615e:	f7fd fb00 	bl	8013762 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016166:	2b00      	cmp	r3, #0
 8016168:	d008      	beq.n	801617c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801616e:	691b      	ldr	r3, [r3, #16]
 8016170:	685a      	ldr	r2, [r3, #4]
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8016176:	429a      	cmp	r2, r3
 8016178:	f43f af43 	beq.w	8016002 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	8b5b      	ldrh	r3, [r3, #26]
 8016180:	f003 0301 	and.w	r3, r3, #1
 8016184:	2b00      	cmp	r3, #0
 8016186:	d00e      	beq.n	80161a6 <tcp_receive+0xbc2>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	8b5b      	ldrh	r3, [r3, #26]
 801618c:	f023 0301 	bic.w	r3, r3, #1
 8016190:	b29a      	uxth	r2, r3
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	835a      	strh	r2, [r3, #26]
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	8b5b      	ldrh	r3, [r3, #26]
 801619a:	f043 0302 	orr.w	r3, r3, #2
 801619e:	b29a      	uxth	r2, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80161a4:	e187      	b.n	80164b6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	8b5b      	ldrh	r3, [r3, #26]
 80161aa:	f043 0301 	orr.w	r3, r3, #1
 80161ae:	b29a      	uxth	r2, r3
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80161b4:	e17f      	b.n	80164b6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d106      	bne.n	80161cc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80161be:	4848      	ldr	r0, [pc, #288]	@ (80162e0 <tcp_receive+0xcfc>)
 80161c0:	f7fd fae8 	bl	8013794 <tcp_seg_copy>
 80161c4:	4602      	mov	r2, r0
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80161ca:	e16c      	b.n	80164a6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80161cc:	2300      	movs	r3, #0
 80161ce:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80161d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80161d6:	e156      	b.n	8016486 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80161d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161da:	691b      	ldr	r3, [r3, #16]
 80161dc:	685a      	ldr	r2, [r3, #4]
 80161de:	4b41      	ldr	r3, [pc, #260]	@ (80162e4 <tcp_receive+0xd00>)
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d11d      	bne.n	8016222 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80161e6:	4b3e      	ldr	r3, [pc, #248]	@ (80162e0 <tcp_receive+0xcfc>)
 80161e8:	891a      	ldrh	r2, [r3, #8]
 80161ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80161ec:	891b      	ldrh	r3, [r3, #8]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	f240 814e 	bls.w	8016490 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80161f4:	483a      	ldr	r0, [pc, #232]	@ (80162e0 <tcp_receive+0xcfc>)
 80161f6:	f7fd facd 	bl	8013794 <tcp_seg_copy>
 80161fa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	f000 8148 	beq.w	8016494 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8016204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016206:	2b00      	cmp	r3, #0
 8016208:	d003      	beq.n	8016212 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801620a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801620c:	697a      	ldr	r2, [r7, #20]
 801620e:	601a      	str	r2, [r3, #0]
 8016210:	e002      	b.n	8016218 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	697a      	ldr	r2, [r7, #20]
 8016216:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016218:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801621a:	6978      	ldr	r0, [r7, #20]
 801621c:	f7ff f8de 	bl	80153dc <tcp_oos_insert_segment>
                }
                break;
 8016220:	e138      	b.n	8016494 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016224:	2b00      	cmp	r3, #0
 8016226:	d117      	bne.n	8016258 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016228:	4b2e      	ldr	r3, [pc, #184]	@ (80162e4 <tcp_receive+0xd00>)
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801622e:	691b      	ldr	r3, [r3, #16]
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	1ad3      	subs	r3, r2, r3
 8016234:	2b00      	cmp	r3, #0
 8016236:	da57      	bge.n	80162e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016238:	4829      	ldr	r0, [pc, #164]	@ (80162e0 <tcp_receive+0xcfc>)
 801623a:	f7fd faab 	bl	8013794 <tcp_seg_copy>
 801623e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016240:	69bb      	ldr	r3, [r7, #24]
 8016242:	2b00      	cmp	r3, #0
 8016244:	f000 8128 	beq.w	8016498 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	69ba      	ldr	r2, [r7, #24]
 801624c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801624e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016250:	69b8      	ldr	r0, [r7, #24]
 8016252:	f7ff f8c3 	bl	80153dc <tcp_oos_insert_segment>
                  }
                  break;
 8016256:	e11f      	b.n	8016498 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016258:	4b22      	ldr	r3, [pc, #136]	@ (80162e4 <tcp_receive+0xd00>)
 801625a:	681a      	ldr	r2, [r3, #0]
 801625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801625e:	691b      	ldr	r3, [r3, #16]
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	1ad3      	subs	r3, r2, r3
 8016264:	3b01      	subs	r3, #1
 8016266:	2b00      	cmp	r3, #0
 8016268:	db3e      	blt.n	80162e8 <tcp_receive+0xd04>
 801626a:	4b1e      	ldr	r3, [pc, #120]	@ (80162e4 <tcp_receive+0xd00>)
 801626c:	681a      	ldr	r2, [r3, #0]
 801626e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016270:	691b      	ldr	r3, [r3, #16]
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	1ad3      	subs	r3, r2, r3
 8016276:	3301      	adds	r3, #1
 8016278:	2b00      	cmp	r3, #0
 801627a:	dc35      	bgt.n	80162e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801627c:	4818      	ldr	r0, [pc, #96]	@ (80162e0 <tcp_receive+0xcfc>)
 801627e:	f7fd fa89 	bl	8013794 <tcp_seg_copy>
 8016282:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	2b00      	cmp	r3, #0
 8016288:	f000 8108 	beq.w	801649c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801628e:	691b      	ldr	r3, [r3, #16]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016294:	8912      	ldrh	r2, [r2, #8]
 8016296:	441a      	add	r2, r3
 8016298:	4b12      	ldr	r3, [pc, #72]	@ (80162e4 <tcp_receive+0xd00>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	1ad3      	subs	r3, r2, r3
 801629e:	2b00      	cmp	r3, #0
 80162a0:	dd12      	ble.n	80162c8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80162a2:	4b10      	ldr	r3, [pc, #64]	@ (80162e4 <tcp_receive+0xd00>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	b29a      	uxth	r2, r3
 80162a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162aa:	691b      	ldr	r3, [r3, #16]
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	1ad3      	subs	r3, r2, r3
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162b6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80162b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162ba:	685a      	ldr	r2, [r3, #4]
 80162bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162be:	891b      	ldrh	r3, [r3, #8]
 80162c0:	4619      	mov	r1, r3
 80162c2:	4610      	mov	r0, r2
 80162c4:	f7fb fbe4 	bl	8011a90 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80162c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162ca:	69fa      	ldr	r2, [r7, #28]
 80162cc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80162ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80162d0:	69f8      	ldr	r0, [r7, #28]
 80162d2:	f7ff f883 	bl	80153dc <tcp_oos_insert_segment>
                  }
                  break;
 80162d6:	e0e1      	b.n	801649c <tcp_receive+0xeb8>
 80162d8:	200227e8 	.word	0x200227e8
 80162dc:	200227e5 	.word	0x200227e5
 80162e0:	200227b4 	.word	0x200227b4
 80162e4:	200227d8 	.word	0x200227d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80162e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162ea:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80162ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	f040 80c5 	bne.w	8016480 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80162f6:	4b7f      	ldr	r3, [pc, #508]	@ (80164f4 <tcp_receive+0xf10>)
 80162f8:	681a      	ldr	r2, [r3, #0]
 80162fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80162fc:	691b      	ldr	r3, [r3, #16]
 80162fe:	685b      	ldr	r3, [r3, #4]
 8016300:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016302:	2b00      	cmp	r3, #0
 8016304:	f340 80bc 	ble.w	8016480 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801630a:	691b      	ldr	r3, [r3, #16]
 801630c:	899b      	ldrh	r3, [r3, #12]
 801630e:	b29b      	uxth	r3, r3
 8016310:	4618      	mov	r0, r3
 8016312:	f7fa f85f 	bl	80103d4 <lwip_htons>
 8016316:	4603      	mov	r3, r0
 8016318:	b2db      	uxtb	r3, r3
 801631a:	f003 0301 	and.w	r3, r3, #1
 801631e:	2b00      	cmp	r3, #0
 8016320:	f040 80be 	bne.w	80164a0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016324:	4874      	ldr	r0, [pc, #464]	@ (80164f8 <tcp_receive+0xf14>)
 8016326:	f7fd fa35 	bl	8013794 <tcp_seg_copy>
 801632a:	4602      	mov	r2, r0
 801632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801632e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	f000 80b5 	beq.w	80164a4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801633a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801633c:	691b      	ldr	r3, [r3, #16]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016342:	8912      	ldrh	r2, [r2, #8]
 8016344:	441a      	add	r2, r3
 8016346:	4b6b      	ldr	r3, [pc, #428]	@ (80164f4 <tcp_receive+0xf10>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	1ad3      	subs	r3, r2, r3
 801634c:	2b00      	cmp	r3, #0
 801634e:	dd12      	ble.n	8016376 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016350:	4b68      	ldr	r3, [pc, #416]	@ (80164f4 <tcp_receive+0xf10>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	b29a      	uxth	r2, r3
 8016356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016358:	691b      	ldr	r3, [r3, #16]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	b29b      	uxth	r3, r3
 801635e:	1ad3      	subs	r3, r2, r3
 8016360:	b29a      	uxth	r2, r3
 8016362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016364:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016368:	685a      	ldr	r2, [r3, #4]
 801636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801636c:	891b      	ldrh	r3, [r3, #8]
 801636e:	4619      	mov	r1, r3
 8016370:	4610      	mov	r0, r2
 8016372:	f7fb fb8d 	bl	8011a90 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016376:	4b61      	ldr	r3, [pc, #388]	@ (80164fc <tcp_receive+0xf18>)
 8016378:	881b      	ldrh	r3, [r3, #0]
 801637a:	461a      	mov	r2, r3
 801637c:	4b5d      	ldr	r3, [pc, #372]	@ (80164f4 <tcp_receive+0xf10>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	441a      	add	r2, r3
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016386:	6879      	ldr	r1, [r7, #4]
 8016388:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801638a:	440b      	add	r3, r1
 801638c:	1ad3      	subs	r3, r2, r3
 801638e:	2b00      	cmp	r3, #0
 8016390:	f340 8088 	ble.w	80164a4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	691b      	ldr	r3, [r3, #16]
 801639a:	899b      	ldrh	r3, [r3, #12]
 801639c:	b29b      	uxth	r3, r3
 801639e:	4618      	mov	r0, r3
 80163a0:	f7fa f818 	bl	80103d4 <lwip_htons>
 80163a4:	4603      	mov	r3, r0
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	f003 0301 	and.w	r3, r3, #1
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d021      	beq.n	80163f4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80163b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	691b      	ldr	r3, [r3, #16]
 80163b6:	899b      	ldrh	r3, [r3, #12]
 80163b8:	b29b      	uxth	r3, r3
 80163ba:	b21b      	sxth	r3, r3
 80163bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80163c0:	b21c      	sxth	r4, r3
 80163c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	691b      	ldr	r3, [r3, #16]
 80163c8:	899b      	ldrh	r3, [r3, #12]
 80163ca:	b29b      	uxth	r3, r3
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7fa f801 	bl	80103d4 <lwip_htons>
 80163d2:	4603      	mov	r3, r0
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80163da:	b29b      	uxth	r3, r3
 80163dc:	4618      	mov	r0, r3
 80163de:	f7f9 fff9 	bl	80103d4 <lwip_htons>
 80163e2:	4603      	mov	r3, r0
 80163e4:	b21b      	sxth	r3, r3
 80163e6:	4323      	orrs	r3, r4
 80163e8:	b21a      	sxth	r2, r3
 80163ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	691b      	ldr	r3, [r3, #16]
 80163f0:	b292      	uxth	r2, r2
 80163f2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163fe:	4413      	add	r3, r2
 8016400:	b299      	uxth	r1, r3
 8016402:	4b3c      	ldr	r3, [pc, #240]	@ (80164f4 <tcp_receive+0xf10>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	b29a      	uxth	r2, r3
 8016408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	1a8a      	subs	r2, r1, r2
 801640e:	b292      	uxth	r2, r2
 8016410:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	685a      	ldr	r2, [r3, #4]
 8016418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	891b      	ldrh	r3, [r3, #8]
 801641e:	4619      	mov	r1, r3
 8016420:	4610      	mov	r0, r2
 8016422:	f7fb fb35 	bl	8011a90 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	891c      	ldrh	r4, [r3, #8]
 801642c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	691b      	ldr	r3, [r3, #16]
 8016432:	899b      	ldrh	r3, [r3, #12]
 8016434:	b29b      	uxth	r3, r3
 8016436:	4618      	mov	r0, r3
 8016438:	f7f9 ffcc 	bl	80103d4 <lwip_htons>
 801643c:	4603      	mov	r3, r0
 801643e:	b2db      	uxtb	r3, r3
 8016440:	f003 0303 	and.w	r3, r3, #3
 8016444:	2b00      	cmp	r3, #0
 8016446:	d001      	beq.n	801644c <tcp_receive+0xe68>
 8016448:	2301      	movs	r3, #1
 801644a:	e000      	b.n	801644e <tcp_receive+0xe6a>
 801644c:	2300      	movs	r3, #0
 801644e:	4423      	add	r3, r4
 8016450:	b29a      	uxth	r2, r3
 8016452:	4b2a      	ldr	r3, [pc, #168]	@ (80164fc <tcp_receive+0xf18>)
 8016454:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016456:	4b29      	ldr	r3, [pc, #164]	@ (80164fc <tcp_receive+0xf18>)
 8016458:	881b      	ldrh	r3, [r3, #0]
 801645a:	461a      	mov	r2, r3
 801645c:	4b25      	ldr	r3, [pc, #148]	@ (80164f4 <tcp_receive+0xf10>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	441a      	add	r2, r3
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016466:	6879      	ldr	r1, [r7, #4]
 8016468:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801646a:	440b      	add	r3, r1
 801646c:	429a      	cmp	r2, r3
 801646e:	d019      	beq.n	80164a4 <tcp_receive+0xec0>
 8016470:	4b23      	ldr	r3, [pc, #140]	@ (8016500 <tcp_receive+0xf1c>)
 8016472:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8016476:	4923      	ldr	r1, [pc, #140]	@ (8016504 <tcp_receive+0xf20>)
 8016478:	4823      	ldr	r0, [pc, #140]	@ (8016508 <tcp_receive+0xf24>)
 801647a:	f006 f8e9 	bl	801c650 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801647e:	e011      	b.n	80164a4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016488:	2b00      	cmp	r3, #0
 801648a:	f47f aea5 	bne.w	80161d8 <tcp_receive+0xbf4>
 801648e:	e00a      	b.n	80164a6 <tcp_receive+0xec2>
                break;
 8016490:	bf00      	nop
 8016492:	e008      	b.n	80164a6 <tcp_receive+0xec2>
                break;
 8016494:	bf00      	nop
 8016496:	e006      	b.n	80164a6 <tcp_receive+0xec2>
                  break;
 8016498:	bf00      	nop
 801649a:	e004      	b.n	80164a6 <tcp_receive+0xec2>
                  break;
 801649c:	bf00      	nop
 801649e:	e002      	b.n	80164a6 <tcp_receive+0xec2>
                  break;
 80164a0:	bf00      	nop
 80164a2:	e000      	b.n	80164a6 <tcp_receive+0xec2>
                break;
 80164a4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f001 fef6 	bl	8018298 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80164ac:	e003      	b.n	80164b6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f001 fef2 	bl	8018298 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80164b4:	e01a      	b.n	80164ec <tcp_receive+0xf08>
 80164b6:	e019      	b.n	80164ec <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80164b8:	4b0e      	ldr	r3, [pc, #56]	@ (80164f4 <tcp_receive+0xf10>)
 80164ba:	681a      	ldr	r2, [r3, #0]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164c0:	1ad3      	subs	r3, r2, r3
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	db0a      	blt.n	80164dc <tcp_receive+0xef8>
 80164c6:	4b0b      	ldr	r3, [pc, #44]	@ (80164f4 <tcp_receive+0xf10>)
 80164c8:	681a      	ldr	r2, [r3, #0]
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164ce:	6879      	ldr	r1, [r7, #4]
 80164d0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80164d2:	440b      	add	r3, r1
 80164d4:	1ad3      	subs	r3, r2, r3
 80164d6:	3301      	adds	r3, #1
 80164d8:	2b00      	cmp	r3, #0
 80164da:	dd07      	ble.n	80164ec <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	8b5b      	ldrh	r3, [r3, #26]
 80164e0:	f043 0302 	orr.w	r3, r3, #2
 80164e4:	b29a      	uxth	r2, r3
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80164ea:	e7ff      	b.n	80164ec <tcp_receive+0xf08>
 80164ec:	bf00      	nop
 80164ee:	3750      	adds	r7, #80	@ 0x50
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bdb0      	pop	{r4, r5, r7, pc}
 80164f4:	200227d8 	.word	0x200227d8
 80164f8:	200227b4 	.word	0x200227b4
 80164fc:	200227e2 	.word	0x200227e2
 8016500:	0801f864 	.word	0x0801f864
 8016504:	0801fc0c 	.word	0x0801fc0c
 8016508:	0801f8b0 	.word	0x0801f8b0

0801650c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801650c:	b480      	push	{r7}
 801650e:	b083      	sub	sp, #12
 8016510:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016512:	4b15      	ldr	r3, [pc, #84]	@ (8016568 <tcp_get_next_optbyte+0x5c>)
 8016514:	881b      	ldrh	r3, [r3, #0]
 8016516:	1c5a      	adds	r2, r3, #1
 8016518:	b291      	uxth	r1, r2
 801651a:	4a13      	ldr	r2, [pc, #76]	@ (8016568 <tcp_get_next_optbyte+0x5c>)
 801651c:	8011      	strh	r1, [r2, #0]
 801651e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016520:	4b12      	ldr	r3, [pc, #72]	@ (801656c <tcp_get_next_optbyte+0x60>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d004      	beq.n	8016532 <tcp_get_next_optbyte+0x26>
 8016528:	4b11      	ldr	r3, [pc, #68]	@ (8016570 <tcp_get_next_optbyte+0x64>)
 801652a:	881b      	ldrh	r3, [r3, #0]
 801652c:	88fa      	ldrh	r2, [r7, #6]
 801652e:	429a      	cmp	r2, r3
 8016530:	d208      	bcs.n	8016544 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016532:	4b10      	ldr	r3, [pc, #64]	@ (8016574 <tcp_get_next_optbyte+0x68>)
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	3314      	adds	r3, #20
 8016538:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801653a:	88fb      	ldrh	r3, [r7, #6]
 801653c:	683a      	ldr	r2, [r7, #0]
 801653e:	4413      	add	r3, r2
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	e00b      	b.n	801655c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016544:	88fb      	ldrh	r3, [r7, #6]
 8016546:	b2da      	uxtb	r2, r3
 8016548:	4b09      	ldr	r3, [pc, #36]	@ (8016570 <tcp_get_next_optbyte+0x64>)
 801654a:	881b      	ldrh	r3, [r3, #0]
 801654c:	b2db      	uxtb	r3, r3
 801654e:	1ad3      	subs	r3, r2, r3
 8016550:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016552:	4b06      	ldr	r3, [pc, #24]	@ (801656c <tcp_get_next_optbyte+0x60>)
 8016554:	681a      	ldr	r2, [r3, #0]
 8016556:	797b      	ldrb	r3, [r7, #5]
 8016558:	4413      	add	r3, r2
 801655a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801655c:	4618      	mov	r0, r3
 801655e:	370c      	adds	r7, #12
 8016560:	46bd      	mov	sp, r7
 8016562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016566:	4770      	bx	lr
 8016568:	200227d4 	.word	0x200227d4
 801656c:	200227d0 	.word	0x200227d0
 8016570:	200227ce 	.word	0x200227ce
 8016574:	200227c8 	.word	0x200227c8

08016578 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d106      	bne.n	8016594 <tcp_parseopt+0x1c>
 8016586:	4b32      	ldr	r3, [pc, #200]	@ (8016650 <tcp_parseopt+0xd8>)
 8016588:	f240 727d 	movw	r2, #1917	@ 0x77d
 801658c:	4931      	ldr	r1, [pc, #196]	@ (8016654 <tcp_parseopt+0xdc>)
 801658e:	4832      	ldr	r0, [pc, #200]	@ (8016658 <tcp_parseopt+0xe0>)
 8016590:	f006 f85e 	bl	801c650 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016594:	4b31      	ldr	r3, [pc, #196]	@ (801665c <tcp_parseopt+0xe4>)
 8016596:	881b      	ldrh	r3, [r3, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d056      	beq.n	801664a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801659c:	4b30      	ldr	r3, [pc, #192]	@ (8016660 <tcp_parseopt+0xe8>)
 801659e:	2200      	movs	r2, #0
 80165a0:	801a      	strh	r2, [r3, #0]
 80165a2:	e046      	b.n	8016632 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80165a4:	f7ff ffb2 	bl	801650c <tcp_get_next_optbyte>
 80165a8:	4603      	mov	r3, r0
 80165aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80165ac:	7bfb      	ldrb	r3, [r7, #15]
 80165ae:	2b02      	cmp	r3, #2
 80165b0:	d006      	beq.n	80165c0 <tcp_parseopt+0x48>
 80165b2:	2b02      	cmp	r3, #2
 80165b4:	dc2a      	bgt.n	801660c <tcp_parseopt+0x94>
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d042      	beq.n	8016640 <tcp_parseopt+0xc8>
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d038      	beq.n	8016630 <tcp_parseopt+0xb8>
 80165be:	e025      	b.n	801660c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80165c0:	f7ff ffa4 	bl	801650c <tcp_get_next_optbyte>
 80165c4:	4603      	mov	r3, r0
 80165c6:	2b04      	cmp	r3, #4
 80165c8:	d13c      	bne.n	8016644 <tcp_parseopt+0xcc>
 80165ca:	4b25      	ldr	r3, [pc, #148]	@ (8016660 <tcp_parseopt+0xe8>)
 80165cc:	881b      	ldrh	r3, [r3, #0]
 80165ce:	3301      	adds	r3, #1
 80165d0:	4a22      	ldr	r2, [pc, #136]	@ (801665c <tcp_parseopt+0xe4>)
 80165d2:	8812      	ldrh	r2, [r2, #0]
 80165d4:	4293      	cmp	r3, r2
 80165d6:	da35      	bge.n	8016644 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80165d8:	f7ff ff98 	bl	801650c <tcp_get_next_optbyte>
 80165dc:	4603      	mov	r3, r0
 80165de:	021b      	lsls	r3, r3, #8
 80165e0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80165e2:	f7ff ff93 	bl	801650c <tcp_get_next_optbyte>
 80165e6:	4603      	mov	r3, r0
 80165e8:	461a      	mov	r2, r3
 80165ea:	89bb      	ldrh	r3, [r7, #12]
 80165ec:	4313      	orrs	r3, r2
 80165ee:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80165f0:	89bb      	ldrh	r3, [r7, #12]
 80165f2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80165f6:	d804      	bhi.n	8016602 <tcp_parseopt+0x8a>
 80165f8:	89bb      	ldrh	r3, [r7, #12]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d001      	beq.n	8016602 <tcp_parseopt+0x8a>
 80165fe:	89ba      	ldrh	r2, [r7, #12]
 8016600:	e001      	b.n	8016606 <tcp_parseopt+0x8e>
 8016602:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801660a:	e012      	b.n	8016632 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801660c:	f7ff ff7e 	bl	801650c <tcp_get_next_optbyte>
 8016610:	4603      	mov	r3, r0
 8016612:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016614:	7afb      	ldrb	r3, [r7, #11]
 8016616:	2b01      	cmp	r3, #1
 8016618:	d916      	bls.n	8016648 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801661a:	7afb      	ldrb	r3, [r7, #11]
 801661c:	b29a      	uxth	r2, r3
 801661e:	4b10      	ldr	r3, [pc, #64]	@ (8016660 <tcp_parseopt+0xe8>)
 8016620:	881b      	ldrh	r3, [r3, #0]
 8016622:	4413      	add	r3, r2
 8016624:	b29b      	uxth	r3, r3
 8016626:	3b02      	subs	r3, #2
 8016628:	b29a      	uxth	r2, r3
 801662a:	4b0d      	ldr	r3, [pc, #52]	@ (8016660 <tcp_parseopt+0xe8>)
 801662c:	801a      	strh	r2, [r3, #0]
 801662e:	e000      	b.n	8016632 <tcp_parseopt+0xba>
          break;
 8016630:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016632:	4b0b      	ldr	r3, [pc, #44]	@ (8016660 <tcp_parseopt+0xe8>)
 8016634:	881a      	ldrh	r2, [r3, #0]
 8016636:	4b09      	ldr	r3, [pc, #36]	@ (801665c <tcp_parseopt+0xe4>)
 8016638:	881b      	ldrh	r3, [r3, #0]
 801663a:	429a      	cmp	r2, r3
 801663c:	d3b2      	bcc.n	80165a4 <tcp_parseopt+0x2c>
 801663e:	e004      	b.n	801664a <tcp_parseopt+0xd2>
          return;
 8016640:	bf00      	nop
 8016642:	e002      	b.n	801664a <tcp_parseopt+0xd2>
            return;
 8016644:	bf00      	nop
 8016646:	e000      	b.n	801664a <tcp_parseopt+0xd2>
            return;
 8016648:	bf00      	nop
      }
    }
  }
}
 801664a:	3710      	adds	r7, #16
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}
 8016650:	0801f864 	.word	0x0801f864
 8016654:	0801fcc8 	.word	0x0801fcc8
 8016658:	0801f8b0 	.word	0x0801f8b0
 801665c:	200227cc 	.word	0x200227cc
 8016660:	200227d4 	.word	0x200227d4

08016664 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016664:	b480      	push	{r7}
 8016666:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016668:	4b05      	ldr	r3, [pc, #20]	@ (8016680 <tcp_trigger_input_pcb_close+0x1c>)
 801666a:	781b      	ldrb	r3, [r3, #0]
 801666c:	f043 0310 	orr.w	r3, r3, #16
 8016670:	b2da      	uxtb	r2, r3
 8016672:	4b03      	ldr	r3, [pc, #12]	@ (8016680 <tcp_trigger_input_pcb_close+0x1c>)
 8016674:	701a      	strb	r2, [r3, #0]
}
 8016676:	bf00      	nop
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr
 8016680:	200227e5 	.word	0x200227e5

08016684 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b084      	sub	sp, #16
 8016688:	af00      	add	r7, sp, #0
 801668a:	60f8      	str	r0, [r7, #12]
 801668c:	60b9      	str	r1, [r7, #8]
 801668e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00a      	beq.n	80166ac <tcp_route+0x28>
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	7a1b      	ldrb	r3, [r3, #8]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d006      	beq.n	80166ac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	7a1b      	ldrb	r3, [r3, #8]
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7fa ffec 	bl	8011680 <netif_get_by_index>
 80166a8:	4603      	mov	r3, r0
 80166aa:	e003      	b.n	80166b4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f004 f9ed 	bl	801aa8c <ip4_route>
 80166b2:	4603      	mov	r3, r0
  }
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3710      	adds	r7, #16
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}

080166bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80166bc:	b590      	push	{r4, r7, lr}
 80166be:	b087      	sub	sp, #28
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	60f8      	str	r0, [r7, #12]
 80166c4:	60b9      	str	r1, [r7, #8]
 80166c6:	603b      	str	r3, [r7, #0]
 80166c8:	4613      	mov	r3, r2
 80166ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d105      	bne.n	80166de <tcp_create_segment+0x22>
 80166d2:	4b45      	ldr	r3, [pc, #276]	@ (80167e8 <tcp_create_segment+0x12c>)
 80166d4:	22a3      	movs	r2, #163	@ 0xa3
 80166d6:	4945      	ldr	r1, [pc, #276]	@ (80167ec <tcp_create_segment+0x130>)
 80166d8:	4845      	ldr	r0, [pc, #276]	@ (80167f0 <tcp_create_segment+0x134>)
 80166da:	f005 ffb9 	bl	801c650 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80166de:	68bb      	ldr	r3, [r7, #8]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d105      	bne.n	80166f0 <tcp_create_segment+0x34>
 80166e4:	4b40      	ldr	r3, [pc, #256]	@ (80167e8 <tcp_create_segment+0x12c>)
 80166e6:	22a4      	movs	r2, #164	@ 0xa4
 80166e8:	4942      	ldr	r1, [pc, #264]	@ (80167f4 <tcp_create_segment+0x138>)
 80166ea:	4841      	ldr	r0, [pc, #260]	@ (80167f0 <tcp_create_segment+0x134>)
 80166ec:	f005 ffb0 	bl	801c650 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80166f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80166f4:	009b      	lsls	r3, r3, #2
 80166f6:	b2db      	uxtb	r3, r3
 80166f8:	f003 0304 	and.w	r3, r3, #4
 80166fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80166fe:	2003      	movs	r0, #3
 8016700:	f7fa fb3c 	bl	8010d7c <memp_malloc>
 8016704:	6138      	str	r0, [r7, #16]
 8016706:	693b      	ldr	r3, [r7, #16]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d104      	bne.n	8016716 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801670c:	68b8      	ldr	r0, [r7, #8]
 801670e:	f7fb fb45 	bl	8011d9c <pbuf_free>
    return NULL;
 8016712:	2300      	movs	r3, #0
 8016714:	e063      	b.n	80167de <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801671c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	2200      	movs	r2, #0
 8016722:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016724:	693b      	ldr	r3, [r7, #16]
 8016726:	68ba      	ldr	r2, [r7, #8]
 8016728:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	891a      	ldrh	r2, [r3, #8]
 801672e:	7dfb      	ldrb	r3, [r7, #23]
 8016730:	b29b      	uxth	r3, r3
 8016732:	429a      	cmp	r2, r3
 8016734:	d205      	bcs.n	8016742 <tcp_create_segment+0x86>
 8016736:	4b2c      	ldr	r3, [pc, #176]	@ (80167e8 <tcp_create_segment+0x12c>)
 8016738:	22b0      	movs	r2, #176	@ 0xb0
 801673a:	492f      	ldr	r1, [pc, #188]	@ (80167f8 <tcp_create_segment+0x13c>)
 801673c:	482c      	ldr	r0, [pc, #176]	@ (80167f0 <tcp_create_segment+0x134>)
 801673e:	f005 ff87 	bl	801c650 <iprintf>
  seg->len = p->tot_len - optlen;
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	891a      	ldrh	r2, [r3, #8]
 8016746:	7dfb      	ldrb	r3, [r7, #23]
 8016748:	b29b      	uxth	r3, r3
 801674a:	1ad3      	subs	r3, r2, r3
 801674c:	b29a      	uxth	r2, r3
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8016752:	693b      	ldr	r3, [r7, #16]
 8016754:	2200      	movs	r2, #0
 8016756:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016758:	2114      	movs	r1, #20
 801675a:	68b8      	ldr	r0, [r7, #8]
 801675c:	f7fb fa88 	bl	8011c70 <pbuf_add_header>
 8016760:	4603      	mov	r3, r0
 8016762:	2b00      	cmp	r3, #0
 8016764:	d004      	beq.n	8016770 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016766:	6938      	ldr	r0, [r7, #16]
 8016768:	f7fc fffb 	bl	8013762 <tcp_seg_free>
    return NULL;
 801676c:	2300      	movs	r3, #0
 801676e:	e036      	b.n	80167de <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	685b      	ldr	r3, [r3, #4]
 8016774:	685a      	ldr	r2, [r3, #4]
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	8ada      	ldrh	r2, [r3, #22]
 801677e:	693b      	ldr	r3, [r7, #16]
 8016780:	691c      	ldr	r4, [r3, #16]
 8016782:	4610      	mov	r0, r2
 8016784:	f7f9 fe26 	bl	80103d4 <lwip_htons>
 8016788:	4603      	mov	r3, r0
 801678a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	8b1a      	ldrh	r2, [r3, #24]
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	691c      	ldr	r4, [r3, #16]
 8016794:	4610      	mov	r0, r2
 8016796:	f7f9 fe1d 	bl	80103d4 <lwip_htons>
 801679a:	4603      	mov	r3, r0
 801679c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	691c      	ldr	r4, [r3, #16]
 80167a2:	6838      	ldr	r0, [r7, #0]
 80167a4:	f7f9 fe2c 	bl	8010400 <lwip_htonl>
 80167a8:	4603      	mov	r3, r0
 80167aa:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80167ac:	7dfb      	ldrb	r3, [r7, #23]
 80167ae:	089b      	lsrs	r3, r3, #2
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	3305      	adds	r3, #5
 80167b4:	b29b      	uxth	r3, r3
 80167b6:	031b      	lsls	r3, r3, #12
 80167b8:	b29a      	uxth	r2, r3
 80167ba:	79fb      	ldrb	r3, [r7, #7]
 80167bc:	b29b      	uxth	r3, r3
 80167be:	4313      	orrs	r3, r2
 80167c0:	b29a      	uxth	r2, r3
 80167c2:	693b      	ldr	r3, [r7, #16]
 80167c4:	691c      	ldr	r4, [r3, #16]
 80167c6:	4610      	mov	r0, r2
 80167c8:	f7f9 fe04 	bl	80103d4 <lwip_htons>
 80167cc:	4603      	mov	r3, r0
 80167ce:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	691b      	ldr	r3, [r3, #16]
 80167d4:	2200      	movs	r2, #0
 80167d6:	749a      	strb	r2, [r3, #18]
 80167d8:	2200      	movs	r2, #0
 80167da:	74da      	strb	r2, [r3, #19]
  return seg;
 80167dc:	693b      	ldr	r3, [r7, #16]
}
 80167de:	4618      	mov	r0, r3
 80167e0:	371c      	adds	r7, #28
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd90      	pop	{r4, r7, pc}
 80167e6:	bf00      	nop
 80167e8:	0801fce4 	.word	0x0801fce4
 80167ec:	0801fd18 	.word	0x0801fd18
 80167f0:	0801fd38 	.word	0x0801fd38
 80167f4:	0801fd60 	.word	0x0801fd60
 80167f8:	0801fd84 	.word	0x0801fd84

080167fc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b086      	sub	sp, #24
 8016800:	af00      	add	r7, sp, #0
 8016802:	607b      	str	r3, [r7, #4]
 8016804:	4603      	mov	r3, r0
 8016806:	73fb      	strb	r3, [r7, #15]
 8016808:	460b      	mov	r3, r1
 801680a:	81bb      	strh	r3, [r7, #12]
 801680c:	4613      	mov	r3, r2
 801680e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8016810:	89bb      	ldrh	r3, [r7, #12]
 8016812:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d105      	bne.n	8016826 <tcp_pbuf_prealloc+0x2a>
 801681a:	4b30      	ldr	r3, [pc, #192]	@ (80168dc <tcp_pbuf_prealloc+0xe0>)
 801681c:	22e8      	movs	r2, #232	@ 0xe8
 801681e:	4930      	ldr	r1, [pc, #192]	@ (80168e0 <tcp_pbuf_prealloc+0xe4>)
 8016820:	4830      	ldr	r0, [pc, #192]	@ (80168e4 <tcp_pbuf_prealloc+0xe8>)
 8016822:	f005 ff15 	bl	801c650 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016826:	6a3b      	ldr	r3, [r7, #32]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d105      	bne.n	8016838 <tcp_pbuf_prealloc+0x3c>
 801682c:	4b2b      	ldr	r3, [pc, #172]	@ (80168dc <tcp_pbuf_prealloc+0xe0>)
 801682e:	22e9      	movs	r2, #233	@ 0xe9
 8016830:	492d      	ldr	r1, [pc, #180]	@ (80168e8 <tcp_pbuf_prealloc+0xec>)
 8016832:	482c      	ldr	r0, [pc, #176]	@ (80168e4 <tcp_pbuf_prealloc+0xe8>)
 8016834:	f005 ff0c 	bl	801c650 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016838:	89ba      	ldrh	r2, [r7, #12]
 801683a:	897b      	ldrh	r3, [r7, #10]
 801683c:	429a      	cmp	r2, r3
 801683e:	d221      	bcs.n	8016884 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016840:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016844:	f003 0302 	and.w	r3, r3, #2
 8016848:	2b00      	cmp	r3, #0
 801684a:	d111      	bne.n	8016870 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801684c:	6a3b      	ldr	r3, [r7, #32]
 801684e:	8b5b      	ldrh	r3, [r3, #26]
 8016850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016854:	2b00      	cmp	r3, #0
 8016856:	d115      	bne.n	8016884 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8016858:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801685c:	2b00      	cmp	r3, #0
 801685e:	d007      	beq.n	8016870 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016860:	6a3b      	ldr	r3, [r7, #32]
 8016862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8016864:	2b00      	cmp	r3, #0
 8016866:	d103      	bne.n	8016870 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8016868:	6a3b      	ldr	r3, [r7, #32]
 801686a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801686c:	2b00      	cmp	r3, #0
 801686e:	d009      	beq.n	8016884 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016870:	89bb      	ldrh	r3, [r7, #12]
 8016872:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8016876:	f023 0203 	bic.w	r2, r3, #3
 801687a:	897b      	ldrh	r3, [r7, #10]
 801687c:	4293      	cmp	r3, r2
 801687e:	bf28      	it	cs
 8016880:	4613      	movcs	r3, r2
 8016882:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016884:	8af9      	ldrh	r1, [r7, #22]
 8016886:	7bfb      	ldrb	r3, [r7, #15]
 8016888:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801688c:	4618      	mov	r0, r3
 801688e:	f7fa ffa1 	bl	80117d4 <pbuf_alloc>
 8016892:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d101      	bne.n	801689e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801689a:	2300      	movs	r3, #0
 801689c:	e019      	b.n	80168d2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801689e:	693b      	ldr	r3, [r7, #16]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d006      	beq.n	80168b4 <tcp_pbuf_prealloc+0xb8>
 80168a6:	4b0d      	ldr	r3, [pc, #52]	@ (80168dc <tcp_pbuf_prealloc+0xe0>)
 80168a8:	f240 120b 	movw	r2, #267	@ 0x10b
 80168ac:	490f      	ldr	r1, [pc, #60]	@ (80168ec <tcp_pbuf_prealloc+0xf0>)
 80168ae:	480d      	ldr	r0, [pc, #52]	@ (80168e4 <tcp_pbuf_prealloc+0xe8>)
 80168b0:	f005 fece 	bl	801c650 <iprintf>
  *oversize = p->len - length;
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	895a      	ldrh	r2, [r3, #10]
 80168b8:	89bb      	ldrh	r3, [r7, #12]
 80168ba:	1ad3      	subs	r3, r2, r3
 80168bc:	b29a      	uxth	r2, r3
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	89ba      	ldrh	r2, [r7, #12]
 80168c6:	811a      	strh	r2, [r3, #8]
 80168c8:	693b      	ldr	r3, [r7, #16]
 80168ca:	891a      	ldrh	r2, [r3, #8]
 80168cc:	693b      	ldr	r3, [r7, #16]
 80168ce:	815a      	strh	r2, [r3, #10]
  return p;
 80168d0:	693b      	ldr	r3, [r7, #16]
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3718      	adds	r7, #24
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
 80168da:	bf00      	nop
 80168dc:	0801fce4 	.word	0x0801fce4
 80168e0:	0801fd9c 	.word	0x0801fd9c
 80168e4:	0801fd38 	.word	0x0801fd38
 80168e8:	0801fdc0 	.word	0x0801fdc0
 80168ec:	0801fde0 	.word	0x0801fde0

080168f0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	460b      	mov	r3, r1
 80168fa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d106      	bne.n	8016910 <tcp_write_checks+0x20>
 8016902:	4b33      	ldr	r3, [pc, #204]	@ (80169d0 <tcp_write_checks+0xe0>)
 8016904:	f240 1233 	movw	r2, #307	@ 0x133
 8016908:	4932      	ldr	r1, [pc, #200]	@ (80169d4 <tcp_write_checks+0xe4>)
 801690a:	4833      	ldr	r0, [pc, #204]	@ (80169d8 <tcp_write_checks+0xe8>)
 801690c:	f005 fea0 	bl	801c650 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	7d1b      	ldrb	r3, [r3, #20]
 8016914:	2b04      	cmp	r3, #4
 8016916:	d00e      	beq.n	8016936 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801691c:	2b07      	cmp	r3, #7
 801691e:	d00a      	beq.n	8016936 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016924:	2b02      	cmp	r3, #2
 8016926:	d006      	beq.n	8016936 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801692c:	2b03      	cmp	r3, #3
 801692e:	d002      	beq.n	8016936 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8016930:	f06f 030a 	mvn.w	r3, #10
 8016934:	e048      	b.n	80169c8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016936:	887b      	ldrh	r3, [r7, #2]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d101      	bne.n	8016940 <tcp_write_checks+0x50>
    return ERR_OK;
 801693c:	2300      	movs	r3, #0
 801693e:	e043      	b.n	80169c8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016946:	887a      	ldrh	r2, [r7, #2]
 8016948:	429a      	cmp	r2, r3
 801694a:	d909      	bls.n	8016960 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	8b5b      	ldrh	r3, [r3, #26]
 8016950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016954:	b29a      	uxth	r2, r3
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801695a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801695e:	e033      	b.n	80169c8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016966:	2b08      	cmp	r3, #8
 8016968:	d909      	bls.n	801697e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	8b5b      	ldrh	r3, [r3, #26]
 801696e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016972:	b29a      	uxth	r2, r3
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801697c:	e024      	b.n	80169c8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016984:	2b00      	cmp	r3, #0
 8016986:	d00f      	beq.n	80169a8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801698c:	2b00      	cmp	r3, #0
 801698e:	d11a      	bne.n	80169c6 <tcp_write_checks+0xd6>
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016994:	2b00      	cmp	r3, #0
 8016996:	d116      	bne.n	80169c6 <tcp_write_checks+0xd6>
 8016998:	4b0d      	ldr	r3, [pc, #52]	@ (80169d0 <tcp_write_checks+0xe0>)
 801699a:	f240 1255 	movw	r2, #341	@ 0x155
 801699e:	490f      	ldr	r1, [pc, #60]	@ (80169dc <tcp_write_checks+0xec>)
 80169a0:	480d      	ldr	r0, [pc, #52]	@ (80169d8 <tcp_write_checks+0xe8>)
 80169a2:	f005 fe55 	bl	801c650 <iprintf>
 80169a6:	e00e      	b.n	80169c6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d103      	bne.n	80169b8 <tcp_write_checks+0xc8>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d006      	beq.n	80169c6 <tcp_write_checks+0xd6>
 80169b8:	4b05      	ldr	r3, [pc, #20]	@ (80169d0 <tcp_write_checks+0xe0>)
 80169ba:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80169be:	4908      	ldr	r1, [pc, #32]	@ (80169e0 <tcp_write_checks+0xf0>)
 80169c0:	4805      	ldr	r0, [pc, #20]	@ (80169d8 <tcp_write_checks+0xe8>)
 80169c2:	f005 fe45 	bl	801c650 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80169c6:	2300      	movs	r3, #0
}
 80169c8:	4618      	mov	r0, r3
 80169ca:	3708      	adds	r7, #8
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	0801fce4 	.word	0x0801fce4
 80169d4:	0801fdf4 	.word	0x0801fdf4
 80169d8:	0801fd38 	.word	0x0801fd38
 80169dc:	0801fe14 	.word	0x0801fe14
 80169e0:	0801fe50 	.word	0x0801fe50

080169e4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80169e4:	b590      	push	{r4, r7, lr}
 80169e6:	b09d      	sub	sp, #116	@ 0x74
 80169e8:	af04      	add	r7, sp, #16
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	4611      	mov	r1, r2
 80169f0:	461a      	mov	r2, r3
 80169f2:	460b      	mov	r3, r1
 80169f4:	80fb      	strh	r3, [r7, #6]
 80169f6:	4613      	mov	r3, r2
 80169f8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80169fa:	2300      	movs	r3, #0
 80169fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80169fe:	2300      	movs	r3, #0
 8016a00:	643b      	str	r3, [r7, #64]	@ 0x40
 8016a02:	2300      	movs	r3, #0
 8016a04:	657b      	str	r3, [r7, #84]	@ 0x54
 8016a06:	2300      	movs	r3, #0
 8016a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8016a0e:	2300      	movs	r3, #0
 8016a10:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016a14:	2300      	movs	r3, #0
 8016a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8016a24:	2300      	movs	r3, #0
 8016a26:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d109      	bne.n	8016a4a <tcp_write+0x66>
 8016a36:	4b9c      	ldr	r3, [pc, #624]	@ (8016ca8 <tcp_write+0x2c4>)
 8016a38:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8016a3c:	499b      	ldr	r1, [pc, #620]	@ (8016cac <tcp_write+0x2c8>)
 8016a3e:	489c      	ldr	r0, [pc, #624]	@ (8016cb0 <tcp_write+0x2cc>)
 8016a40:	f005 fe06 	bl	801c650 <iprintf>
 8016a44:	f06f 030f 	mvn.w	r3, #15
 8016a48:	e379      	b.n	801713e <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8016a50:	085b      	lsrs	r3, r3, #1
 8016a52:	b29a      	uxth	r2, r3
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	bf28      	it	cs
 8016a5c:	4613      	movcs	r3, r2
 8016a5e:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8016a60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d102      	bne.n	8016a6c <tcp_write+0x88>
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a6a:	e000      	b.n	8016a6e <tcp_write+0x8a>
 8016a6c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016a6e:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d109      	bne.n	8016a8a <tcp_write+0xa6>
 8016a76:	4b8c      	ldr	r3, [pc, #560]	@ (8016ca8 <tcp_write+0x2c4>)
 8016a78:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8016a7c:	498d      	ldr	r1, [pc, #564]	@ (8016cb4 <tcp_write+0x2d0>)
 8016a7e:	488c      	ldr	r0, [pc, #560]	@ (8016cb0 <tcp_write+0x2cc>)
 8016a80:	f005 fde6 	bl	801c650 <iprintf>
 8016a84:	f06f 030f 	mvn.w	r3, #15
 8016a88:	e359      	b.n	801713e <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016a8a:	88fb      	ldrh	r3, [r7, #6]
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	68f8      	ldr	r0, [r7, #12]
 8016a90:	f7ff ff2e 	bl	80168f0 <tcp_write_checks>
 8016a94:	4603      	mov	r3, r0
 8016a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8016a9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d002      	beq.n	8016aa8 <tcp_write+0xc4>
    return err;
 8016aa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016aa6:	e34a      	b.n	801713e <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016aae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	f000 8127 	beq.w	8016d10 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ac6:	643b      	str	r3, [r7, #64]	@ 0x40
 8016ac8:	e002      	b.n	8016ad0 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8016aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d1f8      	bne.n	8016aca <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ada:	7b1b      	ldrb	r3, [r3, #12]
 8016adc:	009b      	lsls	r3, r3, #2
 8016ade:	b29b      	uxth	r3, r3
 8016ae0:	f003 0304 	and.w	r3, r3, #4
 8016ae4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016ae6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016aea:	891b      	ldrh	r3, [r3, #8]
 8016aec:	4619      	mov	r1, r3
 8016aee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016af0:	440b      	add	r3, r1
 8016af2:	429a      	cmp	r2, r3
 8016af4:	da06      	bge.n	8016b04 <tcp_write+0x120>
 8016af6:	4b6c      	ldr	r3, [pc, #432]	@ (8016ca8 <tcp_write+0x2c4>)
 8016af8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016afc:	496e      	ldr	r1, [pc, #440]	@ (8016cb8 <tcp_write+0x2d4>)
 8016afe:	486c      	ldr	r0, [pc, #432]	@ (8016cb0 <tcp_write+0x2cc>)
 8016b00:	f005 fda6 	bl	801c650 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016b06:	891a      	ldrh	r2, [r3, #8]
 8016b08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016b0a:	4413      	add	r3, r2
 8016b0c:	b29b      	uxth	r3, r3
 8016b0e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016b10:	1ad3      	subs	r3, r2, r3
 8016b12:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 8016b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016b1e:	895b      	ldrh	r3, [r3, #10]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d006      	beq.n	8016b32 <tcp_write+0x14e>
 8016b24:	4b60      	ldr	r3, [pc, #384]	@ (8016ca8 <tcp_write+0x2c4>)
 8016b26:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8016b2a:	4964      	ldr	r1, [pc, #400]	@ (8016cbc <tcp_write+0x2d8>)
 8016b2c:	4860      	ldr	r0, [pc, #384]	@ (8016cb0 <tcp_write+0x2cc>)
 8016b2e:	f005 fd8f 	bl	801c650 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016b38:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8016b3a:	8afb      	ldrh	r3, [r7, #22]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d02e      	beq.n	8016b9e <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016b40:	8afb      	ldrh	r3, [r7, #22]
 8016b42:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8016b46:	429a      	cmp	r2, r3
 8016b48:	d206      	bcs.n	8016b58 <tcp_write+0x174>
 8016b4a:	4b57      	ldr	r3, [pc, #348]	@ (8016ca8 <tcp_write+0x2c4>)
 8016b4c:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8016b50:	495b      	ldr	r1, [pc, #364]	@ (8016cc0 <tcp_write+0x2dc>)
 8016b52:	4857      	ldr	r0, [pc, #348]	@ (8016cb0 <tcp_write+0x2cc>)
 8016b54:	f005 fd7c 	bl	801c650 <iprintf>
      seg = last_unsent;
 8016b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016b5a:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016b5c:	8afb      	ldrh	r3, [r7, #22]
 8016b5e:	88fa      	ldrh	r2, [r7, #6]
 8016b60:	4293      	cmp	r3, r2
 8016b62:	bf28      	it	cs
 8016b64:	4613      	movcs	r3, r2
 8016b66:	b29b      	uxth	r3, r3
 8016b68:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8016b6c:	4293      	cmp	r3, r2
 8016b6e:	bf28      	it	cs
 8016b70:	4613      	movcs	r3, r2
 8016b72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 8016b76:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016b7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016b7e:	4413      	add	r3, r2
 8016b80:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 8016b84:	8afa      	ldrh	r2, [r7, #22]
 8016b86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016b8a:	1ad3      	subs	r3, r2, r3
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8016b90:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8016b94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016b98:	1ad3      	subs	r3, r2, r3
 8016b9a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016b9e:	8afb      	ldrh	r3, [r7, #22]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d00b      	beq.n	8016bbc <tcp_write+0x1d8>
 8016ba4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016ba8:	88fb      	ldrh	r3, [r7, #6]
 8016baa:	429a      	cmp	r2, r3
 8016bac:	d006      	beq.n	8016bbc <tcp_write+0x1d8>
 8016bae:	4b3e      	ldr	r3, [pc, #248]	@ (8016ca8 <tcp_write+0x2c4>)
 8016bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016bb4:	4943      	ldr	r1, [pc, #268]	@ (8016cc4 <tcp_write+0x2e0>)
 8016bb6:	483e      	ldr	r0, [pc, #248]	@ (8016cb0 <tcp_write+0x2cc>)
 8016bb8:	f005 fd4a 	bl	801c650 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016bbc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016bc0:	88fb      	ldrh	r3, [r7, #6]
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	f080 8172 	bcs.w	8016eac <tcp_write+0x4c8>
 8016bc8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	f000 816d 	beq.w	8016eac <tcp_write+0x4c8>
 8016bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016bd4:	891b      	ldrh	r3, [r3, #8]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	f000 8168 	beq.w	8016eac <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016bdc:	88fa      	ldrh	r2, [r7, #6]
 8016bde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016be2:	1ad2      	subs	r2, r2, r3
 8016be4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8016be8:	4293      	cmp	r3, r2
 8016bea:	bfa8      	it	ge
 8016bec:	4613      	movge	r3, r2
 8016bee:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 8016bf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016bf2:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016bf4:	797b      	ldrb	r3, [r7, #5]
 8016bf6:	f003 0301 	and.w	r3, r3, #1
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d02b      	beq.n	8016c56 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016bfe:	f107 0016 	add.w	r0, r7, #22
 8016c02:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8016c06:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8016c08:	2301      	movs	r3, #1
 8016c0a:	9302      	str	r3, [sp, #8]
 8016c0c:	797b      	ldrb	r3, [r7, #5]
 8016c0e:	9301      	str	r3, [sp, #4]
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	9300      	str	r3, [sp, #0]
 8016c14:	4603      	mov	r3, r0
 8016c16:	2000      	movs	r0, #0
 8016c18:	f7ff fdf0 	bl	80167fc <tcp_pbuf_prealloc>
 8016c1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8016c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	f000 825a 	beq.w	80170da <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8016c26:	8afb      	ldrh	r3, [r7, #22]
 8016c28:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c2e:	6858      	ldr	r0, [r3, #4]
 8016c30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016c34:	68ba      	ldr	r2, [r7, #8]
 8016c36:	4413      	add	r3, r2
 8016c38:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016c3a:	4619      	mov	r1, r3
 8016c3c:	f005 fedd 	bl	801c9fa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016c40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016c42:	f7fb f939 	bl	8011eb8 <pbuf_clen>
 8016c46:	4603      	mov	r3, r0
 8016c48:	461a      	mov	r2, r3
 8016c4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016c4e:	4413      	add	r3, r2
 8016c50:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016c54:	e055      	b.n	8016d02 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c58:	685b      	ldr	r3, [r3, #4]
 8016c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016c5c:	e002      	b.n	8016c64 <tcp_write+0x280>
 8016c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d1f8      	bne.n	8016c5e <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c6e:	7b1b      	ldrb	r3, [r3, #12]
 8016c70:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d129      	bne.n	8016ccc <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c7a:	685b      	ldr	r3, [r3, #4]
 8016c7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016c7e:	8952      	ldrh	r2, [r2, #10]
 8016c80:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016c82:	68ba      	ldr	r2, [r7, #8]
 8016c84:	429a      	cmp	r2, r3
 8016c86:	d121      	bne.n	8016ccc <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016c88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d006      	beq.n	8016c9e <tcp_write+0x2ba>
 8016c90:	4b05      	ldr	r3, [pc, #20]	@ (8016ca8 <tcp_write+0x2c4>)
 8016c92:	f240 2231 	movw	r2, #561	@ 0x231
 8016c96:	490c      	ldr	r1, [pc, #48]	@ (8016cc8 <tcp_write+0x2e4>)
 8016c98:	4805      	ldr	r0, [pc, #20]	@ (8016cb0 <tcp_write+0x2cc>)
 8016c9a:	f005 fcd9 	bl	801c650 <iprintf>
          extendlen = seglen;
 8016c9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016ca0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8016ca4:	e02d      	b.n	8016d02 <tcp_write+0x31e>
 8016ca6:	bf00      	nop
 8016ca8:	0801fce4 	.word	0x0801fce4
 8016cac:	0801fe84 	.word	0x0801fe84
 8016cb0:	0801fd38 	.word	0x0801fd38
 8016cb4:	0801fe9c 	.word	0x0801fe9c
 8016cb8:	0801fed0 	.word	0x0801fed0
 8016cbc:	0801fee8 	.word	0x0801fee8
 8016cc0:	0801ff18 	.word	0x0801ff18
 8016cc4:	0801ff38 	.word	0x0801ff38
 8016cc8:	0801ff58 	.word	0x0801ff58
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016ccc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016cce:	2201      	movs	r2, #1
 8016cd0:	4619      	mov	r1, r3
 8016cd2:	2000      	movs	r0, #0
 8016cd4:	f7fa fd7e 	bl	80117d4 <pbuf_alloc>
 8016cd8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8016cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	f000 81fe 	beq.w	80170de <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016ce2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016ce6:	68ba      	ldr	r2, [r7, #8]
 8016ce8:	441a      	add	r2, r3
 8016cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016cec:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016cee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016cf0:	f7fb f8e2 	bl	8011eb8 <pbuf_clen>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016cfc:	4413      	add	r3, r2
 8016cfe:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016d02:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016d06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016d08:	4413      	add	r3, r2
 8016d0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8016d0e:	e0cd      	b.n	8016eac <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	f000 80c8 	beq.w	8016eac <tcp_write+0x4c8>
 8016d1c:	4b72      	ldr	r3, [pc, #456]	@ (8016ee8 <tcp_write+0x504>)
 8016d1e:	f240 224a 	movw	r2, #586	@ 0x24a
 8016d22:	4972      	ldr	r1, [pc, #456]	@ (8016eec <tcp_write+0x508>)
 8016d24:	4872      	ldr	r0, [pc, #456]	@ (8016ef0 <tcp_write+0x50c>)
 8016d26:	f005 fc93 	bl	801c650 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016d2a:	e0bf      	b.n	8016eac <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 8016d2c:	88fa      	ldrh	r2, [r7, #6]
 8016d2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016d32:	1ad3      	subs	r3, r2, r3
 8016d34:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8016d36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016d3e:	1ad3      	subs	r3, r2, r3
 8016d40:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016d42:	8bfa      	ldrh	r2, [r7, #30]
 8016d44:	8c3b      	ldrh	r3, [r7, #32]
 8016d46:	4293      	cmp	r3, r2
 8016d48:	bf28      	it	cs
 8016d4a:	4613      	movcs	r3, r2
 8016d4c:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016d4e:	797b      	ldrb	r3, [r7, #5]
 8016d50:	f003 0301 	and.w	r3, r3, #1
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d036      	beq.n	8016dc6 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016d58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016d5c:	b29a      	uxth	r2, r3
 8016d5e:	8bbb      	ldrh	r3, [r7, #28]
 8016d60:	4413      	add	r3, r2
 8016d62:	b299      	uxth	r1, r3
 8016d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	bf0c      	ite	eq
 8016d6a:	2301      	moveq	r3, #1
 8016d6c:	2300      	movne	r3, #0
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	f107 0016 	add.w	r0, r7, #22
 8016d74:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016d76:	9302      	str	r3, [sp, #8]
 8016d78:	797b      	ldrb	r3, [r7, #5]
 8016d7a:	9301      	str	r3, [sp, #4]
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	9300      	str	r3, [sp, #0]
 8016d80:	4603      	mov	r3, r0
 8016d82:	2036      	movs	r0, #54	@ 0x36
 8016d84:	f7ff fd3a 	bl	80167fc <tcp_pbuf_prealloc>
 8016d88:	6378      	str	r0, [r7, #52]	@ 0x34
 8016d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	f000 81a8 	beq.w	80170e2 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d94:	895b      	ldrh	r3, [r3, #10]
 8016d96:	8bba      	ldrh	r2, [r7, #28]
 8016d98:	429a      	cmp	r2, r3
 8016d9a:	d906      	bls.n	8016daa <tcp_write+0x3c6>
 8016d9c:	4b52      	ldr	r3, [pc, #328]	@ (8016ee8 <tcp_write+0x504>)
 8016d9e:	f240 2266 	movw	r2, #614	@ 0x266
 8016da2:	4954      	ldr	r1, [pc, #336]	@ (8016ef4 <tcp_write+0x510>)
 8016da4:	4852      	ldr	r0, [pc, #328]	@ (8016ef0 <tcp_write+0x50c>)
 8016da6:	f005 fc53 	bl	801c650 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016dac:	685a      	ldr	r2, [r3, #4]
 8016dae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016db2:	18d0      	adds	r0, r2, r3
 8016db4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016db8:	68ba      	ldr	r2, [r7, #8]
 8016dba:	4413      	add	r3, r2
 8016dbc:	8bba      	ldrh	r2, [r7, #28]
 8016dbe:	4619      	mov	r1, r3
 8016dc0:	f005 fe1b 	bl	801c9fa <memcpy>
 8016dc4:	e02f      	b.n	8016e26 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016dc6:	8afb      	ldrh	r3, [r7, #22]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d006      	beq.n	8016dda <tcp_write+0x3f6>
 8016dcc:	4b46      	ldr	r3, [pc, #280]	@ (8016ee8 <tcp_write+0x504>)
 8016dce:	f240 2271 	movw	r2, #625	@ 0x271
 8016dd2:	4949      	ldr	r1, [pc, #292]	@ (8016ef8 <tcp_write+0x514>)
 8016dd4:	4846      	ldr	r0, [pc, #280]	@ (8016ef0 <tcp_write+0x50c>)
 8016dd6:	f005 fc3b 	bl	801c650 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016dda:	8bbb      	ldrh	r3, [r7, #28]
 8016ddc:	2201      	movs	r2, #1
 8016dde:	4619      	mov	r1, r3
 8016de0:	2036      	movs	r0, #54	@ 0x36
 8016de2:	f7fa fcf7 	bl	80117d4 <pbuf_alloc>
 8016de6:	61b8      	str	r0, [r7, #24]
 8016de8:	69bb      	ldr	r3, [r7, #24]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	f000 817b 	beq.w	80170e6 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016df0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016df4:	68ba      	ldr	r2, [r7, #8]
 8016df6:	441a      	add	r2, r3
 8016df8:	69bb      	ldr	r3, [r7, #24]
 8016dfa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e06:	4619      	mov	r1, r3
 8016e08:	2036      	movs	r0, #54	@ 0x36
 8016e0a:	f7fa fce3 	bl	80117d4 <pbuf_alloc>
 8016e0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8016e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d103      	bne.n	8016e1e <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016e16:	69b8      	ldr	r0, [r7, #24]
 8016e18:	f7fa ffc0 	bl	8011d9c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016e1c:	e166      	b.n	80170ec <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016e1e:	69b9      	ldr	r1, [r7, #24]
 8016e20:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016e22:	f7fb f889 	bl	8011f38 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016e26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016e28:	f7fb f846 	bl	8011eb8 <pbuf_clen>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	461a      	mov	r2, r3
 8016e30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016e34:	4413      	add	r3, r2
 8016e36:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016e3a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8016e3e:	2b09      	cmp	r3, #9
 8016e40:	d903      	bls.n	8016e4a <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016e42:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016e44:	f7fa ffaa 	bl	8011d9c <pbuf_free>
      goto memerr;
 8016e48:	e150      	b.n	80170ec <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8016e4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8016e52:	441a      	add	r2, r3
 8016e54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016e58:	9300      	str	r3, [sp, #0]
 8016e5a:	4613      	mov	r3, r2
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016e60:	68f8      	ldr	r0, [r7, #12]
 8016e62:	f7ff fc2b 	bl	80166bc <tcp_create_segment>
 8016e66:	6578      	str	r0, [r7, #84]	@ 0x54
 8016e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	f000 813d 	beq.w	80170ea <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8016e70:	8afa      	ldrh	r2, [r7, #22]
 8016e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016e74:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d102      	bne.n	8016e82 <tcp_write+0x49e>
      queue = seg;
 8016e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016e80:	e00c      	b.n	8016e9c <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d106      	bne.n	8016e96 <tcp_write+0x4b2>
 8016e88:	4b17      	ldr	r3, [pc, #92]	@ (8016ee8 <tcp_write+0x504>)
 8016e8a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016e8e:	491b      	ldr	r1, [pc, #108]	@ (8016efc <tcp_write+0x518>)
 8016e90:	4817      	ldr	r0, [pc, #92]	@ (8016ef0 <tcp_write+0x50c>)
 8016e92:	f005 fbdd 	bl	801c650 <iprintf>
      prev_seg->next = seg;
 8016e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016e98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016e9a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016e9e:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016ea0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016ea4:	8bbb      	ldrh	r3, [r7, #28]
 8016ea6:	4413      	add	r3, r2
 8016ea8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 8016eac:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8016eb0:	88fb      	ldrh	r3, [r7, #6]
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	f4ff af3a 	bcc.w	8016d2c <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8016eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d00b      	beq.n	8016ed6 <tcp_write+0x4f2>
 8016ebe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d007      	beq.n	8016ed6 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8016ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ec8:	895a      	ldrh	r2, [r3, #10]
 8016eca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8016ece:	4413      	add	r3, r2
 8016ed0:	b29a      	uxth	r2, r3
 8016ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ed4:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016ed6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d052      	beq.n	8016f84 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ee0:	685b      	ldr	r3, [r3, #4]
 8016ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8016ee4:	e02e      	b.n	8016f44 <tcp_write+0x560>
 8016ee6:	bf00      	nop
 8016ee8:	0801fce4 	.word	0x0801fce4
 8016eec:	0801ff84 	.word	0x0801ff84
 8016ef0:	0801fd38 	.word	0x0801fd38
 8016ef4:	0801ffb4 	.word	0x0801ffb4
 8016ef8:	0801fff4 	.word	0x0801fff4
 8016efc:	08020004 	.word	0x08020004
      p->tot_len += oversize_used;
 8016f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f02:	891a      	ldrh	r2, [r3, #8]
 8016f04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016f08:	4413      	add	r3, r2
 8016f0a:	b29a      	uxth	r2, r3
 8016f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f0e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d112      	bne.n	8016f3e <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f1a:	685b      	ldr	r3, [r3, #4]
 8016f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f1e:	8952      	ldrh	r2, [r2, #10]
 8016f20:	4413      	add	r3, r2
 8016f22:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016f26:	68b9      	ldr	r1, [r7, #8]
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f005 fd66 	bl	801c9fa <memcpy>
        p->len += oversize_used;
 8016f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f30:	895a      	ldrh	r2, [r3, #10]
 8016f32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016f36:	4413      	add	r3, r2
 8016f38:	b29a      	uxth	r2, r3
 8016f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f3c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d1da      	bne.n	8016f00 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 8016f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f4c:	891a      	ldrh	r2, [r3, #8]
 8016f4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016f52:	4413      	add	r3, r2
 8016f54:	b29a      	uxth	r2, r3
 8016f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f58:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8016f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f5c:	895b      	ldrh	r3, [r3, #10]
 8016f5e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016f62:	429a      	cmp	r2, r3
 8016f64:	d906      	bls.n	8016f74 <tcp_write+0x590>
 8016f66:	4b78      	ldr	r3, [pc, #480]	@ (8017148 <tcp_write+0x764>)
 8016f68:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8016f6c:	4977      	ldr	r1, [pc, #476]	@ (801714c <tcp_write+0x768>)
 8016f6e:	4878      	ldr	r0, [pc, #480]	@ (8017150 <tcp_write+0x76c>)
 8016f70:	f005 fb6e 	bl	801c650 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8016f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f76:	895a      	ldrh	r2, [r3, #10]
 8016f78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016f7c:	1ad3      	subs	r3, r2, r3
 8016f7e:	b29a      	uxth	r2, r3
 8016f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f82:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016f84:	8afa      	ldrh	r2, [r7, #22]
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d018      	beq.n	8016fc4 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d106      	bne.n	8016fa6 <tcp_write+0x5c2>
 8016f98:	4b6b      	ldr	r3, [pc, #428]	@ (8017148 <tcp_write+0x764>)
 8016f9a:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8016f9e:	496d      	ldr	r1, [pc, #436]	@ (8017154 <tcp_write+0x770>)
 8016fa0:	486b      	ldr	r0, [pc, #428]	@ (8017150 <tcp_write+0x76c>)
 8016fa2:	f005 fb55 	bl	801c650 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7fa ffc3 	bl	8011f38 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fb4:	891a      	ldrh	r2, [r3, #8]
 8016fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fb8:	891b      	ldrh	r3, [r3, #8]
 8016fba:	4413      	add	r3, r2
 8016fbc:	b29a      	uxth	r2, r3
 8016fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fc0:	811a      	strh	r2, [r3, #8]
 8016fc2:	e03c      	b.n	801703e <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8016fc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d038      	beq.n	801703e <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d003      	beq.n	8016fda <tcp_write+0x5f6>
 8016fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d106      	bne.n	8016fe8 <tcp_write+0x604>
 8016fda:	4b5b      	ldr	r3, [pc, #364]	@ (8017148 <tcp_write+0x764>)
 8016fdc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8016fe0:	495d      	ldr	r1, [pc, #372]	@ (8017158 <tcp_write+0x774>)
 8016fe2:	485b      	ldr	r0, [pc, #364]	@ (8017150 <tcp_write+0x76c>)
 8016fe4:	f005 fb34 	bl	801c650 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fea:	685b      	ldr	r3, [r3, #4]
 8016fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016fee:	e00a      	b.n	8017006 <tcp_write+0x622>
      p->tot_len += extendlen;
 8016ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ff2:	891a      	ldrh	r2, [r3, #8]
 8016ff4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8016ff8:	4413      	add	r3, r2
 8016ffa:	b29a      	uxth	r2, r3
 8016ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ffe:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d1f0      	bne.n	8016ff0 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 801700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017010:	891a      	ldrh	r2, [r3, #8]
 8017012:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8017016:	4413      	add	r3, r2
 8017018:	b29a      	uxth	r2, r3
 801701a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801701c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017020:	895a      	ldrh	r2, [r3, #10]
 8017022:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8017026:	4413      	add	r3, r2
 8017028:	b29a      	uxth	r2, r3
 801702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801702c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801702e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017030:	891a      	ldrh	r2, [r3, #8]
 8017032:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8017036:	4413      	add	r3, r2
 8017038:	b29a      	uxth	r2, r3
 801703a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801703c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801703e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017040:	2b00      	cmp	r3, #0
 8017042:	d103      	bne.n	801704c <tcp_write+0x668>
    pcb->unsent = queue;
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017048:	66da      	str	r2, [r3, #108]	@ 0x6c
 801704a:	e002      	b.n	8017052 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 801704c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801704e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017050:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017056:	88fb      	ldrh	r3, [r7, #6]
 8017058:	441a      	add	r2, r3
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017064:	88fb      	ldrh	r3, [r7, #6]
 8017066:	1ad3      	subs	r3, r2, r3
 8017068:	b29a      	uxth	r2, r3
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8017076:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017080:	2b00      	cmp	r3, #0
 8017082:	d00e      	beq.n	80170a2 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017088:	2b00      	cmp	r3, #0
 801708a:	d10a      	bne.n	80170a2 <tcp_write+0x6be>
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017090:	2b00      	cmp	r3, #0
 8017092:	d106      	bne.n	80170a2 <tcp_write+0x6be>
 8017094:	4b2c      	ldr	r3, [pc, #176]	@ (8017148 <tcp_write+0x764>)
 8017096:	f240 3212 	movw	r2, #786	@ 0x312
 801709a:	4930      	ldr	r1, [pc, #192]	@ (801715c <tcp_write+0x778>)
 801709c:	482c      	ldr	r0, [pc, #176]	@ (8017150 <tcp_write+0x76c>)
 801709e:	f005 fad7 	bl	801c650 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80170a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d016      	beq.n	80170d6 <tcp_write+0x6f2>
 80170a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170aa:	691b      	ldr	r3, [r3, #16]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d012      	beq.n	80170d6 <tcp_write+0x6f2>
 80170b0:	797b      	ldrb	r3, [r7, #5]
 80170b2:	f003 0302 	and.w	r3, r3, #2
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d10d      	bne.n	80170d6 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80170ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170bc:	691b      	ldr	r3, [r3, #16]
 80170be:	899b      	ldrh	r3, [r3, #12]
 80170c0:	b29c      	uxth	r4, r3
 80170c2:	2008      	movs	r0, #8
 80170c4:	f7f9 f986 	bl	80103d4 <lwip_htons>
 80170c8:	4603      	mov	r3, r0
 80170ca:	461a      	mov	r2, r3
 80170cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80170ce:	691b      	ldr	r3, [r3, #16]
 80170d0:	4322      	orrs	r2, r4
 80170d2:	b292      	uxth	r2, r2
 80170d4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80170d6:	2300      	movs	r3, #0
 80170d8:	e031      	b.n	801713e <tcp_write+0x75a>
          goto memerr;
 80170da:	bf00      	nop
 80170dc:	e006      	b.n	80170ec <tcp_write+0x708>
            goto memerr;
 80170de:	bf00      	nop
 80170e0:	e004      	b.n	80170ec <tcp_write+0x708>
        goto memerr;
 80170e2:	bf00      	nop
 80170e4:	e002      	b.n	80170ec <tcp_write+0x708>
        goto memerr;
 80170e6:	bf00      	nop
 80170e8:	e000      	b.n	80170ec <tcp_write+0x708>
      goto memerr;
 80170ea:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	8b5b      	ldrh	r3, [r3, #26]
 80170f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170f4:	b29a      	uxth	r2, r3
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80170fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d002      	beq.n	8017106 <tcp_write+0x722>
    pbuf_free(concat_p);
 8017100:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017102:	f7fa fe4b 	bl	8011d9c <pbuf_free>
  }
  if (queue != NULL) {
 8017106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017108:	2b00      	cmp	r3, #0
 801710a:	d002      	beq.n	8017112 <tcp_write+0x72e>
    tcp_segs_free(queue);
 801710c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801710e:	f7fc fb13 	bl	8013738 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017118:	2b00      	cmp	r3, #0
 801711a:	d00e      	beq.n	801713a <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017120:	2b00      	cmp	r3, #0
 8017122:	d10a      	bne.n	801713a <tcp_write+0x756>
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017128:	2b00      	cmp	r3, #0
 801712a:	d106      	bne.n	801713a <tcp_write+0x756>
 801712c:	4b06      	ldr	r3, [pc, #24]	@ (8017148 <tcp_write+0x764>)
 801712e:	f240 3227 	movw	r2, #807	@ 0x327
 8017132:	490a      	ldr	r1, [pc, #40]	@ (801715c <tcp_write+0x778>)
 8017134:	4806      	ldr	r0, [pc, #24]	@ (8017150 <tcp_write+0x76c>)
 8017136:	f005 fa8b 	bl	801c650 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801713a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801713e:	4618      	mov	r0, r3
 8017140:	3764      	adds	r7, #100	@ 0x64
 8017142:	46bd      	mov	sp, r7
 8017144:	bd90      	pop	{r4, r7, pc}
 8017146:	bf00      	nop
 8017148:	0801fce4 	.word	0x0801fce4
 801714c:	08020018 	.word	0x08020018
 8017150:	0801fd38 	.word	0x0801fd38
 8017154:	08020044 	.word	0x08020044
 8017158:	0802007c 	.word	0x0802007c
 801715c:	080200b4 	.word	0x080200b4

08017160 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017160:	b590      	push	{r4, r7, lr}
 8017162:	b08b      	sub	sp, #44	@ 0x2c
 8017164:	af02      	add	r7, sp, #8
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	460b      	mov	r3, r1
 801716a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801716c:	2300      	movs	r3, #0
 801716e:	61bb      	str	r3, [r7, #24]
 8017170:	2300      	movs	r3, #0
 8017172:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017174:	2300      	movs	r3, #0
 8017176:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d106      	bne.n	801718c <tcp_split_unsent_seg+0x2c>
 801717e:	4b97      	ldr	r3, [pc, #604]	@ (80173dc <tcp_split_unsent_seg+0x27c>)
 8017180:	f240 324b 	movw	r2, #843	@ 0x34b
 8017184:	4996      	ldr	r1, [pc, #600]	@ (80173e0 <tcp_split_unsent_seg+0x280>)
 8017186:	4897      	ldr	r0, [pc, #604]	@ (80173e4 <tcp_split_unsent_seg+0x284>)
 8017188:	f005 fa62 	bl	801c650 <iprintf>

  useg = pcb->unsent;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017190:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017192:	697b      	ldr	r3, [r7, #20]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d102      	bne.n	801719e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801719c:	e119      	b.n	80173d2 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801719e:	887b      	ldrh	r3, [r7, #2]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d109      	bne.n	80171b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80171a4:	4b8d      	ldr	r3, [pc, #564]	@ (80173dc <tcp_split_unsent_seg+0x27c>)
 80171a6:	f240 3253 	movw	r2, #851	@ 0x353
 80171aa:	498f      	ldr	r1, [pc, #572]	@ (80173e8 <tcp_split_unsent_seg+0x288>)
 80171ac:	488d      	ldr	r0, [pc, #564]	@ (80173e4 <tcp_split_unsent_seg+0x284>)
 80171ae:	f005 fa4f 	bl	801c650 <iprintf>
    return ERR_VAL;
 80171b2:	f06f 0305 	mvn.w	r3, #5
 80171b6:	e10c      	b.n	80173d2 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	891b      	ldrh	r3, [r3, #8]
 80171bc:	887a      	ldrh	r2, [r7, #2]
 80171be:	429a      	cmp	r2, r3
 80171c0:	d301      	bcc.n	80171c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80171c2:	2300      	movs	r3, #0
 80171c4:	e105      	b.n	80173d2 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80171ca:	887a      	ldrh	r2, [r7, #2]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d906      	bls.n	80171de <tcp_split_unsent_seg+0x7e>
 80171d0:	4b82      	ldr	r3, [pc, #520]	@ (80173dc <tcp_split_unsent_seg+0x27c>)
 80171d2:	f240 325b 	movw	r2, #859	@ 0x35b
 80171d6:	4985      	ldr	r1, [pc, #532]	@ (80173ec <tcp_split_unsent_seg+0x28c>)
 80171d8:	4882      	ldr	r0, [pc, #520]	@ (80173e4 <tcp_split_unsent_seg+0x284>)
 80171da:	f005 fa39 	bl	801c650 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	891b      	ldrh	r3, [r3, #8]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d106      	bne.n	80171f4 <tcp_split_unsent_seg+0x94>
 80171e6:	4b7d      	ldr	r3, [pc, #500]	@ (80173dc <tcp_split_unsent_seg+0x27c>)
 80171e8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80171ec:	4980      	ldr	r1, [pc, #512]	@ (80173f0 <tcp_split_unsent_seg+0x290>)
 80171ee:	487d      	ldr	r0, [pc, #500]	@ (80173e4 <tcp_split_unsent_seg+0x284>)
 80171f0:	f005 fa2e 	bl	801c650 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80171f4:	697b      	ldr	r3, [r7, #20]
 80171f6:	7b1b      	ldrb	r3, [r3, #12]
 80171f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80171fa:	7bfb      	ldrb	r3, [r7, #15]
 80171fc:	009b      	lsls	r3, r3, #2
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	f003 0304 	and.w	r3, r3, #4
 8017204:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017206:	697b      	ldr	r3, [r7, #20]
 8017208:	891a      	ldrh	r2, [r3, #8]
 801720a:	887b      	ldrh	r3, [r7, #2]
 801720c:	1ad3      	subs	r3, r2, r3
 801720e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017210:	7bbb      	ldrb	r3, [r7, #14]
 8017212:	b29a      	uxth	r2, r3
 8017214:	89bb      	ldrh	r3, [r7, #12]
 8017216:	4413      	add	r3, r2
 8017218:	b29b      	uxth	r3, r3
 801721a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801721e:	4619      	mov	r1, r3
 8017220:	2036      	movs	r0, #54	@ 0x36
 8017222:	f7fa fad7 	bl	80117d4 <pbuf_alloc>
 8017226:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017228:	693b      	ldr	r3, [r7, #16]
 801722a:	2b00      	cmp	r3, #0
 801722c:	f000 80ba 	beq.w	80173a4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	891a      	ldrh	r2, [r3, #8]
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	891b      	ldrh	r3, [r3, #8]
 801723a:	1ad3      	subs	r3, r2, r3
 801723c:	b29a      	uxth	r2, r3
 801723e:	887b      	ldrh	r3, [r7, #2]
 8017240:	4413      	add	r3, r2
 8017242:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017244:	697b      	ldr	r3, [r7, #20]
 8017246:	6858      	ldr	r0, [r3, #4]
 8017248:	693b      	ldr	r3, [r7, #16]
 801724a:	685a      	ldr	r2, [r3, #4]
 801724c:	7bbb      	ldrb	r3, [r7, #14]
 801724e:	18d1      	adds	r1, r2, r3
 8017250:	897b      	ldrh	r3, [r7, #10]
 8017252:	89ba      	ldrh	r2, [r7, #12]
 8017254:	f7fa ffa8 	bl	80121a8 <pbuf_copy_partial>
 8017258:	4603      	mov	r3, r0
 801725a:	461a      	mov	r2, r3
 801725c:	89bb      	ldrh	r3, [r7, #12]
 801725e:	4293      	cmp	r3, r2
 8017260:	f040 80a2 	bne.w	80173a8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017264:	697b      	ldr	r3, [r7, #20]
 8017266:	691b      	ldr	r3, [r3, #16]
 8017268:	899b      	ldrh	r3, [r3, #12]
 801726a:	b29b      	uxth	r3, r3
 801726c:	4618      	mov	r0, r3
 801726e:	f7f9 f8b1 	bl	80103d4 <lwip_htons>
 8017272:	4603      	mov	r3, r0
 8017274:	b2db      	uxtb	r3, r3
 8017276:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801727a:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801727c:	2300      	movs	r3, #0
 801727e:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8017280:	7ffb      	ldrb	r3, [r7, #31]
 8017282:	f003 0308 	and.w	r3, r3, #8
 8017286:	2b00      	cmp	r3, #0
 8017288:	d007      	beq.n	801729a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801728a:	7ffb      	ldrb	r3, [r7, #31]
 801728c:	f023 0308 	bic.w	r3, r3, #8
 8017290:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8017292:	7fbb      	ldrb	r3, [r7, #30]
 8017294:	f043 0308 	orr.w	r3, r3, #8
 8017298:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801729a:	7ffb      	ldrb	r3, [r7, #31]
 801729c:	f003 0301 	and.w	r3, r3, #1
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d007      	beq.n	80172b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80172a4:	7ffb      	ldrb	r3, [r7, #31]
 80172a6:	f023 0301 	bic.w	r3, r3, #1
 80172aa:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 80172ac:	7fbb      	ldrb	r3, [r7, #30]
 80172ae:	f043 0301 	orr.w	r3, r3, #1
 80172b2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	691b      	ldr	r3, [r3, #16]
 80172b8:	685b      	ldr	r3, [r3, #4]
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7f9 f8a0 	bl	8010400 <lwip_htonl>
 80172c0:	4602      	mov	r2, r0
 80172c2:	887b      	ldrh	r3, [r7, #2]
 80172c4:	18d1      	adds	r1, r2, r3
 80172c6:	7fba      	ldrb	r2, [r7, #30]
 80172c8:	7bfb      	ldrb	r3, [r7, #15]
 80172ca:	9300      	str	r3, [sp, #0]
 80172cc:	460b      	mov	r3, r1
 80172ce:	6939      	ldr	r1, [r7, #16]
 80172d0:	6878      	ldr	r0, [r7, #4]
 80172d2:	f7ff f9f3 	bl	80166bc <tcp_create_segment>
 80172d6:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 80172d8:	69bb      	ldr	r3, [r7, #24]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d066      	beq.n	80173ac <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	685b      	ldr	r3, [r3, #4]
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7fa fde8 	bl	8011eb8 <pbuf_clen>
 80172e8:	4603      	mov	r3, r0
 80172ea:	461a      	mov	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80172f2:	1a9b      	subs	r3, r3, r2
 80172f4:	b29a      	uxth	r2, r3
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	6858      	ldr	r0, [r3, #4]
 8017300:	697b      	ldr	r3, [r7, #20]
 8017302:	685b      	ldr	r3, [r3, #4]
 8017304:	891a      	ldrh	r2, [r3, #8]
 8017306:	89bb      	ldrh	r3, [r7, #12]
 8017308:	1ad3      	subs	r3, r2, r3
 801730a:	b29b      	uxth	r3, r3
 801730c:	4619      	mov	r1, r3
 801730e:	f7fa fbbf 	bl	8011a90 <pbuf_realloc>
  useg->len -= remainder;
 8017312:	697b      	ldr	r3, [r7, #20]
 8017314:	891a      	ldrh	r2, [r3, #8]
 8017316:	89bb      	ldrh	r3, [r7, #12]
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	b29a      	uxth	r2, r3
 801731c:	697b      	ldr	r3, [r7, #20]
 801731e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017320:	697b      	ldr	r3, [r7, #20]
 8017322:	691b      	ldr	r3, [r3, #16]
 8017324:	899b      	ldrh	r3, [r3, #12]
 8017326:	b29c      	uxth	r4, r3
 8017328:	7ffb      	ldrb	r3, [r7, #31]
 801732a:	b29b      	uxth	r3, r3
 801732c:	4618      	mov	r0, r3
 801732e:	f7f9 f851 	bl	80103d4 <lwip_htons>
 8017332:	4603      	mov	r3, r0
 8017334:	461a      	mov	r2, r3
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	691b      	ldr	r3, [r3, #16]
 801733a:	4322      	orrs	r2, r4
 801733c:	b292      	uxth	r2, r2
 801733e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8017340:	697b      	ldr	r3, [r7, #20]
 8017342:	2200      	movs	r2, #0
 8017344:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017346:	697b      	ldr	r3, [r7, #20]
 8017348:	685b      	ldr	r3, [r3, #4]
 801734a:	4618      	mov	r0, r3
 801734c:	f7fa fdb4 	bl	8011eb8 <pbuf_clen>
 8017350:	4603      	mov	r3, r0
 8017352:	461a      	mov	r2, r3
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801735a:	4413      	add	r3, r2
 801735c:	b29a      	uxth	r2, r3
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017364:	69bb      	ldr	r3, [r7, #24]
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	4618      	mov	r0, r3
 801736a:	f7fa fda5 	bl	8011eb8 <pbuf_clen>
 801736e:	4603      	mov	r3, r0
 8017370:	461a      	mov	r2, r3
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017378:	4413      	add	r3, r2
 801737a:	b29a      	uxth	r2, r3
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017382:	697b      	ldr	r3, [r7, #20]
 8017384:	681a      	ldr	r2, [r3, #0]
 8017386:	69bb      	ldr	r3, [r7, #24]
 8017388:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	69ba      	ldr	r2, [r7, #24]
 801738e:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017390:	69bb      	ldr	r3, [r7, #24]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d103      	bne.n	80173a0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	2200      	movs	r2, #0
 801739c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80173a0:	2300      	movs	r3, #0
 80173a2:	e016      	b.n	80173d2 <tcp_split_unsent_seg+0x272>
    goto memerr;
 80173a4:	bf00      	nop
 80173a6:	e002      	b.n	80173ae <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80173a8:	bf00      	nop
 80173aa:	e000      	b.n	80173ae <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80173ac:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80173ae:	69bb      	ldr	r3, [r7, #24]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d006      	beq.n	80173c2 <tcp_split_unsent_seg+0x262>
 80173b4:	4b09      	ldr	r3, [pc, #36]	@ (80173dc <tcp_split_unsent_seg+0x27c>)
 80173b6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80173ba:	490e      	ldr	r1, [pc, #56]	@ (80173f4 <tcp_split_unsent_seg+0x294>)
 80173bc:	4809      	ldr	r0, [pc, #36]	@ (80173e4 <tcp_split_unsent_seg+0x284>)
 80173be:	f005 f947 	bl	801c650 <iprintf>
  if (p != NULL) {
 80173c2:	693b      	ldr	r3, [r7, #16]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d002      	beq.n	80173ce <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 80173c8:	6938      	ldr	r0, [r7, #16]
 80173ca:	f7fa fce7 	bl	8011d9c <pbuf_free>
  }

  return ERR_MEM;
 80173ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3724      	adds	r7, #36	@ 0x24
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd90      	pop	{r4, r7, pc}
 80173da:	bf00      	nop
 80173dc:	0801fce4 	.word	0x0801fce4
 80173e0:	080200d4 	.word	0x080200d4
 80173e4:	0801fd38 	.word	0x0801fd38
 80173e8:	080200f8 	.word	0x080200f8
 80173ec:	0802011c 	.word	0x0802011c
 80173f0:	0802012c 	.word	0x0802012c
 80173f4:	0802013c 	.word	0x0802013c

080173f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80173f8:	b590      	push	{r4, r7, lr}
 80173fa:	b085      	sub	sp, #20
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d106      	bne.n	8017414 <tcp_send_fin+0x1c>
 8017406:	4b21      	ldr	r3, [pc, #132]	@ (801748c <tcp_send_fin+0x94>)
 8017408:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801740c:	4920      	ldr	r1, [pc, #128]	@ (8017490 <tcp_send_fin+0x98>)
 801740e:	4821      	ldr	r0, [pc, #132]	@ (8017494 <tcp_send_fin+0x9c>)
 8017410:	f005 f91e 	bl	801c650 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017418:	2b00      	cmp	r3, #0
 801741a:	d02e      	beq.n	801747a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017420:	60fb      	str	r3, [r7, #12]
 8017422:	e002      	b.n	801742a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d1f8      	bne.n	8017424 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	691b      	ldr	r3, [r3, #16]
 8017436:	899b      	ldrh	r3, [r3, #12]
 8017438:	b29b      	uxth	r3, r3
 801743a:	4618      	mov	r0, r3
 801743c:	f7f8 ffca 	bl	80103d4 <lwip_htons>
 8017440:	4603      	mov	r3, r0
 8017442:	b2db      	uxtb	r3, r3
 8017444:	f003 0307 	and.w	r3, r3, #7
 8017448:	2b00      	cmp	r3, #0
 801744a:	d116      	bne.n	801747a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	691b      	ldr	r3, [r3, #16]
 8017450:	899b      	ldrh	r3, [r3, #12]
 8017452:	b29c      	uxth	r4, r3
 8017454:	2001      	movs	r0, #1
 8017456:	f7f8 ffbd 	bl	80103d4 <lwip_htons>
 801745a:	4603      	mov	r3, r0
 801745c:	461a      	mov	r2, r3
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	691b      	ldr	r3, [r3, #16]
 8017462:	4322      	orrs	r2, r4
 8017464:	b292      	uxth	r2, r2
 8017466:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	8b5b      	ldrh	r3, [r3, #26]
 801746c:	f043 0320 	orr.w	r3, r3, #32
 8017470:	b29a      	uxth	r2, r3
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017476:	2300      	movs	r3, #0
 8017478:	e004      	b.n	8017484 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801747a:	2101      	movs	r1, #1
 801747c:	6878      	ldr	r0, [r7, #4]
 801747e:	f000 f80b 	bl	8017498 <tcp_enqueue_flags>
 8017482:	4603      	mov	r3, r0
}
 8017484:	4618      	mov	r0, r3
 8017486:	3714      	adds	r7, #20
 8017488:	46bd      	mov	sp, r7
 801748a:	bd90      	pop	{r4, r7, pc}
 801748c:	0801fce4 	.word	0x0801fce4
 8017490:	08020148 	.word	0x08020148
 8017494:	0801fd38 	.word	0x0801fd38

08017498 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b088      	sub	sp, #32
 801749c:	af02      	add	r7, sp, #8
 801749e:	6078      	str	r0, [r7, #4]
 80174a0:	460b      	mov	r3, r1
 80174a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80174a4:	2300      	movs	r3, #0
 80174a6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 80174a8:	2300      	movs	r3, #0
 80174aa:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80174ac:	78fb      	ldrb	r3, [r7, #3]
 80174ae:	f003 0303 	and.w	r3, r3, #3
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d106      	bne.n	80174c4 <tcp_enqueue_flags+0x2c>
 80174b6:	4b67      	ldr	r3, [pc, #412]	@ (8017654 <tcp_enqueue_flags+0x1bc>)
 80174b8:	f240 4211 	movw	r2, #1041	@ 0x411
 80174bc:	4966      	ldr	r1, [pc, #408]	@ (8017658 <tcp_enqueue_flags+0x1c0>)
 80174be:	4867      	ldr	r0, [pc, #412]	@ (801765c <tcp_enqueue_flags+0x1c4>)
 80174c0:	f005 f8c6 	bl	801c650 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d106      	bne.n	80174d8 <tcp_enqueue_flags+0x40>
 80174ca:	4b62      	ldr	r3, [pc, #392]	@ (8017654 <tcp_enqueue_flags+0x1bc>)
 80174cc:	f240 4213 	movw	r2, #1043	@ 0x413
 80174d0:	4963      	ldr	r1, [pc, #396]	@ (8017660 <tcp_enqueue_flags+0x1c8>)
 80174d2:	4862      	ldr	r0, [pc, #392]	@ (801765c <tcp_enqueue_flags+0x1c4>)
 80174d4:	f005 f8bc 	bl	801c650 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80174d8:	78fb      	ldrb	r3, [r7, #3]
 80174da:	f003 0302 	and.w	r3, r3, #2
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d001      	beq.n	80174e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80174e2:	2301      	movs	r3, #1
 80174e4:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80174e6:	7dfb      	ldrb	r3, [r7, #23]
 80174e8:	009b      	lsls	r3, r3, #2
 80174ea:	b2db      	uxtb	r3, r3
 80174ec:	f003 0304 	and.w	r3, r3, #4
 80174f0:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80174f2:	7dbb      	ldrb	r3, [r7, #22]
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80174fa:	4619      	mov	r1, r3
 80174fc:	2036      	movs	r0, #54	@ 0x36
 80174fe:	f7fa f969 	bl	80117d4 <pbuf_alloc>
 8017502:	60f8      	str	r0, [r7, #12]
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	2b00      	cmp	r3, #0
 8017508:	d109      	bne.n	801751e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	8b5b      	ldrh	r3, [r3, #26]
 801750e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017512:	b29a      	uxth	r2, r3
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801751c:	e095      	b.n	801764a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	895a      	ldrh	r2, [r3, #10]
 8017522:	7dbb      	ldrb	r3, [r7, #22]
 8017524:	b29b      	uxth	r3, r3
 8017526:	429a      	cmp	r2, r3
 8017528:	d206      	bcs.n	8017538 <tcp_enqueue_flags+0xa0>
 801752a:	4b4a      	ldr	r3, [pc, #296]	@ (8017654 <tcp_enqueue_flags+0x1bc>)
 801752c:	f240 4239 	movw	r2, #1081	@ 0x439
 8017530:	494c      	ldr	r1, [pc, #304]	@ (8017664 <tcp_enqueue_flags+0x1cc>)
 8017532:	484a      	ldr	r0, [pc, #296]	@ (801765c <tcp_enqueue_flags+0x1c4>)
 8017534:	f005 f88c 	bl	801c650 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801753c:	78fa      	ldrb	r2, [r7, #3]
 801753e:	7dfb      	ldrb	r3, [r7, #23]
 8017540:	9300      	str	r3, [sp, #0]
 8017542:	460b      	mov	r3, r1
 8017544:	68f9      	ldr	r1, [r7, #12]
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f7ff f8b8 	bl	80166bc <tcp_create_segment>
 801754c:	60b8      	str	r0, [r7, #8]
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d109      	bne.n	8017568 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	8b5b      	ldrh	r3, [r3, #26]
 8017558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801755c:	b29a      	uxth	r2, r3
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017566:	e070      	b.n	801764a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017568:	68bb      	ldr	r3, [r7, #8]
 801756a:	691b      	ldr	r3, [r3, #16]
 801756c:	f003 0303 	and.w	r3, r3, #3
 8017570:	2b00      	cmp	r3, #0
 8017572:	d006      	beq.n	8017582 <tcp_enqueue_flags+0xea>
 8017574:	4b37      	ldr	r3, [pc, #220]	@ (8017654 <tcp_enqueue_flags+0x1bc>)
 8017576:	f240 4242 	movw	r2, #1090	@ 0x442
 801757a:	493b      	ldr	r1, [pc, #236]	@ (8017668 <tcp_enqueue_flags+0x1d0>)
 801757c:	4837      	ldr	r0, [pc, #220]	@ (801765c <tcp_enqueue_flags+0x1c4>)
 801757e:	f005 f867 	bl	801c650 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017582:	68bb      	ldr	r3, [r7, #8]
 8017584:	891b      	ldrh	r3, [r3, #8]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d006      	beq.n	8017598 <tcp_enqueue_flags+0x100>
 801758a:	4b32      	ldr	r3, [pc, #200]	@ (8017654 <tcp_enqueue_flags+0x1bc>)
 801758c:	f240 4243 	movw	r2, #1091	@ 0x443
 8017590:	4936      	ldr	r1, [pc, #216]	@ (801766c <tcp_enqueue_flags+0x1d4>)
 8017592:	4832      	ldr	r0, [pc, #200]	@ (801765c <tcp_enqueue_flags+0x1c4>)
 8017594:	f005 f85c 	bl	801c650 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801759c:	2b00      	cmp	r3, #0
 801759e:	d103      	bne.n	80175a8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	68ba      	ldr	r2, [r7, #8]
 80175a4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80175a6:	e00d      	b.n	80175c4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175ac:	613b      	str	r3, [r7, #16]
 80175ae:	e002      	b.n	80175b6 <tcp_enqueue_flags+0x11e>
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	613b      	str	r3, [r7, #16]
 80175b6:	693b      	ldr	r3, [r7, #16]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d1f8      	bne.n	80175b0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	68ba      	ldr	r2, [r7, #8]
 80175c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2200      	movs	r2, #0
 80175c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80175cc:	78fb      	ldrb	r3, [r7, #3]
 80175ce:	f003 0302 	and.w	r3, r3, #2
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d104      	bne.n	80175e0 <tcp_enqueue_flags+0x148>
 80175d6:	78fb      	ldrb	r3, [r7, #3]
 80175d8:	f003 0301 	and.w	r3, r3, #1
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d004      	beq.n	80175ea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80175e4:	1c5a      	adds	r2, r3, #1
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80175ea:	78fb      	ldrb	r3, [r7, #3]
 80175ec:	f003 0301 	and.w	r3, r3, #1
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d006      	beq.n	8017602 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	8b5b      	ldrh	r3, [r3, #26]
 80175f8:	f043 0320 	orr.w	r3, r3, #32
 80175fc:	b29a      	uxth	r2, r3
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017602:	68bb      	ldr	r3, [r7, #8]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	4618      	mov	r0, r3
 8017608:	f7fa fc56 	bl	8011eb8 <pbuf_clen>
 801760c:	4603      	mov	r3, r0
 801760e:	461a      	mov	r2, r3
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017616:	4413      	add	r3, r2
 8017618:	b29a      	uxth	r2, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017626:	2b00      	cmp	r3, #0
 8017628:	d00e      	beq.n	8017648 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801762e:	2b00      	cmp	r3, #0
 8017630:	d10a      	bne.n	8017648 <tcp_enqueue_flags+0x1b0>
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017636:	2b00      	cmp	r3, #0
 8017638:	d106      	bne.n	8017648 <tcp_enqueue_flags+0x1b0>
 801763a:	4b06      	ldr	r3, [pc, #24]	@ (8017654 <tcp_enqueue_flags+0x1bc>)
 801763c:	f240 4265 	movw	r2, #1125	@ 0x465
 8017640:	490b      	ldr	r1, [pc, #44]	@ (8017670 <tcp_enqueue_flags+0x1d8>)
 8017642:	4806      	ldr	r0, [pc, #24]	@ (801765c <tcp_enqueue_flags+0x1c4>)
 8017644:	f005 f804 	bl	801c650 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017648:	2300      	movs	r3, #0
}
 801764a:	4618      	mov	r0, r3
 801764c:	3718      	adds	r7, #24
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}
 8017652:	bf00      	nop
 8017654:	0801fce4 	.word	0x0801fce4
 8017658:	08020164 	.word	0x08020164
 801765c:	0801fd38 	.word	0x0801fd38
 8017660:	080201bc 	.word	0x080201bc
 8017664:	080201dc 	.word	0x080201dc
 8017668:	08020218 	.word	0x08020218
 801766c:	08020230 	.word	0x08020230
 8017670:	0802025c 	.word	0x0802025c

08017674 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017674:	b5b0      	push	{r4, r5, r7, lr}
 8017676:	b08a      	sub	sp, #40	@ 0x28
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d106      	bne.n	8017690 <tcp_output+0x1c>
 8017682:	4b8a      	ldr	r3, [pc, #552]	@ (80178ac <tcp_output+0x238>)
 8017684:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8017688:	4989      	ldr	r1, [pc, #548]	@ (80178b0 <tcp_output+0x23c>)
 801768a:	488a      	ldr	r0, [pc, #552]	@ (80178b4 <tcp_output+0x240>)
 801768c:	f004 ffe0 	bl	801c650 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	7d1b      	ldrb	r3, [r3, #20]
 8017694:	2b01      	cmp	r3, #1
 8017696:	d106      	bne.n	80176a6 <tcp_output+0x32>
 8017698:	4b84      	ldr	r3, [pc, #528]	@ (80178ac <tcp_output+0x238>)
 801769a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801769e:	4986      	ldr	r1, [pc, #536]	@ (80178b8 <tcp_output+0x244>)
 80176a0:	4884      	ldr	r0, [pc, #528]	@ (80178b4 <tcp_output+0x240>)
 80176a2:	f004 ffd5 	bl	801c650 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80176a6:	4b85      	ldr	r3, [pc, #532]	@ (80178bc <tcp_output+0x248>)
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d101      	bne.n	80176b4 <tcp_output+0x40>
    return ERR_OK;
 80176b0:	2300      	movs	r3, #0
 80176b2:	e1d1      	b.n	8017a58 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80176c0:	4293      	cmp	r3, r2
 80176c2:	bf28      	it	cs
 80176c4:	4613      	movcs	r3, r2
 80176c6:	b29b      	uxth	r3, r3
 80176c8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80176ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80176d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d10b      	bne.n	80176ee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	8b5b      	ldrh	r3, [r3, #26]
 80176da:	f003 0302 	and.w	r3, r3, #2
 80176de:	2b00      	cmp	r3, #0
 80176e0:	f000 81ad 	beq.w	8017a3e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f000 fdd7 	bl	8018298 <tcp_send_empty_ack>
 80176ea:	4603      	mov	r3, r0
 80176ec:	e1b4      	b.n	8017a58 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80176ee:	6879      	ldr	r1, [r7, #4]
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	3304      	adds	r3, #4
 80176f4:	461a      	mov	r2, r3
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f7fe ffc4 	bl	8016684 <tcp_route>
 80176fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80176fe:	697b      	ldr	r3, [r7, #20]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d102      	bne.n	801770a <tcp_output+0x96>
    return ERR_RTE;
 8017704:	f06f 0303 	mvn.w	r3, #3
 8017708:	e1a6      	b.n	8017a58 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d003      	beq.n	8017718 <tcp_output+0xa4>
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d111      	bne.n	801773c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017718:	697b      	ldr	r3, [r7, #20]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d002      	beq.n	8017724 <tcp_output+0xb0>
 801771e:	697b      	ldr	r3, [r7, #20]
 8017720:	3304      	adds	r3, #4
 8017722:	e000      	b.n	8017726 <tcp_output+0xb2>
 8017724:	2300      	movs	r3, #0
 8017726:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017728:	693b      	ldr	r3, [r7, #16]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d102      	bne.n	8017734 <tcp_output+0xc0>
      return ERR_RTE;
 801772e:	f06f 0303 	mvn.w	r3, #3
 8017732:	e191      	b.n	8017a58 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017734:	693b      	ldr	r3, [r7, #16]
 8017736:	681a      	ldr	r2, [r3, #0]
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801773e:	691b      	ldr	r3, [r3, #16]
 8017740:	685b      	ldr	r3, [r3, #4]
 8017742:	4618      	mov	r0, r3
 8017744:	f7f8 fe5c 	bl	8010400 <lwip_htonl>
 8017748:	4602      	mov	r2, r0
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801774e:	1ad3      	subs	r3, r2, r3
 8017750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017752:	8912      	ldrh	r2, [r2, #8]
 8017754:	4413      	add	r3, r2
 8017756:	69ba      	ldr	r2, [r7, #24]
 8017758:	429a      	cmp	r2, r3
 801775a:	d227      	bcs.n	80177ac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017762:	461a      	mov	r2, r3
 8017764:	69bb      	ldr	r3, [r7, #24]
 8017766:	4293      	cmp	r3, r2
 8017768:	d114      	bne.n	8017794 <tcp_output+0x120>
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801776e:	2b00      	cmp	r3, #0
 8017770:	d110      	bne.n	8017794 <tcp_output+0x120>
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8017778:	2b00      	cmp	r3, #0
 801777a:	d10b      	bne.n	8017794 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2200      	movs	r2, #0
 8017780:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	2201      	movs	r2, #1
 8017788:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2200      	movs	r2, #0
 8017790:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	8b5b      	ldrh	r3, [r3, #26]
 8017798:	f003 0302 	and.w	r3, r3, #2
 801779c:	2b00      	cmp	r3, #0
 801779e:	f000 8150 	beq.w	8017a42 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f000 fd78 	bl	8018298 <tcp_send_empty_ack>
 80177a8:	4603      	mov	r3, r0
 80177aa:	e155      	b.n	8017a58 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	2200      	movs	r2, #0
 80177b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80177b8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80177ba:	6a3b      	ldr	r3, [r7, #32]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	f000 811f 	beq.w	8017a00 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 80177c2:	e002      	b.n	80177ca <tcp_output+0x156>
 80177c4:	6a3b      	ldr	r3, [r7, #32]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	623b      	str	r3, [r7, #32]
 80177ca:	6a3b      	ldr	r3, [r7, #32]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d1f8      	bne.n	80177c4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80177d2:	e115      	b.n	8017a00 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80177d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177d6:	691b      	ldr	r3, [r3, #16]
 80177d8:	899b      	ldrh	r3, [r3, #12]
 80177da:	b29b      	uxth	r3, r3
 80177dc:	4618      	mov	r0, r3
 80177de:	f7f8 fdf9 	bl	80103d4 <lwip_htons>
 80177e2:	4603      	mov	r3, r0
 80177e4:	b2db      	uxtb	r3, r3
 80177e6:	f003 0304 	and.w	r3, r3, #4
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d006      	beq.n	80177fc <tcp_output+0x188>
 80177ee:	4b2f      	ldr	r3, [pc, #188]	@ (80178ac <tcp_output+0x238>)
 80177f0:	f240 5236 	movw	r2, #1334	@ 0x536
 80177f4:	4932      	ldr	r1, [pc, #200]	@ (80178c0 <tcp_output+0x24c>)
 80177f6:	482f      	ldr	r0, [pc, #188]	@ (80178b4 <tcp_output+0x240>)
 80177f8:	f004 ff2a 	bl	801c650 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017800:	2b00      	cmp	r3, #0
 8017802:	d01f      	beq.n	8017844 <tcp_output+0x1d0>
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	8b5b      	ldrh	r3, [r3, #26]
 8017808:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801780c:	2b00      	cmp	r3, #0
 801780e:	d119      	bne.n	8017844 <tcp_output+0x1d0>
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017814:	2b00      	cmp	r3, #0
 8017816:	d00b      	beq.n	8017830 <tcp_output+0x1bc>
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d110      	bne.n	8017844 <tcp_output+0x1d0>
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017826:	891a      	ldrh	r2, [r3, #8]
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801782c:	429a      	cmp	r2, r3
 801782e:	d209      	bcs.n	8017844 <tcp_output+0x1d0>
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017836:	2b00      	cmp	r3, #0
 8017838:	d004      	beq.n	8017844 <tcp_output+0x1d0>
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017840:	2b08      	cmp	r3, #8
 8017842:	d901      	bls.n	8017848 <tcp_output+0x1d4>
 8017844:	2301      	movs	r3, #1
 8017846:	e000      	b.n	801784a <tcp_output+0x1d6>
 8017848:	2300      	movs	r3, #0
 801784a:	2b00      	cmp	r3, #0
 801784c:	d106      	bne.n	801785c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	8b5b      	ldrh	r3, [r3, #26]
 8017852:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017856:	2b00      	cmp	r3, #0
 8017858:	f000 80e7 	beq.w	8017a2a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	7d1b      	ldrb	r3, [r3, #20]
 8017860:	2b02      	cmp	r3, #2
 8017862:	d00d      	beq.n	8017880 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017866:	691b      	ldr	r3, [r3, #16]
 8017868:	899b      	ldrh	r3, [r3, #12]
 801786a:	b29c      	uxth	r4, r3
 801786c:	2010      	movs	r0, #16
 801786e:	f7f8 fdb1 	bl	80103d4 <lwip_htons>
 8017872:	4603      	mov	r3, r0
 8017874:	461a      	mov	r2, r3
 8017876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017878:	691b      	ldr	r3, [r3, #16]
 801787a:	4322      	orrs	r2, r4
 801787c:	b292      	uxth	r2, r2
 801787e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017880:	697a      	ldr	r2, [r7, #20]
 8017882:	6879      	ldr	r1, [r7, #4]
 8017884:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017886:	f000 f90b 	bl	8017aa0 <tcp_output_segment>
 801788a:	4603      	mov	r3, r0
 801788c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801788e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d016      	beq.n	80178c4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	8b5b      	ldrh	r3, [r3, #26]
 801789a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801789e:	b29a      	uxth	r2, r3
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	835a      	strh	r2, [r3, #26]
      return err;
 80178a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178a8:	e0d6      	b.n	8017a58 <tcp_output+0x3e4>
 80178aa:	bf00      	nop
 80178ac:	0801fce4 	.word	0x0801fce4
 80178b0:	08020284 	.word	0x08020284
 80178b4:	0801fd38 	.word	0x0801fd38
 80178b8:	0802029c 	.word	0x0802029c
 80178bc:	200227ec 	.word	0x200227ec
 80178c0:	080202c4 	.word	0x080202c4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80178c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c6:	2200      	movs	r2, #0
 80178c8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80178ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178cc:	681a      	ldr	r2, [r3, #0]
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	7d1b      	ldrb	r3, [r3, #20]
 80178d6:	2b02      	cmp	r3, #2
 80178d8:	d006      	beq.n	80178e8 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	8b5b      	ldrh	r3, [r3, #26]
 80178de:	f023 0303 	bic.w	r3, r3, #3
 80178e2:	b29a      	uxth	r2, r3
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80178e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ea:	691b      	ldr	r3, [r3, #16]
 80178ec:	685b      	ldr	r3, [r3, #4]
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7f8 fd86 	bl	8010400 <lwip_htonl>
 80178f4:	4604      	mov	r4, r0
 80178f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178f8:	891b      	ldrh	r3, [r3, #8]
 80178fa:	461d      	mov	r5, r3
 80178fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178fe:	691b      	ldr	r3, [r3, #16]
 8017900:	899b      	ldrh	r3, [r3, #12]
 8017902:	b29b      	uxth	r3, r3
 8017904:	4618      	mov	r0, r3
 8017906:	f7f8 fd65 	bl	80103d4 <lwip_htons>
 801790a:	4603      	mov	r3, r0
 801790c:	b2db      	uxtb	r3, r3
 801790e:	f003 0303 	and.w	r3, r3, #3
 8017912:	2b00      	cmp	r3, #0
 8017914:	d001      	beq.n	801791a <tcp_output+0x2a6>
 8017916:	2301      	movs	r3, #1
 8017918:	e000      	b.n	801791c <tcp_output+0x2a8>
 801791a:	2300      	movs	r3, #0
 801791c:	442b      	add	r3, r5
 801791e:	4423      	add	r3, r4
 8017920:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017926:	68bb      	ldr	r3, [r7, #8]
 8017928:	1ad3      	subs	r3, r2, r3
 801792a:	2b00      	cmp	r3, #0
 801792c:	da02      	bge.n	8017934 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	68ba      	ldr	r2, [r7, #8]
 8017932:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017936:	891b      	ldrh	r3, [r3, #8]
 8017938:	461c      	mov	r4, r3
 801793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801793c:	691b      	ldr	r3, [r3, #16]
 801793e:	899b      	ldrh	r3, [r3, #12]
 8017940:	b29b      	uxth	r3, r3
 8017942:	4618      	mov	r0, r3
 8017944:	f7f8 fd46 	bl	80103d4 <lwip_htons>
 8017948:	4603      	mov	r3, r0
 801794a:	b2db      	uxtb	r3, r3
 801794c:	f003 0303 	and.w	r3, r3, #3
 8017950:	2b00      	cmp	r3, #0
 8017952:	d001      	beq.n	8017958 <tcp_output+0x2e4>
 8017954:	2301      	movs	r3, #1
 8017956:	e000      	b.n	801795a <tcp_output+0x2e6>
 8017958:	2300      	movs	r3, #0
 801795a:	4423      	add	r3, r4
 801795c:	2b00      	cmp	r3, #0
 801795e:	d049      	beq.n	80179f4 <tcp_output+0x380>
      seg->next = NULL;
 8017960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017962:	2200      	movs	r2, #0
 8017964:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801796a:	2b00      	cmp	r3, #0
 801796c:	d105      	bne.n	801797a <tcp_output+0x306>
        pcb->unacked = seg;
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017972:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8017974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017976:	623b      	str	r3, [r7, #32]
 8017978:	e03f      	b.n	80179fa <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801797c:	691b      	ldr	r3, [r3, #16]
 801797e:	685b      	ldr	r3, [r3, #4]
 8017980:	4618      	mov	r0, r3
 8017982:	f7f8 fd3d 	bl	8010400 <lwip_htonl>
 8017986:	4604      	mov	r4, r0
 8017988:	6a3b      	ldr	r3, [r7, #32]
 801798a:	691b      	ldr	r3, [r3, #16]
 801798c:	685b      	ldr	r3, [r3, #4]
 801798e:	4618      	mov	r0, r3
 8017990:	f7f8 fd36 	bl	8010400 <lwip_htonl>
 8017994:	4603      	mov	r3, r0
 8017996:	1ae3      	subs	r3, r4, r3
 8017998:	2b00      	cmp	r3, #0
 801799a:	da24      	bge.n	80179e6 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	3370      	adds	r3, #112	@ 0x70
 80179a0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80179a2:	e002      	b.n	80179aa <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80179a4:	69fb      	ldr	r3, [r7, #28]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80179aa:	69fb      	ldr	r3, [r7, #28]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d011      	beq.n	80179d6 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	691b      	ldr	r3, [r3, #16]
 80179b8:	685b      	ldr	r3, [r3, #4]
 80179ba:	4618      	mov	r0, r3
 80179bc:	f7f8 fd20 	bl	8010400 <lwip_htonl>
 80179c0:	4604      	mov	r4, r0
 80179c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c4:	691b      	ldr	r3, [r3, #16]
 80179c6:	685b      	ldr	r3, [r3, #4]
 80179c8:	4618      	mov	r0, r3
 80179ca:	f7f8 fd19 	bl	8010400 <lwip_htonl>
 80179ce:	4603      	mov	r3, r0
 80179d0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	dbe6      	blt.n	80179a4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80179d6:	69fb      	ldr	r3, [r7, #28]
 80179d8:	681a      	ldr	r2, [r3, #0]
 80179da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179dc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80179de:	69fb      	ldr	r3, [r7, #28]
 80179e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179e2:	601a      	str	r2, [r3, #0]
 80179e4:	e009      	b.n	80179fa <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80179e6:	6a3b      	ldr	r3, [r7, #32]
 80179e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80179ea:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80179ec:	6a3b      	ldr	r3, [r7, #32]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	623b      	str	r3, [r7, #32]
 80179f2:	e002      	b.n	80179fa <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80179f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80179f6:	f7fb feb4 	bl	8013762 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8017a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d012      	beq.n	8017a2c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a08:	691b      	ldr	r3, [r3, #16]
 8017a0a:	685b      	ldr	r3, [r3, #4]
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7f8 fcf7 	bl	8010400 <lwip_htonl>
 8017a12:	4602      	mov	r2, r0
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a18:	1ad3      	subs	r3, r2, r3
 8017a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017a1c:	8912      	ldrh	r2, [r2, #8]
 8017a1e:	4413      	add	r3, r2
  while (seg != NULL &&
 8017a20:	69ba      	ldr	r2, [r7, #24]
 8017a22:	429a      	cmp	r2, r3
 8017a24:	f4bf aed6 	bcs.w	80177d4 <tcp_output+0x160>
 8017a28:	e000      	b.n	8017a2c <tcp_output+0x3b8>
      break;
 8017a2a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d108      	bne.n	8017a46 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2200      	movs	r2, #0
 8017a38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8017a3c:	e004      	b.n	8017a48 <tcp_output+0x3d4>
    goto output_done;
 8017a3e:	bf00      	nop
 8017a40:	e002      	b.n	8017a48 <tcp_output+0x3d4>
    goto output_done;
 8017a42:	bf00      	nop
 8017a44:	e000      	b.n	8017a48 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017a46:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	8b5b      	ldrh	r3, [r3, #26]
 8017a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017a50:	b29a      	uxth	r2, r3
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017a56:	2300      	movs	r3, #0
}
 8017a58:	4618      	mov	r0, r3
 8017a5a:	3728      	adds	r7, #40	@ 0x28
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bdb0      	pop	{r4, r5, r7, pc}

08017a60 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d106      	bne.n	8017a7c <tcp_output_segment_busy+0x1c>
 8017a6e:	4b09      	ldr	r3, [pc, #36]	@ (8017a94 <tcp_output_segment_busy+0x34>)
 8017a70:	f240 529a 	movw	r2, #1434	@ 0x59a
 8017a74:	4908      	ldr	r1, [pc, #32]	@ (8017a98 <tcp_output_segment_busy+0x38>)
 8017a76:	4809      	ldr	r0, [pc, #36]	@ (8017a9c <tcp_output_segment_busy+0x3c>)
 8017a78:	f004 fdea 	bl	801c650 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	685b      	ldr	r3, [r3, #4]
 8017a80:	7b9b      	ldrb	r3, [r3, #14]
 8017a82:	2b01      	cmp	r3, #1
 8017a84:	d001      	beq.n	8017a8a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017a86:	2301      	movs	r3, #1
 8017a88:	e000      	b.n	8017a8c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017a8a:	2300      	movs	r3, #0
}
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	3708      	adds	r7, #8
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}
 8017a94:	0801fce4 	.word	0x0801fce4
 8017a98:	080202dc 	.word	0x080202dc
 8017a9c:	0801fd38 	.word	0x0801fd38

08017aa0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017aa0:	b5b0      	push	{r4, r5, r7, lr}
 8017aa2:	b08c      	sub	sp, #48	@ 0x30
 8017aa4:	af04      	add	r7, sp, #16
 8017aa6:	60f8      	str	r0, [r7, #12]
 8017aa8:	60b9      	str	r1, [r7, #8]
 8017aaa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d106      	bne.n	8017ac0 <tcp_output_segment+0x20>
 8017ab2:	4b64      	ldr	r3, [pc, #400]	@ (8017c44 <tcp_output_segment+0x1a4>)
 8017ab4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017ab8:	4963      	ldr	r1, [pc, #396]	@ (8017c48 <tcp_output_segment+0x1a8>)
 8017aba:	4864      	ldr	r0, [pc, #400]	@ (8017c4c <tcp_output_segment+0x1ac>)
 8017abc:	f004 fdc8 	bl	801c650 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017ac0:	68bb      	ldr	r3, [r7, #8]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d106      	bne.n	8017ad4 <tcp_output_segment+0x34>
 8017ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8017c44 <tcp_output_segment+0x1a4>)
 8017ac8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017acc:	4960      	ldr	r1, [pc, #384]	@ (8017c50 <tcp_output_segment+0x1b0>)
 8017ace:	485f      	ldr	r0, [pc, #380]	@ (8017c4c <tcp_output_segment+0x1ac>)
 8017ad0:	f004 fdbe 	bl	801c650 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d106      	bne.n	8017ae8 <tcp_output_segment+0x48>
 8017ada:	4b5a      	ldr	r3, [pc, #360]	@ (8017c44 <tcp_output_segment+0x1a4>)
 8017adc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8017ae0:	495c      	ldr	r1, [pc, #368]	@ (8017c54 <tcp_output_segment+0x1b4>)
 8017ae2:	485a      	ldr	r0, [pc, #360]	@ (8017c4c <tcp_output_segment+0x1ac>)
 8017ae4:	f004 fdb4 	bl	801c650 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017ae8:	68f8      	ldr	r0, [r7, #12]
 8017aea:	f7ff ffb9 	bl	8017a60 <tcp_output_segment_busy>
 8017aee:	4603      	mov	r3, r0
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d001      	beq.n	8017af8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017af4:	2300      	movs	r3, #0
 8017af6:	e0a1      	b.n	8017c3c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017af8:	68bb      	ldr	r3, [r7, #8]
 8017afa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	691c      	ldr	r4, [r3, #16]
 8017b00:	4610      	mov	r0, r2
 8017b02:	f7f8 fc7d 	bl	8010400 <lwip_htonl>
 8017b06:	4603      	mov	r3, r0
 8017b08:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017b0a:	68bb      	ldr	r3, [r7, #8]
 8017b0c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	691c      	ldr	r4, [r3, #16]
 8017b12:	4610      	mov	r0, r2
 8017b14:	f7f8 fc5e 	bl	80103d4 <lwip_htons>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b20:	68ba      	ldr	r2, [r7, #8]
 8017b22:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017b24:	441a      	add	r2, r3
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	691b      	ldr	r3, [r3, #16]
 8017b2e:	3314      	adds	r3, #20
 8017b30:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	7b1b      	ldrb	r3, [r3, #12]
 8017b36:	f003 0301 	and.w	r3, r3, #1
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d015      	beq.n	8017b6a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017b3e:	68bb      	ldr	r3, [r7, #8]
 8017b40:	3304      	adds	r3, #4
 8017b42:	461a      	mov	r2, r3
 8017b44:	6879      	ldr	r1, [r7, #4]
 8017b46:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017b4a:	f7fc f9cf 	bl	8013eec <tcp_eff_send_mss_netif>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017b52:	8b7b      	ldrh	r3, [r7, #26]
 8017b54:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017b58:	4618      	mov	r0, r3
 8017b5a:	f7f8 fc51 	bl	8010400 <lwip_htonl>
 8017b5e:	4602      	mov	r2, r0
 8017b60:	69fb      	ldr	r3, [r7, #28]
 8017b62:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017b64:	69fb      	ldr	r3, [r7, #28]
 8017b66:	3304      	adds	r3, #4
 8017b68:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017b6a:	68bb      	ldr	r3, [r7, #8]
 8017b6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	da02      	bge.n	8017b7a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	2200      	movs	r2, #0
 8017b78:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017b7a:	68bb      	ldr	r3, [r7, #8]
 8017b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d10c      	bne.n	8017b9c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017b82:	4b35      	ldr	r3, [pc, #212]	@ (8017c58 <tcp_output_segment+0x1b8>)
 8017b84:	681a      	ldr	r2, [r3, #0]
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	691b      	ldr	r3, [r3, #16]
 8017b8e:	685b      	ldr	r3, [r3, #4]
 8017b90:	4618      	mov	r0, r3
 8017b92:	f7f8 fc35 	bl	8010400 <lwip_htonl>
 8017b96:	4602      	mov	r2, r0
 8017b98:	68bb      	ldr	r3, [r7, #8]
 8017b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	691a      	ldr	r2, [r3, #16]
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	685b      	ldr	r3, [r3, #4]
 8017ba4:	685b      	ldr	r3, [r3, #4]
 8017ba6:	1ad3      	subs	r3, r2, r3
 8017ba8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	8959      	ldrh	r1, [r3, #10]
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	685b      	ldr	r3, [r3, #4]
 8017bb4:	8b3a      	ldrh	r2, [r7, #24]
 8017bb6:	1a8a      	subs	r2, r1, r2
 8017bb8:	b292      	uxth	r2, r2
 8017bba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	8919      	ldrh	r1, [r3, #8]
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	685b      	ldr	r3, [r3, #4]
 8017bc6:	8b3a      	ldrh	r2, [r7, #24]
 8017bc8:	1a8a      	subs	r2, r1, r2
 8017bca:	b292      	uxth	r2, r2
 8017bcc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	685b      	ldr	r3, [r3, #4]
 8017bd2:	68fa      	ldr	r2, [r7, #12]
 8017bd4:	6912      	ldr	r2, [r2, #16]
 8017bd6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	691b      	ldr	r3, [r3, #16]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	741a      	strb	r2, [r3, #16]
 8017be0:	2200      	movs	r2, #0
 8017be2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	691a      	ldr	r2, [r3, #16]
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	7b1b      	ldrb	r3, [r3, #12]
 8017bec:	f003 0301 	and.w	r3, r3, #1
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d001      	beq.n	8017bf8 <tcp_output_segment+0x158>
 8017bf4:	2318      	movs	r3, #24
 8017bf6:	e000      	b.n	8017bfa <tcp_output_segment+0x15a>
 8017bf8:	2314      	movs	r3, #20
 8017bfa:	4413      	add	r3, r2
 8017bfc:	69fa      	ldr	r2, [r7, #28]
 8017bfe:	429a      	cmp	r2, r3
 8017c00:	d006      	beq.n	8017c10 <tcp_output_segment+0x170>
 8017c02:	4b10      	ldr	r3, [pc, #64]	@ (8017c44 <tcp_output_segment+0x1a4>)
 8017c04:	f240 621c 	movw	r2, #1564	@ 0x61c
 8017c08:	4914      	ldr	r1, [pc, #80]	@ (8017c5c <tcp_output_segment+0x1bc>)
 8017c0a:	4810      	ldr	r0, [pc, #64]	@ (8017c4c <tcp_output_segment+0x1ac>)
 8017c0c:	f004 fd20 	bl	801c650 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	6858      	ldr	r0, [r3, #4]
 8017c14:	68b9      	ldr	r1, [r7, #8]
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	1d1c      	adds	r4, r3, #4
 8017c1a:	68bb      	ldr	r3, [r7, #8]
 8017c1c:	7add      	ldrb	r5, [r3, #11]
 8017c1e:	68bb      	ldr	r3, [r7, #8]
 8017c20:	7a9b      	ldrb	r3, [r3, #10]
 8017c22:	687a      	ldr	r2, [r7, #4]
 8017c24:	9202      	str	r2, [sp, #8]
 8017c26:	2206      	movs	r2, #6
 8017c28:	9201      	str	r2, [sp, #4]
 8017c2a:	9300      	str	r3, [sp, #0]
 8017c2c:	462b      	mov	r3, r5
 8017c2e:	4622      	mov	r2, r4
 8017c30:	f003 f8ea 	bl	801ae08 <ip4_output_if>
 8017c34:	4603      	mov	r3, r0
 8017c36:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3720      	adds	r7, #32
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bdb0      	pop	{r4, r5, r7, pc}
 8017c44:	0801fce4 	.word	0x0801fce4
 8017c48:	08020304 	.word	0x08020304
 8017c4c:	0801fd38 	.word	0x0801fd38
 8017c50:	08020324 	.word	0x08020324
 8017c54:	08020344 	.word	0x08020344
 8017c58:	2002279c 	.word	0x2002279c
 8017c5c:	08020368 	.word	0x08020368

08017c60 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017c60:	b5b0      	push	{r4, r5, r7, lr}
 8017c62:	b084      	sub	sp, #16
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d106      	bne.n	8017c7c <tcp_rexmit_rto_prepare+0x1c>
 8017c6e:	4b36      	ldr	r3, [pc, #216]	@ (8017d48 <tcp_rexmit_rto_prepare+0xe8>)
 8017c70:	f240 6263 	movw	r2, #1635	@ 0x663
 8017c74:	4935      	ldr	r1, [pc, #212]	@ (8017d4c <tcp_rexmit_rto_prepare+0xec>)
 8017c76:	4836      	ldr	r0, [pc, #216]	@ (8017d50 <tcp_rexmit_rto_prepare+0xf0>)
 8017c78:	f004 fcea 	bl	801c650 <iprintf>

  if (pcb->unacked == NULL) {
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d102      	bne.n	8017c8a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017c84:	f06f 0305 	mvn.w	r3, #5
 8017c88:	e059      	b.n	8017d3e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017c8e:	60fb      	str	r3, [r7, #12]
 8017c90:	e00b      	b.n	8017caa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017c92:	68f8      	ldr	r0, [r7, #12]
 8017c94:	f7ff fee4 	bl	8017a60 <tcp_output_segment_busy>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d002      	beq.n	8017ca4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017c9e:	f06f 0305 	mvn.w	r3, #5
 8017ca2:	e04c      	b.n	8017d3e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	60fb      	str	r3, [r7, #12]
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d1ef      	bne.n	8017c92 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017cb2:	68f8      	ldr	r0, [r7, #12]
 8017cb4:	f7ff fed4 	bl	8017a60 <tcp_output_segment_busy>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d002      	beq.n	8017cc4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017cbe:	f06f 0305 	mvn.w	r3, #5
 8017cc2:	e03c      	b.n	8017d3e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d104      	bne.n	8017cde <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	895a      	ldrh	r2, [r3, #10]
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2200      	movs	r2, #0
 8017cea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	8b5b      	ldrh	r3, [r3, #26]
 8017cf0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8017cf4:	b29a      	uxth	r2, r3
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	691b      	ldr	r3, [r3, #16]
 8017cfe:	685b      	ldr	r3, [r3, #4]
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7f8 fb7d 	bl	8010400 <lwip_htonl>
 8017d06:	4604      	mov	r4, r0
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	891b      	ldrh	r3, [r3, #8]
 8017d0c:	461d      	mov	r5, r3
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	691b      	ldr	r3, [r3, #16]
 8017d12:	899b      	ldrh	r3, [r3, #12]
 8017d14:	b29b      	uxth	r3, r3
 8017d16:	4618      	mov	r0, r3
 8017d18:	f7f8 fb5c 	bl	80103d4 <lwip_htons>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	b2db      	uxtb	r3, r3
 8017d20:	f003 0303 	and.w	r3, r3, #3
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d001      	beq.n	8017d2c <tcp_rexmit_rto_prepare+0xcc>
 8017d28:	2301      	movs	r3, #1
 8017d2a:	e000      	b.n	8017d2e <tcp_rexmit_rto_prepare+0xce>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	442b      	add	r3, r5
 8017d30:	18e2      	adds	r2, r4, r3
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	2200      	movs	r2, #0
 8017d3a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017d3c:	2300      	movs	r3, #0
}
 8017d3e:	4618      	mov	r0, r3
 8017d40:	3710      	adds	r7, #16
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bdb0      	pop	{r4, r5, r7, pc}
 8017d46:	bf00      	nop
 8017d48:	0801fce4 	.word	0x0801fce4
 8017d4c:	0802037c 	.word	0x0802037c
 8017d50:	0801fd38 	.word	0x0801fd38

08017d54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d106      	bne.n	8017d70 <tcp_rexmit_rto_commit+0x1c>
 8017d62:	4b0d      	ldr	r3, [pc, #52]	@ (8017d98 <tcp_rexmit_rto_commit+0x44>)
 8017d64:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8017d68:	490c      	ldr	r1, [pc, #48]	@ (8017d9c <tcp_rexmit_rto_commit+0x48>)
 8017d6a:	480d      	ldr	r0, [pc, #52]	@ (8017da0 <tcp_rexmit_rto_commit+0x4c>)
 8017d6c:	f004 fc70 	bl	801c650 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017d76:	2bff      	cmp	r3, #255	@ 0xff
 8017d78:	d007      	beq.n	8017d8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017d80:	3301      	adds	r3, #1
 8017d82:	b2da      	uxtb	r2, r3
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017d8a:	6878      	ldr	r0, [r7, #4]
 8017d8c:	f7ff fc72 	bl	8017674 <tcp_output>
}
 8017d90:	bf00      	nop
 8017d92:	3708      	adds	r7, #8
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}
 8017d98:	0801fce4 	.word	0x0801fce4
 8017d9c:	080203a0 	.word	0x080203a0
 8017da0:	0801fd38 	.word	0x0801fd38

08017da4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d106      	bne.n	8017dc0 <tcp_rexmit_rto+0x1c>
 8017db2:	4b0a      	ldr	r3, [pc, #40]	@ (8017ddc <tcp_rexmit_rto+0x38>)
 8017db4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8017db8:	4909      	ldr	r1, [pc, #36]	@ (8017de0 <tcp_rexmit_rto+0x3c>)
 8017dba:	480a      	ldr	r0, [pc, #40]	@ (8017de4 <tcp_rexmit_rto+0x40>)
 8017dbc:	f004 fc48 	bl	801c650 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017dc0:	6878      	ldr	r0, [r7, #4]
 8017dc2:	f7ff ff4d 	bl	8017c60 <tcp_rexmit_rto_prepare>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d102      	bne.n	8017dd2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017dcc:	6878      	ldr	r0, [r7, #4]
 8017dce:	f7ff ffc1 	bl	8017d54 <tcp_rexmit_rto_commit>
  }
}
 8017dd2:	bf00      	nop
 8017dd4:	3708      	adds	r7, #8
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}
 8017dda:	bf00      	nop
 8017ddc:	0801fce4 	.word	0x0801fce4
 8017de0:	080203c4 	.word	0x080203c4
 8017de4:	0801fd38 	.word	0x0801fd38

08017de8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017de8:	b590      	push	{r4, r7, lr}
 8017dea:	b085      	sub	sp, #20
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d106      	bne.n	8017e04 <tcp_rexmit+0x1c>
 8017df6:	4b2f      	ldr	r3, [pc, #188]	@ (8017eb4 <tcp_rexmit+0xcc>)
 8017df8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8017dfc:	492e      	ldr	r1, [pc, #184]	@ (8017eb8 <tcp_rexmit+0xd0>)
 8017dfe:	482f      	ldr	r0, [pc, #188]	@ (8017ebc <tcp_rexmit+0xd4>)
 8017e00:	f004 fc26 	bl	801c650 <iprintf>

  if (pcb->unacked == NULL) {
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d102      	bne.n	8017e12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017e0c:	f06f 0305 	mvn.w	r3, #5
 8017e10:	e04c      	b.n	8017eac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017e18:	68b8      	ldr	r0, [r7, #8]
 8017e1a:	f7ff fe21 	bl	8017a60 <tcp_output_segment_busy>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d002      	beq.n	8017e2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017e24:	f06f 0305 	mvn.w	r3, #5
 8017e28:	e040      	b.n	8017eac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017e2a:	68bb      	ldr	r3, [r7, #8]
 8017e2c:	681a      	ldr	r2, [r3, #0]
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	336c      	adds	r3, #108	@ 0x6c
 8017e36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017e38:	e002      	b.n	8017e40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d011      	beq.n	8017e6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	691b      	ldr	r3, [r3, #16]
 8017e4e:	685b      	ldr	r3, [r3, #4]
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7f8 fad5 	bl	8010400 <lwip_htonl>
 8017e56:	4604      	mov	r4, r0
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	691b      	ldr	r3, [r3, #16]
 8017e5c:	685b      	ldr	r3, [r3, #4]
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f7f8 face 	bl	8010400 <lwip_htonl>
 8017e64:	4603      	mov	r3, r0
 8017e66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	dbe6      	blt.n	8017e3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	681a      	ldr	r2, [r3, #0]
 8017e70:	68bb      	ldr	r3, [r7, #8]
 8017e72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	68ba      	ldr	r2, [r7, #8]
 8017e78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017e7a:	68bb      	ldr	r3, [r7, #8]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d103      	bne.n	8017e8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2200      	movs	r2, #0
 8017e86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017e90:	2bff      	cmp	r3, #255	@ 0xff
 8017e92:	d007      	beq.n	8017ea4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017e9a:	3301      	adds	r3, #1
 8017e9c:	b2da      	uxtb	r2, r3
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017eaa:	2300      	movs	r3, #0
}
 8017eac:	4618      	mov	r0, r3
 8017eae:	3714      	adds	r7, #20
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	bd90      	pop	{r4, r7, pc}
 8017eb4:	0801fce4 	.word	0x0801fce4
 8017eb8:	080203e0 	.word	0x080203e0
 8017ebc:	0801fd38 	.word	0x0801fd38

08017ec0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b082      	sub	sp, #8
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d106      	bne.n	8017edc <tcp_rexmit_fast+0x1c>
 8017ece:	4b2a      	ldr	r3, [pc, #168]	@ (8017f78 <tcp_rexmit_fast+0xb8>)
 8017ed0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8017ed4:	4929      	ldr	r1, [pc, #164]	@ (8017f7c <tcp_rexmit_fast+0xbc>)
 8017ed6:	482a      	ldr	r0, [pc, #168]	@ (8017f80 <tcp_rexmit_fast+0xc0>)
 8017ed8:	f004 fbba 	bl	801c650 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d045      	beq.n	8017f70 <tcp_rexmit_fast+0xb0>
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	8b5b      	ldrh	r3, [r3, #26]
 8017ee8:	f003 0304 	and.w	r3, r3, #4
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d13f      	bne.n	8017f70 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017ef0:	6878      	ldr	r0, [r7, #4]
 8017ef2:	f7ff ff79 	bl	8017de8 <tcp_rexmit>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d139      	bne.n	8017f70 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017f08:	4293      	cmp	r3, r2
 8017f0a:	bf28      	it	cs
 8017f0c:	4613      	movcs	r3, r2
 8017f0e:	b29b      	uxth	r3, r3
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	da00      	bge.n	8017f16 <tcp_rexmit_fast+0x56>
 8017f14:	3301      	adds	r3, #1
 8017f16:	105b      	asrs	r3, r3, #1
 8017f18:	b29a      	uxth	r2, r3
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017f26:	461a      	mov	r2, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f2c:	005b      	lsls	r3, r3, #1
 8017f2e:	429a      	cmp	r2, r3
 8017f30:	d206      	bcs.n	8017f40 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f36:	005b      	lsls	r3, r3, #1
 8017f38:	b29a      	uxth	r2, r3
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	0049      	lsls	r1, r1, #1
 8017f4e:	440b      	add	r3, r1
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	4413      	add	r3, r2
 8017f54:	b29a      	uxth	r2, r3
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	8b5b      	ldrh	r3, [r3, #26]
 8017f60:	f043 0304 	orr.w	r3, r3, #4
 8017f64:	b29a      	uxth	r2, r3
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017f70:	bf00      	nop
 8017f72:	3708      	adds	r7, #8
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}
 8017f78:	0801fce4 	.word	0x0801fce4
 8017f7c:	080203f8 	.word	0x080203f8
 8017f80:	0801fd38 	.word	0x0801fd38

08017f84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b086      	sub	sp, #24
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	60f8      	str	r0, [r7, #12]
 8017f8c:	607b      	str	r3, [r7, #4]
 8017f8e:	460b      	mov	r3, r1
 8017f90:	817b      	strh	r3, [r7, #10]
 8017f92:	4613      	mov	r3, r2
 8017f94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017f96:	897a      	ldrh	r2, [r7, #10]
 8017f98:	893b      	ldrh	r3, [r7, #8]
 8017f9a:	4413      	add	r3, r2
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	3314      	adds	r3, #20
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	2022      	movs	r0, #34	@ 0x22
 8017faa:	f7f9 fc13 	bl	80117d4 <pbuf_alloc>
 8017fae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017fb0:	697b      	ldr	r3, [r7, #20]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d04d      	beq.n	8018052 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017fb6:	897b      	ldrh	r3, [r7, #10]
 8017fb8:	3313      	adds	r3, #19
 8017fba:	697a      	ldr	r2, [r7, #20]
 8017fbc:	8952      	ldrh	r2, [r2, #10]
 8017fbe:	4293      	cmp	r3, r2
 8017fc0:	db06      	blt.n	8017fd0 <tcp_output_alloc_header_common+0x4c>
 8017fc2:	4b26      	ldr	r3, [pc, #152]	@ (801805c <tcp_output_alloc_header_common+0xd8>)
 8017fc4:	f240 7223 	movw	r2, #1827	@ 0x723
 8017fc8:	4925      	ldr	r1, [pc, #148]	@ (8018060 <tcp_output_alloc_header_common+0xdc>)
 8017fca:	4826      	ldr	r0, [pc, #152]	@ (8018064 <tcp_output_alloc_header_common+0xe0>)
 8017fcc:	f004 fb40 	bl	801c650 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017fd0:	697b      	ldr	r3, [r7, #20]
 8017fd2:	685b      	ldr	r3, [r3, #4]
 8017fd4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017fd6:	8c3b      	ldrh	r3, [r7, #32]
 8017fd8:	4618      	mov	r0, r3
 8017fda:	f7f8 f9fb 	bl	80103d4 <lwip_htons>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	461a      	mov	r2, r3
 8017fe2:	693b      	ldr	r3, [r7, #16]
 8017fe4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7f8 f9f3 	bl	80103d4 <lwip_htons>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	461a      	mov	r2, r3
 8017ff2:	693b      	ldr	r3, [r7, #16]
 8017ff4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017ff6:	693b      	ldr	r3, [r7, #16]
 8017ff8:	687a      	ldr	r2, [r7, #4]
 8017ffa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017ffc:	68f8      	ldr	r0, [r7, #12]
 8017ffe:	f7f8 f9ff 	bl	8010400 <lwip_htonl>
 8018002:	4602      	mov	r2, r0
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018008:	897b      	ldrh	r3, [r7, #10]
 801800a:	089b      	lsrs	r3, r3, #2
 801800c:	b29b      	uxth	r3, r3
 801800e:	3305      	adds	r3, #5
 8018010:	b29b      	uxth	r3, r3
 8018012:	031b      	lsls	r3, r3, #12
 8018014:	b29a      	uxth	r2, r3
 8018016:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801801a:	b29b      	uxth	r3, r3
 801801c:	4313      	orrs	r3, r2
 801801e:	b29b      	uxth	r3, r3
 8018020:	4618      	mov	r0, r3
 8018022:	f7f8 f9d7 	bl	80103d4 <lwip_htons>
 8018026:	4603      	mov	r3, r0
 8018028:	461a      	mov	r2, r3
 801802a:	693b      	ldr	r3, [r7, #16]
 801802c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801802e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018030:	4618      	mov	r0, r3
 8018032:	f7f8 f9cf 	bl	80103d4 <lwip_htons>
 8018036:	4603      	mov	r3, r0
 8018038:	461a      	mov	r2, r3
 801803a:	693b      	ldr	r3, [r7, #16]
 801803c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801803e:	693b      	ldr	r3, [r7, #16]
 8018040:	2200      	movs	r2, #0
 8018042:	741a      	strb	r2, [r3, #16]
 8018044:	2200      	movs	r2, #0
 8018046:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018048:	693b      	ldr	r3, [r7, #16]
 801804a:	2200      	movs	r2, #0
 801804c:	749a      	strb	r2, [r3, #18]
 801804e:	2200      	movs	r2, #0
 8018050:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018052:	697b      	ldr	r3, [r7, #20]
}
 8018054:	4618      	mov	r0, r3
 8018056:	3718      	adds	r7, #24
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}
 801805c:	0801fce4 	.word	0x0801fce4
 8018060:	08020418 	.word	0x08020418
 8018064:	0801fd38 	.word	0x0801fd38

08018068 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018068:	b5b0      	push	{r4, r5, r7, lr}
 801806a:	b08a      	sub	sp, #40	@ 0x28
 801806c:	af04      	add	r7, sp, #16
 801806e:	60f8      	str	r0, [r7, #12]
 8018070:	607b      	str	r3, [r7, #4]
 8018072:	460b      	mov	r3, r1
 8018074:	817b      	strh	r3, [r7, #10]
 8018076:	4613      	mov	r3, r2
 8018078:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d106      	bne.n	801808e <tcp_output_alloc_header+0x26>
 8018080:	4b15      	ldr	r3, [pc, #84]	@ (80180d8 <tcp_output_alloc_header+0x70>)
 8018082:	f240 7242 	movw	r2, #1858	@ 0x742
 8018086:	4915      	ldr	r1, [pc, #84]	@ (80180dc <tcp_output_alloc_header+0x74>)
 8018088:	4815      	ldr	r0, [pc, #84]	@ (80180e0 <tcp_output_alloc_header+0x78>)
 801808a:	f004 fae1 	bl	801c650 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	8adb      	ldrh	r3, [r3, #22]
 8018096:	68fa      	ldr	r2, [r7, #12]
 8018098:	8b12      	ldrh	r2, [r2, #24]
 801809a:	68f9      	ldr	r1, [r7, #12]
 801809c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801809e:	893d      	ldrh	r5, [r7, #8]
 80180a0:	897c      	ldrh	r4, [r7, #10]
 80180a2:	9103      	str	r1, [sp, #12]
 80180a4:	2110      	movs	r1, #16
 80180a6:	9102      	str	r1, [sp, #8]
 80180a8:	9201      	str	r2, [sp, #4]
 80180aa:	9300      	str	r3, [sp, #0]
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	462a      	mov	r2, r5
 80180b0:	4621      	mov	r1, r4
 80180b2:	f7ff ff67 	bl	8017f84 <tcp_output_alloc_header_common>
 80180b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d006      	beq.n	80180cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180c2:	68fa      	ldr	r2, [r7, #12]
 80180c4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80180c6:	441a      	add	r2, r3
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80180cc:	697b      	ldr	r3, [r7, #20]
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	3718      	adds	r7, #24
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bdb0      	pop	{r4, r5, r7, pc}
 80180d6:	bf00      	nop
 80180d8:	0801fce4 	.word	0x0801fce4
 80180dc:	08020448 	.word	0x08020448
 80180e0:	0801fd38 	.word	0x0801fd38

080180e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b088      	sub	sp, #32
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	60f8      	str	r0, [r7, #12]
 80180ec:	60b9      	str	r1, [r7, #8]
 80180ee:	4611      	mov	r1, r2
 80180f0:	461a      	mov	r2, r3
 80180f2:	460b      	mov	r3, r1
 80180f4:	71fb      	strb	r3, [r7, #7]
 80180f6:	4613      	mov	r3, r2
 80180f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80180fa:	2300      	movs	r3, #0
 80180fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d106      	bne.n	8018112 <tcp_output_fill_options+0x2e>
 8018104:	4b12      	ldr	r3, [pc, #72]	@ (8018150 <tcp_output_fill_options+0x6c>)
 8018106:	f240 7256 	movw	r2, #1878	@ 0x756
 801810a:	4912      	ldr	r1, [pc, #72]	@ (8018154 <tcp_output_fill_options+0x70>)
 801810c:	4812      	ldr	r0, [pc, #72]	@ (8018158 <tcp_output_fill_options+0x74>)
 801810e:	f004 fa9f 	bl	801c650 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018112:	68bb      	ldr	r3, [r7, #8]
 8018114:	685b      	ldr	r3, [r3, #4]
 8018116:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018118:	69bb      	ldr	r3, [r7, #24]
 801811a:	3314      	adds	r3, #20
 801811c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801811e:	8bfb      	ldrh	r3, [r7, #30]
 8018120:	009b      	lsls	r3, r3, #2
 8018122:	461a      	mov	r2, r3
 8018124:	79fb      	ldrb	r3, [r7, #7]
 8018126:	009b      	lsls	r3, r3, #2
 8018128:	f003 0304 	and.w	r3, r3, #4
 801812c:	4413      	add	r3, r2
 801812e:	3314      	adds	r3, #20
 8018130:	69ba      	ldr	r2, [r7, #24]
 8018132:	4413      	add	r3, r2
 8018134:	697a      	ldr	r2, [r7, #20]
 8018136:	429a      	cmp	r2, r3
 8018138:	d006      	beq.n	8018148 <tcp_output_fill_options+0x64>
 801813a:	4b05      	ldr	r3, [pc, #20]	@ (8018150 <tcp_output_fill_options+0x6c>)
 801813c:	f240 7275 	movw	r2, #1909	@ 0x775
 8018140:	4906      	ldr	r1, [pc, #24]	@ (801815c <tcp_output_fill_options+0x78>)
 8018142:	4805      	ldr	r0, [pc, #20]	@ (8018158 <tcp_output_fill_options+0x74>)
 8018144:	f004 fa84 	bl	801c650 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018148:	bf00      	nop
 801814a:	3720      	adds	r7, #32
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}
 8018150:	0801fce4 	.word	0x0801fce4
 8018154:	08020470 	.word	0x08020470
 8018158:	0801fd38 	.word	0x0801fd38
 801815c:	08020368 	.word	0x08020368

08018160 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b08a      	sub	sp, #40	@ 0x28
 8018164:	af04      	add	r7, sp, #16
 8018166:	60f8      	str	r0, [r7, #12]
 8018168:	60b9      	str	r1, [r7, #8]
 801816a:	607a      	str	r2, [r7, #4]
 801816c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801816e:	68bb      	ldr	r3, [r7, #8]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d106      	bne.n	8018182 <tcp_output_control_segment+0x22>
 8018174:	4b1c      	ldr	r3, [pc, #112]	@ (80181e8 <tcp_output_control_segment+0x88>)
 8018176:	f240 7287 	movw	r2, #1927	@ 0x787
 801817a:	491c      	ldr	r1, [pc, #112]	@ (80181ec <tcp_output_control_segment+0x8c>)
 801817c:	481c      	ldr	r0, [pc, #112]	@ (80181f0 <tcp_output_control_segment+0x90>)
 801817e:	f004 fa67 	bl	801c650 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018182:	683a      	ldr	r2, [r7, #0]
 8018184:	6879      	ldr	r1, [r7, #4]
 8018186:	68f8      	ldr	r0, [r7, #12]
 8018188:	f7fe fa7c 	bl	8016684 <tcp_route>
 801818c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801818e:	693b      	ldr	r3, [r7, #16]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d102      	bne.n	801819a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018194:	23fc      	movs	r3, #252	@ 0xfc
 8018196:	75fb      	strb	r3, [r7, #23]
 8018198:	e01c      	b.n	80181d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d006      	beq.n	80181ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	7adb      	ldrb	r3, [r3, #11]
 80181a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	7a9b      	ldrb	r3, [r3, #10]
 80181aa:	757b      	strb	r3, [r7, #21]
 80181ac:	e003      	b.n	80181b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80181ae:	23ff      	movs	r3, #255	@ 0xff
 80181b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80181b2:	2300      	movs	r3, #0
 80181b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80181b6:	7dba      	ldrb	r2, [r7, #22]
 80181b8:	693b      	ldr	r3, [r7, #16]
 80181ba:	9302      	str	r3, [sp, #8]
 80181bc:	2306      	movs	r3, #6
 80181be:	9301      	str	r3, [sp, #4]
 80181c0:	7d7b      	ldrb	r3, [r7, #21]
 80181c2:	9300      	str	r3, [sp, #0]
 80181c4:	4613      	mov	r3, r2
 80181c6:	683a      	ldr	r2, [r7, #0]
 80181c8:	6879      	ldr	r1, [r7, #4]
 80181ca:	68b8      	ldr	r0, [r7, #8]
 80181cc:	f002 fe1c 	bl	801ae08 <ip4_output_if>
 80181d0:	4603      	mov	r3, r0
 80181d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80181d4:	68b8      	ldr	r0, [r7, #8]
 80181d6:	f7f9 fde1 	bl	8011d9c <pbuf_free>
  return err;
 80181da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80181de:	4618      	mov	r0, r3
 80181e0:	3718      	adds	r7, #24
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}
 80181e6:	bf00      	nop
 80181e8:	0801fce4 	.word	0x0801fce4
 80181ec:	08020498 	.word	0x08020498
 80181f0:	0801fd38 	.word	0x0801fd38

080181f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80181f4:	b590      	push	{r4, r7, lr}
 80181f6:	b08b      	sub	sp, #44	@ 0x2c
 80181f8:	af04      	add	r7, sp, #16
 80181fa:	60f8      	str	r0, [r7, #12]
 80181fc:	60b9      	str	r1, [r7, #8]
 80181fe:	607a      	str	r2, [r7, #4]
 8018200:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018202:	683b      	ldr	r3, [r7, #0]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d106      	bne.n	8018216 <tcp_rst+0x22>
 8018208:	4b1f      	ldr	r3, [pc, #124]	@ (8018288 <tcp_rst+0x94>)
 801820a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801820e:	491f      	ldr	r1, [pc, #124]	@ (801828c <tcp_rst+0x98>)
 8018210:	481f      	ldr	r0, [pc, #124]	@ (8018290 <tcp_rst+0x9c>)
 8018212:	f004 fa1d 	bl	801c650 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018218:	2b00      	cmp	r3, #0
 801821a:	d106      	bne.n	801822a <tcp_rst+0x36>
 801821c:	4b1a      	ldr	r3, [pc, #104]	@ (8018288 <tcp_rst+0x94>)
 801821e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8018222:	491c      	ldr	r1, [pc, #112]	@ (8018294 <tcp_rst+0xa0>)
 8018224:	481a      	ldr	r0, [pc, #104]	@ (8018290 <tcp_rst+0x9c>)
 8018226:	f004 fa13 	bl	801c650 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801822a:	2300      	movs	r3, #0
 801822c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801822e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8018232:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018234:	7dfb      	ldrb	r3, [r7, #23]
 8018236:	b29c      	uxth	r4, r3
 8018238:	68b8      	ldr	r0, [r7, #8]
 801823a:	f7f8 f8e1 	bl	8010400 <lwip_htonl>
 801823e:	4602      	mov	r2, r0
 8018240:	8abb      	ldrh	r3, [r7, #20]
 8018242:	9303      	str	r3, [sp, #12]
 8018244:	2314      	movs	r3, #20
 8018246:	9302      	str	r3, [sp, #8]
 8018248:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801824a:	9301      	str	r3, [sp, #4]
 801824c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801824e:	9300      	str	r3, [sp, #0]
 8018250:	4613      	mov	r3, r2
 8018252:	2200      	movs	r2, #0
 8018254:	4621      	mov	r1, r4
 8018256:	6878      	ldr	r0, [r7, #4]
 8018258:	f7ff fe94 	bl	8017f84 <tcp_output_alloc_header_common>
 801825c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801825e:	693b      	ldr	r3, [r7, #16]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d00c      	beq.n	801827e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018264:	7dfb      	ldrb	r3, [r7, #23]
 8018266:	2200      	movs	r2, #0
 8018268:	6939      	ldr	r1, [r7, #16]
 801826a:	68f8      	ldr	r0, [r7, #12]
 801826c:	f7ff ff3a 	bl	80180e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018272:	683a      	ldr	r2, [r7, #0]
 8018274:	6939      	ldr	r1, [r7, #16]
 8018276:	68f8      	ldr	r0, [r7, #12]
 8018278:	f7ff ff72 	bl	8018160 <tcp_output_control_segment>
 801827c:	e000      	b.n	8018280 <tcp_rst+0x8c>
    return;
 801827e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018280:	371c      	adds	r7, #28
 8018282:	46bd      	mov	sp, r7
 8018284:	bd90      	pop	{r4, r7, pc}
 8018286:	bf00      	nop
 8018288:	0801fce4 	.word	0x0801fce4
 801828c:	080204c4 	.word	0x080204c4
 8018290:	0801fd38 	.word	0x0801fd38
 8018294:	080204e0 	.word	0x080204e0

08018298 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018298:	b590      	push	{r4, r7, lr}
 801829a:	b087      	sub	sp, #28
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80182a0:	2300      	movs	r3, #0
 80182a2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80182a4:	2300      	movs	r3, #0
 80182a6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d106      	bne.n	80182bc <tcp_send_empty_ack+0x24>
 80182ae:	4b28      	ldr	r3, [pc, #160]	@ (8018350 <tcp_send_empty_ack+0xb8>)
 80182b0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80182b4:	4927      	ldr	r1, [pc, #156]	@ (8018354 <tcp_send_empty_ack+0xbc>)
 80182b6:	4828      	ldr	r0, [pc, #160]	@ (8018358 <tcp_send_empty_ack+0xc0>)
 80182b8:	f004 f9ca 	bl	801c650 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80182bc:	7dfb      	ldrb	r3, [r7, #23]
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	b2db      	uxtb	r3, r3
 80182c2:	f003 0304 	and.w	r3, r3, #4
 80182c6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80182c8:	7d7b      	ldrb	r3, [r7, #21]
 80182ca:	b29c      	uxth	r4, r3
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7f8 f895 	bl	8010400 <lwip_htonl>
 80182d6:	4603      	mov	r3, r0
 80182d8:	2200      	movs	r2, #0
 80182da:	4621      	mov	r1, r4
 80182dc:	6878      	ldr	r0, [r7, #4]
 80182de:	f7ff fec3 	bl	8018068 <tcp_output_alloc_header>
 80182e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80182e4:	693b      	ldr	r3, [r7, #16]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d109      	bne.n	80182fe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	8b5b      	ldrh	r3, [r3, #26]
 80182ee:	f043 0303 	orr.w	r3, r3, #3
 80182f2:	b29a      	uxth	r2, r3
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80182f8:	f06f 0301 	mvn.w	r3, #1
 80182fc:	e023      	b.n	8018346 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80182fe:	7dbb      	ldrb	r3, [r7, #22]
 8018300:	7dfa      	ldrb	r2, [r7, #23]
 8018302:	6939      	ldr	r1, [r7, #16]
 8018304:	6878      	ldr	r0, [r7, #4]
 8018306:	f7ff feed 	bl	80180e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801830a:	687a      	ldr	r2, [r7, #4]
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	3304      	adds	r3, #4
 8018310:	6939      	ldr	r1, [r7, #16]
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7ff ff24 	bl	8018160 <tcp_output_control_segment>
 8018318:	4603      	mov	r3, r0
 801831a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801831c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d007      	beq.n	8018334 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	8b5b      	ldrh	r3, [r3, #26]
 8018328:	f043 0303 	orr.w	r3, r3, #3
 801832c:	b29a      	uxth	r2, r3
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	835a      	strh	r2, [r3, #26]
 8018332:	e006      	b.n	8018342 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	8b5b      	ldrh	r3, [r3, #26]
 8018338:	f023 0303 	bic.w	r3, r3, #3
 801833c:	b29a      	uxth	r2, r3
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018342:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018346:	4618      	mov	r0, r3
 8018348:	371c      	adds	r7, #28
 801834a:	46bd      	mov	sp, r7
 801834c:	bd90      	pop	{r4, r7, pc}
 801834e:	bf00      	nop
 8018350:	0801fce4 	.word	0x0801fce4
 8018354:	080204fc 	.word	0x080204fc
 8018358:	0801fd38 	.word	0x0801fd38

0801835c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801835c:	b590      	push	{r4, r7, lr}
 801835e:	b085      	sub	sp, #20
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018364:	2300      	movs	r3, #0
 8018366:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d106      	bne.n	801837c <tcp_keepalive+0x20>
 801836e:	4b18      	ldr	r3, [pc, #96]	@ (80183d0 <tcp_keepalive+0x74>)
 8018370:	f640 0224 	movw	r2, #2084	@ 0x824
 8018374:	4917      	ldr	r1, [pc, #92]	@ (80183d4 <tcp_keepalive+0x78>)
 8018376:	4818      	ldr	r0, [pc, #96]	@ (80183d8 <tcp_keepalive+0x7c>)
 8018378:	f004 f96a 	bl	801c650 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801837c:	7abb      	ldrb	r3, [r7, #10]
 801837e:	b29c      	uxth	r4, r3
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018384:	3b01      	subs	r3, #1
 8018386:	4618      	mov	r0, r3
 8018388:	f7f8 f83a 	bl	8010400 <lwip_htonl>
 801838c:	4603      	mov	r3, r0
 801838e:	2200      	movs	r2, #0
 8018390:	4621      	mov	r1, r4
 8018392:	6878      	ldr	r0, [r7, #4]
 8018394:	f7ff fe68 	bl	8018068 <tcp_output_alloc_header>
 8018398:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d102      	bne.n	80183a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80183a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80183a4:	e010      	b.n	80183c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80183a6:	7abb      	ldrb	r3, [r7, #10]
 80183a8:	2200      	movs	r2, #0
 80183aa:	68f9      	ldr	r1, [r7, #12]
 80183ac:	6878      	ldr	r0, [r7, #4]
 80183ae:	f7ff fe99 	bl	80180e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80183b2:	687a      	ldr	r2, [r7, #4]
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	3304      	adds	r3, #4
 80183b8:	68f9      	ldr	r1, [r7, #12]
 80183ba:	6878      	ldr	r0, [r7, #4]
 80183bc:	f7ff fed0 	bl	8018160 <tcp_output_control_segment>
 80183c0:	4603      	mov	r3, r0
 80183c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80183c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80183c8:	4618      	mov	r0, r3
 80183ca:	3714      	adds	r7, #20
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bd90      	pop	{r4, r7, pc}
 80183d0:	0801fce4 	.word	0x0801fce4
 80183d4:	0802051c 	.word	0x0802051c
 80183d8:	0801fd38 	.word	0x0801fd38

080183dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80183dc:	b590      	push	{r4, r7, lr}
 80183de:	b08b      	sub	sp, #44	@ 0x2c
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80183e4:	2300      	movs	r3, #0
 80183e6:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d106      	bne.n	80183fc <tcp_zero_window_probe+0x20>
 80183ee:	4b4d      	ldr	r3, [pc, #308]	@ (8018524 <tcp_zero_window_probe+0x148>)
 80183f0:	f640 024f 	movw	r2, #2127	@ 0x84f
 80183f4:	494c      	ldr	r1, [pc, #304]	@ (8018528 <tcp_zero_window_probe+0x14c>)
 80183f6:	484d      	ldr	r0, [pc, #308]	@ (801852c <tcp_zero_window_probe+0x150>)
 80183f8:	f004 f92a 	bl	801c650 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018400:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8018402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018404:	2b00      	cmp	r3, #0
 8018406:	d101      	bne.n	801840c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018408:	2300      	movs	r3, #0
 801840a:	e087      	b.n	801851c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8018412:	2bff      	cmp	r3, #255	@ 0xff
 8018414:	d007      	beq.n	8018426 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801841c:	3301      	adds	r3, #1
 801841e:	b2da      	uxtb	r2, r3
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018428:	691b      	ldr	r3, [r3, #16]
 801842a:	899b      	ldrh	r3, [r3, #12]
 801842c:	b29b      	uxth	r3, r3
 801842e:	4618      	mov	r0, r3
 8018430:	f7f7 ffd0 	bl	80103d4 <lwip_htons>
 8018434:	4603      	mov	r3, r0
 8018436:	b2db      	uxtb	r3, r3
 8018438:	f003 0301 	and.w	r3, r3, #1
 801843c:	2b00      	cmp	r3, #0
 801843e:	d005      	beq.n	801844c <tcp_zero_window_probe+0x70>
 8018440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018442:	891b      	ldrh	r3, [r3, #8]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d101      	bne.n	801844c <tcp_zero_window_probe+0x70>
 8018448:	2301      	movs	r3, #1
 801844a:	e000      	b.n	801844e <tcp_zero_window_probe+0x72>
 801844c:	2300      	movs	r3, #0
 801844e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018452:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018456:	2b00      	cmp	r3, #0
 8018458:	bf0c      	ite	eq
 801845a:	2301      	moveq	r3, #1
 801845c:	2300      	movne	r3, #0
 801845e:	b2db      	uxtb	r3, r3
 8018460:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018462:	7cfb      	ldrb	r3, [r7, #19]
 8018464:	b299      	uxth	r1, r3
 8018466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018468:	691b      	ldr	r3, [r3, #16]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	8c3a      	ldrh	r2, [r7, #32]
 801846e:	6878      	ldr	r0, [r7, #4]
 8018470:	f7ff fdfa 	bl	8018068 <tcp_output_alloc_header>
 8018474:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8018476:	69fb      	ldr	r3, [r7, #28]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d102      	bne.n	8018482 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801847c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018480:	e04c      	b.n	801851c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018482:	69fb      	ldr	r3, [r7, #28]
 8018484:	685b      	ldr	r3, [r3, #4]
 8018486:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8018488:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801848c:	2b00      	cmp	r3, #0
 801848e:	d011      	beq.n	80184b4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018490:	69bb      	ldr	r3, [r7, #24]
 8018492:	899b      	ldrh	r3, [r3, #12]
 8018494:	b29b      	uxth	r3, r3
 8018496:	b21b      	sxth	r3, r3
 8018498:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801849c:	b21c      	sxth	r4, r3
 801849e:	2011      	movs	r0, #17
 80184a0:	f7f7 ff98 	bl	80103d4 <lwip_htons>
 80184a4:	4603      	mov	r3, r0
 80184a6:	b21b      	sxth	r3, r3
 80184a8:	4323      	orrs	r3, r4
 80184aa:	b21b      	sxth	r3, r3
 80184ac:	b29a      	uxth	r2, r3
 80184ae:	69bb      	ldr	r3, [r7, #24]
 80184b0:	819a      	strh	r2, [r3, #12]
 80184b2:	e010      	b.n	80184d6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80184b4:	69fb      	ldr	r3, [r7, #28]
 80184b6:	685b      	ldr	r3, [r3, #4]
 80184b8:	3314      	adds	r3, #20
 80184ba:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80184bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184be:	6858      	ldr	r0, [r3, #4]
 80184c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c2:	685b      	ldr	r3, [r3, #4]
 80184c4:	891a      	ldrh	r2, [r3, #8]
 80184c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c8:	891b      	ldrh	r3, [r3, #8]
 80184ca:	1ad3      	subs	r3, r2, r3
 80184cc:	b29b      	uxth	r3, r3
 80184ce:	2201      	movs	r2, #1
 80184d0:	6979      	ldr	r1, [r7, #20]
 80184d2:	f7f9 fe69 	bl	80121a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80184d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184d8:	691b      	ldr	r3, [r3, #16]
 80184da:	685b      	ldr	r3, [r3, #4]
 80184dc:	4618      	mov	r0, r3
 80184de:	f7f7 ff8f 	bl	8010400 <lwip_htonl>
 80184e2:	4603      	mov	r3, r0
 80184e4:	3301      	adds	r3, #1
 80184e6:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	1ad3      	subs	r3, r2, r3
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	da02      	bge.n	80184fa <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	68fa      	ldr	r2, [r7, #12]
 80184f8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80184fa:	7cfb      	ldrb	r3, [r7, #19]
 80184fc:	2200      	movs	r2, #0
 80184fe:	69f9      	ldr	r1, [r7, #28]
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f7ff fdef 	bl	80180e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018506:	687a      	ldr	r2, [r7, #4]
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	3304      	adds	r3, #4
 801850c:	69f9      	ldr	r1, [r7, #28]
 801850e:	6878      	ldr	r0, [r7, #4]
 8018510:	f7ff fe26 	bl	8018160 <tcp_output_control_segment>
 8018514:	4603      	mov	r3, r0
 8018516:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018518:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801851c:	4618      	mov	r0, r3
 801851e:	372c      	adds	r7, #44	@ 0x2c
 8018520:	46bd      	mov	sp, r7
 8018522:	bd90      	pop	{r4, r7, pc}
 8018524:	0801fce4 	.word	0x0801fce4
 8018528:	08020538 	.word	0x08020538
 801852c:	0801fd38 	.word	0x0801fd38

08018530 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018538:	f7f9 ff24 	bl	8012384 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801853c:	4b0a      	ldr	r3, [pc, #40]	@ (8018568 <tcpip_tcp_timer+0x38>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d103      	bne.n	801854c <tcpip_tcp_timer+0x1c>
 8018544:	4b09      	ldr	r3, [pc, #36]	@ (801856c <tcpip_tcp_timer+0x3c>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d005      	beq.n	8018558 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801854c:	2200      	movs	r2, #0
 801854e:	4908      	ldr	r1, [pc, #32]	@ (8018570 <tcpip_tcp_timer+0x40>)
 8018550:	20fa      	movs	r0, #250	@ 0xfa
 8018552:	f000 f8f3 	bl	801873c <sys_timeout>
 8018556:	e003      	b.n	8018560 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018558:	4b06      	ldr	r3, [pc, #24]	@ (8018574 <tcpip_tcp_timer+0x44>)
 801855a:	2200      	movs	r2, #0
 801855c:	601a      	str	r2, [r3, #0]
  }
}
 801855e:	bf00      	nop
 8018560:	bf00      	nop
 8018562:	3708      	adds	r7, #8
 8018564:	46bd      	mov	sp, r7
 8018566:	bd80      	pop	{r7, pc}
 8018568:	200227a8 	.word	0x200227a8
 801856c:	200227ac 	.word	0x200227ac
 8018570:	08018531 	.word	0x08018531
 8018574:	200227f8 	.word	0x200227f8

08018578 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018578:	b580      	push	{r7, lr}
 801857a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801857c:	4b0a      	ldr	r3, [pc, #40]	@ (80185a8 <tcp_timer_needed+0x30>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d10f      	bne.n	80185a4 <tcp_timer_needed+0x2c>
 8018584:	4b09      	ldr	r3, [pc, #36]	@ (80185ac <tcp_timer_needed+0x34>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d103      	bne.n	8018594 <tcp_timer_needed+0x1c>
 801858c:	4b08      	ldr	r3, [pc, #32]	@ (80185b0 <tcp_timer_needed+0x38>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d007      	beq.n	80185a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018594:	4b04      	ldr	r3, [pc, #16]	@ (80185a8 <tcp_timer_needed+0x30>)
 8018596:	2201      	movs	r2, #1
 8018598:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801859a:	2200      	movs	r2, #0
 801859c:	4905      	ldr	r1, [pc, #20]	@ (80185b4 <tcp_timer_needed+0x3c>)
 801859e:	20fa      	movs	r0, #250	@ 0xfa
 80185a0:	f000 f8cc 	bl	801873c <sys_timeout>
  }
}
 80185a4:	bf00      	nop
 80185a6:	bd80      	pop	{r7, pc}
 80185a8:	200227f8 	.word	0x200227f8
 80185ac:	200227a8 	.word	0x200227a8
 80185b0:	200227ac 	.word	0x200227ac
 80185b4:	08018531 	.word	0x08018531

080185b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b086      	sub	sp, #24
 80185bc:	af00      	add	r7, sp, #0
 80185be:	60f8      	str	r0, [r7, #12]
 80185c0:	60b9      	str	r1, [r7, #8]
 80185c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80185c4:	200a      	movs	r0, #10
 80185c6:	f7f8 fbd9 	bl	8010d7c <memp_malloc>
 80185ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80185cc:	693b      	ldr	r3, [r7, #16]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d109      	bne.n	80185e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80185d2:	693b      	ldr	r3, [r7, #16]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d151      	bne.n	801867c <sys_timeout_abs+0xc4>
 80185d8:	4b2a      	ldr	r3, [pc, #168]	@ (8018684 <sys_timeout_abs+0xcc>)
 80185da:	22be      	movs	r2, #190	@ 0xbe
 80185dc:	492a      	ldr	r1, [pc, #168]	@ (8018688 <sys_timeout_abs+0xd0>)
 80185de:	482b      	ldr	r0, [pc, #172]	@ (801868c <sys_timeout_abs+0xd4>)
 80185e0:	f004 f836 	bl	801c650 <iprintf>
    return;
 80185e4:	e04a      	b.n	801867c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80185e6:	693b      	ldr	r3, [r7, #16]
 80185e8:	2200      	movs	r2, #0
 80185ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80185ec:	693b      	ldr	r3, [r7, #16]
 80185ee:	68ba      	ldr	r2, [r7, #8]
 80185f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80185f2:	693b      	ldr	r3, [r7, #16]
 80185f4:	687a      	ldr	r2, [r7, #4]
 80185f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	68fa      	ldr	r2, [r7, #12]
 80185fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80185fe:	4b24      	ldr	r3, [pc, #144]	@ (8018690 <sys_timeout_abs+0xd8>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d103      	bne.n	801860e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018606:	4a22      	ldr	r2, [pc, #136]	@ (8018690 <sys_timeout_abs+0xd8>)
 8018608:	693b      	ldr	r3, [r7, #16]
 801860a:	6013      	str	r3, [r2, #0]
    return;
 801860c:	e037      	b.n	801867e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801860e:	693b      	ldr	r3, [r7, #16]
 8018610:	685a      	ldr	r2, [r3, #4]
 8018612:	4b1f      	ldr	r3, [pc, #124]	@ (8018690 <sys_timeout_abs+0xd8>)
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	685b      	ldr	r3, [r3, #4]
 8018618:	1ad3      	subs	r3, r2, r3
 801861a:	0fdb      	lsrs	r3, r3, #31
 801861c:	f003 0301 	and.w	r3, r3, #1
 8018620:	b2db      	uxtb	r3, r3
 8018622:	2b00      	cmp	r3, #0
 8018624:	d007      	beq.n	8018636 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018626:	4b1a      	ldr	r3, [pc, #104]	@ (8018690 <sys_timeout_abs+0xd8>)
 8018628:	681a      	ldr	r2, [r3, #0]
 801862a:	693b      	ldr	r3, [r7, #16]
 801862c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801862e:	4a18      	ldr	r2, [pc, #96]	@ (8018690 <sys_timeout_abs+0xd8>)
 8018630:	693b      	ldr	r3, [r7, #16]
 8018632:	6013      	str	r3, [r2, #0]
 8018634:	e023      	b.n	801867e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018636:	4b16      	ldr	r3, [pc, #88]	@ (8018690 <sys_timeout_abs+0xd8>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	617b      	str	r3, [r7, #20]
 801863c:	e01a      	b.n	8018674 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d00b      	beq.n	801865e <sys_timeout_abs+0xa6>
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	685a      	ldr	r2, [r3, #4]
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	685b      	ldr	r3, [r3, #4]
 8018650:	1ad3      	subs	r3, r2, r3
 8018652:	0fdb      	lsrs	r3, r3, #31
 8018654:	f003 0301 	and.w	r3, r3, #1
 8018658:	b2db      	uxtb	r3, r3
 801865a:	2b00      	cmp	r3, #0
 801865c:	d007      	beq.n	801866e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801865e:	697b      	ldr	r3, [r7, #20]
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	693b      	ldr	r3, [r7, #16]
 8018664:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018666:	697b      	ldr	r3, [r7, #20]
 8018668:	693a      	ldr	r2, [r7, #16]
 801866a:	601a      	str	r2, [r3, #0]
        break;
 801866c:	e007      	b.n	801867e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801866e:	697b      	ldr	r3, [r7, #20]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	617b      	str	r3, [r7, #20]
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d1e1      	bne.n	801863e <sys_timeout_abs+0x86>
 801867a:	e000      	b.n	801867e <sys_timeout_abs+0xc6>
    return;
 801867c:	bf00      	nop
      }
    }
  }
}
 801867e:	3718      	adds	r7, #24
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}
 8018684:	0802055c 	.word	0x0802055c
 8018688:	08020590 	.word	0x08020590
 801868c:	080205d0 	.word	0x080205d0
 8018690:	200227f0 	.word	0x200227f0

08018694 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b086      	sub	sp, #24
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80186a0:	697b      	ldr	r3, [r7, #20]
 80186a2:	685b      	ldr	r3, [r3, #4]
 80186a4:	4798      	blx	r3

  now = sys_now();
 80186a6:	f7f0 fe31 	bl	800930c <sys_now>
 80186aa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	681a      	ldr	r2, [r3, #0]
 80186b0:	4b0f      	ldr	r3, [pc, #60]	@ (80186f0 <lwip_cyclic_timer+0x5c>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	4413      	add	r3, r2
 80186b6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80186b8:	68fa      	ldr	r2, [r7, #12]
 80186ba:	693b      	ldr	r3, [r7, #16]
 80186bc:	1ad3      	subs	r3, r2, r3
 80186be:	0fdb      	lsrs	r3, r3, #31
 80186c0:	f003 0301 	and.w	r3, r3, #1
 80186c4:	b2db      	uxtb	r3, r3
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d009      	beq.n	80186de <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80186ca:	697b      	ldr	r3, [r7, #20]
 80186cc:	681a      	ldr	r2, [r3, #0]
 80186ce:	693b      	ldr	r3, [r7, #16]
 80186d0:	4413      	add	r3, r2
 80186d2:	687a      	ldr	r2, [r7, #4]
 80186d4:	4907      	ldr	r1, [pc, #28]	@ (80186f4 <lwip_cyclic_timer+0x60>)
 80186d6:	4618      	mov	r0, r3
 80186d8:	f7ff ff6e 	bl	80185b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80186dc:	e004      	b.n	80186e8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80186de:	687a      	ldr	r2, [r7, #4]
 80186e0:	4904      	ldr	r1, [pc, #16]	@ (80186f4 <lwip_cyclic_timer+0x60>)
 80186e2:	68f8      	ldr	r0, [r7, #12]
 80186e4:	f7ff ff68 	bl	80185b8 <sys_timeout_abs>
}
 80186e8:	bf00      	nop
 80186ea:	3718      	adds	r7, #24
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd80      	pop	{r7, pc}
 80186f0:	200227f4 	.word	0x200227f4
 80186f4:	08018695 	.word	0x08018695

080186f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b082      	sub	sp, #8
 80186fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80186fe:	2301      	movs	r3, #1
 8018700:	607b      	str	r3, [r7, #4]
 8018702:	e00e      	b.n	8018722 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018704:	4a0b      	ldr	r2, [pc, #44]	@ (8018734 <sys_timeouts_init+0x3c>)
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	00db      	lsls	r3, r3, #3
 8018710:	4a08      	ldr	r2, [pc, #32]	@ (8018734 <sys_timeouts_init+0x3c>)
 8018712:	4413      	add	r3, r2
 8018714:	461a      	mov	r2, r3
 8018716:	4908      	ldr	r1, [pc, #32]	@ (8018738 <sys_timeouts_init+0x40>)
 8018718:	f000 f810 	bl	801873c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	3301      	adds	r3, #1
 8018720:	607b      	str	r3, [r7, #4]
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	2b02      	cmp	r3, #2
 8018726:	d9ed      	bls.n	8018704 <sys_timeouts_init+0xc>
  }
}
 8018728:	bf00      	nop
 801872a:	bf00      	nop
 801872c:	3708      	adds	r7, #8
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}
 8018732:	bf00      	nop
 8018734:	08021ae8 	.word	0x08021ae8
 8018738:	08018695 	.word	0x08018695

0801873c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b086      	sub	sp, #24
 8018740:	af00      	add	r7, sp, #0
 8018742:	60f8      	str	r0, [r7, #12]
 8018744:	60b9      	str	r1, [r7, #8]
 8018746:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801874e:	d306      	bcc.n	801875e <sys_timeout+0x22>
 8018750:	4b0a      	ldr	r3, [pc, #40]	@ (801877c <sys_timeout+0x40>)
 8018752:	f240 1229 	movw	r2, #297	@ 0x129
 8018756:	490a      	ldr	r1, [pc, #40]	@ (8018780 <sys_timeout+0x44>)
 8018758:	480a      	ldr	r0, [pc, #40]	@ (8018784 <sys_timeout+0x48>)
 801875a:	f003 ff79 	bl	801c650 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801875e:	f7f0 fdd5 	bl	800930c <sys_now>
 8018762:	4602      	mov	r2, r0
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	4413      	add	r3, r2
 8018768:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801876a:	687a      	ldr	r2, [r7, #4]
 801876c:	68b9      	ldr	r1, [r7, #8]
 801876e:	6978      	ldr	r0, [r7, #20]
 8018770:	f7ff ff22 	bl	80185b8 <sys_timeout_abs>
#endif
}
 8018774:	bf00      	nop
 8018776:	3718      	adds	r7, #24
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}
 801877c:	0802055c 	.word	0x0802055c
 8018780:	080205f8 	.word	0x080205f8
 8018784:	080205d0 	.word	0x080205d0

08018788 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b084      	sub	sp, #16
 801878c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801878e:	f7f0 fdbd 	bl	800930c <sys_now>
 8018792:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018794:	4b17      	ldr	r3, [pc, #92]	@ (80187f4 <sys_check_timeouts+0x6c>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801879a:	68bb      	ldr	r3, [r7, #8]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d022      	beq.n	80187e6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80187a0:	68bb      	ldr	r3, [r7, #8]
 80187a2:	685b      	ldr	r3, [r3, #4]
 80187a4:	68fa      	ldr	r2, [r7, #12]
 80187a6:	1ad3      	subs	r3, r2, r3
 80187a8:	0fdb      	lsrs	r3, r3, #31
 80187aa:	f003 0301 	and.w	r3, r3, #1
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d11a      	bne.n	80187ea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80187b4:	68bb      	ldr	r3, [r7, #8]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	4a0e      	ldr	r2, [pc, #56]	@ (80187f4 <sys_check_timeouts+0x6c>)
 80187ba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	689b      	ldr	r3, [r3, #8]
 80187c0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80187c2:	68bb      	ldr	r3, [r7, #8]
 80187c4:	68db      	ldr	r3, [r3, #12]
 80187c6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	685b      	ldr	r3, [r3, #4]
 80187cc:	4a0a      	ldr	r2, [pc, #40]	@ (80187f8 <sys_check_timeouts+0x70>)
 80187ce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80187d0:	68b9      	ldr	r1, [r7, #8]
 80187d2:	200a      	movs	r0, #10
 80187d4:	f7f8 fb48 	bl	8010e68 <memp_free>
    if (handler != NULL) {
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d0da      	beq.n	8018794 <sys_check_timeouts+0xc>
      handler(arg);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	6838      	ldr	r0, [r7, #0]
 80187e2:	4798      	blx	r3
  do {
 80187e4:	e7d6      	b.n	8018794 <sys_check_timeouts+0xc>
      return;
 80187e6:	bf00      	nop
 80187e8:	e000      	b.n	80187ec <sys_check_timeouts+0x64>
      return;
 80187ea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80187ec:	3710      	adds	r7, #16
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	bf00      	nop
 80187f4:	200227f0 	.word	0x200227f0
 80187f8:	200227f4 	.word	0x200227f4

080187fc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b082      	sub	sp, #8
 8018800:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8018802:	4b16      	ldr	r3, [pc, #88]	@ (801885c <sys_timeouts_sleeptime+0x60>)
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d102      	bne.n	8018810 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801880a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801880e:	e020      	b.n	8018852 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018810:	f7f0 fd7c 	bl	800930c <sys_now>
 8018814:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018816:	4b11      	ldr	r3, [pc, #68]	@ (801885c <sys_timeouts_sleeptime+0x60>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	685a      	ldr	r2, [r3, #4]
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	1ad3      	subs	r3, r2, r3
 8018820:	0fdb      	lsrs	r3, r3, #31
 8018822:	f003 0301 	and.w	r3, r3, #1
 8018826:	b2db      	uxtb	r3, r3
 8018828:	2b00      	cmp	r3, #0
 801882a:	d001      	beq.n	8018830 <sys_timeouts_sleeptime+0x34>
    return 0;
 801882c:	2300      	movs	r3, #0
 801882e:	e010      	b.n	8018852 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018830:	4b0a      	ldr	r3, [pc, #40]	@ (801885c <sys_timeouts_sleeptime+0x60>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	685a      	ldr	r2, [r3, #4]
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	1ad3      	subs	r3, r2, r3
 801883a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	2b00      	cmp	r3, #0
 8018840:	da06      	bge.n	8018850 <sys_timeouts_sleeptime+0x54>
 8018842:	4b07      	ldr	r3, [pc, #28]	@ (8018860 <sys_timeouts_sleeptime+0x64>)
 8018844:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8018848:	4906      	ldr	r1, [pc, #24]	@ (8018864 <sys_timeouts_sleeptime+0x68>)
 801884a:	4807      	ldr	r0, [pc, #28]	@ (8018868 <sys_timeouts_sleeptime+0x6c>)
 801884c:	f003 ff00 	bl	801c650 <iprintf>
    return ret;
 8018850:	683b      	ldr	r3, [r7, #0]
  }
}
 8018852:	4618      	mov	r0, r3
 8018854:	3708      	adds	r7, #8
 8018856:	46bd      	mov	sp, r7
 8018858:	bd80      	pop	{r7, pc}
 801885a:	bf00      	nop
 801885c:	200227f0 	.word	0x200227f0
 8018860:	0802055c 	.word	0x0802055c
 8018864:	08020630 	.word	0x08020630
 8018868:	080205d0 	.word	0x080205d0

0801886c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018870:	f003 fdee 	bl	801c450 <rand>
 8018874:	4603      	mov	r3, r0
 8018876:	b29b      	uxth	r3, r3
 8018878:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801887c:	b29b      	uxth	r3, r3
 801887e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8018882:	b29a      	uxth	r2, r3
 8018884:	4b01      	ldr	r3, [pc, #4]	@ (801888c <udp_init+0x20>)
 8018886:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018888:	bf00      	nop
 801888a:	bd80      	pop	{r7, pc}
 801888c:	20000070 	.word	0x20000070

08018890 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018890:	b480      	push	{r7}
 8018892:	b083      	sub	sp, #12
 8018894:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8018896:	2300      	movs	r3, #0
 8018898:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801889a:	4b17      	ldr	r3, [pc, #92]	@ (80188f8 <udp_new_port+0x68>)
 801889c:	881b      	ldrh	r3, [r3, #0]
 801889e:	1c5a      	adds	r2, r3, #1
 80188a0:	b291      	uxth	r1, r2
 80188a2:	4a15      	ldr	r2, [pc, #84]	@ (80188f8 <udp_new_port+0x68>)
 80188a4:	8011      	strh	r1, [r2, #0]
 80188a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80188aa:	4293      	cmp	r3, r2
 80188ac:	d103      	bne.n	80188b6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80188ae:	4b12      	ldr	r3, [pc, #72]	@ (80188f8 <udp_new_port+0x68>)
 80188b0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80188b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80188b6:	4b11      	ldr	r3, [pc, #68]	@ (80188fc <udp_new_port+0x6c>)
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	603b      	str	r3, [r7, #0]
 80188bc:	e011      	b.n	80188e2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	8a5a      	ldrh	r2, [r3, #18]
 80188c2:	4b0d      	ldr	r3, [pc, #52]	@ (80188f8 <udp_new_port+0x68>)
 80188c4:	881b      	ldrh	r3, [r3, #0]
 80188c6:	429a      	cmp	r2, r3
 80188c8:	d108      	bne.n	80188dc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80188ca:	88fb      	ldrh	r3, [r7, #6]
 80188cc:	3301      	adds	r3, #1
 80188ce:	80fb      	strh	r3, [r7, #6]
 80188d0:	88fb      	ldrh	r3, [r7, #6]
 80188d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80188d6:	d3e0      	bcc.n	801889a <udp_new_port+0xa>
        return 0;
 80188d8:	2300      	movs	r3, #0
 80188da:	e007      	b.n	80188ec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80188dc:	683b      	ldr	r3, [r7, #0]
 80188de:	68db      	ldr	r3, [r3, #12]
 80188e0:	603b      	str	r3, [r7, #0]
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d1ea      	bne.n	80188be <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80188e8:	4b03      	ldr	r3, [pc, #12]	@ (80188f8 <udp_new_port+0x68>)
 80188ea:	881b      	ldrh	r3, [r3, #0]
}
 80188ec:	4618      	mov	r0, r3
 80188ee:	370c      	adds	r7, #12
 80188f0:	46bd      	mov	sp, r7
 80188f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f6:	4770      	bx	lr
 80188f8:	20000070 	.word	0x20000070
 80188fc:	200227fc 	.word	0x200227fc

08018900 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b084      	sub	sp, #16
 8018904:	af00      	add	r7, sp, #0
 8018906:	60f8      	str	r0, [r7, #12]
 8018908:	60b9      	str	r1, [r7, #8]
 801890a:	4613      	mov	r3, r2
 801890c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d105      	bne.n	8018920 <udp_input_local_match+0x20>
 8018914:	4b27      	ldr	r3, [pc, #156]	@ (80189b4 <udp_input_local_match+0xb4>)
 8018916:	2287      	movs	r2, #135	@ 0x87
 8018918:	4927      	ldr	r1, [pc, #156]	@ (80189b8 <udp_input_local_match+0xb8>)
 801891a:	4828      	ldr	r0, [pc, #160]	@ (80189bc <udp_input_local_match+0xbc>)
 801891c:	f003 fe98 	bl	801c650 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8018920:	68bb      	ldr	r3, [r7, #8]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d105      	bne.n	8018932 <udp_input_local_match+0x32>
 8018926:	4b23      	ldr	r3, [pc, #140]	@ (80189b4 <udp_input_local_match+0xb4>)
 8018928:	2288      	movs	r2, #136	@ 0x88
 801892a:	4925      	ldr	r1, [pc, #148]	@ (80189c0 <udp_input_local_match+0xc0>)
 801892c:	4823      	ldr	r0, [pc, #140]	@ (80189bc <udp_input_local_match+0xbc>)
 801892e:	f003 fe8f 	bl	801c650 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	7a1b      	ldrb	r3, [r3, #8]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d00b      	beq.n	8018952 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	7a1a      	ldrb	r2, [r3, #8]
 801893e:	4b21      	ldr	r3, [pc, #132]	@ (80189c4 <udp_input_local_match+0xc4>)
 8018940:	685b      	ldr	r3, [r3, #4]
 8018942:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018946:	3301      	adds	r3, #1
 8018948:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801894a:	429a      	cmp	r2, r3
 801894c:	d001      	beq.n	8018952 <udp_input_local_match+0x52>
    return 0;
 801894e:	2300      	movs	r3, #0
 8018950:	e02b      	b.n	80189aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018952:	79fb      	ldrb	r3, [r7, #7]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d018      	beq.n	801898a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d013      	beq.n	8018986 <udp_input_local_match+0x86>
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d00f      	beq.n	8018986 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018966:	4b17      	ldr	r3, [pc, #92]	@ (80189c4 <udp_input_local_match+0xc4>)
 8018968:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801896a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801896e:	d00a      	beq.n	8018986 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	681a      	ldr	r2, [r3, #0]
 8018974:	4b13      	ldr	r3, [pc, #76]	@ (80189c4 <udp_input_local_match+0xc4>)
 8018976:	695b      	ldr	r3, [r3, #20]
 8018978:	405a      	eors	r2, r3
 801897a:	68bb      	ldr	r3, [r7, #8]
 801897c:	3308      	adds	r3, #8
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018982:	2b00      	cmp	r3, #0
 8018984:	d110      	bne.n	80189a8 <udp_input_local_match+0xa8>
          return 1;
 8018986:	2301      	movs	r3, #1
 8018988:	e00f      	b.n	80189aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d009      	beq.n	80189a4 <udp_input_local_match+0xa4>
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d005      	beq.n	80189a4 <udp_input_local_match+0xa4>
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	681a      	ldr	r2, [r3, #0]
 801899c:	4b09      	ldr	r3, [pc, #36]	@ (80189c4 <udp_input_local_match+0xc4>)
 801899e:	695b      	ldr	r3, [r3, #20]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d101      	bne.n	80189a8 <udp_input_local_match+0xa8>
        return 1;
 80189a4:	2301      	movs	r3, #1
 80189a6:	e000      	b.n	80189aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80189a8:	2300      	movs	r3, #0
}
 80189aa:	4618      	mov	r0, r3
 80189ac:	3710      	adds	r7, #16
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	08020644 	.word	0x08020644
 80189b8:	08020674 	.word	0x08020674
 80189bc:	08020698 	.word	0x08020698
 80189c0:	080206c0 	.word	0x080206c0
 80189c4:	2001f65c 	.word	0x2001f65c

080189c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80189c8:	b590      	push	{r4, r7, lr}
 80189ca:	b08d      	sub	sp, #52	@ 0x34
 80189cc:	af02      	add	r7, sp, #8
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80189d2:	2300      	movs	r3, #0
 80189d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d105      	bne.n	80189e8 <udp_input+0x20>
 80189dc:	4b95      	ldr	r3, [pc, #596]	@ (8018c34 <udp_input+0x26c>)
 80189de:	22cf      	movs	r2, #207	@ 0xcf
 80189e0:	4995      	ldr	r1, [pc, #596]	@ (8018c38 <udp_input+0x270>)
 80189e2:	4896      	ldr	r0, [pc, #600]	@ (8018c3c <udp_input+0x274>)
 80189e4:	f003 fe34 	bl	801c650 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80189e8:	683b      	ldr	r3, [r7, #0]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d105      	bne.n	80189fa <udp_input+0x32>
 80189ee:	4b91      	ldr	r3, [pc, #580]	@ (8018c34 <udp_input+0x26c>)
 80189f0:	22d0      	movs	r2, #208	@ 0xd0
 80189f2:	4993      	ldr	r1, [pc, #588]	@ (8018c40 <udp_input+0x278>)
 80189f4:	4891      	ldr	r0, [pc, #580]	@ (8018c3c <udp_input+0x274>)
 80189f6:	f003 fe2b 	bl	801c650 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	895b      	ldrh	r3, [r3, #10]
 80189fe:	2b07      	cmp	r3, #7
 8018a00:	d809      	bhi.n	8018a16 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	891b      	ldrh	r3, [r3, #8]
 8018a06:	4619      	mov	r1, r3
 8018a08:	488e      	ldr	r0, [pc, #568]	@ (8018c44 <udp_input+0x27c>)
 8018a0a:	f003 fe21 	bl	801c650 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f7f9 f9c4 	bl	8011d9c <pbuf_free>
    goto end;
 8018a14:	e18d      	b.n	8018d32 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	685b      	ldr	r3, [r3, #4]
 8018a1a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8018c48 <udp_input+0x280>)
 8018a1e:	695b      	ldr	r3, [r3, #20]
 8018a20:	4a89      	ldr	r2, [pc, #548]	@ (8018c48 <udp_input+0x280>)
 8018a22:	6812      	ldr	r2, [r2, #0]
 8018a24:	4611      	mov	r1, r2
 8018a26:	4618      	mov	r0, r3
 8018a28:	f002 fac6 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	891b      	ldrh	r3, [r3, #8]
 8018a34:	4619      	mov	r1, r3
 8018a36:	4885      	ldr	r0, [pc, #532]	@ (8018c4c <udp_input+0x284>)
 8018a38:	f003 fe0a 	bl	801c650 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	881b      	ldrh	r3, [r3, #0]
 8018a40:	b29b      	uxth	r3, r3
 8018a42:	4618      	mov	r0, r3
 8018a44:	f7f7 fcc6 	bl	80103d4 <lwip_htons>
 8018a48:	4603      	mov	r3, r0
 8018a4a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018a4c:	697b      	ldr	r3, [r7, #20]
 8018a4e:	885b      	ldrh	r3, [r3, #2]
 8018a50:	b29b      	uxth	r3, r3
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7f7 fcbe 	bl	80103d4 <lwip_htons>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8018a5c:	6978      	ldr	r0, [r7, #20]
 8018a5e:	f000 fe37 	bl	80196d0 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8018a62:	487b      	ldr	r0, [pc, #492]	@ (8018c50 <udp_input+0x288>)
 8018a64:	f003 fdf4 	bl	801c650 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8018a68:	4b77      	ldr	r3, [pc, #476]	@ (8018c48 <udp_input+0x280>)
 8018a6a:	695b      	ldr	r3, [r3, #20]
 8018a6c:	b2db      	uxtb	r3, r3
 8018a6e:	4619      	mov	r1, r3
 8018a70:	4b75      	ldr	r3, [pc, #468]	@ (8018c48 <udp_input+0x280>)
 8018a72:	695b      	ldr	r3, [r3, #20]
 8018a74:	0a1b      	lsrs	r3, r3, #8
 8018a76:	b2db      	uxtb	r3, r3
 8018a78:	461a      	mov	r2, r3
 8018a7a:	4b73      	ldr	r3, [pc, #460]	@ (8018c48 <udp_input+0x280>)
 8018a7c:	695b      	ldr	r3, [r3, #20]
 8018a7e:	0c1b      	lsrs	r3, r3, #16
 8018a80:	b2db      	uxtb	r3, r3
 8018a82:	4618      	mov	r0, r3
 8018a84:	4b70      	ldr	r3, [pc, #448]	@ (8018c48 <udp_input+0x280>)
 8018a86:	695b      	ldr	r3, [r3, #20]
 8018a88:	0e1b      	lsrs	r3, r3, #24
 8018a8a:	b2db      	uxtb	r3, r3
 8018a8c:	9300      	str	r3, [sp, #0]
 8018a8e:	4603      	mov	r3, r0
 8018a90:	4870      	ldr	r0, [pc, #448]	@ (8018c54 <udp_input+0x28c>)
 8018a92:	f003 fddd 	bl	801c650 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	885b      	ldrh	r3, [r3, #2]
 8018a9a:	b29b      	uxth	r3, r3
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7f7 fc99 	bl	80103d4 <lwip_htons>
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	486c      	ldr	r0, [pc, #432]	@ (8018c58 <udp_input+0x290>)
 8018aa8:	f003 fdd2 	bl	801c650 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 8018aac:	4b66      	ldr	r3, [pc, #408]	@ (8018c48 <udp_input+0x280>)
 8018aae:	691b      	ldr	r3, [r3, #16]
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	4619      	mov	r1, r3
 8018ab4:	4b64      	ldr	r3, [pc, #400]	@ (8018c48 <udp_input+0x280>)
 8018ab6:	691b      	ldr	r3, [r3, #16]
 8018ab8:	0a1b      	lsrs	r3, r3, #8
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	461a      	mov	r2, r3
 8018abe:	4b62      	ldr	r3, [pc, #392]	@ (8018c48 <udp_input+0x280>)
 8018ac0:	691b      	ldr	r3, [r3, #16]
 8018ac2:	0c1b      	lsrs	r3, r3, #16
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	4b5f      	ldr	r3, [pc, #380]	@ (8018c48 <udp_input+0x280>)
 8018aca:	691b      	ldr	r3, [r3, #16]
 8018acc:	0e1b      	lsrs	r3, r3, #24
 8018ace:	b2db      	uxtb	r3, r3
 8018ad0:	9300      	str	r3, [sp, #0]
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	485f      	ldr	r0, [pc, #380]	@ (8018c54 <udp_input+0x28c>)
 8018ad6:	f003 fdbb 	bl	801c650 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8018ada:	697b      	ldr	r3, [r7, #20]
 8018adc:	881b      	ldrh	r3, [r3, #0]
 8018ade:	b29b      	uxth	r3, r3
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	f7f7 fc77 	bl	80103d4 <lwip_htons>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	4619      	mov	r1, r3
 8018aea:	485c      	ldr	r0, [pc, #368]	@ (8018c5c <udp_input+0x294>)
 8018aec:	f003 fdb0 	bl	801c650 <iprintf>

  pcb = NULL;
 8018af0:	2300      	movs	r3, #0
 8018af2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8018af4:	2300      	movs	r3, #0
 8018af6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018af8:	2300      	movs	r3, #0
 8018afa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018afc:	4b58      	ldr	r3, [pc, #352]	@ (8018c60 <udp_input+0x298>)
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b02:	e091      	b.n	8018c28 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 8018b04:	4857      	ldr	r0, [pc, #348]	@ (8018c64 <udp_input+0x29c>)
 8018b06:	f003 fda3 	bl	801c650 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8018b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	4619      	mov	r1, r3
 8018b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	0a1b      	lsrs	r3, r3, #8
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	461a      	mov	r2, r3
 8018b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	0c1b      	lsrs	r3, r3, #16
 8018b22:	b2db      	uxtb	r3, r3
 8018b24:	4618      	mov	r0, r3
 8018b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	0e1b      	lsrs	r3, r3, #24
 8018b2c:	b2db      	uxtb	r3, r3
 8018b2e:	9300      	str	r3, [sp, #0]
 8018b30:	4603      	mov	r3, r0
 8018b32:	4848      	ldr	r0, [pc, #288]	@ (8018c54 <udp_input+0x28c>)
 8018b34:	f003 fd8c 	bl	801c650 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8018b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b3a:	8a5b      	ldrh	r3, [r3, #18]
 8018b3c:	4619      	mov	r1, r3
 8018b3e:	4846      	ldr	r0, [pc, #280]	@ (8018c58 <udp_input+0x290>)
 8018b40:	f003 fd86 	bl	801c650 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8018b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b46:	685b      	ldr	r3, [r3, #4]
 8018b48:	b2db      	uxtb	r3, r3
 8018b4a:	4619      	mov	r1, r3
 8018b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b4e:	685b      	ldr	r3, [r3, #4]
 8018b50:	0a1b      	lsrs	r3, r3, #8
 8018b52:	b2db      	uxtb	r3, r3
 8018b54:	461a      	mov	r2, r3
 8018b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b58:	685b      	ldr	r3, [r3, #4]
 8018b5a:	0c1b      	lsrs	r3, r3, #16
 8018b5c:	b2db      	uxtb	r3, r3
 8018b5e:	4618      	mov	r0, r3
 8018b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b62:	685b      	ldr	r3, [r3, #4]
 8018b64:	0e1b      	lsrs	r3, r3, #24
 8018b66:	b2db      	uxtb	r3, r3
 8018b68:	9300      	str	r3, [sp, #0]
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	4839      	ldr	r0, [pc, #228]	@ (8018c54 <udp_input+0x28c>)
 8018b6e:	f003 fd6f 	bl	801c650 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8018b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b74:	8a9b      	ldrh	r3, [r3, #20]
 8018b76:	4619      	mov	r1, r3
 8018b78:	4838      	ldr	r0, [pc, #224]	@ (8018c5c <udp_input+0x294>)
 8018b7a:	f003 fd69 	bl	801c650 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b80:	8a5b      	ldrh	r3, [r3, #18]
 8018b82:	89fa      	ldrh	r2, [r7, #14]
 8018b84:	429a      	cmp	r2, r3
 8018b86:	d14a      	bne.n	8018c1e <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018b88:	7cfb      	ldrb	r3, [r7, #19]
 8018b8a:	461a      	mov	r2, r3
 8018b8c:	6839      	ldr	r1, [r7, #0]
 8018b8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b90:	f7ff feb6 	bl	8018900 <udp_input_local_match>
 8018b94:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d041      	beq.n	8018c1e <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b9c:	7c1b      	ldrb	r3, [r3, #16]
 8018b9e:	f003 0304 	and.w	r3, r3, #4
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d11d      	bne.n	8018be2 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 8018ba6:	69fb      	ldr	r3, [r7, #28]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d102      	bne.n	8018bb2 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bae:	61fb      	str	r3, [r7, #28]
 8018bb0:	e017      	b.n	8018be2 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018bb2:	7cfb      	ldrb	r3, [r7, #19]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d014      	beq.n	8018be2 <udp_input+0x21a>
 8018bb8:	4b23      	ldr	r3, [pc, #140]	@ (8018c48 <udp_input+0x280>)
 8018bba:	695b      	ldr	r3, [r3, #20]
 8018bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018bc0:	d10f      	bne.n	8018be2 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018bc2:	69fb      	ldr	r3, [r7, #28]
 8018bc4:	681a      	ldr	r2, [r3, #0]
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	3304      	adds	r3, #4
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	429a      	cmp	r2, r3
 8018bce:	d008      	beq.n	8018be2 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bd2:	681a      	ldr	r2, [r3, #0]
 8018bd4:	683b      	ldr	r3, [r7, #0]
 8018bd6:	3304      	adds	r3, #4
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	429a      	cmp	r2, r3
 8018bdc:	d101      	bne.n	8018be2 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 8018bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018be0:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018be4:	8a9b      	ldrh	r3, [r3, #20]
 8018be6:	8a3a      	ldrh	r2, [r7, #16]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d118      	bne.n	8018c1e <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bee:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d005      	beq.n	8018c00 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018bf6:	685a      	ldr	r2, [r3, #4]
 8018bf8:	4b13      	ldr	r3, [pc, #76]	@ (8018c48 <udp_input+0x280>)
 8018bfa:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018bfc:	429a      	cmp	r2, r3
 8018bfe:	d10e      	bne.n	8018c1e <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018c00:	6a3b      	ldr	r3, [r7, #32]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d030      	beq.n	8018c68 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c08:	68da      	ldr	r2, [r3, #12]
 8018c0a:	6a3b      	ldr	r3, [r7, #32]
 8018c0c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018c0e:	4b14      	ldr	r3, [pc, #80]	@ (8018c60 <udp_input+0x298>)
 8018c10:	681a      	ldr	r2, [r3, #0]
 8018c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c14:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018c16:	4a12      	ldr	r2, [pc, #72]	@ (8018c60 <udp_input+0x298>)
 8018c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c1a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018c1c:	e024      	b.n	8018c68 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 8018c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c20:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c24:	68db      	ldr	r3, [r3, #12]
 8018c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8018c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	f47f af6a 	bne.w	8018b04 <udp_input+0x13c>
 8018c30:	e01b      	b.n	8018c6a <udp_input+0x2a2>
 8018c32:	bf00      	nop
 8018c34:	08020644 	.word	0x08020644
 8018c38:	080206e8 	.word	0x080206e8
 8018c3c:	08020698 	.word	0x08020698
 8018c40:	08020700 	.word	0x08020700
 8018c44:	0802071c 	.word	0x0802071c
 8018c48:	2001f65c 	.word	0x2001f65c
 8018c4c:	08020754 	.word	0x08020754
 8018c50:	08020780 	.word	0x08020780
 8018c54:	08020788 	.word	0x08020788
 8018c58:	08020798 	.word	0x08020798
 8018c5c:	080207a8 	.word	0x080207a8
 8018c60:	200227fc 	.word	0x200227fc
 8018c64:	080207b0 	.word	0x080207b0
        break;
 8018c68:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d101      	bne.n	8018c74 <udp_input+0x2ac>
    pcb = uncon_pcb;
 8018c70:	69fb      	ldr	r3, [r7, #28]
 8018c72:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d002      	beq.n	8018c80 <udp_input+0x2b8>
    for_us = 1;
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	76fb      	strb	r3, [r7, #27]
 8018c7e:	e00a      	b.n	8018c96 <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018c80:	683b      	ldr	r3, [r7, #0]
 8018c82:	3304      	adds	r3, #4
 8018c84:	681a      	ldr	r2, [r3, #0]
 8018c86:	4b2d      	ldr	r3, [pc, #180]	@ (8018d3c <udp_input+0x374>)
 8018c88:	695b      	ldr	r3, [r3, #20]
 8018c8a:	429a      	cmp	r2, r3
 8018c8c:	bf0c      	ite	eq
 8018c8e:	2301      	moveq	r3, #1
 8018c90:	2300      	movne	r3, #0
 8018c92:	b2db      	uxtb	r3, r3
 8018c94:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018c96:	7efb      	ldrb	r3, [r7, #27]
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d047      	beq.n	8018d2c <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8018c9c:	4828      	ldr	r0, [pc, #160]	@ (8018d40 <udp_input+0x378>)
 8018c9e:	f003 fd47 	bl	801c730 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018ca2:	2108      	movs	r1, #8
 8018ca4:	6878      	ldr	r0, [r7, #4]
 8018ca6:	f7f8 fff3 	bl	8011c90 <pbuf_remove_header>
 8018caa:	4603      	mov	r3, r0
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d00a      	beq.n	8018cc6 <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018cb0:	4b24      	ldr	r3, [pc, #144]	@ (8018d44 <udp_input+0x37c>)
 8018cb2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8018cb6:	4924      	ldr	r1, [pc, #144]	@ (8018d48 <udp_input+0x380>)
 8018cb8:	4824      	ldr	r0, [pc, #144]	@ (8018d4c <udp_input+0x384>)
 8018cba:	f003 fcc9 	bl	801c650 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018cbe:	6878      	ldr	r0, [r7, #4]
 8018cc0:	f7f9 f86c 	bl	8011d9c <pbuf_free>
      goto end;
 8018cc4:	e035      	b.n	8018d32 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 8018cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d012      	beq.n	8018cf2 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cce:	699b      	ldr	r3, [r3, #24]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d00a      	beq.n	8018cea <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cd6:	699c      	ldr	r4, [r3, #24]
 8018cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cda:	69d8      	ldr	r0, [r3, #28]
 8018cdc:	8a3b      	ldrh	r3, [r7, #16]
 8018cde:	9300      	str	r3, [sp, #0]
 8018ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8018d50 <udp_input+0x388>)
 8018ce2:	687a      	ldr	r2, [r7, #4]
 8018ce4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018ce6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018ce8:	e024      	b.n	8018d34 <udp_input+0x36c>
        pbuf_free(p);
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	f7f9 f856 	bl	8011d9c <pbuf_free>
        goto end;
 8018cf0:	e01f      	b.n	8018d32 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 8018cf2:	4818      	ldr	r0, [pc, #96]	@ (8018d54 <udp_input+0x38c>)
 8018cf4:	f003 fd1c 	bl	801c730 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018cf8:	7cfb      	ldrb	r3, [r7, #19]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d112      	bne.n	8018d24 <udp_input+0x35c>
 8018cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8018d3c <udp_input+0x374>)
 8018d00:	695b      	ldr	r3, [r3, #20]
 8018d02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018d06:	2be0      	cmp	r3, #224	@ 0xe0
 8018d08:	d00c      	beq.n	8018d24 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8018d3c <udp_input+0x374>)
 8018d0c:	899b      	ldrh	r3, [r3, #12]
 8018d0e:	3308      	adds	r3, #8
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	b21b      	sxth	r3, r3
 8018d14:	4619      	mov	r1, r3
 8018d16:	6878      	ldr	r0, [r7, #4]
 8018d18:	f7f9 f82d 	bl	8011d76 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018d1c:	2103      	movs	r1, #3
 8018d1e:	6878      	ldr	r0, [r7, #4]
 8018d20:	f001 fdea 	bl	801a8f8 <icmp_dest_unreach>
      pbuf_free(p);
 8018d24:	6878      	ldr	r0, [r7, #4]
 8018d26:	f7f9 f839 	bl	8011d9c <pbuf_free>
  return;
 8018d2a:	e003      	b.n	8018d34 <udp_input+0x36c>
    pbuf_free(p);
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f7f9 f835 	bl	8011d9c <pbuf_free>
  return;
 8018d32:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018d34:	372c      	adds	r7, #44	@ 0x2c
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd90      	pop	{r4, r7, pc}
 8018d3a:	bf00      	nop
 8018d3c:	2001f65c 	.word	0x2001f65c
 8018d40:	080207b8 	.word	0x080207b8
 8018d44:	08020644 	.word	0x08020644
 8018d48:	080207d8 	.word	0x080207d8
 8018d4c:	08020698 	.word	0x08020698
 8018d50:	2001f66c 	.word	0x2001f66c
 8018d54:	080207f4 	.word	0x080207f4

08018d58 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
 8018d60:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d109      	bne.n	8018d7c <udp_send+0x24>
 8018d68:	4b11      	ldr	r3, [pc, #68]	@ (8018db0 <udp_send+0x58>)
 8018d6a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8018d6e:	4911      	ldr	r1, [pc, #68]	@ (8018db4 <udp_send+0x5c>)
 8018d70:	4811      	ldr	r0, [pc, #68]	@ (8018db8 <udp_send+0x60>)
 8018d72:	f003 fc6d 	bl	801c650 <iprintf>
 8018d76:	f06f 030f 	mvn.w	r3, #15
 8018d7a:	e015      	b.n	8018da8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d109      	bne.n	8018d96 <udp_send+0x3e>
 8018d82:	4b0b      	ldr	r3, [pc, #44]	@ (8018db0 <udp_send+0x58>)
 8018d84:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8018d88:	490c      	ldr	r1, [pc, #48]	@ (8018dbc <udp_send+0x64>)
 8018d8a:	480b      	ldr	r0, [pc, #44]	@ (8018db8 <udp_send+0x60>)
 8018d8c:	f003 fc60 	bl	801c650 <iprintf>
 8018d90:	f06f 030f 	mvn.w	r3, #15
 8018d94:	e008      	b.n	8018da8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	1d1a      	adds	r2, r3, #4
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	8a9b      	ldrh	r3, [r3, #20]
 8018d9e:	6839      	ldr	r1, [r7, #0]
 8018da0:	6878      	ldr	r0, [r7, #4]
 8018da2:	f000 f80d 	bl	8018dc0 <udp_sendto>
 8018da6:	4603      	mov	r3, r0
}
 8018da8:	4618      	mov	r0, r3
 8018daa:	3708      	adds	r7, #8
 8018dac:	46bd      	mov	sp, r7
 8018dae:	bd80      	pop	{r7, pc}
 8018db0:	08020644 	.word	0x08020644
 8018db4:	0802080c 	.word	0x0802080c
 8018db8:	08020698 	.word	0x08020698
 8018dbc:	08020824 	.word	0x08020824

08018dc0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b088      	sub	sp, #32
 8018dc4:	af02      	add	r7, sp, #8
 8018dc6:	60f8      	str	r0, [r7, #12]
 8018dc8:	60b9      	str	r1, [r7, #8]
 8018dca:	607a      	str	r2, [r7, #4]
 8018dcc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d109      	bne.n	8018de8 <udp_sendto+0x28>
 8018dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8018ec4 <udp_sendto+0x104>)
 8018dd6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8018dda:	493b      	ldr	r1, [pc, #236]	@ (8018ec8 <udp_sendto+0x108>)
 8018ddc:	483b      	ldr	r0, [pc, #236]	@ (8018ecc <udp_sendto+0x10c>)
 8018dde:	f003 fc37 	bl	801c650 <iprintf>
 8018de2:	f06f 030f 	mvn.w	r3, #15
 8018de6:	e068      	b.n	8018eba <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d109      	bne.n	8018e02 <udp_sendto+0x42>
 8018dee:	4b35      	ldr	r3, [pc, #212]	@ (8018ec4 <udp_sendto+0x104>)
 8018df0:	f240 2219 	movw	r2, #537	@ 0x219
 8018df4:	4936      	ldr	r1, [pc, #216]	@ (8018ed0 <udp_sendto+0x110>)
 8018df6:	4835      	ldr	r0, [pc, #212]	@ (8018ecc <udp_sendto+0x10c>)
 8018df8:	f003 fc2a 	bl	801c650 <iprintf>
 8018dfc:	f06f 030f 	mvn.w	r3, #15
 8018e00:	e05b      	b.n	8018eba <udp_sendto+0xfa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d109      	bne.n	8018e1c <udp_sendto+0x5c>
 8018e08:	4b2e      	ldr	r3, [pc, #184]	@ (8018ec4 <udp_sendto+0x104>)
 8018e0a:	f240 221a 	movw	r2, #538	@ 0x21a
 8018e0e:	4931      	ldr	r1, [pc, #196]	@ (8018ed4 <udp_sendto+0x114>)
 8018e10:	482e      	ldr	r0, [pc, #184]	@ (8018ecc <udp_sendto+0x10c>)
 8018e12:	f003 fc1d 	bl	801c650 <iprintf>
 8018e16:	f06f 030f 	mvn.w	r3, #15
 8018e1a:	e04e      	b.n	8018eba <udp_sendto+0xfa>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 8018e1c:	482e      	ldr	r0, [pc, #184]	@ (8018ed8 <udp_sendto+0x118>)
 8018e1e:	f003 fc87 	bl	801c730 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	7a1b      	ldrb	r3, [r3, #8]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d006      	beq.n	8018e38 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	7a1b      	ldrb	r3, [r3, #8]
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f7f8 fc26 	bl	8011680 <netif_get_by_index>
 8018e34:	6178      	str	r0, [r7, #20]
 8018e36:	e003      	b.n	8018e40 <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018e38:	6878      	ldr	r0, [r7, #4]
 8018e3a:	f001 fe27 	bl	801aa8c <ip4_route>
 8018e3e:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d12f      	bne.n	8018ea6 <udp_sendto+0xe6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 8018e46:	4825      	ldr	r0, [pc, #148]	@ (8018edc <udp_sendto+0x11c>)
 8018e48:	f003 fc02 	bl	801c650 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d003      	beq.n	8018e5a <udp_sendto+0x9a>
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	781b      	ldrb	r3, [r3, #0]
 8018e56:	4619      	mov	r1, r3
 8018e58:	e000      	b.n	8018e5c <udp_sendto+0x9c>
 8018e5a:	2100      	movs	r1, #0
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d004      	beq.n	8018e6c <udp_sendto+0xac>
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	3301      	adds	r3, #1
 8018e66:	781b      	ldrb	r3, [r3, #0]
 8018e68:	461a      	mov	r2, r3
 8018e6a:	e000      	b.n	8018e6e <udp_sendto+0xae>
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d004      	beq.n	8018e7e <udp_sendto+0xbe>
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	3302      	adds	r3, #2
 8018e78:	781b      	ldrb	r3, [r3, #0]
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	e000      	b.n	8018e80 <udp_sendto+0xc0>
 8018e7e:	2000      	movs	r0, #0
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d003      	beq.n	8018e8e <udp_sendto+0xce>
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	3303      	adds	r3, #3
 8018e8a:	781b      	ldrb	r3, [r3, #0]
 8018e8c:	e000      	b.n	8018e90 <udp_sendto+0xd0>
 8018e8e:	2300      	movs	r3, #0
 8018e90:	9300      	str	r3, [sp, #0]
 8018e92:	4603      	mov	r3, r0
 8018e94:	4812      	ldr	r0, [pc, #72]	@ (8018ee0 <udp_sendto+0x120>)
 8018e96:	f003 fbdb 	bl	801c650 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 8018e9a:	200a      	movs	r0, #10
 8018e9c:	f003 fbea 	bl	801c674 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018ea0:	f06f 0303 	mvn.w	r3, #3
 8018ea4:	e009      	b.n	8018eba <udp_sendto+0xfa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018ea6:	887a      	ldrh	r2, [r7, #2]
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	9300      	str	r3, [sp, #0]
 8018eac:	4613      	mov	r3, r2
 8018eae:	687a      	ldr	r2, [r7, #4]
 8018eb0:	68b9      	ldr	r1, [r7, #8]
 8018eb2:	68f8      	ldr	r0, [r7, #12]
 8018eb4:	f000 f816 	bl	8018ee4 <udp_sendto_if>
 8018eb8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018eba:	4618      	mov	r0, r3
 8018ebc:	3718      	adds	r7, #24
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}
 8018ec2:	bf00      	nop
 8018ec4:	08020644 	.word	0x08020644
 8018ec8:	0802083c 	.word	0x0802083c
 8018ecc:	08020698 	.word	0x08020698
 8018ed0:	08020854 	.word	0x08020854
 8018ed4:	08020870 	.word	0x08020870
 8018ed8:	0802088c 	.word	0x0802088c
 8018edc:	08020898 	.word	0x08020898
 8018ee0:	08020788 	.word	0x08020788

08018ee4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b088      	sub	sp, #32
 8018ee8:	af02      	add	r7, sp, #8
 8018eea:	60f8      	str	r0, [r7, #12]
 8018eec:	60b9      	str	r1, [r7, #8]
 8018eee:	607a      	str	r2, [r7, #4]
 8018ef0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d109      	bne.n	8018f0c <udp_sendto_if+0x28>
 8018ef8:	4b2e      	ldr	r3, [pc, #184]	@ (8018fb4 <udp_sendto_if+0xd0>)
 8018efa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018efe:	492e      	ldr	r1, [pc, #184]	@ (8018fb8 <udp_sendto_if+0xd4>)
 8018f00:	482e      	ldr	r0, [pc, #184]	@ (8018fbc <udp_sendto_if+0xd8>)
 8018f02:	f003 fba5 	bl	801c650 <iprintf>
 8018f06:	f06f 030f 	mvn.w	r3, #15
 8018f0a:	e04f      	b.n	8018fac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d109      	bne.n	8018f26 <udp_sendto_if+0x42>
 8018f12:	4b28      	ldr	r3, [pc, #160]	@ (8018fb4 <udp_sendto_if+0xd0>)
 8018f14:	f240 2281 	movw	r2, #641	@ 0x281
 8018f18:	4929      	ldr	r1, [pc, #164]	@ (8018fc0 <udp_sendto_if+0xdc>)
 8018f1a:	4828      	ldr	r0, [pc, #160]	@ (8018fbc <udp_sendto_if+0xd8>)
 8018f1c:	f003 fb98 	bl	801c650 <iprintf>
 8018f20:	f06f 030f 	mvn.w	r3, #15
 8018f24:	e042      	b.n	8018fac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d109      	bne.n	8018f40 <udp_sendto_if+0x5c>
 8018f2c:	4b21      	ldr	r3, [pc, #132]	@ (8018fb4 <udp_sendto_if+0xd0>)
 8018f2e:	f240 2282 	movw	r2, #642	@ 0x282
 8018f32:	4924      	ldr	r1, [pc, #144]	@ (8018fc4 <udp_sendto_if+0xe0>)
 8018f34:	4821      	ldr	r0, [pc, #132]	@ (8018fbc <udp_sendto_if+0xd8>)
 8018f36:	f003 fb8b 	bl	801c650 <iprintf>
 8018f3a:	f06f 030f 	mvn.w	r3, #15
 8018f3e:	e035      	b.n	8018fac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018f40:	6a3b      	ldr	r3, [r7, #32]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d109      	bne.n	8018f5a <udp_sendto_if+0x76>
 8018f46:	4b1b      	ldr	r3, [pc, #108]	@ (8018fb4 <udp_sendto_if+0xd0>)
 8018f48:	f240 2283 	movw	r2, #643	@ 0x283
 8018f4c:	491e      	ldr	r1, [pc, #120]	@ (8018fc8 <udp_sendto_if+0xe4>)
 8018f4e:	481b      	ldr	r0, [pc, #108]	@ (8018fbc <udp_sendto_if+0xd8>)
 8018f50:	f003 fb7e 	bl	801c650 <iprintf>
 8018f54:	f06f 030f 	mvn.w	r3, #15
 8018f58:	e028      	b.n	8018fac <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d009      	beq.n	8018f74 <udp_sendto_if+0x90>
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d005      	beq.n	8018f74 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018f70:	2be0      	cmp	r3, #224	@ 0xe0
 8018f72:	d103      	bne.n	8018f7c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018f74:	6a3b      	ldr	r3, [r7, #32]
 8018f76:	3304      	adds	r3, #4
 8018f78:	617b      	str	r3, [r7, #20]
 8018f7a:	e00b      	b.n	8018f94 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	681a      	ldr	r2, [r3, #0]
 8018f80:	6a3b      	ldr	r3, [r7, #32]
 8018f82:	3304      	adds	r3, #4
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	429a      	cmp	r2, r3
 8018f88:	d002      	beq.n	8018f90 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018f8a:	f06f 0303 	mvn.w	r3, #3
 8018f8e:	e00d      	b.n	8018fac <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018f94:	887a      	ldrh	r2, [r7, #2]
 8018f96:	697b      	ldr	r3, [r7, #20]
 8018f98:	9301      	str	r3, [sp, #4]
 8018f9a:	6a3b      	ldr	r3, [r7, #32]
 8018f9c:	9300      	str	r3, [sp, #0]
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	687a      	ldr	r2, [r7, #4]
 8018fa2:	68b9      	ldr	r1, [r7, #8]
 8018fa4:	68f8      	ldr	r0, [r7, #12]
 8018fa6:	f000 f811 	bl	8018fcc <udp_sendto_if_src>
 8018faa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018fac:	4618      	mov	r0, r3
 8018fae:	3718      	adds	r7, #24
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}
 8018fb4:	08020644 	.word	0x08020644
 8018fb8:	080208b0 	.word	0x080208b0
 8018fbc:	08020698 	.word	0x08020698
 8018fc0:	080208cc 	.word	0x080208cc
 8018fc4:	080208e8 	.word	0x080208e8
 8018fc8:	08020908 	.word	0x08020908

08018fcc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b08c      	sub	sp, #48	@ 0x30
 8018fd0:	af04      	add	r7, sp, #16
 8018fd2:	60f8      	str	r0, [r7, #12]
 8018fd4:	60b9      	str	r1, [r7, #8]
 8018fd6:	607a      	str	r2, [r7, #4]
 8018fd8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d109      	bne.n	8018ff4 <udp_sendto_if_src+0x28>
 8018fe0:	4b7a      	ldr	r3, [pc, #488]	@ (80191cc <udp_sendto_if_src+0x200>)
 8018fe2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8018fe6:	497a      	ldr	r1, [pc, #488]	@ (80191d0 <udp_sendto_if_src+0x204>)
 8018fe8:	487a      	ldr	r0, [pc, #488]	@ (80191d4 <udp_sendto_if_src+0x208>)
 8018fea:	f003 fb31 	bl	801c650 <iprintf>
 8018fee:	f06f 030f 	mvn.w	r3, #15
 8018ff2:	e0e6      	b.n	80191c2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018ff4:	68bb      	ldr	r3, [r7, #8]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d109      	bne.n	801900e <udp_sendto_if_src+0x42>
 8018ffa:	4b74      	ldr	r3, [pc, #464]	@ (80191cc <udp_sendto_if_src+0x200>)
 8018ffc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8019000:	4975      	ldr	r1, [pc, #468]	@ (80191d8 <udp_sendto_if_src+0x20c>)
 8019002:	4874      	ldr	r0, [pc, #464]	@ (80191d4 <udp_sendto_if_src+0x208>)
 8019004:	f003 fb24 	bl	801c650 <iprintf>
 8019008:	f06f 030f 	mvn.w	r3, #15
 801900c:	e0d9      	b.n	80191c2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d109      	bne.n	8019028 <udp_sendto_if_src+0x5c>
 8019014:	4b6d      	ldr	r3, [pc, #436]	@ (80191cc <udp_sendto_if_src+0x200>)
 8019016:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801901a:	4970      	ldr	r1, [pc, #448]	@ (80191dc <udp_sendto_if_src+0x210>)
 801901c:	486d      	ldr	r0, [pc, #436]	@ (80191d4 <udp_sendto_if_src+0x208>)
 801901e:	f003 fb17 	bl	801c650 <iprintf>
 8019022:	f06f 030f 	mvn.w	r3, #15
 8019026:	e0cc      	b.n	80191c2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801902a:	2b00      	cmp	r3, #0
 801902c:	d109      	bne.n	8019042 <udp_sendto_if_src+0x76>
 801902e:	4b67      	ldr	r3, [pc, #412]	@ (80191cc <udp_sendto_if_src+0x200>)
 8019030:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8019034:	496a      	ldr	r1, [pc, #424]	@ (80191e0 <udp_sendto_if_src+0x214>)
 8019036:	4867      	ldr	r0, [pc, #412]	@ (80191d4 <udp_sendto_if_src+0x208>)
 8019038:	f003 fb0a 	bl	801c650 <iprintf>
 801903c:	f06f 030f 	mvn.w	r3, #15
 8019040:	e0bf      	b.n	80191c2 <udp_sendto_if_src+0x1f6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019044:	2b00      	cmp	r3, #0
 8019046:	d109      	bne.n	801905c <udp_sendto_if_src+0x90>
 8019048:	4b60      	ldr	r3, [pc, #384]	@ (80191cc <udp_sendto_if_src+0x200>)
 801904a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801904e:	4965      	ldr	r1, [pc, #404]	@ (80191e4 <udp_sendto_if_src+0x218>)
 8019050:	4860      	ldr	r0, [pc, #384]	@ (80191d4 <udp_sendto_if_src+0x208>)
 8019052:	f003 fafd 	bl	801c650 <iprintf>
 8019056:	f06f 030f 	mvn.w	r3, #15
 801905a:	e0b2      	b.n	80191c2 <udp_sendto_if_src+0x1f6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	8a5b      	ldrh	r3, [r3, #18]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d115      	bne.n	8019090 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 8019064:	4860      	ldr	r0, [pc, #384]	@ (80191e8 <udp_sendto_if_src+0x21c>)
 8019066:	f003 fb63 	bl	801c730 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801906a:	68f9      	ldr	r1, [r7, #12]
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	8a5b      	ldrh	r3, [r3, #18]
 8019070:	461a      	mov	r2, r3
 8019072:	68f8      	ldr	r0, [r7, #12]
 8019074:	f000 f8cc 	bl	8019210 <udp_bind>
 8019078:	4603      	mov	r3, r0
 801907a:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801907c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d005      	beq.n	8019090 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 8019084:	4859      	ldr	r0, [pc, #356]	@ (80191ec <udp_sendto_if_src+0x220>)
 8019086:	f003 fb53 	bl	801c730 <puts>
      return err;
 801908a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801908e:	e098      	b.n	80191c2 <udp_sendto_if_src+0x1f6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019090:	68bb      	ldr	r3, [r7, #8]
 8019092:	891b      	ldrh	r3, [r3, #8]
 8019094:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8019098:	4293      	cmp	r3, r2
 801909a:	d902      	bls.n	80190a2 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801909c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80190a0:	e08f      	b.n	80191c2 <udp_sendto_if_src+0x1f6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80190a2:	2108      	movs	r1, #8
 80190a4:	68b8      	ldr	r0, [r7, #8]
 80190a6:	f7f8 fde3 	bl	8011c70 <pbuf_add_header>
 80190aa:	4603      	mov	r3, r0
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d01d      	beq.n	80190ec <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80190b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80190b4:	2108      	movs	r1, #8
 80190b6:	2022      	movs	r0, #34	@ 0x22
 80190b8:	f7f8 fb8c 	bl	80117d4 <pbuf_alloc>
 80190bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80190be:	69fb      	ldr	r3, [r7, #28]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d105      	bne.n	80190d0 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 80190c4:	484a      	ldr	r0, [pc, #296]	@ (80191f0 <udp_sendto_if_src+0x224>)
 80190c6:	f003 fb33 	bl	801c730 <puts>
      return ERR_MEM;
 80190ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80190ce:	e078      	b.n	80191c2 <udp_sendto_if_src+0x1f6>
    }
    if (p->tot_len != 0) {
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	891b      	ldrh	r3, [r3, #8]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d003      	beq.n	80190e0 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80190d8:	68b9      	ldr	r1, [r7, #8]
 80190da:	69f8      	ldr	r0, [r7, #28]
 80190dc:	f7f8 ff82 	bl	8011fe4 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 80190e0:	68ba      	ldr	r2, [r7, #8]
 80190e2:	69f9      	ldr	r1, [r7, #28]
 80190e4:	4843      	ldr	r0, [pc, #268]	@ (80191f4 <udp_sendto_if_src+0x228>)
 80190e6:	f003 fab3 	bl	801c650 <iprintf>
 80190ea:	e005      	b.n	80190f8 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 80190f0:	68b9      	ldr	r1, [r7, #8]
 80190f2:	4841      	ldr	r0, [pc, #260]	@ (80191f8 <udp_sendto_if_src+0x22c>)
 80190f4:	f003 faac 	bl	801c650 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80190f8:	69fb      	ldr	r3, [r7, #28]
 80190fa:	895b      	ldrh	r3, [r3, #10]
 80190fc:	2b07      	cmp	r3, #7
 80190fe:	d806      	bhi.n	801910e <udp_sendto_if_src+0x142>
 8019100:	4b32      	ldr	r3, [pc, #200]	@ (80191cc <udp_sendto_if_src+0x200>)
 8019102:	f240 320d 	movw	r2, #781	@ 0x30d
 8019106:	493d      	ldr	r1, [pc, #244]	@ (80191fc <udp_sendto_if_src+0x230>)
 8019108:	4832      	ldr	r0, [pc, #200]	@ (80191d4 <udp_sendto_if_src+0x208>)
 801910a:	f003 faa1 	bl	801c650 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801910e:	69fb      	ldr	r3, [r7, #28]
 8019110:	685b      	ldr	r3, [r3, #4]
 8019112:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019114:	68fb      	ldr	r3, [r7, #12]
 8019116:	8a5b      	ldrh	r3, [r3, #18]
 8019118:	4618      	mov	r0, r3
 801911a:	f7f7 f95b 	bl	80103d4 <lwip_htons>
 801911e:	4603      	mov	r3, r0
 8019120:	461a      	mov	r2, r3
 8019122:	697b      	ldr	r3, [r7, #20]
 8019124:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019126:	887b      	ldrh	r3, [r7, #2]
 8019128:	4618      	mov	r0, r3
 801912a:	f7f7 f953 	bl	80103d4 <lwip_htons>
 801912e:	4603      	mov	r3, r0
 8019130:	461a      	mov	r2, r3
 8019132:	697b      	ldr	r3, [r7, #20]
 8019134:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019136:	697b      	ldr	r3, [r7, #20]
 8019138:	2200      	movs	r2, #0
 801913a:	719a      	strb	r2, [r3, #6]
 801913c:	2200      	movs	r2, #0
 801913e:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 8019140:	69fb      	ldr	r3, [r7, #28]
 8019142:	891b      	ldrh	r3, [r3, #8]
 8019144:	4619      	mov	r1, r3
 8019146:	482e      	ldr	r0, [pc, #184]	@ (8019200 <udp_sendto_if_src+0x234>)
 8019148:	f003 fa82 	bl	801c650 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801914c:	69fb      	ldr	r3, [r7, #28]
 801914e:	891b      	ldrh	r3, [r3, #8]
 8019150:	4619      	mov	r1, r3
 8019152:	482c      	ldr	r0, [pc, #176]	@ (8019204 <udp_sendto_if_src+0x238>)
 8019154:	f003 fa7c 	bl	801c650 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 8019158:	69fb      	ldr	r3, [r7, #28]
 801915a:	891b      	ldrh	r3, [r3, #8]
 801915c:	4618      	mov	r0, r3
 801915e:	f7f7 f939 	bl	80103d4 <lwip_htons>
 8019162:	4603      	mov	r3, r0
 8019164:	461a      	mov	r2, r3
 8019166:	697b      	ldr	r3, [r7, #20]
 8019168:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801916a:	2311      	movs	r3, #17
 801916c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	7adb      	ldrb	r3, [r3, #11]
 8019172:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 8019174:	697b      	ldr	r3, [r7, #20]
 8019176:	88db      	ldrh	r3, [r3, #6]
 8019178:	b29b      	uxth	r3, r3
 801917a:	4619      	mov	r1, r3
 801917c:	4822      	ldr	r0, [pc, #136]	@ (8019208 <udp_sendto_if_src+0x23c>)
 801917e:	f003 fa67 	bl	801c650 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 8019182:	7cfb      	ldrb	r3, [r7, #19]
 8019184:	4619      	mov	r1, r3
 8019186:	4821      	ldr	r0, [pc, #132]	@ (801920c <udp_sendto_if_src+0x240>)
 8019188:	f003 fa62 	bl	801c650 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	7a9b      	ldrb	r3, [r3, #10]
 8019190:	7cb9      	ldrb	r1, [r7, #18]
 8019192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019194:	9202      	str	r2, [sp, #8]
 8019196:	7cfa      	ldrb	r2, [r7, #19]
 8019198:	9201      	str	r2, [sp, #4]
 801919a:	9300      	str	r3, [sp, #0]
 801919c:	460b      	mov	r3, r1
 801919e:	687a      	ldr	r2, [r7, #4]
 80191a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80191a2:	69f8      	ldr	r0, [r7, #28]
 80191a4:	f001 fe5a 	bl	801ae5c <ip4_output_if_src>
 80191a8:	4603      	mov	r3, r0
 80191aa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80191ac:	69fa      	ldr	r2, [r7, #28]
 80191ae:	68bb      	ldr	r3, [r7, #8]
 80191b0:	429a      	cmp	r2, r3
 80191b2:	d004      	beq.n	80191be <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 80191b4:	69f8      	ldr	r0, [r7, #28]
 80191b6:	f7f8 fdf1 	bl	8011d9c <pbuf_free>
    q = NULL;
 80191ba:	2300      	movs	r3, #0
 80191bc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80191be:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80191c2:	4618      	mov	r0, r3
 80191c4:	3720      	adds	r7, #32
 80191c6:	46bd      	mov	sp, r7
 80191c8:	bd80      	pop	{r7, pc}
 80191ca:	bf00      	nop
 80191cc:	08020644 	.word	0x08020644
 80191d0:	08020928 	.word	0x08020928
 80191d4:	08020698 	.word	0x08020698
 80191d8:	08020948 	.word	0x08020948
 80191dc:	08020968 	.word	0x08020968
 80191e0:	0802098c 	.word	0x0802098c
 80191e4:	080209b0 	.word	0x080209b0
 80191e8:	080209d4 	.word	0x080209d4
 80191ec:	08020a04 	.word	0x08020a04
 80191f0:	08020a28 	.word	0x08020a28
 80191f4:	08020a4c 	.word	0x08020a4c
 80191f8:	08020a84 	.word	0x08020a84
 80191fc:	08020ab0 	.word	0x08020ab0
 8019200:	08020ae0 	.word	0x08020ae0
 8019204:	08020b0c 	.word	0x08020b0c
 8019208:	08020b30 	.word	0x08020b30
 801920c:	08020b50 	.word	0x08020b50

08019210 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b088      	sub	sp, #32
 8019214:	af02      	add	r7, sp, #8
 8019216:	60f8      	str	r0, [r7, #12]
 8019218:	60b9      	str	r1, [r7, #8]
 801921a:	4613      	mov	r3, r2
 801921c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801921e:	68bb      	ldr	r3, [r7, #8]
 8019220:	2b00      	cmp	r3, #0
 8019222:	d101      	bne.n	8019228 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019224:	4b65      	ldr	r3, [pc, #404]	@ (80193bc <udp_bind+0x1ac>)
 8019226:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d109      	bne.n	8019242 <udp_bind+0x32>
 801922e:	4b64      	ldr	r3, [pc, #400]	@ (80193c0 <udp_bind+0x1b0>)
 8019230:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8019234:	4963      	ldr	r1, [pc, #396]	@ (80193c4 <udp_bind+0x1b4>)
 8019236:	4864      	ldr	r0, [pc, #400]	@ (80193c8 <udp_bind+0x1b8>)
 8019238:	f003 fa0a 	bl	801c650 <iprintf>
 801923c:	f06f 030f 	mvn.w	r3, #15
 8019240:	e0b7      	b.n	80193b2 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 8019242:	4862      	ldr	r0, [pc, #392]	@ (80193cc <udp_bind+0x1bc>)
 8019244:	f003 fa04 	bl	801c650 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d003      	beq.n	8019256 <udp_bind+0x46>
 801924e:	68bb      	ldr	r3, [r7, #8]
 8019250:	781b      	ldrb	r3, [r3, #0]
 8019252:	4619      	mov	r1, r3
 8019254:	e000      	b.n	8019258 <udp_bind+0x48>
 8019256:	2100      	movs	r1, #0
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d004      	beq.n	8019268 <udp_bind+0x58>
 801925e:	68bb      	ldr	r3, [r7, #8]
 8019260:	3301      	adds	r3, #1
 8019262:	781b      	ldrb	r3, [r3, #0]
 8019264:	461a      	mov	r2, r3
 8019266:	e000      	b.n	801926a <udp_bind+0x5a>
 8019268:	2200      	movs	r2, #0
 801926a:	68bb      	ldr	r3, [r7, #8]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d004      	beq.n	801927a <udp_bind+0x6a>
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	3302      	adds	r3, #2
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	4618      	mov	r0, r3
 8019278:	e000      	b.n	801927c <udp_bind+0x6c>
 801927a:	2000      	movs	r0, #0
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d003      	beq.n	801928a <udp_bind+0x7a>
 8019282:	68bb      	ldr	r3, [r7, #8]
 8019284:	3303      	adds	r3, #3
 8019286:	781b      	ldrb	r3, [r3, #0]
 8019288:	e000      	b.n	801928c <udp_bind+0x7c>
 801928a:	2300      	movs	r3, #0
 801928c:	9300      	str	r3, [sp, #0]
 801928e:	4603      	mov	r3, r0
 8019290:	484f      	ldr	r0, [pc, #316]	@ (80193d0 <udp_bind+0x1c0>)
 8019292:	f003 f9dd 	bl	801c650 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 8019296:	88fb      	ldrh	r3, [r7, #6]
 8019298:	4619      	mov	r1, r3
 801929a:	484e      	ldr	r0, [pc, #312]	@ (80193d4 <udp_bind+0x1c4>)
 801929c:	f003 f9d8 	bl	801c650 <iprintf>

  rebind = 0;
 80192a0:	2300      	movs	r3, #0
 80192a2:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80192a4:	4b4c      	ldr	r3, [pc, #304]	@ (80193d8 <udp_bind+0x1c8>)
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	617b      	str	r3, [r7, #20]
 80192aa:	e009      	b.n	80192c0 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80192ac:	68fa      	ldr	r2, [r7, #12]
 80192ae:	697b      	ldr	r3, [r7, #20]
 80192b0:	429a      	cmp	r2, r3
 80192b2:	d102      	bne.n	80192ba <udp_bind+0xaa>
      rebind = 1;
 80192b4:	2301      	movs	r3, #1
 80192b6:	74fb      	strb	r3, [r7, #19]
      break;
 80192b8:	e005      	b.n	80192c6 <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80192ba:	697b      	ldr	r3, [r7, #20]
 80192bc:	68db      	ldr	r3, [r3, #12]
 80192be:	617b      	str	r3, [r7, #20]
 80192c0:	697b      	ldr	r3, [r7, #20]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d1f2      	bne.n	80192ac <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80192c6:	88fb      	ldrh	r3, [r7, #6]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d10c      	bne.n	80192e6 <udp_bind+0xd6>
    port = udp_new_port();
 80192cc:	f7ff fae0 	bl	8018890 <udp_new_port>
 80192d0:	4603      	mov	r3, r0
 80192d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80192d4:	88fb      	ldrh	r3, [r7, #6]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d134      	bne.n	8019344 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 80192da:	4840      	ldr	r0, [pc, #256]	@ (80193dc <udp_bind+0x1cc>)
 80192dc:	f003 fa28 	bl	801c730 <puts>
      return ERR_USE;
 80192e0:	f06f 0307 	mvn.w	r3, #7
 80192e4:	e065      	b.n	80193b2 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80192e6:	4b3c      	ldr	r3, [pc, #240]	@ (80193d8 <udp_bind+0x1c8>)
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	617b      	str	r3, [r7, #20]
 80192ec:	e027      	b.n	801933e <udp_bind+0x12e>
      if (pcb != ipcb) {
 80192ee:	68fa      	ldr	r2, [r7, #12]
 80192f0:	697b      	ldr	r3, [r7, #20]
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d020      	beq.n	8019338 <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	8a5b      	ldrh	r3, [r3, #18]
 80192fa:	88fa      	ldrh	r2, [r7, #6]
 80192fc:	429a      	cmp	r2, r3
 80192fe:	d11b      	bne.n	8019338 <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019300:	697b      	ldr	r3, [r7, #20]
 8019302:	681a      	ldr	r2, [r3, #0]
 8019304:	68bb      	ldr	r3, [r7, #8]
 8019306:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019308:	429a      	cmp	r2, r3
 801930a:	d00d      	beq.n	8019328 <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801930c:	68bb      	ldr	r3, [r7, #8]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d00a      	beq.n	8019328 <udp_bind+0x118>
 8019312:	68bb      	ldr	r3, [r7, #8]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d006      	beq.n	8019328 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801931a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801931c:	2b00      	cmp	r3, #0
 801931e:	d003      	beq.n	8019328 <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	2b00      	cmp	r3, #0
 8019326:	d107      	bne.n	8019338 <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 8019328:	88fb      	ldrh	r3, [r7, #6]
 801932a:	4619      	mov	r1, r3
 801932c:	482c      	ldr	r0, [pc, #176]	@ (80193e0 <udp_bind+0x1d0>)
 801932e:	f003 f98f 	bl	801c650 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019332:	f06f 0307 	mvn.w	r3, #7
 8019336:	e03c      	b.n	80193b2 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019338:	697b      	ldr	r3, [r7, #20]
 801933a:	68db      	ldr	r3, [r3, #12]
 801933c:	617b      	str	r3, [r7, #20]
 801933e:	697b      	ldr	r3, [r7, #20]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d1d4      	bne.n	80192ee <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019344:	68bb      	ldr	r3, [r7, #8]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d002      	beq.n	8019350 <udp_bind+0x140>
 801934a:	68bb      	ldr	r3, [r7, #8]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	e000      	b.n	8019352 <udp_bind+0x142>
 8019350:	2300      	movs	r3, #0
 8019352:	68fa      	ldr	r2, [r7, #12]
 8019354:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	88fa      	ldrh	r2, [r7, #6]
 801935a:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801935c:	7cfb      	ldrb	r3, [r7, #19]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d106      	bne.n	8019370 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019362:	4b1d      	ldr	r3, [pc, #116]	@ (80193d8 <udp_bind+0x1c8>)
 8019364:	681a      	ldr	r2, [r3, #0]
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801936a:	4a1b      	ldr	r2, [pc, #108]	@ (80193d8 <udp_bind+0x1c8>)
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 8019370:	481c      	ldr	r0, [pc, #112]	@ (80193e4 <udp_bind+0x1d4>)
 8019372:	f003 f96d 	bl	801c650 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	b2db      	uxtb	r3, r3
 801937c:	4619      	mov	r1, r3
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	0a1b      	lsrs	r3, r3, #8
 8019384:	b2db      	uxtb	r3, r3
 8019386:	461a      	mov	r2, r3
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	0c1b      	lsrs	r3, r3, #16
 801938e:	b2db      	uxtb	r3, r3
 8019390:	4618      	mov	r0, r3
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	0e1b      	lsrs	r3, r3, #24
 8019398:	b2db      	uxtb	r3, r3
 801939a:	9300      	str	r3, [sp, #0]
 801939c:	4603      	mov	r3, r0
 801939e:	480c      	ldr	r0, [pc, #48]	@ (80193d0 <udp_bind+0x1c0>)
 80193a0:	f003 f956 	bl	801c650 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	8a5b      	ldrh	r3, [r3, #18]
 80193a8:	4619      	mov	r1, r3
 80193aa:	480f      	ldr	r0, [pc, #60]	@ (80193e8 <udp_bind+0x1d8>)
 80193ac:	f003 f950 	bl	801c650 <iprintf>
  return ERR_OK;
 80193b0:	2300      	movs	r3, #0
}
 80193b2:	4618      	mov	r0, r3
 80193b4:	3718      	adds	r7, #24
 80193b6:	46bd      	mov	sp, r7
 80193b8:	bd80      	pop	{r7, pc}
 80193ba:	bf00      	nop
 80193bc:	08021b00 	.word	0x08021b00
 80193c0:	08020644 	.word	0x08020644
 80193c4:	08020b78 	.word	0x08020b78
 80193c8:	08020698 	.word	0x08020698
 80193cc:	08020b90 	.word	0x08020b90
 80193d0:	08020788 	.word	0x08020788
 80193d4:	08020ba4 	.word	0x08020ba4
 80193d8:	200227fc 	.word	0x200227fc
 80193dc:	08020bb4 	.word	0x08020bb4
 80193e0:	08020bd4 	.word	0x08020bd4
 80193e4:	08020c0c 	.word	0x08020c0c
 80193e8:	08020c20 	.word	0x08020c20

080193ec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b088      	sub	sp, #32
 80193f0:	af02      	add	r7, sp, #8
 80193f2:	60f8      	str	r0, [r7, #12]
 80193f4:	60b9      	str	r1, [r7, #8]
 80193f6:	4613      	mov	r3, r2
 80193f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d109      	bne.n	8019414 <udp_connect+0x28>
 8019400:	4b3c      	ldr	r3, [pc, #240]	@ (80194f4 <udp_connect+0x108>)
 8019402:	f240 4235 	movw	r2, #1077	@ 0x435
 8019406:	493c      	ldr	r1, [pc, #240]	@ (80194f8 <udp_connect+0x10c>)
 8019408:	483c      	ldr	r0, [pc, #240]	@ (80194fc <udp_connect+0x110>)
 801940a:	f003 f921 	bl	801c650 <iprintf>
 801940e:	f06f 030f 	mvn.w	r3, #15
 8019412:	e06b      	b.n	80194ec <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019414:	68bb      	ldr	r3, [r7, #8]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d109      	bne.n	801942e <udp_connect+0x42>
 801941a:	4b36      	ldr	r3, [pc, #216]	@ (80194f4 <udp_connect+0x108>)
 801941c:	f240 4236 	movw	r2, #1078	@ 0x436
 8019420:	4937      	ldr	r1, [pc, #220]	@ (8019500 <udp_connect+0x114>)
 8019422:	4836      	ldr	r0, [pc, #216]	@ (80194fc <udp_connect+0x110>)
 8019424:	f003 f914 	bl	801c650 <iprintf>
 8019428:	f06f 030f 	mvn.w	r3, #15
 801942c:	e05e      	b.n	80194ec <udp_connect+0x100>

  if (pcb->local_port == 0) {
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	8a5b      	ldrh	r3, [r3, #18]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d10f      	bne.n	8019456 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019436:	68f9      	ldr	r1, [r7, #12]
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	8a5b      	ldrh	r3, [r3, #18]
 801943c:	461a      	mov	r2, r3
 801943e:	68f8      	ldr	r0, [r7, #12]
 8019440:	f7ff fee6 	bl	8019210 <udp_bind>
 8019444:	4603      	mov	r3, r0
 8019446:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019448:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d002      	beq.n	8019456 <udp_connect+0x6a>
      return err;
 8019450:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019454:	e04a      	b.n	80194ec <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019456:	68bb      	ldr	r3, [r7, #8]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d002      	beq.n	8019462 <udp_connect+0x76>
 801945c:	68bb      	ldr	r3, [r7, #8]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	e000      	b.n	8019464 <udp_connect+0x78>
 8019462:	2300      	movs	r3, #0
 8019464:	68fa      	ldr	r2, [r7, #12]
 8019466:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	88fa      	ldrh	r2, [r7, #6]
 801946c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	7c1b      	ldrb	r3, [r3, #16]
 8019472:	f043 0304 	orr.w	r3, r3, #4
 8019476:	b2da      	uxtb	r2, r3
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 801947c:	4821      	ldr	r0, [pc, #132]	@ (8019504 <udp_connect+0x118>)
 801947e:	f003 f8e7 	bl	801c650 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	b2db      	uxtb	r3, r3
 8019488:	4619      	mov	r1, r3
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	685b      	ldr	r3, [r3, #4]
 801948e:	0a1b      	lsrs	r3, r3, #8
 8019490:	b2db      	uxtb	r3, r3
 8019492:	461a      	mov	r2, r3
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	685b      	ldr	r3, [r3, #4]
 8019498:	0c1b      	lsrs	r3, r3, #16
 801949a:	b2db      	uxtb	r3, r3
 801949c:	4618      	mov	r0, r3
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	685b      	ldr	r3, [r3, #4]
 80194a2:	0e1b      	lsrs	r3, r3, #24
 80194a4:	b2db      	uxtb	r3, r3
 80194a6:	9300      	str	r3, [sp, #0]
 80194a8:	4603      	mov	r3, r0
 80194aa:	4817      	ldr	r0, [pc, #92]	@ (8019508 <udp_connect+0x11c>)
 80194ac:	f003 f8d0 	bl	801c650 <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	8a9b      	ldrh	r3, [r3, #20]
 80194b4:	4619      	mov	r1, r3
 80194b6:	4815      	ldr	r0, [pc, #84]	@ (801950c <udp_connect+0x120>)
 80194b8:	f003 f8ca 	bl	801c650 <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80194bc:	4b14      	ldr	r3, [pc, #80]	@ (8019510 <udp_connect+0x124>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	617b      	str	r3, [r7, #20]
 80194c2:	e008      	b.n	80194d6 <udp_connect+0xea>
    if (pcb == ipcb) {
 80194c4:	68fa      	ldr	r2, [r7, #12]
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	429a      	cmp	r2, r3
 80194ca:	d101      	bne.n	80194d0 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 80194cc:	2300      	movs	r3, #0
 80194ce:	e00d      	b.n	80194ec <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80194d0:	697b      	ldr	r3, [r7, #20]
 80194d2:	68db      	ldr	r3, [r3, #12]
 80194d4:	617b      	str	r3, [r7, #20]
 80194d6:	697b      	ldr	r3, [r7, #20]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d1f3      	bne.n	80194c4 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80194dc:	4b0c      	ldr	r3, [pc, #48]	@ (8019510 <udp_connect+0x124>)
 80194de:	681a      	ldr	r2, [r3, #0]
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80194e4:	4a0a      	ldr	r2, [pc, #40]	@ (8019510 <udp_connect+0x124>)
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80194ea:	2300      	movs	r3, #0
}
 80194ec:	4618      	mov	r0, r3
 80194ee:	3718      	adds	r7, #24
 80194f0:	46bd      	mov	sp, r7
 80194f2:	bd80      	pop	{r7, pc}
 80194f4:	08020644 	.word	0x08020644
 80194f8:	08020c30 	.word	0x08020c30
 80194fc:	08020698 	.word	0x08020698
 8019500:	08020c4c 	.word	0x08020c4c
 8019504:	08020c68 	.word	0x08020c68
 8019508:	08020788 	.word	0x08020788
 801950c:	08020c20 	.word	0x08020c20
 8019510:	200227fc 	.word	0x200227fc

08019514 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b082      	sub	sp, #8
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d107      	bne.n	8019532 <udp_disconnect+0x1e>
 8019522:	4b0d      	ldr	r3, [pc, #52]	@ (8019558 <udp_disconnect+0x44>)
 8019524:	f240 426a 	movw	r2, #1130	@ 0x46a
 8019528:	490c      	ldr	r1, [pc, #48]	@ (801955c <udp_disconnect+0x48>)
 801952a:	480d      	ldr	r0, [pc, #52]	@ (8019560 <udp_disconnect+0x4c>)
 801952c:	f003 f890 	bl	801c650 <iprintf>
 8019530:	e00f      	b.n	8019552 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2200      	movs	r2, #0
 8019536:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	2200      	movs	r2, #0
 801953c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	2200      	movs	r2, #0
 8019542:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	7c1b      	ldrb	r3, [r3, #16]
 8019548:	f023 0304 	bic.w	r3, r3, #4
 801954c:	b2da      	uxtb	r2, r3
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	741a      	strb	r2, [r3, #16]
}
 8019552:	3708      	adds	r7, #8
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}
 8019558:	08020644 	.word	0x08020644
 801955c:	08020c84 	.word	0x08020c84
 8019560:	08020698 	.word	0x08020698

08019564 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	60f8      	str	r0, [r7, #12]
 801956c:	60b9      	str	r1, [r7, #8]
 801956e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d107      	bne.n	8019586 <udp_recv+0x22>
 8019576:	4b08      	ldr	r3, [pc, #32]	@ (8019598 <udp_recv+0x34>)
 8019578:	f240 428a 	movw	r2, #1162	@ 0x48a
 801957c:	4907      	ldr	r1, [pc, #28]	@ (801959c <udp_recv+0x38>)
 801957e:	4808      	ldr	r0, [pc, #32]	@ (80195a0 <udp_recv+0x3c>)
 8019580:	f003 f866 	bl	801c650 <iprintf>
 8019584:	e005      	b.n	8019592 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	68ba      	ldr	r2, [r7, #8]
 801958a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	687a      	ldr	r2, [r7, #4]
 8019590:	61da      	str	r2, [r3, #28]
}
 8019592:	3710      	adds	r7, #16
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}
 8019598:	08020644 	.word	0x08020644
 801959c:	08020ca0 	.word	0x08020ca0
 80195a0:	08020698 	.word	0x08020698

080195a4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b084      	sub	sp, #16
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d107      	bne.n	80195c2 <udp_remove+0x1e>
 80195b2:	4b19      	ldr	r3, [pc, #100]	@ (8019618 <udp_remove+0x74>)
 80195b4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80195b8:	4918      	ldr	r1, [pc, #96]	@ (801961c <udp_remove+0x78>)
 80195ba:	4819      	ldr	r0, [pc, #100]	@ (8019620 <udp_remove+0x7c>)
 80195bc:	f003 f848 	bl	801c650 <iprintf>
 80195c0:	e026      	b.n	8019610 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80195c2:	4b18      	ldr	r3, [pc, #96]	@ (8019624 <udp_remove+0x80>)
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	687a      	ldr	r2, [r7, #4]
 80195c8:	429a      	cmp	r2, r3
 80195ca:	d105      	bne.n	80195d8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80195cc:	4b15      	ldr	r3, [pc, #84]	@ (8019624 <udp_remove+0x80>)
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	68db      	ldr	r3, [r3, #12]
 80195d2:	4a14      	ldr	r2, [pc, #80]	@ (8019624 <udp_remove+0x80>)
 80195d4:	6013      	str	r3, [r2, #0]
 80195d6:	e017      	b.n	8019608 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80195d8:	4b12      	ldr	r3, [pc, #72]	@ (8019624 <udp_remove+0x80>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	60fb      	str	r3, [r7, #12]
 80195de:	e010      	b.n	8019602 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	68db      	ldr	r3, [r3, #12]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d009      	beq.n	80195fc <udp_remove+0x58>
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	68db      	ldr	r3, [r3, #12]
 80195ec:	687a      	ldr	r2, [r7, #4]
 80195ee:	429a      	cmp	r2, r3
 80195f0:	d104      	bne.n	80195fc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	68da      	ldr	r2, [r3, #12]
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	60da      	str	r2, [r3, #12]
        break;
 80195fa:	e005      	b.n	8019608 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	68db      	ldr	r3, [r3, #12]
 8019600:	60fb      	str	r3, [r7, #12]
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d1eb      	bne.n	80195e0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019608:	6879      	ldr	r1, [r7, #4]
 801960a:	2000      	movs	r0, #0
 801960c:	f7f7 fc2c 	bl	8010e68 <memp_free>
}
 8019610:	3710      	adds	r7, #16
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	08020644 	.word	0x08020644
 801961c:	08020cb8 	.word	0x08020cb8
 8019620:	08020698 	.word	0x08020698
 8019624:	200227fc 	.word	0x200227fc

08019628 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b082      	sub	sp, #8
 801962c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801962e:	2000      	movs	r0, #0
 8019630:	f7f7 fba4 	bl	8010d7c <memp_malloc>
 8019634:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d007      	beq.n	801964c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801963c:	2220      	movs	r2, #32
 801963e:	2100      	movs	r1, #0
 8019640:	6878      	ldr	r0, [r7, #4]
 8019642:	f003 f965 	bl	801c910 <memset>
    pcb->ttl = UDP_TTL;
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	22ff      	movs	r2, #255	@ 0xff
 801964a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801964c:	687b      	ldr	r3, [r7, #4]
}
 801964e:	4618      	mov	r0, r3
 8019650:	3708      	adds	r7, #8
 8019652:	46bd      	mov	sp, r7
 8019654:	bd80      	pop	{r7, pc}

08019656 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8019656:	b580      	push	{r7, lr}
 8019658:	b084      	sub	sp, #16
 801965a:	af00      	add	r7, sp, #0
 801965c:	4603      	mov	r3, r0
 801965e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019660:	f7ff ffe2 	bl	8019628 <udp_new>
 8019664:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019666:	68fb      	ldr	r3, [r7, #12]
}
 8019668:	4618      	mov	r0, r3
 801966a:	3710      	adds	r7, #16
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019670:	b480      	push	{r7}
 8019672:	b085      	sub	sp, #20
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
 8019678:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d01e      	beq.n	80196be <udp_netif_ip_addr_changed+0x4e>
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d01a      	beq.n	80196be <udp_netif_ip_addr_changed+0x4e>
 8019688:	683b      	ldr	r3, [r7, #0]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d017      	beq.n	80196be <udp_netif_ip_addr_changed+0x4e>
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d013      	beq.n	80196be <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019696:	4b0d      	ldr	r3, [pc, #52]	@ (80196cc <udp_netif_ip_addr_changed+0x5c>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	60fb      	str	r3, [r7, #12]
 801969c:	e00c      	b.n	80196b8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	681a      	ldr	r2, [r3, #0]
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	429a      	cmp	r2, r3
 80196a8:	d103      	bne.n	80196b2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80196aa:	683b      	ldr	r3, [r7, #0]
 80196ac:	681a      	ldr	r2, [r3, #0]
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	68db      	ldr	r3, [r3, #12]
 80196b6:	60fb      	str	r3, [r7, #12]
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d1ef      	bne.n	801969e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80196be:	bf00      	nop
 80196c0:	3714      	adds	r7, #20
 80196c2:	46bd      	mov	sp, r7
 80196c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c8:	4770      	bx	lr
 80196ca:	bf00      	nop
 80196cc:	200227fc 	.word	0x200227fc

080196d0 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 80196d0:	b590      	push	{r4, r7, lr}
 80196d2:	b083      	sub	sp, #12
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 80196d8:	481b      	ldr	r0, [pc, #108]	@ (8019748 <udp_debug_print+0x78>)
 80196da:	f003 f829 	bl	801c730 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80196de:	481b      	ldr	r0, [pc, #108]	@ (801974c <udp_debug_print+0x7c>)
 80196e0:	f003 f826 	bl	801c730 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	881b      	ldrh	r3, [r3, #0]
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	4618      	mov	r0, r3
 80196ec:	f7f6 fe72 	bl	80103d4 <lwip_htons>
 80196f0:	4603      	mov	r3, r0
 80196f2:	461c      	mov	r4, r3
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	885b      	ldrh	r3, [r3, #2]
 80196f8:	b29b      	uxth	r3, r3
 80196fa:	4618      	mov	r0, r3
 80196fc:	f7f6 fe6a 	bl	80103d4 <lwip_htons>
 8019700:	4603      	mov	r3, r0
 8019702:	461a      	mov	r2, r3
 8019704:	4621      	mov	r1, r4
 8019706:	4812      	ldr	r0, [pc, #72]	@ (8019750 <udp_debug_print+0x80>)
 8019708:	f002 ffa2 	bl	801c650 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801970c:	480f      	ldr	r0, [pc, #60]	@ (801974c <udp_debug_print+0x7c>)
 801970e:	f003 f80f 	bl	801c730 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	889b      	ldrh	r3, [r3, #4]
 8019716:	b29b      	uxth	r3, r3
 8019718:	4618      	mov	r0, r3
 801971a:	f7f6 fe5b 	bl	80103d4 <lwip_htons>
 801971e:	4603      	mov	r3, r0
 8019720:	461c      	mov	r4, r3
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	88db      	ldrh	r3, [r3, #6]
 8019726:	b29b      	uxth	r3, r3
 8019728:	4618      	mov	r0, r3
 801972a:	f7f6 fe53 	bl	80103d4 <lwip_htons>
 801972e:	4603      	mov	r3, r0
 8019730:	461a      	mov	r2, r3
 8019732:	4621      	mov	r1, r4
 8019734:	4807      	ldr	r0, [pc, #28]	@ (8019754 <udp_debug_print+0x84>)
 8019736:	f002 ff8b 	bl	801c650 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801973a:	4804      	ldr	r0, [pc, #16]	@ (801974c <udp_debug_print+0x7c>)
 801973c:	f002 fff8 	bl	801c730 <puts>
}
 8019740:	bf00      	nop
 8019742:	370c      	adds	r7, #12
 8019744:	46bd      	mov	sp, r7
 8019746:	bd90      	pop	{r4, r7, pc}
 8019748:	08020cd0 	.word	0x08020cd0
 801974c:	08020cdc 	.word	0x08020cdc
 8019750:	08020d00 	.word	0x08020d00
 8019754:	08020d38 	.word	0x08020d38

08019758 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019758:	b580      	push	{r7, lr}
 801975a:	b082      	sub	sp, #8
 801975c:	af00      	add	r7, sp, #0
 801975e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019760:	492b      	ldr	r1, [pc, #172]	@ (8019810 <etharp_free_entry+0xb8>)
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	4613      	mov	r3, r2
 8019766:	005b      	lsls	r3, r3, #1
 8019768:	4413      	add	r3, r2
 801976a:	00db      	lsls	r3, r3, #3
 801976c:	440b      	add	r3, r1
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d013      	beq.n	801979c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019774:	4926      	ldr	r1, [pc, #152]	@ (8019810 <etharp_free_entry+0xb8>)
 8019776:	687a      	ldr	r2, [r7, #4]
 8019778:	4613      	mov	r3, r2
 801977a:	005b      	lsls	r3, r3, #1
 801977c:	4413      	add	r3, r2
 801977e:	00db      	lsls	r3, r3, #3
 8019780:	440b      	add	r3, r1
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	4618      	mov	r0, r3
 8019786:	f7f8 fb09 	bl	8011d9c <pbuf_free>
    arp_table[i].q = NULL;
 801978a:	4921      	ldr	r1, [pc, #132]	@ (8019810 <etharp_free_entry+0xb8>)
 801978c:	687a      	ldr	r2, [r7, #4]
 801978e:	4613      	mov	r3, r2
 8019790:	005b      	lsls	r3, r3, #1
 8019792:	4413      	add	r3, r2
 8019794:	00db      	lsls	r3, r3, #3
 8019796:	440b      	add	r3, r1
 8019798:	2200      	movs	r2, #0
 801979a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801979c:	491c      	ldr	r1, [pc, #112]	@ (8019810 <etharp_free_entry+0xb8>)
 801979e:	687a      	ldr	r2, [r7, #4]
 80197a0:	4613      	mov	r3, r2
 80197a2:	005b      	lsls	r3, r3, #1
 80197a4:	4413      	add	r3, r2
 80197a6:	00db      	lsls	r3, r3, #3
 80197a8:	440b      	add	r3, r1
 80197aa:	3314      	adds	r3, #20
 80197ac:	2200      	movs	r2, #0
 80197ae:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 80197b0:	4917      	ldr	r1, [pc, #92]	@ (8019810 <etharp_free_entry+0xb8>)
 80197b2:	687a      	ldr	r2, [r7, #4]
 80197b4:	4613      	mov	r3, r2
 80197b6:	005b      	lsls	r3, r3, #1
 80197b8:	4413      	add	r3, r2
 80197ba:	00db      	lsls	r3, r3, #3
 80197bc:	440b      	add	r3, r1
 80197be:	3312      	adds	r3, #18
 80197c0:	2200      	movs	r2, #0
 80197c2:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 80197c4:	4912      	ldr	r1, [pc, #72]	@ (8019810 <etharp_free_entry+0xb8>)
 80197c6:	687a      	ldr	r2, [r7, #4]
 80197c8:	4613      	mov	r3, r2
 80197ca:	005b      	lsls	r3, r3, #1
 80197cc:	4413      	add	r3, r2
 80197ce:	00db      	lsls	r3, r3, #3
 80197d0:	440b      	add	r3, r1
 80197d2:	3308      	adds	r3, #8
 80197d4:	2200      	movs	r2, #0
 80197d6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 80197d8:	490d      	ldr	r1, [pc, #52]	@ (8019810 <etharp_free_entry+0xb8>)
 80197da:	687a      	ldr	r2, [r7, #4]
 80197dc:	4613      	mov	r3, r2
 80197de:	005b      	lsls	r3, r3, #1
 80197e0:	4413      	add	r3, r2
 80197e2:	00db      	lsls	r3, r3, #3
 80197e4:	440b      	add	r3, r1
 80197e6:	3304      	adds	r3, #4
 80197e8:	2200      	movs	r2, #0
 80197ea:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 80197ec:	4908      	ldr	r1, [pc, #32]	@ (8019810 <etharp_free_entry+0xb8>)
 80197ee:	687a      	ldr	r2, [r7, #4]
 80197f0:	4613      	mov	r3, r2
 80197f2:	005b      	lsls	r3, r3, #1
 80197f4:	4413      	add	r3, r2
 80197f6:	00db      	lsls	r3, r3, #3
 80197f8:	440b      	add	r3, r1
 80197fa:	3308      	adds	r3, #8
 80197fc:	4a05      	ldr	r2, [pc, #20]	@ (8019814 <etharp_free_entry+0xbc>)
 80197fe:	3304      	adds	r3, #4
 8019800:	6810      	ldr	r0, [r2, #0]
 8019802:	6018      	str	r0, [r3, #0]
 8019804:	8892      	ldrh	r2, [r2, #4]
 8019806:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8019808:	bf00      	nop
 801980a:	3708      	adds	r7, #8
 801980c:	46bd      	mov	sp, r7
 801980e:	bd80      	pop	{r7, pc}
 8019810:	20022800 	.word	0x20022800
 8019814:	08021b0c 	.word	0x08021b0c

08019818 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019818:	b580      	push	{r7, lr}
 801981a:	b082      	sub	sp, #8
 801981c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801981e:	2300      	movs	r3, #0
 8019820:	607b      	str	r3, [r7, #4]
 8019822:	e096      	b.n	8019952 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019824:	494f      	ldr	r1, [pc, #316]	@ (8019964 <etharp_tmr+0x14c>)
 8019826:	687a      	ldr	r2, [r7, #4]
 8019828:	4613      	mov	r3, r2
 801982a:	005b      	lsls	r3, r3, #1
 801982c:	4413      	add	r3, r2
 801982e:	00db      	lsls	r3, r3, #3
 8019830:	440b      	add	r3, r1
 8019832:	3314      	adds	r3, #20
 8019834:	781b      	ldrb	r3, [r3, #0]
 8019836:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8019838:	78fb      	ldrb	r3, [r7, #3]
 801983a:	2b00      	cmp	r3, #0
 801983c:	f000 8086 	beq.w	801994c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8019840:	4948      	ldr	r1, [pc, #288]	@ (8019964 <etharp_tmr+0x14c>)
 8019842:	687a      	ldr	r2, [r7, #4]
 8019844:	4613      	mov	r3, r2
 8019846:	005b      	lsls	r3, r3, #1
 8019848:	4413      	add	r3, r2
 801984a:	00db      	lsls	r3, r3, #3
 801984c:	440b      	add	r3, r1
 801984e:	3312      	adds	r3, #18
 8019850:	881b      	ldrh	r3, [r3, #0]
 8019852:	3301      	adds	r3, #1
 8019854:	b298      	uxth	r0, r3
 8019856:	4943      	ldr	r1, [pc, #268]	@ (8019964 <etharp_tmr+0x14c>)
 8019858:	687a      	ldr	r2, [r7, #4]
 801985a:	4613      	mov	r3, r2
 801985c:	005b      	lsls	r3, r3, #1
 801985e:	4413      	add	r3, r2
 8019860:	00db      	lsls	r3, r3, #3
 8019862:	440b      	add	r3, r1
 8019864:	3312      	adds	r3, #18
 8019866:	4602      	mov	r2, r0
 8019868:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801986a:	493e      	ldr	r1, [pc, #248]	@ (8019964 <etharp_tmr+0x14c>)
 801986c:	687a      	ldr	r2, [r7, #4]
 801986e:	4613      	mov	r3, r2
 8019870:	005b      	lsls	r3, r3, #1
 8019872:	4413      	add	r3, r2
 8019874:	00db      	lsls	r3, r3, #3
 8019876:	440b      	add	r3, r1
 8019878:	3312      	adds	r3, #18
 801987a:	881b      	ldrh	r3, [r3, #0]
 801987c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8019880:	d215      	bcs.n	80198ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019882:	4938      	ldr	r1, [pc, #224]	@ (8019964 <etharp_tmr+0x14c>)
 8019884:	687a      	ldr	r2, [r7, #4]
 8019886:	4613      	mov	r3, r2
 8019888:	005b      	lsls	r3, r3, #1
 801988a:	4413      	add	r3, r2
 801988c:	00db      	lsls	r3, r3, #3
 801988e:	440b      	add	r3, r1
 8019890:	3314      	adds	r3, #20
 8019892:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019894:	2b01      	cmp	r3, #1
 8019896:	d10e      	bne.n	80198b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019898:	4932      	ldr	r1, [pc, #200]	@ (8019964 <etharp_tmr+0x14c>)
 801989a:	687a      	ldr	r2, [r7, #4]
 801989c:	4613      	mov	r3, r2
 801989e:	005b      	lsls	r3, r3, #1
 80198a0:	4413      	add	r3, r2
 80198a2:	00db      	lsls	r3, r3, #3
 80198a4:	440b      	add	r3, r1
 80198a6:	3312      	adds	r3, #18
 80198a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80198aa:	2b04      	cmp	r3, #4
 80198ac:	d903      	bls.n	80198b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80198ae:	6878      	ldr	r0, [r7, #4]
 80198b0:	f7ff ff52 	bl	8019758 <etharp_free_entry>
 80198b4:	e04a      	b.n	801994c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80198b6:	492b      	ldr	r1, [pc, #172]	@ (8019964 <etharp_tmr+0x14c>)
 80198b8:	687a      	ldr	r2, [r7, #4]
 80198ba:	4613      	mov	r3, r2
 80198bc:	005b      	lsls	r3, r3, #1
 80198be:	4413      	add	r3, r2
 80198c0:	00db      	lsls	r3, r3, #3
 80198c2:	440b      	add	r3, r1
 80198c4:	3314      	adds	r3, #20
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	2b03      	cmp	r3, #3
 80198ca:	d10a      	bne.n	80198e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80198cc:	4925      	ldr	r1, [pc, #148]	@ (8019964 <etharp_tmr+0x14c>)
 80198ce:	687a      	ldr	r2, [r7, #4]
 80198d0:	4613      	mov	r3, r2
 80198d2:	005b      	lsls	r3, r3, #1
 80198d4:	4413      	add	r3, r2
 80198d6:	00db      	lsls	r3, r3, #3
 80198d8:	440b      	add	r3, r1
 80198da:	3314      	adds	r3, #20
 80198dc:	2204      	movs	r2, #4
 80198de:	701a      	strb	r2, [r3, #0]
 80198e0:	e034      	b.n	801994c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80198e2:	4920      	ldr	r1, [pc, #128]	@ (8019964 <etharp_tmr+0x14c>)
 80198e4:	687a      	ldr	r2, [r7, #4]
 80198e6:	4613      	mov	r3, r2
 80198e8:	005b      	lsls	r3, r3, #1
 80198ea:	4413      	add	r3, r2
 80198ec:	00db      	lsls	r3, r3, #3
 80198ee:	440b      	add	r3, r1
 80198f0:	3314      	adds	r3, #20
 80198f2:	781b      	ldrb	r3, [r3, #0]
 80198f4:	2b04      	cmp	r3, #4
 80198f6:	d10a      	bne.n	801990e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80198f8:	491a      	ldr	r1, [pc, #104]	@ (8019964 <etharp_tmr+0x14c>)
 80198fa:	687a      	ldr	r2, [r7, #4]
 80198fc:	4613      	mov	r3, r2
 80198fe:	005b      	lsls	r3, r3, #1
 8019900:	4413      	add	r3, r2
 8019902:	00db      	lsls	r3, r3, #3
 8019904:	440b      	add	r3, r1
 8019906:	3314      	adds	r3, #20
 8019908:	2202      	movs	r2, #2
 801990a:	701a      	strb	r2, [r3, #0]
 801990c:	e01e      	b.n	801994c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801990e:	4915      	ldr	r1, [pc, #84]	@ (8019964 <etharp_tmr+0x14c>)
 8019910:	687a      	ldr	r2, [r7, #4]
 8019912:	4613      	mov	r3, r2
 8019914:	005b      	lsls	r3, r3, #1
 8019916:	4413      	add	r3, r2
 8019918:	00db      	lsls	r3, r3, #3
 801991a:	440b      	add	r3, r1
 801991c:	3314      	adds	r3, #20
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	2b01      	cmp	r3, #1
 8019922:	d113      	bne.n	801994c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019924:	490f      	ldr	r1, [pc, #60]	@ (8019964 <etharp_tmr+0x14c>)
 8019926:	687a      	ldr	r2, [r7, #4]
 8019928:	4613      	mov	r3, r2
 801992a:	005b      	lsls	r3, r3, #1
 801992c:	4413      	add	r3, r2
 801992e:	00db      	lsls	r3, r3, #3
 8019930:	440b      	add	r3, r1
 8019932:	3308      	adds	r3, #8
 8019934:	6818      	ldr	r0, [r3, #0]
 8019936:	687a      	ldr	r2, [r7, #4]
 8019938:	4613      	mov	r3, r2
 801993a:	005b      	lsls	r3, r3, #1
 801993c:	4413      	add	r3, r2
 801993e:	00db      	lsls	r3, r3, #3
 8019940:	4a08      	ldr	r2, [pc, #32]	@ (8019964 <etharp_tmr+0x14c>)
 8019942:	4413      	add	r3, r2
 8019944:	3304      	adds	r3, #4
 8019946:	4619      	mov	r1, r3
 8019948:	f000 fe6e 	bl	801a628 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	3301      	adds	r3, #1
 8019950:	607b      	str	r3, [r7, #4]
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2b09      	cmp	r3, #9
 8019956:	f77f af65 	ble.w	8019824 <etharp_tmr+0xc>
      }
    }
  }
}
 801995a:	bf00      	nop
 801995c:	bf00      	nop
 801995e:	3708      	adds	r7, #8
 8019960:	46bd      	mov	sp, r7
 8019962:	bd80      	pop	{r7, pc}
 8019964:	20022800 	.word	0x20022800

08019968 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b08a      	sub	sp, #40	@ 0x28
 801996c:	af00      	add	r7, sp, #0
 801996e:	60f8      	str	r0, [r7, #12]
 8019970:	460b      	mov	r3, r1
 8019972:	607a      	str	r2, [r7, #4]
 8019974:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019976:	230a      	movs	r3, #10
 8019978:	843b      	strh	r3, [r7, #32]
 801997a:	230a      	movs	r3, #10
 801997c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801997e:	230a      	movs	r3, #10
 8019980:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 8019982:	2300      	movs	r3, #0
 8019984:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019986:	230a      	movs	r3, #10
 8019988:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801998a:	2300      	movs	r3, #0
 801998c:	83bb      	strh	r3, [r7, #28]
 801998e:	2300      	movs	r3, #0
 8019990:	837b      	strh	r3, [r7, #26]
 8019992:	2300      	movs	r3, #0
 8019994:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019996:	2300      	movs	r3, #0
 8019998:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801999a:	e0ae      	b.n	8019afa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801999c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80199a0:	49a6      	ldr	r1, [pc, #664]	@ (8019c3c <etharp_find_entry+0x2d4>)
 80199a2:	4613      	mov	r3, r2
 80199a4:	005b      	lsls	r3, r3, #1
 80199a6:	4413      	add	r3, r2
 80199a8:	00db      	lsls	r3, r3, #3
 80199aa:	440b      	add	r3, r1
 80199ac:	3314      	adds	r3, #20
 80199ae:	781b      	ldrb	r3, [r3, #0]
 80199b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80199b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80199b6:	2b0a      	cmp	r3, #10
 80199b8:	d105      	bne.n	80199c6 <etharp_find_entry+0x5e>
 80199ba:	7dfb      	ldrb	r3, [r7, #23]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d102      	bne.n	80199c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80199c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80199c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80199c4:	e095      	b.n	8019af2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80199c6:	7dfb      	ldrb	r3, [r7, #23]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	f000 8092 	beq.w	8019af2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80199ce:	7dfb      	ldrb	r3, [r7, #23]
 80199d0:	2b01      	cmp	r3, #1
 80199d2:	d009      	beq.n	80199e8 <etharp_find_entry+0x80>
 80199d4:	7dfb      	ldrb	r3, [r7, #23]
 80199d6:	2b01      	cmp	r3, #1
 80199d8:	d806      	bhi.n	80199e8 <etharp_find_entry+0x80>
 80199da:	4b99      	ldr	r3, [pc, #612]	@ (8019c40 <etharp_find_entry+0x2d8>)
 80199dc:	f240 1223 	movw	r2, #291	@ 0x123
 80199e0:	4998      	ldr	r1, [pc, #608]	@ (8019c44 <etharp_find_entry+0x2dc>)
 80199e2:	4899      	ldr	r0, [pc, #612]	@ (8019c48 <etharp_find_entry+0x2e0>)
 80199e4:	f002 fe34 	bl	801c650 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d020      	beq.n	8019a30 <etharp_find_entry+0xc8>
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	6819      	ldr	r1, [r3, #0]
 80199f2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80199f6:	4891      	ldr	r0, [pc, #580]	@ (8019c3c <etharp_find_entry+0x2d4>)
 80199f8:	4613      	mov	r3, r2
 80199fa:	005b      	lsls	r3, r3, #1
 80199fc:	4413      	add	r3, r2
 80199fe:	00db      	lsls	r3, r3, #3
 8019a00:	4403      	add	r3, r0
 8019a02:	3304      	adds	r3, #4
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	4299      	cmp	r1, r3
 8019a08:	d112      	bne.n	8019a30 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d00c      	beq.n	8019a2a <etharp_find_entry+0xc2>
 8019a10:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019a14:	4989      	ldr	r1, [pc, #548]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019a16:	4613      	mov	r3, r2
 8019a18:	005b      	lsls	r3, r3, #1
 8019a1a:	4413      	add	r3, r2
 8019a1c:	00db      	lsls	r3, r3, #3
 8019a1e:	440b      	add	r3, r1
 8019a20:	3308      	adds	r3, #8
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	687a      	ldr	r2, [r7, #4]
 8019a26:	429a      	cmp	r2, r3
 8019a28:	d102      	bne.n	8019a30 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019a2a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019a2e:	e100      	b.n	8019c32 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019a30:	7dfb      	ldrb	r3, [r7, #23]
 8019a32:	2b01      	cmp	r3, #1
 8019a34:	d140      	bne.n	8019ab8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019a36:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019a3a:	4980      	ldr	r1, [pc, #512]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019a3c:	4613      	mov	r3, r2
 8019a3e:	005b      	lsls	r3, r3, #1
 8019a40:	4413      	add	r3, r2
 8019a42:	00db      	lsls	r3, r3, #3
 8019a44:	440b      	add	r3, r1
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d01a      	beq.n	8019a82 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019a4c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019a50:	497a      	ldr	r1, [pc, #488]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019a52:	4613      	mov	r3, r2
 8019a54:	005b      	lsls	r3, r3, #1
 8019a56:	4413      	add	r3, r2
 8019a58:	00db      	lsls	r3, r3, #3
 8019a5a:	440b      	add	r3, r1
 8019a5c:	3312      	adds	r3, #18
 8019a5e:	881b      	ldrh	r3, [r3, #0]
 8019a60:	8bba      	ldrh	r2, [r7, #28]
 8019a62:	429a      	cmp	r2, r3
 8019a64:	d845      	bhi.n	8019af2 <etharp_find_entry+0x18a>
            old_queue = i;
 8019a66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019a68:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019a6a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019a6e:	4973      	ldr	r1, [pc, #460]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019a70:	4613      	mov	r3, r2
 8019a72:	005b      	lsls	r3, r3, #1
 8019a74:	4413      	add	r3, r2
 8019a76:	00db      	lsls	r3, r3, #3
 8019a78:	440b      	add	r3, r1
 8019a7a:	3312      	adds	r3, #18
 8019a7c:	881b      	ldrh	r3, [r3, #0]
 8019a7e:	83bb      	strh	r3, [r7, #28]
 8019a80:	e037      	b.n	8019af2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019a82:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019a86:	496d      	ldr	r1, [pc, #436]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019a88:	4613      	mov	r3, r2
 8019a8a:	005b      	lsls	r3, r3, #1
 8019a8c:	4413      	add	r3, r2
 8019a8e:	00db      	lsls	r3, r3, #3
 8019a90:	440b      	add	r3, r1
 8019a92:	3312      	adds	r3, #18
 8019a94:	881b      	ldrh	r3, [r3, #0]
 8019a96:	8b7a      	ldrh	r2, [r7, #26]
 8019a98:	429a      	cmp	r2, r3
 8019a9a:	d82a      	bhi.n	8019af2 <etharp_find_entry+0x18a>
            old_pending = i;
 8019a9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019a9e:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8019aa0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019aa4:	4965      	ldr	r1, [pc, #404]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019aa6:	4613      	mov	r3, r2
 8019aa8:	005b      	lsls	r3, r3, #1
 8019aaa:	4413      	add	r3, r2
 8019aac:	00db      	lsls	r3, r3, #3
 8019aae:	440b      	add	r3, r1
 8019ab0:	3312      	adds	r3, #18
 8019ab2:	881b      	ldrh	r3, [r3, #0]
 8019ab4:	837b      	strh	r3, [r7, #26]
 8019ab6:	e01c      	b.n	8019af2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019ab8:	7dfb      	ldrb	r3, [r7, #23]
 8019aba:	2b01      	cmp	r3, #1
 8019abc:	d919      	bls.n	8019af2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019abe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019ac2:	495e      	ldr	r1, [pc, #376]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019ac4:	4613      	mov	r3, r2
 8019ac6:	005b      	lsls	r3, r3, #1
 8019ac8:	4413      	add	r3, r2
 8019aca:	00db      	lsls	r3, r3, #3
 8019acc:	440b      	add	r3, r1
 8019ace:	3312      	adds	r3, #18
 8019ad0:	881b      	ldrh	r3, [r3, #0]
 8019ad2:	8b3a      	ldrh	r2, [r7, #24]
 8019ad4:	429a      	cmp	r2, r3
 8019ad6:	d80c      	bhi.n	8019af2 <etharp_find_entry+0x18a>
            old_stable = i;
 8019ad8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019ada:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8019adc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019ae0:	4956      	ldr	r1, [pc, #344]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019ae2:	4613      	mov	r3, r2
 8019ae4:	005b      	lsls	r3, r3, #1
 8019ae6:	4413      	add	r3, r2
 8019ae8:	00db      	lsls	r3, r3, #3
 8019aea:	440b      	add	r3, r1
 8019aec:	3312      	adds	r3, #18
 8019aee:	881b      	ldrh	r3, [r3, #0]
 8019af0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019af2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019af4:	3301      	adds	r3, #1
 8019af6:	b29b      	uxth	r3, r3
 8019af8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019afa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019afe:	2b09      	cmp	r3, #9
 8019b00:	f77f af4c 	ble.w	801999c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019b04:	7afb      	ldrb	r3, [r7, #11]
 8019b06:	f003 0302 	and.w	r3, r3, #2
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d108      	bne.n	8019b20 <etharp_find_entry+0x1b8>
 8019b0e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8019b12:	2b0a      	cmp	r3, #10
 8019b14:	d107      	bne.n	8019b26 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019b16:	7afb      	ldrb	r3, [r7, #11]
 8019b18:	f003 0301 	and.w	r3, r3, #1
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d102      	bne.n	8019b26 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019b20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019b24:	e085      	b.n	8019c32 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019b26:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8019b2a:	2b09      	cmp	r3, #9
 8019b2c:	dc02      	bgt.n	8019b34 <etharp_find_entry+0x1cc>
    i = empty;
 8019b2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019b30:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019b32:	e039      	b.n	8019ba8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019b34:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8019b38:	2b09      	cmp	r3, #9
 8019b3a:	dc14      	bgt.n	8019b66 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019b3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019b3e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019b40:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019b44:	493d      	ldr	r1, [pc, #244]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019b46:	4613      	mov	r3, r2
 8019b48:	005b      	lsls	r3, r3, #1
 8019b4a:	4413      	add	r3, r2
 8019b4c:	00db      	lsls	r3, r3, #3
 8019b4e:	440b      	add	r3, r1
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d018      	beq.n	8019b88 <etharp_find_entry+0x220>
 8019b56:	4b3a      	ldr	r3, [pc, #232]	@ (8019c40 <etharp_find_entry+0x2d8>)
 8019b58:	f240 126d 	movw	r2, #365	@ 0x16d
 8019b5c:	493b      	ldr	r1, [pc, #236]	@ (8019c4c <etharp_find_entry+0x2e4>)
 8019b5e:	483a      	ldr	r0, [pc, #232]	@ (8019c48 <etharp_find_entry+0x2e0>)
 8019b60:	f002 fd76 	bl	801c650 <iprintf>
 8019b64:	e010      	b.n	8019b88 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019b66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019b6a:	2b09      	cmp	r3, #9
 8019b6c:	dc02      	bgt.n	8019b74 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019b6e:	8c3b      	ldrh	r3, [r7, #32]
 8019b70:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019b72:	e009      	b.n	8019b88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019b74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019b78:	2b09      	cmp	r3, #9
 8019b7a:	dc02      	bgt.n	8019b82 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019b7c:	8bfb      	ldrh	r3, [r7, #30]
 8019b7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8019b80:	e002      	b.n	8019b88 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019b82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019b86:	e054      	b.n	8019c32 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019b88:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019b8c:	2b09      	cmp	r3, #9
 8019b8e:	dd06      	ble.n	8019b9e <etharp_find_entry+0x236>
 8019b90:	4b2b      	ldr	r3, [pc, #172]	@ (8019c40 <etharp_find_entry+0x2d8>)
 8019b92:	f240 127f 	movw	r2, #383	@ 0x17f
 8019b96:	492e      	ldr	r1, [pc, #184]	@ (8019c50 <etharp_find_entry+0x2e8>)
 8019b98:	482b      	ldr	r0, [pc, #172]	@ (8019c48 <etharp_find_entry+0x2e0>)
 8019b9a:	f002 fd59 	bl	801c650 <iprintf>
    etharp_free_entry(i);
 8019b9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f7ff fdd8 	bl	8019758 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019ba8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8019bac:	2b09      	cmp	r3, #9
 8019bae:	dd06      	ble.n	8019bbe <etharp_find_entry+0x256>
 8019bb0:	4b23      	ldr	r3, [pc, #140]	@ (8019c40 <etharp_find_entry+0x2d8>)
 8019bb2:	f240 1283 	movw	r2, #387	@ 0x183
 8019bb6:	4926      	ldr	r1, [pc, #152]	@ (8019c50 <etharp_find_entry+0x2e8>)
 8019bb8:	4823      	ldr	r0, [pc, #140]	@ (8019c48 <etharp_find_entry+0x2e0>)
 8019bba:	f002 fd49 	bl	801c650 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019bbe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019bc2:	491e      	ldr	r1, [pc, #120]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019bc4:	4613      	mov	r3, r2
 8019bc6:	005b      	lsls	r3, r3, #1
 8019bc8:	4413      	add	r3, r2
 8019bca:	00db      	lsls	r3, r3, #3
 8019bcc:	440b      	add	r3, r1
 8019bce:	3314      	adds	r3, #20
 8019bd0:	781b      	ldrb	r3, [r3, #0]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d006      	beq.n	8019be4 <etharp_find_entry+0x27c>
 8019bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8019c40 <etharp_find_entry+0x2d8>)
 8019bd8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8019bdc:	491d      	ldr	r1, [pc, #116]	@ (8019c54 <etharp_find_entry+0x2ec>)
 8019bde:	481a      	ldr	r0, [pc, #104]	@ (8019c48 <etharp_find_entry+0x2e0>)
 8019be0:	f002 fd36 	bl	801c650 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d00b      	beq.n	8019c02 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019bea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	6819      	ldr	r1, [r3, #0]
 8019bf2:	4812      	ldr	r0, [pc, #72]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019bf4:	4613      	mov	r3, r2
 8019bf6:	005b      	lsls	r3, r3, #1
 8019bf8:	4413      	add	r3, r2
 8019bfa:	00db      	lsls	r3, r3, #3
 8019bfc:	4403      	add	r3, r0
 8019bfe:	3304      	adds	r3, #4
 8019c00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019c02:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019c06:	490d      	ldr	r1, [pc, #52]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019c08:	4613      	mov	r3, r2
 8019c0a:	005b      	lsls	r3, r3, #1
 8019c0c:	4413      	add	r3, r2
 8019c0e:	00db      	lsls	r3, r3, #3
 8019c10:	440b      	add	r3, r1
 8019c12:	3312      	adds	r3, #18
 8019c14:	2200      	movs	r2, #0
 8019c16:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019c18:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8019c1c:	4907      	ldr	r1, [pc, #28]	@ (8019c3c <etharp_find_entry+0x2d4>)
 8019c1e:	4613      	mov	r3, r2
 8019c20:	005b      	lsls	r3, r3, #1
 8019c22:	4413      	add	r3, r2
 8019c24:	00db      	lsls	r3, r3, #3
 8019c26:	440b      	add	r3, r1
 8019c28:	3308      	adds	r3, #8
 8019c2a:	687a      	ldr	r2, [r7, #4]
 8019c2c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019c2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8019c32:	4618      	mov	r0, r3
 8019c34:	3728      	adds	r7, #40	@ 0x28
 8019c36:	46bd      	mov	sp, r7
 8019c38:	bd80      	pop	{r7, pc}
 8019c3a:	bf00      	nop
 8019c3c:	20022800 	.word	0x20022800
 8019c40:	08020d6c 	.word	0x08020d6c
 8019c44:	08020da4 	.word	0x08020da4
 8019c48:	08020de4 	.word	0x08020de4
 8019c4c:	08020e0c 	.word	0x08020e0c
 8019c50:	08020e24 	.word	0x08020e24
 8019c54:	08020e38 	.word	0x08020e38

08019c58 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b088      	sub	sp, #32
 8019c5c:	af02      	add	r7, sp, #8
 8019c5e:	60f8      	str	r0, [r7, #12]
 8019c60:	60b9      	str	r1, [r7, #8]
 8019c62:	607a      	str	r2, [r7, #4]
 8019c64:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019c6c:	2b06      	cmp	r3, #6
 8019c6e:	d006      	beq.n	8019c7e <etharp_update_arp_entry+0x26>
 8019c70:	4b48      	ldr	r3, [pc, #288]	@ (8019d94 <etharp_update_arp_entry+0x13c>)
 8019c72:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8019c76:	4948      	ldr	r1, [pc, #288]	@ (8019d98 <etharp_update_arp_entry+0x140>)
 8019c78:	4848      	ldr	r0, [pc, #288]	@ (8019d9c <etharp_update_arp_entry+0x144>)
 8019c7a:	f002 fce9 	bl	801c650 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019c7e:	68bb      	ldr	r3, [r7, #8]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d012      	beq.n	8019caa <etharp_update_arp_entry+0x52>
 8019c84:	68bb      	ldr	r3, [r7, #8]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d00e      	beq.n	8019caa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	68f9      	ldr	r1, [r7, #12]
 8019c92:	4618      	mov	r0, r3
 8019c94:	f001 f990 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 8019c98:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d105      	bne.n	8019caa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019c9e:	68bb      	ldr	r3, [r7, #8]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019ca6:	2be0      	cmp	r3, #224	@ 0xe0
 8019ca8:	d102      	bne.n	8019cb0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019caa:	f06f 030f 	mvn.w	r3, #15
 8019cae:	e06c      	b.n	8019d8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019cb0:	78fb      	ldrb	r3, [r7, #3]
 8019cb2:	68fa      	ldr	r2, [r7, #12]
 8019cb4:	4619      	mov	r1, r3
 8019cb6:	68b8      	ldr	r0, [r7, #8]
 8019cb8:	f7ff fe56 	bl	8019968 <etharp_find_entry>
 8019cbc:	4603      	mov	r3, r0
 8019cbe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019cc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	da02      	bge.n	8019cce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019cc8:	8afb      	ldrh	r3, [r7, #22]
 8019cca:	b25b      	sxtb	r3, r3
 8019ccc:	e05d      	b.n	8019d8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019cce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019cd2:	4933      	ldr	r1, [pc, #204]	@ (8019da0 <etharp_update_arp_entry+0x148>)
 8019cd4:	4613      	mov	r3, r2
 8019cd6:	005b      	lsls	r3, r3, #1
 8019cd8:	4413      	add	r3, r2
 8019cda:	00db      	lsls	r3, r3, #3
 8019cdc:	440b      	add	r3, r1
 8019cde:	3314      	adds	r3, #20
 8019ce0:	2202      	movs	r2, #2
 8019ce2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019ce4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019ce8:	492d      	ldr	r1, [pc, #180]	@ (8019da0 <etharp_update_arp_entry+0x148>)
 8019cea:	4613      	mov	r3, r2
 8019cec:	005b      	lsls	r3, r3, #1
 8019cee:	4413      	add	r3, r2
 8019cf0:	00db      	lsls	r3, r3, #3
 8019cf2:	440b      	add	r3, r1
 8019cf4:	3308      	adds	r3, #8
 8019cf6:	68fa      	ldr	r2, [r7, #12]
 8019cf8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019cfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019cfe:	4613      	mov	r3, r2
 8019d00:	005b      	lsls	r3, r3, #1
 8019d02:	4413      	add	r3, r2
 8019d04:	00db      	lsls	r3, r3, #3
 8019d06:	3308      	adds	r3, #8
 8019d08:	4a25      	ldr	r2, [pc, #148]	@ (8019da0 <etharp_update_arp_entry+0x148>)
 8019d0a:	4413      	add	r3, r2
 8019d0c:	3304      	adds	r3, #4
 8019d0e:	2206      	movs	r2, #6
 8019d10:	6879      	ldr	r1, [r7, #4]
 8019d12:	4618      	mov	r0, r3
 8019d14:	f002 fe71 	bl	801c9fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019d18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019d1c:	4920      	ldr	r1, [pc, #128]	@ (8019da0 <etharp_update_arp_entry+0x148>)
 8019d1e:	4613      	mov	r3, r2
 8019d20:	005b      	lsls	r3, r3, #1
 8019d22:	4413      	add	r3, r2
 8019d24:	00db      	lsls	r3, r3, #3
 8019d26:	440b      	add	r3, r1
 8019d28:	3312      	adds	r3, #18
 8019d2a:	2200      	movs	r2, #0
 8019d2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019d2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019d32:	491b      	ldr	r1, [pc, #108]	@ (8019da0 <etharp_update_arp_entry+0x148>)
 8019d34:	4613      	mov	r3, r2
 8019d36:	005b      	lsls	r3, r3, #1
 8019d38:	4413      	add	r3, r2
 8019d3a:	00db      	lsls	r3, r3, #3
 8019d3c:	440b      	add	r3, r1
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d021      	beq.n	8019d88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019d44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019d48:	4915      	ldr	r1, [pc, #84]	@ (8019da0 <etharp_update_arp_entry+0x148>)
 8019d4a:	4613      	mov	r3, r2
 8019d4c:	005b      	lsls	r3, r3, #1
 8019d4e:	4413      	add	r3, r2
 8019d50:	00db      	lsls	r3, r3, #3
 8019d52:	440b      	add	r3, r1
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019d58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019d5c:	4910      	ldr	r1, [pc, #64]	@ (8019da0 <etharp_update_arp_entry+0x148>)
 8019d5e:	4613      	mov	r3, r2
 8019d60:	005b      	lsls	r3, r3, #1
 8019d62:	4413      	add	r3, r2
 8019d64:	00db      	lsls	r3, r3, #3
 8019d66:	440b      	add	r3, r1
 8019d68:	2200      	movs	r2, #0
 8019d6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8019d72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019d76:	9300      	str	r3, [sp, #0]
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	6939      	ldr	r1, [r7, #16]
 8019d7c:	68f8      	ldr	r0, [r7, #12]
 8019d7e:	f002 f829 	bl	801bdd4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019d82:	6938      	ldr	r0, [r7, #16]
 8019d84:	f7f8 f80a 	bl	8011d9c <pbuf_free>
  }
  return ERR_OK;
 8019d88:	2300      	movs	r3, #0
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	3718      	adds	r7, #24
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}
 8019d92:	bf00      	nop
 8019d94:	08020d6c 	.word	0x08020d6c
 8019d98:	08020e64 	.word	0x08020e64
 8019d9c:	08020de4 	.word	0x08020de4
 8019da0:	20022800 	.word	0x20022800

08019da4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b084      	sub	sp, #16
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019dac:	2300      	movs	r3, #0
 8019dae:	60fb      	str	r3, [r7, #12]
 8019db0:	e01e      	b.n	8019df0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019db2:	4913      	ldr	r1, [pc, #76]	@ (8019e00 <etharp_cleanup_netif+0x5c>)
 8019db4:	68fa      	ldr	r2, [r7, #12]
 8019db6:	4613      	mov	r3, r2
 8019db8:	005b      	lsls	r3, r3, #1
 8019dba:	4413      	add	r3, r2
 8019dbc:	00db      	lsls	r3, r3, #3
 8019dbe:	440b      	add	r3, r1
 8019dc0:	3314      	adds	r3, #20
 8019dc2:	781b      	ldrb	r3, [r3, #0]
 8019dc4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019dc6:	7afb      	ldrb	r3, [r7, #11]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d00e      	beq.n	8019dea <etharp_cleanup_netif+0x46>
 8019dcc:	490c      	ldr	r1, [pc, #48]	@ (8019e00 <etharp_cleanup_netif+0x5c>)
 8019dce:	68fa      	ldr	r2, [r7, #12]
 8019dd0:	4613      	mov	r3, r2
 8019dd2:	005b      	lsls	r3, r3, #1
 8019dd4:	4413      	add	r3, r2
 8019dd6:	00db      	lsls	r3, r3, #3
 8019dd8:	440b      	add	r3, r1
 8019dda:	3308      	adds	r3, #8
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	687a      	ldr	r2, [r7, #4]
 8019de0:	429a      	cmp	r2, r3
 8019de2:	d102      	bne.n	8019dea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019de4:	68f8      	ldr	r0, [r7, #12]
 8019de6:	f7ff fcb7 	bl	8019758 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	3301      	adds	r3, #1
 8019dee:	60fb      	str	r3, [r7, #12]
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	2b09      	cmp	r3, #9
 8019df4:	dddd      	ble.n	8019db2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8019df6:	bf00      	nop
 8019df8:	bf00      	nop
 8019dfa:	3710      	adds	r7, #16
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}
 8019e00:	20022800 	.word	0x20022800

08019e04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019e04:	b5b0      	push	{r4, r5, r7, lr}
 8019e06:	b08a      	sub	sp, #40	@ 0x28
 8019e08:	af04      	add	r7, sp, #16
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d107      	bne.n	8019e24 <etharp_input+0x20>
 8019e14:	4b3d      	ldr	r3, [pc, #244]	@ (8019f0c <etharp_input+0x108>)
 8019e16:	f240 228a 	movw	r2, #650	@ 0x28a
 8019e1a:	493d      	ldr	r1, [pc, #244]	@ (8019f10 <etharp_input+0x10c>)
 8019e1c:	483d      	ldr	r0, [pc, #244]	@ (8019f14 <etharp_input+0x110>)
 8019e1e:	f002 fc17 	bl	801c650 <iprintf>
 8019e22:	e06f      	b.n	8019f04 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	685b      	ldr	r3, [r3, #4]
 8019e28:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019e2a:	697b      	ldr	r3, [r7, #20]
 8019e2c:	881b      	ldrh	r3, [r3, #0]
 8019e2e:	b29b      	uxth	r3, r3
 8019e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019e34:	d10c      	bne.n	8019e50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019e36:	697b      	ldr	r3, [r7, #20]
 8019e38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019e3a:	2b06      	cmp	r3, #6
 8019e3c:	d108      	bne.n	8019e50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019e42:	2b04      	cmp	r3, #4
 8019e44:	d104      	bne.n	8019e50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019e46:	697b      	ldr	r3, [r7, #20]
 8019e48:	885b      	ldrh	r3, [r3, #2]
 8019e4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019e4c:	2b08      	cmp	r3, #8
 8019e4e:	d003      	beq.n	8019e58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019e50:	6878      	ldr	r0, [r7, #4]
 8019e52:	f7f7 ffa3 	bl	8011d9c <pbuf_free>
    return;
 8019e56:	e055      	b.n	8019f04 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019e58:	697b      	ldr	r3, [r7, #20]
 8019e5a:	330e      	adds	r3, #14
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019e60:	697b      	ldr	r3, [r7, #20]
 8019e62:	3318      	adds	r3, #24
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019e68:	683b      	ldr	r3, [r7, #0]
 8019e6a:	3304      	adds	r3, #4
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d102      	bne.n	8019e78 <etharp_input+0x74>
    for_us = 0;
 8019e72:	2300      	movs	r3, #0
 8019e74:	74fb      	strb	r3, [r7, #19]
 8019e76:	e009      	b.n	8019e8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019e78:	68ba      	ldr	r2, [r7, #8]
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	3304      	adds	r3, #4
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	429a      	cmp	r2, r3
 8019e82:	bf0c      	ite	eq
 8019e84:	2301      	moveq	r3, #1
 8019e86:	2300      	movne	r3, #0
 8019e88:	b2db      	uxtb	r3, r3
 8019e8a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019e8c:	697b      	ldr	r3, [r7, #20]
 8019e8e:	f103 0208 	add.w	r2, r3, #8
 8019e92:	7cfb      	ldrb	r3, [r7, #19]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d001      	beq.n	8019e9c <etharp_input+0x98>
 8019e98:	2301      	movs	r3, #1
 8019e9a:	e000      	b.n	8019e9e <etharp_input+0x9a>
 8019e9c:	2302      	movs	r3, #2
 8019e9e:	f107 010c 	add.w	r1, r7, #12
 8019ea2:	6838      	ldr	r0, [r7, #0]
 8019ea4:	f7ff fed8 	bl	8019c58 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019ea8:	697b      	ldr	r3, [r7, #20]
 8019eaa:	88db      	ldrh	r3, [r3, #6]
 8019eac:	b29b      	uxth	r3, r3
 8019eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019eb2:	d003      	beq.n	8019ebc <etharp_input+0xb8>
 8019eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019eb8:	d01e      	beq.n	8019ef8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8019eba:	e020      	b.n	8019efe <etharp_input+0xfa>
      if (for_us) {
 8019ebc:	7cfb      	ldrb	r3, [r7, #19]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d01c      	beq.n	8019efc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019ec2:	683b      	ldr	r3, [r7, #0]
 8019ec4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8019ec8:	697b      	ldr	r3, [r7, #20]
 8019eca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8019ed4:	683b      	ldr	r3, [r7, #0]
 8019ed6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019ed8:	697a      	ldr	r2, [r7, #20]
 8019eda:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019edc:	2102      	movs	r1, #2
 8019ede:	9103      	str	r1, [sp, #12]
 8019ee0:	f107 010c 	add.w	r1, r7, #12
 8019ee4:	9102      	str	r1, [sp, #8]
 8019ee6:	9201      	str	r2, [sp, #4]
 8019ee8:	9300      	str	r3, [sp, #0]
 8019eea:	462b      	mov	r3, r5
 8019eec:	4622      	mov	r2, r4
 8019eee:	4601      	mov	r1, r0
 8019ef0:	6838      	ldr	r0, [r7, #0]
 8019ef2:	f000 faeb 	bl	801a4cc <etharp_raw>
      break;
 8019ef6:	e001      	b.n	8019efc <etharp_input+0xf8>
      break;
 8019ef8:	bf00      	nop
 8019efa:	e000      	b.n	8019efe <etharp_input+0xfa>
      break;
 8019efc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019efe:	6878      	ldr	r0, [r7, #4]
 8019f00:	f7f7 ff4c 	bl	8011d9c <pbuf_free>
}
 8019f04:	3718      	adds	r7, #24
 8019f06:	46bd      	mov	sp, r7
 8019f08:	bdb0      	pop	{r4, r5, r7, pc}
 8019f0a:	bf00      	nop
 8019f0c:	08020d6c 	.word	0x08020d6c
 8019f10:	08020ebc 	.word	0x08020ebc
 8019f14:	08020de4 	.word	0x08020de4

08019f18 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b086      	sub	sp, #24
 8019f1c:	af02      	add	r7, sp, #8
 8019f1e:	60f8      	str	r0, [r7, #12]
 8019f20:	60b9      	str	r1, [r7, #8]
 8019f22:	4613      	mov	r3, r2
 8019f24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019f26:	79fa      	ldrb	r2, [r7, #7]
 8019f28:	4944      	ldr	r1, [pc, #272]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019f2a:	4613      	mov	r3, r2
 8019f2c:	005b      	lsls	r3, r3, #1
 8019f2e:	4413      	add	r3, r2
 8019f30:	00db      	lsls	r3, r3, #3
 8019f32:	440b      	add	r3, r1
 8019f34:	3314      	adds	r3, #20
 8019f36:	781b      	ldrb	r3, [r3, #0]
 8019f38:	2b01      	cmp	r3, #1
 8019f3a:	d806      	bhi.n	8019f4a <etharp_output_to_arp_index+0x32>
 8019f3c:	4b40      	ldr	r3, [pc, #256]	@ (801a040 <etharp_output_to_arp_index+0x128>)
 8019f3e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8019f42:	4940      	ldr	r1, [pc, #256]	@ (801a044 <etharp_output_to_arp_index+0x12c>)
 8019f44:	4840      	ldr	r0, [pc, #256]	@ (801a048 <etharp_output_to_arp_index+0x130>)
 8019f46:	f002 fb83 	bl	801c650 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019f4a:	79fa      	ldrb	r2, [r7, #7]
 8019f4c:	493b      	ldr	r1, [pc, #236]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019f4e:	4613      	mov	r3, r2
 8019f50:	005b      	lsls	r3, r3, #1
 8019f52:	4413      	add	r3, r2
 8019f54:	00db      	lsls	r3, r3, #3
 8019f56:	440b      	add	r3, r1
 8019f58:	3314      	adds	r3, #20
 8019f5a:	781b      	ldrb	r3, [r3, #0]
 8019f5c:	2b02      	cmp	r3, #2
 8019f5e:	d153      	bne.n	801a008 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019f60:	79fa      	ldrb	r2, [r7, #7]
 8019f62:	4936      	ldr	r1, [pc, #216]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019f64:	4613      	mov	r3, r2
 8019f66:	005b      	lsls	r3, r3, #1
 8019f68:	4413      	add	r3, r2
 8019f6a:	00db      	lsls	r3, r3, #3
 8019f6c:	440b      	add	r3, r1
 8019f6e:	3312      	adds	r3, #18
 8019f70:	881b      	ldrh	r3, [r3, #0]
 8019f72:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8019f76:	d919      	bls.n	8019fac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019f78:	79fa      	ldrb	r2, [r7, #7]
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	005b      	lsls	r3, r3, #1
 8019f7e:	4413      	add	r3, r2
 8019f80:	00db      	lsls	r3, r3, #3
 8019f82:	4a2e      	ldr	r2, [pc, #184]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019f84:	4413      	add	r3, r2
 8019f86:	3304      	adds	r3, #4
 8019f88:	4619      	mov	r1, r3
 8019f8a:	68f8      	ldr	r0, [r7, #12]
 8019f8c:	f000 fb4c 	bl	801a628 <etharp_request>
 8019f90:	4603      	mov	r3, r0
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d138      	bne.n	801a008 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019f96:	79fa      	ldrb	r2, [r7, #7]
 8019f98:	4928      	ldr	r1, [pc, #160]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019f9a:	4613      	mov	r3, r2
 8019f9c:	005b      	lsls	r3, r3, #1
 8019f9e:	4413      	add	r3, r2
 8019fa0:	00db      	lsls	r3, r3, #3
 8019fa2:	440b      	add	r3, r1
 8019fa4:	3314      	adds	r3, #20
 8019fa6:	2203      	movs	r2, #3
 8019fa8:	701a      	strb	r2, [r3, #0]
 8019faa:	e02d      	b.n	801a008 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019fac:	79fa      	ldrb	r2, [r7, #7]
 8019fae:	4923      	ldr	r1, [pc, #140]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019fb0:	4613      	mov	r3, r2
 8019fb2:	005b      	lsls	r3, r3, #1
 8019fb4:	4413      	add	r3, r2
 8019fb6:	00db      	lsls	r3, r3, #3
 8019fb8:	440b      	add	r3, r1
 8019fba:	3312      	adds	r3, #18
 8019fbc:	881b      	ldrh	r3, [r3, #0]
 8019fbe:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8019fc2:	d321      	bcc.n	801a008 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019fc4:	79fa      	ldrb	r2, [r7, #7]
 8019fc6:	4613      	mov	r3, r2
 8019fc8:	005b      	lsls	r3, r3, #1
 8019fca:	4413      	add	r3, r2
 8019fcc:	00db      	lsls	r3, r3, #3
 8019fce:	4a1b      	ldr	r2, [pc, #108]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019fd0:	4413      	add	r3, r2
 8019fd2:	1d19      	adds	r1, r3, #4
 8019fd4:	79fa      	ldrb	r2, [r7, #7]
 8019fd6:	4613      	mov	r3, r2
 8019fd8:	005b      	lsls	r3, r3, #1
 8019fda:	4413      	add	r3, r2
 8019fdc:	00db      	lsls	r3, r3, #3
 8019fde:	3308      	adds	r3, #8
 8019fe0:	4a16      	ldr	r2, [pc, #88]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019fe2:	4413      	add	r3, r2
 8019fe4:	3304      	adds	r3, #4
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	68f8      	ldr	r0, [r7, #12]
 8019fea:	f000 fafb 	bl	801a5e4 <etharp_request_dst>
 8019fee:	4603      	mov	r3, r0
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d109      	bne.n	801a008 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019ff4:	79fa      	ldrb	r2, [r7, #7]
 8019ff6:	4911      	ldr	r1, [pc, #68]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 8019ff8:	4613      	mov	r3, r2
 8019ffa:	005b      	lsls	r3, r3, #1
 8019ffc:	4413      	add	r3, r2
 8019ffe:	00db      	lsls	r3, r3, #3
 801a000:	440b      	add	r3, r1
 801a002:	3314      	adds	r3, #20
 801a004:	2203      	movs	r2, #3
 801a006:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801a00e:	79fa      	ldrb	r2, [r7, #7]
 801a010:	4613      	mov	r3, r2
 801a012:	005b      	lsls	r3, r3, #1
 801a014:	4413      	add	r3, r2
 801a016:	00db      	lsls	r3, r3, #3
 801a018:	3308      	adds	r3, #8
 801a01a:	4a08      	ldr	r2, [pc, #32]	@ (801a03c <etharp_output_to_arp_index+0x124>)
 801a01c:	4413      	add	r3, r2
 801a01e:	3304      	adds	r3, #4
 801a020:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a024:	9200      	str	r2, [sp, #0]
 801a026:	460a      	mov	r2, r1
 801a028:	68b9      	ldr	r1, [r7, #8]
 801a02a:	68f8      	ldr	r0, [r7, #12]
 801a02c:	f001 fed2 	bl	801bdd4 <ethernet_output>
 801a030:	4603      	mov	r3, r0
}
 801a032:	4618      	mov	r0, r3
 801a034:	3710      	adds	r7, #16
 801a036:	46bd      	mov	sp, r7
 801a038:	bd80      	pop	{r7, pc}
 801a03a:	bf00      	nop
 801a03c:	20022800 	.word	0x20022800
 801a040:	08020d6c 	.word	0x08020d6c
 801a044:	08020edc 	.word	0x08020edc
 801a048:	08020de4 	.word	0x08020de4

0801a04c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b08a      	sub	sp, #40	@ 0x28
 801a050:	af02      	add	r7, sp, #8
 801a052:	60f8      	str	r0, [r7, #12]
 801a054:	60b9      	str	r1, [r7, #8]
 801a056:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d106      	bne.n	801a070 <etharp_output+0x24>
 801a062:	4b73      	ldr	r3, [pc, #460]	@ (801a230 <etharp_output+0x1e4>)
 801a064:	f240 321e 	movw	r2, #798	@ 0x31e
 801a068:	4972      	ldr	r1, [pc, #456]	@ (801a234 <etharp_output+0x1e8>)
 801a06a:	4873      	ldr	r0, [pc, #460]	@ (801a238 <etharp_output+0x1ec>)
 801a06c:	f002 faf0 	bl	801c650 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a070:	68bb      	ldr	r3, [r7, #8]
 801a072:	2b00      	cmp	r3, #0
 801a074:	d106      	bne.n	801a084 <etharp_output+0x38>
 801a076:	4b6e      	ldr	r3, [pc, #440]	@ (801a230 <etharp_output+0x1e4>)
 801a078:	f240 321f 	movw	r2, #799	@ 0x31f
 801a07c:	496f      	ldr	r1, [pc, #444]	@ (801a23c <etharp_output+0x1f0>)
 801a07e:	486e      	ldr	r0, [pc, #440]	@ (801a238 <etharp_output+0x1ec>)
 801a080:	f002 fae6 	bl	801c650 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d106      	bne.n	801a098 <etharp_output+0x4c>
 801a08a:	4b69      	ldr	r3, [pc, #420]	@ (801a230 <etharp_output+0x1e4>)
 801a08c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a090:	496b      	ldr	r1, [pc, #428]	@ (801a240 <etharp_output+0x1f4>)
 801a092:	4869      	ldr	r0, [pc, #420]	@ (801a238 <etharp_output+0x1ec>)
 801a094:	f002 fadc 	bl	801c650 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	68f9      	ldr	r1, [r7, #12]
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f000 ff8a 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d002      	beq.n	801a0b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a0aa:	4b66      	ldr	r3, [pc, #408]	@ (801a244 <etharp_output+0x1f8>)
 801a0ac:	61fb      	str	r3, [r7, #28]
 801a0ae:	e0af      	b.n	801a210 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a0b8:	2be0      	cmp	r3, #224	@ 0xe0
 801a0ba:	d118      	bne.n	801a0ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a0bc:	2301      	movs	r3, #1
 801a0be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a0c4:	235e      	movs	r3, #94	@ 0x5e
 801a0c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	3301      	adds	r3, #1
 801a0cc:	781b      	ldrb	r3, [r3, #0]
 801a0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a0d2:	b2db      	uxtb	r3, r3
 801a0d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	3302      	adds	r3, #2
 801a0da:	781b      	ldrb	r3, [r3, #0]
 801a0dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	3303      	adds	r3, #3
 801a0e2:	781b      	ldrb	r3, [r3, #0]
 801a0e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a0e6:	f107 0310 	add.w	r3, r7, #16
 801a0ea:	61fb      	str	r3, [r7, #28]
 801a0ec:	e090      	b.n	801a210 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681a      	ldr	r2, [r3, #0]
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	3304      	adds	r3, #4
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	405a      	eors	r2, r3
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	3308      	adds	r3, #8
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	4013      	ands	r3, r2
 801a102:	2b00      	cmp	r3, #0
 801a104:	d012      	beq.n	801a12c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a10c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801a110:	4293      	cmp	r3, r2
 801a112:	d00b      	beq.n	801a12c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	330c      	adds	r3, #12
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d003      	beq.n	801a126 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	330c      	adds	r3, #12
 801a122:	61bb      	str	r3, [r7, #24]
 801a124:	e002      	b.n	801a12c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a126:	f06f 0303 	mvn.w	r3, #3
 801a12a:	e07d      	b.n	801a228 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a12c:	4b46      	ldr	r3, [pc, #280]	@ (801a248 <etharp_output+0x1fc>)
 801a12e:	781b      	ldrb	r3, [r3, #0]
 801a130:	4619      	mov	r1, r3
 801a132:	4a46      	ldr	r2, [pc, #280]	@ (801a24c <etharp_output+0x200>)
 801a134:	460b      	mov	r3, r1
 801a136:	005b      	lsls	r3, r3, #1
 801a138:	440b      	add	r3, r1
 801a13a:	00db      	lsls	r3, r3, #3
 801a13c:	4413      	add	r3, r2
 801a13e:	3314      	adds	r3, #20
 801a140:	781b      	ldrb	r3, [r3, #0]
 801a142:	2b01      	cmp	r3, #1
 801a144:	d925      	bls.n	801a192 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a146:	4b40      	ldr	r3, [pc, #256]	@ (801a248 <etharp_output+0x1fc>)
 801a148:	781b      	ldrb	r3, [r3, #0]
 801a14a:	4619      	mov	r1, r3
 801a14c:	4a3f      	ldr	r2, [pc, #252]	@ (801a24c <etharp_output+0x200>)
 801a14e:	460b      	mov	r3, r1
 801a150:	005b      	lsls	r3, r3, #1
 801a152:	440b      	add	r3, r1
 801a154:	00db      	lsls	r3, r3, #3
 801a156:	4413      	add	r3, r2
 801a158:	3308      	adds	r3, #8
 801a15a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a15c:	68fa      	ldr	r2, [r7, #12]
 801a15e:	429a      	cmp	r2, r3
 801a160:	d117      	bne.n	801a192 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a162:	69bb      	ldr	r3, [r7, #24]
 801a164:	681a      	ldr	r2, [r3, #0]
 801a166:	4b38      	ldr	r3, [pc, #224]	@ (801a248 <etharp_output+0x1fc>)
 801a168:	781b      	ldrb	r3, [r3, #0]
 801a16a:	4618      	mov	r0, r3
 801a16c:	4937      	ldr	r1, [pc, #220]	@ (801a24c <etharp_output+0x200>)
 801a16e:	4603      	mov	r3, r0
 801a170:	005b      	lsls	r3, r3, #1
 801a172:	4403      	add	r3, r0
 801a174:	00db      	lsls	r3, r3, #3
 801a176:	440b      	add	r3, r1
 801a178:	3304      	adds	r3, #4
 801a17a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a17c:	429a      	cmp	r2, r3
 801a17e:	d108      	bne.n	801a192 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a180:	4b31      	ldr	r3, [pc, #196]	@ (801a248 <etharp_output+0x1fc>)
 801a182:	781b      	ldrb	r3, [r3, #0]
 801a184:	461a      	mov	r2, r3
 801a186:	68b9      	ldr	r1, [r7, #8]
 801a188:	68f8      	ldr	r0, [r7, #12]
 801a18a:	f7ff fec5 	bl	8019f18 <etharp_output_to_arp_index>
 801a18e:	4603      	mov	r3, r0
 801a190:	e04a      	b.n	801a228 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a192:	2300      	movs	r3, #0
 801a194:	75fb      	strb	r3, [r7, #23]
 801a196:	e031      	b.n	801a1fc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a198:	7dfa      	ldrb	r2, [r7, #23]
 801a19a:	492c      	ldr	r1, [pc, #176]	@ (801a24c <etharp_output+0x200>)
 801a19c:	4613      	mov	r3, r2
 801a19e:	005b      	lsls	r3, r3, #1
 801a1a0:	4413      	add	r3, r2
 801a1a2:	00db      	lsls	r3, r3, #3
 801a1a4:	440b      	add	r3, r1
 801a1a6:	3314      	adds	r3, #20
 801a1a8:	781b      	ldrb	r3, [r3, #0]
 801a1aa:	2b01      	cmp	r3, #1
 801a1ac:	d923      	bls.n	801a1f6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a1ae:	7dfa      	ldrb	r2, [r7, #23]
 801a1b0:	4926      	ldr	r1, [pc, #152]	@ (801a24c <etharp_output+0x200>)
 801a1b2:	4613      	mov	r3, r2
 801a1b4:	005b      	lsls	r3, r3, #1
 801a1b6:	4413      	add	r3, r2
 801a1b8:	00db      	lsls	r3, r3, #3
 801a1ba:	440b      	add	r3, r1
 801a1bc:	3308      	adds	r3, #8
 801a1be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a1c0:	68fa      	ldr	r2, [r7, #12]
 801a1c2:	429a      	cmp	r2, r3
 801a1c4:	d117      	bne.n	801a1f6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a1c6:	69bb      	ldr	r3, [r7, #24]
 801a1c8:	6819      	ldr	r1, [r3, #0]
 801a1ca:	7dfa      	ldrb	r2, [r7, #23]
 801a1cc:	481f      	ldr	r0, [pc, #124]	@ (801a24c <etharp_output+0x200>)
 801a1ce:	4613      	mov	r3, r2
 801a1d0:	005b      	lsls	r3, r3, #1
 801a1d2:	4413      	add	r3, r2
 801a1d4:	00db      	lsls	r3, r3, #3
 801a1d6:	4403      	add	r3, r0
 801a1d8:	3304      	adds	r3, #4
 801a1da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a1dc:	4299      	cmp	r1, r3
 801a1de:	d10a      	bne.n	801a1f6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a1e0:	4a19      	ldr	r2, [pc, #100]	@ (801a248 <etharp_output+0x1fc>)
 801a1e2:	7dfb      	ldrb	r3, [r7, #23]
 801a1e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a1e6:	7dfb      	ldrb	r3, [r7, #23]
 801a1e8:	461a      	mov	r2, r3
 801a1ea:	68b9      	ldr	r1, [r7, #8]
 801a1ec:	68f8      	ldr	r0, [r7, #12]
 801a1ee:	f7ff fe93 	bl	8019f18 <etharp_output_to_arp_index>
 801a1f2:	4603      	mov	r3, r0
 801a1f4:	e018      	b.n	801a228 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a1f6:	7dfb      	ldrb	r3, [r7, #23]
 801a1f8:	3301      	adds	r3, #1
 801a1fa:	75fb      	strb	r3, [r7, #23]
 801a1fc:	7dfb      	ldrb	r3, [r7, #23]
 801a1fe:	2b09      	cmp	r3, #9
 801a200:	d9ca      	bls.n	801a198 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a202:	68ba      	ldr	r2, [r7, #8]
 801a204:	69b9      	ldr	r1, [r7, #24]
 801a206:	68f8      	ldr	r0, [r7, #12]
 801a208:	f000 f822 	bl	801a250 <etharp_query>
 801a20c:	4603      	mov	r3, r0
 801a20e:	e00b      	b.n	801a228 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a216:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a21a:	9300      	str	r3, [sp, #0]
 801a21c:	69fb      	ldr	r3, [r7, #28]
 801a21e:	68b9      	ldr	r1, [r7, #8]
 801a220:	68f8      	ldr	r0, [r7, #12]
 801a222:	f001 fdd7 	bl	801bdd4 <ethernet_output>
 801a226:	4603      	mov	r3, r0
}
 801a228:	4618      	mov	r0, r3
 801a22a:	3720      	adds	r7, #32
 801a22c:	46bd      	mov	sp, r7
 801a22e:	bd80      	pop	{r7, pc}
 801a230:	08020d6c 	.word	0x08020d6c
 801a234:	08020ebc 	.word	0x08020ebc
 801a238:	08020de4 	.word	0x08020de4
 801a23c:	08020f0c 	.word	0x08020f0c
 801a240:	08020eac 	.word	0x08020eac
 801a244:	08021b04 	.word	0x08021b04
 801a248:	200228f0 	.word	0x200228f0
 801a24c:	20022800 	.word	0x20022800

0801a250 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b08c      	sub	sp, #48	@ 0x30
 801a254:	af02      	add	r7, sp, #8
 801a256:	60f8      	str	r0, [r7, #12]
 801a258:	60b9      	str	r1, [r7, #8]
 801a25a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	3326      	adds	r3, #38	@ 0x26
 801a260:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a262:	23ff      	movs	r3, #255	@ 0xff
 801a264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801a268:	2300      	movs	r3, #0
 801a26a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	68f9      	ldr	r1, [r7, #12]
 801a272:	4618      	mov	r0, r3
 801a274:	f000 fea0 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 801a278:	4603      	mov	r3, r0
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d10c      	bne.n	801a298 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a27e:	68bb      	ldr	r3, [r7, #8]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a286:	2be0      	cmp	r3, #224	@ 0xe0
 801a288:	d006      	beq.n	801a298 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a28a:	68bb      	ldr	r3, [r7, #8]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d003      	beq.n	801a298 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d102      	bne.n	801a29e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a298:	f06f 030f 	mvn.w	r3, #15
 801a29c:	e101      	b.n	801a4a2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a29e:	68fa      	ldr	r2, [r7, #12]
 801a2a0:	2101      	movs	r1, #1
 801a2a2:	68b8      	ldr	r0, [r7, #8]
 801a2a4:	f7ff fb60 	bl	8019968 <etharp_find_entry>
 801a2a8:	4603      	mov	r3, r0
 801a2aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a2ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	da02      	bge.n	801a2ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a2b4:	8a7b      	ldrh	r3, [r7, #18]
 801a2b6:	b25b      	sxtb	r3, r3
 801a2b8:	e0f3      	b.n	801a4a2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a2ba:	8a7b      	ldrh	r3, [r7, #18]
 801a2bc:	2b7e      	cmp	r3, #126	@ 0x7e
 801a2be:	d906      	bls.n	801a2ce <etharp_query+0x7e>
 801a2c0:	4b7a      	ldr	r3, [pc, #488]	@ (801a4ac <etharp_query+0x25c>)
 801a2c2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801a2c6:	497a      	ldr	r1, [pc, #488]	@ (801a4b0 <etharp_query+0x260>)
 801a2c8:	487a      	ldr	r0, [pc, #488]	@ (801a4b4 <etharp_query+0x264>)
 801a2ca:	f002 f9c1 	bl	801c650 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a2ce:	8a7b      	ldrh	r3, [r7, #18]
 801a2d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a2d2:	7c7a      	ldrb	r2, [r7, #17]
 801a2d4:	4978      	ldr	r1, [pc, #480]	@ (801a4b8 <etharp_query+0x268>)
 801a2d6:	4613      	mov	r3, r2
 801a2d8:	005b      	lsls	r3, r3, #1
 801a2da:	4413      	add	r3, r2
 801a2dc:	00db      	lsls	r3, r3, #3
 801a2de:	440b      	add	r3, r1
 801a2e0:	3314      	adds	r3, #20
 801a2e2:	781b      	ldrb	r3, [r3, #0]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d115      	bne.n	801a314 <etharp_query+0xc4>
    is_new_entry = 1;
 801a2e8:	2301      	movs	r3, #1
 801a2ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a2ec:	7c7a      	ldrb	r2, [r7, #17]
 801a2ee:	4972      	ldr	r1, [pc, #456]	@ (801a4b8 <etharp_query+0x268>)
 801a2f0:	4613      	mov	r3, r2
 801a2f2:	005b      	lsls	r3, r3, #1
 801a2f4:	4413      	add	r3, r2
 801a2f6:	00db      	lsls	r3, r3, #3
 801a2f8:	440b      	add	r3, r1
 801a2fa:	3314      	adds	r3, #20
 801a2fc:	2201      	movs	r2, #1
 801a2fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a300:	7c7a      	ldrb	r2, [r7, #17]
 801a302:	496d      	ldr	r1, [pc, #436]	@ (801a4b8 <etharp_query+0x268>)
 801a304:	4613      	mov	r3, r2
 801a306:	005b      	lsls	r3, r3, #1
 801a308:	4413      	add	r3, r2
 801a30a:	00db      	lsls	r3, r3, #3
 801a30c:	440b      	add	r3, r1
 801a30e:	3308      	adds	r3, #8
 801a310:	68fa      	ldr	r2, [r7, #12]
 801a312:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a314:	7c7a      	ldrb	r2, [r7, #17]
 801a316:	4968      	ldr	r1, [pc, #416]	@ (801a4b8 <etharp_query+0x268>)
 801a318:	4613      	mov	r3, r2
 801a31a:	005b      	lsls	r3, r3, #1
 801a31c:	4413      	add	r3, r2
 801a31e:	00db      	lsls	r3, r3, #3
 801a320:	440b      	add	r3, r1
 801a322:	3314      	adds	r3, #20
 801a324:	781b      	ldrb	r3, [r3, #0]
 801a326:	2b01      	cmp	r3, #1
 801a328:	d011      	beq.n	801a34e <etharp_query+0xfe>
 801a32a:	7c7a      	ldrb	r2, [r7, #17]
 801a32c:	4962      	ldr	r1, [pc, #392]	@ (801a4b8 <etharp_query+0x268>)
 801a32e:	4613      	mov	r3, r2
 801a330:	005b      	lsls	r3, r3, #1
 801a332:	4413      	add	r3, r2
 801a334:	00db      	lsls	r3, r3, #3
 801a336:	440b      	add	r3, r1
 801a338:	3314      	adds	r3, #20
 801a33a:	781b      	ldrb	r3, [r3, #0]
 801a33c:	2b01      	cmp	r3, #1
 801a33e:	d806      	bhi.n	801a34e <etharp_query+0xfe>
 801a340:	4b5a      	ldr	r3, [pc, #360]	@ (801a4ac <etharp_query+0x25c>)
 801a342:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801a346:	495d      	ldr	r1, [pc, #372]	@ (801a4bc <etharp_query+0x26c>)
 801a348:	485a      	ldr	r0, [pc, #360]	@ (801a4b4 <etharp_query+0x264>)
 801a34a:	f002 f981 	bl	801c650 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a34e:	6a3b      	ldr	r3, [r7, #32]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d102      	bne.n	801a35a <etharp_query+0x10a>
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d10c      	bne.n	801a374 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a35a:	68b9      	ldr	r1, [r7, #8]
 801a35c:	68f8      	ldr	r0, [r7, #12]
 801a35e:	f000 f963 	bl	801a628 <etharp_request>
 801a362:	4603      	mov	r3, r0
 801a364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d102      	bne.n	801a374 <etharp_query+0x124>
      return result;
 801a36e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a372:	e096      	b.n	801a4a2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d106      	bne.n	801a388 <etharp_query+0x138>
 801a37a:	4b4c      	ldr	r3, [pc, #304]	@ (801a4ac <etharp_query+0x25c>)
 801a37c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801a380:	494f      	ldr	r1, [pc, #316]	@ (801a4c0 <etharp_query+0x270>)
 801a382:	484c      	ldr	r0, [pc, #304]	@ (801a4b4 <etharp_query+0x264>)
 801a384:	f002 f964 	bl	801c650 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a388:	7c7a      	ldrb	r2, [r7, #17]
 801a38a:	494b      	ldr	r1, [pc, #300]	@ (801a4b8 <etharp_query+0x268>)
 801a38c:	4613      	mov	r3, r2
 801a38e:	005b      	lsls	r3, r3, #1
 801a390:	4413      	add	r3, r2
 801a392:	00db      	lsls	r3, r3, #3
 801a394:	440b      	add	r3, r1
 801a396:	3314      	adds	r3, #20
 801a398:	781b      	ldrb	r3, [r3, #0]
 801a39a:	2b01      	cmp	r3, #1
 801a39c:	d917      	bls.n	801a3ce <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a39e:	4a49      	ldr	r2, [pc, #292]	@ (801a4c4 <etharp_query+0x274>)
 801a3a0:	7c7b      	ldrb	r3, [r7, #17]
 801a3a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a3a4:	7c7a      	ldrb	r2, [r7, #17]
 801a3a6:	4613      	mov	r3, r2
 801a3a8:	005b      	lsls	r3, r3, #1
 801a3aa:	4413      	add	r3, r2
 801a3ac:	00db      	lsls	r3, r3, #3
 801a3ae:	3308      	adds	r3, #8
 801a3b0:	4a41      	ldr	r2, [pc, #260]	@ (801a4b8 <etharp_query+0x268>)
 801a3b2:	4413      	add	r3, r2
 801a3b4:	3304      	adds	r3, #4
 801a3b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a3ba:	9200      	str	r2, [sp, #0]
 801a3bc:	697a      	ldr	r2, [r7, #20]
 801a3be:	6879      	ldr	r1, [r7, #4]
 801a3c0:	68f8      	ldr	r0, [r7, #12]
 801a3c2:	f001 fd07 	bl	801bdd4 <ethernet_output>
 801a3c6:	4603      	mov	r3, r0
 801a3c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a3cc:	e067      	b.n	801a49e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a3ce:	7c7a      	ldrb	r2, [r7, #17]
 801a3d0:	4939      	ldr	r1, [pc, #228]	@ (801a4b8 <etharp_query+0x268>)
 801a3d2:	4613      	mov	r3, r2
 801a3d4:	005b      	lsls	r3, r3, #1
 801a3d6:	4413      	add	r3, r2
 801a3d8:	00db      	lsls	r3, r3, #3
 801a3da:	440b      	add	r3, r1
 801a3dc:	3314      	adds	r3, #20
 801a3de:	781b      	ldrb	r3, [r3, #0]
 801a3e0:	2b01      	cmp	r3, #1
 801a3e2:	d15c      	bne.n	801a49e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a3ec:	e01c      	b.n	801a428 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a3ee:	69fb      	ldr	r3, [r7, #28]
 801a3f0:	895a      	ldrh	r2, [r3, #10]
 801a3f2:	69fb      	ldr	r3, [r7, #28]
 801a3f4:	891b      	ldrh	r3, [r3, #8]
 801a3f6:	429a      	cmp	r2, r3
 801a3f8:	d10a      	bne.n	801a410 <etharp_query+0x1c0>
 801a3fa:	69fb      	ldr	r3, [r7, #28]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d006      	beq.n	801a410 <etharp_query+0x1c0>
 801a402:	4b2a      	ldr	r3, [pc, #168]	@ (801a4ac <etharp_query+0x25c>)
 801a404:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801a408:	492f      	ldr	r1, [pc, #188]	@ (801a4c8 <etharp_query+0x278>)
 801a40a:	482a      	ldr	r0, [pc, #168]	@ (801a4b4 <etharp_query+0x264>)
 801a40c:	f002 f920 	bl	801c650 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a410:	69fb      	ldr	r3, [r7, #28]
 801a412:	7b1b      	ldrb	r3, [r3, #12]
 801a414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d002      	beq.n	801a422 <etharp_query+0x1d2>
        copy_needed = 1;
 801a41c:	2301      	movs	r3, #1
 801a41e:	61bb      	str	r3, [r7, #24]
        break;
 801a420:	e005      	b.n	801a42e <etharp_query+0x1de>
      }
      p = p->next;
 801a422:	69fb      	ldr	r3, [r7, #28]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a428:	69fb      	ldr	r3, [r7, #28]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d1df      	bne.n	801a3ee <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a42e:	69bb      	ldr	r3, [r7, #24]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d007      	beq.n	801a444 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a434:	687a      	ldr	r2, [r7, #4]
 801a436:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801a43a:	200e      	movs	r0, #14
 801a43c:	f7f7 ff26 	bl	801228c <pbuf_clone>
 801a440:	61f8      	str	r0, [r7, #28]
 801a442:	e004      	b.n	801a44e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a448:	69f8      	ldr	r0, [r7, #28]
 801a44a:	f7f7 fd4d 	bl	8011ee8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a44e:	69fb      	ldr	r3, [r7, #28]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d021      	beq.n	801a498 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a454:	7c7a      	ldrb	r2, [r7, #17]
 801a456:	4918      	ldr	r1, [pc, #96]	@ (801a4b8 <etharp_query+0x268>)
 801a458:	4613      	mov	r3, r2
 801a45a:	005b      	lsls	r3, r3, #1
 801a45c:	4413      	add	r3, r2
 801a45e:	00db      	lsls	r3, r3, #3
 801a460:	440b      	add	r3, r1
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d00a      	beq.n	801a47e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a468:	7c7a      	ldrb	r2, [r7, #17]
 801a46a:	4913      	ldr	r1, [pc, #76]	@ (801a4b8 <etharp_query+0x268>)
 801a46c:	4613      	mov	r3, r2
 801a46e:	005b      	lsls	r3, r3, #1
 801a470:	4413      	add	r3, r2
 801a472:	00db      	lsls	r3, r3, #3
 801a474:	440b      	add	r3, r1
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	4618      	mov	r0, r3
 801a47a:	f7f7 fc8f 	bl	8011d9c <pbuf_free>
      }
      arp_table[i].q = p;
 801a47e:	7c7a      	ldrb	r2, [r7, #17]
 801a480:	490d      	ldr	r1, [pc, #52]	@ (801a4b8 <etharp_query+0x268>)
 801a482:	4613      	mov	r3, r2
 801a484:	005b      	lsls	r3, r3, #1
 801a486:	4413      	add	r3, r2
 801a488:	00db      	lsls	r3, r3, #3
 801a48a:	440b      	add	r3, r1
 801a48c:	69fa      	ldr	r2, [r7, #28]
 801a48e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a490:	2300      	movs	r3, #0
 801a492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a496:	e002      	b.n	801a49e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a498:	23ff      	movs	r3, #255	@ 0xff
 801a49a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801a49e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	3728      	adds	r7, #40	@ 0x28
 801a4a6:	46bd      	mov	sp, r7
 801a4a8:	bd80      	pop	{r7, pc}
 801a4aa:	bf00      	nop
 801a4ac:	08020d6c 	.word	0x08020d6c
 801a4b0:	08020f18 	.word	0x08020f18
 801a4b4:	08020de4 	.word	0x08020de4
 801a4b8:	20022800 	.word	0x20022800
 801a4bc:	08020f28 	.word	0x08020f28
 801a4c0:	08020f0c 	.word	0x08020f0c
 801a4c4:	200228f0 	.word	0x200228f0
 801a4c8:	08020f50 	.word	0x08020f50

0801a4cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b08a      	sub	sp, #40	@ 0x28
 801a4d0:	af02      	add	r7, sp, #8
 801a4d2:	60f8      	str	r0, [r7, #12]
 801a4d4:	60b9      	str	r1, [r7, #8]
 801a4d6:	607a      	str	r2, [r7, #4]
 801a4d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a4da:	2300      	movs	r3, #0
 801a4dc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d106      	bne.n	801a4f2 <etharp_raw+0x26>
 801a4e4:	4b3a      	ldr	r3, [pc, #232]	@ (801a5d0 <etharp_raw+0x104>)
 801a4e6:	f240 4257 	movw	r2, #1111	@ 0x457
 801a4ea:	493a      	ldr	r1, [pc, #232]	@ (801a5d4 <etharp_raw+0x108>)
 801a4ec:	483a      	ldr	r0, [pc, #232]	@ (801a5d8 <etharp_raw+0x10c>)
 801a4ee:	f002 f8af 	bl	801c650 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a4f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a4f6:	211c      	movs	r1, #28
 801a4f8:	200e      	movs	r0, #14
 801a4fa:	f7f7 f96b 	bl	80117d4 <pbuf_alloc>
 801a4fe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a500:	69bb      	ldr	r3, [r7, #24]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d102      	bne.n	801a50c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a50a:	e05d      	b.n	801a5c8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a50c:	69bb      	ldr	r3, [r7, #24]
 801a50e:	895b      	ldrh	r3, [r3, #10]
 801a510:	2b1b      	cmp	r3, #27
 801a512:	d806      	bhi.n	801a522 <etharp_raw+0x56>
 801a514:	4b2e      	ldr	r3, [pc, #184]	@ (801a5d0 <etharp_raw+0x104>)
 801a516:	f240 4262 	movw	r2, #1122	@ 0x462
 801a51a:	4930      	ldr	r1, [pc, #192]	@ (801a5dc <etharp_raw+0x110>)
 801a51c:	482e      	ldr	r0, [pc, #184]	@ (801a5d8 <etharp_raw+0x10c>)
 801a51e:	f002 f897 	bl	801c650 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a522:	69bb      	ldr	r3, [r7, #24]
 801a524:	685b      	ldr	r3, [r3, #4]
 801a526:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a528:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a52a:	4618      	mov	r0, r3
 801a52c:	f7f5 ff52 	bl	80103d4 <lwip_htons>
 801a530:	4603      	mov	r3, r0
 801a532:	461a      	mov	r2, r3
 801a534:	697b      	ldr	r3, [r7, #20]
 801a536:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a53e:	2b06      	cmp	r3, #6
 801a540:	d006      	beq.n	801a550 <etharp_raw+0x84>
 801a542:	4b23      	ldr	r3, [pc, #140]	@ (801a5d0 <etharp_raw+0x104>)
 801a544:	f240 4269 	movw	r2, #1129	@ 0x469
 801a548:	4925      	ldr	r1, [pc, #148]	@ (801a5e0 <etharp_raw+0x114>)
 801a54a:	4823      	ldr	r0, [pc, #140]	@ (801a5d8 <etharp_raw+0x10c>)
 801a54c:	f002 f880 	bl	801c650 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a550:	697b      	ldr	r3, [r7, #20]
 801a552:	3308      	adds	r3, #8
 801a554:	2206      	movs	r2, #6
 801a556:	6839      	ldr	r1, [r7, #0]
 801a558:	4618      	mov	r0, r3
 801a55a:	f002 fa4e 	bl	801c9fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a55e:	697b      	ldr	r3, [r7, #20]
 801a560:	3312      	adds	r3, #18
 801a562:	2206      	movs	r2, #6
 801a564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a566:	4618      	mov	r0, r3
 801a568:	f002 fa47 	bl	801c9fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a56c:	697b      	ldr	r3, [r7, #20]
 801a56e:	330e      	adds	r3, #14
 801a570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a572:	6812      	ldr	r2, [r2, #0]
 801a574:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a576:	697b      	ldr	r3, [r7, #20]
 801a578:	3318      	adds	r3, #24
 801a57a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a57c:	6812      	ldr	r2, [r2, #0]
 801a57e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a580:	697b      	ldr	r3, [r7, #20]
 801a582:	2200      	movs	r2, #0
 801a584:	701a      	strb	r2, [r3, #0]
 801a586:	2200      	movs	r2, #0
 801a588:	f042 0201 	orr.w	r2, r2, #1
 801a58c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a58e:	697b      	ldr	r3, [r7, #20]
 801a590:	2200      	movs	r2, #0
 801a592:	f042 0208 	orr.w	r2, r2, #8
 801a596:	709a      	strb	r2, [r3, #2]
 801a598:	2200      	movs	r2, #0
 801a59a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a59c:	697b      	ldr	r3, [r7, #20]
 801a59e:	2206      	movs	r2, #6
 801a5a0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a5a2:	697b      	ldr	r3, [r7, #20]
 801a5a4:	2204      	movs	r2, #4
 801a5a6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a5a8:	f640 0306 	movw	r3, #2054	@ 0x806
 801a5ac:	9300      	str	r3, [sp, #0]
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	68ba      	ldr	r2, [r7, #8]
 801a5b2:	69b9      	ldr	r1, [r7, #24]
 801a5b4:	68f8      	ldr	r0, [r7, #12]
 801a5b6:	f001 fc0d 	bl	801bdd4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a5ba:	69b8      	ldr	r0, [r7, #24]
 801a5bc:	f7f7 fbee 	bl	8011d9c <pbuf_free>
  p = NULL;
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a5c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	3720      	adds	r7, #32
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}
 801a5d0:	08020d6c 	.word	0x08020d6c
 801a5d4:	08020ebc 	.word	0x08020ebc
 801a5d8:	08020de4 	.word	0x08020de4
 801a5dc:	08020f6c 	.word	0x08020f6c
 801a5e0:	08020fa0 	.word	0x08020fa0

0801a5e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b088      	sub	sp, #32
 801a5e8:	af04      	add	r7, sp, #16
 801a5ea:	60f8      	str	r0, [r7, #12]
 801a5ec:	60b9      	str	r1, [r7, #8]
 801a5ee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a600:	2201      	movs	r2, #1
 801a602:	9203      	str	r2, [sp, #12]
 801a604:	68ba      	ldr	r2, [r7, #8]
 801a606:	9202      	str	r2, [sp, #8]
 801a608:	4a06      	ldr	r2, [pc, #24]	@ (801a624 <etharp_request_dst+0x40>)
 801a60a:	9201      	str	r2, [sp, #4]
 801a60c:	9300      	str	r3, [sp, #0]
 801a60e:	4603      	mov	r3, r0
 801a610:	687a      	ldr	r2, [r7, #4]
 801a612:	68f8      	ldr	r0, [r7, #12]
 801a614:	f7ff ff5a 	bl	801a4cc <etharp_raw>
 801a618:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a61a:	4618      	mov	r0, r3
 801a61c:	3710      	adds	r7, #16
 801a61e:	46bd      	mov	sp, r7
 801a620:	bd80      	pop	{r7, pc}
 801a622:	bf00      	nop
 801a624:	08021b0c 	.word	0x08021b0c

0801a628 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b082      	sub	sp, #8
 801a62c:	af00      	add	r7, sp, #0
 801a62e:	6078      	str	r0, [r7, #4]
 801a630:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a632:	4a05      	ldr	r2, [pc, #20]	@ (801a648 <etharp_request+0x20>)
 801a634:	6839      	ldr	r1, [r7, #0]
 801a636:	6878      	ldr	r0, [r7, #4]
 801a638:	f7ff ffd4 	bl	801a5e4 <etharp_request_dst>
 801a63c:	4603      	mov	r3, r0
}
 801a63e:	4618      	mov	r0, r3
 801a640:	3708      	adds	r7, #8
 801a642:	46bd      	mov	sp, r7
 801a644:	bd80      	pop	{r7, pc}
 801a646:	bf00      	nop
 801a648:	08021b04 	.word	0x08021b04

0801a64c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b08e      	sub	sp, #56	@ 0x38
 801a650:	af04      	add	r7, sp, #16
 801a652:	6078      	str	r0, [r7, #4]
 801a654:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a656:	4b95      	ldr	r3, [pc, #596]	@ (801a8ac <icmp_input+0x260>)
 801a658:	689b      	ldr	r3, [r3, #8]
 801a65a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a65e:	781b      	ldrb	r3, [r3, #0]
 801a660:	f003 030f 	and.w	r3, r3, #15
 801a664:	b2db      	uxtb	r3, r3
 801a666:	009b      	lsls	r3, r3, #2
 801a668:	b2db      	uxtb	r3, r3
 801a66a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801a66c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a66e:	2b13      	cmp	r3, #19
 801a670:	d805      	bhi.n	801a67e <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801a672:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a674:	4619      	mov	r1, r3
 801a676:	488e      	ldr	r0, [pc, #568]	@ (801a8b0 <icmp_input+0x264>)
 801a678:	f001 ffea 	bl	801c650 <iprintf>
    goto lenerr;
 801a67c:	e10a      	b.n	801a894 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	895b      	ldrh	r3, [r3, #10]
 801a682:	2b03      	cmp	r3, #3
 801a684:	d806      	bhi.n	801a694 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	891b      	ldrh	r3, [r3, #8]
 801a68a:	4619      	mov	r1, r3
 801a68c:	4889      	ldr	r0, [pc, #548]	@ (801a8b4 <icmp_input+0x268>)
 801a68e:	f001 ffdf 	bl	801c650 <iprintf>
    goto lenerr;
 801a692:	e0ff      	b.n	801a894 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	685b      	ldr	r3, [r3, #4]
 801a698:	781b      	ldrb	r3, [r3, #0]
 801a69a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	785b      	ldrb	r3, [r3, #1]
 801a6a4:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a6a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	f000 80ea 	beq.w	801a886 <icmp_input+0x23a>
 801a6b2:	2b08      	cmp	r3, #8
 801a6b4:	f040 80de 	bne.w	801a874 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a6b8:	4b7f      	ldr	r3, [pc, #508]	@ (801a8b8 <icmp_input+0x26c>)
 801a6ba:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a6bc:	4b7b      	ldr	r3, [pc, #492]	@ (801a8ac <icmp_input+0x260>)
 801a6be:	695b      	ldr	r3, [r3, #20]
 801a6c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a6c4:	2be0      	cmp	r3, #224	@ 0xe0
 801a6c6:	d103      	bne.n	801a6d0 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801a6c8:	487c      	ldr	r0, [pc, #496]	@ (801a8bc <icmp_input+0x270>)
 801a6ca:	f002 f831 	bl	801c730 <puts>
        goto icmperr;
 801a6ce:	e0e5      	b.n	801a89c <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a6d0:	4b76      	ldr	r3, [pc, #472]	@ (801a8ac <icmp_input+0x260>)
 801a6d2:	695b      	ldr	r3, [r3, #20]
 801a6d4:	4a75      	ldr	r2, [pc, #468]	@ (801a8ac <icmp_input+0x260>)
 801a6d6:	6812      	ldr	r2, [r2, #0]
 801a6d8:	4611      	mov	r1, r2
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f000 fc6c 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 801a6e0:	4603      	mov	r3, r0
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d003      	beq.n	801a6ee <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801a6e6:	4876      	ldr	r0, [pc, #472]	@ (801a8c0 <icmp_input+0x274>)
 801a6e8:	f002 f822 	bl	801c730 <puts>
        goto icmperr;
 801a6ec:	e0d6      	b.n	801a89c <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801a6ee:	4875      	ldr	r0, [pc, #468]	@ (801a8c4 <icmp_input+0x278>)
 801a6f0:	f002 f81e 	bl	801c730 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	891b      	ldrh	r3, [r3, #8]
 801a6f8:	2b07      	cmp	r3, #7
 801a6fa:	d803      	bhi.n	801a704 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801a6fc:	4872      	ldr	r0, [pc, #456]	@ (801a8c8 <icmp_input+0x27c>)
 801a6fe:	f002 f817 	bl	801c730 <puts>
        goto lenerr;
 801a702:	e0c7      	b.n	801a894 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a704:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a706:	330e      	adds	r3, #14
 801a708:	4619      	mov	r1, r3
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f7f7 fab0 	bl	8011c70 <pbuf_add_header>
 801a710:	4603      	mov	r3, r0
 801a712:	2b00      	cmp	r3, #0
 801a714:	d057      	beq.n	801a7c6 <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	891a      	ldrh	r2, [r3, #8]
 801a71a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a71c:	4413      	add	r3, r2
 801a71e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	891b      	ldrh	r3, [r3, #8]
 801a724:	8b7a      	ldrh	r2, [r7, #26]
 801a726:	429a      	cmp	r2, r3
 801a728:	d203      	bcs.n	801a732 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801a72a:	4868      	ldr	r0, [pc, #416]	@ (801a8cc <icmp_input+0x280>)
 801a72c:	f002 f800 	bl	801c730 <puts>
          goto icmperr;
 801a730:	e0b4      	b.n	801a89c <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a732:	8b7b      	ldrh	r3, [r7, #26]
 801a734:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a738:	4619      	mov	r1, r3
 801a73a:	200e      	movs	r0, #14
 801a73c:	f7f7 f84a 	bl	80117d4 <pbuf_alloc>
 801a740:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a742:	697b      	ldr	r3, [r7, #20]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d103      	bne.n	801a750 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801a748:	4861      	ldr	r0, [pc, #388]	@ (801a8d0 <icmp_input+0x284>)
 801a74a:	f001 fff1 	bl	801c730 <puts>
          goto icmperr;
 801a74e:	e0a5      	b.n	801a89c <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	895b      	ldrh	r3, [r3, #10]
 801a754:	461a      	mov	r2, r3
 801a756:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a758:	3308      	adds	r3, #8
 801a75a:	429a      	cmp	r2, r3
 801a75c:	d206      	bcs.n	801a76c <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801a75e:	485d      	ldr	r0, [pc, #372]	@ (801a8d4 <icmp_input+0x288>)
 801a760:	f001 ff76 	bl	801c650 <iprintf>
          pbuf_free(r);
 801a764:	6978      	ldr	r0, [r7, #20]
 801a766:	f7f7 fb19 	bl	8011d9c <pbuf_free>
          goto icmperr;
 801a76a:	e097      	b.n	801a89c <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	685b      	ldr	r3, [r3, #4]
 801a770:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a772:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a774:	4618      	mov	r0, r3
 801a776:	f002 f940 	bl	801c9fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a77a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a77c:	4619      	mov	r1, r3
 801a77e:	6978      	ldr	r0, [r7, #20]
 801a780:	f7f7 fa86 	bl	8011c90 <pbuf_remove_header>
 801a784:	4603      	mov	r3, r0
 801a786:	2b00      	cmp	r3, #0
 801a788:	d009      	beq.n	801a79e <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a78a:	4b53      	ldr	r3, [pc, #332]	@ (801a8d8 <icmp_input+0x28c>)
 801a78c:	22b6      	movs	r2, #182	@ 0xb6
 801a78e:	4953      	ldr	r1, [pc, #332]	@ (801a8dc <icmp_input+0x290>)
 801a790:	4853      	ldr	r0, [pc, #332]	@ (801a8e0 <icmp_input+0x294>)
 801a792:	f001 ff5d 	bl	801c650 <iprintf>
          pbuf_free(r);
 801a796:	6978      	ldr	r0, [r7, #20]
 801a798:	f7f7 fb00 	bl	8011d9c <pbuf_free>
          goto icmperr;
 801a79c:	e07e      	b.n	801a89c <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a79e:	6879      	ldr	r1, [r7, #4]
 801a7a0:	6978      	ldr	r0, [r7, #20]
 801a7a2:	f7f7 fc2f 	bl	8012004 <pbuf_copy>
 801a7a6:	4603      	mov	r3, r0
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d006      	beq.n	801a7ba <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801a7ac:	484d      	ldr	r0, [pc, #308]	@ (801a8e4 <icmp_input+0x298>)
 801a7ae:	f001 ff4f 	bl	801c650 <iprintf>
          pbuf_free(r);
 801a7b2:	6978      	ldr	r0, [r7, #20]
 801a7b4:	f7f7 faf2 	bl	8011d9c <pbuf_free>
          goto icmperr;
 801a7b8:	e070      	b.n	801a89c <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	f7f7 faee 	bl	8011d9c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a7c0:	697b      	ldr	r3, [r7, #20]
 801a7c2:	607b      	str	r3, [r7, #4]
 801a7c4:	e00f      	b.n	801a7e6 <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a7c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a7c8:	330e      	adds	r3, #14
 801a7ca:	4619      	mov	r1, r3
 801a7cc:	6878      	ldr	r0, [r7, #4]
 801a7ce:	f7f7 fa5f 	bl	8011c90 <pbuf_remove_header>
 801a7d2:	4603      	mov	r3, r0
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d006      	beq.n	801a7e6 <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a7d8:	4b3f      	ldr	r3, [pc, #252]	@ (801a8d8 <icmp_input+0x28c>)
 801a7da:	22c7      	movs	r2, #199	@ 0xc7
 801a7dc:	4942      	ldr	r1, [pc, #264]	@ (801a8e8 <icmp_input+0x29c>)
 801a7de:	4840      	ldr	r0, [pc, #256]	@ (801a8e0 <icmp_input+0x294>)
 801a7e0:	f001 ff36 	bl	801c650 <iprintf>
          goto icmperr;
 801a7e4:	e05a      	b.n	801a89c <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	685b      	ldr	r3, [r3, #4]
 801a7ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a7ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a7ee:	4619      	mov	r1, r3
 801a7f0:	6878      	ldr	r0, [r7, #4]
 801a7f2:	f7f7 fa3d 	bl	8011c70 <pbuf_add_header>
 801a7f6:	4603      	mov	r3, r0
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d003      	beq.n	801a804 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801a7fc:	483b      	ldr	r0, [pc, #236]	@ (801a8ec <icmp_input+0x2a0>)
 801a7fe:	f001 ff27 	bl	801c650 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a802:	e042      	b.n	801a88a <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	685b      	ldr	r3, [r3, #4]
 801a808:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a80a:	69fb      	ldr	r3, [r7, #28]
 801a80c:	681a      	ldr	r2, [r3, #0]
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a812:	4b26      	ldr	r3, [pc, #152]	@ (801a8ac <icmp_input+0x260>)
 801a814:	691a      	ldr	r2, [r3, #16]
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a81a:	693b      	ldr	r3, [r7, #16]
 801a81c:	2200      	movs	r2, #0
 801a81e:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801a820:	693b      	ldr	r3, [r7, #16]
 801a822:	2200      	movs	r2, #0
 801a824:	709a      	strb	r2, [r3, #2]
 801a826:	2200      	movs	r2, #0
 801a828:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	22ff      	movs	r2, #255	@ 0xff
 801a82e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	2200      	movs	r2, #0
 801a834:	729a      	strb	r2, [r3, #10]
 801a836:	2200      	movs	r2, #0
 801a838:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	9302      	str	r3, [sp, #8]
 801a83e:	2301      	movs	r3, #1
 801a840:	9301      	str	r3, [sp, #4]
 801a842:	2300      	movs	r3, #0
 801a844:	9300      	str	r3, [sp, #0]
 801a846:	23ff      	movs	r3, #255	@ 0xff
 801a848:	2200      	movs	r2, #0
 801a84a:	69f9      	ldr	r1, [r7, #28]
 801a84c:	6878      	ldr	r0, [r7, #4]
 801a84e:	f000 fadb 	bl	801ae08 <ip4_output_if>
 801a852:	4603      	mov	r3, r0
 801a854:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801a856:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d015      	beq.n	801a88a <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801a85e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a862:	4618      	mov	r0, r3
 801a864:	f7f5 fb60 	bl	800ff28 <lwip_strerr>
 801a868:	4603      	mov	r3, r0
 801a86a:	4619      	mov	r1, r3
 801a86c:	4820      	ldr	r0, [pc, #128]	@ (801a8f0 <icmp_input+0x2a4>)
 801a86e:	f001 feef 	bl	801c650 <iprintf>
      break;
 801a872:	e00a      	b.n	801a88a <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801a874:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801a878:	f897 2020 	ldrb.w	r2, [r7, #32]
 801a87c:	4619      	mov	r1, r3
 801a87e:	481d      	ldr	r0, [pc, #116]	@ (801a8f4 <icmp_input+0x2a8>)
 801a880:	f001 fee6 	bl	801c650 <iprintf>
 801a884:	e002      	b.n	801a88c <icmp_input+0x240>
      break;
 801a886:	bf00      	nop
 801a888:	e000      	b.n	801a88c <icmp_input+0x240>
      break;
 801a88a:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a88c:	6878      	ldr	r0, [r7, #4]
 801a88e:	f7f7 fa85 	bl	8011d9c <pbuf_free>
  return;
 801a892:	e007      	b.n	801a8a4 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 801a894:	6878      	ldr	r0, [r7, #4]
 801a896:	f7f7 fa81 	bl	8011d9c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a89a:	e003      	b.n	801a8a4 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a89c:	6878      	ldr	r0, [r7, #4]
 801a89e:	f7f7 fa7d 	bl	8011d9c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a8a2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a8a4:	3728      	adds	r7, #40	@ 0x28
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}
 801a8aa:	bf00      	nop
 801a8ac:	2001f65c 	.word	0x2001f65c
 801a8b0:	08020fe4 	.word	0x08020fe4
 801a8b4:	08021018 	.word	0x08021018
 801a8b8:	2001f670 	.word	0x2001f670
 801a8bc:	08021048 	.word	0x08021048
 801a8c0:	08021074 	.word	0x08021074
 801a8c4:	080210a0 	.word	0x080210a0
 801a8c8:	080210b4 	.word	0x080210b4
 801a8cc:	080210d8 	.word	0x080210d8
 801a8d0:	08021114 	.word	0x08021114
 801a8d4:	0802113c 	.word	0x0802113c
 801a8d8:	08021164 	.word	0x08021164
 801a8dc:	0802119c 	.word	0x0802119c
 801a8e0:	080211d4 	.word	0x080211d4
 801a8e4:	080211fc 	.word	0x080211fc
 801a8e8:	08021224 	.word	0x08021224
 801a8ec:	08021258 	.word	0x08021258
 801a8f0:	0802127c 	.word	0x0802127c
 801a8f4:	080212ac 	.word	0x080212ac

0801a8f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	b082      	sub	sp, #8
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
 801a900:	460b      	mov	r3, r1
 801a902:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a904:	78fb      	ldrb	r3, [r7, #3]
 801a906:	461a      	mov	r2, r3
 801a908:	2103      	movs	r1, #3
 801a90a:	6878      	ldr	r0, [r7, #4]
 801a90c:	f000 f814 	bl	801a938 <icmp_send_response>
}
 801a910:	bf00      	nop
 801a912:	3708      	adds	r7, #8
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}

0801a918 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b082      	sub	sp, #8
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
 801a920:	460b      	mov	r3, r1
 801a922:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a924:	78fb      	ldrb	r3, [r7, #3]
 801a926:	461a      	mov	r2, r3
 801a928:	210b      	movs	r1, #11
 801a92a:	6878      	ldr	r0, [r7, #4]
 801a92c:	f000 f804 	bl	801a938 <icmp_send_response>
}
 801a930:	bf00      	nop
 801a932:	3708      	adds	r7, #8
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b08c      	sub	sp, #48	@ 0x30
 801a93c:	af04      	add	r7, sp, #16
 801a93e:	6078      	str	r0, [r7, #4]
 801a940:	460b      	mov	r3, r1
 801a942:	70fb      	strb	r3, [r7, #3]
 801a944:	4613      	mov	r3, r2
 801a946:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a948:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a94c:	2124      	movs	r1, #36	@ 0x24
 801a94e:	2022      	movs	r0, #34	@ 0x22
 801a950:	f7f6 ff40 	bl	80117d4 <pbuf_alloc>
 801a954:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a956:	69fb      	ldr	r3, [r7, #28]
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d103      	bne.n	801a964 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801a95c:	4844      	ldr	r0, [pc, #272]	@ (801aa70 <icmp_send_response+0x138>)
 801a95e:	f001 fee7 	bl	801c730 <puts>
 801a962:	e082      	b.n	801aa6a <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a964:	69fb      	ldr	r3, [r7, #28]
 801a966:	895b      	ldrh	r3, [r3, #10]
 801a968:	2b23      	cmp	r3, #35	@ 0x23
 801a96a:	d806      	bhi.n	801a97a <icmp_send_response+0x42>
 801a96c:	4b41      	ldr	r3, [pc, #260]	@ (801aa74 <icmp_send_response+0x13c>)
 801a96e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801a972:	4941      	ldr	r1, [pc, #260]	@ (801aa78 <icmp_send_response+0x140>)
 801a974:	4841      	ldr	r0, [pc, #260]	@ (801aa7c <icmp_send_response+0x144>)
 801a976:	f001 fe6b 	bl	801c650 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	685b      	ldr	r3, [r3, #4]
 801a97e:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801a980:	483f      	ldr	r0, [pc, #252]	@ (801aa80 <icmp_send_response+0x148>)
 801a982:	f001 fe65 	bl	801c650 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801a986:	69bb      	ldr	r3, [r7, #24]
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	b2db      	uxtb	r3, r3
 801a98c:	4619      	mov	r1, r3
 801a98e:	69bb      	ldr	r3, [r7, #24]
 801a990:	68db      	ldr	r3, [r3, #12]
 801a992:	0a1b      	lsrs	r3, r3, #8
 801a994:	b2db      	uxtb	r3, r3
 801a996:	461a      	mov	r2, r3
 801a998:	69bb      	ldr	r3, [r7, #24]
 801a99a:	68db      	ldr	r3, [r3, #12]
 801a99c:	0c1b      	lsrs	r3, r3, #16
 801a99e:	b2db      	uxtb	r3, r3
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	69bb      	ldr	r3, [r7, #24]
 801a9a4:	68db      	ldr	r3, [r3, #12]
 801a9a6:	0e1b      	lsrs	r3, r3, #24
 801a9a8:	b2db      	uxtb	r3, r3
 801a9aa:	9300      	str	r3, [sp, #0]
 801a9ac:	4603      	mov	r3, r0
 801a9ae:	4835      	ldr	r0, [pc, #212]	@ (801aa84 <icmp_send_response+0x14c>)
 801a9b0:	f001 fe4e 	bl	801c650 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801a9b4:	4834      	ldr	r0, [pc, #208]	@ (801aa88 <icmp_send_response+0x150>)
 801a9b6:	f001 fe4b 	bl	801c650 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801a9ba:	69bb      	ldr	r3, [r7, #24]
 801a9bc:	691b      	ldr	r3, [r3, #16]
 801a9be:	b2db      	uxtb	r3, r3
 801a9c0:	4619      	mov	r1, r3
 801a9c2:	69bb      	ldr	r3, [r7, #24]
 801a9c4:	691b      	ldr	r3, [r3, #16]
 801a9c6:	0a1b      	lsrs	r3, r3, #8
 801a9c8:	b2db      	uxtb	r3, r3
 801a9ca:	461a      	mov	r2, r3
 801a9cc:	69bb      	ldr	r3, [r7, #24]
 801a9ce:	691b      	ldr	r3, [r3, #16]
 801a9d0:	0c1b      	lsrs	r3, r3, #16
 801a9d2:	b2db      	uxtb	r3, r3
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	69bb      	ldr	r3, [r7, #24]
 801a9d8:	691b      	ldr	r3, [r3, #16]
 801a9da:	0e1b      	lsrs	r3, r3, #24
 801a9dc:	b2db      	uxtb	r3, r3
 801a9de:	9300      	str	r3, [sp, #0]
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	4828      	ldr	r0, [pc, #160]	@ (801aa84 <icmp_send_response+0x14c>)
 801a9e4:	f001 fe34 	bl	801c650 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801a9e8:	200a      	movs	r0, #10
 801a9ea:	f001 fe43 	bl	801c674 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a9ee:	69fb      	ldr	r3, [r7, #28]
 801a9f0:	685b      	ldr	r3, [r3, #4]
 801a9f2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a9f4:	697b      	ldr	r3, [r7, #20]
 801a9f6:	78fa      	ldrb	r2, [r7, #3]
 801a9f8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a9fa:	697b      	ldr	r3, [r7, #20]
 801a9fc:	78ba      	ldrb	r2, [r7, #2]
 801a9fe:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801aa00:	697b      	ldr	r3, [r7, #20]
 801aa02:	2200      	movs	r2, #0
 801aa04:	711a      	strb	r2, [r3, #4]
 801aa06:	2200      	movs	r2, #0
 801aa08:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801aa0a:	697b      	ldr	r3, [r7, #20]
 801aa0c:	2200      	movs	r2, #0
 801aa0e:	719a      	strb	r2, [r3, #6]
 801aa10:	2200      	movs	r2, #0
 801aa12:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801aa14:	69fb      	ldr	r3, [r7, #28]
 801aa16:	685b      	ldr	r3, [r3, #4]
 801aa18:	f103 0008 	add.w	r0, r3, #8
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	685b      	ldr	r3, [r3, #4]
 801aa20:	221c      	movs	r2, #28
 801aa22:	4619      	mov	r1, r3
 801aa24:	f001 ffe9 	bl	801c9fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801aa28:	69bb      	ldr	r3, [r7, #24]
 801aa2a:	68db      	ldr	r3, [r3, #12]
 801aa2c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801aa2e:	f107 030c 	add.w	r3, r7, #12
 801aa32:	4618      	mov	r0, r3
 801aa34:	f000 f82a 	bl	801aa8c <ip4_route>
 801aa38:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801aa3a:	693b      	ldr	r3, [r7, #16]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d011      	beq.n	801aa64 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801aa40:	697b      	ldr	r3, [r7, #20]
 801aa42:	2200      	movs	r2, #0
 801aa44:	709a      	strb	r2, [r3, #2]
 801aa46:	2200      	movs	r2, #0
 801aa48:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801aa4a:	f107 020c 	add.w	r2, r7, #12
 801aa4e:	693b      	ldr	r3, [r7, #16]
 801aa50:	9302      	str	r3, [sp, #8]
 801aa52:	2301      	movs	r3, #1
 801aa54:	9301      	str	r3, [sp, #4]
 801aa56:	2300      	movs	r3, #0
 801aa58:	9300      	str	r3, [sp, #0]
 801aa5a:	23ff      	movs	r3, #255	@ 0xff
 801aa5c:	2100      	movs	r1, #0
 801aa5e:	69f8      	ldr	r0, [r7, #28]
 801aa60:	f000 f9d2 	bl	801ae08 <ip4_output_if>
  }
  pbuf_free(q);
 801aa64:	69f8      	ldr	r0, [r7, #28]
 801aa66:	f7f7 f999 	bl	8011d9c <pbuf_free>
}
 801aa6a:	3720      	adds	r7, #32
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}
 801aa70:	080212e0 	.word	0x080212e0
 801aa74:	08021164 	.word	0x08021164
 801aa78:	08021320 	.word	0x08021320
 801aa7c:	080211d4 	.word	0x080211d4
 801aa80:	0802134c 	.word	0x0802134c
 801aa84:	08021368 	.word	0x08021368
 801aa88:	08021378 	.word	0x08021378

0801aa8c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801aa8c:	b480      	push	{r7}
 801aa8e:	b085      	sub	sp, #20
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801aa94:	4b33      	ldr	r3, [pc, #204]	@ (801ab64 <ip4_route+0xd8>)
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	60fb      	str	r3, [r7, #12]
 801aa9a:	e036      	b.n	801ab0a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aaa2:	f003 0301 	and.w	r3, r3, #1
 801aaa6:	b2db      	uxtb	r3, r3
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d02b      	beq.n	801ab04 <ip4_route+0x78>
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aab2:	089b      	lsrs	r3, r3, #2
 801aab4:	f003 0301 	and.w	r3, r3, #1
 801aab8:	b2db      	uxtb	r3, r3
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d022      	beq.n	801ab04 <ip4_route+0x78>
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	3304      	adds	r3, #4
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d01d      	beq.n	801ab04 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681a      	ldr	r2, [r3, #0]
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	3304      	adds	r3, #4
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	405a      	eors	r2, r3
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	3308      	adds	r3, #8
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	4013      	ands	r3, r2
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d101      	bne.n	801aae4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	e038      	b.n	801ab56 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801aaea:	f003 0302 	and.w	r3, r3, #2
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d108      	bne.n	801ab04 <ip4_route+0x78>
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681a      	ldr	r2, [r3, #0]
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	330c      	adds	r3, #12
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	429a      	cmp	r2, r3
 801aafe:	d101      	bne.n	801ab04 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	e028      	b.n	801ab56 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	60fb      	str	r3, [r7, #12]
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d1c5      	bne.n	801aa9c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ab10:	4b15      	ldr	r3, [pc, #84]	@ (801ab68 <ip4_route+0xdc>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d01a      	beq.n	801ab4e <ip4_route+0xc2>
 801ab18:	4b13      	ldr	r3, [pc, #76]	@ (801ab68 <ip4_route+0xdc>)
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ab20:	f003 0301 	and.w	r3, r3, #1
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d012      	beq.n	801ab4e <ip4_route+0xc2>
 801ab28:	4b0f      	ldr	r3, [pc, #60]	@ (801ab68 <ip4_route+0xdc>)
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ab30:	f003 0304 	and.w	r3, r3, #4
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d00a      	beq.n	801ab4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ab38:	4b0b      	ldr	r3, [pc, #44]	@ (801ab68 <ip4_route+0xdc>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	3304      	adds	r3, #4
 801ab3e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d004      	beq.n	801ab4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	b2db      	uxtb	r3, r3
 801ab4a:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab4c:	d101      	bne.n	801ab52 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ab4e:	2300      	movs	r3, #0
 801ab50:	e001      	b.n	801ab56 <ip4_route+0xca>
  }

  return netif_default;
 801ab52:	4b05      	ldr	r3, [pc, #20]	@ (801ab68 <ip4_route+0xdc>)
 801ab54:	681b      	ldr	r3, [r3, #0]
}
 801ab56:	4618      	mov	r0, r3
 801ab58:	3714      	adds	r7, #20
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab60:	4770      	bx	lr
 801ab62:	bf00      	nop
 801ab64:	20022790 	.word	0x20022790
 801ab68:	20022794 	.word	0x20022794

0801ab6c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b082      	sub	sp, #8
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ab7a:	f003 0301 	and.w	r3, r3, #1
 801ab7e:	b2db      	uxtb	r3, r3
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d016      	beq.n	801abb2 <ip4_input_accept+0x46>
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	3304      	adds	r3, #4
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d011      	beq.n	801abb2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ab8e:	4b0b      	ldr	r3, [pc, #44]	@ (801abbc <ip4_input_accept+0x50>)
 801ab90:	695a      	ldr	r2, [r3, #20]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	3304      	adds	r3, #4
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	429a      	cmp	r2, r3
 801ab9a:	d008      	beq.n	801abae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ab9c:	4b07      	ldr	r3, [pc, #28]	@ (801abbc <ip4_input_accept+0x50>)
 801ab9e:	695b      	ldr	r3, [r3, #20]
 801aba0:	6879      	ldr	r1, [r7, #4]
 801aba2:	4618      	mov	r0, r3
 801aba4:	f000 fa08 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 801aba8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d001      	beq.n	801abb2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801abae:	2301      	movs	r3, #1
 801abb0:	e000      	b.n	801abb4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801abb2:	2300      	movs	r3, #0
}
 801abb4:	4618      	mov	r0, r3
 801abb6:	3708      	adds	r7, #8
 801abb8:	46bd      	mov	sp, r7
 801abba:	bd80      	pop	{r7, pc}
 801abbc:	2001f65c 	.word	0x2001f65c

0801abc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b086      	sub	sp, #24
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
 801abc8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	685b      	ldr	r3, [r3, #4]
 801abce:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801abd0:	693b      	ldr	r3, [r7, #16]
 801abd2:	781b      	ldrb	r3, [r3, #0]
 801abd4:	091b      	lsrs	r3, r3, #4
 801abd6:	b2db      	uxtb	r3, r3
 801abd8:	2b04      	cmp	r3, #4
 801abda:	d004      	beq.n	801abe6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801abdc:	6878      	ldr	r0, [r7, #4]
 801abde:	f7f7 f8dd 	bl	8011d9c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801abe2:	2300      	movs	r3, #0
 801abe4:	e107      	b.n	801adf6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801abe6:	693b      	ldr	r3, [r7, #16]
 801abe8:	781b      	ldrb	r3, [r3, #0]
 801abea:	f003 030f 	and.w	r3, r3, #15
 801abee:	b2db      	uxtb	r3, r3
 801abf0:	009b      	lsls	r3, r3, #2
 801abf2:	b2db      	uxtb	r3, r3
 801abf4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801abf6:	693b      	ldr	r3, [r7, #16]
 801abf8:	885b      	ldrh	r3, [r3, #2]
 801abfa:	b29b      	uxth	r3, r3
 801abfc:	4618      	mov	r0, r3
 801abfe:	f7f5 fbe9 	bl	80103d4 <lwip_htons>
 801ac02:	4603      	mov	r3, r0
 801ac04:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	891b      	ldrh	r3, [r3, #8]
 801ac0a:	89ba      	ldrh	r2, [r7, #12]
 801ac0c:	429a      	cmp	r2, r3
 801ac0e:	d204      	bcs.n	801ac1a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801ac10:	89bb      	ldrh	r3, [r7, #12]
 801ac12:	4619      	mov	r1, r3
 801ac14:	6878      	ldr	r0, [r7, #4]
 801ac16:	f7f6 ff3b 	bl	8011a90 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	895b      	ldrh	r3, [r3, #10]
 801ac1e:	89fa      	ldrh	r2, [r7, #14]
 801ac20:	429a      	cmp	r2, r3
 801ac22:	d807      	bhi.n	801ac34 <ip4_input+0x74>
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	891b      	ldrh	r3, [r3, #8]
 801ac28:	89ba      	ldrh	r2, [r7, #12]
 801ac2a:	429a      	cmp	r2, r3
 801ac2c:	d802      	bhi.n	801ac34 <ip4_input+0x74>
 801ac2e:	89fb      	ldrh	r3, [r7, #14]
 801ac30:	2b13      	cmp	r3, #19
 801ac32:	d804      	bhi.n	801ac3e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ac34:	6878      	ldr	r0, [r7, #4]
 801ac36:	f7f7 f8b1 	bl	8011d9c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	e0db      	b.n	801adf6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ac3e:	693b      	ldr	r3, [r7, #16]
 801ac40:	691b      	ldr	r3, [r3, #16]
 801ac42:	4a6f      	ldr	r2, [pc, #444]	@ (801ae00 <ip4_input+0x240>)
 801ac44:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ac46:	693b      	ldr	r3, [r7, #16]
 801ac48:	68db      	ldr	r3, [r3, #12]
 801ac4a:	4a6d      	ldr	r2, [pc, #436]	@ (801ae00 <ip4_input+0x240>)
 801ac4c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ac4e:	4b6c      	ldr	r3, [pc, #432]	@ (801ae00 <ip4_input+0x240>)
 801ac50:	695b      	ldr	r3, [r3, #20]
 801ac52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ac56:	2be0      	cmp	r3, #224	@ 0xe0
 801ac58:	d112      	bne.n	801ac80 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ac5a:	683b      	ldr	r3, [r7, #0]
 801ac5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ac60:	f003 0301 	and.w	r3, r3, #1
 801ac64:	b2db      	uxtb	r3, r3
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d007      	beq.n	801ac7a <ip4_input+0xba>
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	3304      	adds	r3, #4
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d002      	beq.n	801ac7a <ip4_input+0xba>
      netif = inp;
 801ac74:	683b      	ldr	r3, [r7, #0]
 801ac76:	617b      	str	r3, [r7, #20]
 801ac78:	e02a      	b.n	801acd0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	617b      	str	r3, [r7, #20]
 801ac7e:	e027      	b.n	801acd0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ac80:	6838      	ldr	r0, [r7, #0]
 801ac82:	f7ff ff73 	bl	801ab6c <ip4_input_accept>
 801ac86:	4603      	mov	r3, r0
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d002      	beq.n	801ac92 <ip4_input+0xd2>
      netif = inp;
 801ac8c:	683b      	ldr	r3, [r7, #0]
 801ac8e:	617b      	str	r3, [r7, #20]
 801ac90:	e01e      	b.n	801acd0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801ac92:	2300      	movs	r3, #0
 801ac94:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ac96:	4b5a      	ldr	r3, [pc, #360]	@ (801ae00 <ip4_input+0x240>)
 801ac98:	695b      	ldr	r3, [r3, #20]
 801ac9a:	b2db      	uxtb	r3, r3
 801ac9c:	2b7f      	cmp	r3, #127	@ 0x7f
 801ac9e:	d017      	beq.n	801acd0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801aca0:	4b58      	ldr	r3, [pc, #352]	@ (801ae04 <ip4_input+0x244>)
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	617b      	str	r3, [r7, #20]
 801aca6:	e00e      	b.n	801acc6 <ip4_input+0x106>
          if (netif == inp) {
 801aca8:	697a      	ldr	r2, [r7, #20]
 801acaa:	683b      	ldr	r3, [r7, #0]
 801acac:	429a      	cmp	r2, r3
 801acae:	d006      	beq.n	801acbe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801acb0:	6978      	ldr	r0, [r7, #20]
 801acb2:	f7ff ff5b 	bl	801ab6c <ip4_input_accept>
 801acb6:	4603      	mov	r3, r0
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d108      	bne.n	801acce <ip4_input+0x10e>
 801acbc:	e000      	b.n	801acc0 <ip4_input+0x100>
            continue;
 801acbe:	bf00      	nop
        NETIF_FOREACH(netif) {
 801acc0:	697b      	ldr	r3, [r7, #20]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	617b      	str	r3, [r7, #20]
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d1ed      	bne.n	801aca8 <ip4_input+0xe8>
 801accc:	e000      	b.n	801acd0 <ip4_input+0x110>
            break;
 801acce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801acd0:	4b4b      	ldr	r3, [pc, #300]	@ (801ae00 <ip4_input+0x240>)
 801acd2:	691b      	ldr	r3, [r3, #16]
 801acd4:	6839      	ldr	r1, [r7, #0]
 801acd6:	4618      	mov	r0, r3
 801acd8:	f000 f96e 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 801acdc:	4603      	mov	r3, r0
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d105      	bne.n	801acee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ace2:	4b47      	ldr	r3, [pc, #284]	@ (801ae00 <ip4_input+0x240>)
 801ace4:	691b      	ldr	r3, [r3, #16]
 801ace6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801acea:	2be0      	cmp	r3, #224	@ 0xe0
 801acec:	d104      	bne.n	801acf8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801acee:	6878      	ldr	r0, [r7, #4]
 801acf0:	f7f7 f854 	bl	8011d9c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801acf4:	2300      	movs	r3, #0
 801acf6:	e07e      	b.n	801adf6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801acf8:	697b      	ldr	r3, [r7, #20]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d104      	bne.n	801ad08 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	f7f7 f84c 	bl	8011d9c <pbuf_free>
    return ERR_OK;
 801ad04:	2300      	movs	r3, #0
 801ad06:	e076      	b.n	801adf6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ad08:	693b      	ldr	r3, [r7, #16]
 801ad0a:	88db      	ldrh	r3, [r3, #6]
 801ad0c:	b29b      	uxth	r3, r3
 801ad0e:	461a      	mov	r2, r3
 801ad10:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801ad14:	4013      	ands	r3, r2
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d00b      	beq.n	801ad32 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ad1a:	6878      	ldr	r0, [r7, #4]
 801ad1c:	f000 fc92 	bl	801b644 <ip4_reass>
 801ad20:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d101      	bne.n	801ad2c <ip4_input+0x16c>
      return ERR_OK;
 801ad28:	2300      	movs	r3, #0
 801ad2a:	e064      	b.n	801adf6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	685b      	ldr	r3, [r3, #4]
 801ad30:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ad32:	4a33      	ldr	r2, [pc, #204]	@ (801ae00 <ip4_input+0x240>)
 801ad34:	697b      	ldr	r3, [r7, #20]
 801ad36:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ad38:	4a31      	ldr	r2, [pc, #196]	@ (801ae00 <ip4_input+0x240>)
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ad3e:	4a30      	ldr	r2, [pc, #192]	@ (801ae00 <ip4_input+0x240>)
 801ad40:	693b      	ldr	r3, [r7, #16]
 801ad42:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ad44:	693b      	ldr	r3, [r7, #16]
 801ad46:	781b      	ldrb	r3, [r3, #0]
 801ad48:	f003 030f 	and.w	r3, r3, #15
 801ad4c:	b2db      	uxtb	r3, r3
 801ad4e:	009b      	lsls	r3, r3, #2
 801ad50:	b2db      	uxtb	r3, r3
 801ad52:	461a      	mov	r2, r3
 801ad54:	4b2a      	ldr	r3, [pc, #168]	@ (801ae00 <ip4_input+0x240>)
 801ad56:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ad58:	89fb      	ldrh	r3, [r7, #14]
 801ad5a:	4619      	mov	r1, r3
 801ad5c:	6878      	ldr	r0, [r7, #4]
 801ad5e:	f7f6 ff97 	bl	8011c90 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ad62:	693b      	ldr	r3, [r7, #16]
 801ad64:	7a5b      	ldrb	r3, [r3, #9]
 801ad66:	2b11      	cmp	r3, #17
 801ad68:	d006      	beq.n	801ad78 <ip4_input+0x1b8>
 801ad6a:	2b11      	cmp	r3, #17
 801ad6c:	dc13      	bgt.n	801ad96 <ip4_input+0x1d6>
 801ad6e:	2b01      	cmp	r3, #1
 801ad70:	d00c      	beq.n	801ad8c <ip4_input+0x1cc>
 801ad72:	2b06      	cmp	r3, #6
 801ad74:	d005      	beq.n	801ad82 <ip4_input+0x1c2>
 801ad76:	e00e      	b.n	801ad96 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ad78:	6839      	ldr	r1, [r7, #0]
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	f7fd fe24 	bl	80189c8 <udp_input>
        break;
 801ad80:	e026      	b.n	801add0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ad82:	6839      	ldr	r1, [r7, #0]
 801ad84:	6878      	ldr	r0, [r7, #4]
 801ad86:	f7f9 f975 	bl	8014074 <tcp_input>
        break;
 801ad8a:	e021      	b.n	801add0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ad8c:	6839      	ldr	r1, [r7, #0]
 801ad8e:	6878      	ldr	r0, [r7, #4]
 801ad90:	f7ff fc5c 	bl	801a64c <icmp_input>
        break;
 801ad94:	e01c      	b.n	801add0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ad96:	4b1a      	ldr	r3, [pc, #104]	@ (801ae00 <ip4_input+0x240>)
 801ad98:	695b      	ldr	r3, [r3, #20]
 801ad9a:	6979      	ldr	r1, [r7, #20]
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f000 f90b 	bl	801afb8 <ip4_addr_isbroadcast_u32>
 801ada2:	4603      	mov	r3, r0
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d10f      	bne.n	801adc8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ada8:	4b15      	ldr	r3, [pc, #84]	@ (801ae00 <ip4_input+0x240>)
 801adaa:	695b      	ldr	r3, [r3, #20]
 801adac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801adb0:	2be0      	cmp	r3, #224	@ 0xe0
 801adb2:	d009      	beq.n	801adc8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801adb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801adb8:	4619      	mov	r1, r3
 801adba:	6878      	ldr	r0, [r7, #4]
 801adbc:	f7f6 ffdb 	bl	8011d76 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801adc0:	2102      	movs	r1, #2
 801adc2:	6878      	ldr	r0, [r7, #4]
 801adc4:	f7ff fd98 	bl	801a8f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801adc8:	6878      	ldr	r0, [r7, #4]
 801adca:	f7f6 ffe7 	bl	8011d9c <pbuf_free>
        break;
 801adce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801add0:	4b0b      	ldr	r3, [pc, #44]	@ (801ae00 <ip4_input+0x240>)
 801add2:	2200      	movs	r2, #0
 801add4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801add6:	4b0a      	ldr	r3, [pc, #40]	@ (801ae00 <ip4_input+0x240>)
 801add8:	2200      	movs	r2, #0
 801adda:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801addc:	4b08      	ldr	r3, [pc, #32]	@ (801ae00 <ip4_input+0x240>)
 801adde:	2200      	movs	r2, #0
 801ade0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ade2:	4b07      	ldr	r3, [pc, #28]	@ (801ae00 <ip4_input+0x240>)
 801ade4:	2200      	movs	r2, #0
 801ade6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ade8:	4b05      	ldr	r3, [pc, #20]	@ (801ae00 <ip4_input+0x240>)
 801adea:	2200      	movs	r2, #0
 801adec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801adee:	4b04      	ldr	r3, [pc, #16]	@ (801ae00 <ip4_input+0x240>)
 801adf0:	2200      	movs	r2, #0
 801adf2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801adf4:	2300      	movs	r3, #0
}
 801adf6:	4618      	mov	r0, r3
 801adf8:	3718      	adds	r7, #24
 801adfa:	46bd      	mov	sp, r7
 801adfc:	bd80      	pop	{r7, pc}
 801adfe:	bf00      	nop
 801ae00:	2001f65c 	.word	0x2001f65c
 801ae04:	20022790 	.word	0x20022790

0801ae08 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b08a      	sub	sp, #40	@ 0x28
 801ae0c:	af04      	add	r7, sp, #16
 801ae0e:	60f8      	str	r0, [r7, #12]
 801ae10:	60b9      	str	r1, [r7, #8]
 801ae12:	607a      	str	r2, [r7, #4]
 801ae14:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801ae16:	68bb      	ldr	r3, [r7, #8]
 801ae18:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d009      	beq.n	801ae34 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801ae20:	68bb      	ldr	r3, [r7, #8]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d003      	beq.n	801ae2e <ip4_output_if+0x26>
 801ae26:	68bb      	ldr	r3, [r7, #8]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d102      	bne.n	801ae34 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801ae2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae30:	3304      	adds	r3, #4
 801ae32:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801ae34:	78fa      	ldrb	r2, [r7, #3]
 801ae36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae38:	9302      	str	r3, [sp, #8]
 801ae3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801ae3e:	9301      	str	r3, [sp, #4]
 801ae40:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ae44:	9300      	str	r3, [sp, #0]
 801ae46:	4613      	mov	r3, r2
 801ae48:	687a      	ldr	r2, [r7, #4]
 801ae4a:	6979      	ldr	r1, [r7, #20]
 801ae4c:	68f8      	ldr	r0, [r7, #12]
 801ae4e:	f000 f805 	bl	801ae5c <ip4_output_if_src>
 801ae52:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ae54:	4618      	mov	r0, r3
 801ae56:	3718      	adds	r7, #24
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	bd80      	pop	{r7, pc}

0801ae5c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b088      	sub	sp, #32
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	60f8      	str	r0, [r7, #12]
 801ae64:	60b9      	str	r1, [r7, #8]
 801ae66:	607a      	str	r2, [r7, #4]
 801ae68:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	7b9b      	ldrb	r3, [r3, #14]
 801ae6e:	2b01      	cmp	r3, #1
 801ae70:	d006      	beq.n	801ae80 <ip4_output_if_src+0x24>
 801ae72:	4b4b      	ldr	r3, [pc, #300]	@ (801afa0 <ip4_output_if_src+0x144>)
 801ae74:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801ae78:	494a      	ldr	r1, [pc, #296]	@ (801afa4 <ip4_output_if_src+0x148>)
 801ae7a:	484b      	ldr	r0, [pc, #300]	@ (801afa8 <ip4_output_if_src+0x14c>)
 801ae7c:	f001 fbe8 	bl	801c650 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d060      	beq.n	801af48 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801ae86:	2314      	movs	r3, #20
 801ae88:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801ae8a:	2114      	movs	r1, #20
 801ae8c:	68f8      	ldr	r0, [r7, #12]
 801ae8e:	f7f6 feef 	bl	8011c70 <pbuf_add_header>
 801ae92:	4603      	mov	r3, r0
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d002      	beq.n	801ae9e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ae98:	f06f 0301 	mvn.w	r3, #1
 801ae9c:	e07c      	b.n	801af98 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	685b      	ldr	r3, [r3, #4]
 801aea2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	895b      	ldrh	r3, [r3, #10]
 801aea8:	2b13      	cmp	r3, #19
 801aeaa:	d806      	bhi.n	801aeba <ip4_output_if_src+0x5e>
 801aeac:	4b3c      	ldr	r3, [pc, #240]	@ (801afa0 <ip4_output_if_src+0x144>)
 801aeae:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801aeb2:	493e      	ldr	r1, [pc, #248]	@ (801afac <ip4_output_if_src+0x150>)
 801aeb4:	483c      	ldr	r0, [pc, #240]	@ (801afa8 <ip4_output_if_src+0x14c>)
 801aeb6:	f001 fbcb 	bl	801c650 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801aeba:	69fb      	ldr	r3, [r7, #28]
 801aebc:	78fa      	ldrb	r2, [r7, #3]
 801aebe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801aec0:	69fb      	ldr	r3, [r7, #28]
 801aec2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801aec6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681a      	ldr	r2, [r3, #0]
 801aecc:	69fb      	ldr	r3, [r7, #28]
 801aece:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801aed0:	8b7b      	ldrh	r3, [r7, #26]
 801aed2:	089b      	lsrs	r3, r3, #2
 801aed4:	b29b      	uxth	r3, r3
 801aed6:	b2db      	uxtb	r3, r3
 801aed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801aedc:	b2da      	uxtb	r2, r3
 801aede:	69fb      	ldr	r3, [r7, #28]
 801aee0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801aee2:	69fb      	ldr	r3, [r7, #28]
 801aee4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801aee8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	891b      	ldrh	r3, [r3, #8]
 801aeee:	4618      	mov	r0, r3
 801aef0:	f7f5 fa70 	bl	80103d4 <lwip_htons>
 801aef4:	4603      	mov	r3, r0
 801aef6:	461a      	mov	r2, r3
 801aef8:	69fb      	ldr	r3, [r7, #28]
 801aefa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801aefc:	69fb      	ldr	r3, [r7, #28]
 801aefe:	2200      	movs	r2, #0
 801af00:	719a      	strb	r2, [r3, #6]
 801af02:	2200      	movs	r2, #0
 801af04:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801af06:	4b2a      	ldr	r3, [pc, #168]	@ (801afb0 <ip4_output_if_src+0x154>)
 801af08:	881b      	ldrh	r3, [r3, #0]
 801af0a:	4618      	mov	r0, r3
 801af0c:	f7f5 fa62 	bl	80103d4 <lwip_htons>
 801af10:	4603      	mov	r3, r0
 801af12:	461a      	mov	r2, r3
 801af14:	69fb      	ldr	r3, [r7, #28]
 801af16:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801af18:	4b25      	ldr	r3, [pc, #148]	@ (801afb0 <ip4_output_if_src+0x154>)
 801af1a:	881b      	ldrh	r3, [r3, #0]
 801af1c:	3301      	adds	r3, #1
 801af1e:	b29a      	uxth	r2, r3
 801af20:	4b23      	ldr	r3, [pc, #140]	@ (801afb0 <ip4_output_if_src+0x154>)
 801af22:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801af24:	68bb      	ldr	r3, [r7, #8]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d104      	bne.n	801af34 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801af2a:	4b22      	ldr	r3, [pc, #136]	@ (801afb4 <ip4_output_if_src+0x158>)
 801af2c:	681a      	ldr	r2, [r3, #0]
 801af2e:	69fb      	ldr	r3, [r7, #28]
 801af30:	60da      	str	r2, [r3, #12]
 801af32:	e003      	b.n	801af3c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801af34:	68bb      	ldr	r3, [r7, #8]
 801af36:	681a      	ldr	r2, [r3, #0]
 801af38:	69fb      	ldr	r3, [r7, #28]
 801af3a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801af3c:	69fb      	ldr	r3, [r7, #28]
 801af3e:	2200      	movs	r2, #0
 801af40:	729a      	strb	r2, [r3, #10]
 801af42:	2200      	movs	r2, #0
 801af44:	72da      	strb	r2, [r3, #11]
 801af46:	e00f      	b.n	801af68 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	895b      	ldrh	r3, [r3, #10]
 801af4c:	2b13      	cmp	r3, #19
 801af4e:	d802      	bhi.n	801af56 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801af50:	f06f 0301 	mvn.w	r3, #1
 801af54:	e020      	b.n	801af98 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	685b      	ldr	r3, [r3, #4]
 801af5a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801af5c:	69fb      	ldr	r3, [r7, #28]
 801af5e:	691b      	ldr	r3, [r3, #16]
 801af60:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801af62:	f107 0314 	add.w	r3, r7, #20
 801af66:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d00c      	beq.n	801af8a <ip4_output_if_src+0x12e>
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	891a      	ldrh	r2, [r3, #8]
 801af74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801af78:	429a      	cmp	r2, r3
 801af7a:	d906      	bls.n	801af8a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801af7c:	687a      	ldr	r2, [r7, #4]
 801af7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801af80:	68f8      	ldr	r0, [r7, #12]
 801af82:	f000 fd53 	bl	801ba2c <ip4_frag>
 801af86:	4603      	mov	r3, r0
 801af88:	e006      	b.n	801af98 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af8c:	695b      	ldr	r3, [r3, #20]
 801af8e:	687a      	ldr	r2, [r7, #4]
 801af90:	68f9      	ldr	r1, [r7, #12]
 801af92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af94:	4798      	blx	r3
 801af96:	4603      	mov	r3, r0
}
 801af98:	4618      	mov	r0, r3
 801af9a:	3720      	adds	r7, #32
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd80      	pop	{r7, pc}
 801afa0:	08021380 	.word	0x08021380
 801afa4:	080213b4 	.word	0x080213b4
 801afa8:	080213c0 	.word	0x080213c0
 801afac:	080213e8 	.word	0x080213e8
 801afb0:	200228f2 	.word	0x200228f2
 801afb4:	08021b00 	.word	0x08021b00

0801afb8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801afb8:	b480      	push	{r7}
 801afba:	b085      	sub	sp, #20
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801afcc:	d002      	beq.n	801afd4 <ip4_addr_isbroadcast_u32+0x1c>
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d101      	bne.n	801afd8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801afd4:	2301      	movs	r3, #1
 801afd6:	e02a      	b.n	801b02e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801afd8:	683b      	ldr	r3, [r7, #0]
 801afda:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801afde:	f003 0302 	and.w	r3, r3, #2
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d101      	bne.n	801afea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801afe6:	2300      	movs	r3, #0
 801afe8:	e021      	b.n	801b02e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	3304      	adds	r3, #4
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	687a      	ldr	r2, [r7, #4]
 801aff2:	429a      	cmp	r2, r3
 801aff4:	d101      	bne.n	801affa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801aff6:	2300      	movs	r3, #0
 801aff8:	e019      	b.n	801b02e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801affa:	68fa      	ldr	r2, [r7, #12]
 801affc:	683b      	ldr	r3, [r7, #0]
 801affe:	3304      	adds	r3, #4
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	405a      	eors	r2, r3
 801b004:	683b      	ldr	r3, [r7, #0]
 801b006:	3308      	adds	r3, #8
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	4013      	ands	r3, r2
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d10d      	bne.n	801b02c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b010:	683b      	ldr	r3, [r7, #0]
 801b012:	3308      	adds	r3, #8
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	43da      	mvns	r2, r3
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	3308      	adds	r3, #8
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b024:	429a      	cmp	r2, r3
 801b026:	d101      	bne.n	801b02c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b028:	2301      	movs	r3, #1
 801b02a:	e000      	b.n	801b02e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b02c:	2300      	movs	r3, #0
  }
}
 801b02e:	4618      	mov	r0, r3
 801b030:	3714      	adds	r7, #20
 801b032:	46bd      	mov	sp, r7
 801b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b038:	4770      	bx	lr
	...

0801b03c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b084      	sub	sp, #16
 801b040:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b042:	2300      	movs	r3, #0
 801b044:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b046:	4b12      	ldr	r3, [pc, #72]	@ (801b090 <ip_reass_tmr+0x54>)
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b04c:	e018      	b.n	801b080 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	7fdb      	ldrb	r3, [r3, #31]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d00b      	beq.n	801b06e <ip_reass_tmr+0x32>
      r->timer--;
 801b056:	68fb      	ldr	r3, [r7, #12]
 801b058:	7fdb      	ldrb	r3, [r3, #31]
 801b05a:	3b01      	subs	r3, #1
 801b05c:	b2da      	uxtb	r2, r3
 801b05e:	68fb      	ldr	r3, [r7, #12]
 801b060:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	60fb      	str	r3, [r7, #12]
 801b06c:	e008      	b.n	801b080 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b078:	68b9      	ldr	r1, [r7, #8]
 801b07a:	6878      	ldr	r0, [r7, #4]
 801b07c:	f000 f80a 	bl	801b094 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d1e3      	bne.n	801b04e <ip_reass_tmr+0x12>
    }
  }
}
 801b086:	bf00      	nop
 801b088:	bf00      	nop
 801b08a:	3710      	adds	r7, #16
 801b08c:	46bd      	mov	sp, r7
 801b08e:	bd80      	pop	{r7, pc}
 801b090:	200228f4 	.word	0x200228f4

0801b094 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b094:	b580      	push	{r7, lr}
 801b096:	b088      	sub	sp, #32
 801b098:	af00      	add	r7, sp, #0
 801b09a:	6078      	str	r0, [r7, #4]
 801b09c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b09e:	2300      	movs	r3, #0
 801b0a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b0a2:	683a      	ldr	r2, [r7, #0]
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	429a      	cmp	r2, r3
 801b0a8:	d105      	bne.n	801b0b6 <ip_reass_free_complete_datagram+0x22>
 801b0aa:	4b45      	ldr	r3, [pc, #276]	@ (801b1c0 <ip_reass_free_complete_datagram+0x12c>)
 801b0ac:	22ab      	movs	r2, #171	@ 0xab
 801b0ae:	4945      	ldr	r1, [pc, #276]	@ (801b1c4 <ip_reass_free_complete_datagram+0x130>)
 801b0b0:	4845      	ldr	r0, [pc, #276]	@ (801b1c8 <ip_reass_free_complete_datagram+0x134>)
 801b0b2:	f001 facd 	bl	801c650 <iprintf>
  if (prev != NULL) {
 801b0b6:	683b      	ldr	r3, [r7, #0]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d00a      	beq.n	801b0d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b0bc:	683b      	ldr	r3, [r7, #0]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	687a      	ldr	r2, [r7, #4]
 801b0c2:	429a      	cmp	r2, r3
 801b0c4:	d005      	beq.n	801b0d2 <ip_reass_free_complete_datagram+0x3e>
 801b0c6:	4b3e      	ldr	r3, [pc, #248]	@ (801b1c0 <ip_reass_free_complete_datagram+0x12c>)
 801b0c8:	22ad      	movs	r2, #173	@ 0xad
 801b0ca:	4940      	ldr	r1, [pc, #256]	@ (801b1cc <ip_reass_free_complete_datagram+0x138>)
 801b0cc:	483e      	ldr	r0, [pc, #248]	@ (801b1c8 <ip_reass_free_complete_datagram+0x134>)
 801b0ce:	f001 fabf 	bl	801c650 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	685b      	ldr	r3, [r3, #4]
 801b0d6:	685b      	ldr	r3, [r3, #4]
 801b0d8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b0da:	697b      	ldr	r3, [r7, #20]
 801b0dc:	889b      	ldrh	r3, [r3, #4]
 801b0de:	b29b      	uxth	r3, r3
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d12a      	bne.n	801b13a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	685b      	ldr	r3, [r3, #4]
 801b0e8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	681a      	ldr	r2, [r3, #0]
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b0f2:	69bb      	ldr	r3, [r7, #24]
 801b0f4:	6858      	ldr	r0, [r3, #4]
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	3308      	adds	r3, #8
 801b0fa:	2214      	movs	r2, #20
 801b0fc:	4619      	mov	r1, r3
 801b0fe:	f001 fc7c 	bl	801c9fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b102:	2101      	movs	r1, #1
 801b104:	69b8      	ldr	r0, [r7, #24]
 801b106:	f7ff fc07 	bl	801a918 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b10a:	69b8      	ldr	r0, [r7, #24]
 801b10c:	f7f6 fed4 	bl	8011eb8 <pbuf_clen>
 801b110:	4603      	mov	r3, r0
 801b112:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b114:	8bfa      	ldrh	r2, [r7, #30]
 801b116:	8a7b      	ldrh	r3, [r7, #18]
 801b118:	4413      	add	r3, r2
 801b11a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b11e:	db05      	blt.n	801b12c <ip_reass_free_complete_datagram+0x98>
 801b120:	4b27      	ldr	r3, [pc, #156]	@ (801b1c0 <ip_reass_free_complete_datagram+0x12c>)
 801b122:	22bc      	movs	r2, #188	@ 0xbc
 801b124:	492a      	ldr	r1, [pc, #168]	@ (801b1d0 <ip_reass_free_complete_datagram+0x13c>)
 801b126:	4828      	ldr	r0, [pc, #160]	@ (801b1c8 <ip_reass_free_complete_datagram+0x134>)
 801b128:	f001 fa92 	bl	801c650 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b12c:	8bfa      	ldrh	r2, [r7, #30]
 801b12e:	8a7b      	ldrh	r3, [r7, #18]
 801b130:	4413      	add	r3, r2
 801b132:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b134:	69b8      	ldr	r0, [r7, #24]
 801b136:	f7f6 fe31 	bl	8011d9c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	685b      	ldr	r3, [r3, #4]
 801b13e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b140:	e01f      	b.n	801b182 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b142:	69bb      	ldr	r3, [r7, #24]
 801b144:	685b      	ldr	r3, [r3, #4]
 801b146:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b148:	69bb      	ldr	r3, [r7, #24]
 801b14a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b14c:	697b      	ldr	r3, [r7, #20]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b152:	68f8      	ldr	r0, [r7, #12]
 801b154:	f7f6 feb0 	bl	8011eb8 <pbuf_clen>
 801b158:	4603      	mov	r3, r0
 801b15a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b15c:	8bfa      	ldrh	r2, [r7, #30]
 801b15e:	8a7b      	ldrh	r3, [r7, #18]
 801b160:	4413      	add	r3, r2
 801b162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b166:	db05      	blt.n	801b174 <ip_reass_free_complete_datagram+0xe0>
 801b168:	4b15      	ldr	r3, [pc, #84]	@ (801b1c0 <ip_reass_free_complete_datagram+0x12c>)
 801b16a:	22cc      	movs	r2, #204	@ 0xcc
 801b16c:	4918      	ldr	r1, [pc, #96]	@ (801b1d0 <ip_reass_free_complete_datagram+0x13c>)
 801b16e:	4816      	ldr	r0, [pc, #88]	@ (801b1c8 <ip_reass_free_complete_datagram+0x134>)
 801b170:	f001 fa6e 	bl	801c650 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b174:	8bfa      	ldrh	r2, [r7, #30]
 801b176:	8a7b      	ldrh	r3, [r7, #18]
 801b178:	4413      	add	r3, r2
 801b17a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b17c:	68f8      	ldr	r0, [r7, #12]
 801b17e:	f7f6 fe0d 	bl	8011d9c <pbuf_free>
  while (p != NULL) {
 801b182:	69bb      	ldr	r3, [r7, #24]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d1dc      	bne.n	801b142 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b188:	6839      	ldr	r1, [r7, #0]
 801b18a:	6878      	ldr	r0, [r7, #4]
 801b18c:	f000 f8c2 	bl	801b314 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b190:	4b10      	ldr	r3, [pc, #64]	@ (801b1d4 <ip_reass_free_complete_datagram+0x140>)
 801b192:	881b      	ldrh	r3, [r3, #0]
 801b194:	8bfa      	ldrh	r2, [r7, #30]
 801b196:	429a      	cmp	r2, r3
 801b198:	d905      	bls.n	801b1a6 <ip_reass_free_complete_datagram+0x112>
 801b19a:	4b09      	ldr	r3, [pc, #36]	@ (801b1c0 <ip_reass_free_complete_datagram+0x12c>)
 801b19c:	22d2      	movs	r2, #210	@ 0xd2
 801b19e:	490e      	ldr	r1, [pc, #56]	@ (801b1d8 <ip_reass_free_complete_datagram+0x144>)
 801b1a0:	4809      	ldr	r0, [pc, #36]	@ (801b1c8 <ip_reass_free_complete_datagram+0x134>)
 801b1a2:	f001 fa55 	bl	801c650 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b1a6:	4b0b      	ldr	r3, [pc, #44]	@ (801b1d4 <ip_reass_free_complete_datagram+0x140>)
 801b1a8:	881a      	ldrh	r2, [r3, #0]
 801b1aa:	8bfb      	ldrh	r3, [r7, #30]
 801b1ac:	1ad3      	subs	r3, r2, r3
 801b1ae:	b29a      	uxth	r2, r3
 801b1b0:	4b08      	ldr	r3, [pc, #32]	@ (801b1d4 <ip_reass_free_complete_datagram+0x140>)
 801b1b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b1b4:	8bfb      	ldrh	r3, [r7, #30]
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3720      	adds	r7, #32
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}
 801b1be:	bf00      	nop
 801b1c0:	08021418 	.word	0x08021418
 801b1c4:	08021454 	.word	0x08021454
 801b1c8:	08021460 	.word	0x08021460
 801b1cc:	08021488 	.word	0x08021488
 801b1d0:	0802149c 	.word	0x0802149c
 801b1d4:	200228f8 	.word	0x200228f8
 801b1d8:	080214bc 	.word	0x080214bc

0801b1dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b08a      	sub	sp, #40	@ 0x28
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	6078      	str	r0, [r7, #4]
 801b1e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b1f6:	2300      	movs	r3, #0
 801b1f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b1fa:	4b28      	ldr	r3, [pc, #160]	@ (801b29c <ip_reass_remove_oldest_datagram+0xc0>)
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b200:	e030      	b.n	801b264 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b204:	695a      	ldr	r2, [r3, #20]
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	68db      	ldr	r3, [r3, #12]
 801b20a:	429a      	cmp	r2, r3
 801b20c:	d10c      	bne.n	801b228 <ip_reass_remove_oldest_datagram+0x4c>
 801b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b210:	699a      	ldr	r2, [r3, #24]
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	691b      	ldr	r3, [r3, #16]
 801b216:	429a      	cmp	r2, r3
 801b218:	d106      	bne.n	801b228 <ip_reass_remove_oldest_datagram+0x4c>
 801b21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b21c:	899a      	ldrh	r2, [r3, #12]
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	889b      	ldrh	r3, [r3, #4]
 801b222:	b29b      	uxth	r3, r3
 801b224:	429a      	cmp	r2, r3
 801b226:	d014      	beq.n	801b252 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b228:	693b      	ldr	r3, [r7, #16]
 801b22a:	3301      	adds	r3, #1
 801b22c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b22e:	6a3b      	ldr	r3, [r7, #32]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d104      	bne.n	801b23e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b236:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b238:	69fb      	ldr	r3, [r7, #28]
 801b23a:	61bb      	str	r3, [r7, #24]
 801b23c:	e009      	b.n	801b252 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b240:	7fda      	ldrb	r2, [r3, #31]
 801b242:	6a3b      	ldr	r3, [r7, #32]
 801b244:	7fdb      	ldrb	r3, [r3, #31]
 801b246:	429a      	cmp	r2, r3
 801b248:	d803      	bhi.n	801b252 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b24c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b24e:	69fb      	ldr	r3, [r7, #28]
 801b250:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d001      	beq.n	801b25e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b25c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b266:	2b00      	cmp	r3, #0
 801b268:	d1cb      	bne.n	801b202 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b26a:	6a3b      	ldr	r3, [r7, #32]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d008      	beq.n	801b282 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b270:	69b9      	ldr	r1, [r7, #24]
 801b272:	6a38      	ldr	r0, [r7, #32]
 801b274:	f7ff ff0e 	bl	801b094 <ip_reass_free_complete_datagram>
 801b278:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b27a:	697a      	ldr	r2, [r7, #20]
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	4413      	add	r3, r2
 801b280:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b282:	697a      	ldr	r2, [r7, #20]
 801b284:	683b      	ldr	r3, [r7, #0]
 801b286:	429a      	cmp	r2, r3
 801b288:	da02      	bge.n	801b290 <ip_reass_remove_oldest_datagram+0xb4>
 801b28a:	693b      	ldr	r3, [r7, #16]
 801b28c:	2b01      	cmp	r3, #1
 801b28e:	dcac      	bgt.n	801b1ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b290:	697b      	ldr	r3, [r7, #20]
}
 801b292:	4618      	mov	r0, r3
 801b294:	3728      	adds	r7, #40	@ 0x28
 801b296:	46bd      	mov	sp, r7
 801b298:	bd80      	pop	{r7, pc}
 801b29a:	bf00      	nop
 801b29c:	200228f4 	.word	0x200228f4

0801b2a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b084      	sub	sp, #16
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	6078      	str	r0, [r7, #4]
 801b2a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b2aa:	2004      	movs	r0, #4
 801b2ac:	f7f5 fd66 	bl	8010d7c <memp_malloc>
 801b2b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d110      	bne.n	801b2da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b2b8:	6839      	ldr	r1, [r7, #0]
 801b2ba:	6878      	ldr	r0, [r7, #4]
 801b2bc:	f7ff ff8e 	bl	801b1dc <ip_reass_remove_oldest_datagram>
 801b2c0:	4602      	mov	r2, r0
 801b2c2:	683b      	ldr	r3, [r7, #0]
 801b2c4:	4293      	cmp	r3, r2
 801b2c6:	dc03      	bgt.n	801b2d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b2c8:	2004      	movs	r0, #4
 801b2ca:	f7f5 fd57 	bl	8010d7c <memp_malloc>
 801b2ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d101      	bne.n	801b2da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	e016      	b.n	801b308 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b2da:	2220      	movs	r2, #32
 801b2dc:	2100      	movs	r1, #0
 801b2de:	68f8      	ldr	r0, [r7, #12]
 801b2e0:	f001 fb16 	bl	801c910 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	220f      	movs	r2, #15
 801b2e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b2ea:	4b09      	ldr	r3, [pc, #36]	@ (801b310 <ip_reass_enqueue_new_datagram+0x70>)
 801b2ec:	681a      	ldr	r2, [r3, #0]
 801b2ee:	68fb      	ldr	r3, [r7, #12]
 801b2f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b2f2:	4a07      	ldr	r2, [pc, #28]	@ (801b310 <ip_reass_enqueue_new_datagram+0x70>)
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	3308      	adds	r3, #8
 801b2fc:	2214      	movs	r2, #20
 801b2fe:	6879      	ldr	r1, [r7, #4]
 801b300:	4618      	mov	r0, r3
 801b302:	f001 fb7a 	bl	801c9fa <memcpy>
  return ipr;
 801b306:	68fb      	ldr	r3, [r7, #12]
}
 801b308:	4618      	mov	r0, r3
 801b30a:	3710      	adds	r7, #16
 801b30c:	46bd      	mov	sp, r7
 801b30e:	bd80      	pop	{r7, pc}
 801b310:	200228f4 	.word	0x200228f4

0801b314 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b314:	b580      	push	{r7, lr}
 801b316:	b082      	sub	sp, #8
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]
 801b31c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b31e:	4b10      	ldr	r3, [pc, #64]	@ (801b360 <ip_reass_dequeue_datagram+0x4c>)
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	687a      	ldr	r2, [r7, #4]
 801b324:	429a      	cmp	r2, r3
 801b326:	d104      	bne.n	801b332 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	4a0c      	ldr	r2, [pc, #48]	@ (801b360 <ip_reass_dequeue_datagram+0x4c>)
 801b32e:	6013      	str	r3, [r2, #0]
 801b330:	e00d      	b.n	801b34e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b332:	683b      	ldr	r3, [r7, #0]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d106      	bne.n	801b346 <ip_reass_dequeue_datagram+0x32>
 801b338:	4b0a      	ldr	r3, [pc, #40]	@ (801b364 <ip_reass_dequeue_datagram+0x50>)
 801b33a:	f240 1245 	movw	r2, #325	@ 0x145
 801b33e:	490a      	ldr	r1, [pc, #40]	@ (801b368 <ip_reass_dequeue_datagram+0x54>)
 801b340:	480a      	ldr	r0, [pc, #40]	@ (801b36c <ip_reass_dequeue_datagram+0x58>)
 801b342:	f001 f985 	bl	801c650 <iprintf>
    prev->next = ipr->next;
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	681a      	ldr	r2, [r3, #0]
 801b34a:	683b      	ldr	r3, [r7, #0]
 801b34c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b34e:	6879      	ldr	r1, [r7, #4]
 801b350:	2004      	movs	r0, #4
 801b352:	f7f5 fd89 	bl	8010e68 <memp_free>
}
 801b356:	bf00      	nop
 801b358:	3708      	adds	r7, #8
 801b35a:	46bd      	mov	sp, r7
 801b35c:	bd80      	pop	{r7, pc}
 801b35e:	bf00      	nop
 801b360:	200228f4 	.word	0x200228f4
 801b364:	08021418 	.word	0x08021418
 801b368:	080214e0 	.word	0x080214e0
 801b36c:	08021460 	.word	0x08021460

0801b370 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b08c      	sub	sp, #48	@ 0x30
 801b374:	af00      	add	r7, sp, #0
 801b376:	60f8      	str	r0, [r7, #12]
 801b378:	60b9      	str	r1, [r7, #8]
 801b37a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b37c:	2300      	movs	r3, #0
 801b37e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b380:	2301      	movs	r3, #1
 801b382:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b384:	68bb      	ldr	r3, [r7, #8]
 801b386:	685b      	ldr	r3, [r3, #4]
 801b388:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b38a:	69fb      	ldr	r3, [r7, #28]
 801b38c:	885b      	ldrh	r3, [r3, #2]
 801b38e:	b29b      	uxth	r3, r3
 801b390:	4618      	mov	r0, r3
 801b392:	f7f5 f81f 	bl	80103d4 <lwip_htons>
 801b396:	4603      	mov	r3, r0
 801b398:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b39a:	69fb      	ldr	r3, [r7, #28]
 801b39c:	781b      	ldrb	r3, [r3, #0]
 801b39e:	f003 030f 	and.w	r3, r3, #15
 801b3a2:	b2db      	uxtb	r3, r3
 801b3a4:	009b      	lsls	r3, r3, #2
 801b3a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b3a8:	7e7b      	ldrb	r3, [r7, #25]
 801b3aa:	b29b      	uxth	r3, r3
 801b3ac:	8b7a      	ldrh	r2, [r7, #26]
 801b3ae:	429a      	cmp	r2, r3
 801b3b0:	d202      	bcs.n	801b3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b3b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b3b6:	e135      	b.n	801b624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b3b8:	7e7b      	ldrb	r3, [r7, #25]
 801b3ba:	b29b      	uxth	r3, r3
 801b3bc:	8b7a      	ldrh	r2, [r7, #26]
 801b3be:	1ad3      	subs	r3, r2, r3
 801b3c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b3c2:	69fb      	ldr	r3, [r7, #28]
 801b3c4:	88db      	ldrh	r3, [r3, #6]
 801b3c6:	b29b      	uxth	r3, r3
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	f7f5 f803 	bl	80103d4 <lwip_htons>
 801b3ce:	4603      	mov	r3, r0
 801b3d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b3d4:	b29b      	uxth	r3, r3
 801b3d6:	00db      	lsls	r3, r3, #3
 801b3d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	685b      	ldr	r3, [r3, #4]
 801b3de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801b3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	701a      	strb	r2, [r3, #0]
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	705a      	strb	r2, [r3, #1]
 801b3ea:	2200      	movs	r2, #0
 801b3ec:	709a      	strb	r2, [r3, #2]
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3f4:	8afa      	ldrh	r2, [r7, #22]
 801b3f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b3f8:	8afa      	ldrh	r2, [r7, #22]
 801b3fa:	8b7b      	ldrh	r3, [r7, #26]
 801b3fc:	4413      	add	r3, r2
 801b3fe:	b29a      	uxth	r2, r3
 801b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b402:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b406:	88db      	ldrh	r3, [r3, #6]
 801b408:	b29b      	uxth	r3, r3
 801b40a:	8afa      	ldrh	r2, [r7, #22]
 801b40c:	429a      	cmp	r2, r3
 801b40e:	d902      	bls.n	801b416 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b414:	e106      	b.n	801b624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b416:	68fb      	ldr	r3, [r7, #12]
 801b418:	685b      	ldr	r3, [r3, #4]
 801b41a:	627b      	str	r3, [r7, #36]	@ 0x24
 801b41c:	e068      	b.n	801b4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b420:	685b      	ldr	r3, [r3, #4]
 801b422:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b426:	889b      	ldrh	r3, [r3, #4]
 801b428:	b29a      	uxth	r2, r3
 801b42a:	693b      	ldr	r3, [r7, #16]
 801b42c:	889b      	ldrh	r3, [r3, #4]
 801b42e:	b29b      	uxth	r3, r3
 801b430:	429a      	cmp	r2, r3
 801b432:	d235      	bcs.n	801b4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b438:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d020      	beq.n	801b482 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b442:	889b      	ldrh	r3, [r3, #4]
 801b444:	b29a      	uxth	r2, r3
 801b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b448:	88db      	ldrh	r3, [r3, #6]
 801b44a:	b29b      	uxth	r3, r3
 801b44c:	429a      	cmp	r2, r3
 801b44e:	d307      	bcc.n	801b460 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b452:	88db      	ldrh	r3, [r3, #6]
 801b454:	b29a      	uxth	r2, r3
 801b456:	693b      	ldr	r3, [r7, #16]
 801b458:	889b      	ldrh	r3, [r3, #4]
 801b45a:	b29b      	uxth	r3, r3
 801b45c:	429a      	cmp	r2, r3
 801b45e:	d902      	bls.n	801b466 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b464:	e0de      	b.n	801b624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b468:	68ba      	ldr	r2, [r7, #8]
 801b46a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b46e:	88db      	ldrh	r3, [r3, #6]
 801b470:	b29a      	uxth	r2, r3
 801b472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b474:	889b      	ldrh	r3, [r3, #4]
 801b476:	b29b      	uxth	r3, r3
 801b478:	429a      	cmp	r2, r3
 801b47a:	d03d      	beq.n	801b4f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b47c:	2300      	movs	r3, #0
 801b47e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b480:	e03a      	b.n	801b4f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b484:	88db      	ldrh	r3, [r3, #6]
 801b486:	b29a      	uxth	r2, r3
 801b488:	693b      	ldr	r3, [r7, #16]
 801b48a:	889b      	ldrh	r3, [r3, #4]
 801b48c:	b29b      	uxth	r3, r3
 801b48e:	429a      	cmp	r2, r3
 801b490:	d902      	bls.n	801b498 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b496:	e0c5      	b.n	801b624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	68ba      	ldr	r2, [r7, #8]
 801b49c:	605a      	str	r2, [r3, #4]
      break;
 801b49e:	e02b      	b.n	801b4f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4a2:	889b      	ldrh	r3, [r3, #4]
 801b4a4:	b29a      	uxth	r2, r3
 801b4a6:	693b      	ldr	r3, [r7, #16]
 801b4a8:	889b      	ldrh	r3, [r3, #4]
 801b4aa:	b29b      	uxth	r3, r3
 801b4ac:	429a      	cmp	r2, r3
 801b4ae:	d102      	bne.n	801b4b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b4b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b4b4:	e0b6      	b.n	801b624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b4b8:	889b      	ldrh	r3, [r3, #4]
 801b4ba:	b29a      	uxth	r2, r3
 801b4bc:	693b      	ldr	r3, [r7, #16]
 801b4be:	88db      	ldrh	r3, [r3, #6]
 801b4c0:	b29b      	uxth	r3, r3
 801b4c2:	429a      	cmp	r2, r3
 801b4c4:	d202      	bcs.n	801b4cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b4c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b4ca:	e0ab      	b.n	801b624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d009      	beq.n	801b4e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b4d4:	88db      	ldrh	r3, [r3, #6]
 801b4d6:	b29a      	uxth	r2, r3
 801b4d8:	693b      	ldr	r3, [r7, #16]
 801b4da:	889b      	ldrh	r3, [r3, #4]
 801b4dc:	b29b      	uxth	r3, r3
 801b4de:	429a      	cmp	r2, r3
 801b4e0:	d001      	beq.n	801b4e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b4e6:	693b      	ldr	r3, [r7, #16]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801b4ec:	693b      	ldr	r3, [r7, #16]
 801b4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801b4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d193      	bne.n	801b41e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b4f6:	e000      	b.n	801b4fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b4f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d12d      	bne.n	801b55c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b502:	2b00      	cmp	r3, #0
 801b504:	d01c      	beq.n	801b540 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b508:	88db      	ldrh	r3, [r3, #6]
 801b50a:	b29a      	uxth	r2, r3
 801b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b50e:	889b      	ldrh	r3, [r3, #4]
 801b510:	b29b      	uxth	r3, r3
 801b512:	429a      	cmp	r2, r3
 801b514:	d906      	bls.n	801b524 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b516:	4b45      	ldr	r3, [pc, #276]	@ (801b62c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b518:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801b51c:	4944      	ldr	r1, [pc, #272]	@ (801b630 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b51e:	4845      	ldr	r0, [pc, #276]	@ (801b634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b520:	f001 f896 	bl	801c650 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b526:	68ba      	ldr	r2, [r7, #8]
 801b528:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b52c:	88db      	ldrh	r3, [r3, #6]
 801b52e:	b29a      	uxth	r2, r3
 801b530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b532:	889b      	ldrh	r3, [r3, #4]
 801b534:	b29b      	uxth	r3, r3
 801b536:	429a      	cmp	r2, r3
 801b538:	d010      	beq.n	801b55c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b53a:	2300      	movs	r3, #0
 801b53c:	623b      	str	r3, [r7, #32]
 801b53e:	e00d      	b.n	801b55c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	685b      	ldr	r3, [r3, #4]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d006      	beq.n	801b556 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b548:	4b38      	ldr	r3, [pc, #224]	@ (801b62c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b54a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801b54e:	493a      	ldr	r1, [pc, #232]	@ (801b638 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b550:	4838      	ldr	r0, [pc, #224]	@ (801b634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b552:	f001 f87d 	bl	801c650 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	68ba      	ldr	r2, [r7, #8]
 801b55a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d105      	bne.n	801b56e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	7f9b      	ldrb	r3, [r3, #30]
 801b566:	f003 0301 	and.w	r3, r3, #1
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d059      	beq.n	801b622 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b56e:	6a3b      	ldr	r3, [r7, #32]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d04f      	beq.n	801b614 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	685b      	ldr	r3, [r3, #4]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d006      	beq.n	801b58a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	685b      	ldr	r3, [r3, #4]
 801b580:	685b      	ldr	r3, [r3, #4]
 801b582:	889b      	ldrh	r3, [r3, #4]
 801b584:	b29b      	uxth	r3, r3
 801b586:	2b00      	cmp	r3, #0
 801b588:	d002      	beq.n	801b590 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b58a:	2300      	movs	r3, #0
 801b58c:	623b      	str	r3, [r7, #32]
 801b58e:	e041      	b.n	801b614 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b592:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801b594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b59a:	e012      	b.n	801b5c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b59e:	685b      	ldr	r3, [r3, #4]
 801b5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801b5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5a4:	88db      	ldrh	r3, [r3, #6]
 801b5a6:	b29a      	uxth	r2, r3
 801b5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5aa:	889b      	ldrh	r3, [r3, #4]
 801b5ac:	b29b      	uxth	r3, r3
 801b5ae:	429a      	cmp	r2, r3
 801b5b0:	d002      	beq.n	801b5b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	623b      	str	r3, [r7, #32]
            break;
 801b5b6:	e007      	b.n	801b5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801b5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d1e9      	bne.n	801b59c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b5c8:	6a3b      	ldr	r3, [r7, #32]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d022      	beq.n	801b614 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	685b      	ldr	r3, [r3, #4]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d106      	bne.n	801b5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b5d6:	4b15      	ldr	r3, [pc, #84]	@ (801b62c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b5d8:	f240 12df 	movw	r2, #479	@ 0x1df
 801b5dc:	4917      	ldr	r1, [pc, #92]	@ (801b63c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b5de:	4815      	ldr	r0, [pc, #84]	@ (801b634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b5e0:	f001 f836 	bl	801c650 <iprintf>
          LWIP_ASSERT("sanity check",
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	685b      	ldr	r3, [r3, #4]
 801b5e8:	685b      	ldr	r3, [r3, #4]
 801b5ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b5ec:	429a      	cmp	r2, r3
 801b5ee:	d106      	bne.n	801b5fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b5f0:	4b0e      	ldr	r3, [pc, #56]	@ (801b62c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b5f2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801b5f6:	4911      	ldr	r1, [pc, #68]	@ (801b63c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b5f8:	480e      	ldr	r0, [pc, #56]	@ (801b634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b5fa:	f001 f829 	bl	801c650 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d006      	beq.n	801b614 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b606:	4b09      	ldr	r3, [pc, #36]	@ (801b62c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b608:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801b60c:	490c      	ldr	r1, [pc, #48]	@ (801b640 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b60e:	4809      	ldr	r0, [pc, #36]	@ (801b634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b610:	f001 f81e 	bl	801c650 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b614:	6a3b      	ldr	r3, [r7, #32]
 801b616:	2b00      	cmp	r3, #0
 801b618:	bf14      	ite	ne
 801b61a:	2301      	movne	r3, #1
 801b61c:	2300      	moveq	r3, #0
 801b61e:	b2db      	uxtb	r3, r3
 801b620:	e000      	b.n	801b624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b622:	2300      	movs	r3, #0
}
 801b624:	4618      	mov	r0, r3
 801b626:	3730      	adds	r7, #48	@ 0x30
 801b628:	46bd      	mov	sp, r7
 801b62a:	bd80      	pop	{r7, pc}
 801b62c:	08021418 	.word	0x08021418
 801b630:	080214fc 	.word	0x080214fc
 801b634:	08021460 	.word	0x08021460
 801b638:	0802151c 	.word	0x0802151c
 801b63c:	08021554 	.word	0x08021554
 801b640:	08021564 	.word	0x08021564

0801b644 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b644:	b580      	push	{r7, lr}
 801b646:	b08e      	sub	sp, #56	@ 0x38
 801b648:	af00      	add	r7, sp, #0
 801b64a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	685b      	ldr	r3, [r3, #4]
 801b650:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b654:	781b      	ldrb	r3, [r3, #0]
 801b656:	f003 030f 	and.w	r3, r3, #15
 801b65a:	b2db      	uxtb	r3, r3
 801b65c:	009b      	lsls	r3, r3, #2
 801b65e:	b2db      	uxtb	r3, r3
 801b660:	2b14      	cmp	r3, #20
 801b662:	f040 8171 	bne.w	801b948 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b668:	88db      	ldrh	r3, [r3, #6]
 801b66a:	b29b      	uxth	r3, r3
 801b66c:	4618      	mov	r0, r3
 801b66e:	f7f4 feb1 	bl	80103d4 <lwip_htons>
 801b672:	4603      	mov	r3, r0
 801b674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b678:	b29b      	uxth	r3, r3
 801b67a:	00db      	lsls	r3, r3, #3
 801b67c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b680:	885b      	ldrh	r3, [r3, #2]
 801b682:	b29b      	uxth	r3, r3
 801b684:	4618      	mov	r0, r3
 801b686:	f7f4 fea5 	bl	80103d4 <lwip_htons>
 801b68a:	4603      	mov	r3, r0
 801b68c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b690:	781b      	ldrb	r3, [r3, #0]
 801b692:	f003 030f 	and.w	r3, r3, #15
 801b696:	b2db      	uxtb	r3, r3
 801b698:	009b      	lsls	r3, r3, #2
 801b69a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801b69e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b6a6:	429a      	cmp	r2, r3
 801b6a8:	f0c0 8150 	bcc.w	801b94c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b6ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b6b0:	b29b      	uxth	r3, r3
 801b6b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801b6b4:	1ad3      	subs	r3, r2, r3
 801b6b6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b6b8:	6878      	ldr	r0, [r7, #4]
 801b6ba:	f7f6 fbfd 	bl	8011eb8 <pbuf_clen>
 801b6be:	4603      	mov	r3, r0
 801b6c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b6c2:	4b8c      	ldr	r3, [pc, #560]	@ (801b8f4 <ip4_reass+0x2b0>)
 801b6c4:	881b      	ldrh	r3, [r3, #0]
 801b6c6:	461a      	mov	r2, r3
 801b6c8:	8c3b      	ldrh	r3, [r7, #32]
 801b6ca:	4413      	add	r3, r2
 801b6cc:	2b0a      	cmp	r3, #10
 801b6ce:	dd10      	ble.n	801b6f2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b6d0:	8c3b      	ldrh	r3, [r7, #32]
 801b6d2:	4619      	mov	r1, r3
 801b6d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b6d6:	f7ff fd81 	bl	801b1dc <ip_reass_remove_oldest_datagram>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	f000 8137 	beq.w	801b950 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b6e2:	4b84      	ldr	r3, [pc, #528]	@ (801b8f4 <ip4_reass+0x2b0>)
 801b6e4:	881b      	ldrh	r3, [r3, #0]
 801b6e6:	461a      	mov	r2, r3
 801b6e8:	8c3b      	ldrh	r3, [r7, #32]
 801b6ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b6ec:	2b0a      	cmp	r3, #10
 801b6ee:	f300 812f 	bgt.w	801b950 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b6f2:	4b81      	ldr	r3, [pc, #516]	@ (801b8f8 <ip4_reass+0x2b4>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	633b      	str	r3, [r7, #48]	@ 0x30
 801b6f8:	e015      	b.n	801b726 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b6fc:	695a      	ldr	r2, [r3, #20]
 801b6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b700:	68db      	ldr	r3, [r3, #12]
 801b702:	429a      	cmp	r2, r3
 801b704:	d10c      	bne.n	801b720 <ip4_reass+0xdc>
 801b706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b708:	699a      	ldr	r2, [r3, #24]
 801b70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b70c:	691b      	ldr	r3, [r3, #16]
 801b70e:	429a      	cmp	r2, r3
 801b710:	d106      	bne.n	801b720 <ip4_reass+0xdc>
 801b712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b714:	899a      	ldrh	r2, [r3, #12]
 801b716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b718:	889b      	ldrh	r3, [r3, #4]
 801b71a:	b29b      	uxth	r3, r3
 801b71c:	429a      	cmp	r2, r3
 801b71e:	d006      	beq.n	801b72e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	633b      	str	r3, [r7, #48]	@ 0x30
 801b726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d1e6      	bne.n	801b6fa <ip4_reass+0xb6>
 801b72c:	e000      	b.n	801b730 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b72e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b732:	2b00      	cmp	r3, #0
 801b734:	d109      	bne.n	801b74a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b736:	8c3b      	ldrh	r3, [r7, #32]
 801b738:	4619      	mov	r1, r3
 801b73a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b73c:	f7ff fdb0 	bl	801b2a0 <ip_reass_enqueue_new_datagram>
 801b740:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b744:	2b00      	cmp	r3, #0
 801b746:	d11c      	bne.n	801b782 <ip4_reass+0x13e>
      goto nullreturn;
 801b748:	e105      	b.n	801b956 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b74c:	88db      	ldrh	r3, [r3, #6]
 801b74e:	b29b      	uxth	r3, r3
 801b750:	4618      	mov	r0, r3
 801b752:	f7f4 fe3f 	bl	80103d4 <lwip_htons>
 801b756:	4603      	mov	r3, r0
 801b758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d110      	bne.n	801b782 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b762:	89db      	ldrh	r3, [r3, #14]
 801b764:	4618      	mov	r0, r3
 801b766:	f7f4 fe35 	bl	80103d4 <lwip_htons>
 801b76a:	4603      	mov	r3, r0
 801b76c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b770:	2b00      	cmp	r3, #0
 801b772:	d006      	beq.n	801b782 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b776:	3308      	adds	r3, #8
 801b778:	2214      	movs	r2, #20
 801b77a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b77c:	4618      	mov	r0, r3
 801b77e:	f001 f93c 	bl	801c9fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b784:	88db      	ldrh	r3, [r3, #6]
 801b786:	b29b      	uxth	r3, r3
 801b788:	f003 0320 	and.w	r3, r3, #32
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	bf0c      	ite	eq
 801b790:	2301      	moveq	r3, #1
 801b792:	2300      	movne	r3, #0
 801b794:	b2db      	uxtb	r3, r3
 801b796:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b798:	69fb      	ldr	r3, [r7, #28]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d00e      	beq.n	801b7bc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b79e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801b7a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b7a2:	4413      	add	r3, r2
 801b7a4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b7a6:	8b7a      	ldrh	r2, [r7, #26]
 801b7a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	f0c0 80a0 	bcc.w	801b8f0 <ip4_reass+0x2ac>
 801b7b0:	8b7b      	ldrh	r3, [r7, #26]
 801b7b2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801b7b6:	4293      	cmp	r3, r2
 801b7b8:	f200 809a 	bhi.w	801b8f0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b7bc:	69fa      	ldr	r2, [r7, #28]
 801b7be:	6879      	ldr	r1, [r7, #4]
 801b7c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b7c2:	f7ff fdd5 	bl	801b370 <ip_reass_chain_frag_into_datagram_and_validate>
 801b7c6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b7ce:	f000 809b 	beq.w	801b908 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b7d2:	4b48      	ldr	r3, [pc, #288]	@ (801b8f4 <ip4_reass+0x2b0>)
 801b7d4:	881a      	ldrh	r2, [r3, #0]
 801b7d6:	8c3b      	ldrh	r3, [r7, #32]
 801b7d8:	4413      	add	r3, r2
 801b7da:	b29a      	uxth	r2, r3
 801b7dc:	4b45      	ldr	r3, [pc, #276]	@ (801b8f4 <ip4_reass+0x2b0>)
 801b7de:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b7e0:	69fb      	ldr	r3, [r7, #28]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d00d      	beq.n	801b802 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b7e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801b7e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b7ea:	4413      	add	r3, r2
 801b7ec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7f0:	8a7a      	ldrh	r2, [r7, #18]
 801b7f2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7f6:	7f9b      	ldrb	r3, [r3, #30]
 801b7f8:	f043 0301 	orr.w	r3, r3, #1
 801b7fc:	b2da      	uxtb	r2, r3
 801b7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b800:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b802:	697b      	ldr	r3, [r7, #20]
 801b804:	2b01      	cmp	r3, #1
 801b806:	d171      	bne.n	801b8ec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b80a:	8b9b      	ldrh	r3, [r3, #28]
 801b80c:	3314      	adds	r3, #20
 801b80e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b812:	685b      	ldr	r3, [r3, #4]
 801b814:	685b      	ldr	r3, [r3, #4]
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b81c:	685b      	ldr	r3, [r3, #4]
 801b81e:	685b      	ldr	r3, [r3, #4]
 801b820:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b824:	3308      	adds	r3, #8
 801b826:	2214      	movs	r2, #20
 801b828:	4619      	mov	r1, r3
 801b82a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b82c:	f001 f8e5 	bl	801c9fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b830:	8a3b      	ldrh	r3, [r7, #16]
 801b832:	4618      	mov	r0, r3
 801b834:	f7f4 fdce 	bl	80103d4 <lwip_htons>
 801b838:	4603      	mov	r3, r0
 801b83a:	461a      	mov	r2, r3
 801b83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b83e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b842:	2200      	movs	r2, #0
 801b844:	719a      	strb	r2, [r3, #6]
 801b846:	2200      	movs	r2, #0
 801b848:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b84a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b84c:	2200      	movs	r2, #0
 801b84e:	729a      	strb	r2, [r3, #10]
 801b850:	2200      	movs	r2, #0
 801b852:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b856:	685b      	ldr	r3, [r3, #4]
 801b858:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b85a:	e00d      	b.n	801b878 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b85e:	685b      	ldr	r3, [r3, #4]
 801b860:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b862:	2114      	movs	r1, #20
 801b864:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b866:	f7f6 fa13 	bl	8011c90 <pbuf_remove_header>
      pbuf_cat(p, r);
 801b86a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b86c:	6878      	ldr	r0, [r7, #4]
 801b86e:	f7f6 fb63 	bl	8011f38 <pbuf_cat>
      r = iprh->next_pbuf;
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801b878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d1ee      	bne.n	801b85c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b87e:	4b1e      	ldr	r3, [pc, #120]	@ (801b8f8 <ip4_reass+0x2b4>)
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b884:	429a      	cmp	r2, r3
 801b886:	d102      	bne.n	801b88e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b888:	2300      	movs	r3, #0
 801b88a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b88c:	e010      	b.n	801b8b0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b88e:	4b1a      	ldr	r3, [pc, #104]	@ (801b8f8 <ip4_reass+0x2b4>)
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	637b      	str	r3, [r7, #52]	@ 0x34
 801b894:	e007      	b.n	801b8a6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b89c:	429a      	cmp	r2, r3
 801b89e:	d006      	beq.n	801b8ae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b8a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	637b      	str	r3, [r7, #52]	@ 0x34
 801b8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d1f4      	bne.n	801b896 <ip4_reass+0x252>
 801b8ac:	e000      	b.n	801b8b0 <ip4_reass+0x26c>
          break;
 801b8ae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b8b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801b8b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b8b4:	f7ff fd2e 	bl	801b314 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b8b8:	6878      	ldr	r0, [r7, #4]
 801b8ba:	f7f6 fafd 	bl	8011eb8 <pbuf_clen>
 801b8be:	4603      	mov	r3, r0
 801b8c0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b8c2:	4b0c      	ldr	r3, [pc, #48]	@ (801b8f4 <ip4_reass+0x2b0>)
 801b8c4:	881b      	ldrh	r3, [r3, #0]
 801b8c6:	8c3a      	ldrh	r2, [r7, #32]
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d906      	bls.n	801b8da <ip4_reass+0x296>
 801b8cc:	4b0b      	ldr	r3, [pc, #44]	@ (801b8fc <ip4_reass+0x2b8>)
 801b8ce:	f240 229b 	movw	r2, #667	@ 0x29b
 801b8d2:	490b      	ldr	r1, [pc, #44]	@ (801b900 <ip4_reass+0x2bc>)
 801b8d4:	480b      	ldr	r0, [pc, #44]	@ (801b904 <ip4_reass+0x2c0>)
 801b8d6:	f000 febb 	bl	801c650 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b8da:	4b06      	ldr	r3, [pc, #24]	@ (801b8f4 <ip4_reass+0x2b0>)
 801b8dc:	881a      	ldrh	r2, [r3, #0]
 801b8de:	8c3b      	ldrh	r3, [r7, #32]
 801b8e0:	1ad3      	subs	r3, r2, r3
 801b8e2:	b29a      	uxth	r2, r3
 801b8e4:	4b03      	ldr	r3, [pc, #12]	@ (801b8f4 <ip4_reass+0x2b0>)
 801b8e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	e038      	b.n	801b95e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	e036      	b.n	801b95e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b8f0:	bf00      	nop
 801b8f2:	e00a      	b.n	801b90a <ip4_reass+0x2c6>
 801b8f4:	200228f8 	.word	0x200228f8
 801b8f8:	200228f4 	.word	0x200228f4
 801b8fc:	08021418 	.word	0x08021418
 801b900:	08021588 	.word	0x08021588
 801b904:	08021460 	.word	0x08021460
    goto nullreturn_ipr;
 801b908:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d106      	bne.n	801b91e <ip4_reass+0x2da>
 801b910:	4b15      	ldr	r3, [pc, #84]	@ (801b968 <ip4_reass+0x324>)
 801b912:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801b916:	4915      	ldr	r1, [pc, #84]	@ (801b96c <ip4_reass+0x328>)
 801b918:	4815      	ldr	r0, [pc, #84]	@ (801b970 <ip4_reass+0x32c>)
 801b91a:	f000 fe99 	bl	801c650 <iprintf>
  if (ipr->p == NULL) {
 801b91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b920:	685b      	ldr	r3, [r3, #4]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d116      	bne.n	801b954 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b926:	4b13      	ldr	r3, [pc, #76]	@ (801b974 <ip4_reass+0x330>)
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b92c:	429a      	cmp	r2, r3
 801b92e:	d006      	beq.n	801b93e <ip4_reass+0x2fa>
 801b930:	4b0d      	ldr	r3, [pc, #52]	@ (801b968 <ip4_reass+0x324>)
 801b932:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801b936:	4910      	ldr	r1, [pc, #64]	@ (801b978 <ip4_reass+0x334>)
 801b938:	480d      	ldr	r0, [pc, #52]	@ (801b970 <ip4_reass+0x32c>)
 801b93a:	f000 fe89 	bl	801c650 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b93e:	2100      	movs	r1, #0
 801b940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b942:	f7ff fce7 	bl	801b314 <ip_reass_dequeue_datagram>
 801b946:	e006      	b.n	801b956 <ip4_reass+0x312>
    goto nullreturn;
 801b948:	bf00      	nop
 801b94a:	e004      	b.n	801b956 <ip4_reass+0x312>
    goto nullreturn;
 801b94c:	bf00      	nop
 801b94e:	e002      	b.n	801b956 <ip4_reass+0x312>
      goto nullreturn;
 801b950:	bf00      	nop
 801b952:	e000      	b.n	801b956 <ip4_reass+0x312>
  }

nullreturn:
 801b954:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b956:	6878      	ldr	r0, [r7, #4]
 801b958:	f7f6 fa20 	bl	8011d9c <pbuf_free>
  return NULL;
 801b95c:	2300      	movs	r3, #0
}
 801b95e:	4618      	mov	r0, r3
 801b960:	3738      	adds	r7, #56	@ 0x38
 801b962:	46bd      	mov	sp, r7
 801b964:	bd80      	pop	{r7, pc}
 801b966:	bf00      	nop
 801b968:	08021418 	.word	0x08021418
 801b96c:	080215a4 	.word	0x080215a4
 801b970:	08021460 	.word	0x08021460
 801b974:	200228f4 	.word	0x200228f4
 801b978:	080215b0 	.word	0x080215b0

0801b97c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b97c:	b580      	push	{r7, lr}
 801b97e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b980:	2005      	movs	r0, #5
 801b982:	f7f5 f9fb 	bl	8010d7c <memp_malloc>
 801b986:	4603      	mov	r3, r0
}
 801b988:	4618      	mov	r0, r3
 801b98a:	bd80      	pop	{r7, pc}

0801b98c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b082      	sub	sp, #8
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d106      	bne.n	801b9a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b99a:	4b07      	ldr	r3, [pc, #28]	@ (801b9b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b99c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801b9a0:	4906      	ldr	r1, [pc, #24]	@ (801b9bc <ip_frag_free_pbuf_custom_ref+0x30>)
 801b9a2:	4807      	ldr	r0, [pc, #28]	@ (801b9c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b9a4:	f000 fe54 	bl	801c650 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b9a8:	6879      	ldr	r1, [r7, #4]
 801b9aa:	2005      	movs	r0, #5
 801b9ac:	f7f5 fa5c 	bl	8010e68 <memp_free>
}
 801b9b0:	bf00      	nop
 801b9b2:	3708      	adds	r7, #8
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	bd80      	pop	{r7, pc}
 801b9b8:	08021418 	.word	0x08021418
 801b9bc:	080215d0 	.word	0x080215d0
 801b9c0:	08021460 	.word	0x08021460

0801b9c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b084      	sub	sp, #16
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d106      	bne.n	801b9e4 <ipfrag_free_pbuf_custom+0x20>
 801b9d6:	4b11      	ldr	r3, [pc, #68]	@ (801ba1c <ipfrag_free_pbuf_custom+0x58>)
 801b9d8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801b9dc:	4910      	ldr	r1, [pc, #64]	@ (801ba20 <ipfrag_free_pbuf_custom+0x5c>)
 801b9de:	4811      	ldr	r0, [pc, #68]	@ (801ba24 <ipfrag_free_pbuf_custom+0x60>)
 801b9e0:	f000 fe36 	bl	801c650 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b9e4:	68fa      	ldr	r2, [r7, #12]
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	429a      	cmp	r2, r3
 801b9ea:	d006      	beq.n	801b9fa <ipfrag_free_pbuf_custom+0x36>
 801b9ec:	4b0b      	ldr	r3, [pc, #44]	@ (801ba1c <ipfrag_free_pbuf_custom+0x58>)
 801b9ee:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801b9f2:	490d      	ldr	r1, [pc, #52]	@ (801ba28 <ipfrag_free_pbuf_custom+0x64>)
 801b9f4:	480b      	ldr	r0, [pc, #44]	@ (801ba24 <ipfrag_free_pbuf_custom+0x60>)
 801b9f6:	f000 fe2b 	bl	801c650 <iprintf>
  if (pcr->original != NULL) {
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	695b      	ldr	r3, [r3, #20]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d004      	beq.n	801ba0c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	695b      	ldr	r3, [r3, #20]
 801ba06:	4618      	mov	r0, r3
 801ba08:	f7f6 f9c8 	bl	8011d9c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ba0c:	68f8      	ldr	r0, [r7, #12]
 801ba0e:	f7ff ffbd 	bl	801b98c <ip_frag_free_pbuf_custom_ref>
}
 801ba12:	bf00      	nop
 801ba14:	3710      	adds	r7, #16
 801ba16:	46bd      	mov	sp, r7
 801ba18:	bd80      	pop	{r7, pc}
 801ba1a:	bf00      	nop
 801ba1c:	08021418 	.word	0x08021418
 801ba20:	080215dc 	.word	0x080215dc
 801ba24:	08021460 	.word	0x08021460
 801ba28:	080215e8 	.word	0x080215e8

0801ba2c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b094      	sub	sp, #80	@ 0x50
 801ba30:	af02      	add	r7, sp, #8
 801ba32:	60f8      	str	r0, [r7, #12]
 801ba34:	60b9      	str	r1, [r7, #8]
 801ba36:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ba38:	2300      	movs	r3, #0
 801ba3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ba3e:	68bb      	ldr	r3, [r7, #8]
 801ba40:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ba42:	3b14      	subs	r3, #20
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	da00      	bge.n	801ba4a <ip4_frag+0x1e>
 801ba48:	3307      	adds	r3, #7
 801ba4a:	10db      	asrs	r3, r3, #3
 801ba4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ba4e:	2314      	movs	r3, #20
 801ba50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	685b      	ldr	r3, [r3, #4]
 801ba56:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ba58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ba5a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ba5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba5e:	781b      	ldrb	r3, [r3, #0]
 801ba60:	f003 030f 	and.w	r3, r3, #15
 801ba64:	b2db      	uxtb	r3, r3
 801ba66:	009b      	lsls	r3, r3, #2
 801ba68:	b2db      	uxtb	r3, r3
 801ba6a:	2b14      	cmp	r3, #20
 801ba6c:	d002      	beq.n	801ba74 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ba6e:	f06f 0305 	mvn.w	r3, #5
 801ba72:	e110      	b.n	801bc96 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	895b      	ldrh	r3, [r3, #10]
 801ba78:	2b13      	cmp	r3, #19
 801ba7a:	d809      	bhi.n	801ba90 <ip4_frag+0x64>
 801ba7c:	4b88      	ldr	r3, [pc, #544]	@ (801bca0 <ip4_frag+0x274>)
 801ba7e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ba82:	4988      	ldr	r1, [pc, #544]	@ (801bca4 <ip4_frag+0x278>)
 801ba84:	4888      	ldr	r0, [pc, #544]	@ (801bca8 <ip4_frag+0x27c>)
 801ba86:	f000 fde3 	bl	801c650 <iprintf>
 801ba8a:	f06f 0305 	mvn.w	r3, #5
 801ba8e:	e102      	b.n	801bc96 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ba90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba92:	88db      	ldrh	r3, [r3, #6]
 801ba94:	b29b      	uxth	r3, r3
 801ba96:	4618      	mov	r0, r3
 801ba98:	f7f4 fc9c 	bl	80103d4 <lwip_htons>
 801ba9c:	4603      	mov	r3, r0
 801ba9e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801baa0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801baa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801baa6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801baaa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801baac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bab0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	891b      	ldrh	r3, [r3, #8]
 801bab6:	3b14      	subs	r3, #20
 801bab8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801babc:	e0e1      	b.n	801bc82 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801babe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801bac0:	00db      	lsls	r3, r3, #3
 801bac2:	b29b      	uxth	r3, r3
 801bac4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801bac8:	4293      	cmp	r3, r2
 801baca:	bf28      	it	cs
 801bacc:	4613      	movcs	r3, r2
 801bace:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bad0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bad4:	2114      	movs	r1, #20
 801bad6:	200e      	movs	r0, #14
 801bad8:	f7f5 fe7c 	bl	80117d4 <pbuf_alloc>
 801badc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801bade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	f000 80d5 	beq.w	801bc90 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bae8:	895b      	ldrh	r3, [r3, #10]
 801baea:	2b13      	cmp	r3, #19
 801baec:	d806      	bhi.n	801bafc <ip4_frag+0xd0>
 801baee:	4b6c      	ldr	r3, [pc, #432]	@ (801bca0 <ip4_frag+0x274>)
 801baf0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801baf4:	496d      	ldr	r1, [pc, #436]	@ (801bcac <ip4_frag+0x280>)
 801baf6:	486c      	ldr	r0, [pc, #432]	@ (801bca8 <ip4_frag+0x27c>)
 801baf8:	f000 fdaa 	bl	801c650 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bafe:	685b      	ldr	r3, [r3, #4]
 801bb00:	2214      	movs	r2, #20
 801bb02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801bb04:	4618      	mov	r0, r3
 801bb06:	f000 ff78 	bl	801c9fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb0c:	685b      	ldr	r3, [r3, #4]
 801bb0e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801bb10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bb12:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801bb16:	e064      	b.n	801bbe2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	895a      	ldrh	r2, [r3, #10]
 801bb1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801bb1e:	1ad3      	subs	r3, r2, r3
 801bb20:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	895b      	ldrh	r3, [r3, #10]
 801bb26:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801bb28:	429a      	cmp	r2, r3
 801bb2a:	d906      	bls.n	801bb3a <ip4_frag+0x10e>
 801bb2c:	4b5c      	ldr	r3, [pc, #368]	@ (801bca0 <ip4_frag+0x274>)
 801bb2e:	f240 322d 	movw	r2, #813	@ 0x32d
 801bb32:	495f      	ldr	r1, [pc, #380]	@ (801bcb0 <ip4_frag+0x284>)
 801bb34:	485c      	ldr	r0, [pc, #368]	@ (801bca8 <ip4_frag+0x27c>)
 801bb36:	f000 fd8b 	bl	801c650 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bb3a:	8bfa      	ldrh	r2, [r7, #30]
 801bb3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bb40:	4293      	cmp	r3, r2
 801bb42:	bf28      	it	cs
 801bb44:	4613      	movcs	r3, r2
 801bb46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bb4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d105      	bne.n	801bb5e <ip4_frag+0x132>
        poff = 0;
 801bb52:	2300      	movs	r3, #0
 801bb54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	60fb      	str	r3, [r7, #12]
        continue;
 801bb5c:	e041      	b.n	801bbe2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801bb5e:	f7ff ff0d 	bl	801b97c <ip_frag_alloc_pbuf_custom_ref>
 801bb62:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801bb64:	69bb      	ldr	r3, [r7, #24]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d103      	bne.n	801bb72 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801bb6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bb6c:	f7f6 f916 	bl	8011d9c <pbuf_free>
        goto memerr;
 801bb70:	e08f      	b.n	801bc92 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bb72:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801bb74:	68fb      	ldr	r3, [r7, #12]
 801bb76:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bb78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801bb7a:	4413      	add	r3, r2
 801bb7c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801bb80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801bb84:	9201      	str	r2, [sp, #4]
 801bb86:	9300      	str	r3, [sp, #0]
 801bb88:	4603      	mov	r3, r0
 801bb8a:	2241      	movs	r2, #65	@ 0x41
 801bb8c:	2000      	movs	r0, #0
 801bb8e:	f7f5 ff4b 	bl	8011a28 <pbuf_alloced_custom>
 801bb92:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801bb94:	697b      	ldr	r3, [r7, #20]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d106      	bne.n	801bba8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801bb9a:	69b8      	ldr	r0, [r7, #24]
 801bb9c:	f7ff fef6 	bl	801b98c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801bba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bba2:	f7f6 f8fb 	bl	8011d9c <pbuf_free>
        goto memerr;
 801bba6:	e074      	b.n	801bc92 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801bba8:	68f8      	ldr	r0, [r7, #12]
 801bbaa:	f7f6 f99d 	bl	8011ee8 <pbuf_ref>
      pcr->original = p;
 801bbae:	69bb      	ldr	r3, [r7, #24]
 801bbb0:	68fa      	ldr	r2, [r7, #12]
 801bbb2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801bbb4:	69bb      	ldr	r3, [r7, #24]
 801bbb6:	4a3f      	ldr	r2, [pc, #252]	@ (801bcb4 <ip4_frag+0x288>)
 801bbb8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801bbba:	6979      	ldr	r1, [r7, #20]
 801bbbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bbbe:	f7f6 f9bb 	bl	8011f38 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801bbc2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801bbc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801bbca:	1ad3      	subs	r3, r2, r3
 801bbcc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801bbd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d004      	beq.n	801bbe2 <ip4_frag+0x1b6>
        poff = 0;
 801bbd8:	2300      	movs	r3, #0
 801bbda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801bbe2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d196      	bne.n	801bb18 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801bbea:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801bbec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801bbf0:	4413      	add	r3, r2
 801bbf2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801bbf4:	68bb      	ldr	r3, [r7, #8]
 801bbf6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bbf8:	f1a3 0213 	sub.w	r2, r3, #19
 801bbfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801bc00:	429a      	cmp	r2, r3
 801bc02:	bfcc      	ite	gt
 801bc04:	2301      	movgt	r3, #1
 801bc06:	2300      	movle	r3, #0
 801bc08:	b2db      	uxtb	r3, r3
 801bc0a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801bc0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801bc10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bc14:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801bc16:	6a3b      	ldr	r3, [r7, #32]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d002      	beq.n	801bc22 <ip4_frag+0x1f6>
 801bc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d003      	beq.n	801bc2a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801bc22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bc24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801bc28:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801bc2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801bc2c:	4618      	mov	r0, r3
 801bc2e:	f7f4 fbd1 	bl	80103d4 <lwip_htons>
 801bc32:	4603      	mov	r3, r0
 801bc34:	461a      	mov	r2, r3
 801bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc38:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801bc3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bc3c:	3314      	adds	r3, #20
 801bc3e:	b29b      	uxth	r3, r3
 801bc40:	4618      	mov	r0, r3
 801bc42:	f7f4 fbc7 	bl	80103d4 <lwip_htons>
 801bc46:	4603      	mov	r3, r0
 801bc48:	461a      	mov	r2, r3
 801bc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc4c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801bc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc50:	2200      	movs	r2, #0
 801bc52:	729a      	strb	r2, [r3, #10]
 801bc54:	2200      	movs	r2, #0
 801bc56:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bc58:	68bb      	ldr	r3, [r7, #8]
 801bc5a:	695b      	ldr	r3, [r3, #20]
 801bc5c:	687a      	ldr	r2, [r7, #4]
 801bc5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bc60:	68b8      	ldr	r0, [r7, #8]
 801bc62:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801bc64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bc66:	f7f6 f899 	bl	8011d9c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801bc6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801bc6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801bc70:	1ad3      	subs	r3, r2, r3
 801bc72:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801bc76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801bc7a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801bc7c:	4413      	add	r3, r2
 801bc7e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801bc82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	f47f af19 	bne.w	801babe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	e002      	b.n	801bc96 <ip4_frag+0x26a>
      goto memerr;
 801bc90:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bc92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801bc96:	4618      	mov	r0, r3
 801bc98:	3748      	adds	r7, #72	@ 0x48
 801bc9a:	46bd      	mov	sp, r7
 801bc9c:	bd80      	pop	{r7, pc}
 801bc9e:	bf00      	nop
 801bca0:	08021418 	.word	0x08021418
 801bca4:	080215f4 	.word	0x080215f4
 801bca8:	08021460 	.word	0x08021460
 801bcac:	08021610 	.word	0x08021610
 801bcb0:	08021630 	.word	0x08021630
 801bcb4:	0801b9c5 	.word	0x0801b9c5

0801bcb8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801bcb8:	b580      	push	{r7, lr}
 801bcba:	b086      	sub	sp, #24
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6078      	str	r0, [r7, #4]
 801bcc0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801bcc2:	230e      	movs	r3, #14
 801bcc4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	895b      	ldrh	r3, [r3, #10]
 801bcca:	2b0e      	cmp	r3, #14
 801bccc:	d96e      	bls.n	801bdac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	7bdb      	ldrb	r3, [r3, #15]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d106      	bne.n	801bce4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801bcd6:	683b      	ldr	r3, [r7, #0]
 801bcd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bcdc:	3301      	adds	r3, #1
 801bcde:	b2da      	uxtb	r2, r3
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	685b      	ldr	r3, [r3, #4]
 801bce8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801bcea:	693b      	ldr	r3, [r7, #16]
 801bcec:	7b1a      	ldrb	r2, [r3, #12]
 801bcee:	7b5b      	ldrb	r3, [r3, #13]
 801bcf0:	021b      	lsls	r3, r3, #8
 801bcf2:	4313      	orrs	r3, r2
 801bcf4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801bcf6:	693b      	ldr	r3, [r7, #16]
 801bcf8:	781b      	ldrb	r3, [r3, #0]
 801bcfa:	f003 0301 	and.w	r3, r3, #1
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d023      	beq.n	801bd4a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801bd02:	693b      	ldr	r3, [r7, #16]
 801bd04:	781b      	ldrb	r3, [r3, #0]
 801bd06:	2b01      	cmp	r3, #1
 801bd08:	d10f      	bne.n	801bd2a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bd0a:	693b      	ldr	r3, [r7, #16]
 801bd0c:	785b      	ldrb	r3, [r3, #1]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d11b      	bne.n	801bd4a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801bd12:	693b      	ldr	r3, [r7, #16]
 801bd14:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bd16:	2b5e      	cmp	r3, #94	@ 0x5e
 801bd18:	d117      	bne.n	801bd4a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	7b5b      	ldrb	r3, [r3, #13]
 801bd1e:	f043 0310 	orr.w	r3, r3, #16
 801bd22:	b2da      	uxtb	r2, r3
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	735a      	strb	r2, [r3, #13]
 801bd28:	e00f      	b.n	801bd4a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801bd2a:	693b      	ldr	r3, [r7, #16]
 801bd2c:	2206      	movs	r2, #6
 801bd2e:	4928      	ldr	r1, [pc, #160]	@ (801bdd0 <ethernet_input+0x118>)
 801bd30:	4618      	mov	r0, r3
 801bd32:	f000 fddd 	bl	801c8f0 <memcmp>
 801bd36:	4603      	mov	r3, r0
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d106      	bne.n	801bd4a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	7b5b      	ldrb	r3, [r3, #13]
 801bd40:	f043 0308 	orr.w	r3, r3, #8
 801bd44:	b2da      	uxtb	r2, r3
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801bd4a:	89fb      	ldrh	r3, [r7, #14]
 801bd4c:	2b08      	cmp	r3, #8
 801bd4e:	d003      	beq.n	801bd58 <ethernet_input+0xa0>
 801bd50:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801bd54:	d014      	beq.n	801bd80 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801bd56:	e032      	b.n	801bdbe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bd58:	683b      	ldr	r3, [r7, #0]
 801bd5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bd5e:	f003 0308 	and.w	r3, r3, #8
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	d024      	beq.n	801bdb0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801bd66:	8afb      	ldrh	r3, [r7, #22]
 801bd68:	4619      	mov	r1, r3
 801bd6a:	6878      	ldr	r0, [r7, #4]
 801bd6c:	f7f5 ff90 	bl	8011c90 <pbuf_remove_header>
 801bd70:	4603      	mov	r3, r0
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d11e      	bne.n	801bdb4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801bd76:	6839      	ldr	r1, [r7, #0]
 801bd78:	6878      	ldr	r0, [r7, #4]
 801bd7a:	f7fe ff21 	bl	801abc0 <ip4_input>
      break;
 801bd7e:	e013      	b.n	801bda8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bd80:	683b      	ldr	r3, [r7, #0]
 801bd82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bd86:	f003 0308 	and.w	r3, r3, #8
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	d014      	beq.n	801bdb8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801bd8e:	8afb      	ldrh	r3, [r7, #22]
 801bd90:	4619      	mov	r1, r3
 801bd92:	6878      	ldr	r0, [r7, #4]
 801bd94:	f7f5 ff7c 	bl	8011c90 <pbuf_remove_header>
 801bd98:	4603      	mov	r3, r0
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d10e      	bne.n	801bdbc <ethernet_input+0x104>
        etharp_input(p, netif);
 801bd9e:	6839      	ldr	r1, [r7, #0]
 801bda0:	6878      	ldr	r0, [r7, #4]
 801bda2:	f7fe f82f 	bl	8019e04 <etharp_input>
      break;
 801bda6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801bda8:	2300      	movs	r3, #0
 801bdaa:	e00c      	b.n	801bdc6 <ethernet_input+0x10e>
    goto free_and_return;
 801bdac:	bf00      	nop
 801bdae:	e006      	b.n	801bdbe <ethernet_input+0x106>
        goto free_and_return;
 801bdb0:	bf00      	nop
 801bdb2:	e004      	b.n	801bdbe <ethernet_input+0x106>
        goto free_and_return;
 801bdb4:	bf00      	nop
 801bdb6:	e002      	b.n	801bdbe <ethernet_input+0x106>
        goto free_and_return;
 801bdb8:	bf00      	nop
 801bdba:	e000      	b.n	801bdbe <ethernet_input+0x106>
        goto free_and_return;
 801bdbc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801bdbe:	6878      	ldr	r0, [r7, #4]
 801bdc0:	f7f5 ffec 	bl	8011d9c <pbuf_free>
  return ERR_OK;
 801bdc4:	2300      	movs	r3, #0
}
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	3718      	adds	r7, #24
 801bdca:	46bd      	mov	sp, r7
 801bdcc:	bd80      	pop	{r7, pc}
 801bdce:	bf00      	nop
 801bdd0:	08021b04 	.word	0x08021b04

0801bdd4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b086      	sub	sp, #24
 801bdd8:	af00      	add	r7, sp, #0
 801bdda:	60f8      	str	r0, [r7, #12]
 801bddc:	60b9      	str	r1, [r7, #8]
 801bdde:	607a      	str	r2, [r7, #4]
 801bde0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801bde2:	8c3b      	ldrh	r3, [r7, #32]
 801bde4:	4618      	mov	r0, r3
 801bde6:	f7f4 faf5 	bl	80103d4 <lwip_htons>
 801bdea:	4603      	mov	r3, r0
 801bdec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801bdee:	210e      	movs	r1, #14
 801bdf0:	68b8      	ldr	r0, [r7, #8]
 801bdf2:	f7f5 ff3d 	bl	8011c70 <pbuf_add_header>
 801bdf6:	4603      	mov	r3, r0
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	d125      	bne.n	801be48 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801bdfc:	68bb      	ldr	r3, [r7, #8]
 801bdfe:	685b      	ldr	r3, [r3, #4]
 801be00:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	8afa      	ldrh	r2, [r7, #22]
 801be06:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801be08:	693b      	ldr	r3, [r7, #16]
 801be0a:	2206      	movs	r2, #6
 801be0c:	6839      	ldr	r1, [r7, #0]
 801be0e:	4618      	mov	r0, r3
 801be10:	f000 fdf3 	bl	801c9fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801be14:	693b      	ldr	r3, [r7, #16]
 801be16:	3306      	adds	r3, #6
 801be18:	2206      	movs	r2, #6
 801be1a:	6879      	ldr	r1, [r7, #4]
 801be1c:	4618      	mov	r0, r3
 801be1e:	f000 fdec 	bl	801c9fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801be28:	2b06      	cmp	r3, #6
 801be2a:	d006      	beq.n	801be3a <ethernet_output+0x66>
 801be2c:	4b0a      	ldr	r3, [pc, #40]	@ (801be58 <ethernet_output+0x84>)
 801be2e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801be32:	490a      	ldr	r1, [pc, #40]	@ (801be5c <ethernet_output+0x88>)
 801be34:	480a      	ldr	r0, [pc, #40]	@ (801be60 <ethernet_output+0x8c>)
 801be36:	f000 fc0b 	bl	801c650 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801be3a:	68fb      	ldr	r3, [r7, #12]
 801be3c:	699b      	ldr	r3, [r3, #24]
 801be3e:	68b9      	ldr	r1, [r7, #8]
 801be40:	68f8      	ldr	r0, [r7, #12]
 801be42:	4798      	blx	r3
 801be44:	4603      	mov	r3, r0
 801be46:	e002      	b.n	801be4e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801be48:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801be4a:	f06f 0301 	mvn.w	r3, #1
}
 801be4e:	4618      	mov	r0, r3
 801be50:	3718      	adds	r7, #24
 801be52:	46bd      	mov	sp, r7
 801be54:	bd80      	pop	{r7, pc}
 801be56:	bf00      	nop
 801be58:	08021640 	.word	0x08021640
 801be5c:	08021678 	.word	0x08021678
 801be60:	080216ac 	.word	0x080216ac

0801be64 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801be64:	b580      	push	{r7, lr}
 801be66:	b082      	sub	sp, #8
 801be68:	af00      	add	r7, sp, #0
 801be6a:	6078      	str	r0, [r7, #4]
 801be6c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801be6e:	683b      	ldr	r3, [r7, #0]
 801be70:	2200      	movs	r2, #0
 801be72:	2104      	movs	r1, #4
 801be74:	4618      	mov	r0, r3
 801be76:	f7ee f9d5 	bl	800a224 <osMessageQueueNew>
 801be7a:	4602      	mov	r2, r0
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d102      	bne.n	801be8e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801be88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801be8c:	e000      	b.n	801be90 <sys_mbox_new+0x2c>

  return ERR_OK;
 801be8e:	2300      	movs	r3, #0
}
 801be90:	4618      	mov	r0, r3
 801be92:	3708      	adds	r7, #8
 801be94:	46bd      	mov	sp, r7
 801be96:	bd80      	pop	{r7, pc}

0801be98 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801be98:	b580      	push	{r7, lr}
 801be9a:	b082      	sub	sp, #8
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7ee fb29 	bl	800a4fc <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	4618      	mov	r0, r3
 801beb0:	f7ee fb56 	bl	800a560 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801beb4:	bf00      	nop
 801beb6:	3708      	adds	r7, #8
 801beb8:	46bd      	mov	sp, r7
 801beba:	bd80      	pop	{r7, pc}

0801bebc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b084      	sub	sp, #16
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
 801bec4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	6818      	ldr	r0, [r3, #0]
 801beca:	4639      	mov	r1, r7
 801becc:	2300      	movs	r3, #0
 801bece:	2200      	movs	r2, #0
 801bed0:	f7ee fa2e 	bl	800a330 <osMessageQueuePut>
 801bed4:	4603      	mov	r3, r0
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d102      	bne.n	801bee0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801beda:	2300      	movs	r3, #0
 801bedc:	73fb      	strb	r3, [r7, #15]
 801bede:	e001      	b.n	801bee4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801bee0:	23ff      	movs	r3, #255	@ 0xff
 801bee2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801bee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bee8:	4618      	mov	r0, r3
 801beea:	3710      	adds	r7, #16
 801beec:	46bd      	mov	sp, r7
 801beee:	bd80      	pop	{r7, pc}

0801bef0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801bef0:	b580      	push	{r7, lr}
 801bef2:	b086      	sub	sp, #24
 801bef4:	af00      	add	r7, sp, #0
 801bef6:	60f8      	str	r0, [r7, #12]
 801bef8:	60b9      	str	r1, [r7, #8]
 801befa:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801befc:	f7ed fca0 	bl	8009840 <osKernelGetTickCount>
 801bf00:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d013      	beq.n	801bf30 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801bf08:	68fb      	ldr	r3, [r7, #12]
 801bf0a:	6818      	ldr	r0, [r3, #0]
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	2200      	movs	r2, #0
 801bf10:	68b9      	ldr	r1, [r7, #8]
 801bf12:	f7ee fa81 	bl	800a418 <osMessageQueueGet>
 801bf16:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801bf18:	693b      	ldr	r3, [r7, #16]
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d105      	bne.n	801bf2a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801bf1e:	f7ed fc8f 	bl	8009840 <osKernelGetTickCount>
 801bf22:	4602      	mov	r2, r0
 801bf24:	697b      	ldr	r3, [r7, #20]
 801bf26:	1ad3      	subs	r3, r2, r3
 801bf28:	e00f      	b.n	801bf4a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801bf2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf2e:	e00c      	b.n	801bf4a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	6818      	ldr	r0, [r3, #0]
 801bf34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf38:	2200      	movs	r2, #0
 801bf3a:	68b9      	ldr	r1, [r7, #8]
 801bf3c:	f7ee fa6c 	bl	800a418 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801bf40:	f7ed fc7e 	bl	8009840 <osKernelGetTickCount>
 801bf44:	4602      	mov	r2, r0
 801bf46:	697b      	ldr	r3, [r7, #20]
 801bf48:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801bf4a:	4618      	mov	r0, r3
 801bf4c:	3718      	adds	r7, #24
 801bf4e:	46bd      	mov	sp, r7
 801bf50:	bd80      	pop	{r7, pc}

0801bf52 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801bf52:	b580      	push	{r7, lr}
 801bf54:	b082      	sub	sp, #8
 801bf56:	af00      	add	r7, sp, #0
 801bf58:	6078      	str	r0, [r7, #4]
 801bf5a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	6818      	ldr	r0, [r3, #0]
 801bf60:	2300      	movs	r3, #0
 801bf62:	2200      	movs	r2, #0
 801bf64:	6839      	ldr	r1, [r7, #0]
 801bf66:	f7ee fa57 	bl	800a418 <osMessageQueueGet>
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d101      	bne.n	801bf74 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801bf70:	2300      	movs	r3, #0
 801bf72:	e001      	b.n	801bf78 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801bf74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801bf78:	4618      	mov	r0, r3
 801bf7a:	3708      	adds	r7, #8
 801bf7c:	46bd      	mov	sp, r7
 801bf7e:	bd80      	pop	{r7, pc}

0801bf80 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801bf80:	b480      	push	{r7}
 801bf82:	b083      	sub	sp, #12
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d101      	bne.n	801bf94 <sys_mbox_valid+0x14>
    return 0;
 801bf90:	2300      	movs	r3, #0
 801bf92:	e000      	b.n	801bf96 <sys_mbox_valid+0x16>
  else
    return 1;
 801bf94:	2301      	movs	r3, #1
}
 801bf96:	4618      	mov	r0, r3
 801bf98:	370c      	adds	r7, #12
 801bf9a:	46bd      	mov	sp, r7
 801bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfa0:	4770      	bx	lr

0801bfa2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801bfa2:	b480      	push	{r7}
 801bfa4:	b083      	sub	sp, #12
 801bfa6:	af00      	add	r7, sp, #0
 801bfa8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	2200      	movs	r2, #0
 801bfae:	601a      	str	r2, [r3, #0]
}
 801bfb0:	bf00      	nop
 801bfb2:	370c      	adds	r7, #12
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfba:	4770      	bx	lr

0801bfbc <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801bfbc:	b580      	push	{r7, lr}
 801bfbe:	b082      	sub	sp, #8
 801bfc0:	af00      	add	r7, sp, #0
 801bfc2:	6078      	str	r0, [r7, #4]
 801bfc4:	460b      	mov	r3, r1
 801bfc6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801bfc8:	78fb      	ldrb	r3, [r7, #3]
 801bfca:	2200      	movs	r2, #0
 801bfcc:	4619      	mov	r1, r3
 801bfce:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801bfd2:	f7ed ff97 	bl	8009f04 <osSemaphoreNew>
 801bfd6:	4602      	mov	r2, r0
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d102      	bne.n	801bfea <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801bfe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bfe8:	e009      	b.n	801bffe <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801bfea:	78fb      	ldrb	r3, [r7, #3]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d105      	bne.n	801bffc <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	2100      	movs	r1, #0
 801bff6:	4618      	mov	r0, r3
 801bff8:	f7ee f820 	bl	800a03c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801bffc:	2300      	movs	r3, #0
}
 801bffe:	4618      	mov	r0, r3
 801c000:	3708      	adds	r7, #8
 801c002:	46bd      	mov	sp, r7
 801c004:	bd80      	pop	{r7, pc}

0801c006 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c006:	b580      	push	{r7, lr}
 801c008:	b084      	sub	sp, #16
 801c00a:	af00      	add	r7, sp, #0
 801c00c:	6078      	str	r0, [r7, #4]
 801c00e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801c010:	f7ed fc16 	bl	8009840 <osKernelGetTickCount>
 801c014:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d011      	beq.n	801c040 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	6839      	ldr	r1, [r7, #0]
 801c022:	4618      	mov	r0, r3
 801c024:	f7ee f80a 	bl	800a03c <osSemaphoreAcquire>
 801c028:	4603      	mov	r3, r0
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d105      	bne.n	801c03a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801c02e:	f7ed fc07 	bl	8009840 <osKernelGetTickCount>
 801c032:	4602      	mov	r2, r0
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	1ad3      	subs	r3, r2, r3
 801c038:	e012      	b.n	801c060 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c03a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c03e:	e00f      	b.n	801c060 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801c040:	bf00      	nop
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c04a:	4618      	mov	r0, r3
 801c04c:	f7ed fff6 	bl	800a03c <osSemaphoreAcquire>
 801c050:	4603      	mov	r3, r0
 801c052:	2b00      	cmp	r3, #0
 801c054:	d1f5      	bne.n	801c042 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801c056:	f7ed fbf3 	bl	8009840 <osKernelGetTickCount>
 801c05a:	4602      	mov	r2, r0
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801c060:	4618      	mov	r0, r3
 801c062:	3710      	adds	r7, #16
 801c064:	46bd      	mov	sp, r7
 801c066:	bd80      	pop	{r7, pc}

0801c068 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	b082      	sub	sp, #8
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	4618      	mov	r0, r3
 801c076:	f7ee f847 	bl	800a108 <osSemaphoreRelease>
}
 801c07a:	bf00      	nop
 801c07c:	3708      	adds	r7, #8
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}

0801c082 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c082:	b580      	push	{r7, lr}
 801c084:	b082      	sub	sp, #8
 801c086:	af00      	add	r7, sp, #0
 801c088:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	4618      	mov	r0, r3
 801c090:	f7ee f892 	bl	800a1b8 <osSemaphoreDelete>
}
 801c094:	bf00      	nop
 801c096:	3708      	adds	r7, #8
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}

0801c09c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c09c:	b480      	push	{r7}
 801c09e:	b083      	sub	sp, #12
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d101      	bne.n	801c0b0 <sys_sem_valid+0x14>
    return 0;
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	e000      	b.n	801c0b2 <sys_sem_valid+0x16>
  else
    return 1;
 801c0b0:	2301      	movs	r3, #1
}
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	370c      	adds	r7, #12
 801c0b6:	46bd      	mov	sp, r7
 801c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0bc:	4770      	bx	lr

0801c0be <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c0be:	b480      	push	{r7}
 801c0c0:	b083      	sub	sp, #12
 801c0c2:	af00      	add	r7, sp, #0
 801c0c4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	2200      	movs	r2, #0
 801c0ca:	601a      	str	r2, [r3, #0]
}
 801c0cc:	bf00      	nop
 801c0ce:	370c      	adds	r7, #12
 801c0d0:	46bd      	mov	sp, r7
 801c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d6:	4770      	bx	lr

0801c0d8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c0d8:	b580      	push	{r7, lr}
 801c0da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801c0dc:	2000      	movs	r0, #0
 801c0de:	f7ed fdc9 	bl	8009c74 <osMutexNew>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	4a01      	ldr	r2, [pc, #4]	@ (801c0ec <sys_init+0x14>)
 801c0e6:	6013      	str	r3, [r2, #0]
#endif
}
 801c0e8:	bf00      	nop
 801c0ea:	bd80      	pop	{r7, pc}
 801c0ec:	200228fc 	.word	0x200228fc

0801c0f0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b082      	sub	sp, #8
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801c0f8:	2000      	movs	r0, #0
 801c0fa:	f7ed fdbb 	bl	8009c74 <osMutexNew>
 801c0fe:	4602      	mov	r2, r0
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d102      	bne.n	801c112 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c10c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c110:	e000      	b.n	801c114 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c112:	2300      	movs	r3, #0
}
 801c114:	4618      	mov	r0, r3
 801c116:	3708      	adds	r7, #8
 801c118:	46bd      	mov	sp, r7
 801c11a:	bd80      	pop	{r7, pc}

0801c11c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c11c:	b580      	push	{r7, lr}
 801c11e:	b082      	sub	sp, #8
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c12c:	4618      	mov	r0, r3
 801c12e:	f7ed fe3b 	bl	8009da8 <osMutexAcquire>
#endif
}
 801c132:	bf00      	nop
 801c134:	3708      	adds	r7, #8
 801c136:	46bd      	mov	sp, r7
 801c138:	bd80      	pop	{r7, pc}

0801c13a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c13a:	b580      	push	{r7, lr}
 801c13c:	b082      	sub	sp, #8
 801c13e:	af00      	add	r7, sp, #0
 801c140:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	4618      	mov	r0, r3
 801c148:	f7ed fe8c 	bl	8009e64 <osMutexRelease>
}
 801c14c:	bf00      	nop
 801c14e:	3708      	adds	r7, #8
 801c150:	46bd      	mov	sp, r7
 801c152:	bd80      	pop	{r7, pc}

0801c154 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c154:	b580      	push	{r7, lr}
 801c156:	b08e      	sub	sp, #56	@ 0x38
 801c158:	af00      	add	r7, sp, #0
 801c15a:	60f8      	str	r0, [r7, #12]
 801c15c:	60b9      	str	r1, [r7, #8]
 801c15e:	607a      	str	r2, [r7, #4]
 801c160:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801c162:	f107 0314 	add.w	r3, r7, #20
 801c166:	2224      	movs	r2, #36	@ 0x24
 801c168:	2100      	movs	r1, #0
 801c16a:	4618      	mov	r0, r3
 801c16c:	f000 fbd0 	bl	801c910 <memset>
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	617b      	str	r3, [r7, #20]
 801c174:	683b      	ldr	r3, [r7, #0]
 801c176:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c17a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801c17c:	f107 0314 	add.w	r3, r7, #20
 801c180:	461a      	mov	r2, r3
 801c182:	6879      	ldr	r1, [r7, #4]
 801c184:	68b8      	ldr	r0, [r7, #8]
 801c186:	f7ed fb83 	bl	8009890 <osThreadNew>
 801c18a:	4603      	mov	r3, r0
#endif
}
 801c18c:	4618      	mov	r0, r3
 801c18e:	3738      	adds	r7, #56	@ 0x38
 801c190:	46bd      	mov	sp, r7
 801c192:	bd80      	pop	{r7, pc}

0801c194 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c194:	b580      	push	{r7, lr}
 801c196:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801c198:	4b04      	ldr	r3, [pc, #16]	@ (801c1ac <sys_arch_protect+0x18>)
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	f7ed fe01 	bl	8009da8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801c1a6:	2301      	movs	r3, #1
}
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	bd80      	pop	{r7, pc}
 801c1ac:	200228fc 	.word	0x200228fc

0801c1b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b082      	sub	sp, #8
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c1b8:	4b04      	ldr	r3, [pc, #16]	@ (801c1cc <sys_arch_unprotect+0x1c>)
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	4618      	mov	r0, r3
 801c1be:	f7ed fe51 	bl	8009e64 <osMutexRelease>
}
 801c1c2:	bf00      	nop
 801c1c4:	3708      	adds	r7, #8
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	bf00      	nop
 801c1cc:	200228fc 	.word	0x200228fc

0801c1d0 <UDP_Server_Init>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Server_Init(void)
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	b082      	sub	sp, #8
 801c1d4:	af00      	add	r7, sp, #0

	err_t err;

	conn = netconn_new(NETCONN_UDP);
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	2100      	movs	r1, #0
 801c1da:	2020      	movs	r0, #32
 801c1dc:	f7f1 ff32 	bl	800e044 <netconn_new_with_proto_and_callback>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	4a16      	ldr	r2, [pc, #88]	@ (801c23c <UDP_Server_Init+0x6c>)
 801c1e4:	6013      	str	r3, [r2, #0]
	if (conn == NULL)
 801c1e6:	4b15      	ldr	r3, [pc, #84]	@ (801c23c <UDP_Server_Init+0x6c>)
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d104      	bne.n	801c1f8 <UDP_Server_Init+0x28>
	{
		printf("error creating UDP connection\n");
 801c1ee:	4814      	ldr	r0, [pc, #80]	@ (801c240 <UDP_Server_Init+0x70>)
 801c1f0:	f000 fa9e 	bl	801c730 <puts>
		while(1);
 801c1f4:	bf00      	nop
 801c1f6:	e7fd      	b.n	801c1f4 <UDP_Server_Init+0x24>
	}

	err = netconn_bind(conn, IP_ADDR_ANY, SERVER_PORT);
 801c1f8:	4b10      	ldr	r3, [pc, #64]	@ (801c23c <UDP_Server_Init+0x6c>)
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801c200:	4910      	ldr	r1, [pc, #64]	@ (801c244 <UDP_Server_Init+0x74>)
 801c202:	4618      	mov	r0, r3
 801c204:	f7f1 ffd8 	bl	800e1b8 <netconn_bind>
 801c208:	4603      	mov	r3, r0
 801c20a:	71fb      	strb	r3, [r7, #7]
	if (err != ERR_OK)
 801c20c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d00c      	beq.n	801c22e <UDP_Server_Init+0x5e>
	{
		printf("error binding UDP port\n");
 801c214:	480c      	ldr	r0, [pc, #48]	@ (801c248 <UDP_Server_Init+0x78>)
 801c216:	f000 fa8b 	bl	801c730 <puts>
		netconn_delete(conn);
 801c21a:	4b08      	ldr	r3, [pc, #32]	@ (801c23c <UDP_Server_Init+0x6c>)
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	4618      	mov	r0, r3
 801c220:	f7f1 ffae 	bl	800e180 <netconn_delete>
		conn = NULL;
 801c224:	4b05      	ldr	r3, [pc, #20]	@ (801c23c <UDP_Server_Init+0x6c>)
 801c226:	2200      	movs	r2, #0
 801c228:	601a      	str	r2, [r3, #0]
		while(1);
 801c22a:	bf00      	nop
 801c22c:	e7fd      	b.n	801c22a <UDP_Server_Init+0x5a>
	}

	printf("UDP init success\n");
 801c22e:	4807      	ldr	r0, [pc, #28]	@ (801c24c <UDP_Server_Init+0x7c>)
 801c230:	f000 fa7e 	bl	801c730 <puts>
}
 801c234:	bf00      	nop
 801c236:	3708      	adds	r7, #8
 801c238:	46bd      	mov	sp, r7
 801c23a:	bd80      	pop	{r7, pc}
 801c23c:	20022900 	.word	0x20022900
 801c240:	080216d4 	.word	0x080216d4
 801c244:	08021b00 	.word	0x08021b00
 801c248:	080216f4 	.word	0x080216f4
 801c24c:	0802170c 	.word	0x0802170c

0801c250 <UDP_Listen>:

void UDP_Listen(void)
{
 801c250:	b590      	push	{r4, r7, lr}
 801c252:	b0c7      	sub	sp, #284	@ 0x11c
 801c254:	af00      	add	r7, sp, #0
	printf("Listening started\n");
 801c256:	4851      	ldr	r0, [pc, #324]	@ (801c39c <UDP_Listen+0x14c>)
 801c258:	f000 fa6a 	bl	801c730 <puts>
	InMsg_t in_msg;
	int n_read;

	while(1)
	{
		if(netconn_recv(conn, &buf) == ERR_OK)
 801c25c:	4b50      	ldr	r3, [pc, #320]	@ (801c3a0 <UDP_Listen+0x150>)
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801c264:	4611      	mov	r1, r2
 801c266:	4618      	mov	r0, r3
 801c268:	f7f2 f9bc 	bl	800e5e4 <netconn_recv>
 801c26c:	4603      	mov	r3, r0
 801c26e:	2b00      	cmp	r3, #0
 801c270:	f040 808c 	bne.w	801c38c <UDP_Listen+0x13c>
		{
			printf("Got message\n");
 801c274:	484b      	ldr	r0, [pc, #300]	@ (801c3a4 <UDP_Listen+0x154>)
 801c276:	f000 fa5b 	bl	801c730 <puts>
			// Load in_msg
			ip_addr_copy(in_msg.addr, *netbuf_fromaddr(buf));
 801c27a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801c27e:	689a      	ldr	r2, [r3, #8]
 801c280:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801c284:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801c288:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 801c28a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801c28e:	899a      	ldrh	r2, [r3, #12]
 801c290:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801c294:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801c298:	809a      	strh	r2, [r3, #4]

			n_read = 0;
 801c29a:	2300      	movs	r3, #0
 801c29c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
			netbuf_copy_partial(buf, &in_msg.test_id, sizeof(in_msg.test_id), n_read);
 801c2a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801c2a4:	6818      	ldr	r0, [r3, #0]
 801c2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2aa:	b29a      	uxth	r2, r3
 801c2ac:	463b      	mov	r3, r7
 801c2ae:	f103 0108 	add.w	r1, r3, #8
 801c2b2:	4613      	mov	r3, r2
 801c2b4:	2204      	movs	r2, #4
 801c2b6:	f7f5 ff77 	bl	80121a8 <pbuf_copy_partial>
			n_read += sizeof(in_msg.test_id);
 801c2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2be:	3304      	adds	r3, #4
 801c2c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

			netbuf_copy_partial(buf, &in_msg.peripheral, 1, n_read++);
 801c2c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801c2c8:	6818      	ldr	r0, [r3, #0]
 801c2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2ce:	1c5a      	adds	r2, r3, #1
 801c2d0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801c2d4:	b29a      	uxth	r2, r3
 801c2d6:	463b      	mov	r3, r7
 801c2d8:	f103 010c 	add.w	r1, r3, #12
 801c2dc:	4613      	mov	r3, r2
 801c2de:	2201      	movs	r2, #1
 801c2e0:	f7f5 ff62 	bl	80121a8 <pbuf_copy_partial>
			netbuf_copy_partial(buf, &in_msg.n_iter, 1, n_read++);
 801c2e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801c2e8:	6818      	ldr	r0, [r3, #0]
 801c2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c2ee:	1c5a      	adds	r2, r3, #1
 801c2f0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801c2f4:	b29a      	uxth	r2, r3
 801c2f6:	463b      	mov	r3, r7
 801c2f8:	f103 010d 	add.w	r1, r3, #13
 801c2fc:	4613      	mov	r3, r2
 801c2fe:	2201      	movs	r2, #1
 801c300:	f7f5 ff52 	bl	80121a8 <pbuf_copy_partial>
			netbuf_copy_partial(buf, &in_msg.p_len, 1, n_read++);
 801c304:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801c308:	6818      	ldr	r0, [r3, #0]
 801c30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c30e:	1c5a      	adds	r2, r3, #1
 801c310:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801c314:	b29a      	uxth	r2, r3
 801c316:	463b      	mov	r3, r7
 801c318:	f103 010e 	add.w	r1, r3, #14
 801c31c:	4613      	mov	r3, r2
 801c31e:	2201      	movs	r2, #1
 801c320:	f7f5 ff42 	bl	80121a8 <pbuf_copy_partial>
			netbuf_copy_partial(buf, &in_msg.payload, in_msg.p_len, n_read);
 801c324:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801c328:	6818      	ldr	r0, [r3, #0]
 801c32a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801c32e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801c332:	7b9b      	ldrb	r3, [r3, #14]
 801c334:	461c      	mov	r4, r3
 801c336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c33a:	b29a      	uxth	r2, r3
 801c33c:	463b      	mov	r3, r7
 801c33e:	f103 010f 	add.w	r1, r3, #15
 801c342:	4613      	mov	r3, r2
 801c344:	4622      	mov	r2, r4
 801c346:	f7f5 ff2f 	bl	80121a8 <pbuf_copy_partial>

			if (in_msg.p_len < sizeof(in_msg.payload))
			    in_msg.payload[in_msg.p_len] = '\0';
 801c34a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801c34e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801c352:	7b9b      	ldrb	r3, [r3, #14]
 801c354:	461a      	mov	r2, r3
 801c356:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801c35a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801c35e:	4413      	add	r3, r2
 801c360:	2200      	movs	r2, #0
 801c362:	73da      	strb	r2, [r3, #15]
			printf("Message is: %s\n", in_msg.payload);
 801c364:	463b      	mov	r3, r7
 801c366:	330f      	adds	r3, #15
 801c368:	4619      	mov	r1, r3
 801c36a:	480f      	ldr	r0, [pc, #60]	@ (801c3a8 <UDP_Listen+0x158>)
 801c36c:	f000 f970 	bl	801c650 <iprintf>

		    // send in_msg to InMsgQueue
		    osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801c370:	4b0e      	ldr	r3, [pc, #56]	@ (801c3ac <UDP_Listen+0x15c>)
 801c372:	6818      	ldr	r0, [r3, #0]
 801c374:	4639      	mov	r1, r7
 801c376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c37a:	2200      	movs	r2, #0
 801c37c:	f7ed ffd8 	bl	800a330 <osMessageQueuePut>

		    netbuf_delete(buf);
 801c380:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801c384:	4618      	mov	r0, r3
 801c386:	f7f3 fe03 	bl	800ff90 <netbuf_delete>
 801c38a:	e767      	b.n	801c25c <UDP_Listen+0xc>
		}
		else
		{
			printf("ERROR\n");
 801c38c:	4808      	ldr	r0, [pc, #32]	@ (801c3b0 <UDP_Listen+0x160>)
 801c38e:	f000 f9cf 	bl	801c730 <puts>
			osDelay(1);
 801c392:	2001      	movs	r0, #1
 801c394:	f7ed fb22 	bl	80099dc <osDelay>
		if(netconn_recv(conn, &buf) == ERR_OK)
 801c398:	e760      	b.n	801c25c <UDP_Listen+0xc>
 801c39a:	bf00      	nop
 801c39c:	08021720 	.word	0x08021720
 801c3a0:	20022900 	.word	0x20022900
 801c3a4:	08021734 	.word	0x08021734
 801c3a8:	08021740 	.word	0x08021740
 801c3ac:	20000320 	.word	0x20000320
 801c3b0:	08021750 	.word	0x08021750

0801c3b4 <UDP_Response>:
		//netbuf_delete(buf);
	}
}

void UDP_Response(void)
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b088      	sub	sp, #32
 801c3b8:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t response[RESPONSE_SIZE];

	while(1)
	{
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801c3ba:	4b22      	ldr	r3, [pc, #136]	@ (801c444 <UDP_Response+0x90>)
 801c3bc:	6818      	ldr	r0, [r3, #0]
 801c3be:	f107 010c 	add.w	r1, r7, #12
 801c3c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c3c6:	2200      	movs	r2, #0
 801c3c8:	f7ee f826 	bl	800a418 <osMessageQueueGet>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d131      	bne.n	801c436 <UDP_Response+0x82>
		{
			//Load response buffer
			memcpy(response, &out_msg.test_id, sizeof(out_msg.test_id));
 801c3d2:	697b      	ldr	r3, [r7, #20]
 801c3d4:	607b      	str	r3, [r7, #4]
			response[sizeof(out_msg.test_id)] = out_msg.test_result;
 801c3d6:	7e3b      	ldrb	r3, [r7, #24]
 801c3d8:	723b      	strb	r3, [r7, #8]

			// Send response
			buf = netbuf_new();
 801c3da:	f7f3 fdc5 	bl	800ff68 <netbuf_new>
 801c3de:	61f8      	str	r0, [r7, #28]
			if (!buf) continue;
 801c3e0:	69fb      	ldr	r3, [r7, #28]
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d02b      	beq.n	801c43e <UDP_Response+0x8a>

			netbuf_ref(buf, response, RESPONSE_SIZE);
 801c3e6:	1d3b      	adds	r3, r7, #4
 801c3e8:	2205      	movs	r2, #5
 801c3ea:	4619      	mov	r1, r3
 801c3ec:	69f8      	ldr	r0, [r7, #28]
 801c3ee:	f7f3 fdef 	bl	800ffd0 <netbuf_ref>

			if (osMutexAcquire(netconnMutexHandle, osWaitForever) == osOK)
 801c3f2:	4b15      	ldr	r3, [pc, #84]	@ (801c448 <UDP_Response+0x94>)
 801c3f4:	681b      	ldr	r3, [r3, #0]
 801c3f6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	f7ed fcd4 	bl	8009da8 <osMutexAcquire>
 801c400:	4603      	mov	r3, r0
 801c402:	2b00      	cmp	r3, #0
 801c404:	d117      	bne.n	801c436 <UDP_Response+0x82>
			{
				netconn_connect(conn, &out_msg.addr, out_msg.port);
 801c406:	4b11      	ldr	r3, [pc, #68]	@ (801c44c <UDP_Response+0x98>)
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	8a3a      	ldrh	r2, [r7, #16]
 801c40c:	f107 010c 	add.w	r1, r7, #12
 801c410:	4618      	mov	r0, r3
 801c412:	f7f1 ff09 	bl	800e228 <netconn_connect>
				netconn_send(conn, buf);
 801c416:	4b0d      	ldr	r3, [pc, #52]	@ (801c44c <UDP_Response+0x98>)
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	69f9      	ldr	r1, [r7, #28]
 801c41c:	4618      	mov	r0, r3
 801c41e:	f7f2 f95b 	bl	800e6d8 <netconn_send>
				netconn_disconnect(conn);
 801c422:	4b0a      	ldr	r3, [pc, #40]	@ (801c44c <UDP_Response+0x98>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	4618      	mov	r0, r3
 801c428:	f7f1 ff36 	bl	800e298 <netconn_disconnect>
				osMutexRelease(netconnMutexHandle);
 801c42c:	4b06      	ldr	r3, [pc, #24]	@ (801c448 <UDP_Response+0x94>)
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	4618      	mov	r0, r3
 801c432:	f7ed fd17 	bl	8009e64 <osMutexRelease>
			}
		}
		osDelay(1);
 801c436:	2001      	movs	r0, #1
 801c438:	f7ed fad0 	bl	80099dc <osDelay>
 801c43c:	e7bd      	b.n	801c3ba <UDP_Response+0x6>
			if (!buf) continue;
 801c43e:	bf00      	nop
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801c440:	e7bb      	b.n	801c3ba <UDP_Response+0x6>
 801c442:	bf00      	nop
 801c444:	20000324 	.word	0x20000324
 801c448:	2000033c 	.word	0x2000033c
 801c44c:	20022900 	.word	0x20022900

0801c450 <rand>:
 801c450:	4b16      	ldr	r3, [pc, #88]	@ (801c4ac <rand+0x5c>)
 801c452:	b510      	push	{r4, lr}
 801c454:	681c      	ldr	r4, [r3, #0]
 801c456:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c458:	b9b3      	cbnz	r3, 801c488 <rand+0x38>
 801c45a:	2018      	movs	r0, #24
 801c45c:	f000 fb44 	bl	801cae8 <malloc>
 801c460:	4602      	mov	r2, r0
 801c462:	6320      	str	r0, [r4, #48]	@ 0x30
 801c464:	b920      	cbnz	r0, 801c470 <rand+0x20>
 801c466:	4b12      	ldr	r3, [pc, #72]	@ (801c4b0 <rand+0x60>)
 801c468:	4812      	ldr	r0, [pc, #72]	@ (801c4b4 <rand+0x64>)
 801c46a:	2152      	movs	r1, #82	@ 0x52
 801c46c:	f000 fad4 	bl	801ca18 <__assert_func>
 801c470:	4911      	ldr	r1, [pc, #68]	@ (801c4b8 <rand+0x68>)
 801c472:	4b12      	ldr	r3, [pc, #72]	@ (801c4bc <rand+0x6c>)
 801c474:	e9c0 1300 	strd	r1, r3, [r0]
 801c478:	4b11      	ldr	r3, [pc, #68]	@ (801c4c0 <rand+0x70>)
 801c47a:	6083      	str	r3, [r0, #8]
 801c47c:	230b      	movs	r3, #11
 801c47e:	8183      	strh	r3, [r0, #12]
 801c480:	2100      	movs	r1, #0
 801c482:	2001      	movs	r0, #1
 801c484:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c488:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c48a:	480e      	ldr	r0, [pc, #56]	@ (801c4c4 <rand+0x74>)
 801c48c:	690b      	ldr	r3, [r1, #16]
 801c48e:	694c      	ldr	r4, [r1, #20]
 801c490:	4a0d      	ldr	r2, [pc, #52]	@ (801c4c8 <rand+0x78>)
 801c492:	4358      	muls	r0, r3
 801c494:	fb02 0004 	mla	r0, r2, r4, r0
 801c498:	fba3 3202 	umull	r3, r2, r3, r2
 801c49c:	3301      	adds	r3, #1
 801c49e:	eb40 0002 	adc.w	r0, r0, r2
 801c4a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c4a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c4aa:	bd10      	pop	{r4, pc}
 801c4ac:	20000080 	.word	0x20000080
 801c4b0:	08021b12 	.word	0x08021b12
 801c4b4:	08021b29 	.word	0x08021b29
 801c4b8:	abcd330e 	.word	0xabcd330e
 801c4bc:	e66d1234 	.word	0xe66d1234
 801c4c0:	0005deec 	.word	0x0005deec
 801c4c4:	5851f42d 	.word	0x5851f42d
 801c4c8:	4c957f2d 	.word	0x4c957f2d

0801c4cc <std>:
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	b510      	push	{r4, lr}
 801c4d0:	4604      	mov	r4, r0
 801c4d2:	e9c0 3300 	strd	r3, r3, [r0]
 801c4d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c4da:	6083      	str	r3, [r0, #8]
 801c4dc:	8181      	strh	r1, [r0, #12]
 801c4de:	6643      	str	r3, [r0, #100]	@ 0x64
 801c4e0:	81c2      	strh	r2, [r0, #14]
 801c4e2:	6183      	str	r3, [r0, #24]
 801c4e4:	4619      	mov	r1, r3
 801c4e6:	2208      	movs	r2, #8
 801c4e8:	305c      	adds	r0, #92	@ 0x5c
 801c4ea:	f000 fa11 	bl	801c910 <memset>
 801c4ee:	4b0d      	ldr	r3, [pc, #52]	@ (801c524 <std+0x58>)
 801c4f0:	6263      	str	r3, [r4, #36]	@ 0x24
 801c4f2:	4b0d      	ldr	r3, [pc, #52]	@ (801c528 <std+0x5c>)
 801c4f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c4f6:	4b0d      	ldr	r3, [pc, #52]	@ (801c52c <std+0x60>)
 801c4f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c4fa:	4b0d      	ldr	r3, [pc, #52]	@ (801c530 <std+0x64>)
 801c4fc:	6323      	str	r3, [r4, #48]	@ 0x30
 801c4fe:	4b0d      	ldr	r3, [pc, #52]	@ (801c534 <std+0x68>)
 801c500:	6224      	str	r4, [r4, #32]
 801c502:	429c      	cmp	r4, r3
 801c504:	d006      	beq.n	801c514 <std+0x48>
 801c506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c50a:	4294      	cmp	r4, r2
 801c50c:	d002      	beq.n	801c514 <std+0x48>
 801c50e:	33d0      	adds	r3, #208	@ 0xd0
 801c510:	429c      	cmp	r4, r3
 801c512:	d105      	bne.n	801c520 <std+0x54>
 801c514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c51c:	f000 ba6a 	b.w	801c9f4 <__retarget_lock_init_recursive>
 801c520:	bd10      	pop	{r4, pc}
 801c522:	bf00      	nop
 801c524:	0801c741 	.word	0x0801c741
 801c528:	0801c763 	.word	0x0801c763
 801c52c:	0801c79b 	.word	0x0801c79b
 801c530:	0801c7bf 	.word	0x0801c7bf
 801c534:	20022904 	.word	0x20022904

0801c538 <stdio_exit_handler>:
 801c538:	4a02      	ldr	r2, [pc, #8]	@ (801c544 <stdio_exit_handler+0xc>)
 801c53a:	4903      	ldr	r1, [pc, #12]	@ (801c548 <stdio_exit_handler+0x10>)
 801c53c:	4803      	ldr	r0, [pc, #12]	@ (801c54c <stdio_exit_handler+0x14>)
 801c53e:	f000 b869 	b.w	801c614 <_fwalk_sglue>
 801c542:	bf00      	nop
 801c544:	20000074 	.word	0x20000074
 801c548:	0801d2f9 	.word	0x0801d2f9
 801c54c:	20000084 	.word	0x20000084

0801c550 <cleanup_stdio>:
 801c550:	6841      	ldr	r1, [r0, #4]
 801c552:	4b0c      	ldr	r3, [pc, #48]	@ (801c584 <cleanup_stdio+0x34>)
 801c554:	4299      	cmp	r1, r3
 801c556:	b510      	push	{r4, lr}
 801c558:	4604      	mov	r4, r0
 801c55a:	d001      	beq.n	801c560 <cleanup_stdio+0x10>
 801c55c:	f000 fecc 	bl	801d2f8 <_fflush_r>
 801c560:	68a1      	ldr	r1, [r4, #8]
 801c562:	4b09      	ldr	r3, [pc, #36]	@ (801c588 <cleanup_stdio+0x38>)
 801c564:	4299      	cmp	r1, r3
 801c566:	d002      	beq.n	801c56e <cleanup_stdio+0x1e>
 801c568:	4620      	mov	r0, r4
 801c56a:	f000 fec5 	bl	801d2f8 <_fflush_r>
 801c56e:	68e1      	ldr	r1, [r4, #12]
 801c570:	4b06      	ldr	r3, [pc, #24]	@ (801c58c <cleanup_stdio+0x3c>)
 801c572:	4299      	cmp	r1, r3
 801c574:	d004      	beq.n	801c580 <cleanup_stdio+0x30>
 801c576:	4620      	mov	r0, r4
 801c578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c57c:	f000 bebc 	b.w	801d2f8 <_fflush_r>
 801c580:	bd10      	pop	{r4, pc}
 801c582:	bf00      	nop
 801c584:	20022904 	.word	0x20022904
 801c588:	2002296c 	.word	0x2002296c
 801c58c:	200229d4 	.word	0x200229d4

0801c590 <global_stdio_init.part.0>:
 801c590:	b510      	push	{r4, lr}
 801c592:	4b0b      	ldr	r3, [pc, #44]	@ (801c5c0 <global_stdio_init.part.0+0x30>)
 801c594:	4c0b      	ldr	r4, [pc, #44]	@ (801c5c4 <global_stdio_init.part.0+0x34>)
 801c596:	4a0c      	ldr	r2, [pc, #48]	@ (801c5c8 <global_stdio_init.part.0+0x38>)
 801c598:	601a      	str	r2, [r3, #0]
 801c59a:	4620      	mov	r0, r4
 801c59c:	2200      	movs	r2, #0
 801c59e:	2104      	movs	r1, #4
 801c5a0:	f7ff ff94 	bl	801c4cc <std>
 801c5a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c5a8:	2201      	movs	r2, #1
 801c5aa:	2109      	movs	r1, #9
 801c5ac:	f7ff ff8e 	bl	801c4cc <std>
 801c5b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c5b4:	2202      	movs	r2, #2
 801c5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5ba:	2112      	movs	r1, #18
 801c5bc:	f7ff bf86 	b.w	801c4cc <std>
 801c5c0:	20022a3c 	.word	0x20022a3c
 801c5c4:	20022904 	.word	0x20022904
 801c5c8:	0801c539 	.word	0x0801c539

0801c5cc <__sfp_lock_acquire>:
 801c5cc:	4801      	ldr	r0, [pc, #4]	@ (801c5d4 <__sfp_lock_acquire+0x8>)
 801c5ce:	f000 ba12 	b.w	801c9f6 <__retarget_lock_acquire_recursive>
 801c5d2:	bf00      	nop
 801c5d4:	20022a45 	.word	0x20022a45

0801c5d8 <__sfp_lock_release>:
 801c5d8:	4801      	ldr	r0, [pc, #4]	@ (801c5e0 <__sfp_lock_release+0x8>)
 801c5da:	f000 ba0d 	b.w	801c9f8 <__retarget_lock_release_recursive>
 801c5de:	bf00      	nop
 801c5e0:	20022a45 	.word	0x20022a45

0801c5e4 <__sinit>:
 801c5e4:	b510      	push	{r4, lr}
 801c5e6:	4604      	mov	r4, r0
 801c5e8:	f7ff fff0 	bl	801c5cc <__sfp_lock_acquire>
 801c5ec:	6a23      	ldr	r3, [r4, #32]
 801c5ee:	b11b      	cbz	r3, 801c5f8 <__sinit+0x14>
 801c5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5f4:	f7ff bff0 	b.w	801c5d8 <__sfp_lock_release>
 801c5f8:	4b04      	ldr	r3, [pc, #16]	@ (801c60c <__sinit+0x28>)
 801c5fa:	6223      	str	r3, [r4, #32]
 801c5fc:	4b04      	ldr	r3, [pc, #16]	@ (801c610 <__sinit+0x2c>)
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d1f5      	bne.n	801c5f0 <__sinit+0xc>
 801c604:	f7ff ffc4 	bl	801c590 <global_stdio_init.part.0>
 801c608:	e7f2      	b.n	801c5f0 <__sinit+0xc>
 801c60a:	bf00      	nop
 801c60c:	0801c551 	.word	0x0801c551
 801c610:	20022a3c 	.word	0x20022a3c

0801c614 <_fwalk_sglue>:
 801c614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c618:	4607      	mov	r7, r0
 801c61a:	4688      	mov	r8, r1
 801c61c:	4614      	mov	r4, r2
 801c61e:	2600      	movs	r6, #0
 801c620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c624:	f1b9 0901 	subs.w	r9, r9, #1
 801c628:	d505      	bpl.n	801c636 <_fwalk_sglue+0x22>
 801c62a:	6824      	ldr	r4, [r4, #0]
 801c62c:	2c00      	cmp	r4, #0
 801c62e:	d1f7      	bne.n	801c620 <_fwalk_sglue+0xc>
 801c630:	4630      	mov	r0, r6
 801c632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c636:	89ab      	ldrh	r3, [r5, #12]
 801c638:	2b01      	cmp	r3, #1
 801c63a:	d907      	bls.n	801c64c <_fwalk_sglue+0x38>
 801c63c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c640:	3301      	adds	r3, #1
 801c642:	d003      	beq.n	801c64c <_fwalk_sglue+0x38>
 801c644:	4629      	mov	r1, r5
 801c646:	4638      	mov	r0, r7
 801c648:	47c0      	blx	r8
 801c64a:	4306      	orrs	r6, r0
 801c64c:	3568      	adds	r5, #104	@ 0x68
 801c64e:	e7e9      	b.n	801c624 <_fwalk_sglue+0x10>

0801c650 <iprintf>:
 801c650:	b40f      	push	{r0, r1, r2, r3}
 801c652:	b507      	push	{r0, r1, r2, lr}
 801c654:	4906      	ldr	r1, [pc, #24]	@ (801c670 <iprintf+0x20>)
 801c656:	ab04      	add	r3, sp, #16
 801c658:	6808      	ldr	r0, [r1, #0]
 801c65a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c65e:	6881      	ldr	r1, [r0, #8]
 801c660:	9301      	str	r3, [sp, #4]
 801c662:	f000 fb21 	bl	801cca8 <_vfiprintf_r>
 801c666:	b003      	add	sp, #12
 801c668:	f85d eb04 	ldr.w	lr, [sp], #4
 801c66c:	b004      	add	sp, #16
 801c66e:	4770      	bx	lr
 801c670:	20000080 	.word	0x20000080

0801c674 <putchar>:
 801c674:	4b02      	ldr	r3, [pc, #8]	@ (801c680 <putchar+0xc>)
 801c676:	4601      	mov	r1, r0
 801c678:	6818      	ldr	r0, [r3, #0]
 801c67a:	6882      	ldr	r2, [r0, #8]
 801c67c:	f000 bed8 	b.w	801d430 <_putc_r>
 801c680:	20000080 	.word	0x20000080

0801c684 <_puts_r>:
 801c684:	6a03      	ldr	r3, [r0, #32]
 801c686:	b570      	push	{r4, r5, r6, lr}
 801c688:	6884      	ldr	r4, [r0, #8]
 801c68a:	4605      	mov	r5, r0
 801c68c:	460e      	mov	r6, r1
 801c68e:	b90b      	cbnz	r3, 801c694 <_puts_r+0x10>
 801c690:	f7ff ffa8 	bl	801c5e4 <__sinit>
 801c694:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c696:	07db      	lsls	r3, r3, #31
 801c698:	d405      	bmi.n	801c6a6 <_puts_r+0x22>
 801c69a:	89a3      	ldrh	r3, [r4, #12]
 801c69c:	0598      	lsls	r0, r3, #22
 801c69e:	d402      	bmi.n	801c6a6 <_puts_r+0x22>
 801c6a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c6a2:	f000 f9a8 	bl	801c9f6 <__retarget_lock_acquire_recursive>
 801c6a6:	89a3      	ldrh	r3, [r4, #12]
 801c6a8:	0719      	lsls	r1, r3, #28
 801c6aa:	d502      	bpl.n	801c6b2 <_puts_r+0x2e>
 801c6ac:	6923      	ldr	r3, [r4, #16]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d135      	bne.n	801c71e <_puts_r+0x9a>
 801c6b2:	4621      	mov	r1, r4
 801c6b4:	4628      	mov	r0, r5
 801c6b6:	f000 f8c5 	bl	801c844 <__swsetup_r>
 801c6ba:	b380      	cbz	r0, 801c71e <_puts_r+0x9a>
 801c6bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801c6c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c6c2:	07da      	lsls	r2, r3, #31
 801c6c4:	d405      	bmi.n	801c6d2 <_puts_r+0x4e>
 801c6c6:	89a3      	ldrh	r3, [r4, #12]
 801c6c8:	059b      	lsls	r3, r3, #22
 801c6ca:	d402      	bmi.n	801c6d2 <_puts_r+0x4e>
 801c6cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c6ce:	f000 f993 	bl	801c9f8 <__retarget_lock_release_recursive>
 801c6d2:	4628      	mov	r0, r5
 801c6d4:	bd70      	pop	{r4, r5, r6, pc}
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	da04      	bge.n	801c6e4 <_puts_r+0x60>
 801c6da:	69a2      	ldr	r2, [r4, #24]
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	dc17      	bgt.n	801c710 <_puts_r+0x8c>
 801c6e0:	290a      	cmp	r1, #10
 801c6e2:	d015      	beq.n	801c710 <_puts_r+0x8c>
 801c6e4:	6823      	ldr	r3, [r4, #0]
 801c6e6:	1c5a      	adds	r2, r3, #1
 801c6e8:	6022      	str	r2, [r4, #0]
 801c6ea:	7019      	strb	r1, [r3, #0]
 801c6ec:	68a3      	ldr	r3, [r4, #8]
 801c6ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c6f2:	3b01      	subs	r3, #1
 801c6f4:	60a3      	str	r3, [r4, #8]
 801c6f6:	2900      	cmp	r1, #0
 801c6f8:	d1ed      	bne.n	801c6d6 <_puts_r+0x52>
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	da11      	bge.n	801c722 <_puts_r+0x9e>
 801c6fe:	4622      	mov	r2, r4
 801c700:	210a      	movs	r1, #10
 801c702:	4628      	mov	r0, r5
 801c704:	f000 f85f 	bl	801c7c6 <__swbuf_r>
 801c708:	3001      	adds	r0, #1
 801c70a:	d0d7      	beq.n	801c6bc <_puts_r+0x38>
 801c70c:	250a      	movs	r5, #10
 801c70e:	e7d7      	b.n	801c6c0 <_puts_r+0x3c>
 801c710:	4622      	mov	r2, r4
 801c712:	4628      	mov	r0, r5
 801c714:	f000 f857 	bl	801c7c6 <__swbuf_r>
 801c718:	3001      	adds	r0, #1
 801c71a:	d1e7      	bne.n	801c6ec <_puts_r+0x68>
 801c71c:	e7ce      	b.n	801c6bc <_puts_r+0x38>
 801c71e:	3e01      	subs	r6, #1
 801c720:	e7e4      	b.n	801c6ec <_puts_r+0x68>
 801c722:	6823      	ldr	r3, [r4, #0]
 801c724:	1c5a      	adds	r2, r3, #1
 801c726:	6022      	str	r2, [r4, #0]
 801c728:	220a      	movs	r2, #10
 801c72a:	701a      	strb	r2, [r3, #0]
 801c72c:	e7ee      	b.n	801c70c <_puts_r+0x88>
	...

0801c730 <puts>:
 801c730:	4b02      	ldr	r3, [pc, #8]	@ (801c73c <puts+0xc>)
 801c732:	4601      	mov	r1, r0
 801c734:	6818      	ldr	r0, [r3, #0]
 801c736:	f7ff bfa5 	b.w	801c684 <_puts_r>
 801c73a:	bf00      	nop
 801c73c:	20000080 	.word	0x20000080

0801c740 <__sread>:
 801c740:	b510      	push	{r4, lr}
 801c742:	460c      	mov	r4, r1
 801c744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c748:	f000 f90c 	bl	801c964 <_read_r>
 801c74c:	2800      	cmp	r0, #0
 801c74e:	bfab      	itete	ge
 801c750:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c752:	89a3      	ldrhlt	r3, [r4, #12]
 801c754:	181b      	addge	r3, r3, r0
 801c756:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c75a:	bfac      	ite	ge
 801c75c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c75e:	81a3      	strhlt	r3, [r4, #12]
 801c760:	bd10      	pop	{r4, pc}

0801c762 <__swrite>:
 801c762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c766:	461f      	mov	r7, r3
 801c768:	898b      	ldrh	r3, [r1, #12]
 801c76a:	05db      	lsls	r3, r3, #23
 801c76c:	4605      	mov	r5, r0
 801c76e:	460c      	mov	r4, r1
 801c770:	4616      	mov	r6, r2
 801c772:	d505      	bpl.n	801c780 <__swrite+0x1e>
 801c774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c778:	2302      	movs	r3, #2
 801c77a:	2200      	movs	r2, #0
 801c77c:	f000 f8e0 	bl	801c940 <_lseek_r>
 801c780:	89a3      	ldrh	r3, [r4, #12]
 801c782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c78a:	81a3      	strh	r3, [r4, #12]
 801c78c:	4632      	mov	r2, r6
 801c78e:	463b      	mov	r3, r7
 801c790:	4628      	mov	r0, r5
 801c792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c796:	f000 b8f7 	b.w	801c988 <_write_r>

0801c79a <__sseek>:
 801c79a:	b510      	push	{r4, lr}
 801c79c:	460c      	mov	r4, r1
 801c79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7a2:	f000 f8cd 	bl	801c940 <_lseek_r>
 801c7a6:	1c43      	adds	r3, r0, #1
 801c7a8:	89a3      	ldrh	r3, [r4, #12]
 801c7aa:	bf15      	itete	ne
 801c7ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c7ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c7b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c7b6:	81a3      	strheq	r3, [r4, #12]
 801c7b8:	bf18      	it	ne
 801c7ba:	81a3      	strhne	r3, [r4, #12]
 801c7bc:	bd10      	pop	{r4, pc}

0801c7be <__sclose>:
 801c7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7c2:	f000 b8ad 	b.w	801c920 <_close_r>

0801c7c6 <__swbuf_r>:
 801c7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7c8:	460e      	mov	r6, r1
 801c7ca:	4614      	mov	r4, r2
 801c7cc:	4605      	mov	r5, r0
 801c7ce:	b118      	cbz	r0, 801c7d8 <__swbuf_r+0x12>
 801c7d0:	6a03      	ldr	r3, [r0, #32]
 801c7d2:	b90b      	cbnz	r3, 801c7d8 <__swbuf_r+0x12>
 801c7d4:	f7ff ff06 	bl	801c5e4 <__sinit>
 801c7d8:	69a3      	ldr	r3, [r4, #24]
 801c7da:	60a3      	str	r3, [r4, #8]
 801c7dc:	89a3      	ldrh	r3, [r4, #12]
 801c7de:	071a      	lsls	r2, r3, #28
 801c7e0:	d501      	bpl.n	801c7e6 <__swbuf_r+0x20>
 801c7e2:	6923      	ldr	r3, [r4, #16]
 801c7e4:	b943      	cbnz	r3, 801c7f8 <__swbuf_r+0x32>
 801c7e6:	4621      	mov	r1, r4
 801c7e8:	4628      	mov	r0, r5
 801c7ea:	f000 f82b 	bl	801c844 <__swsetup_r>
 801c7ee:	b118      	cbz	r0, 801c7f8 <__swbuf_r+0x32>
 801c7f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c7f4:	4638      	mov	r0, r7
 801c7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7f8:	6823      	ldr	r3, [r4, #0]
 801c7fa:	6922      	ldr	r2, [r4, #16]
 801c7fc:	1a98      	subs	r0, r3, r2
 801c7fe:	6963      	ldr	r3, [r4, #20]
 801c800:	b2f6      	uxtb	r6, r6
 801c802:	4283      	cmp	r3, r0
 801c804:	4637      	mov	r7, r6
 801c806:	dc05      	bgt.n	801c814 <__swbuf_r+0x4e>
 801c808:	4621      	mov	r1, r4
 801c80a:	4628      	mov	r0, r5
 801c80c:	f000 fd74 	bl	801d2f8 <_fflush_r>
 801c810:	2800      	cmp	r0, #0
 801c812:	d1ed      	bne.n	801c7f0 <__swbuf_r+0x2a>
 801c814:	68a3      	ldr	r3, [r4, #8]
 801c816:	3b01      	subs	r3, #1
 801c818:	60a3      	str	r3, [r4, #8]
 801c81a:	6823      	ldr	r3, [r4, #0]
 801c81c:	1c5a      	adds	r2, r3, #1
 801c81e:	6022      	str	r2, [r4, #0]
 801c820:	701e      	strb	r6, [r3, #0]
 801c822:	6962      	ldr	r2, [r4, #20]
 801c824:	1c43      	adds	r3, r0, #1
 801c826:	429a      	cmp	r2, r3
 801c828:	d004      	beq.n	801c834 <__swbuf_r+0x6e>
 801c82a:	89a3      	ldrh	r3, [r4, #12]
 801c82c:	07db      	lsls	r3, r3, #31
 801c82e:	d5e1      	bpl.n	801c7f4 <__swbuf_r+0x2e>
 801c830:	2e0a      	cmp	r6, #10
 801c832:	d1df      	bne.n	801c7f4 <__swbuf_r+0x2e>
 801c834:	4621      	mov	r1, r4
 801c836:	4628      	mov	r0, r5
 801c838:	f000 fd5e 	bl	801d2f8 <_fflush_r>
 801c83c:	2800      	cmp	r0, #0
 801c83e:	d0d9      	beq.n	801c7f4 <__swbuf_r+0x2e>
 801c840:	e7d6      	b.n	801c7f0 <__swbuf_r+0x2a>
	...

0801c844 <__swsetup_r>:
 801c844:	b538      	push	{r3, r4, r5, lr}
 801c846:	4b29      	ldr	r3, [pc, #164]	@ (801c8ec <__swsetup_r+0xa8>)
 801c848:	4605      	mov	r5, r0
 801c84a:	6818      	ldr	r0, [r3, #0]
 801c84c:	460c      	mov	r4, r1
 801c84e:	b118      	cbz	r0, 801c858 <__swsetup_r+0x14>
 801c850:	6a03      	ldr	r3, [r0, #32]
 801c852:	b90b      	cbnz	r3, 801c858 <__swsetup_r+0x14>
 801c854:	f7ff fec6 	bl	801c5e4 <__sinit>
 801c858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c85c:	0719      	lsls	r1, r3, #28
 801c85e:	d422      	bmi.n	801c8a6 <__swsetup_r+0x62>
 801c860:	06da      	lsls	r2, r3, #27
 801c862:	d407      	bmi.n	801c874 <__swsetup_r+0x30>
 801c864:	2209      	movs	r2, #9
 801c866:	602a      	str	r2, [r5, #0]
 801c868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c86c:	81a3      	strh	r3, [r4, #12]
 801c86e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c872:	e033      	b.n	801c8dc <__swsetup_r+0x98>
 801c874:	0758      	lsls	r0, r3, #29
 801c876:	d512      	bpl.n	801c89e <__swsetup_r+0x5a>
 801c878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c87a:	b141      	cbz	r1, 801c88e <__swsetup_r+0x4a>
 801c87c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c880:	4299      	cmp	r1, r3
 801c882:	d002      	beq.n	801c88a <__swsetup_r+0x46>
 801c884:	4628      	mov	r0, r5
 801c886:	f000 f8e5 	bl	801ca54 <_free_r>
 801c88a:	2300      	movs	r3, #0
 801c88c:	6363      	str	r3, [r4, #52]	@ 0x34
 801c88e:	89a3      	ldrh	r3, [r4, #12]
 801c890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c894:	81a3      	strh	r3, [r4, #12]
 801c896:	2300      	movs	r3, #0
 801c898:	6063      	str	r3, [r4, #4]
 801c89a:	6923      	ldr	r3, [r4, #16]
 801c89c:	6023      	str	r3, [r4, #0]
 801c89e:	89a3      	ldrh	r3, [r4, #12]
 801c8a0:	f043 0308 	orr.w	r3, r3, #8
 801c8a4:	81a3      	strh	r3, [r4, #12]
 801c8a6:	6923      	ldr	r3, [r4, #16]
 801c8a8:	b94b      	cbnz	r3, 801c8be <__swsetup_r+0x7a>
 801c8aa:	89a3      	ldrh	r3, [r4, #12]
 801c8ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c8b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c8b4:	d003      	beq.n	801c8be <__swsetup_r+0x7a>
 801c8b6:	4621      	mov	r1, r4
 801c8b8:	4628      	mov	r0, r5
 801c8ba:	f000 fd7d 	bl	801d3b8 <__smakebuf_r>
 801c8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8c2:	f013 0201 	ands.w	r2, r3, #1
 801c8c6:	d00a      	beq.n	801c8de <__swsetup_r+0x9a>
 801c8c8:	2200      	movs	r2, #0
 801c8ca:	60a2      	str	r2, [r4, #8]
 801c8cc:	6962      	ldr	r2, [r4, #20]
 801c8ce:	4252      	negs	r2, r2
 801c8d0:	61a2      	str	r2, [r4, #24]
 801c8d2:	6922      	ldr	r2, [r4, #16]
 801c8d4:	b942      	cbnz	r2, 801c8e8 <__swsetup_r+0xa4>
 801c8d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c8da:	d1c5      	bne.n	801c868 <__swsetup_r+0x24>
 801c8dc:	bd38      	pop	{r3, r4, r5, pc}
 801c8de:	0799      	lsls	r1, r3, #30
 801c8e0:	bf58      	it	pl
 801c8e2:	6962      	ldrpl	r2, [r4, #20]
 801c8e4:	60a2      	str	r2, [r4, #8]
 801c8e6:	e7f4      	b.n	801c8d2 <__swsetup_r+0x8e>
 801c8e8:	2000      	movs	r0, #0
 801c8ea:	e7f7      	b.n	801c8dc <__swsetup_r+0x98>
 801c8ec:	20000080 	.word	0x20000080

0801c8f0 <memcmp>:
 801c8f0:	b510      	push	{r4, lr}
 801c8f2:	3901      	subs	r1, #1
 801c8f4:	4402      	add	r2, r0
 801c8f6:	4290      	cmp	r0, r2
 801c8f8:	d101      	bne.n	801c8fe <memcmp+0xe>
 801c8fa:	2000      	movs	r0, #0
 801c8fc:	e005      	b.n	801c90a <memcmp+0x1a>
 801c8fe:	7803      	ldrb	r3, [r0, #0]
 801c900:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c904:	42a3      	cmp	r3, r4
 801c906:	d001      	beq.n	801c90c <memcmp+0x1c>
 801c908:	1b18      	subs	r0, r3, r4
 801c90a:	bd10      	pop	{r4, pc}
 801c90c:	3001      	adds	r0, #1
 801c90e:	e7f2      	b.n	801c8f6 <memcmp+0x6>

0801c910 <memset>:
 801c910:	4402      	add	r2, r0
 801c912:	4603      	mov	r3, r0
 801c914:	4293      	cmp	r3, r2
 801c916:	d100      	bne.n	801c91a <memset+0xa>
 801c918:	4770      	bx	lr
 801c91a:	f803 1b01 	strb.w	r1, [r3], #1
 801c91e:	e7f9      	b.n	801c914 <memset+0x4>

0801c920 <_close_r>:
 801c920:	b538      	push	{r3, r4, r5, lr}
 801c922:	4d06      	ldr	r5, [pc, #24]	@ (801c93c <_close_r+0x1c>)
 801c924:	2300      	movs	r3, #0
 801c926:	4604      	mov	r4, r0
 801c928:	4608      	mov	r0, r1
 801c92a:	602b      	str	r3, [r5, #0]
 801c92c:	f7e5 f888 	bl	8001a40 <_close>
 801c930:	1c43      	adds	r3, r0, #1
 801c932:	d102      	bne.n	801c93a <_close_r+0x1a>
 801c934:	682b      	ldr	r3, [r5, #0]
 801c936:	b103      	cbz	r3, 801c93a <_close_r+0x1a>
 801c938:	6023      	str	r3, [r4, #0]
 801c93a:	bd38      	pop	{r3, r4, r5, pc}
 801c93c:	20022a40 	.word	0x20022a40

0801c940 <_lseek_r>:
 801c940:	b538      	push	{r3, r4, r5, lr}
 801c942:	4d07      	ldr	r5, [pc, #28]	@ (801c960 <_lseek_r+0x20>)
 801c944:	4604      	mov	r4, r0
 801c946:	4608      	mov	r0, r1
 801c948:	4611      	mov	r1, r2
 801c94a:	2200      	movs	r2, #0
 801c94c:	602a      	str	r2, [r5, #0]
 801c94e:	461a      	mov	r2, r3
 801c950:	f7e5 f89d 	bl	8001a8e <_lseek>
 801c954:	1c43      	adds	r3, r0, #1
 801c956:	d102      	bne.n	801c95e <_lseek_r+0x1e>
 801c958:	682b      	ldr	r3, [r5, #0]
 801c95a:	b103      	cbz	r3, 801c95e <_lseek_r+0x1e>
 801c95c:	6023      	str	r3, [r4, #0]
 801c95e:	bd38      	pop	{r3, r4, r5, pc}
 801c960:	20022a40 	.word	0x20022a40

0801c964 <_read_r>:
 801c964:	b538      	push	{r3, r4, r5, lr}
 801c966:	4d07      	ldr	r5, [pc, #28]	@ (801c984 <_read_r+0x20>)
 801c968:	4604      	mov	r4, r0
 801c96a:	4608      	mov	r0, r1
 801c96c:	4611      	mov	r1, r2
 801c96e:	2200      	movs	r2, #0
 801c970:	602a      	str	r2, [r5, #0]
 801c972:	461a      	mov	r2, r3
 801c974:	f7e5 f847 	bl	8001a06 <_read>
 801c978:	1c43      	adds	r3, r0, #1
 801c97a:	d102      	bne.n	801c982 <_read_r+0x1e>
 801c97c:	682b      	ldr	r3, [r5, #0]
 801c97e:	b103      	cbz	r3, 801c982 <_read_r+0x1e>
 801c980:	6023      	str	r3, [r4, #0]
 801c982:	bd38      	pop	{r3, r4, r5, pc}
 801c984:	20022a40 	.word	0x20022a40

0801c988 <_write_r>:
 801c988:	b538      	push	{r3, r4, r5, lr}
 801c98a:	4d07      	ldr	r5, [pc, #28]	@ (801c9a8 <_write_r+0x20>)
 801c98c:	4604      	mov	r4, r0
 801c98e:	4608      	mov	r0, r1
 801c990:	4611      	mov	r1, r2
 801c992:	2200      	movs	r2, #0
 801c994:	602a      	str	r2, [r5, #0]
 801c996:	461a      	mov	r2, r3
 801c998:	f7e4 fba6 	bl	80010e8 <_write>
 801c99c:	1c43      	adds	r3, r0, #1
 801c99e:	d102      	bne.n	801c9a6 <_write_r+0x1e>
 801c9a0:	682b      	ldr	r3, [r5, #0]
 801c9a2:	b103      	cbz	r3, 801c9a6 <_write_r+0x1e>
 801c9a4:	6023      	str	r3, [r4, #0]
 801c9a6:	bd38      	pop	{r3, r4, r5, pc}
 801c9a8:	20022a40 	.word	0x20022a40

0801c9ac <__libc_init_array>:
 801c9ac:	b570      	push	{r4, r5, r6, lr}
 801c9ae:	4d0d      	ldr	r5, [pc, #52]	@ (801c9e4 <__libc_init_array+0x38>)
 801c9b0:	4c0d      	ldr	r4, [pc, #52]	@ (801c9e8 <__libc_init_array+0x3c>)
 801c9b2:	1b64      	subs	r4, r4, r5
 801c9b4:	10a4      	asrs	r4, r4, #2
 801c9b6:	2600      	movs	r6, #0
 801c9b8:	42a6      	cmp	r6, r4
 801c9ba:	d109      	bne.n	801c9d0 <__libc_init_array+0x24>
 801c9bc:	4d0b      	ldr	r5, [pc, #44]	@ (801c9ec <__libc_init_array+0x40>)
 801c9be:	4c0c      	ldr	r4, [pc, #48]	@ (801c9f0 <__libc_init_array+0x44>)
 801c9c0:	f000 fde8 	bl	801d594 <_init>
 801c9c4:	1b64      	subs	r4, r4, r5
 801c9c6:	10a4      	asrs	r4, r4, #2
 801c9c8:	2600      	movs	r6, #0
 801c9ca:	42a6      	cmp	r6, r4
 801c9cc:	d105      	bne.n	801c9da <__libc_init_array+0x2e>
 801c9ce:	bd70      	pop	{r4, r5, r6, pc}
 801c9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801c9d4:	4798      	blx	r3
 801c9d6:	3601      	adds	r6, #1
 801c9d8:	e7ee      	b.n	801c9b8 <__libc_init_array+0xc>
 801c9da:	f855 3b04 	ldr.w	r3, [r5], #4
 801c9de:	4798      	blx	r3
 801c9e0:	3601      	adds	r6, #1
 801c9e2:	e7f2      	b.n	801c9ca <__libc_init_array+0x1e>
 801c9e4:	08021bf8 	.word	0x08021bf8
 801c9e8:	08021bf8 	.word	0x08021bf8
 801c9ec:	08021bf8 	.word	0x08021bf8
 801c9f0:	08021bfc 	.word	0x08021bfc

0801c9f4 <__retarget_lock_init_recursive>:
 801c9f4:	4770      	bx	lr

0801c9f6 <__retarget_lock_acquire_recursive>:
 801c9f6:	4770      	bx	lr

0801c9f8 <__retarget_lock_release_recursive>:
 801c9f8:	4770      	bx	lr

0801c9fa <memcpy>:
 801c9fa:	440a      	add	r2, r1
 801c9fc:	4291      	cmp	r1, r2
 801c9fe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801ca02:	d100      	bne.n	801ca06 <memcpy+0xc>
 801ca04:	4770      	bx	lr
 801ca06:	b510      	push	{r4, lr}
 801ca08:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ca0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ca10:	4291      	cmp	r1, r2
 801ca12:	d1f9      	bne.n	801ca08 <memcpy+0xe>
 801ca14:	bd10      	pop	{r4, pc}
	...

0801ca18 <__assert_func>:
 801ca18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ca1a:	4614      	mov	r4, r2
 801ca1c:	461a      	mov	r2, r3
 801ca1e:	4b09      	ldr	r3, [pc, #36]	@ (801ca44 <__assert_func+0x2c>)
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	4605      	mov	r5, r0
 801ca24:	68d8      	ldr	r0, [r3, #12]
 801ca26:	b14c      	cbz	r4, 801ca3c <__assert_func+0x24>
 801ca28:	4b07      	ldr	r3, [pc, #28]	@ (801ca48 <__assert_func+0x30>)
 801ca2a:	9100      	str	r1, [sp, #0]
 801ca2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ca30:	4906      	ldr	r1, [pc, #24]	@ (801ca4c <__assert_func+0x34>)
 801ca32:	462b      	mov	r3, r5
 801ca34:	f000 fc88 	bl	801d348 <fiprintf>
 801ca38:	f000 fd60 	bl	801d4fc <abort>
 801ca3c:	4b04      	ldr	r3, [pc, #16]	@ (801ca50 <__assert_func+0x38>)
 801ca3e:	461c      	mov	r4, r3
 801ca40:	e7f3      	b.n	801ca2a <__assert_func+0x12>
 801ca42:	bf00      	nop
 801ca44:	20000080 	.word	0x20000080
 801ca48:	08021b81 	.word	0x08021b81
 801ca4c:	08021b8e 	.word	0x08021b8e
 801ca50:	08021bbc 	.word	0x08021bbc

0801ca54 <_free_r>:
 801ca54:	b538      	push	{r3, r4, r5, lr}
 801ca56:	4605      	mov	r5, r0
 801ca58:	2900      	cmp	r1, #0
 801ca5a:	d041      	beq.n	801cae0 <_free_r+0x8c>
 801ca5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca60:	1f0c      	subs	r4, r1, #4
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	bfb8      	it	lt
 801ca66:	18e4      	addlt	r4, r4, r3
 801ca68:	f000 f8e8 	bl	801cc3c <__malloc_lock>
 801ca6c:	4a1d      	ldr	r2, [pc, #116]	@ (801cae4 <_free_r+0x90>)
 801ca6e:	6813      	ldr	r3, [r2, #0]
 801ca70:	b933      	cbnz	r3, 801ca80 <_free_r+0x2c>
 801ca72:	6063      	str	r3, [r4, #4]
 801ca74:	6014      	str	r4, [r2, #0]
 801ca76:	4628      	mov	r0, r5
 801ca78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ca7c:	f000 b8e4 	b.w	801cc48 <__malloc_unlock>
 801ca80:	42a3      	cmp	r3, r4
 801ca82:	d908      	bls.n	801ca96 <_free_r+0x42>
 801ca84:	6820      	ldr	r0, [r4, #0]
 801ca86:	1821      	adds	r1, r4, r0
 801ca88:	428b      	cmp	r3, r1
 801ca8a:	bf01      	itttt	eq
 801ca8c:	6819      	ldreq	r1, [r3, #0]
 801ca8e:	685b      	ldreq	r3, [r3, #4]
 801ca90:	1809      	addeq	r1, r1, r0
 801ca92:	6021      	streq	r1, [r4, #0]
 801ca94:	e7ed      	b.n	801ca72 <_free_r+0x1e>
 801ca96:	461a      	mov	r2, r3
 801ca98:	685b      	ldr	r3, [r3, #4]
 801ca9a:	b10b      	cbz	r3, 801caa0 <_free_r+0x4c>
 801ca9c:	42a3      	cmp	r3, r4
 801ca9e:	d9fa      	bls.n	801ca96 <_free_r+0x42>
 801caa0:	6811      	ldr	r1, [r2, #0]
 801caa2:	1850      	adds	r0, r2, r1
 801caa4:	42a0      	cmp	r0, r4
 801caa6:	d10b      	bne.n	801cac0 <_free_r+0x6c>
 801caa8:	6820      	ldr	r0, [r4, #0]
 801caaa:	4401      	add	r1, r0
 801caac:	1850      	adds	r0, r2, r1
 801caae:	4283      	cmp	r3, r0
 801cab0:	6011      	str	r1, [r2, #0]
 801cab2:	d1e0      	bne.n	801ca76 <_free_r+0x22>
 801cab4:	6818      	ldr	r0, [r3, #0]
 801cab6:	685b      	ldr	r3, [r3, #4]
 801cab8:	6053      	str	r3, [r2, #4]
 801caba:	4408      	add	r0, r1
 801cabc:	6010      	str	r0, [r2, #0]
 801cabe:	e7da      	b.n	801ca76 <_free_r+0x22>
 801cac0:	d902      	bls.n	801cac8 <_free_r+0x74>
 801cac2:	230c      	movs	r3, #12
 801cac4:	602b      	str	r3, [r5, #0]
 801cac6:	e7d6      	b.n	801ca76 <_free_r+0x22>
 801cac8:	6820      	ldr	r0, [r4, #0]
 801caca:	1821      	adds	r1, r4, r0
 801cacc:	428b      	cmp	r3, r1
 801cace:	bf04      	itt	eq
 801cad0:	6819      	ldreq	r1, [r3, #0]
 801cad2:	685b      	ldreq	r3, [r3, #4]
 801cad4:	6063      	str	r3, [r4, #4]
 801cad6:	bf04      	itt	eq
 801cad8:	1809      	addeq	r1, r1, r0
 801cada:	6021      	streq	r1, [r4, #0]
 801cadc:	6054      	str	r4, [r2, #4]
 801cade:	e7ca      	b.n	801ca76 <_free_r+0x22>
 801cae0:	bd38      	pop	{r3, r4, r5, pc}
 801cae2:	bf00      	nop
 801cae4:	20022a4c 	.word	0x20022a4c

0801cae8 <malloc>:
 801cae8:	4b02      	ldr	r3, [pc, #8]	@ (801caf4 <malloc+0xc>)
 801caea:	4601      	mov	r1, r0
 801caec:	6818      	ldr	r0, [r3, #0]
 801caee:	f000 b825 	b.w	801cb3c <_malloc_r>
 801caf2:	bf00      	nop
 801caf4:	20000080 	.word	0x20000080

0801caf8 <sbrk_aligned>:
 801caf8:	b570      	push	{r4, r5, r6, lr}
 801cafa:	4e0f      	ldr	r6, [pc, #60]	@ (801cb38 <sbrk_aligned+0x40>)
 801cafc:	460c      	mov	r4, r1
 801cafe:	6831      	ldr	r1, [r6, #0]
 801cb00:	4605      	mov	r5, r0
 801cb02:	b911      	cbnz	r1, 801cb0a <sbrk_aligned+0x12>
 801cb04:	f000 fcea 	bl	801d4dc <_sbrk_r>
 801cb08:	6030      	str	r0, [r6, #0]
 801cb0a:	4621      	mov	r1, r4
 801cb0c:	4628      	mov	r0, r5
 801cb0e:	f000 fce5 	bl	801d4dc <_sbrk_r>
 801cb12:	1c43      	adds	r3, r0, #1
 801cb14:	d103      	bne.n	801cb1e <sbrk_aligned+0x26>
 801cb16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801cb1a:	4620      	mov	r0, r4
 801cb1c:	bd70      	pop	{r4, r5, r6, pc}
 801cb1e:	1cc4      	adds	r4, r0, #3
 801cb20:	f024 0403 	bic.w	r4, r4, #3
 801cb24:	42a0      	cmp	r0, r4
 801cb26:	d0f8      	beq.n	801cb1a <sbrk_aligned+0x22>
 801cb28:	1a21      	subs	r1, r4, r0
 801cb2a:	4628      	mov	r0, r5
 801cb2c:	f000 fcd6 	bl	801d4dc <_sbrk_r>
 801cb30:	3001      	adds	r0, #1
 801cb32:	d1f2      	bne.n	801cb1a <sbrk_aligned+0x22>
 801cb34:	e7ef      	b.n	801cb16 <sbrk_aligned+0x1e>
 801cb36:	bf00      	nop
 801cb38:	20022a48 	.word	0x20022a48

0801cb3c <_malloc_r>:
 801cb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb40:	1ccd      	adds	r5, r1, #3
 801cb42:	f025 0503 	bic.w	r5, r5, #3
 801cb46:	3508      	adds	r5, #8
 801cb48:	2d0c      	cmp	r5, #12
 801cb4a:	bf38      	it	cc
 801cb4c:	250c      	movcc	r5, #12
 801cb4e:	2d00      	cmp	r5, #0
 801cb50:	4606      	mov	r6, r0
 801cb52:	db01      	blt.n	801cb58 <_malloc_r+0x1c>
 801cb54:	42a9      	cmp	r1, r5
 801cb56:	d904      	bls.n	801cb62 <_malloc_r+0x26>
 801cb58:	230c      	movs	r3, #12
 801cb5a:	6033      	str	r3, [r6, #0]
 801cb5c:	2000      	movs	r0, #0
 801cb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801cc38 <_malloc_r+0xfc>
 801cb66:	f000 f869 	bl	801cc3c <__malloc_lock>
 801cb6a:	f8d8 3000 	ldr.w	r3, [r8]
 801cb6e:	461c      	mov	r4, r3
 801cb70:	bb44      	cbnz	r4, 801cbc4 <_malloc_r+0x88>
 801cb72:	4629      	mov	r1, r5
 801cb74:	4630      	mov	r0, r6
 801cb76:	f7ff ffbf 	bl	801caf8 <sbrk_aligned>
 801cb7a:	1c43      	adds	r3, r0, #1
 801cb7c:	4604      	mov	r4, r0
 801cb7e:	d158      	bne.n	801cc32 <_malloc_r+0xf6>
 801cb80:	f8d8 4000 	ldr.w	r4, [r8]
 801cb84:	4627      	mov	r7, r4
 801cb86:	2f00      	cmp	r7, #0
 801cb88:	d143      	bne.n	801cc12 <_malloc_r+0xd6>
 801cb8a:	2c00      	cmp	r4, #0
 801cb8c:	d04b      	beq.n	801cc26 <_malloc_r+0xea>
 801cb8e:	6823      	ldr	r3, [r4, #0]
 801cb90:	4639      	mov	r1, r7
 801cb92:	4630      	mov	r0, r6
 801cb94:	eb04 0903 	add.w	r9, r4, r3
 801cb98:	f000 fca0 	bl	801d4dc <_sbrk_r>
 801cb9c:	4581      	cmp	r9, r0
 801cb9e:	d142      	bne.n	801cc26 <_malloc_r+0xea>
 801cba0:	6821      	ldr	r1, [r4, #0]
 801cba2:	1a6d      	subs	r5, r5, r1
 801cba4:	4629      	mov	r1, r5
 801cba6:	4630      	mov	r0, r6
 801cba8:	f7ff ffa6 	bl	801caf8 <sbrk_aligned>
 801cbac:	3001      	adds	r0, #1
 801cbae:	d03a      	beq.n	801cc26 <_malloc_r+0xea>
 801cbb0:	6823      	ldr	r3, [r4, #0]
 801cbb2:	442b      	add	r3, r5
 801cbb4:	6023      	str	r3, [r4, #0]
 801cbb6:	f8d8 3000 	ldr.w	r3, [r8]
 801cbba:	685a      	ldr	r2, [r3, #4]
 801cbbc:	bb62      	cbnz	r2, 801cc18 <_malloc_r+0xdc>
 801cbbe:	f8c8 7000 	str.w	r7, [r8]
 801cbc2:	e00f      	b.n	801cbe4 <_malloc_r+0xa8>
 801cbc4:	6822      	ldr	r2, [r4, #0]
 801cbc6:	1b52      	subs	r2, r2, r5
 801cbc8:	d420      	bmi.n	801cc0c <_malloc_r+0xd0>
 801cbca:	2a0b      	cmp	r2, #11
 801cbcc:	d917      	bls.n	801cbfe <_malloc_r+0xc2>
 801cbce:	1961      	adds	r1, r4, r5
 801cbd0:	42a3      	cmp	r3, r4
 801cbd2:	6025      	str	r5, [r4, #0]
 801cbd4:	bf18      	it	ne
 801cbd6:	6059      	strne	r1, [r3, #4]
 801cbd8:	6863      	ldr	r3, [r4, #4]
 801cbda:	bf08      	it	eq
 801cbdc:	f8c8 1000 	streq.w	r1, [r8]
 801cbe0:	5162      	str	r2, [r4, r5]
 801cbe2:	604b      	str	r3, [r1, #4]
 801cbe4:	4630      	mov	r0, r6
 801cbe6:	f000 f82f 	bl	801cc48 <__malloc_unlock>
 801cbea:	f104 000b 	add.w	r0, r4, #11
 801cbee:	1d23      	adds	r3, r4, #4
 801cbf0:	f020 0007 	bic.w	r0, r0, #7
 801cbf4:	1ac2      	subs	r2, r0, r3
 801cbf6:	bf1c      	itt	ne
 801cbf8:	1a1b      	subne	r3, r3, r0
 801cbfa:	50a3      	strne	r3, [r4, r2]
 801cbfc:	e7af      	b.n	801cb5e <_malloc_r+0x22>
 801cbfe:	6862      	ldr	r2, [r4, #4]
 801cc00:	42a3      	cmp	r3, r4
 801cc02:	bf0c      	ite	eq
 801cc04:	f8c8 2000 	streq.w	r2, [r8]
 801cc08:	605a      	strne	r2, [r3, #4]
 801cc0a:	e7eb      	b.n	801cbe4 <_malloc_r+0xa8>
 801cc0c:	4623      	mov	r3, r4
 801cc0e:	6864      	ldr	r4, [r4, #4]
 801cc10:	e7ae      	b.n	801cb70 <_malloc_r+0x34>
 801cc12:	463c      	mov	r4, r7
 801cc14:	687f      	ldr	r7, [r7, #4]
 801cc16:	e7b6      	b.n	801cb86 <_malloc_r+0x4a>
 801cc18:	461a      	mov	r2, r3
 801cc1a:	685b      	ldr	r3, [r3, #4]
 801cc1c:	42a3      	cmp	r3, r4
 801cc1e:	d1fb      	bne.n	801cc18 <_malloc_r+0xdc>
 801cc20:	2300      	movs	r3, #0
 801cc22:	6053      	str	r3, [r2, #4]
 801cc24:	e7de      	b.n	801cbe4 <_malloc_r+0xa8>
 801cc26:	230c      	movs	r3, #12
 801cc28:	6033      	str	r3, [r6, #0]
 801cc2a:	4630      	mov	r0, r6
 801cc2c:	f000 f80c 	bl	801cc48 <__malloc_unlock>
 801cc30:	e794      	b.n	801cb5c <_malloc_r+0x20>
 801cc32:	6005      	str	r5, [r0, #0]
 801cc34:	e7d6      	b.n	801cbe4 <_malloc_r+0xa8>
 801cc36:	bf00      	nop
 801cc38:	20022a4c 	.word	0x20022a4c

0801cc3c <__malloc_lock>:
 801cc3c:	4801      	ldr	r0, [pc, #4]	@ (801cc44 <__malloc_lock+0x8>)
 801cc3e:	f7ff beda 	b.w	801c9f6 <__retarget_lock_acquire_recursive>
 801cc42:	bf00      	nop
 801cc44:	20022a44 	.word	0x20022a44

0801cc48 <__malloc_unlock>:
 801cc48:	4801      	ldr	r0, [pc, #4]	@ (801cc50 <__malloc_unlock+0x8>)
 801cc4a:	f7ff bed5 	b.w	801c9f8 <__retarget_lock_release_recursive>
 801cc4e:	bf00      	nop
 801cc50:	20022a44 	.word	0x20022a44

0801cc54 <__sfputc_r>:
 801cc54:	6893      	ldr	r3, [r2, #8]
 801cc56:	3b01      	subs	r3, #1
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	b410      	push	{r4}
 801cc5c:	6093      	str	r3, [r2, #8]
 801cc5e:	da08      	bge.n	801cc72 <__sfputc_r+0x1e>
 801cc60:	6994      	ldr	r4, [r2, #24]
 801cc62:	42a3      	cmp	r3, r4
 801cc64:	db01      	blt.n	801cc6a <__sfputc_r+0x16>
 801cc66:	290a      	cmp	r1, #10
 801cc68:	d103      	bne.n	801cc72 <__sfputc_r+0x1e>
 801cc6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc6e:	f7ff bdaa 	b.w	801c7c6 <__swbuf_r>
 801cc72:	6813      	ldr	r3, [r2, #0]
 801cc74:	1c58      	adds	r0, r3, #1
 801cc76:	6010      	str	r0, [r2, #0]
 801cc78:	7019      	strb	r1, [r3, #0]
 801cc7a:	4608      	mov	r0, r1
 801cc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc80:	4770      	bx	lr

0801cc82 <__sfputs_r>:
 801cc82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc84:	4606      	mov	r6, r0
 801cc86:	460f      	mov	r7, r1
 801cc88:	4614      	mov	r4, r2
 801cc8a:	18d5      	adds	r5, r2, r3
 801cc8c:	42ac      	cmp	r4, r5
 801cc8e:	d101      	bne.n	801cc94 <__sfputs_r+0x12>
 801cc90:	2000      	movs	r0, #0
 801cc92:	e007      	b.n	801cca4 <__sfputs_r+0x22>
 801cc94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc98:	463a      	mov	r2, r7
 801cc9a:	4630      	mov	r0, r6
 801cc9c:	f7ff ffda 	bl	801cc54 <__sfputc_r>
 801cca0:	1c43      	adds	r3, r0, #1
 801cca2:	d1f3      	bne.n	801cc8c <__sfputs_r+0xa>
 801cca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cca8 <_vfiprintf_r>:
 801cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccac:	460d      	mov	r5, r1
 801ccae:	b09d      	sub	sp, #116	@ 0x74
 801ccb0:	4614      	mov	r4, r2
 801ccb2:	4698      	mov	r8, r3
 801ccb4:	4606      	mov	r6, r0
 801ccb6:	b118      	cbz	r0, 801ccc0 <_vfiprintf_r+0x18>
 801ccb8:	6a03      	ldr	r3, [r0, #32]
 801ccba:	b90b      	cbnz	r3, 801ccc0 <_vfiprintf_r+0x18>
 801ccbc:	f7ff fc92 	bl	801c5e4 <__sinit>
 801ccc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ccc2:	07d9      	lsls	r1, r3, #31
 801ccc4:	d405      	bmi.n	801ccd2 <_vfiprintf_r+0x2a>
 801ccc6:	89ab      	ldrh	r3, [r5, #12]
 801ccc8:	059a      	lsls	r2, r3, #22
 801ccca:	d402      	bmi.n	801ccd2 <_vfiprintf_r+0x2a>
 801cccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ccce:	f7ff fe92 	bl	801c9f6 <__retarget_lock_acquire_recursive>
 801ccd2:	89ab      	ldrh	r3, [r5, #12]
 801ccd4:	071b      	lsls	r3, r3, #28
 801ccd6:	d501      	bpl.n	801ccdc <_vfiprintf_r+0x34>
 801ccd8:	692b      	ldr	r3, [r5, #16]
 801ccda:	b99b      	cbnz	r3, 801cd04 <_vfiprintf_r+0x5c>
 801ccdc:	4629      	mov	r1, r5
 801ccde:	4630      	mov	r0, r6
 801cce0:	f7ff fdb0 	bl	801c844 <__swsetup_r>
 801cce4:	b170      	cbz	r0, 801cd04 <_vfiprintf_r+0x5c>
 801cce6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cce8:	07dc      	lsls	r4, r3, #31
 801ccea:	d504      	bpl.n	801ccf6 <_vfiprintf_r+0x4e>
 801ccec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ccf0:	b01d      	add	sp, #116	@ 0x74
 801ccf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccf6:	89ab      	ldrh	r3, [r5, #12]
 801ccf8:	0598      	lsls	r0, r3, #22
 801ccfa:	d4f7      	bmi.n	801ccec <_vfiprintf_r+0x44>
 801ccfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ccfe:	f7ff fe7b 	bl	801c9f8 <__retarget_lock_release_recursive>
 801cd02:	e7f3      	b.n	801ccec <_vfiprintf_r+0x44>
 801cd04:	2300      	movs	r3, #0
 801cd06:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd08:	2320      	movs	r3, #32
 801cd0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cd0e:	f8cd 800c 	str.w	r8, [sp, #12]
 801cd12:	2330      	movs	r3, #48	@ 0x30
 801cd14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cec4 <_vfiprintf_r+0x21c>
 801cd18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cd1c:	f04f 0901 	mov.w	r9, #1
 801cd20:	4623      	mov	r3, r4
 801cd22:	469a      	mov	sl, r3
 801cd24:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd28:	b10a      	cbz	r2, 801cd2e <_vfiprintf_r+0x86>
 801cd2a:	2a25      	cmp	r2, #37	@ 0x25
 801cd2c:	d1f9      	bne.n	801cd22 <_vfiprintf_r+0x7a>
 801cd2e:	ebba 0b04 	subs.w	fp, sl, r4
 801cd32:	d00b      	beq.n	801cd4c <_vfiprintf_r+0xa4>
 801cd34:	465b      	mov	r3, fp
 801cd36:	4622      	mov	r2, r4
 801cd38:	4629      	mov	r1, r5
 801cd3a:	4630      	mov	r0, r6
 801cd3c:	f7ff ffa1 	bl	801cc82 <__sfputs_r>
 801cd40:	3001      	adds	r0, #1
 801cd42:	f000 80a7 	beq.w	801ce94 <_vfiprintf_r+0x1ec>
 801cd46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd48:	445a      	add	r2, fp
 801cd4a:	9209      	str	r2, [sp, #36]	@ 0x24
 801cd4c:	f89a 3000 	ldrb.w	r3, [sl]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	f000 809f 	beq.w	801ce94 <_vfiprintf_r+0x1ec>
 801cd56:	2300      	movs	r3, #0
 801cd58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cd5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd60:	f10a 0a01 	add.w	sl, sl, #1
 801cd64:	9304      	str	r3, [sp, #16]
 801cd66:	9307      	str	r3, [sp, #28]
 801cd68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cd6c:	931a      	str	r3, [sp, #104]	@ 0x68
 801cd6e:	4654      	mov	r4, sl
 801cd70:	2205      	movs	r2, #5
 801cd72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd76:	4853      	ldr	r0, [pc, #332]	@ (801cec4 <_vfiprintf_r+0x21c>)
 801cd78:	f7e3 fa4a 	bl	8000210 <memchr>
 801cd7c:	9a04      	ldr	r2, [sp, #16]
 801cd7e:	b9d8      	cbnz	r0, 801cdb8 <_vfiprintf_r+0x110>
 801cd80:	06d1      	lsls	r1, r2, #27
 801cd82:	bf44      	itt	mi
 801cd84:	2320      	movmi	r3, #32
 801cd86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd8a:	0713      	lsls	r3, r2, #28
 801cd8c:	bf44      	itt	mi
 801cd8e:	232b      	movmi	r3, #43	@ 0x2b
 801cd90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd94:	f89a 3000 	ldrb.w	r3, [sl]
 801cd98:	2b2a      	cmp	r3, #42	@ 0x2a
 801cd9a:	d015      	beq.n	801cdc8 <_vfiprintf_r+0x120>
 801cd9c:	9a07      	ldr	r2, [sp, #28]
 801cd9e:	4654      	mov	r4, sl
 801cda0:	2000      	movs	r0, #0
 801cda2:	f04f 0c0a 	mov.w	ip, #10
 801cda6:	4621      	mov	r1, r4
 801cda8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cdac:	3b30      	subs	r3, #48	@ 0x30
 801cdae:	2b09      	cmp	r3, #9
 801cdb0:	d94b      	bls.n	801ce4a <_vfiprintf_r+0x1a2>
 801cdb2:	b1b0      	cbz	r0, 801cde2 <_vfiprintf_r+0x13a>
 801cdb4:	9207      	str	r2, [sp, #28]
 801cdb6:	e014      	b.n	801cde2 <_vfiprintf_r+0x13a>
 801cdb8:	eba0 0308 	sub.w	r3, r0, r8
 801cdbc:	fa09 f303 	lsl.w	r3, r9, r3
 801cdc0:	4313      	orrs	r3, r2
 801cdc2:	9304      	str	r3, [sp, #16]
 801cdc4:	46a2      	mov	sl, r4
 801cdc6:	e7d2      	b.n	801cd6e <_vfiprintf_r+0xc6>
 801cdc8:	9b03      	ldr	r3, [sp, #12]
 801cdca:	1d19      	adds	r1, r3, #4
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	9103      	str	r1, [sp, #12]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	bfbb      	ittet	lt
 801cdd4:	425b      	neglt	r3, r3
 801cdd6:	f042 0202 	orrlt.w	r2, r2, #2
 801cdda:	9307      	strge	r3, [sp, #28]
 801cddc:	9307      	strlt	r3, [sp, #28]
 801cdde:	bfb8      	it	lt
 801cde0:	9204      	strlt	r2, [sp, #16]
 801cde2:	7823      	ldrb	r3, [r4, #0]
 801cde4:	2b2e      	cmp	r3, #46	@ 0x2e
 801cde6:	d10a      	bne.n	801cdfe <_vfiprintf_r+0x156>
 801cde8:	7863      	ldrb	r3, [r4, #1]
 801cdea:	2b2a      	cmp	r3, #42	@ 0x2a
 801cdec:	d132      	bne.n	801ce54 <_vfiprintf_r+0x1ac>
 801cdee:	9b03      	ldr	r3, [sp, #12]
 801cdf0:	1d1a      	adds	r2, r3, #4
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	9203      	str	r2, [sp, #12]
 801cdf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cdfa:	3402      	adds	r4, #2
 801cdfc:	9305      	str	r3, [sp, #20]
 801cdfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ced4 <_vfiprintf_r+0x22c>
 801ce02:	7821      	ldrb	r1, [r4, #0]
 801ce04:	2203      	movs	r2, #3
 801ce06:	4650      	mov	r0, sl
 801ce08:	f7e3 fa02 	bl	8000210 <memchr>
 801ce0c:	b138      	cbz	r0, 801ce1e <_vfiprintf_r+0x176>
 801ce0e:	9b04      	ldr	r3, [sp, #16]
 801ce10:	eba0 000a 	sub.w	r0, r0, sl
 801ce14:	2240      	movs	r2, #64	@ 0x40
 801ce16:	4082      	lsls	r2, r0
 801ce18:	4313      	orrs	r3, r2
 801ce1a:	3401      	adds	r4, #1
 801ce1c:	9304      	str	r3, [sp, #16]
 801ce1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce22:	4829      	ldr	r0, [pc, #164]	@ (801cec8 <_vfiprintf_r+0x220>)
 801ce24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ce28:	2206      	movs	r2, #6
 801ce2a:	f7e3 f9f1 	bl	8000210 <memchr>
 801ce2e:	2800      	cmp	r0, #0
 801ce30:	d03f      	beq.n	801ceb2 <_vfiprintf_r+0x20a>
 801ce32:	4b26      	ldr	r3, [pc, #152]	@ (801cecc <_vfiprintf_r+0x224>)
 801ce34:	bb1b      	cbnz	r3, 801ce7e <_vfiprintf_r+0x1d6>
 801ce36:	9b03      	ldr	r3, [sp, #12]
 801ce38:	3307      	adds	r3, #7
 801ce3a:	f023 0307 	bic.w	r3, r3, #7
 801ce3e:	3308      	adds	r3, #8
 801ce40:	9303      	str	r3, [sp, #12]
 801ce42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce44:	443b      	add	r3, r7
 801ce46:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce48:	e76a      	b.n	801cd20 <_vfiprintf_r+0x78>
 801ce4a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce4e:	460c      	mov	r4, r1
 801ce50:	2001      	movs	r0, #1
 801ce52:	e7a8      	b.n	801cda6 <_vfiprintf_r+0xfe>
 801ce54:	2300      	movs	r3, #0
 801ce56:	3401      	adds	r4, #1
 801ce58:	9305      	str	r3, [sp, #20]
 801ce5a:	4619      	mov	r1, r3
 801ce5c:	f04f 0c0a 	mov.w	ip, #10
 801ce60:	4620      	mov	r0, r4
 801ce62:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce66:	3a30      	subs	r2, #48	@ 0x30
 801ce68:	2a09      	cmp	r2, #9
 801ce6a:	d903      	bls.n	801ce74 <_vfiprintf_r+0x1cc>
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d0c6      	beq.n	801cdfe <_vfiprintf_r+0x156>
 801ce70:	9105      	str	r1, [sp, #20]
 801ce72:	e7c4      	b.n	801cdfe <_vfiprintf_r+0x156>
 801ce74:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce78:	4604      	mov	r4, r0
 801ce7a:	2301      	movs	r3, #1
 801ce7c:	e7f0      	b.n	801ce60 <_vfiprintf_r+0x1b8>
 801ce7e:	ab03      	add	r3, sp, #12
 801ce80:	9300      	str	r3, [sp, #0]
 801ce82:	462a      	mov	r2, r5
 801ce84:	4b12      	ldr	r3, [pc, #72]	@ (801ced0 <_vfiprintf_r+0x228>)
 801ce86:	a904      	add	r1, sp, #16
 801ce88:	4630      	mov	r0, r6
 801ce8a:	f3af 8000 	nop.w
 801ce8e:	4607      	mov	r7, r0
 801ce90:	1c78      	adds	r0, r7, #1
 801ce92:	d1d6      	bne.n	801ce42 <_vfiprintf_r+0x19a>
 801ce94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ce96:	07d9      	lsls	r1, r3, #31
 801ce98:	d405      	bmi.n	801cea6 <_vfiprintf_r+0x1fe>
 801ce9a:	89ab      	ldrh	r3, [r5, #12]
 801ce9c:	059a      	lsls	r2, r3, #22
 801ce9e:	d402      	bmi.n	801cea6 <_vfiprintf_r+0x1fe>
 801cea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cea2:	f7ff fda9 	bl	801c9f8 <__retarget_lock_release_recursive>
 801cea6:	89ab      	ldrh	r3, [r5, #12]
 801cea8:	065b      	lsls	r3, r3, #25
 801ceaa:	f53f af1f 	bmi.w	801ccec <_vfiprintf_r+0x44>
 801ceae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ceb0:	e71e      	b.n	801ccf0 <_vfiprintf_r+0x48>
 801ceb2:	ab03      	add	r3, sp, #12
 801ceb4:	9300      	str	r3, [sp, #0]
 801ceb6:	462a      	mov	r2, r5
 801ceb8:	4b05      	ldr	r3, [pc, #20]	@ (801ced0 <_vfiprintf_r+0x228>)
 801ceba:	a904      	add	r1, sp, #16
 801cebc:	4630      	mov	r0, r6
 801cebe:	f000 f879 	bl	801cfb4 <_printf_i>
 801cec2:	e7e4      	b.n	801ce8e <_vfiprintf_r+0x1e6>
 801cec4:	08021bbd 	.word	0x08021bbd
 801cec8:	08021bc7 	.word	0x08021bc7
 801cecc:	00000000 	.word	0x00000000
 801ced0:	0801cc83 	.word	0x0801cc83
 801ced4:	08021bc3 	.word	0x08021bc3

0801ced8 <_printf_common>:
 801ced8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cedc:	4616      	mov	r6, r2
 801cede:	4698      	mov	r8, r3
 801cee0:	688a      	ldr	r2, [r1, #8]
 801cee2:	690b      	ldr	r3, [r1, #16]
 801cee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cee8:	4293      	cmp	r3, r2
 801ceea:	bfb8      	it	lt
 801ceec:	4613      	movlt	r3, r2
 801ceee:	6033      	str	r3, [r6, #0]
 801cef0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cef4:	4607      	mov	r7, r0
 801cef6:	460c      	mov	r4, r1
 801cef8:	b10a      	cbz	r2, 801cefe <_printf_common+0x26>
 801cefa:	3301      	adds	r3, #1
 801cefc:	6033      	str	r3, [r6, #0]
 801cefe:	6823      	ldr	r3, [r4, #0]
 801cf00:	0699      	lsls	r1, r3, #26
 801cf02:	bf42      	ittt	mi
 801cf04:	6833      	ldrmi	r3, [r6, #0]
 801cf06:	3302      	addmi	r3, #2
 801cf08:	6033      	strmi	r3, [r6, #0]
 801cf0a:	6825      	ldr	r5, [r4, #0]
 801cf0c:	f015 0506 	ands.w	r5, r5, #6
 801cf10:	d106      	bne.n	801cf20 <_printf_common+0x48>
 801cf12:	f104 0a19 	add.w	sl, r4, #25
 801cf16:	68e3      	ldr	r3, [r4, #12]
 801cf18:	6832      	ldr	r2, [r6, #0]
 801cf1a:	1a9b      	subs	r3, r3, r2
 801cf1c:	42ab      	cmp	r3, r5
 801cf1e:	dc26      	bgt.n	801cf6e <_printf_common+0x96>
 801cf20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cf24:	6822      	ldr	r2, [r4, #0]
 801cf26:	3b00      	subs	r3, #0
 801cf28:	bf18      	it	ne
 801cf2a:	2301      	movne	r3, #1
 801cf2c:	0692      	lsls	r2, r2, #26
 801cf2e:	d42b      	bmi.n	801cf88 <_printf_common+0xb0>
 801cf30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cf34:	4641      	mov	r1, r8
 801cf36:	4638      	mov	r0, r7
 801cf38:	47c8      	blx	r9
 801cf3a:	3001      	adds	r0, #1
 801cf3c:	d01e      	beq.n	801cf7c <_printf_common+0xa4>
 801cf3e:	6823      	ldr	r3, [r4, #0]
 801cf40:	6922      	ldr	r2, [r4, #16]
 801cf42:	f003 0306 	and.w	r3, r3, #6
 801cf46:	2b04      	cmp	r3, #4
 801cf48:	bf02      	ittt	eq
 801cf4a:	68e5      	ldreq	r5, [r4, #12]
 801cf4c:	6833      	ldreq	r3, [r6, #0]
 801cf4e:	1aed      	subeq	r5, r5, r3
 801cf50:	68a3      	ldr	r3, [r4, #8]
 801cf52:	bf0c      	ite	eq
 801cf54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cf58:	2500      	movne	r5, #0
 801cf5a:	4293      	cmp	r3, r2
 801cf5c:	bfc4      	itt	gt
 801cf5e:	1a9b      	subgt	r3, r3, r2
 801cf60:	18ed      	addgt	r5, r5, r3
 801cf62:	2600      	movs	r6, #0
 801cf64:	341a      	adds	r4, #26
 801cf66:	42b5      	cmp	r5, r6
 801cf68:	d11a      	bne.n	801cfa0 <_printf_common+0xc8>
 801cf6a:	2000      	movs	r0, #0
 801cf6c:	e008      	b.n	801cf80 <_printf_common+0xa8>
 801cf6e:	2301      	movs	r3, #1
 801cf70:	4652      	mov	r2, sl
 801cf72:	4641      	mov	r1, r8
 801cf74:	4638      	mov	r0, r7
 801cf76:	47c8      	blx	r9
 801cf78:	3001      	adds	r0, #1
 801cf7a:	d103      	bne.n	801cf84 <_printf_common+0xac>
 801cf7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf84:	3501      	adds	r5, #1
 801cf86:	e7c6      	b.n	801cf16 <_printf_common+0x3e>
 801cf88:	18e1      	adds	r1, r4, r3
 801cf8a:	1c5a      	adds	r2, r3, #1
 801cf8c:	2030      	movs	r0, #48	@ 0x30
 801cf8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cf92:	4422      	add	r2, r4
 801cf94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cf98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cf9c:	3302      	adds	r3, #2
 801cf9e:	e7c7      	b.n	801cf30 <_printf_common+0x58>
 801cfa0:	2301      	movs	r3, #1
 801cfa2:	4622      	mov	r2, r4
 801cfa4:	4641      	mov	r1, r8
 801cfa6:	4638      	mov	r0, r7
 801cfa8:	47c8      	blx	r9
 801cfaa:	3001      	adds	r0, #1
 801cfac:	d0e6      	beq.n	801cf7c <_printf_common+0xa4>
 801cfae:	3601      	adds	r6, #1
 801cfb0:	e7d9      	b.n	801cf66 <_printf_common+0x8e>
	...

0801cfb4 <_printf_i>:
 801cfb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cfb8:	7e0f      	ldrb	r7, [r1, #24]
 801cfba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cfbc:	2f78      	cmp	r7, #120	@ 0x78
 801cfbe:	4691      	mov	r9, r2
 801cfc0:	4680      	mov	r8, r0
 801cfc2:	460c      	mov	r4, r1
 801cfc4:	469a      	mov	sl, r3
 801cfc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cfca:	d807      	bhi.n	801cfdc <_printf_i+0x28>
 801cfcc:	2f62      	cmp	r7, #98	@ 0x62
 801cfce:	d80a      	bhi.n	801cfe6 <_printf_i+0x32>
 801cfd0:	2f00      	cmp	r7, #0
 801cfd2:	f000 80d1 	beq.w	801d178 <_printf_i+0x1c4>
 801cfd6:	2f58      	cmp	r7, #88	@ 0x58
 801cfd8:	f000 80b8 	beq.w	801d14c <_printf_i+0x198>
 801cfdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cfe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cfe4:	e03a      	b.n	801d05c <_printf_i+0xa8>
 801cfe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cfea:	2b15      	cmp	r3, #21
 801cfec:	d8f6      	bhi.n	801cfdc <_printf_i+0x28>
 801cfee:	a101      	add	r1, pc, #4	@ (adr r1, 801cff4 <_printf_i+0x40>)
 801cff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cff4:	0801d04d 	.word	0x0801d04d
 801cff8:	0801d061 	.word	0x0801d061
 801cffc:	0801cfdd 	.word	0x0801cfdd
 801d000:	0801cfdd 	.word	0x0801cfdd
 801d004:	0801cfdd 	.word	0x0801cfdd
 801d008:	0801cfdd 	.word	0x0801cfdd
 801d00c:	0801d061 	.word	0x0801d061
 801d010:	0801cfdd 	.word	0x0801cfdd
 801d014:	0801cfdd 	.word	0x0801cfdd
 801d018:	0801cfdd 	.word	0x0801cfdd
 801d01c:	0801cfdd 	.word	0x0801cfdd
 801d020:	0801d15f 	.word	0x0801d15f
 801d024:	0801d08b 	.word	0x0801d08b
 801d028:	0801d119 	.word	0x0801d119
 801d02c:	0801cfdd 	.word	0x0801cfdd
 801d030:	0801cfdd 	.word	0x0801cfdd
 801d034:	0801d181 	.word	0x0801d181
 801d038:	0801cfdd 	.word	0x0801cfdd
 801d03c:	0801d08b 	.word	0x0801d08b
 801d040:	0801cfdd 	.word	0x0801cfdd
 801d044:	0801cfdd 	.word	0x0801cfdd
 801d048:	0801d121 	.word	0x0801d121
 801d04c:	6833      	ldr	r3, [r6, #0]
 801d04e:	1d1a      	adds	r2, r3, #4
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	6032      	str	r2, [r6, #0]
 801d054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d05c:	2301      	movs	r3, #1
 801d05e:	e09c      	b.n	801d19a <_printf_i+0x1e6>
 801d060:	6833      	ldr	r3, [r6, #0]
 801d062:	6820      	ldr	r0, [r4, #0]
 801d064:	1d19      	adds	r1, r3, #4
 801d066:	6031      	str	r1, [r6, #0]
 801d068:	0606      	lsls	r6, r0, #24
 801d06a:	d501      	bpl.n	801d070 <_printf_i+0xbc>
 801d06c:	681d      	ldr	r5, [r3, #0]
 801d06e:	e003      	b.n	801d078 <_printf_i+0xc4>
 801d070:	0645      	lsls	r5, r0, #25
 801d072:	d5fb      	bpl.n	801d06c <_printf_i+0xb8>
 801d074:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d078:	2d00      	cmp	r5, #0
 801d07a:	da03      	bge.n	801d084 <_printf_i+0xd0>
 801d07c:	232d      	movs	r3, #45	@ 0x2d
 801d07e:	426d      	negs	r5, r5
 801d080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d084:	4858      	ldr	r0, [pc, #352]	@ (801d1e8 <_printf_i+0x234>)
 801d086:	230a      	movs	r3, #10
 801d088:	e011      	b.n	801d0ae <_printf_i+0xfa>
 801d08a:	6821      	ldr	r1, [r4, #0]
 801d08c:	6833      	ldr	r3, [r6, #0]
 801d08e:	0608      	lsls	r0, r1, #24
 801d090:	f853 5b04 	ldr.w	r5, [r3], #4
 801d094:	d402      	bmi.n	801d09c <_printf_i+0xe8>
 801d096:	0649      	lsls	r1, r1, #25
 801d098:	bf48      	it	mi
 801d09a:	b2ad      	uxthmi	r5, r5
 801d09c:	2f6f      	cmp	r7, #111	@ 0x6f
 801d09e:	4852      	ldr	r0, [pc, #328]	@ (801d1e8 <_printf_i+0x234>)
 801d0a0:	6033      	str	r3, [r6, #0]
 801d0a2:	bf14      	ite	ne
 801d0a4:	230a      	movne	r3, #10
 801d0a6:	2308      	moveq	r3, #8
 801d0a8:	2100      	movs	r1, #0
 801d0aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d0ae:	6866      	ldr	r6, [r4, #4]
 801d0b0:	60a6      	str	r6, [r4, #8]
 801d0b2:	2e00      	cmp	r6, #0
 801d0b4:	db05      	blt.n	801d0c2 <_printf_i+0x10e>
 801d0b6:	6821      	ldr	r1, [r4, #0]
 801d0b8:	432e      	orrs	r6, r5
 801d0ba:	f021 0104 	bic.w	r1, r1, #4
 801d0be:	6021      	str	r1, [r4, #0]
 801d0c0:	d04b      	beq.n	801d15a <_printf_i+0x1a6>
 801d0c2:	4616      	mov	r6, r2
 801d0c4:	fbb5 f1f3 	udiv	r1, r5, r3
 801d0c8:	fb03 5711 	mls	r7, r3, r1, r5
 801d0cc:	5dc7      	ldrb	r7, [r0, r7]
 801d0ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d0d2:	462f      	mov	r7, r5
 801d0d4:	42bb      	cmp	r3, r7
 801d0d6:	460d      	mov	r5, r1
 801d0d8:	d9f4      	bls.n	801d0c4 <_printf_i+0x110>
 801d0da:	2b08      	cmp	r3, #8
 801d0dc:	d10b      	bne.n	801d0f6 <_printf_i+0x142>
 801d0de:	6823      	ldr	r3, [r4, #0]
 801d0e0:	07df      	lsls	r7, r3, #31
 801d0e2:	d508      	bpl.n	801d0f6 <_printf_i+0x142>
 801d0e4:	6923      	ldr	r3, [r4, #16]
 801d0e6:	6861      	ldr	r1, [r4, #4]
 801d0e8:	4299      	cmp	r1, r3
 801d0ea:	bfde      	ittt	le
 801d0ec:	2330      	movle	r3, #48	@ 0x30
 801d0ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d0f2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d0f6:	1b92      	subs	r2, r2, r6
 801d0f8:	6122      	str	r2, [r4, #16]
 801d0fa:	f8cd a000 	str.w	sl, [sp]
 801d0fe:	464b      	mov	r3, r9
 801d100:	aa03      	add	r2, sp, #12
 801d102:	4621      	mov	r1, r4
 801d104:	4640      	mov	r0, r8
 801d106:	f7ff fee7 	bl	801ced8 <_printf_common>
 801d10a:	3001      	adds	r0, #1
 801d10c:	d14a      	bne.n	801d1a4 <_printf_i+0x1f0>
 801d10e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d112:	b004      	add	sp, #16
 801d114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d118:	6823      	ldr	r3, [r4, #0]
 801d11a:	f043 0320 	orr.w	r3, r3, #32
 801d11e:	6023      	str	r3, [r4, #0]
 801d120:	4832      	ldr	r0, [pc, #200]	@ (801d1ec <_printf_i+0x238>)
 801d122:	2778      	movs	r7, #120	@ 0x78
 801d124:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d128:	6823      	ldr	r3, [r4, #0]
 801d12a:	6831      	ldr	r1, [r6, #0]
 801d12c:	061f      	lsls	r7, r3, #24
 801d12e:	f851 5b04 	ldr.w	r5, [r1], #4
 801d132:	d402      	bmi.n	801d13a <_printf_i+0x186>
 801d134:	065f      	lsls	r7, r3, #25
 801d136:	bf48      	it	mi
 801d138:	b2ad      	uxthmi	r5, r5
 801d13a:	6031      	str	r1, [r6, #0]
 801d13c:	07d9      	lsls	r1, r3, #31
 801d13e:	bf44      	itt	mi
 801d140:	f043 0320 	orrmi.w	r3, r3, #32
 801d144:	6023      	strmi	r3, [r4, #0]
 801d146:	b11d      	cbz	r5, 801d150 <_printf_i+0x19c>
 801d148:	2310      	movs	r3, #16
 801d14a:	e7ad      	b.n	801d0a8 <_printf_i+0xf4>
 801d14c:	4826      	ldr	r0, [pc, #152]	@ (801d1e8 <_printf_i+0x234>)
 801d14e:	e7e9      	b.n	801d124 <_printf_i+0x170>
 801d150:	6823      	ldr	r3, [r4, #0]
 801d152:	f023 0320 	bic.w	r3, r3, #32
 801d156:	6023      	str	r3, [r4, #0]
 801d158:	e7f6      	b.n	801d148 <_printf_i+0x194>
 801d15a:	4616      	mov	r6, r2
 801d15c:	e7bd      	b.n	801d0da <_printf_i+0x126>
 801d15e:	6833      	ldr	r3, [r6, #0]
 801d160:	6825      	ldr	r5, [r4, #0]
 801d162:	6961      	ldr	r1, [r4, #20]
 801d164:	1d18      	adds	r0, r3, #4
 801d166:	6030      	str	r0, [r6, #0]
 801d168:	062e      	lsls	r6, r5, #24
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	d501      	bpl.n	801d172 <_printf_i+0x1be>
 801d16e:	6019      	str	r1, [r3, #0]
 801d170:	e002      	b.n	801d178 <_printf_i+0x1c4>
 801d172:	0668      	lsls	r0, r5, #25
 801d174:	d5fb      	bpl.n	801d16e <_printf_i+0x1ba>
 801d176:	8019      	strh	r1, [r3, #0]
 801d178:	2300      	movs	r3, #0
 801d17a:	6123      	str	r3, [r4, #16]
 801d17c:	4616      	mov	r6, r2
 801d17e:	e7bc      	b.n	801d0fa <_printf_i+0x146>
 801d180:	6833      	ldr	r3, [r6, #0]
 801d182:	1d1a      	adds	r2, r3, #4
 801d184:	6032      	str	r2, [r6, #0]
 801d186:	681e      	ldr	r6, [r3, #0]
 801d188:	6862      	ldr	r2, [r4, #4]
 801d18a:	2100      	movs	r1, #0
 801d18c:	4630      	mov	r0, r6
 801d18e:	f7e3 f83f 	bl	8000210 <memchr>
 801d192:	b108      	cbz	r0, 801d198 <_printf_i+0x1e4>
 801d194:	1b80      	subs	r0, r0, r6
 801d196:	6060      	str	r0, [r4, #4]
 801d198:	6863      	ldr	r3, [r4, #4]
 801d19a:	6123      	str	r3, [r4, #16]
 801d19c:	2300      	movs	r3, #0
 801d19e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d1a2:	e7aa      	b.n	801d0fa <_printf_i+0x146>
 801d1a4:	6923      	ldr	r3, [r4, #16]
 801d1a6:	4632      	mov	r2, r6
 801d1a8:	4649      	mov	r1, r9
 801d1aa:	4640      	mov	r0, r8
 801d1ac:	47d0      	blx	sl
 801d1ae:	3001      	adds	r0, #1
 801d1b0:	d0ad      	beq.n	801d10e <_printf_i+0x15a>
 801d1b2:	6823      	ldr	r3, [r4, #0]
 801d1b4:	079b      	lsls	r3, r3, #30
 801d1b6:	d413      	bmi.n	801d1e0 <_printf_i+0x22c>
 801d1b8:	68e0      	ldr	r0, [r4, #12]
 801d1ba:	9b03      	ldr	r3, [sp, #12]
 801d1bc:	4298      	cmp	r0, r3
 801d1be:	bfb8      	it	lt
 801d1c0:	4618      	movlt	r0, r3
 801d1c2:	e7a6      	b.n	801d112 <_printf_i+0x15e>
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	4632      	mov	r2, r6
 801d1c8:	4649      	mov	r1, r9
 801d1ca:	4640      	mov	r0, r8
 801d1cc:	47d0      	blx	sl
 801d1ce:	3001      	adds	r0, #1
 801d1d0:	d09d      	beq.n	801d10e <_printf_i+0x15a>
 801d1d2:	3501      	adds	r5, #1
 801d1d4:	68e3      	ldr	r3, [r4, #12]
 801d1d6:	9903      	ldr	r1, [sp, #12]
 801d1d8:	1a5b      	subs	r3, r3, r1
 801d1da:	42ab      	cmp	r3, r5
 801d1dc:	dcf2      	bgt.n	801d1c4 <_printf_i+0x210>
 801d1de:	e7eb      	b.n	801d1b8 <_printf_i+0x204>
 801d1e0:	2500      	movs	r5, #0
 801d1e2:	f104 0619 	add.w	r6, r4, #25
 801d1e6:	e7f5      	b.n	801d1d4 <_printf_i+0x220>
 801d1e8:	08021bce 	.word	0x08021bce
 801d1ec:	08021bdf 	.word	0x08021bdf

0801d1f0 <__sflush_r>:
 801d1f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1f8:	0716      	lsls	r6, r2, #28
 801d1fa:	4605      	mov	r5, r0
 801d1fc:	460c      	mov	r4, r1
 801d1fe:	d454      	bmi.n	801d2aa <__sflush_r+0xba>
 801d200:	684b      	ldr	r3, [r1, #4]
 801d202:	2b00      	cmp	r3, #0
 801d204:	dc02      	bgt.n	801d20c <__sflush_r+0x1c>
 801d206:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d208:	2b00      	cmp	r3, #0
 801d20a:	dd48      	ble.n	801d29e <__sflush_r+0xae>
 801d20c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d20e:	2e00      	cmp	r6, #0
 801d210:	d045      	beq.n	801d29e <__sflush_r+0xae>
 801d212:	2300      	movs	r3, #0
 801d214:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d218:	682f      	ldr	r7, [r5, #0]
 801d21a:	6a21      	ldr	r1, [r4, #32]
 801d21c:	602b      	str	r3, [r5, #0]
 801d21e:	d030      	beq.n	801d282 <__sflush_r+0x92>
 801d220:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d222:	89a3      	ldrh	r3, [r4, #12]
 801d224:	0759      	lsls	r1, r3, #29
 801d226:	d505      	bpl.n	801d234 <__sflush_r+0x44>
 801d228:	6863      	ldr	r3, [r4, #4]
 801d22a:	1ad2      	subs	r2, r2, r3
 801d22c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d22e:	b10b      	cbz	r3, 801d234 <__sflush_r+0x44>
 801d230:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d232:	1ad2      	subs	r2, r2, r3
 801d234:	2300      	movs	r3, #0
 801d236:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d238:	6a21      	ldr	r1, [r4, #32]
 801d23a:	4628      	mov	r0, r5
 801d23c:	47b0      	blx	r6
 801d23e:	1c43      	adds	r3, r0, #1
 801d240:	89a3      	ldrh	r3, [r4, #12]
 801d242:	d106      	bne.n	801d252 <__sflush_r+0x62>
 801d244:	6829      	ldr	r1, [r5, #0]
 801d246:	291d      	cmp	r1, #29
 801d248:	d82b      	bhi.n	801d2a2 <__sflush_r+0xb2>
 801d24a:	4a2a      	ldr	r2, [pc, #168]	@ (801d2f4 <__sflush_r+0x104>)
 801d24c:	40ca      	lsrs	r2, r1
 801d24e:	07d6      	lsls	r6, r2, #31
 801d250:	d527      	bpl.n	801d2a2 <__sflush_r+0xb2>
 801d252:	2200      	movs	r2, #0
 801d254:	6062      	str	r2, [r4, #4]
 801d256:	04d9      	lsls	r1, r3, #19
 801d258:	6922      	ldr	r2, [r4, #16]
 801d25a:	6022      	str	r2, [r4, #0]
 801d25c:	d504      	bpl.n	801d268 <__sflush_r+0x78>
 801d25e:	1c42      	adds	r2, r0, #1
 801d260:	d101      	bne.n	801d266 <__sflush_r+0x76>
 801d262:	682b      	ldr	r3, [r5, #0]
 801d264:	b903      	cbnz	r3, 801d268 <__sflush_r+0x78>
 801d266:	6560      	str	r0, [r4, #84]	@ 0x54
 801d268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d26a:	602f      	str	r7, [r5, #0]
 801d26c:	b1b9      	cbz	r1, 801d29e <__sflush_r+0xae>
 801d26e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d272:	4299      	cmp	r1, r3
 801d274:	d002      	beq.n	801d27c <__sflush_r+0x8c>
 801d276:	4628      	mov	r0, r5
 801d278:	f7ff fbec 	bl	801ca54 <_free_r>
 801d27c:	2300      	movs	r3, #0
 801d27e:	6363      	str	r3, [r4, #52]	@ 0x34
 801d280:	e00d      	b.n	801d29e <__sflush_r+0xae>
 801d282:	2301      	movs	r3, #1
 801d284:	4628      	mov	r0, r5
 801d286:	47b0      	blx	r6
 801d288:	4602      	mov	r2, r0
 801d28a:	1c50      	adds	r0, r2, #1
 801d28c:	d1c9      	bne.n	801d222 <__sflush_r+0x32>
 801d28e:	682b      	ldr	r3, [r5, #0]
 801d290:	2b00      	cmp	r3, #0
 801d292:	d0c6      	beq.n	801d222 <__sflush_r+0x32>
 801d294:	2b1d      	cmp	r3, #29
 801d296:	d001      	beq.n	801d29c <__sflush_r+0xac>
 801d298:	2b16      	cmp	r3, #22
 801d29a:	d11e      	bne.n	801d2da <__sflush_r+0xea>
 801d29c:	602f      	str	r7, [r5, #0]
 801d29e:	2000      	movs	r0, #0
 801d2a0:	e022      	b.n	801d2e8 <__sflush_r+0xf8>
 801d2a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d2a6:	b21b      	sxth	r3, r3
 801d2a8:	e01b      	b.n	801d2e2 <__sflush_r+0xf2>
 801d2aa:	690f      	ldr	r7, [r1, #16]
 801d2ac:	2f00      	cmp	r7, #0
 801d2ae:	d0f6      	beq.n	801d29e <__sflush_r+0xae>
 801d2b0:	0793      	lsls	r3, r2, #30
 801d2b2:	680e      	ldr	r6, [r1, #0]
 801d2b4:	bf08      	it	eq
 801d2b6:	694b      	ldreq	r3, [r1, #20]
 801d2b8:	600f      	str	r7, [r1, #0]
 801d2ba:	bf18      	it	ne
 801d2bc:	2300      	movne	r3, #0
 801d2be:	eba6 0807 	sub.w	r8, r6, r7
 801d2c2:	608b      	str	r3, [r1, #8]
 801d2c4:	f1b8 0f00 	cmp.w	r8, #0
 801d2c8:	dde9      	ble.n	801d29e <__sflush_r+0xae>
 801d2ca:	6a21      	ldr	r1, [r4, #32]
 801d2cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d2ce:	4643      	mov	r3, r8
 801d2d0:	463a      	mov	r2, r7
 801d2d2:	4628      	mov	r0, r5
 801d2d4:	47b0      	blx	r6
 801d2d6:	2800      	cmp	r0, #0
 801d2d8:	dc08      	bgt.n	801d2ec <__sflush_r+0xfc>
 801d2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d2e2:	81a3      	strh	r3, [r4, #12]
 801d2e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2ec:	4407      	add	r7, r0
 801d2ee:	eba8 0800 	sub.w	r8, r8, r0
 801d2f2:	e7e7      	b.n	801d2c4 <__sflush_r+0xd4>
 801d2f4:	20400001 	.word	0x20400001

0801d2f8 <_fflush_r>:
 801d2f8:	b538      	push	{r3, r4, r5, lr}
 801d2fa:	690b      	ldr	r3, [r1, #16]
 801d2fc:	4605      	mov	r5, r0
 801d2fe:	460c      	mov	r4, r1
 801d300:	b913      	cbnz	r3, 801d308 <_fflush_r+0x10>
 801d302:	2500      	movs	r5, #0
 801d304:	4628      	mov	r0, r5
 801d306:	bd38      	pop	{r3, r4, r5, pc}
 801d308:	b118      	cbz	r0, 801d312 <_fflush_r+0x1a>
 801d30a:	6a03      	ldr	r3, [r0, #32]
 801d30c:	b90b      	cbnz	r3, 801d312 <_fflush_r+0x1a>
 801d30e:	f7ff f969 	bl	801c5e4 <__sinit>
 801d312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d0f3      	beq.n	801d302 <_fflush_r+0xa>
 801d31a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d31c:	07d0      	lsls	r0, r2, #31
 801d31e:	d404      	bmi.n	801d32a <_fflush_r+0x32>
 801d320:	0599      	lsls	r1, r3, #22
 801d322:	d402      	bmi.n	801d32a <_fflush_r+0x32>
 801d324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d326:	f7ff fb66 	bl	801c9f6 <__retarget_lock_acquire_recursive>
 801d32a:	4628      	mov	r0, r5
 801d32c:	4621      	mov	r1, r4
 801d32e:	f7ff ff5f 	bl	801d1f0 <__sflush_r>
 801d332:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d334:	07da      	lsls	r2, r3, #31
 801d336:	4605      	mov	r5, r0
 801d338:	d4e4      	bmi.n	801d304 <_fflush_r+0xc>
 801d33a:	89a3      	ldrh	r3, [r4, #12]
 801d33c:	059b      	lsls	r3, r3, #22
 801d33e:	d4e1      	bmi.n	801d304 <_fflush_r+0xc>
 801d340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d342:	f7ff fb59 	bl	801c9f8 <__retarget_lock_release_recursive>
 801d346:	e7dd      	b.n	801d304 <_fflush_r+0xc>

0801d348 <fiprintf>:
 801d348:	b40e      	push	{r1, r2, r3}
 801d34a:	b503      	push	{r0, r1, lr}
 801d34c:	4601      	mov	r1, r0
 801d34e:	ab03      	add	r3, sp, #12
 801d350:	4805      	ldr	r0, [pc, #20]	@ (801d368 <fiprintf+0x20>)
 801d352:	f853 2b04 	ldr.w	r2, [r3], #4
 801d356:	6800      	ldr	r0, [r0, #0]
 801d358:	9301      	str	r3, [sp, #4]
 801d35a:	f7ff fca5 	bl	801cca8 <_vfiprintf_r>
 801d35e:	b002      	add	sp, #8
 801d360:	f85d eb04 	ldr.w	lr, [sp], #4
 801d364:	b003      	add	sp, #12
 801d366:	4770      	bx	lr
 801d368:	20000080 	.word	0x20000080

0801d36c <__swhatbuf_r>:
 801d36c:	b570      	push	{r4, r5, r6, lr}
 801d36e:	460c      	mov	r4, r1
 801d370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d374:	2900      	cmp	r1, #0
 801d376:	b096      	sub	sp, #88	@ 0x58
 801d378:	4615      	mov	r5, r2
 801d37a:	461e      	mov	r6, r3
 801d37c:	da0d      	bge.n	801d39a <__swhatbuf_r+0x2e>
 801d37e:	89a3      	ldrh	r3, [r4, #12]
 801d380:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d384:	f04f 0100 	mov.w	r1, #0
 801d388:	bf14      	ite	ne
 801d38a:	2340      	movne	r3, #64	@ 0x40
 801d38c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d390:	2000      	movs	r0, #0
 801d392:	6031      	str	r1, [r6, #0]
 801d394:	602b      	str	r3, [r5, #0]
 801d396:	b016      	add	sp, #88	@ 0x58
 801d398:	bd70      	pop	{r4, r5, r6, pc}
 801d39a:	466a      	mov	r2, sp
 801d39c:	f000 f87c 	bl	801d498 <_fstat_r>
 801d3a0:	2800      	cmp	r0, #0
 801d3a2:	dbec      	blt.n	801d37e <__swhatbuf_r+0x12>
 801d3a4:	9901      	ldr	r1, [sp, #4]
 801d3a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d3aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d3ae:	4259      	negs	r1, r3
 801d3b0:	4159      	adcs	r1, r3
 801d3b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d3b6:	e7eb      	b.n	801d390 <__swhatbuf_r+0x24>

0801d3b8 <__smakebuf_r>:
 801d3b8:	898b      	ldrh	r3, [r1, #12]
 801d3ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d3bc:	079d      	lsls	r5, r3, #30
 801d3be:	4606      	mov	r6, r0
 801d3c0:	460c      	mov	r4, r1
 801d3c2:	d507      	bpl.n	801d3d4 <__smakebuf_r+0x1c>
 801d3c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d3c8:	6023      	str	r3, [r4, #0]
 801d3ca:	6123      	str	r3, [r4, #16]
 801d3cc:	2301      	movs	r3, #1
 801d3ce:	6163      	str	r3, [r4, #20]
 801d3d0:	b003      	add	sp, #12
 801d3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3d4:	ab01      	add	r3, sp, #4
 801d3d6:	466a      	mov	r2, sp
 801d3d8:	f7ff ffc8 	bl	801d36c <__swhatbuf_r>
 801d3dc:	9f00      	ldr	r7, [sp, #0]
 801d3de:	4605      	mov	r5, r0
 801d3e0:	4639      	mov	r1, r7
 801d3e2:	4630      	mov	r0, r6
 801d3e4:	f7ff fbaa 	bl	801cb3c <_malloc_r>
 801d3e8:	b948      	cbnz	r0, 801d3fe <__smakebuf_r+0x46>
 801d3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3ee:	059a      	lsls	r2, r3, #22
 801d3f0:	d4ee      	bmi.n	801d3d0 <__smakebuf_r+0x18>
 801d3f2:	f023 0303 	bic.w	r3, r3, #3
 801d3f6:	f043 0302 	orr.w	r3, r3, #2
 801d3fa:	81a3      	strh	r3, [r4, #12]
 801d3fc:	e7e2      	b.n	801d3c4 <__smakebuf_r+0xc>
 801d3fe:	89a3      	ldrh	r3, [r4, #12]
 801d400:	6020      	str	r0, [r4, #0]
 801d402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d406:	81a3      	strh	r3, [r4, #12]
 801d408:	9b01      	ldr	r3, [sp, #4]
 801d40a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d40e:	b15b      	cbz	r3, 801d428 <__smakebuf_r+0x70>
 801d410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d414:	4630      	mov	r0, r6
 801d416:	f000 f851 	bl	801d4bc <_isatty_r>
 801d41a:	b128      	cbz	r0, 801d428 <__smakebuf_r+0x70>
 801d41c:	89a3      	ldrh	r3, [r4, #12]
 801d41e:	f023 0303 	bic.w	r3, r3, #3
 801d422:	f043 0301 	orr.w	r3, r3, #1
 801d426:	81a3      	strh	r3, [r4, #12]
 801d428:	89a3      	ldrh	r3, [r4, #12]
 801d42a:	431d      	orrs	r5, r3
 801d42c:	81a5      	strh	r5, [r4, #12]
 801d42e:	e7cf      	b.n	801d3d0 <__smakebuf_r+0x18>

0801d430 <_putc_r>:
 801d430:	b570      	push	{r4, r5, r6, lr}
 801d432:	460d      	mov	r5, r1
 801d434:	4614      	mov	r4, r2
 801d436:	4606      	mov	r6, r0
 801d438:	b118      	cbz	r0, 801d442 <_putc_r+0x12>
 801d43a:	6a03      	ldr	r3, [r0, #32]
 801d43c:	b90b      	cbnz	r3, 801d442 <_putc_r+0x12>
 801d43e:	f7ff f8d1 	bl	801c5e4 <__sinit>
 801d442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d444:	07d8      	lsls	r0, r3, #31
 801d446:	d405      	bmi.n	801d454 <_putc_r+0x24>
 801d448:	89a3      	ldrh	r3, [r4, #12]
 801d44a:	0599      	lsls	r1, r3, #22
 801d44c:	d402      	bmi.n	801d454 <_putc_r+0x24>
 801d44e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d450:	f7ff fad1 	bl	801c9f6 <__retarget_lock_acquire_recursive>
 801d454:	68a3      	ldr	r3, [r4, #8]
 801d456:	3b01      	subs	r3, #1
 801d458:	2b00      	cmp	r3, #0
 801d45a:	60a3      	str	r3, [r4, #8]
 801d45c:	da05      	bge.n	801d46a <_putc_r+0x3a>
 801d45e:	69a2      	ldr	r2, [r4, #24]
 801d460:	4293      	cmp	r3, r2
 801d462:	db12      	blt.n	801d48a <_putc_r+0x5a>
 801d464:	b2eb      	uxtb	r3, r5
 801d466:	2b0a      	cmp	r3, #10
 801d468:	d00f      	beq.n	801d48a <_putc_r+0x5a>
 801d46a:	6823      	ldr	r3, [r4, #0]
 801d46c:	1c5a      	adds	r2, r3, #1
 801d46e:	6022      	str	r2, [r4, #0]
 801d470:	701d      	strb	r5, [r3, #0]
 801d472:	b2ed      	uxtb	r5, r5
 801d474:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d476:	07da      	lsls	r2, r3, #31
 801d478:	d405      	bmi.n	801d486 <_putc_r+0x56>
 801d47a:	89a3      	ldrh	r3, [r4, #12]
 801d47c:	059b      	lsls	r3, r3, #22
 801d47e:	d402      	bmi.n	801d486 <_putc_r+0x56>
 801d480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d482:	f7ff fab9 	bl	801c9f8 <__retarget_lock_release_recursive>
 801d486:	4628      	mov	r0, r5
 801d488:	bd70      	pop	{r4, r5, r6, pc}
 801d48a:	4629      	mov	r1, r5
 801d48c:	4622      	mov	r2, r4
 801d48e:	4630      	mov	r0, r6
 801d490:	f7ff f999 	bl	801c7c6 <__swbuf_r>
 801d494:	4605      	mov	r5, r0
 801d496:	e7ed      	b.n	801d474 <_putc_r+0x44>

0801d498 <_fstat_r>:
 801d498:	b538      	push	{r3, r4, r5, lr}
 801d49a:	4d07      	ldr	r5, [pc, #28]	@ (801d4b8 <_fstat_r+0x20>)
 801d49c:	2300      	movs	r3, #0
 801d49e:	4604      	mov	r4, r0
 801d4a0:	4608      	mov	r0, r1
 801d4a2:	4611      	mov	r1, r2
 801d4a4:	602b      	str	r3, [r5, #0]
 801d4a6:	f7e4 fad7 	bl	8001a58 <_fstat>
 801d4aa:	1c43      	adds	r3, r0, #1
 801d4ac:	d102      	bne.n	801d4b4 <_fstat_r+0x1c>
 801d4ae:	682b      	ldr	r3, [r5, #0]
 801d4b0:	b103      	cbz	r3, 801d4b4 <_fstat_r+0x1c>
 801d4b2:	6023      	str	r3, [r4, #0]
 801d4b4:	bd38      	pop	{r3, r4, r5, pc}
 801d4b6:	bf00      	nop
 801d4b8:	20022a40 	.word	0x20022a40

0801d4bc <_isatty_r>:
 801d4bc:	b538      	push	{r3, r4, r5, lr}
 801d4be:	4d06      	ldr	r5, [pc, #24]	@ (801d4d8 <_isatty_r+0x1c>)
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	4604      	mov	r4, r0
 801d4c4:	4608      	mov	r0, r1
 801d4c6:	602b      	str	r3, [r5, #0]
 801d4c8:	f7e4 fad6 	bl	8001a78 <_isatty>
 801d4cc:	1c43      	adds	r3, r0, #1
 801d4ce:	d102      	bne.n	801d4d6 <_isatty_r+0x1a>
 801d4d0:	682b      	ldr	r3, [r5, #0]
 801d4d2:	b103      	cbz	r3, 801d4d6 <_isatty_r+0x1a>
 801d4d4:	6023      	str	r3, [r4, #0]
 801d4d6:	bd38      	pop	{r3, r4, r5, pc}
 801d4d8:	20022a40 	.word	0x20022a40

0801d4dc <_sbrk_r>:
 801d4dc:	b538      	push	{r3, r4, r5, lr}
 801d4de:	4d06      	ldr	r5, [pc, #24]	@ (801d4f8 <_sbrk_r+0x1c>)
 801d4e0:	2300      	movs	r3, #0
 801d4e2:	4604      	mov	r4, r0
 801d4e4:	4608      	mov	r0, r1
 801d4e6:	602b      	str	r3, [r5, #0]
 801d4e8:	f7e4 fade 	bl	8001aa8 <_sbrk>
 801d4ec:	1c43      	adds	r3, r0, #1
 801d4ee:	d102      	bne.n	801d4f6 <_sbrk_r+0x1a>
 801d4f0:	682b      	ldr	r3, [r5, #0]
 801d4f2:	b103      	cbz	r3, 801d4f6 <_sbrk_r+0x1a>
 801d4f4:	6023      	str	r3, [r4, #0]
 801d4f6:	bd38      	pop	{r3, r4, r5, pc}
 801d4f8:	20022a40 	.word	0x20022a40

0801d4fc <abort>:
 801d4fc:	b508      	push	{r3, lr}
 801d4fe:	2006      	movs	r0, #6
 801d500:	f000 f82c 	bl	801d55c <raise>
 801d504:	2001      	movs	r0, #1
 801d506:	f7e4 fa73 	bl	80019f0 <_exit>

0801d50a <_raise_r>:
 801d50a:	291f      	cmp	r1, #31
 801d50c:	b538      	push	{r3, r4, r5, lr}
 801d50e:	4605      	mov	r5, r0
 801d510:	460c      	mov	r4, r1
 801d512:	d904      	bls.n	801d51e <_raise_r+0x14>
 801d514:	2316      	movs	r3, #22
 801d516:	6003      	str	r3, [r0, #0]
 801d518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d51c:	bd38      	pop	{r3, r4, r5, pc}
 801d51e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d520:	b112      	cbz	r2, 801d528 <_raise_r+0x1e>
 801d522:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d526:	b94b      	cbnz	r3, 801d53c <_raise_r+0x32>
 801d528:	4628      	mov	r0, r5
 801d52a:	f000 f831 	bl	801d590 <_getpid_r>
 801d52e:	4622      	mov	r2, r4
 801d530:	4601      	mov	r1, r0
 801d532:	4628      	mov	r0, r5
 801d534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d538:	f000 b818 	b.w	801d56c <_kill_r>
 801d53c:	2b01      	cmp	r3, #1
 801d53e:	d00a      	beq.n	801d556 <_raise_r+0x4c>
 801d540:	1c59      	adds	r1, r3, #1
 801d542:	d103      	bne.n	801d54c <_raise_r+0x42>
 801d544:	2316      	movs	r3, #22
 801d546:	6003      	str	r3, [r0, #0]
 801d548:	2001      	movs	r0, #1
 801d54a:	e7e7      	b.n	801d51c <_raise_r+0x12>
 801d54c:	2100      	movs	r1, #0
 801d54e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d552:	4620      	mov	r0, r4
 801d554:	4798      	blx	r3
 801d556:	2000      	movs	r0, #0
 801d558:	e7e0      	b.n	801d51c <_raise_r+0x12>
	...

0801d55c <raise>:
 801d55c:	4b02      	ldr	r3, [pc, #8]	@ (801d568 <raise+0xc>)
 801d55e:	4601      	mov	r1, r0
 801d560:	6818      	ldr	r0, [r3, #0]
 801d562:	f7ff bfd2 	b.w	801d50a <_raise_r>
 801d566:	bf00      	nop
 801d568:	20000080 	.word	0x20000080

0801d56c <_kill_r>:
 801d56c:	b538      	push	{r3, r4, r5, lr}
 801d56e:	4d07      	ldr	r5, [pc, #28]	@ (801d58c <_kill_r+0x20>)
 801d570:	2300      	movs	r3, #0
 801d572:	4604      	mov	r4, r0
 801d574:	4608      	mov	r0, r1
 801d576:	4611      	mov	r1, r2
 801d578:	602b      	str	r3, [r5, #0]
 801d57a:	f7e4 fa27 	bl	80019cc <_kill>
 801d57e:	1c43      	adds	r3, r0, #1
 801d580:	d102      	bne.n	801d588 <_kill_r+0x1c>
 801d582:	682b      	ldr	r3, [r5, #0]
 801d584:	b103      	cbz	r3, 801d588 <_kill_r+0x1c>
 801d586:	6023      	str	r3, [r4, #0]
 801d588:	bd38      	pop	{r3, r4, r5, pc}
 801d58a:	bf00      	nop
 801d58c:	20022a40 	.word	0x20022a40

0801d590 <_getpid_r>:
 801d590:	f7e4 ba14 	b.w	80019bc <_getpid>

0801d594 <_init>:
 801d594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d596:	bf00      	nop
 801d598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d59a:	bc08      	pop	{r3}
 801d59c:	469e      	mov	lr, r3
 801d59e:	4770      	bx	lr

0801d5a0 <_fini>:
 801d5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5a2:	bf00      	nop
 801d5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d5a6:	bc08      	pop	{r3}
 801d5a8:	469e      	mov	lr, r3
 801d5aa:	4770      	bx	lr
