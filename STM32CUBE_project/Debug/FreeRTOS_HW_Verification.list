
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020e14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ec4  08020fe4  08020fe4  00021fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024ea8  08024ea8  000261cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08024ea8  08024ea8  00025ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024eb0  08024eb0  000261cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024eb0  08024eb0  00025eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024eb4  08024eb4  00025eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08024eb8  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08024f44  0002608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08024fe4  0002612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002d6f4  200001cc  08025084  000261cc  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  2002d8c0  08025084  000268c0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000261cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045aea  00000000  00000000  000261fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ad7a  00000000  00000000  0006bce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003058  00000000  00000000  00076a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025ea  00000000  00000000  00079ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ee57  00000000  00000000  0007c0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004eea0  00000000  00000000  000baef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123874  00000000  00000000  00109d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022d60d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ccd0  00000000  00000000  0022d650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0023a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020fcc 	.word	0x08020fcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08020fcc 	.word	0x08020fcc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fed5 	bl	80023ec <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fde4 	bl	8001214 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f875 	bl	800274c <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fdd4 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001e8 	.word	0x200001e8
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fce1 	bl	80050ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fdcf 	bl	80032d0 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fd6c 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000230 	.word	0x20000230
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fb95 	bl	8002ebc <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd3c 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000290 	.word	0x20000290
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fb20 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fb39 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fb18 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fb31 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fb10 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fb29 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fb08 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fb21 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 fb00 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fb19 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 faf8 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fb11 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 faf0 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fb09 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 fae8 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 fb01 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 fae0 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 faf9 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fad8 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 faf1 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fad0 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 fae9 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fac8 	bl	8002e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 fae1 	bl	8002ea0 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f01f fba3 	bl	8020044 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	080210c0 	.word	0x080210c0

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000920:	4a47      	ldr	r2, [pc, #284]	@ (8000a40 <MX_FREERTOS_Init+0x124>)
 8000922:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000926:	2010      	movs	r0, #16
 8000928:	f00c ff2c 	bl	800d784 <osMessageQueueNew>
 800092c:	4603      	mov	r3, r0
 800092e:	4a45      	ldr	r2, [pc, #276]	@ (8000a44 <MX_FREERTOS_Init+0x128>)
 8000930:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000932:	4a45      	ldr	r2, [pc, #276]	@ (8000a48 <MX_FREERTOS_Init+0x12c>)
 8000934:	2110      	movs	r1, #16
 8000936:	2010      	movs	r0, #16
 8000938:	f00c ff24 	bl	800d784 <osMessageQueueNew>
 800093c:	4603      	mov	r3, r0
 800093e:	4a43      	ldr	r2, [pc, #268]	@ (8000a4c <MX_FREERTOS_Init+0x130>)
 8000940:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000942:	4a43      	ldr	r2, [pc, #268]	@ (8000a50 <MX_FREERTOS_Init+0x134>)
 8000944:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000948:	2008      	movs	r0, #8
 800094a:	f00c ff1b 	bl	800d784 <osMessageQueueNew>
 800094e:	4603      	mov	r3, r0
 8000950:	4a40      	ldr	r2, [pc, #256]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 8000952:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 8000954:	4a40      	ldr	r2, [pc, #256]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 8000956:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800095a:	2008      	movs	r0, #8
 800095c:	f00c ff12 	bl	800d784 <osMessageQueueNew>
 8000960:	4603      	mov	r3, r0
 8000962:	4a3e      	ldr	r2, [pc, #248]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 8000964:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 8000966:	4a3e      	ldr	r2, [pc, #248]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 8000968:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800096c:	2008      	movs	r0, #8
 800096e:	f00c ff09 	bl	800d784 <osMessageQueueNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a3b      	ldr	r2, [pc, #236]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 8000976:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 8000978:	4a3b      	ldr	r2, [pc, #236]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800097a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800097e:	2008      	movs	r0, #8
 8000980:	f00c ff00 	bl	800d784 <osMessageQueueNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a39      	ldr	r2, [pc, #228]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 8000988:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 800098a:	4a39      	ldr	r2, [pc, #228]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 800098c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000990:	2008      	movs	r0, #8
 8000992:	f00c fef7 	bl	800d784 <osMessageQueueNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a36      	ldr	r2, [pc, #216]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 800099a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800099c:	4a36      	ldr	r2, [pc, #216]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 800099e:	2100      	movs	r1, #0
 80009a0:	4836      	ldr	r0, [pc, #216]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 80009a2:	f00c fb3b 	bl	800d01c <osThreadNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a35      	ldr	r2, [pc, #212]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009ac:	4a35      	ldr	r2, [pc, #212]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4835      	ldr	r0, [pc, #212]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 80009b2:	f00c fb33 	bl	800d01c <osThreadNew>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a34      	ldr	r2, [pc, #208]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009ba:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009bc:	4a34      	ldr	r2, [pc, #208]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009be:	2100      	movs	r1, #0
 80009c0:	4834      	ldr	r0, [pc, #208]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009c2:	f00c fb2b 	bl	800d01c <osThreadNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a33      	ldr	r2, [pc, #204]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009ca:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009cc:	4a33      	ldr	r2, [pc, #204]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4833      	ldr	r0, [pc, #204]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009d2:	f00c fb23 	bl	800d01c <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009da:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009dc:	4a32      	ldr	r2, [pc, #200]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009de:	2100      	movs	r1, #0
 80009e0:	4832      	ldr	r0, [pc, #200]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009e2:	f00c fb1b 	bl	800d01c <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a31      	ldr	r2, [pc, #196]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009ec:	4a31      	ldr	r2, [pc, #196]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4831      	ldr	r0, [pc, #196]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009f2:	f00c fb13 	bl	800d01c <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a30      	ldr	r2, [pc, #192]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009fa:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 80009fc:	4a30      	ldr	r2, [pc, #192]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4830      	ldr	r0, [pc, #192]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 8000a02:	f00c fb0b 	bl	800d01c <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	482f      	ldr	r0, [pc, #188]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 8000a12:	f00c fb03 	bl	800d01c <osThreadNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 8000a1a:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	482e      	ldr	r0, [pc, #184]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 8000a22:	f00c fafb 	bl	800d01c <osThreadNew>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a2d      	ldr	r2, [pc, #180]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	482d      	ldr	r0, [pc, #180]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a32:	f00c faf3 	bl	800d01c <osThreadNew>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a2c      	ldr	r2, [pc, #176]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	08024b98 	.word	0x08024b98
 8000a44:	200002dc 	.word	0x200002dc
 8000a48:	08024bb0 	.word	0x08024bb0
 8000a4c:	200002e0 	.word	0x200002e0
 8000a50:	08024bc8 	.word	0x08024bc8
 8000a54:	200002e4 	.word	0x200002e4
 8000a58:	08024be0 	.word	0x08024be0
 8000a5c:	200002e8 	.word	0x200002e8
 8000a60:	08024bf8 	.word	0x08024bf8
 8000a64:	200002ec 	.word	0x200002ec
 8000a68:	08024c10 	.word	0x08024c10
 8000a6c:	200002f0 	.word	0x200002f0
 8000a70:	08024c28 	.word	0x08024c28
 8000a74:	200002f4 	.word	0x200002f4
 8000a78:	08024a30 	.word	0x08024a30
 8000a7c:	08000af1 	.word	0x08000af1
 8000a80:	200002b4 	.word	0x200002b4
 8000a84:	08024a54 	.word	0x08024a54
 8000a88:	08000b05 	.word	0x08000b05
 8000a8c:	200002b8 	.word	0x200002b8
 8000a90:	08024a78 	.word	0x08024a78
 8000a94:	08000b19 	.word	0x08000b19
 8000a98:	200002bc 	.word	0x200002bc
 8000a9c:	08024a9c 	.word	0x08024a9c
 8000aa0:	08000b2d 	.word	0x08000b2d
 8000aa4:	200002c0 	.word	0x200002c0
 8000aa8:	08024ac0 	.word	0x08024ac0
 8000aac:	08000b41 	.word	0x08000b41
 8000ab0:	200002c4 	.word	0x200002c4
 8000ab4:	08024ae4 	.word	0x08024ae4
 8000ab8:	08000b55 	.word	0x08000b55
 8000abc:	200002c8 	.word	0x200002c8
 8000ac0:	08024b08 	.word	0x08024b08
 8000ac4:	08000b69 	.word	0x08000b69
 8000ac8:	200002cc 	.word	0x200002cc
 8000acc:	08024b2c 	.word	0x08024b2c
 8000ad0:	08000b7d 	.word	0x08000b7d
 8000ad4:	200002d0 	.word	0x200002d0
 8000ad8:	08024b50 	.word	0x08024b50
 8000adc:	08000b91 	.word	0x08000b91
 8000ae0:	200002d4 	.word	0x200002d4
 8000ae4:	08024b74 	.word	0x08024b74
 8000ae8:	08000ba5 	.word	0x08000ba5
 8000aec:	200002d8 	.word	0x200002d8

08000af0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000af8:	f00b fb9e 	bl	800c238 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f00c fb3b 	bl	800d178 <osDelay>
 8000b02:	e7fb      	b.n	8000afc <StartDefaultTask+0xc>

08000b04 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  UDP_Listen(); // loops here
 8000b0c:	f01e fa5a 	bl	801efc4 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b20:	f01e f95a 	bl	801edd8 <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b34:	f01f f822 	bl	801fb7c <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000b48:	f01e fb56 	bl	801f1f8 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000b5c:	f01e fd24 	bl	801f5a8 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000b70:	f01e f84e 	bl	801ec10 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000b84:	f01e fee0 	bl	801f948 <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000b98:	f01e fada 	bl	801f150 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	printf("--------------------------------------\n");

	stats_display();
	osDelay(30000);
	*/
	  osDelay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f00c fae3 	bl	800d178 <osDelay>
 8000bb2:	e7fb      	b.n	8000bac <StartLoggerTask+0x8>

08000bb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a26      	ldr	r2, [pc, #152]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a20      	ldr	r2, [pc, #128]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a1a      	ldr	r2, [pc, #104]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_GPIO_Init+0xa4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <MX_I2C1_Init+0x78>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <MX_I2C1_Init+0x7c>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000c98:	f004 fbb4 	bl	8005404 <HAL_I2C_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ca2:	f000 fab7 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000caa:	f006 fd57 	bl	800775c <HAL_I2CEx_ConfigAnalogFilter>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cb4:	f000 faae 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_I2C1_Init+0x74>)
 8000cbc:	f006 fd99 	bl	80077f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 faa5 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200002f8 	.word	0x200002f8
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	20404768 	.word	0x20404768

08000cdc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d54 <MX_I2C2_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d58 <MX_I2C2_Init+0x7c>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000cee:	2214      	movs	r2, #20
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d16:	480e      	ldr	r0, [pc, #56]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d18:	f004 fb74 	bl	8005404 <HAL_I2C_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d22:	f000 fa77 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4809      	ldr	r0, [pc, #36]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d2a:	f006 fd17 	bl	800775c <HAL_I2CEx_ConfigAnalogFilter>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f000 fa6e 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_I2C2_Init+0x74>)
 8000d3c:	f006 fd59 	bl	80077f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d46:	f000 fa65 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000034c 	.word	0x2000034c
 8000d54:	40005800 	.word	0x40005800
 8000d58:	20404768 	.word	0x20404768

08000d5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	2284      	movs	r2, #132	@ 0x84
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f01f fab9 	bl	80202f4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a57      	ldr	r2, [pc, #348]	@ (8000ee4 <HAL_I2C_MspInit+0x188>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	f040 80b9 	bne.w	8000f00 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d8e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f007 fa81 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000da8:	f000 fa34 	bl	8001214 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dde:	2304      	movs	r3, #4
 8000de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4840      	ldr	r0, [pc, #256]	@ (8000eec <HAL_I2C_MspInit+0x190>)
 8000dec:	f004 f95e 	bl	80050ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	4a3c      	ldr	r2, [pc, #240]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000df6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <HAL_I2C_MspInit+0x18c>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000e08:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e0a:	4a3a      	ldr	r2, [pc, #232]	@ (8000ef4 <HAL_I2C_MspInit+0x198>)
 8000e0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e0e:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e14:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1c:	4b34      	ldr	r3, [pc, #208]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e22:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e48:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e4a:	f002 fa41 	bl	80032d0 <HAL_DMA_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000e54:	f000 f9de 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a25      	ldr	r2, [pc, #148]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ef0 <HAL_I2C_MspInit+0x194>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e66:	4a25      	ldr	r2, [pc, #148]	@ (8000efc <HAL_I2C_MspInit+0x1a0>)
 8000e68:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e70:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e74:	2240      	movs	r2, #64	@ 0x40
 8000e76:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e84:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000ea4:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000ea6:	f002 fa13 	bl	80032d0 <HAL_DMA_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000eb0:	f000 f9b0 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <HAL_I2C_MspInit+0x19c>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2105      	movs	r1, #5
 8000ec4:	201f      	movs	r0, #31
 8000ec6:	f001 ffcf 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000eca:	201f      	movs	r0, #31
 8000ecc:	f001 ffe8 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2105      	movs	r1, #5
 8000ed4:	2020      	movs	r0, #32
 8000ed6:	f001 ffc7 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000eda:	2020      	movs	r0, #32
 8000edc:	f001 ffe0 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ee0:	e0be      	b.n	8001060 <HAL_I2C_MspInit+0x304>
 8000ee2:	bf00      	nop
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	200003a0 	.word	0x200003a0
 8000ef4:	40026088 	.word	0x40026088
 8000ef8:	20000400 	.word	0x20000400
 8000efc:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a58      	ldr	r2, [pc, #352]	@ (8001068 <HAL_I2C_MspInit+0x30c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	f040 80aa 	bne.w	8001060 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f10:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 f9c1 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000f28:	f000 f974 	bl	8001214 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a4e      	ldr	r2, [pc, #312]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b4c      	ldr	r3, [pc, #304]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4c:	2312      	movs	r3, #18
 8000f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4841      	ldr	r0, [pc, #260]	@ (8001070 <HAL_I2C_MspInit+0x314>)
 8000f6c:	f004 f89e 	bl	80050ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f70:	4b3e      	ldr	r3, [pc, #248]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a3d      	ldr	r2, [pc, #244]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <HAL_I2C_MspInit+0x310>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000f88:	4b3a      	ldr	r3, [pc, #232]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <HAL_I2C_MspInit+0x31c>)
 8000f8c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000f8e:	4b39      	ldr	r3, [pc, #228]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000f90:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000f94:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f96:	4b37      	ldr	r3, [pc, #220]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fa4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000faa:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb0:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000fc8:	482a      	ldr	r0, [pc, #168]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fca:	f002 f981 	bl	80032d0 <HAL_DMA_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000fd4:	f000 f91e 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a26      	ldr	r2, [pc, #152]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fde:	4a25      	ldr	r2, [pc, #148]	@ (8001074 <HAL_I2C_MspInit+0x318>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8000fe6:	4a26      	ldr	r2, [pc, #152]	@ (8001080 <HAL_I2C_MspInit+0x324>)
 8000fe8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8000fec:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000ff0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8000ff4:	2240      	movs	r2, #64	@ 0x40
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001000:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001004:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_I2C_MspInit+0x320>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <HAL_I2C_MspInit+0x320>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001024:	4815      	ldr	r0, [pc, #84]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001026:	f002 f953 	bl	80032d0 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001030:	f000 f8f0 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a11      	ldr	r2, [pc, #68]	@ (800107c <HAL_I2C_MspInit+0x320>)
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
 800103a:	4a10      	ldr	r2, [pc, #64]	@ (800107c <HAL_I2C_MspInit+0x320>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2105      	movs	r1, #5
 8001044:	2021      	movs	r0, #33	@ 0x21
 8001046:	f001 ff0f 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800104a:	2021      	movs	r0, #33	@ 0x21
 800104c:	f001 ff28 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2105      	movs	r1, #5
 8001054:	2022      	movs	r0, #34	@ 0x22
 8001056:	f001 ff07 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800105a:	2022      	movs	r0, #34	@ 0x22
 800105c:	f001 ff20 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	37b0      	adds	r7, #176	@ 0xb0
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40005800 	.word	0x40005800
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400
 8001074:	20000460 	.word	0x20000460
 8001078:	40026058 	.word	0x40026058
 800107c:	200004c0 	.word	0x200004c0
 8001080:	400260b8 	.word	0x400260b8

08001084 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <_write+0x3c>)
 8001092:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	b29a      	uxth	r2, r3
 8001098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <_write+0x40>)
 80010a0:	f009 fd76 	bl	800ab90 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 80010a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010a8:	2201      	movs	r2, #1
 80010aa:	6979      	ldr	r1, [r7, #20]
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <_write+0x40>)
 80010ae:	f009 fd6f 	bl	800ab90 <HAL_UART_Transmit>
	return len + 1;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	080210e0 	.word	0x080210e0
 80010c4:	200009c0 	.word	0x200009c0

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f001 f93d 	bl	800234a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f822 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f7ff fd6e 	bl	8000bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d8:	f7ff fb86 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80010dc:	f000 fe4c 	bl	8001d78 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80010e0:	f7ff fb40 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 80010e4:	f000 fde8 	bl	8001cb8 <MX_UART4_Init>
  MX_UART5_Init();
 80010e8:	f000 fe16 	bl	8001d18 <MX_UART5_Init>
  MX_I2C1_Init();
 80010ec:	f7ff fdb6 	bl	8000c5c <MX_I2C1_Init>
  MX_I2C2_Init();
 80010f0:	f7ff fdf4 	bl	8000cdc <MX_I2C2_Init>
  MX_SPI1_Init();
 80010f4:	f000 f894 	bl	8001220 <MX_SPI1_Init>
  MX_SPI4_Init();
 80010f8:	f000 f8d0 	bl	800129c <MX_SPI4_Init>
  MX_ADC1_Init();
 80010fc:	f7ff fa6e 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001100:	f000 fd38 	bl	8001b74 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001104:	f000 fce8 	bl	8001ad8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001108:	f00b fef6 	bl	800cef8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800110c:	f7ff fc06 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001110:	f00b ff26 	bl	800cf60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <main+0x4c>

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	@ 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2230      	movs	r2, #48	@ 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f01f f8e4 	bl	80202f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <SystemClock_Config+0xd0>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	4a29      	ldr	r2, [pc, #164]	@ (80011e8 <SystemClock_Config+0xd0>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	@ 0x40
 8001148:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <SystemClock_Config+0xd0>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <SystemClock_Config+0xd4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <SystemClock_Config+0xd4>)
 800115a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <SystemClock_Config+0xd4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2310      	movs	r3, #16
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117c:	2300      	movs	r3, #0
 800117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001180:	2308      	movs	r3, #8
 8001182:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001184:	23d8      	movs	r3, #216	@ 0xd8
 8001186:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4618      	mov	r0, r3
 8001196:	f006 fbc9 	bl	800792c <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011a0:	f000 f838 	bl	8001214 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011a4:	f006 fb72 	bl	800788c <HAL_PWREx_EnableOverDrive>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 f831 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2107      	movs	r1, #7
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 fe4f 	bl	8007e74 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011dc:	f000 f81a 	bl	8001214 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	@ 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001202:	f001 f8af 	bl	8002364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40001400 	.word	0x40001400

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001226:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <MX_SPI1_Init+0x78>)
 8001228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_SPI1_Init+0x74>)
 800122c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001230:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001232:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <MX_SPI1_Init+0x74>)
 800123a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800123e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_SPI1_Init+0x74>)
 800124e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001252:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001256:	2218      	movs	r2, #24
 8001258:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_SPI1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_SPI1_Init+0x74>)
 800126e:	2207      	movs	r2, #7
 8001270:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_SPI1_Init+0x74>)
 800127a:	2208      	movs	r2, #8
 800127c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_SPI1_Init+0x74>)
 8001280:	f007 fc00 	bl	8008a84 <HAL_SPI_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800128a:	f7ff ffc3 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000520 	.word	0x20000520
 8001298:	40013000 	.word	0x40013000

0800129c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80012a0:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012a2:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <MX_SPI4_Init+0x6c>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012b8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c0:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012da:	2200      	movs	r2, #0
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_SPI4_Init+0x68>)
 80012f2:	f007 fbc7 	bl	8008a84 <HAL_SPI_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80012fc:	f7ff ff8a 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000584 	.word	0x20000584
 8001308:	40013400 	.word	0x40013400

0800130c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08c      	sub	sp, #48	@ 0x30
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4aa1      	ldr	r2, [pc, #644]	@ (80015b0 <HAL_SPI_MspInit+0x2a4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	f040 80a9 	bne.w	8001482 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001330:	4ba0      	ldr	r3, [pc, #640]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001334:	4a9f      	ldr	r2, [pc, #636]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133a:	6453      	str	r3, [r2, #68]	@ 0x44
 800133c:	4b9d      	ldr	r3, [pc, #628]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800133e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001340:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b9a      	ldr	r3, [pc, #616]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	4a99      	ldr	r2, [pc, #612]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6313      	str	r3, [r2, #48]	@ 0x30
 8001354:	4b97      	ldr	r3, [pc, #604]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001360:	4b94      	ldr	r3, [pc, #592]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a93      	ldr	r2, [pc, #588]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b91      	ldr	r3, [pc, #580]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001378:	2370      	movs	r3, #112	@ 0x70
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001388:	2305      	movs	r3, #5
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4889      	ldr	r0, [pc, #548]	@ (80015b8 <HAL_SPI_MspInit+0x2ac>)
 8001394:	f003 fe8a 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001398:	2320      	movs	r3, #32
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a8:	2305      	movs	r3, #5
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4882      	ldr	r0, [pc, #520]	@ (80015bc <HAL_SPI_MspInit+0x2b0>)
 80013b4:	f003 fe7a 	bl	80050ac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80013b8:	4b81      	ldr	r3, [pc, #516]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013ba:	4a82      	ldr	r2, [pc, #520]	@ (80015c4 <HAL_SPI_MspInit+0x2b8>)
 80013bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80013be:	4b80      	ldr	r3, [pc, #512]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013c0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c6:	4b7e      	ldr	r3, [pc, #504]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b7c      	ldr	r3, [pc, #496]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b7b      	ldr	r3, [pc, #492]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013da:	4b79      	ldr	r3, [pc, #484]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e0:	4b77      	ldr	r3, [pc, #476]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013e6:	4b76      	ldr	r3, [pc, #472]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ec:	4b74      	ldr	r3, [pc, #464]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f2:	4b73      	ldr	r3, [pc, #460]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013f8:	4871      	ldr	r0, [pc, #452]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 80013fa:	f001 ff69 	bl	80032d0 <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001404:	f7ff ff06 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a6d      	ldr	r2, [pc, #436]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 800140c:	659a      	str	r2, [r3, #88]	@ 0x58
 800140e:	4a6c      	ldr	r2, [pc, #432]	@ (80015c0 <HAL_SPI_MspInit+0x2b4>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001414:	4b6c      	ldr	r3, [pc, #432]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001416:	4a6d      	ldr	r2, [pc, #436]	@ (80015cc <HAL_SPI_MspInit+0x2c0>)
 8001418:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800141a:	4b6b      	ldr	r3, [pc, #428]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800141c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001420:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001422:	4b69      	ldr	r3, [pc, #420]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001424:	2240      	movs	r2, #64	@ 0x40
 8001426:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b67      	ldr	r3, [pc, #412]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b66      	ldr	r3, [pc, #408]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001430:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001434:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001436:	4b64      	ldr	r3, [pc, #400]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143c:	4b62      	ldr	r3, [pc, #392]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001442:	4b61      	ldr	r3, [pc, #388]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001448:	4b5f      	ldr	r3, [pc, #380]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144e:	4b5e      	ldr	r3, [pc, #376]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001454:	485c      	ldr	r0, [pc, #368]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001456:	f001 ff3b 	bl	80032d0 <HAL_DMA_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001460:	f7ff fed8 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a58      	ldr	r2, [pc, #352]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 8001468:	655a      	str	r2, [r3, #84]	@ 0x54
 800146a:	4a57      	ldr	r2, [pc, #348]	@ (80015c8 <HAL_SPI_MspInit+0x2bc>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2105      	movs	r1, #5
 8001474:	2023      	movs	r0, #35	@ 0x23
 8001476:	f001 fcf7 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800147a:	2023      	movs	r0, #35	@ 0x23
 800147c:	f001 fd10 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001480:	e091      	b.n	80015a6 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a52      	ldr	r2, [pc, #328]	@ (80015d0 <HAL_SPI_MspInit+0x2c4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	f040 808c 	bne.w	80015a6 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800148e:	4b49      	ldr	r3, [pc, #292]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	4a48      	ldr	r2, [pc, #288]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 8001494:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001498:	6453      	str	r3, [r2, #68]	@ 0x44
 800149a:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a6:	4b43      	ldr	r3, [pc, #268]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a42      	ldr	r2, [pc, #264]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 80014ac:	f043 0310 	orr.w	r3, r3, #16
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b40      	ldr	r3, [pc, #256]	@ (80015b4 <HAL_SPI_MspInit+0x2a8>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014be:	2374      	movs	r3, #116	@ 0x74
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014ce:	2305      	movs	r3, #5
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	483e      	ldr	r0, [pc, #248]	@ (80015d4 <HAL_SPI_MspInit+0x2c8>)
 80014da:	f003 fde7 	bl	80050ac <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80014de:	4b3e      	ldr	r3, [pc, #248]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014e0:	4a3e      	ldr	r2, [pc, #248]	@ (80015dc <HAL_SPI_MspInit+0x2d0>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80014e4:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ec:	4b3a      	ldr	r3, [pc, #232]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b39      	ldr	r3, [pc, #228]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b37      	ldr	r3, [pc, #220]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001500:	4b35      	ldr	r3, [pc, #212]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001506:	4b34      	ldr	r3, [pc, #208]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800150c:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001512:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001518:	4b2f      	ldr	r3, [pc, #188]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800151e:	482e      	ldr	r0, [pc, #184]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001520:	f001 fed6 	bl	80032d0 <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800152a:	f7ff fe73 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a29      	ldr	r2, [pc, #164]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001532:	659a      	str	r2, [r3, #88]	@ 0x58
 8001534:	4a28      	ldr	r2, [pc, #160]	@ (80015d8 <HAL_SPI_MspInit+0x2cc>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800153c:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <HAL_SPI_MspInit+0x2d8>)
 800153e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001540:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001542:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001546:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800154a:	2240      	movs	r2, #64	@ 0x40
 800154c:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800155a:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156e:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800157a:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800157c:	f001 fea8 	bl	80032d0 <HAL_DMA_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8001586:	f7ff fe45 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001590:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <HAL_SPI_MspInit+0x2d4>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	2054      	movs	r0, #84	@ 0x54
 800159c:	f001 fc64 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80015a0:	2054      	movs	r0, #84	@ 0x54
 80015a2:	f001 fc7d 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3730      	adds	r7, #48	@ 0x30
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020400 	.word	0x40020400
 80015c0:	200005e8 	.word	0x200005e8
 80015c4:	40026440 	.word	0x40026440
 80015c8:	20000648 	.word	0x20000648
 80015cc:	40026458 	.word	0x40026458
 80015d0:	40013400 	.word	0x40013400
 80015d4:	40021000 	.word	0x40021000
 80015d8:	200006a8 	.word	0x200006a8
 80015dc:	40026410 	.word	0x40026410
 80015e0:	20000708 	.word	0x20000708
 80015e4:	40026428 	.word	0x40026428

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	210f      	movs	r1, #15
 8001622:	f06f 0001 	mvn.w	r0, #1
 8001626:	f001 fc1f 	bl	8002e68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	@ 0x38
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001648:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <HAL_InitTick+0xe0>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	4a32      	ldr	r2, [pc, #200]	@ (8001718 <HAL_InitTick+0xe0>)
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	6413      	str	r3, [r2, #64]	@ 0x40
 8001654:	4b30      	ldr	r3, [pc, #192]	@ (8001718 <HAL_InitTick+0xe0>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001660:	f107 0210 	add.w	r2, r7, #16
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f006 fde8 	bl	8008240 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800167a:	f006 fdb9 	bl	80081f0 <HAL_RCC_GetPCLK1Freq>
 800167e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001680:	e004      	b.n	800168c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001682:	f006 fdb5 	bl	80081f0 <HAL_RCC_GetPCLK1Freq>
 8001686:	4603      	mov	r3, r0
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800168c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <HAL_InitTick+0xe4>)
 8001690:	fba2 2303 	umull	r2, r3, r2, r3
 8001694:	0c9b      	lsrs	r3, r3, #18
 8001696:	3b01      	subs	r3, #1
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_InitTick+0xe8>)
 800169c:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <HAL_InitTick+0xec>)
 800169e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_InitTick+0xe8>)
 80016a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016a6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_InitTick+0xe8>)
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <HAL_InitTick+0xe8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <HAL_InitTick+0xe8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_InitTick+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80016c0:	4817      	ldr	r0, [pc, #92]	@ (8001720 <HAL_InitTick+0xe8>)
 80016c2:	f008 fcc9 	bl	800a058 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11b      	bne.n	800170c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80016d4:	4812      	ldr	r0, [pc, #72]	@ (8001720 <HAL_InitTick+0xe8>)
 80016d6:	f008 fdaf 	bl	800a238 <HAL_TIM_Base_Start_IT>
 80016da:	4603      	mov	r3, r0
 80016dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016e8:	2037      	movs	r0, #55	@ 0x37
 80016ea:	f001 fbd9 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d808      	bhi.n	8001706 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	2037      	movs	r0, #55	@ 0x37
 80016fa:	f001 fbb5 	bl	8002e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001728 <HAL_InitTick+0xf0>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e002      	b.n	800170c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800170c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001710:	4618      	mov	r0, r3
 8001712:	3738      	adds	r7, #56	@ 0x38
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	431bde83 	.word	0x431bde83
 8001720:	20000768 	.word	0x20000768
 8001724:	40001400 	.word	0x40001400
 8001728:	20000004 	.word	0x20000004

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <DMA1_Stream0_IRQHandler+0x10>)
 800176a:	f001 ff51 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000aa8 	.word	0x20000aa8

08001778 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <DMA1_Stream1_IRQHandler+0x10>)
 800177e:	f001 ff47 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000850 	.word	0x20000850

0800178c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <DMA1_Stream2_IRQHandler+0x10>)
 8001792:	f001 ff3d 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000a48 	.word	0x20000a48

080017a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <DMA1_Stream3_IRQHandler+0x10>)
 80017a6:	f001 ff33 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000460 	.word	0x20000460

080017b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <DMA1_Stream5_IRQHandler+0x10>)
 80017ba:	f001 ff29 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200003a0 	.word	0x200003a0

080017c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <DMA1_Stream6_IRQHandler+0x10>)
 80017ce:	f001 ff1f 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000400 	.word	0x20000400

080017dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <I2C1_EV_IRQHandler+0x10>)
 80017e2:	f004 fa51 	bl	8005c88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002f8 	.word	0x200002f8

080017f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <I2C1_ER_IRQHandler+0x10>)
 80017f6:	f004 fa61 	bl	8005cbc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200002f8 	.word	0x200002f8

08001804 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <I2C2_EV_IRQHandler+0x10>)
 800180a:	f004 fa3d 	bl	8005c88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000034c 	.word	0x2000034c

08001818 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <I2C2_ER_IRQHandler+0x10>)
 800181e:	f004 fa4d 	bl	8005cbc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000034c 	.word	0x2000034c

0800182c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <SPI1_IRQHandler+0x10>)
 8001832:	f007 fe87 	bl	8009544 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000520 	.word	0x20000520

08001840 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <USART3_IRQHandler+0x10>)
 8001846:	f009 facf 	bl	800ade8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200009c0 	.word	0x200009c0

08001854 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <DMA1_Stream7_IRQHandler+0x10>)
 800185a:	f001 fed9 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200004c0 	.word	0x200004c0

08001868 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <UART4_IRQHandler+0x10>)
 800186e:	f009 fabb 	bl	800ade8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200008b0 	.word	0x200008b0

0800187c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <UART5_IRQHandler+0x10>)
 8001882:	f009 fab1 	bl	800ade8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000938 	.word	0x20000938

08001890 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <TIM6_DAC_IRQHandler+0x10>)
 8001896:	f008 fd47 	bl	800a328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000804 	.word	0x20000804

080018a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <TIM7_IRQHandler+0x10>)
 80018aa:	f008 fd3d 	bl	800a328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000768 	.word	0x20000768

080018b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <DMA2_Stream0_IRQHandler+0x10>)
 80018be:	f001 fea7 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200006a8 	.word	0x200006a8

080018cc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <DMA2_Stream1_IRQHandler+0x10>)
 80018d2:	f001 fe9d 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000708 	.word	0x20000708

080018e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <DMA2_Stream2_IRQHandler+0x10>)
 80018e6:	f001 fe93 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200005e8 	.word	0x200005e8

080018f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	@ (8001904 <DMA2_Stream3_IRQHandler+0x10>)
 80018fa:	f001 fe89 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000648 	.word	0x20000648

08001908 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA2_Stream4_IRQHandler+0x10>)
 800190e:	f001 fe7f 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000230 	.word	0x20000230

0800191c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <ETH_IRQHandler+0x10>)
 8001922:	f002 fcdb 	bl	80042dc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000cf9c 	.word	0x2000cf9c

08001930 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <ETH_WKUP_IRQHandler+0x10>)
 8001936:	f002 fcd1 	bl	80042dc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000cf9c 	.word	0x2000cf9c

08001944 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <SPI4_IRQHandler+0x10>)
 800194a:	f007 fdfb 	bl	8009544 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000584 	.word	0x20000584

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001972:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <_kill+0x20>)
 8001974:	2216      	movs	r2, #22
 8001976:	601a      	str	r2, [r3, #0]
  return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	2002d8b0 	.word	0x2002d8b0

0800198c <_exit>:

void _exit (int status)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001994:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ffe5 	bl	8001968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800199e:	bf00      	nop
 80019a0:	e7fd      	b.n	800199e <_exit+0x12>

080019a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e00a      	b.n	80019ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b4:	f3af 8000 	nop.w
 80019b8:	4601      	mov	r1, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	60ba      	str	r2, [r7, #8]
 80019c0:	b2ca      	uxtb	r2, r1
 80019c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbf0      	blt.n	80019b4 <_read+0x12>
  }

  return len;
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a04:	605a      	str	r2, [r3, #4]
  return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_isatty>:

int _isatty(int file)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d205      	bcs.n	8001a80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a74:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <_sbrk+0x6c>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	20050000 	.word	0x20050000
 8001aa4:	00002000 	.word	0x00002000
 8001aa8:	200007b4 	.word	0x200007b4
 8001aac:	2002d8c0 	.word	0x2002d8c0
 8001ab0:	2002d8b0 	.word	0x2002d8b0

08001ab4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001af8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001afc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1e:	4814      	ldr	r0, [pc, #80]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b20:	f008 fa9a 	bl	800a058 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b2a:	f7ff fb73 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b3c:	f008 fcfc 	bl	800a538 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b46:	f7ff fb65 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <MX_TIM2_Init+0x98>)
 8001b58:	f008 ff20 	bl	800a99c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b62:	f7ff fb57 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200007b8 	.word	0x200007b8

08001b74 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001b86:	4a15      	ldr	r2, [pc, #84]	@ (8001bdc <MX_TIM6_Init+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001b8c:	f240 221b 	movw	r2, #539	@ 0x21b
 8001b90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001b9a:	2263      	movs	r2, #99	@ 0x63
 8001b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001ba6:	f008 fa57 	bl	800a058 <HAL_TIM_Base_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bb0:	f7ff fb30 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_TIM6_Init+0x64>)
 8001bc2:	f008 feeb 	bl	800a99c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bcc:	f7ff fb22 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000804 	.word	0x20000804
 8001bdc:	40001000 	.word	0x40001000

08001be0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c0a:	e049      	b.n	8001ca0 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a26      	ldr	r2, [pc, #152]	@ (8001cac <HAL_TIM_Base_MspInit+0xcc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d144      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xc8>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c2e:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c30:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <HAL_TIM_Base_MspInit+0xd4>)
 8001c32:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c36:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c3a:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c4e:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c56:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c58:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c5e:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c68:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c6c:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001c74:	480e      	ldr	r0, [pc, #56]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c76:	f001 fb2b 	bl	80032d0 <HAL_DMA_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001c80:	f7ff fac8 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c88:	621a      	str	r2, [r3, #32]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xd0>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2105      	movs	r1, #5
 8001c94:	2036      	movs	r0, #54	@ 0x36
 8001c96:	f001 f8e7 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c9a:	2036      	movs	r0, #54	@ 0x36
 8001c9c:	f001 f900 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40001000 	.word	0x40001000
 8001cb0:	20000850 	.word	0x20000850
 8001cb4:	40026028 	.word	0x40026028

08001cb8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <MX_UART4_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_UART4_Init+0x58>)
 8001cfc:	f008 fefa 	bl	800aaf4 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d06:	f7ff fa85 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200008b0 	.word	0x200008b0
 8001d14:	40004c00 	.word	0x40004c00

08001d18 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d1e:	4a15      	ldr	r2, [pc, #84]	@ (8001d74 <MX_UART5_Init+0x5c>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_UART5_Init+0x58>)
 8001d5c:	f008 feca 	bl	800aaf4 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d66:	f7ff fa55 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000938 	.word	0x20000938
 8001d74:	40005000 	.word	0x40005000

08001d78 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d7e:	4a15      	ldr	r2, [pc, #84]	@ (8001dd4 <MX_USART3_UART_Init+0x5c>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_USART3_UART_Init+0x58>)
 8001dbc:	f008 fe9a 	bl	800aaf4 <HAL_UART_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dc6:	f7ff fa25 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200009c0 	.word	0x200009c0
 8001dd4:	40004800 	.word	0x40004800

08001dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0b0      	sub	sp, #192	@ 0xc0
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001df4:	2284      	movs	r2, #132	@ 0x84
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f01e fa7b 	bl	80202f4 <memset>
  if(uartHandle->Instance==UART4)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4ab0      	ldr	r2, [pc, #704]	@ (80020c4 <HAL_UART_MspInit+0x2ec>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d173      	bne.n	8001ef0 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e16:	4618      	mov	r0, r3
 8001e18:	f006 fa44 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e22:	f7ff f9f7 	bl	8001214 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e26:	4ba8      	ldr	r3, [pc, #672]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4aa7      	ldr	r2, [pc, #668]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4ba5      	ldr	r3, [pc, #660]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4ba2      	ldr	r3, [pc, #648]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4aa1      	ldr	r2, [pc, #644]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b9f      	ldr	r3, [pc, #636]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e70:	2308      	movs	r3, #8
 8001e72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4893      	ldr	r0, [pc, #588]	@ (80020cc <HAL_UART_MspInit+0x2f4>)
 8001e7e:	f003 f915 	bl	80050ac <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001e82:	4b93      	ldr	r3, [pc, #588]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e84:	4a93      	ldr	r2, [pc, #588]	@ (80020d4 <HAL_UART_MspInit+0x2fc>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001e88:	4b91      	ldr	r3, [pc, #580]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e90:	4b8f      	ldr	r3, [pc, #572]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b8e      	ldr	r3, [pc, #568]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eaa:	4b89      	ldr	r3, [pc, #548]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001eb0:	4b87      	ldr	r3, [pc, #540]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb6:	4b86      	ldr	r3, [pc, #536]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ebc:	4b84      	ldr	r3, [pc, #528]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001ec2:	4883      	ldr	r0, [pc, #524]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001ec4:	f001 fa04 	bl	80032d0 <HAL_DMA_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001ece:	f7ff f9a1 	bl	8001214 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a7e      	ldr	r2, [pc, #504]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001ed6:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ed8:	4a7d      	ldr	r2, [pc, #500]	@ (80020d0 <HAL_UART_MspInit+0x2f8>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2105      	movs	r1, #5
 8001ee2:	2034      	movs	r0, #52	@ 0x34
 8001ee4:	f000 ffc0 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ee8:	2034      	movs	r0, #52	@ 0x34
 8001eea:	f000 ffd9 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001eee:	e0e4      	b.n	80020ba <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a78      	ldr	r2, [pc, #480]	@ (80020d8 <HAL_UART_MspInit+0x300>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	f040 8095 	bne.w	8002026 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 f9ca 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001f16:	f7ff f97d 	bl	8001214 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f1a:	4b6b      	ldr	r3, [pc, #428]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	4a6a      	ldr	r2, [pc, #424]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f26:	4b68      	ldr	r3, [pc, #416]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	4b65      	ldr	r3, [pc, #404]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a64      	ldr	r2, [pc, #400]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b62      	ldr	r3, [pc, #392]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b5c      	ldr	r3, [pc, #368]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f82:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f86:	4619      	mov	r1, r3
 8001f88:	4850      	ldr	r0, [pc, #320]	@ (80020cc <HAL_UART_MspInit+0x2f4>)
 8001f8a:	f003 f88f 	bl	80050ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	484a      	ldr	r0, [pc, #296]	@ (80020dc <HAL_UART_MspInit+0x304>)
 8001fb4:	f003 f87a 	bl	80050ac <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001fb8:	4b49      	ldr	r3, [pc, #292]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fba:	4a4a      	ldr	r2, [pc, #296]	@ (80020e4 <HAL_UART_MspInit+0x30c>)
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001fbe:	4b48      	ldr	r3, [pc, #288]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fc0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fc4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fc6:	4b46      	ldr	r3, [pc, #280]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fcc:	4b44      	ldr	r3, [pc, #272]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd2:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fd8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fec:	4b3c      	ldr	r3, [pc, #240]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001ff8:	4839      	ldr	r0, [pc, #228]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8001ffa:	f001 f969 	bl	80032d0 <HAL_DMA_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002004:	f7ff f906 	bl	8001214 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a35      	ldr	r2, [pc, #212]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 800200c:	675a      	str	r2, [r3, #116]	@ 0x74
 800200e:	4a34      	ldr	r2, [pc, #208]	@ (80020e0 <HAL_UART_MspInit+0x308>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2105      	movs	r1, #5
 8002018:	2035      	movs	r0, #53	@ 0x35
 800201a:	f000 ff25 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800201e:	2035      	movs	r0, #53	@ 0x35
 8002020:	f000 ff3e 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 8002024:	e049      	b.n	80020ba <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2f      	ldr	r2, [pc, #188]	@ (80020e8 <HAL_UART_MspInit+0x310>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d144      	bne.n	80020ba <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002036:	2300      	movs	r3, #0
 8002038:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800203a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800203e:	4618      	mov	r0, r3
 8002040:	f006 f930 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_UART_MspInit+0x276>
      Error_Handler();
 800204a:	f7ff f8e3 	bl	8001214 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a1d      	ldr	r2, [pc, #116]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a17      	ldr	r2, [pc, #92]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_UART_MspInit+0x2f0>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800207e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002098:	2307      	movs	r3, #7
 800209a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020a2:	4619      	mov	r1, r3
 80020a4:	480d      	ldr	r0, [pc, #52]	@ (80020dc <HAL_UART_MspInit+0x304>)
 80020a6:	f003 f801 	bl	80050ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2105      	movs	r1, #5
 80020ae:	2027      	movs	r0, #39	@ 0x27
 80020b0:	f000 feda 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020b4:	2027      	movs	r0, #39	@ 0x27
 80020b6:	f000 fef3 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	37c0      	adds	r7, #192	@ 0xc0
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40004c00 	.word	0x40004c00
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020800 	.word	0x40020800
 80020d0:	20000a48 	.word	0x20000a48
 80020d4:	40026040 	.word	0x40026040
 80020d8:	40005000 	.word	0x40005000
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	20000aa8 	.word	0x20000aa8
 80020e4:	40026010 	.word	0x40026010
 80020e8:	40004800 	.word	0x40004800

080020ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002124 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020f0:	f7ff fce0 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f4:	480c      	ldr	r0, [pc, #48]	@ (8002128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020f6:	490d      	ldr	r1, [pc, #52]	@ (800212c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800210c:	4c0a      	ldr	r4, [pc, #40]	@ (8002138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800211a:	f01e f997 	bl	802044c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7fe ffd3 	bl	80010c8 <main>
  bx  lr    
 8002122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002124:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002130:	08024eb8 	.word	0x08024eb8
  ldr r2, =_sbss
 8002134:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8002138:	2002d8c0 	.word	0x2002d8c0

0800213c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC_IRQHandler>

0800213e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <LAN8742_RegisterBusIO+0x28>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <LAN8742_RegisterBusIO+0x28>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <LAN8742_RegisterBusIO+0x28>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800216a:	e014      	b.n	8002196 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d139      	bne.n	8002232 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e01c      	b.n	8002212 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f107 020c 	add.w	r2, r7, #12
 80021e0:	2112      	movs	r1, #18
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	4798      	blx	r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da03      	bge.n	80021f4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80021ec:	f06f 0304 	mvn.w	r3, #4
 80021f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80021f2:	e00b      	b.n	800220c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d105      	bne.n	800220c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
         break;
 800220a:	e005      	b.n	8002218 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	3301      	adds	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b1f      	cmp	r3, #31
 8002216:	d9df      	bls.n	80021d8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b1f      	cmp	r3, #31
 800221e:	d902      	bls.n	8002226 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002220:	f06f 0302 	mvn.w	r3, #2
 8002224:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002232:	693b      	ldr	r3, [r7, #16]
 }
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6810      	ldr	r0, [r2, #0]
 8002250:	f107 020c 	add.w	r2, r7, #12
 8002254:	2101      	movs	r1, #1
 8002256:	4798      	blx	r3
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	da02      	bge.n	8002264 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800225e:	f06f 0304 	mvn.w	r3, #4
 8002262:	e06e      	b.n	8002342 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6810      	ldr	r0, [r2, #0]
 800226c:	f107 020c 	add.w	r2, r7, #12
 8002270:	2101      	movs	r1, #1
 8002272:	4798      	blx	r3
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	da02      	bge.n	8002280 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800227a:	f06f 0304 	mvn.w	r3, #4
 800227e:	e060      	b.n	8002342 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800228a:	2301      	movs	r3, #1
 800228c:	e059      	b.n	8002342 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6810      	ldr	r0, [r2, #0]
 8002296:	f107 020c 	add.w	r2, r7, #12
 800229a:	2100      	movs	r1, #0
 800229c:	4798      	blx	r3
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da02      	bge.n	80022aa <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80022a4:	f06f 0304 	mvn.w	r3, #4
 80022a8:	e04b      	b.n	8002342 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11b      	bne.n	80022ec <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <LAN8742_GetLinkState+0x90>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022c8:	2302      	movs	r3, #2
 80022ca:	e03a      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e033      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022e4:	2304      	movs	r3, #4
 80022e6:	e02c      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022e8:	2305      	movs	r3, #5
 80022ea:	e02a      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6810      	ldr	r0, [r2, #0]
 80022f4:	f107 020c 	add.w	r2, r7, #12
 80022f8:	211f      	movs	r1, #31
 80022fa:	4798      	blx	r3
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	da02      	bge.n	8002308 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002302:	f06f 0304 	mvn.w	r3, #4
 8002306:	e01c      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002312:	2306      	movs	r3, #6
 8002314:	e015      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	2b18      	cmp	r3, #24
 800231e:	d101      	bne.n	8002324 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002320:	2302      	movs	r3, #2
 8002322:	e00e      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 031c 	and.w	r3, r3, #28
 800232a:	2b08      	cmp	r3, #8
 800232c:	d101      	bne.n	8002332 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800232e:	2303      	movs	r3, #3
 8002330:	e007      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 031c 	and.w	r3, r3, #28
 8002338:	2b14      	cmp	r3, #20
 800233a:	d101      	bne.n	8002340 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800233c:	2304      	movs	r3, #4
 800233e:	e000      	b.n	8002342 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002340:	2305      	movs	r3, #5
    }
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234e:	2003      	movs	r0, #3
 8002350:	f000 fd7f 	bl	8002e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002354:	200f      	movs	r0, #15
 8002356:	f7ff f96f 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800235a:	f7ff f945 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_IncTick+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_IncTick+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4413      	add	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	@ (8002388 <HAL_IncTick+0x24>)
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000008 	.word	0x20000008
 8002388:	20000b08 	.word	0x20000b08

0800238c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;
 8002390:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <HAL_GetTick+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000b08 	.word	0x20000b08

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff ffee 	bl	800238c <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_Delay+0x44>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffde 	bl	800238c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008

080023ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e031      	b.n	8002466 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe f938 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <HAL_ADC_Init+0x84>)
 8002430:	4013      	ands	r3, r2
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fae0 	bl	8002a00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
 8002456:	e001      	b.n	800245c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	ffffeefd 	.word	0xffffeefd

08002474 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Start_DMA+0x22>
 8002492:	2302      	movs	r3, #2
 8002494:	e0d6      	b.n	8002644 <HAL_ADC_Start_DMA+0x1d0>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d018      	beq.n	80024de <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024bc:	4b63      	ldr	r3, [pc, #396]	@ (800264c <HAL_ADC_Start_DMA+0x1d8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a63      	ldr	r2, [pc, #396]	@ (8002650 <HAL_ADC_Start_DMA+0x1dc>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9a      	lsrs	r2, r3, #18
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	f040 809e 	bne.w	800262a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024f2:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <HAL_ADC_Start_DMA+0x1e0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002514:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002528:	d106      	bne.n	8002538 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f023 0206 	bic.w	r2, r3, #6
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
 8002536:	e002      	b.n	800253e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	4a43      	ldr	r2, [pc, #268]	@ (8002658 <HAL_ADC_Start_DMA+0x1e4>)
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002552:	4a42      	ldr	r2, [pc, #264]	@ (800265c <HAL_ADC_Start_DMA+0x1e8>)
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255a:	4a41      	ldr	r2, [pc, #260]	@ (8002660 <HAL_ADC_Start_DMA+0x1ec>)
 800255c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002566:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002576:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002586:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	334c      	adds	r3, #76	@ 0x4c
 8002592:	4619      	mov	r1, r3
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f000 ff48 	bl	800342c <HAL_DMA_Start_IT>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80025a0:	4b30      	ldr	r3, [pc, #192]	@ (8002664 <HAL_ADC_Start_DMA+0x1f0>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d143      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e03a      	b.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a25      	ldr	r2, [pc, #148]	@ (8002668 <HAL_ADC_Start_DMA+0x1f4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10e      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x180>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025f2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_ADC_Start_DMA+0x1f0>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d120      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a19      	ldr	r2, [pc, #100]	@ (800266c <HAL_ADC_Start_DMA+0x1f8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d11b      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d114      	bne.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	e00b      	b.n	8002642 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000000 	.word	0x20000000
 8002650:	431bde83 	.word	0x431bde83
 8002654:	fffff8fe 	.word	0xfffff8fe
 8002658:	08002bf5 	.word	0x08002bf5
 800265c:	08002caf 	.word	0x08002caf
 8002660:	08002ccb 	.word	0x08002ccb
 8002664:	40012300 	.word	0x40012300
 8002668:	40012000 	.word	0x40012000
 800266c:	40012200 	.word	0x40012200

08002670 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_ADC_Stop_DMA+0x1a>
 8002686:	2302      	movs	r3, #2
 8002688:	e046      	b.n	8002718 <HAL_ADC_Stop_DMA+0xa8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d12e      	bne.n	800270e <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026be:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d10f      	bne.n	80026ee <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff0a 	bl	80034ec <HAL_DMA_Abort>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80026fc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002702:	4b07      	ldr	r3, [pc, #28]	@ (8002720 <HAL_ADC_Stop_DMA+0xb0>)
 8002704:	4013      	ands	r3, r2
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	ffffeefe 	.word	0xffffeefe

08002724 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1c>
 8002764:	2302      	movs	r3, #2
 8002766:	e13a      	b.n	80029de <HAL_ADC_ConfigChannel+0x292>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b09      	cmp	r3, #9
 8002776:	d93a      	bls.n	80027ee <HAL_ADC_ConfigChannel+0xa2>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002780:	d035      	beq.n	80027ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b29b      	uxth	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	3b1e      	subs	r3, #30
 8002798:	2207      	movs	r2, #7
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	400a      	ands	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a8f      	ldr	r2, [pc, #572]	@ (80029ec <HAL_ADC_ConfigChannel+0x2a0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10a      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68d9      	ldr	r1, [r3, #12]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	061a      	lsls	r2, r3, #24
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c6:	e039      	b.n	800283c <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68d9      	ldr	r1, [r3, #12]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4403      	add	r3, r0
 80027e0:	3b1e      	subs	r3, #30
 80027e2:	409a      	lsls	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ec:	e026      	b.n	800283c <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6919      	ldr	r1, [r3, #16]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2207      	movs	r2, #7
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43da      	mvns	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	400a      	ands	r2, r1
 8002814:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6919      	ldr	r1, [r3, #16]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	4603      	mov	r3, r0
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4403      	add	r3, r0
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	409a      	lsls	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b06      	cmp	r3, #6
 8002842:	d824      	bhi.n	800288e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	3b05      	subs	r3, #5
 8002856:	221f      	movs	r2, #31
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43da      	mvns	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	400a      	ands	r2, r1
 8002864:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b05      	subs	r3, #5
 8002880:	fa00 f203 	lsl.w	r2, r0, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	635a      	str	r2, [r3, #52]	@ 0x34
 800288c:	e04c      	b.n	8002928 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d824      	bhi.n	80028e0 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b23      	subs	r3, #35	@ 0x23
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	400a      	ands	r2, r1
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b23      	subs	r3, #35	@ 0x23
 80028d2:	fa00 f203 	lsl.w	r2, r0, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80028de:	e023      	b.n	8002928 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b41      	subs	r3, #65	@ 0x41
 80028f2:	221f      	movs	r2, #31
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43da      	mvns	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	400a      	ands	r2, r1
 8002900:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b41      	subs	r3, #65	@ 0x41
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a30      	ldr	r2, [pc, #192]	@ (80029f0 <HAL_ADC_ConfigChannel+0x2a4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d10a      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1fc>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800293a:	d105      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800293c:	4b2d      	ldr	r3, [pc, #180]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a2c      	ldr	r2, [pc, #176]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002942:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002946:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a28      	ldr	r2, [pc, #160]	@ (80029f0 <HAL_ADC_ConfigChannel+0x2a4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10f      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x226>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b12      	cmp	r3, #18
 8002958:	d10b      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800295a:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a25      	ldr	r2, [pc, #148]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002960:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002964:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002966:	4b23      	ldr	r3, [pc, #140]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a22      	ldr	r2, [pc, #136]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800296c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002970:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d12b      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x288>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1a      	ldr	r2, [pc, #104]	@ (80029ec <HAL_ADC_ConfigChannel+0x2a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <HAL_ADC_ConfigChannel+0x242>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b11      	cmp	r3, #17
 800298c:	d122      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800298e:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a18      	ldr	r2, [pc, #96]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002994:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002998:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800299a:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a15      	ldr	r2, [pc, #84]	@ (80029f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80029a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_ADC_ConfigChannel+0x2a0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d111      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <HAL_ADC_ConfigChannel+0x2ac>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_ADC_ConfigChannel+0x2b0>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9a      	lsrs	r2, r3, #18
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029c6:	e002      	b.n	80029ce <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f9      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	10000012 	.word	0x10000012
 80029f0:	40012000 	.word	0x40012000
 80029f4:	40012300 	.word	0x40012300
 80029f8:	20000000 	.word	0x20000000
 80029fc:	431bde83 	.word	0x431bde83

08002a00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a08:	4b78      	ldr	r3, [pc, #480]	@ (8002bec <ADC_Init+0x1ec>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a77      	ldr	r2, [pc, #476]	@ (8002bec <ADC_Init+0x1ec>)
 8002a0e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002a12:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a14:	4b75      	ldr	r3, [pc, #468]	@ (8002bec <ADC_Init+0x1ec>)
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4973      	ldr	r1, [pc, #460]	@ (8002bec <ADC_Init+0x1ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	021a      	lsls	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6899      	ldr	r1, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	4a58      	ldr	r2, [pc, #352]	@ (8002bf0 <ADC_Init+0x1f0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d022      	beq.n	8002ada <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002aa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e00f      	b.n	8002afa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002af8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0202 	bic.w	r2, r2, #2
 8002b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	005a      	lsls	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	3b01      	subs	r3, #1
 8002b54:	035a      	lsls	r2, r3, #13
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	e007      	b.n	8002b70 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	051a      	lsls	r2, r3, #20
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6899      	ldr	r1, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bb2:	025a      	lsls	r2, r3, #9
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	029a      	lsls	r2, r3, #10
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40012300 	.word	0x40012300
 8002bf0:	0f000001 	.word	0x0f000001

08002bf4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d13c      	bne.n	8002c88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d12b      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d127      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d119      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0220 	bic.w	r2, r2, #32
 8002c5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f01c f88b 	bl	801ed9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c86:	e00e      	b.n	8002ca6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff fd4f 	bl	8002738 <HAL_ADC_ErrorCallback>
}
 8002c9a:	e004      	b.n	8002ca6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff fd31 	bl	8002724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2240      	movs	r2, #64	@ 0x40
 8002cdc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	f043 0204 	orr.w	r2, r3, #4
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff fd24 	bl	8002738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <__NVIC_SetPriorityGrouping+0x40>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d26:	4a04      	ldr	r2, [pc, #16]	@ (8002d38 <__NVIC_SetPriorityGrouping+0x40>)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60d3      	str	r3, [r2, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00
 8002d3c:	05fa0000 	.word	0x05fa0000

08002d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d44:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4907      	ldr	r1, [pc, #28]	@ (8002d94 <__NVIC_EnableIRQ+0x38>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	@ (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	@ (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	@ 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	@ 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ff4c 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7a:	f7ff ff61 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6978      	ldr	r0, [r7, #20]
 8002e86:	f7ff ffb1 	bl	8002dec <NVIC_EncodePriority>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff80 	bl	8002d98 <__NVIC_SetPriority>
}
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff ff54 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e054      	b.n	8002f78 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7f5b      	ldrb	r3, [r3, #29]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fd fc62 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	791b      	ldrb	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a22      	ldr	r2, [pc, #136]	@ (8002f80 <HAL_CRC_Init+0xc4>)
 8002ef8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0218 	bic.w	r2, r2, #24
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	e00c      	b.n	8002f26 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	461a      	mov	r2, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f94c 	bl	80031b4 <HAL_CRCEx_Polynomial_Set>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e028      	b.n	8002f78 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	795b      	ldrb	r3, [r3, #5]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d105      	bne.n	8002f3a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f36:	611a      	str	r2, [r3, #16]
 8002f38:	e004      	b.n	8002f44 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6912      	ldr	r2, [r2, #16]
 8002f42:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	04c11db7 	.word	0x04c11db7

08002f84 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2202      	movs	r2, #2
 8002f98:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d006      	beq.n	8002fc0 <HAL_CRC_Calculate+0x3c>
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d829      	bhi.n	800300a <HAL_CRC_Calculate+0x86>
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d019      	beq.n	8002fee <HAL_CRC_Calculate+0x6a>
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d01e      	beq.n	8002ffc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002fbe:	e024      	b.n	800300a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e00a      	b.n	8002fdc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	441a      	add	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3f0      	bcc.n	8002fc6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
      break;
 8002fec:	e00e      	b.n	800300c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f812 	bl	800301c <CRC_Handle_8>
 8002ff8:	6138      	str	r0, [r7, #16]
      break;
 8002ffa:	e007      	b.n	800300c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f89d 	bl	8003140 <CRC_Handle_16>
 8003006:	6138      	str	r0, [r7, #16]
      break;
 8003008:	e000      	b.n	800300c <HAL_CRC_Calculate+0x88>
      break;
 800300a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8003012:	693b      	ldr	r3, [r7, #16]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	e023      	b.n	8003076 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	3301      	adds	r3, #1
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	440b      	add	r3, r1
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003048:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	440b      	add	r3, r1
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003058:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3303      	adds	r3, #3
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	440b      	add	r3, r1
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800306c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800306e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3d6      	bcc.n	800302e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d051      	beq.n	800312e <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d108      	bne.n	80030a6 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	4413      	add	r3, r2
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	7013      	strb	r3, [r2, #0]
 80030a4:	e043      	b.n	800312e <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d118      	bne.n	80030e2 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	4413      	add	r3, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	b21a      	sxth	r2, r3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	3301      	adds	r3, #1
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	440b      	add	r3, r1
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b21b      	sxth	r3, r3
 80030d2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	8b7a      	ldrh	r2, [r7, #26]
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	e025      	b.n	800312e <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d120      	bne.n	800312e <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	4413      	add	r3, r2
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3301      	adds	r3, #1
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	440b      	add	r3, r1
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b21b      	sxth	r3, r3
 800310a:	4313      	orrs	r3, r2
 800310c:	b21b      	sxth	r3, r3
 800310e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	8b7a      	ldrh	r2, [r7, #26]
 800311a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4413      	add	r3, r2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3724      	adds	r7, #36	@ 0x24
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	e013      	b.n	800317a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	041a      	lsls	r2, r3, #16
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	440b      	add	r3, r1
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3301      	adds	r3, #1
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	429a      	cmp	r2, r3
 8003182:	d3e6      	bcc.n	8003152 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	4413      	add	r3, r2
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031c4:	231f      	movs	r3, #31
 80031c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
 80031d6:	e063      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031d8:	bf00      	nop
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	613a      	str	r2, [r7, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_CRCEx_Polynomial_Set+0x44>
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b18      	cmp	r3, #24
 80031fc:	d846      	bhi.n	800328c <HAL_CRCEx_Polynomial_Set+0xd8>
 80031fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003204 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003204:	08003293 	.word	0x08003293
 8003208:	0800328d 	.word	0x0800328d
 800320c:	0800328d 	.word	0x0800328d
 8003210:	0800328d 	.word	0x0800328d
 8003214:	0800328d 	.word	0x0800328d
 8003218:	0800328d 	.word	0x0800328d
 800321c:	0800328d 	.word	0x0800328d
 8003220:	0800328d 	.word	0x0800328d
 8003224:	08003281 	.word	0x08003281
 8003228:	0800328d 	.word	0x0800328d
 800322c:	0800328d 	.word	0x0800328d
 8003230:	0800328d 	.word	0x0800328d
 8003234:	0800328d 	.word	0x0800328d
 8003238:	0800328d 	.word	0x0800328d
 800323c:	0800328d 	.word	0x0800328d
 8003240:	0800328d 	.word	0x0800328d
 8003244:	08003275 	.word	0x08003275
 8003248:	0800328d 	.word	0x0800328d
 800324c:	0800328d 	.word	0x0800328d
 8003250:	0800328d 	.word	0x0800328d
 8003254:	0800328d 	.word	0x0800328d
 8003258:	0800328d 	.word	0x0800328d
 800325c:	0800328d 	.word	0x0800328d
 8003260:	0800328d 	.word	0x0800328d
 8003264:	08003269 	.word	0x08003269
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d913      	bls.n	8003296 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003272:	e010      	b.n	8003296 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b07      	cmp	r3, #7
 8003278:	d90f      	bls.n	800329a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800327e:	e00c      	b.n	800329a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d90b      	bls.n	800329e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800328a:	e008      	b.n	800329e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	75fb      	strb	r3, [r7, #23]
        break;
 8003290:	e006      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003292:	bf00      	nop
 8003294:	e004      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003296:	bf00      	nop
 8003298:	e002      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800329e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 0118 	bic.w	r1, r3, #24
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff f856 	bl	800238c <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e099      	b.n	8003420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330c:	e00f      	b.n	800332e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800330e:	f7ff f83d 	bl	800238c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b05      	cmp	r3, #5
 800331a:	d908      	bls.n	800332e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2203      	movs	r2, #3
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e078      	b.n	8003420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e8      	bne.n	800330e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <HAL_DMA_Init+0x158>)
 8003348:	4013      	ands	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800335a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	2b04      	cmp	r3, #4
 8003386:	d107      	bne.n	8003398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	4313      	orrs	r3, r2
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0307 	bic.w	r3, r3, #7
 80033ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d117      	bne.n	80033f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00e      	beq.n	80033f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fb77 	bl	8003ac8 <DMA_CheckFifoParam>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2240      	movs	r2, #64	@ 0x40
 80033e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033ee:	2301      	movs	r3, #1
 80033f0:	e016      	b.n	8003420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fb2e 	bl	8003a5c <DMA_CalcBaseAndBitshift>
 8003400:	4603      	mov	r3, r0
 8003402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	223f      	movs	r2, #63	@ 0x3f
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	f010803f 	.word	0xf010803f

0800342c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_DMA_Start_IT+0x26>
 800344e:	2302      	movs	r3, #2
 8003450:	e048      	b.n	80034e4 <HAL_DMA_Start_IT+0xb8>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d137      	bne.n	80034d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2202      	movs	r2, #2
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fac0 	bl	8003a00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003484:	223f      	movs	r2, #63	@ 0x3f
 8003486:	409a      	lsls	r2, r3
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0216 	orr.w	r2, r2, #22
 800349a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e005      	b.n	80034e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034fa:	f7fe ff47 	bl	800238c <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d008      	beq.n	800351e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e052      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0216 	bic.w	r2, r2, #22
 800352c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_DMA_Abort+0x62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356e:	e013      	b.n	8003598 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003570:	f7fe ff0c 	bl	800238c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b05      	cmp	r3, #5
 800357c:	d90c      	bls.n	8003598 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2203      	movs	r2, #3
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e015      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e4      	bne.n	8003570 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	223f      	movs	r2, #63	@ 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2280      	movs	r2, #128	@ 0x80
 80035e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00c      	b.n	8003604 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2205      	movs	r2, #5
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800361c:	4b8e      	ldr	r3, [pc, #568]	@ (8003858 <HAL_DMA_IRQHandler+0x248>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8e      	ldr	r2, [pc, #568]	@ (800385c <HAL_DMA_IRQHandler+0x24c>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01a      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	2208      	movs	r2, #8
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003674:	f043 0201 	orr.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003680:	2201      	movs	r2, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	2210      	movs	r2, #16
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d043      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03c      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	2210      	movs	r2, #16
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e01f      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e016      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0208 	bic.w	r2, r2, #8
 800376e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2220      	movs	r2, #32
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808f 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8087 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d136      	bne.n	8003828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x1da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	223f      	movs	r2, #63	@ 0x3f
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d07e      	beq.n	800391c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
        }
        return;
 8003826:	e079      	b.n	800391c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	2b00      	cmp	r3, #0
 800384a:	d031      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e02c      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
 8003856:	bf00      	nop
 8003858:	20000000 	.word	0x20000000
 800385c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e01e      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0210 	bic.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d032      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2205      	movs	r2, #5
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3301      	adds	r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d307      	bcc.n	80038f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f2      	bne.n	80038dc <HAL_DMA_IRQHandler+0x2cc>
 80038f6:	e000      	b.n	80038fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
 800391a:	e000      	b.n	800391e <HAL_DMA_IRQHandler+0x30e>
        return;
 800391c:	bf00      	nop
    }
  }
}
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	460b      	mov	r3, r1
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_DMA_RegisterCallback+0x20>
 8003940:	2302      	movs	r3, #2
 8003942:	e03d      	b.n	80039c0 <HAL_DMA_RegisterCallback+0x9c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d12c      	bne.n	80039b2 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8003958:	7afb      	ldrb	r3, [r7, #11]
 800395a:	2b05      	cmp	r3, #5
 800395c:	d826      	bhi.n	80039ac <HAL_DMA_RegisterCallback+0x88>
 800395e:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <HAL_DMA_RegisterCallback+0x40>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	0800397d 	.word	0x0800397d
 8003968:	08003985 	.word	0x08003985
 800396c:	0800398d 	.word	0x0800398d
 8003970:	08003995 	.word	0x08003995
 8003974:	0800399d 	.word	0x0800399d
 8003978:	080039a5 	.word	0x080039a5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8003982:	e018      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800398a:	e014      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8003992:	e010      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800399a:	e00c      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 80039a2:	e008      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80039aa:	e004      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
      break;
 80039b0:	e001      	b.n	80039b6 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039da:	b2db      	uxtb	r3, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b40      	cmp	r3, #64	@ 0x40
 8003a2c:	d108      	bne.n	8003a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a3e:	e007      	b.n	8003a50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	60da      	str	r2, [r3, #12]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	3b10      	subs	r3, #16
 8003a6c:	4a13      	ldr	r2, [pc, #76]	@ (8003abc <DMA_CalcBaseAndBitshift+0x60>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d908      	bls.n	8003a9c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	1d1a      	adds	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a9a:	e006      	b.n	8003aaa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	aaaaaaab 	.word	0xaaaaaaab
 8003ac0:	08024c58 	.word	0x08024c58
 8003ac4:	fffffc00 	.word	0xfffffc00

08003ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11f      	bne.n	8003b22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d856      	bhi.n	8003b96 <DMA_CheckFifoParam+0xce>
 8003ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <DMA_CheckFifoParam+0x28>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b01 	.word	0x08003b01
 8003af4:	08003b13 	.word	0x08003b13
 8003af8:	08003b01 	.word	0x08003b01
 8003afc:	08003b97 	.word	0x08003b97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d046      	beq.n	8003b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e043      	b.n	8003b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b1a:	d140      	bne.n	8003b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b20:	e03d      	b.n	8003b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b2a:	d121      	bne.n	8003b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d837      	bhi.n	8003ba2 <DMA_CheckFifoParam+0xda>
 8003b32:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <DMA_CheckFifoParam+0x70>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b49 	.word	0x08003b49
 8003b3c:	08003b4f 	.word	0x08003b4f
 8003b40:	08003b49 	.word	0x08003b49
 8003b44:	08003b61 	.word	0x08003b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4c:	e030      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d025      	beq.n	8003ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5e:	e022      	b.n	8003ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b68:	d11f      	bne.n	8003baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b6e:	e01c      	b.n	8003baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d903      	bls.n	8003b7e <DMA_CheckFifoParam+0xb6>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d003      	beq.n	8003b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b7c:	e018      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      break;
 8003b82:	e015      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	e00b      	b.n	8003bae <DMA_CheckFifoParam+0xe6>
      break;
 8003b96:	bf00      	nop
 8003b98:	e00a      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e008      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e006      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e004      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003bae:	bf00      	nop
    }
  } 
  
  return status; 
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop

08003bc0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e086      	b.n	8003ce0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f008 ff5f 	bl	800caa8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bea:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce8 <HAL_ETH_Init+0x128>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	4a3e      	ldr	r2, [pc, #248]	@ (8003ce8 <HAL_ETH_Init+0x128>)
 8003bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ce8 <HAL_ETH_Init+0x128>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c02:	4b3a      	ldr	r3, [pc, #232]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4a39      	ldr	r2, [pc, #228]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c0e:	4b37      	ldr	r3, [pc, #220]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4935      	ldr	r1, [pc, #212]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c1c:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <HAL_ETH_Init+0x12c>)
 8003c1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c38:	f7fe fba8 	bl	800238c <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c3e:	e011      	b.n	8003c64 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c40:	f7fe fba4 	bl	800238c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c4e:	d909      	bls.n	8003c64 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2204      	movs	r2, #4
 8003c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	22e0      	movs	r2, #224	@ 0xe0
 8003c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e03d      	b.n	8003ce0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e4      	bne.n	8003c40 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 ff5c 	bl	8004b34 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f001 f807 	bl	8004c90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f001 f85d 	bl	8004d42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 ffc5 	bl	8004c20 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf0 <HAL_ETH_Init+0x130>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003cca:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2210      	movs	r2, #16
 8003cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40013800 	.word	0x40013800
 8003cf0:	00020060 	.word	0x00020060

08003cf4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d15f      	bne.n	8003dc6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9f6 	bl	800410c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f7fe fb3b 	bl	80023a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d4c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d64:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fd80 	bl	800486c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0208 	orr.w	r2, r2, #8
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7fe fb0d 	bl	80023a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0204 	orr.w	r2, r2, #4
 8003da0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003daa:	69d9      	ldr	r1, [r3, #28]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <HAL_ETH_Start_IT+0xdc>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003db8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2240      	movs	r2, #64	@ 0x40
 8003dbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
  }
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	0001a0c1 	.word	0x0001a0c1

08003dd4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de2:	2b40      	cmp	r3, #64	@ 0x40
 8003de4:	d16e      	bne.n	8003ec4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b34      	ldr	r3, [pc, #208]	@ (8003ed0 <HAL_ETH_Stop_IT+0xfc>)
 8003dfe:	400b      	ands	r3, r1
 8003e00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e04:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e1c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	f023 0302 	bic.w	r3, r3, #2
 8003e30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e34:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0204 	bic.w	r2, r2, #4
 8003e44:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fe faa8 	bl	80023a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fd05 	bl	800486c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0208 	bic.w	r2, r2, #8
 8003e70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fe fa92 	bl	80023a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e00e      	b.n	8003eac <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	3212      	adds	r2, #18
 8003e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e98:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d9ed      	bls.n	8003e8e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2210      	movs	r2, #16
 8003ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	fffe5f3e 	.word	0xfffe5f3e

08003ed4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e045      	b.n	8003f84 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003efe:	2b40      	cmp	r3, #64	@ 0x40
 8003f00:	d13f      	bne.n	8003f82 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 ff86 	bl	8004e20 <ETH_Prepare_Tx_Descriptors>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f20:	f043 0202 	orr.w	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e02a      	b.n	8003f84 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f2e:	f3bf 8f4f 	dsb	sy
}
 8003f32:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d904      	bls.n	8003f50 <HAL_ETH_Transmit_IT+0x7c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	1f1a      	subs	r2, r3, #4
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
  }
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0a4      	b.n	8004102 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d001      	beq.n	8003fc6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e09d      	b.n	8004102 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	3212      	adds	r2, #18
 8003fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fdc:	f1c3 0304 	rsb	r3, r3, #4
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fe2:	e066      	b.n	80040b2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	699a      	ldr	r2, [r3, #24]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <HAL_ETH_ReadData+0x88>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d03c      	beq.n	800408e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004036:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800404c:	2301      	movs	r3, #1
 800404e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004068:	461a      	mov	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	b29b      	uxth	r3, r3
 800406e:	f008 feef 	bl	800ce50 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	441a      	add	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2200      	movs	r2, #0
 800408c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3301      	adds	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d902      	bls.n	80040a0 <HAL_ETH_ReadData+0x114>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3b04      	subs	r3, #4
 800409e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	3212      	adds	r2, #18
 80040a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040aa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	db06      	blt.n	80040c8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d202      	bcs.n	80040c8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d08d      	beq.n	8003fe4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f815 	bl	800410c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80040e8:	7cfb      	ldrb	r3, [r7, #19]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d108      	bne.n	8004100 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004118:	2301      	movs	r3, #1
 800411a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004120:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	3212      	adds	r2, #18
 8004128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800412c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004132:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004134:	e042      	b.n	80041bc <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d112      	bne.n	8004164 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800413e:	f107 0308 	add.w	r3, r7, #8
 8004142:	4618      	mov	r0, r3
 8004144:	f008 fe54 	bl	800cdf0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	74fb      	strb	r3, [r7, #19]
 8004152:	e007      	b.n	8004164 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	461a      	mov	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	461a      	mov	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d028      	beq.n	80041bc <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <ETH_UpdateDescriptor+0x104>)
 8004178:	4313      	orrs	r3, r2
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	6053      	str	r3, [r2, #4]
 800417e:	e005      	b.n	800418c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	3301      	adds	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d902      	bls.n	80041aa <ETH_UpdateDescriptor+0x9e>
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	3b04      	subs	r3, #4
 80041a8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	3212      	adds	r2, #18
 80041b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b4:	617b      	str	r3, [r7, #20]
      desccount--;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <ETH_UpdateDescriptor+0xbc>
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1b6      	bne.n	8004136 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d01a      	beq.n	8004208 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3303      	adds	r3, #3
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041dc:	f3bf 8f5f 	dmb	sy
}
 80041e0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6919      	ldr	r1, [r3, #16]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	18ca      	adds	r2, r1, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041fa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004208:	bf00      	nop
 800420a:	3720      	adds	r7, #32
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	80004000 	.word	0x80004000

08004214 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3318      	adds	r3, #24
 8004220:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004232:	e047      	b.n	80042c4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004234:	2301      	movs	r3, #1
 8004236:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3b01      	subs	r3, #1
 800423c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	3304      	adds	r3, #4
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3301      	adds	r3, #1
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d902      	bls.n	8004260 <HAL_ETH_ReleaseTxPacket+0x4c>
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	3b04      	subs	r3, #4
 800425e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004264:	7bbb      	ldrb	r3, [r7, #14]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d02c      	beq.n	80042c4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68d9      	ldr	r1, [r3, #12]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	440b      	add	r3, r1
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db1f      	blt.n	80042c0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	3304      	adds	r3, #4
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	f008 fe21 	bl	800ced4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	3304      	adds	r3, #4
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	2200      	movs	r2, #0
 800429e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	3301      	adds	r3, #1
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d902      	bls.n	80042b2 <HAL_ETH_ReleaseTxPacket+0x9e>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3b04      	subs	r3, #4
 80042b0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042be:	e001      	b.n	80042c4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_ETH_ReleaseTxPacket+0xbc>
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1b1      	bne.n	8004234 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004304:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_ETH_IRQHandler+0x158>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00e      	beq.n	8004332 <HAL_ETH_IRQHandler+0x56>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004326:	461a      	mov	r2, r3
 8004328:	4b43      	ldr	r3, [pc, #268]	@ (8004438 <HAL_ETH_IRQHandler+0x15c>)
 800432a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f008 f8fb 	bl	800c528 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00f      	beq.n	800435c <HAL_ETH_IRQHandler+0x80>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800434e:	461a      	mov	r2, r3
 8004350:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004354:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f008 f8f6 	bl	800c548 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d042      	beq.n	80043ec <HAL_ETH_IRQHandler+0x110>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d03d      	beq.n	80043ec <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f043 0208 	orr.w	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01a      	beq.n	80043c0 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	4b29      	ldr	r3, [pc, #164]	@ (800443c <HAL_ETH_IRQHandler+0x160>)
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80043b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80043b4:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	22e0      	movs	r2, #224	@ 0xe0
 80043ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80043be:	e012      	b.n	80043e6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043ce:	4013      	ands	r3, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043de:	461a      	mov	r2, r3
 80043e0:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043e4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f008 f8be 	bl	800c568 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f81a 	bl	8004440 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d006      	beq.n	800442c <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800441e:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_ETH_IRQHandler+0x158>)
 8004420:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004424:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f814 	bl	8004454 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40013c00 	.word	0x40013c00
 8004438:	00010040 	.word	0x00010040
 800443c:	007e2000 	.word	0x007e2000

08004440 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 031c 	and.w	r3, r3, #28
 8004484:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	02db      	lsls	r3, r3, #11
 800448a:	b29b      	uxth	r3, r3
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0302 	bic.w	r3, r3, #2
 80044a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80044b8:	f7fd ff68 	bl	800238c <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044be:	e00d      	b.n	80044dc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80044c0:	f7fd ff64 	bl	800238c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ce:	d301      	bcc.n	80044d4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e010      	b.n	80044f6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ec      	bne.n	80044c0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 031c 	and.w	r3, r3, #28
 800451a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	02db      	lsls	r3, r3, #11
 8004520:	b29b      	uxth	r3, r3
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	019b      	lsls	r3, r3, #6
 800452c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004558:	f7fd ff18 	bl	800238c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800455e:	e00d      	b.n	800457c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004560:	f7fd ff14 	bl	800238c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800456e:	d301      	bcc.n	8004574 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e009      	b.n	8004588 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1ec      	bne.n	8004560 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0e6      	b.n	8004772 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf14      	ite	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	2300      	moveq	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800460e:	2b00      	cmp	r3, #0
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	bf14      	ite	ne
 8004696:	2301      	movne	r3, #1
 8004698:	2300      	moveq	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	bf14      	ite	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	2300      	moveq	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf14      	ite	ne
 80046d8:	2301      	movne	r3, #1
 80046da:	2300      	moveq	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf14      	ite	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	2300      	moveq	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	b29a      	uxth	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e00b      	b.n	80047aa <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004798:	2b10      	cmp	r3, #16
 800479a:	d105      	bne.n	80047a8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f88a 	bl	80048b8 <ETH_SetMACConfig>

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
  }
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 031c 	bic.w	r3, r3, #28
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80047cc:	f003 fd04 	bl	80081d8 <HAL_RCC_GetHCLKFreq>
 80047d0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a14      	ldr	r2, [pc, #80]	@ (8004828 <HAL_ETH_SetMDIOClockRange+0x74>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d804      	bhi.n	80047e4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e019      	b.n	8004818 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4a11      	ldr	r2, [pc, #68]	@ (800482c <HAL_ETH_SetMDIOClockRange+0x78>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d204      	bcs.n	80047f6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f043 030c 	orr.w	r3, r3, #12
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e010      	b.n	8004818 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004830 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d90c      	bls.n	8004818 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a0c      	ldr	r2, [pc, #48]	@ (8004834 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d804      	bhi.n	8004810 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e003      	b.n	8004818 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f043 0310 	orr.w	r3, r3, #16
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	611a      	str	r2, [r3, #16]
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	02160ebf 	.word	0x02160ebf
 800482c:	03938700 	.word	0x03938700
 8004830:	05f5e0ff 	.word	0x05f5e0ff
 8004834:	08f0d17f 	.word	0x08f0d17f

08004838 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8004846:	4618      	mov	r0, r3
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800488a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800488e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800489c:	2001      	movs	r0, #1
 800489e:	f7fd fd81 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048ac:	6193      	str	r3, [r2, #24]
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <ETH_SetMACConfig+0x164>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	7b9b      	ldrb	r3, [r3, #14]
 80048d6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	7c12      	ldrb	r2, [r2, #16]
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d102      	bne.n	80048e6 <ETH_SetMACConfig+0x2e>
 80048e0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048e4:	e000      	b.n	80048e8 <ETH_SetMACConfig+0x30>
 80048e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	7c52      	ldrb	r2, [r2, #17]
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	d102      	bne.n	80048f8 <ETH_SetMACConfig+0x40>
 80048f2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80048f6:	e000      	b.n	80048fa <ETH_SetMACConfig+0x42>
 80048f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004900:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	7fdb      	ldrb	r3, [r3, #31]
 8004906:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004908:	431a      	orrs	r2, r3
                        macconf->Speed |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800490e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	7f92      	ldrb	r2, [r2, #30]
 8004914:	2a00      	cmp	r2, #0
 8004916:	d102      	bne.n	800491e <ETH_SetMACConfig+0x66>
 8004918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800491c:	e000      	b.n	8004920 <ETH_SetMACConfig+0x68>
 800491e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004920:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	7f1b      	ldrb	r3, [r3, #28]
 8004926:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004928:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800492e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	791b      	ldrb	r3, [r3, #4]
 8004934:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800493e:	2a00      	cmp	r2, #0
 8004940:	d102      	bne.n	8004948 <ETH_SetMACConfig+0x90>
 8004942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004946:	e000      	b.n	800494a <ETH_SetMACConfig+0x92>
 8004948:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800494a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	7bdb      	ldrb	r3, [r3, #15]
 8004950:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004952:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004958:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004960:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004962:	4313      	orrs	r3, r2
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800497a:	2001      	movs	r0, #1
 800497c:	f7fd fd12 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004996:	4013      	ands	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	d101      	bne.n	80049ae <ETH_SetMACConfig+0xf6>
 80049aa:	2280      	movs	r2, #128	@ 0x80
 80049ac:	e000      	b.n	80049b0 <ETH_SetMACConfig+0xf8>
 80049ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80049b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80049be:	2a01      	cmp	r2, #1
 80049c0:	d101      	bne.n	80049c6 <ETH_SetMACConfig+0x10e>
 80049c2:	2208      	movs	r2, #8
 80049c4:	e000      	b.n	80049c8 <ETH_SetMACConfig+0x110>
 80049c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80049c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80049d0:	2a01      	cmp	r2, #1
 80049d2:	d101      	bne.n	80049d8 <ETH_SetMACConfig+0x120>
 80049d4:	2204      	movs	r2, #4
 80049d6:	e000      	b.n	80049da <ETH_SetMACConfig+0x122>
 80049d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80049e2:	2a01      	cmp	r2, #1
 80049e4:	d101      	bne.n	80049ea <ETH_SetMACConfig+0x132>
 80049e6:	2202      	movs	r2, #2
 80049e8:	e000      	b.n	80049ec <ETH_SetMACConfig+0x134>
 80049ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049ec:	4313      	orrs	r3, r2
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a04:	2001      	movs	r0, #1
 8004a06:	f7fd fccd 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	619a      	str	r2, [r3, #24]
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	fd20810f 	.word	0xfd20810f

08004a20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4b3d      	ldr	r3, [pc, #244]	@ (8004b30 <ETH_SetDMAConfig+0x110>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	7b1b      	ldrb	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <ETH_SetDMAConfig+0x2c>
 8004a46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004a4a:	e000      	b.n	8004a4e <ETH_SetDMAConfig+0x2e>
 8004a4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	7b5b      	ldrb	r3, [r3, #13]
 8004a52:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a54:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	7f52      	ldrb	r2, [r2, #29]
 8004a5a:	2a00      	cmp	r2, #0
 8004a5c:	d102      	bne.n	8004a64 <ETH_SetDMAConfig+0x44>
 8004a5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a62:	e000      	b.n	8004a66 <ETH_SetDMAConfig+0x46>
 8004a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	7b9b      	ldrb	r3, [r3, #14]
 8004a6c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a6e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	7f1b      	ldrb	r3, [r3, #28]
 8004a7a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	7f9b      	ldrb	r3, [r3, #30]
 8004a82:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a84:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a92:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a94:	4313      	orrs	r3, r2
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	f7fd fc74 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ad4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004ada:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ae0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ae8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004aea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004af2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004af8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b06:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7fd fc45 	bl	80023a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b22:	461a      	mov	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6013      	str	r3, [r2, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	f8de3f23 	.word	0xf8de3f23

08004b34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b0a6      	sub	sp, #152	@ 0x98
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b76:	2300      	movs	r3, #0
 8004b78:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004ba2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004bae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fe7f 	bl	80048b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004bea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bf0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bf4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bfa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff05 	bl	8004a20 <ETH_SetDMAConfig>
}
 8004c16:	bf00      	nop
 8004c18:	3798      	adds	r7, #152	@ 0x98
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3305      	adds	r3, #5
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	3204      	adds	r2, #4
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <ETH_MACAddressConfig+0x68>)
 8004c42:	4413      	add	r3, r2
 8004c44:	461a      	mov	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	061a      	lsls	r2, r3, #24
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3302      	adds	r3, #2
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	4313      	orrs	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	7812      	ldrb	r2, [r2, #0]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <ETH_MACAddressConfig+0x6c>)
 8004c72:	4413      	add	r3, r2
 8004c74:	461a      	mov	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	6013      	str	r3, [r2, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40028040 	.word	0x40028040
 8004c8c:	40028044 	.word	0x40028044

08004c90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e03e      	b.n	8004d1c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68d9      	ldr	r1, [r3, #12]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	3206      	adds	r2, #6
 8004cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d80c      	bhi.n	8004d00 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68d9      	ldr	r1, [r3, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	440b      	add	r3, r1
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	e004      	b.n	8004d0a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	461a      	mov	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d9bd      	bls.n	8004c9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d34:	611a      	str	r2, [r3, #16]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	e048      	b.n	8004de2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6919      	ldr	r1, [r3, #16]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	440b      	add	r3, r1
 8004d60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d8c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	3212      	adds	r2, #18
 8004dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d80c      	bhi.n	8004dd2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6919      	ldr	r1, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	440b      	add	r3, r1
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e004      	b.n	8004ddc <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d9b3      	bls.n	8004d50 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e12:	60da      	str	r2, [r3, #12]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b091      	sub	sp, #68	@ 0x44
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3318      	adds	r3, #24
 8004e30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e62:	d007      	beq.n	8004e74 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e68:	3304      	adds	r3, #4
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e74:	2302      	movs	r3, #2
 8004e76:	e111      	b.n	800509c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4b86      	ldr	r3, [pc, #536]	@ (80050a8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e92:	6852      	ldr	r2, [r2, #4]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e98:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d008      	beq.n	8004eb8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004efa:	e082      	b.n	8005002 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f06:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e005      	b.n	8004f28 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d902      	bls.n	8004f3a <ETH_Prepare_Tx_Descriptors+0x11a>
 8004f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f36:	3b04      	subs	r3, #4
 8004f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f50:	d007      	beq.n	8004f62 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f56:	3304      	adds	r3, #4
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d029      	beq.n	8004fb6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004f70:	2300      	movs	r3, #0
 8004f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f74:	e019      	b.n	8004faa <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004f76:	f3bf 8f5f 	dmb	sy
}
 8004f7a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d902      	bls.n	8004f9a <ETH_Prepare_Tx_Descriptors+0x17a>
 8004f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f96:	3b04      	subs	r3, #4
 8004f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004faa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d3e1      	bcc.n	8004f76 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e072      	b.n	800509c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	4b32      	ldr	r3, [pc, #200]	@ (80050a8 <ETH_Prepare_Tx_Descriptors+0x288>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe2:	6852      	ldr	r2, [r2, #4]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	3301      	adds	r3, #1
 8004fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004ff0:	f3bf 8f5f 	dmb	sy
}
 8004ff4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f47f af78 	bne.w	8004efc <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d006      	beq.n	8005020 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e005      	b.n	800502c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005040:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005042:	f3bf 8f5f 	dmb	sy
}
 8005046:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005052:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005058:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800505a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800505c:	3304      	adds	r3, #4
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005068:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800506a:	f3ef 8310 	mrs	r3, PRIMASK
 800506e:	613b      	str	r3, [r7, #16]
  return(result);
 8005070:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	2301      	movs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	4413      	add	r3, r2
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	629a      	str	r2, [r3, #40]	@ 0x28
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3744      	adds	r7, #68	@ 0x44
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	ffffe000 	.word	0xffffe000

080050ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	@ 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
 80050ca:	e175      	b.n	80053b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050cc:	2201      	movs	r2, #1
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	f040 8164 	bne.w	80053b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d005      	beq.n	8005102 <HAL_GPIO_Init+0x56>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d130      	bne.n	8005164 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	2203      	movs	r2, #3
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005138:	2201      	movs	r2, #1
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	f003 0201 	and.w	r2, r3, #1
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	2b03      	cmp	r3, #3
 800516e:	d017      	beq.n	80051a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	2203      	movs	r2, #3
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d123      	bne.n	80051f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	08da      	lsrs	r2, r3, #3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3208      	adds	r2, #8
 80051b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	220f      	movs	r2, #15
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4013      	ands	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	08da      	lsrs	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3208      	adds	r2, #8
 80051ee:	69b9      	ldr	r1, [r7, #24]
 80051f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	2203      	movs	r2, #3
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 0203 	and.w	r2, r3, #3
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80be 	beq.w	80053b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005236:	4b66      	ldr	r3, [pc, #408]	@ (80053d0 <HAL_GPIO_Init+0x324>)
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	4a65      	ldr	r2, [pc, #404]	@ (80053d0 <HAL_GPIO_Init+0x324>)
 800523c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005240:	6453      	str	r3, [r2, #68]	@ 0x44
 8005242:	4b63      	ldr	r3, [pc, #396]	@ (80053d0 <HAL_GPIO_Init+0x324>)
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800524e:	4a61      	ldr	r2, [pc, #388]	@ (80053d4 <HAL_GPIO_Init+0x328>)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	3302      	adds	r3, #2
 8005256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	220f      	movs	r2, #15
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a58      	ldr	r2, [pc, #352]	@ (80053d8 <HAL_GPIO_Init+0x32c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d037      	beq.n	80052ea <HAL_GPIO_Init+0x23e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a57      	ldr	r2, [pc, #348]	@ (80053dc <HAL_GPIO_Init+0x330>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d031      	beq.n	80052e6 <HAL_GPIO_Init+0x23a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a56      	ldr	r2, [pc, #344]	@ (80053e0 <HAL_GPIO_Init+0x334>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d02b      	beq.n	80052e2 <HAL_GPIO_Init+0x236>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a55      	ldr	r2, [pc, #340]	@ (80053e4 <HAL_GPIO_Init+0x338>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d025      	beq.n	80052de <HAL_GPIO_Init+0x232>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a54      	ldr	r2, [pc, #336]	@ (80053e8 <HAL_GPIO_Init+0x33c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01f      	beq.n	80052da <HAL_GPIO_Init+0x22e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a53      	ldr	r2, [pc, #332]	@ (80053ec <HAL_GPIO_Init+0x340>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d019      	beq.n	80052d6 <HAL_GPIO_Init+0x22a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a52      	ldr	r2, [pc, #328]	@ (80053f0 <HAL_GPIO_Init+0x344>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_GPIO_Init+0x226>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a51      	ldr	r2, [pc, #324]	@ (80053f4 <HAL_GPIO_Init+0x348>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00d      	beq.n	80052ce <HAL_GPIO_Init+0x222>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a50      	ldr	r2, [pc, #320]	@ (80053f8 <HAL_GPIO_Init+0x34c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <HAL_GPIO_Init+0x21e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a4f      	ldr	r2, [pc, #316]	@ (80053fc <HAL_GPIO_Init+0x350>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d101      	bne.n	80052c6 <HAL_GPIO_Init+0x21a>
 80052c2:	2309      	movs	r3, #9
 80052c4:	e012      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052c6:	230a      	movs	r3, #10
 80052c8:	e010      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ca:	2308      	movs	r3, #8
 80052cc:	e00e      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ce:	2307      	movs	r3, #7
 80052d0:	e00c      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052d2:	2306      	movs	r3, #6
 80052d4:	e00a      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052d6:	2305      	movs	r3, #5
 80052d8:	e008      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052da:	2304      	movs	r3, #4
 80052dc:	e006      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052de:	2303      	movs	r3, #3
 80052e0:	e004      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e002      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_GPIO_Init+0x240>
 80052ea:	2300      	movs	r3, #0
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	f002 0203 	and.w	r2, r2, #3
 80052f2:	0092      	lsls	r2, r2, #2
 80052f4:	4093      	lsls	r3, r2
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052fc:	4935      	ldr	r1, [pc, #212]	@ (80053d4 <HAL_GPIO_Init+0x328>)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	089b      	lsrs	r3, r3, #2
 8005302:	3302      	adds	r3, #2
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800530a:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <HAL_GPIO_Init+0x354>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800532e:	4a34      	ldr	r2, [pc, #208]	@ (8005400 <HAL_GPIO_Init+0x354>)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005334:	4b32      	ldr	r3, [pc, #200]	@ (8005400 <HAL_GPIO_Init+0x354>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005358:	4a29      	ldr	r2, [pc, #164]	@ (8005400 <HAL_GPIO_Init+0x354>)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800535e:	4b28      	ldr	r3, [pc, #160]	@ (8005400 <HAL_GPIO_Init+0x354>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	43db      	mvns	r3, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4013      	ands	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005382:	4a1f      	ldr	r2, [pc, #124]	@ (8005400 <HAL_GPIO_Init+0x354>)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <HAL_GPIO_Init+0x354>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053ac:	4a14      	ldr	r2, [pc, #80]	@ (8005400 <HAL_GPIO_Init+0x354>)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3301      	adds	r3, #1
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b0f      	cmp	r3, #15
 80053bc:	f67f ae86 	bls.w	80050cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	3724      	adds	r7, #36	@ 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40013800 	.word	0x40013800
 80053d8:	40020000 	.word	0x40020000
 80053dc:	40020400 	.word	0x40020400
 80053e0:	40020800 	.word	0x40020800
 80053e4:	40020c00 	.word	0x40020c00
 80053e8:	40021000 	.word	0x40021000
 80053ec:	40021400 	.word	0x40021400
 80053f0:	40021800 	.word	0x40021800
 80053f4:	40021c00 	.word	0x40021c00
 80053f8:	40022000 	.word	0x40022000
 80053fc:	40022400 	.word	0x40022400
 8005400:	40013c00 	.word	0x40013c00

08005404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e08b      	b.n	800552e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fb fc96 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	@ 0x24
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e006      	b.n	800548c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800548a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d108      	bne.n	80054a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	e007      	b.n	80054b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6859      	ldr	r1, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <HAL_I2C_Init+0x134>)
 80054c2:	430b      	orrs	r3, r1
 80054c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69d9      	ldr	r1, [r3, #28]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1a      	ldr	r2, [r3, #32]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	02008000 	.word	0x02008000

0800553c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	461a      	mov	r2, r3
 8005548:	460b      	mov	r3, r1
 800554a:	817b      	strh	r3, [r7, #10]
 800554c:	4613      	mov	r3, r2
 800554e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b20      	cmp	r3, #32
 800555e:	f040 80ef 	bne.w	8005740 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005570:	d101      	bne.n	8005576 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
 8005574:	e0e5      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005580:	2302      	movs	r3, #2
 8005582:	e0de      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2221      	movs	r2, #33	@ 0x21
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2210      	movs	r2, #16
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	893a      	ldrh	r2, [r7, #8]
 80055ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a66      	ldr	r2, [pc, #408]	@ (800574c <HAL_I2C_Master_Transmit_DMA+0x210>)
 80055b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a66      	ldr	r2, [pc, #408]	@ (8005750 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80055b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2bff      	cmp	r3, #255	@ 0xff
 80055c2:	d906      	bls.n	80055d2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	22ff      	movs	r2, #255	@ 0xff
 80055c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80055ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	e007      	b.n	80055e2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055e0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01a      	beq.n	8005620 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005604:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d074      	beq.n	8005712 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	2b00      	cmp	r3, #0
 800562e:	d022      	beq.n	8005676 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	4a47      	ldr	r2, [pc, #284]	@ (8005754 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8005636:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	4a46      	ldr	r2, [pc, #280]	@ (8005758 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800563e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	2200      	movs	r2, #0
 8005646:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564c:	2200      	movs	r2, #0
 800564e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005660:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005666:	f7fd fee1 	bl	800342c <HAL_DMA_Start_IT>
 800566a:	4603      	mov	r3, r0
 800566c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d13a      	bne.n	80056ea <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005674:	e013      	b.n	800569e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e051      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	3301      	adds	r3, #1
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	8979      	ldrh	r1, [r7, #10]
 80056aa:	4b2c      	ldr	r3, [pc, #176]	@ (800575c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f001 ff3f 	bl	8007534 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056d0:	2110      	movs	r1, #16
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f001 ff60 	bl	8007598 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e028      	b.n	800573c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	f043 0210 	orr.w	r2, r3, #16
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e017      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a12      	ldr	r2, [pc, #72]	@ (8005760 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f001 ff04 	bl	8007534 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005734:	2101      	movs	r1, #1
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f001 ff2e 	bl	8007598 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	e000      	b.n	8005742 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005740:	2302      	movs	r3, #2
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	ffff0000 	.word	0xffff0000
 8005750:	0800628b 	.word	0x0800628b
 8005754:	080072b7 	.word	0x080072b7
 8005758:	08007485 	.word	0x08007485
 800575c:	80002000 	.word	0x80002000
 8005760:	08005dff 	.word	0x08005dff

08005764 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	461a      	mov	r2, r3
 8005770:	460b      	mov	r3, r1
 8005772:	817b      	strh	r3, [r7, #10]
 8005774:	4613      	mov	r3, r2
 8005776:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b20      	cmp	r3, #32
 8005782:	f040 80cd 	bne.w	8005920 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005794:	d101      	bne.n	800579a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	e0c3      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_I2C_Master_Receive_DMA+0x44>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e0bc      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2222      	movs	r2, #34	@ 0x22
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2210      	movs	r2, #16
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	893a      	ldrh	r2, [r7, #8]
 80057d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a55      	ldr	r2, [pc, #340]	@ (800592c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a55      	ldr	r2, [pc, #340]	@ (8005930 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80057dc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2bff      	cmp	r3, #255	@ 0xff
 80057e6:	d906      	bls.n	80057f6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80057ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e007      	b.n	8005806 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005800:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005804:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d070      	beq.n	80058f0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d020      	beq.n	8005858 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581a:	4a46      	ldr	r2, [pc, #280]	@ (8005934 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800581c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005822:	4a45      	ldr	r2, [pc, #276]	@ (8005938 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005824:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582a:	2200      	movs	r2, #0
 800582c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005832:	2200      	movs	r2, #0
 8005834:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3324      	adds	r3, #36	@ 0x24
 8005840:	4619      	mov	r1, r3
 8005842:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005848:	f7fd fdf0 	bl	800342c <HAL_DMA_Start_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d138      	bne.n	80058c8 <HAL_I2C_Master_Receive_DMA+0x164>
 8005856:	e013      	b.n	8005880 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e050      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005884:	b2da      	uxtb	r2, r3
 8005886:	8979      	ldrh	r1, [r7, #10]
 8005888:	4b2c      	ldr	r3, [pc, #176]	@ (800593c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f001 fe50 	bl	8007534 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80058ae:	2110      	movs	r1, #16
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f001 fe71 	bl	8007598 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e029      	b.n	800591c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058dc:	f043 0210 	orr.w	r2, r3, #16
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e018      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a13      	ldr	r2, [pc, #76]	@ (8005940 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80058f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	8979      	ldrh	r1, [r7, #10]
 80058fe:	4b0f      	ldr	r3, [pc, #60]	@ (800593c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f001 fe14 	bl	8007534 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005914:	2102      	movs	r1, #2
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 fe3e 	bl	8007598 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	ffff0000 	.word	0xffff0000
 8005930:	0800628b 	.word	0x0800628b
 8005934:	0800738d 	.word	0x0800738d
 8005938:	08007485 	.word	0x08007485
 800593c:	80002400 	.word	0x80002400
 8005940:	08005dff 	.word	0x08005dff

08005944 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b20      	cmp	r3, #32
 800595c:	f040 80d1 	bne.w	8005b02 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005966:	88fb      	ldrh	r3, [r7, #6]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005972:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0c5      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005982:	2302      	movs	r3, #2
 8005984:	e0be      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2221      	movs	r2, #33	@ 0x21
 8005992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	88fa      	ldrh	r2, [r7, #6]
 80059ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a53      	ldr	r2, [pc, #332]	@ (8005b0c <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80059be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a53      	ldr	r2, [pc, #332]	@ (8005b10 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80059c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ce:	d117      	bne.n	8005a00 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	781a      	ldrb	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d068      	beq.n	8005adc <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d022      	beq.n	8005a58 <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	4a3f      	ldr	r2, [pc, #252]	@ (8005b14 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005a18:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b18 <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005a20:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	2200      	movs	r2, #0
 8005a28:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	2200      	movs	r2, #0
 8005a30:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a3a:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a42:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a48:	f7fd fcf0 	bl	800342c <HAL_DMA_Start_IT>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d12e      	bne.n	8005ab4 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005a56:	e013      	b.n	8005a80 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2228      	movs	r2, #40	@ 0x28
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e041      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a8e:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f001 fd7b 	bl	8007598 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e024      	b.n	8005afe <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2228      	movs	r2, #40	@ 0x28
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac8:	f043 0210 	orr.w	r2, r3, #16
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e013      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005af4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f001 fd4d 	bl	8007598 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e000      	b.n	8005b04 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
  }
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	ffff0000 	.word	0xffff0000
 8005b10:	0800672d 	.word	0x0800672d
 8005b14:	0800734d 	.word	0x0800734d
 8005b18:	08007485 	.word	0x08007485

08005b1c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	f040 809b 	bne.w	8005c6e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d105      	bne.n	8005b50 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e08f      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_I2C_Slave_Receive_DMA+0x42>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e088      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2222      	movs	r2, #34	@ 0x22
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a38      	ldr	r2, [pc, #224]	@ (8005c78 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005b96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a38      	ldr	r2, [pc, #224]	@ (8005c7c <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005b9c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d020      	beq.n	8005be8 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005baa:	4a35      	ldr	r2, [pc, #212]	@ (8005c80 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005bac:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb2:	4a34      	ldr	r2, [pc, #208]	@ (8005c84 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005bb4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bba:	2200      	movs	r2, #0
 8005bbc:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3324      	adds	r3, #36	@ 0x24
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bd8:	f7fd fc28 	bl	800342c <HAL_DMA_Start_IT>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d12f      	bne.n	8005c46 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005be6:	e013      	b.n	8005c10 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2228      	movs	r2, #40	@ 0x28
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e02f      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c1e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f001 fcb3 	bl	8007598 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c40:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e014      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2228      	movs	r2, #40	@ 0x28
 8005c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	f043 0210 	orr.w	r2, r3, #16
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
  }
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	ffff0000 	.word	0xffff0000
 8005c7c:	0800672d 	.word	0x0800672d
 8005c80:	0800743f 	.word	0x0800743f
 8005c84:	08007485 	.word	0x08007485

08005c88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68f9      	ldr	r1, [r7, #12]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d010      	beq.n	8005d02 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	09db      	lsrs	r3, r3, #7
 8005ce4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf0:	f043 0201 	orr.w	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d00:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	0a9b      	lsrs	r3, r3, #10
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d010      	beq.n	8005d30 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	09db      	lsrs	r3, r3, #7
 8005d12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	f043 0208 	orr.w	r2, r3, #8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	0a5b      	lsrs	r3, r3, #9
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	09db      	lsrs	r3, r3, #7
 8005d40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4c:	f043 0202 	orr.w	r2, r3, #2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d5c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 030b 	and.w	r3, r3, #11
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 f965 	bl	8007040 <I2C_ITError>
  }
}
 8005d76:	bf00      	nop
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b088      	sub	sp, #32
 8005e02:	af02      	add	r7, sp, #8
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <I2C_Master_ISR_IT+0x1e>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e12e      	b.n	800607a <I2C_Master_ISR_IT+0x27c>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d013      	beq.n	8005e58 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00d      	beq.n	8005e58 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2210      	movs	r2, #16
 8005e42:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e48:	f043 0204 	orr.w	r2, r3, #4
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f001 fa0c 	bl	800726e <I2C_Flush_TXDR>
 8005e56:	e0fb      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d023      	beq.n	8005eac <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01d      	beq.n	8005eac <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0304 	bic.w	r3, r3, #4
 8005e76:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005eaa:	e0d1      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d12a      	bne.n	8005f0e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d024      	beq.n	8005f0e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01e      	beq.n	8005f0e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80ba 	beq.w	8006050 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005f0c:	e0a0      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	09db      	lsrs	r3, r3, #7
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d06b      	beq.n	8005ff2 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	099b      	lsrs	r3, r3, #6
 8005f1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d065      	beq.n	8005ff2 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d04e      	beq.n	8005fce <I2C_Master_ISR_IT+0x1d0>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d14a      	bne.n	8005fce <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f44:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2bff      	cmp	r3, #255	@ 0xff
 8005f4e:	d91c      	bls.n	8005f8a <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d103      	bne.n	8005f6c <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f6a:	e002      	b.n	8005f72 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	22ff      	movs	r2, #255	@ 0xff
 8005f70:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	8a79      	ldrh	r1, [r7, #18]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f001 fad6 	bl	8007534 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f88:	e032      	b.n	8005ff0 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f9c:	d00b      	beq.n	8005fb6 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa2:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fa8:	8a79      	ldrh	r1, [r7, #18]
 8005faa:	2000      	movs	r0, #0
 8005fac:	9000      	str	r0, [sp, #0]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f001 fac0 	bl	8007534 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb4:	e01c      	b.n	8005ff0 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	8a79      	ldrh	r1, [r7, #18]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f001 fab4 	bl	8007534 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fcc:	e010      	b.n	8005ff0 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fdc:	d003      	beq.n	8005fe6 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fd09 	bl	80069f6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fe4:	e034      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fe6:	2140      	movs	r1, #64	@ 0x40
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f001 f829 	bl	8007040 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fee:	e02f      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
 8005ff0:	e02e      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	099b      	lsrs	r3, r3, #6
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d028      	beq.n	8006050 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	099b      	lsrs	r3, r3, #6
 8006002:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006006:	2b00      	cmp	r3, #0
 8006008:	d022      	beq.n	8006050 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d119      	bne.n	8006048 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006022:	d015      	beq.n	8006050 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800602c:	d108      	bne.n	8006040 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	e007      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fcd8 	bl	80069f6 <I2C_ITMasterSeqCplt>
 8006046:	e003      	b.n	8006050 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006048:	2140      	movs	r1, #64	@ 0x40
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fff8 	bl	8007040 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006068:	6979      	ldr	r1, [r7, #20]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 fd5e 	bl	8006b2c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b086      	sub	sp, #24
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <I2C_Slave_ISR_IT+0x24>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0ed      	b.n	8006282 <I2C_Slave_ISR_IT+0x200>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80060c6:	6939      	ldr	r1, [r7, #16]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fdf9 	bl	8006cc0 <I2C_ITSlaveCplt>
 80060ce:	e0d3      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d04d      	beq.n	8006178 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d047      	beq.n	8006178 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d128      	bne.n	8006144 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b28      	cmp	r3, #40	@ 0x28
 80060fc:	d108      	bne.n	8006110 <I2C_Slave_ISR_IT+0x8e>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006104:	d104      	bne.n	8006110 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006106:	6939      	ldr	r1, [r7, #16]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 ff43 	bl	8006f94 <I2C_ITListenCplt>
 800610e:	e032      	b.n	8006176 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b29      	cmp	r3, #41	@ 0x29
 800611a:	d10e      	bne.n	800613a <I2C_Slave_ISR_IT+0xb8>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006122:	d00a      	beq.n	800613a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2210      	movs	r2, #16
 800612a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f001 f89e 	bl	800726e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fc9c 	bl	8006a70 <I2C_ITSlaveSeqCplt>
 8006138:	e01d      	b.n	8006176 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2210      	movs	r2, #16
 8006140:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006142:	e096      	b.n	8006272 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2210      	movs	r2, #16
 800614a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006150:	f043 0204 	orr.w	r2, r3, #4
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <I2C_Slave_ISR_IT+0xe6>
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006164:	f040 8085 	bne.w	8006272 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616c:	4619      	mov	r1, r3
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 ff66 	bl	8007040 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006174:	e07d      	b.n	8006272 <I2C_Slave_ISR_IT+0x1f0>
 8006176:	e07c      	b.n	8006272 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d030      	beq.n	80061e6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800618c:	2b00      	cmp	r3, #0
 800618e:	d02a      	beq.n	80061e6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d14f      	bne.n	8006276 <I2C_Slave_ISR_IT+0x1f4>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061dc:	d04b      	beq.n	8006276 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fc46 	bl	8006a70 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80061e4:	e047      	b.n	8006276 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	08db      	lsrs	r3, r3, #3
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	08db      	lsrs	r3, r3, #3
 80061f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80061fe:	6939      	ldr	r1, [r7, #16]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fb74 	bl	80068ee <I2C_ITAddrCplt>
 8006206:	e037      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d031      	beq.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02b      	beq.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	851a      	strh	r2, [r3, #40]	@ 0x28
 800625a:	e00d      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006262:	d002      	beq.n	800626a <I2C_Slave_ISR_IT+0x1e8>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fc00 	bl	8006a70 <I2C_ITSlaveSeqCplt>
 8006270:	e002      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006276:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b088      	sub	sp, #32
 800628e:	af02      	add	r7, sp, #8
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <I2C_Master_ISR_DMA+0x1a>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e0f0      	b.n	8006486 <I2C_Master_ISR_DMA+0x1fc>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	091b      	lsrs	r3, r3, #4
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d017      	beq.n	80062e8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	091b      	lsrs	r3, r3, #4
 80062bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2210      	movs	r2, #16
 80062ca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d0:	f043 0204 	orr.w	r2, r3, #4
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062d8:	2120      	movs	r1, #32
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f001 f95c 	bl	8007598 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 ffc4 	bl	800726e <I2C_Flush_TXDR>
 80062e6:	e0c9      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	09db      	lsrs	r3, r3, #7
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8081 	beq.w	80063f8 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	099b      	lsrs	r3, r3, #6
 80062fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d07a      	beq.n	80063f8 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006310:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d05c      	beq.n	80063d6 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006328:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	2bff      	cmp	r3, #255	@ 0xff
 8006332:	d914      	bls.n	800635e <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	0c1b      	lsrs	r3, r3, #16
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d103      	bne.n	8006350 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800634e:	e002      	b.n	8006356 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	22ff      	movs	r2, #255	@ 0xff
 8006354:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8006356:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e010      	b.n	8006380 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006370:	d003      	beq.n	800637a <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e002      	b.n	8006380 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800637a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800637e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006384:	b2da      	uxtb	r2, r3
 8006386:	8a79      	ldrh	r1, [r7, #18]
 8006388:	2300      	movs	r3, #0
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f001 f8d0 	bl	8007534 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b22      	cmp	r3, #34	@ 0x22
 80063b0:	d108      	bne.n	80063c4 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063c2:	e05b      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063d2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063d4:	e052      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063e4:	d003      	beq.n	80063ee <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fb05 	bl	80069f6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80063ec:	e046      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063ee:	2140      	movs	r1, #64	@ 0x40
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fe25 	bl	8007040 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80063f6:	e041      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	099b      	lsrs	r3, r3, #6
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d029      	beq.n	8006458 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800640c:	2b00      	cmp	r3, #0
 800640e:	d023      	beq.n	8006458 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d119      	bne.n	800644e <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006428:	d027      	beq.n	800647a <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006432:	d108      	bne.n	8006446 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006442:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006444:	e019      	b.n	800647a <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fad5 	bl	80069f6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800644c:	e015      	b.n	800647a <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800644e:	2140      	movs	r1, #64	@ 0x40
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fdf5 	bl	8007040 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006456:	e010      	b.n	800647a <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fb5a 	bl	8006b2c <I2C_ITMasterCplt>
 8006478:	e000      	b.n	800647c <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800647a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800649c:	4b94      	ldr	r3, [pc, #592]	@ (80066f0 <I2C_Mem_ISR_DMA+0x260>)
 800649e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <I2C_Mem_ISR_DMA+0x1e>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e139      	b.n	8006722 <I2C_Mem_ISR_DMA+0x292>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	091b      	lsrs	r3, r3, #4
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d017      	beq.n	80064f2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d011      	beq.n	80064f2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2210      	movs	r2, #16
 80064d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064da:	f043 0204 	orr.w	r2, r3, #4
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064e2:	2120      	movs	r1, #32
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 f857 	bl	8007598 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 febf 	bl	800726e <I2C_Flush_TXDR>
 80064f0:	e112      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00f      	beq.n	800651e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006512:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800651a:	651a      	str	r2, [r3, #80]	@ 0x50
 800651c:	e0fc      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	09db      	lsrs	r3, r3, #7
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06e      	beq.n	8006608 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	099b      	lsrs	r3, r3, #6
 800652e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006532:	2b00      	cmp	r3, #0
 8006534:	d068      	beq.n	8006608 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006536:	2101      	movs	r1, #1
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f001 f8b1 	bl	80076a0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800653e:	2110      	movs	r1, #16
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f001 f829 	bl	8007598 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d056      	beq.n	80065fe <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	2bff      	cmp	r3, #255	@ 0xff
 8006558:	d91e      	bls.n	8006598 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	b2db      	uxtb	r3, r3
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b01      	cmp	r3, #1
 800656c:	d103      	bne.n	8006576 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006574:	e002      	b.n	800657c <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	22ff      	movs	r2, #255	@ 0xff
 800657a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006580:	b299      	uxth	r1, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006586:	b2da      	uxtb	r2, r3
 8006588:	2300      	movs	r3, #0
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 ffcf 	bl	8007534 <I2C_TransferConfig>
 8006596:	e011      	b.n	80065bc <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a6:	b299      	uxth	r1, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 ffbc 	bl	8007534 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b22      	cmp	r3, #34	@ 0x22
 80065d8:	d108      	bne.n	80065ec <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065ea:	e095      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065fc:	e08c      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065fe:	2140      	movs	r1, #64	@ 0x40
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fd1d 	bl	8007040 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006606:	e087      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	099b      	lsrs	r3, r3, #6
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d071      	beq.n	80066f8 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800661c:	2b00      	cmp	r3, #0
 800661e:	d06b      	beq.n	80066f8 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006620:	2101      	movs	r1, #1
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f001 f83c 	bl	80076a0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006628:	2110      	movs	r1, #16
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 ffb4 	bl	8007598 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b22      	cmp	r3, #34	@ 0x22
 800663a:	d101      	bne.n	8006640 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 800663c:	4b2d      	ldr	r3, [pc, #180]	@ (80066f4 <I2C_Mem_ISR_DMA+0x264>)
 800663e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	2bff      	cmp	r3, #255	@ 0xff
 8006648:	d91e      	bls.n	8006688 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d103      	bne.n	8006666 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006664:	e002      	b.n	800666c <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	22ff      	movs	r2, #255	@ 0xff
 800666a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006670:	b299      	uxth	r1, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006676:	b2da      	uxtb	r2, r3
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 ff57 	bl	8007534 <I2C_TransferConfig>
 8006686:	e011      	b.n	80066ac <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006696:	b299      	uxth	r1, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669c:	b2da      	uxtb	r2, r3
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 ff44 	bl	8007534 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b22      	cmp	r3, #34	@ 0x22
 80066c8:	d108      	bne.n	80066dc <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066d8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066da:	e01d      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ec:	e014      	b.n	8006718 <I2C_Mem_ISR_DMA+0x288>
 80066ee:	bf00      	nop
 80066f0:	80002000 	.word	0x80002000
 80066f4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fa0a 	bl	8006b2c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop

0800672c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <I2C_Slave_ISR_DMA+0x24>
 800674c:	2302      	movs	r3, #2
 800674e:	e0ca      	b.n	80068e6 <I2C_Slave_ISR_DMA+0x1ba>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	095b      	lsrs	r3, r3, #5
 8006768:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 faa4 	bl	8006cc0 <I2C_ITSlaveCplt>
 8006778:	e0b0      	b.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	091b      	lsrs	r3, r3, #4
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 809a 	beq.w	80068bc <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	091b      	lsrs	r3, r3, #4
 800678c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 8093 	beq.w	80068bc <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	0b9b      	lsrs	r3, r3, #14
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d105      	bne.n	80067ae <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	0bdb      	lsrs	r3, r3, #15
 80067a6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d07f      	beq.n	80068ae <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00d      	beq.n	80067d2 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	0bdb      	lsrs	r3, r3, #15
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80067ce:	2301      	movs	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00d      	beq.n	80067f6 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0b9b      	lsrs	r3, r3, #14
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80067f2:	2301      	movs	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d128      	bne.n	800684e <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b28      	cmp	r3, #40	@ 0x28
 8006806:	d108      	bne.n	800681a <I2C_Slave_ISR_DMA+0xee>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800680e:	d104      	bne.n	800681a <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fbbe 	bl	8006f94 <I2C_ITListenCplt>
 8006818:	e048      	b.n	80068ac <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b29      	cmp	r3, #41	@ 0x29
 8006824:	d10e      	bne.n	8006844 <I2C_Slave_ISR_DMA+0x118>
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800682c:	d00a      	beq.n	8006844 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2210      	movs	r2, #16
 8006834:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 fd19 	bl	800726e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f917 	bl	8006a70 <I2C_ITSlaveSeqCplt>
 8006842:	e033      	b.n	80068ac <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2210      	movs	r2, #16
 800684a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800684c:	e034      	b.n	80068b8 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2210      	movs	r2, #16
 8006854:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685a:	f043 0204 	orr.w	r2, r3, #4
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006868:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <I2C_Slave_ISR_DMA+0x14c>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006876:	d11f      	bne.n	80068b8 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b21      	cmp	r3, #33	@ 0x21
 800687c:	d002      	beq.n	8006884 <I2C_Slave_ISR_DMA+0x158>
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	2b29      	cmp	r3, #41	@ 0x29
 8006882:	d103      	bne.n	800688c <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2221      	movs	r2, #33	@ 0x21
 8006888:	631a      	str	r2, [r3, #48]	@ 0x30
 800688a:	e008      	b.n	800689e <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b22      	cmp	r3, #34	@ 0x22
 8006890:	d002      	beq.n	8006898 <I2C_Slave_ISR_DMA+0x16c>
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b2a      	cmp	r3, #42	@ 0x2a
 8006896:	d102      	bne.n	800689e <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2222      	movs	r2, #34	@ 0x22
 800689c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a2:	4619      	mov	r1, r3
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fbcb 	bl	8007040 <I2C_ITError>
      if (treatdmanack == 1U)
 80068aa:	e005      	b.n	80068b8 <I2C_Slave_ISR_DMA+0x18c>
 80068ac:	e004      	b.n	80068b8 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2210      	movs	r2, #16
 80068b4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068b6:	e011      	b.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80068b8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80068ba:	e00f      	b.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	08db      	lsrs	r3, r3, #3
 80068cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f809 	bl	80068ee <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006904:	2b28      	cmp	r3, #40	@ 0x28
 8006906:	d16a      	bne.n	80069de <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	b29b      	uxth	r3, r3
 8006922:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006926:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006934:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006942:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d138      	bne.n	80069be <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800694c:	897b      	ldrh	r3, [r7, #10]
 800694e:	09db      	lsrs	r3, r3, #7
 8006950:	b29a      	uxth	r2, r3
 8006952:	89bb      	ldrh	r3, [r7, #12]
 8006954:	4053      	eors	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	f003 0306 	and.w	r3, r3, #6
 800695c:	2b00      	cmp	r3, #0
 800695e:	d11c      	bne.n	800699a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006960:	897b      	ldrh	r3, [r7, #10]
 8006962:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006972:	2b02      	cmp	r3, #2
 8006974:	d13b      	bne.n	80069ee <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2208      	movs	r2, #8
 8006982:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800698c:	89ba      	ldrh	r2, [r7, #12]
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff f9f3 	bl	8005d7e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006998:	e029      	b.n	80069ee <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800699a:	893b      	ldrh	r3, [r7, #8]
 800699c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800699e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fe7c 	bl	80076a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069b0:	89ba      	ldrh	r2, [r7, #12]
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff f9e1 	bl	8005d7e <HAL_I2C_AddrCallback>
}
 80069bc:	e017      	b.n	80069ee <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80069be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fe6c 	bl	80076a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069d0:	89ba      	ldrh	r2, [r7, #12]
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff f9d1 	bl	8005d7e <HAL_I2C_AddrCallback>
}
 80069dc:	e007      	b.n	80069ee <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b21      	cmp	r3, #33	@ 0x21
 8006a10:	d115      	bne.n	8006a3e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2211      	movs	r2, #17
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a26:	2101      	movs	r1, #1
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fe39 	bl	80076a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f018 fd5e 	bl	801f4f8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a3c:	e014      	b.n	8006a68 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2212      	movs	r2, #18
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a52:	2102      	movs	r1, #2
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fe23 	bl	80076a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f018 fd5e 	bl	801f524 <HAL_I2C_MasterRxCpltCallback>
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	0b9b      	lsrs	r3, r3, #14
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e00d      	b.n	8006ac2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	0bdb      	lsrs	r3, r3, #15
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ac0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b29      	cmp	r3, #41	@ 0x29
 8006acc:	d112      	bne.n	8006af4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2228      	movs	r2, #40	@ 0x28
 8006ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2221      	movs	r2, #33	@ 0x21
 8006ada:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006adc:	2101      	movs	r1, #1
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fdde 	bl	80076a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f018 fd2f 	bl	801f550 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006af2:	e017      	b.n	8006b24 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006afe:	d111      	bne.n	8006b24 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2228      	movs	r2, #40	@ 0x28
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2222      	movs	r2, #34	@ 0x22
 8006b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b0e:	2102      	movs	r1, #2
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fdc5 	bl	80076a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f018 fd2c 	bl	801f57c <HAL_I2C_SlaveRxCpltCallback>
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b21      	cmp	r3, #33	@ 0x21
 8006b4c:	d107      	bne.n	8006b5e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b4e:	2101      	movs	r1, #1
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fda5 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2211      	movs	r2, #17
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b5c:	e00c      	b.n	8006b78 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b22      	cmp	r3, #34	@ 0x22
 8006b68:	d106      	bne.n	8006b78 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b6a:	2102      	movs	r1, #2
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fd97 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2212      	movs	r2, #18
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6859      	ldr	r1, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	4b4d      	ldr	r3, [pc, #308]	@ (8006cb8 <I2C_ITMasterCplt+0x18c>)
 8006b84:	400b      	ands	r3, r1
 8006b86:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a4a      	ldr	r2, [pc, #296]	@ (8006cbc <I2C_ITMasterCplt+0x190>)
 8006b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bac:	f043 0204 	orr.w	r2, r3, #4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b60      	cmp	r3, #96	@ 0x60
 8006bbe:	d10b      	bne.n	8006bd8 <I2C_ITMasterCplt+0xac>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	089b      	lsrs	r3, r3, #2
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fb48 	bl	800726e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b60      	cmp	r3, #96	@ 0x60
 8006bee:	d002      	beq.n	8006bf6 <I2C_ITMasterCplt+0xca>
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d006      	beq.n	8006c04 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa1f 	bl	8007040 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c02:	e054      	b.n	8006cae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b21      	cmp	r3, #33	@ 0x21
 8006c0e:	d124      	bne.n	8006c5a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b40      	cmp	r3, #64	@ 0x40
 8006c28:	d10b      	bne.n	8006c42 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff f8b7 	bl	8005dae <HAL_I2C_MemTxCpltCallback>
}
 8006c40:	e035      	b.n	8006cae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f018 fc50 	bl	801f4f8 <HAL_I2C_MasterTxCpltCallback>
}
 8006c58:	e029      	b.n	8006cae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b22      	cmp	r3, #34	@ 0x22
 8006c64:	d123      	bne.n	8006cae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b40      	cmp	r3, #64	@ 0x40
 8006c7e:	d10b      	bne.n	8006c98 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f896 	bl	8005dc2 <HAL_I2C_MemRxCpltCallback>
}
 8006c96:	e00a      	b.n	8006cae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f018 fc3b 	bl	801f524 <HAL_I2C_MasterRxCpltCallback>
}
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	fe00e800 	.word	0xfe00e800
 8006cbc:	ffff0000 	.word	0xffff0000

08006cc0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cda:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cec:	7afb      	ldrb	r3, [r7, #11]
 8006cee:	2b21      	cmp	r3, #33	@ 0x21
 8006cf0:	d002      	beq.n	8006cf8 <I2C_ITSlaveCplt+0x38>
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	2b29      	cmp	r3, #41	@ 0x29
 8006cf6:	d108      	bne.n	8006d0a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006cf8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fccf 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2221      	movs	r2, #33	@ 0x21
 8006d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d08:	e019      	b.n	8006d3e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	2b22      	cmp	r3, #34	@ 0x22
 8006d0e:	d002      	beq.n	8006d16 <I2C_ITSlaveCplt+0x56>
 8006d10:	7afb      	ldrb	r3, [r7, #11]
 8006d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d14:	d108      	bne.n	8006d28 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d16:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fcc0 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2222      	movs	r2, #34	@ 0x22
 8006d24:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d26:	e00a      	b.n	8006d3e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	2b28      	cmp	r3, #40	@ 0x28
 8006d2c:	d107      	bne.n	8006d3e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006d2e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fcb4 	bl	80076a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d4c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6859      	ldr	r1, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4b8c      	ldr	r3, [pc, #560]	@ (8006f8c <I2C_ITSlaveCplt+0x2cc>)
 8006d5a:	400b      	ands	r3, r1
 8006d5c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa85 	bl	800726e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	0b9b      	lsrs	r3, r3, #14
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d013      	beq.n	8006d98 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d020      	beq.n	8006dca <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d96:	e018      	b.n	8006dca <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	0bdb      	lsrs	r3, r3, #15
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d012      	beq.n	8006dca <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006db2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d006      	beq.n	8006dca <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	089b      	lsrs	r3, r3, #2
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d020      	beq.n	8006e18 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 0304 	bic.w	r3, r3, #4
 8006ddc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e26:	f043 0204 	orr.w	r2, r3, #4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	091b      	lsrs	r3, r3, #4
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04a      	beq.n	8006ed0 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d044      	beq.n	8006ed0 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d128      	bne.n	8006ea2 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b28      	cmp	r3, #40	@ 0x28
 8006e5a:	d108      	bne.n	8006e6e <I2C_ITSlaveCplt+0x1ae>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e62:	d104      	bne.n	8006e6e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e64:	6979      	ldr	r1, [r7, #20]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f894 	bl	8006f94 <I2C_ITListenCplt>
 8006e6c:	e030      	b.n	8006ed0 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b29      	cmp	r3, #41	@ 0x29
 8006e78:	d10e      	bne.n	8006e98 <I2C_ITSlaveCplt+0x1d8>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e80:	d00a      	beq.n	8006e98 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2210      	movs	r2, #16
 8006e88:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f9ef 	bl	800726e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fded 	bl	8006a70 <I2C_ITSlaveSeqCplt>
 8006e96:	e01b      	b.n	8006ed0 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	61da      	str	r2, [r3, #28]
 8006ea0:	e016      	b.n	8006ed0 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2210      	movs	r2, #16
 8006ea8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eae:	f043 0204 	orr.w	r2, r3, #4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <I2C_ITSlaveCplt+0x204>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ec2:	d105      	bne.n	8006ed0 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8b8 	bl	8007040 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f8a7 	bl	8007040 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b28      	cmp	r3, #40	@ 0x28
 8006efc:	d141      	bne.n	8006f82 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006efe:	6979      	ldr	r1, [r7, #20]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f847 	bl	8006f94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f06:	e03c      	b.n	8006f82 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f10:	d014      	beq.n	8006f3c <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fdac 	bl	8006a70 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006f90 <I2C_ITSlaveCplt+0x2d0>)
 8006f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fe ff30 	bl	8005d9a <HAL_I2C_ListenCpltCallback>
}
 8006f3a:	e022      	b.n	8006f82 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b22      	cmp	r3, #34	@ 0x22
 8006f46:	d10e      	bne.n	8006f66 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f018 fb0c 	bl	801f57c <HAL_I2C_SlaveRxCpltCallback>
}
 8006f64:	e00d      	b.n	8006f82 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f018 fae7 	bl	801f550 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f82:	bf00      	nop
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	fe00e800 	.word	0xfe00e800
 8006f90:	ffff0000 	.word	0xffff0000

08006f94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a26      	ldr	r2, [pc, #152]	@ (800703c <I2C_ITListenCplt+0xa8>)
 8006fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d022      	beq.n	8007012 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d012      	beq.n	8007012 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800700a:	f043 0204 	orr.w	r2, r3, #4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007012:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fb42 	bl	80076a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2210      	movs	r2, #16
 8007022:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fe feb4 	bl	8005d9a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	ffff0000 	.word	0xffff0000

08007040 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007050:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a6d      	ldr	r2, [pc, #436]	@ (8007214 <I2C_ITError+0x1d4>)
 800705e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007072:	7bfb      	ldrb	r3, [r7, #15]
 8007074:	2b28      	cmp	r3, #40	@ 0x28
 8007076:	d005      	beq.n	8007084 <I2C_ITError+0x44>
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	2b29      	cmp	r3, #41	@ 0x29
 800707c:	d002      	beq.n	8007084 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b2a      	cmp	r3, #42	@ 0x2a
 8007082:	d10b      	bne.n	800709c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007084:	2103      	movs	r1, #3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fb0a 	bl	80076a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2228      	movs	r2, #40	@ 0x28
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a60      	ldr	r2, [pc, #384]	@ (8007218 <I2C_ITError+0x1d8>)
 8007098:	635a      	str	r2, [r3, #52]	@ 0x34
 800709a:	e030      	b.n	80070fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800709c:	f248 0103 	movw	r1, #32771	@ 0x8003
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fafd 	bl	80076a0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f8e1 	bl	800726e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b60      	cmp	r3, #96	@ 0x60
 80070b6:	d01f      	beq.n	80070f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d114      	bne.n	80070f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d109      	bne.n	80070f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2210      	movs	r2, #16
 80070e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e8:	f043 0204 	orr.w	r2, r3, #4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2220      	movs	r2, #32
 80070f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007102:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007108:	2b00      	cmp	r3, #0
 800710a:	d039      	beq.n	8007180 <I2C_ITError+0x140>
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b11      	cmp	r3, #17
 8007110:	d002      	beq.n	8007118 <I2C_ITError+0xd8>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b21      	cmp	r3, #33	@ 0x21
 8007116:	d133      	bne.n	8007180 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007126:	d107      	bne.n	8007138 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007136:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713c:	4618      	mov	r0, r3
 800713e:	f7fc fc45 	bl	80039cc <HAL_DMA_GetState>
 8007142:	4603      	mov	r3, r0
 8007144:	2b01      	cmp	r3, #1
 8007146:	d017      	beq.n	8007178 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714c:	4a33      	ldr	r2, [pc, #204]	@ (800721c <I2C_ITError+0x1dc>)
 800714e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	4618      	mov	r0, r3
 800715e:	f7fc fa35 	bl	80035cc <HAL_DMA_Abort_IT>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d04d      	beq.n	8007204 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007172:	4610      	mov	r0, r2
 8007174:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007176:	e045      	b.n	8007204 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f851 	bl	8007220 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800717e:	e041      	b.n	8007204 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d039      	beq.n	80071fc <I2C_ITError+0x1bc>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b12      	cmp	r3, #18
 800718c:	d002      	beq.n	8007194 <I2C_ITError+0x154>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b22      	cmp	r3, #34	@ 0x22
 8007192:	d133      	bne.n	80071fc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800719e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071a2:	d107      	bne.n	80071b4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fc fc07 	bl	80039cc <HAL_DMA_GetState>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d017      	beq.n	80071f4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c8:	4a14      	ldr	r2, [pc, #80]	@ (800721c <I2C_ITError+0x1dc>)
 80071ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fc f9f7 	bl	80035cc <HAL_DMA_Abort_IT>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d011      	beq.n	8007208 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071ee:	4610      	mov	r0, r2
 80071f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071f2:	e009      	b.n	8007208 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f813 	bl	8007220 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071fa:	e005      	b.n	8007208 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f80f 	bl	8007220 <I2C_TreatErrorCallback>
  }
}
 8007202:	e002      	b.n	800720a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007204:	bf00      	nop
 8007206:	e000      	b.n	800720a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007208:	bf00      	nop
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	ffff0000 	.word	0xffff0000
 8007218:	08006083 	.word	0x08006083
 800721c:	080074f9 	.word	0x080074f9

08007220 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b60      	cmp	r3, #96	@ 0x60
 8007232:	d10e      	bne.n	8007252 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fe fdcd 	bl	8005dea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007250:	e009      	b.n	8007266 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fe fdb8 	bl	8005dd6 <HAL_I2C_ErrorCallback>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b02      	cmp	r3, #2
 8007282:	d103      	bne.n	800728c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2200      	movs	r2, #0
 800728a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b01      	cmp	r3, #1
 8007298:	d007      	beq.n	80072aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699a      	ldr	r2, [r3, #24]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	619a      	str	r2, [r3, #24]
  }
}
 80072aa:	bf00      	nop
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072d2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80072de:	2120      	movs	r1, #32
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f959 	bl	8007598 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80072e6:	e02d      	b.n	8007344 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80072f0:	441a      	add	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2bff      	cmp	r3, #255	@ 0xff
 80072fe:	d903      	bls.n	8007308 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	22ff      	movs	r2, #255	@ 0xff
 8007304:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007306:	e004      	b.n	8007312 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	4619      	mov	r1, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3328      	adds	r3, #40	@ 0x28
 8007322:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007328:	f7fc f880 	bl	800342c <HAL_DMA_Start_IT>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007332:	2110      	movs	r1, #16
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff fe83 	bl	8007040 <I2C_ITError>
}
 800733a:	e003      	b.n	8007344 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800733c:	2140      	movs	r1, #64	@ 0x40
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f92a 	bl	8007598 <I2C_Enable_IRQ>
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007366:	d002      	beq.n	800736e <I2C_DMASlaveTransmitCplt+0x22>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800737c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7ff fb76 	bl	8006a70 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007398:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073a8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d104      	bne.n	80073be <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80073b4:	2120      	movs	r1, #32
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f8ee 	bl	8007598 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80073bc:	e03b      	b.n	8007436 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80073c6:	441a      	add	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2bff      	cmp	r3, #255	@ 0xff
 80073d4:	d911      	bls.n	80073fa <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	0c1b      	lsrs	r3, r3, #16
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d103      	bne.n	80073f2 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073f0:	e008      	b.n	8007404 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	22ff      	movs	r2, #255	@ 0xff
 80073f6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073f8:	e004      	b.n	8007404 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3324      	adds	r3, #36	@ 0x24
 800740e:	4619      	mov	r1, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007414:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800741a:	f7fc f807 	bl	800342c <HAL_DMA_Start_IT>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d004      	beq.n	800742e <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007424:	2110      	movs	r1, #16
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fe0a 	bl	8007040 <I2C_ITError>
}
 800742c:	e003      	b.n	8007436 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800742e:	2140      	movs	r1, #64	@ 0x40
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 f8b1 	bl	8007598 <I2C_Enable_IRQ>
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007450:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10e      	bne.n	800747c <I2C_DMASlaveReceiveCplt+0x3e>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007464:	d00a      	beq.n	800747c <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007474:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff fafa 	bl	8006a70 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007494:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80074aa:	2301      	movs	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80074c2:	2301      	movs	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fc fa8e 	bl	80039e8 <HAL_DMA_GetError>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d00e      	beq.n	80074f0 <I2C_DMAError+0x6c>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074e6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074e8:	2110      	movs	r1, #16
 80074ea:	68b8      	ldr	r0, [r7, #8]
 80074ec:	f7ff fda8 	bl	8007040 <I2C_ITError>
  }
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007512:	2200      	movs	r2, #0
 8007514:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007522:	2200      	movs	r2, #0
 8007524:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f7ff fe7a 	bl	8007220 <I2C_TreatErrorCallback>
}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	817b      	strh	r3, [r7, #10]
 8007542:	4613      	mov	r3, r2
 8007544:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007546:	897b      	ldrh	r3, [r7, #10]
 8007548:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800754c:	7a7b      	ldrb	r3, [r7, #9]
 800754e:	041b      	lsls	r3, r3, #16
 8007550:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007554:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	4313      	orrs	r3, r2
 800755e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007562:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	0d5b      	lsrs	r3, r3, #21
 800756e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007572:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <I2C_TransferConfig+0x60>)
 8007574:	430b      	orrs	r3, r1
 8007576:	43db      	mvns	r3, r3
 8007578:	ea02 0103 	and.w	r1, r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	03ff63ff 	.word	0x03ff63ff

08007598 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ac:	4a39      	ldr	r2, [pc, #228]	@ (8007694 <I2C_Enable_IRQ+0xfc>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d032      	beq.n	8007618 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80075b6:	4a38      	ldr	r2, [pc, #224]	@ (8007698 <I2C_Enable_IRQ+0x100>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d02d      	beq.n	8007618 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80075c0:	4a36      	ldr	r2, [pc, #216]	@ (800769c <I2C_Enable_IRQ+0x104>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d028      	beq.n	8007618 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da03      	bge.n	80075d6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075d6:	887b      	ldrh	r3, [r7, #2]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075e8:	887b      	ldrh	r3, [r7, #2]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075fa:	887b      	ldrh	r3, [r7, #2]
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d103      	bne.n	8007608 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007606:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007608:	887b      	ldrh	r3, [r7, #2]
 800760a:	2b20      	cmp	r3, #32
 800760c:	d133      	bne.n	8007676 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f043 0320 	orr.w	r3, r3, #32
 8007614:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007616:	e02e      	b.n	8007676 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800761c:	2b00      	cmp	r3, #0
 800761e:	da03      	bge.n	8007628 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007626:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007628:	887b      	ldrh	r3, [r7, #2]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007638:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800763a:	887b      	ldrh	r3, [r7, #2]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800764a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	2b10      	cmp	r3, #16
 8007650:	d103      	bne.n	800765a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007658:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800765a:	887b      	ldrh	r3, [r7, #2]
 800765c:	2b20      	cmp	r3, #32
 800765e:	d103      	bne.n	8007668 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007666:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007668:	887b      	ldrh	r3, [r7, #2]
 800766a:	2b40      	cmp	r3, #64	@ 0x40
 800766c:	d103      	bne.n	8007676 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007674:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6819      	ldr	r1, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	430a      	orrs	r2, r1
 8007684:	601a      	str	r2, [r3, #0]
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	0800628b 	.word	0x0800628b
 8007698:	0800672d 	.word	0x0800672d
 800769c:	08006491 	.word	0x08006491

080076a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80076b0:	887b      	ldrh	r3, [r7, #2]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00f      	beq.n	80076da <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80076c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076ce:	2b28      	cmp	r3, #40	@ 0x28
 80076d0:	d003      	beq.n	80076da <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00f      	beq.n	8007704 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80076ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076f8:	2b28      	cmp	r3, #40	@ 0x28
 80076fa:	d003      	beq.n	8007704 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007702:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	da03      	bge.n	8007714 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007712:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007714:	887b      	ldrh	r3, [r7, #2]
 8007716:	2b10      	cmp	r3, #16
 8007718:	d103      	bne.n	8007722 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007720:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007722:	887b      	ldrh	r3, [r7, #2]
 8007724:	2b20      	cmp	r3, #32
 8007726:	d103      	bne.n	8007730 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f043 0320 	orr.w	r3, r3, #32
 800772e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007730:	887b      	ldrh	r3, [r7, #2]
 8007732:	2b40      	cmp	r3, #64	@ 0x40
 8007734:	d103      	bne.n	800773e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800773c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	43da      	mvns	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	400a      	ands	r2, r1
 800774e:	601a      	str	r2, [r3, #0]
}
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b20      	cmp	r3, #32
 8007770:	d138      	bne.n	80077e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800777c:	2302      	movs	r3, #2
 800777e:	e032      	b.n	80077e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2224      	movs	r2, #36	@ 0x24
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0201 	bic.w	r2, r2, #1
 800779e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6819      	ldr	r1, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	e000      	b.n	80077e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077e4:	2302      	movs	r3, #2
  }
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b20      	cmp	r3, #32
 8007806:	d139      	bne.n	800787c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007812:	2302      	movs	r3, #2
 8007814:	e033      	b.n	800787e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2224      	movs	r2, #36	@ 0x24
 8007822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0201 	bic.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007844:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	e000      	b.n	800787e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800787c:	2302      	movs	r3, #2
  }
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007896:	4b23      	ldr	r3, [pc, #140]	@ (8007924 <HAL_PWREx_EnableOverDrive+0x98>)
 8007898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789a:	4a22      	ldr	r2, [pc, #136]	@ (8007924 <HAL_PWREx_EnableOverDrive+0x98>)
 800789c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80078a2:	4b20      	ldr	r3, [pc, #128]	@ (8007924 <HAL_PWREx_EnableOverDrive+0x98>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80078ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078ba:	f7fa fd67 	bl	800238c <HAL_GetTick>
 80078be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078c0:	e009      	b.n	80078d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078c2:	f7fa fd63 	bl	800238c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078d0:	d901      	bls.n	80078d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e022      	b.n	800791c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078d6:	4b14      	ldr	r3, [pc, #80]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e2:	d1ee      	bne.n	80078c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078e4:	4b10      	ldr	r3, [pc, #64]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a0f      	ldr	r2, [pc, #60]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f0:	f7fa fd4c 	bl	800238c <HAL_GetTick>
 80078f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078f6:	e009      	b.n	800790c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078f8:	f7fa fd48 	bl	800238c <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007906:	d901      	bls.n	800790c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e007      	b.n	800791c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800790c:	4b06      	ldr	r3, [pc, #24]	@ (8007928 <HAL_PWREx_EnableOverDrive+0x9c>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007918:	d1ee      	bne.n	80078f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40023800 	.word	0x40023800
 8007928:	40007000 	.word	0x40007000

0800792c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007934:	2300      	movs	r3, #0
 8007936:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e291      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8087 	beq.w	8007a5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007950:	4b96      	ldr	r3, [pc, #600]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 030c 	and.w	r3, r3, #12
 8007958:	2b04      	cmp	r3, #4
 800795a:	d00c      	beq.n	8007976 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800795c:	4b93      	ldr	r3, [pc, #588]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 030c 	and.w	r3, r3, #12
 8007964:	2b08      	cmp	r3, #8
 8007966:	d112      	bne.n	800798e <HAL_RCC_OscConfig+0x62>
 8007968:	4b90      	ldr	r3, [pc, #576]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007974:	d10b      	bne.n	800798e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007976:	4b8d      	ldr	r3, [pc, #564]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d06c      	beq.n	8007a5c <HAL_RCC_OscConfig+0x130>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d168      	bne.n	8007a5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e26b      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007996:	d106      	bne.n	80079a6 <HAL_RCC_OscConfig+0x7a>
 8007998:	4b84      	ldr	r3, [pc, #528]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a83      	ldr	r2, [pc, #524]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 800799e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	e02e      	b.n	8007a04 <HAL_RCC_OscConfig+0xd8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10c      	bne.n	80079c8 <HAL_RCC_OscConfig+0x9c>
 80079ae:	4b7f      	ldr	r3, [pc, #508]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a7e      	ldr	r2, [pc, #504]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	4b7c      	ldr	r3, [pc, #496]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a7b      	ldr	r2, [pc, #492]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e01d      	b.n	8007a04 <HAL_RCC_OscConfig+0xd8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079d0:	d10c      	bne.n	80079ec <HAL_RCC_OscConfig+0xc0>
 80079d2:	4b76      	ldr	r3, [pc, #472]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a75      	ldr	r2, [pc, #468]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	4b73      	ldr	r3, [pc, #460]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a72      	ldr	r2, [pc, #456]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	e00b      	b.n	8007a04 <HAL_RCC_OscConfig+0xd8>
 80079ec:	4b6f      	ldr	r3, [pc, #444]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a6e      	ldr	r2, [pc, #440]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	4b6c      	ldr	r3, [pc, #432]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a6b      	ldr	r2, [pc, #428]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 80079fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d013      	beq.n	8007a34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fa fcbe 	bl	800238c <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a14:	f7fa fcba 	bl	800238c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b64      	cmp	r3, #100	@ 0x64
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e21f      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a26:	4b61      	ldr	r3, [pc, #388]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0f0      	beq.n	8007a14 <HAL_RCC_OscConfig+0xe8>
 8007a32:	e014      	b.n	8007a5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fa fcaa 	bl	800238c <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a3c:	f7fa fca6 	bl	800238c <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b64      	cmp	r3, #100	@ 0x64
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e20b      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a4e:	4b57      	ldr	r3, [pc, #348]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f0      	bne.n	8007a3c <HAL_RCC_OscConfig+0x110>
 8007a5a:	e000      	b.n	8007a5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d069      	beq.n	8007b3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a6a:	4b50      	ldr	r3, [pc, #320]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 030c 	and.w	r3, r3, #12
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00b      	beq.n	8007a8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a76:	4b4d      	ldr	r3, [pc, #308]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f003 030c 	and.w	r3, r3, #12
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d11c      	bne.n	8007abc <HAL_RCC_OscConfig+0x190>
 8007a82:	4b4a      	ldr	r3, [pc, #296]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d116      	bne.n	8007abc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a8e:	4b47      	ldr	r3, [pc, #284]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x17a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d001      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e1df      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa6:	4b41      	ldr	r3, [pc, #260]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	493d      	ldr	r1, [pc, #244]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aba:	e040      	b.n	8007b3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d023      	beq.n	8007b0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ac4:	4b39      	ldr	r3, [pc, #228]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a38      	ldr	r2, [pc, #224]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad0:	f7fa fc5c 	bl	800238c <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ad8:	f7fa fc58 	bl	800238c <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e1bd      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aea:	4b30      	ldr	r3, [pc, #192]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f0      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007af6:	4b2d      	ldr	r3, [pc, #180]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	4929      	ldr	r1, [pc, #164]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	600b      	str	r3, [r1, #0]
 8007b0a:	e018      	b.n	8007b3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b0c:	4b27      	ldr	r3, [pc, #156]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a26      	ldr	r2, [pc, #152]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b12:	f023 0301 	bic.w	r3, r3, #1
 8007b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b18:	f7fa fc38 	bl	800238c <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b20:	f7fa fc34 	bl	800238c <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e199      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b32:	4b1e      	ldr	r3, [pc, #120]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0308 	and.w	r3, r3, #8
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d038      	beq.n	8007bbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d019      	beq.n	8007b86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b52:	4b16      	ldr	r3, [pc, #88]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b56:	4a15      	ldr	r2, [pc, #84]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5e:	f7fa fc15 	bl	800238c <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b66:	f7fa fc11 	bl	800238c <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e176      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b78:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <HAL_RCC_OscConfig+0x23a>
 8007b84:	e01a      	b.n	8007bbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b86:	4b09      	ldr	r3, [pc, #36]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b8a:	4a08      	ldr	r2, [pc, #32]	@ (8007bac <HAL_RCC_OscConfig+0x280>)
 8007b8c:	f023 0301 	bic.w	r3, r3, #1
 8007b90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b92:	f7fa fbfb 	bl	800238c <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b98:	e00a      	b.n	8007bb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b9a:	f7fa fbf7 	bl	800238c <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d903      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e15c      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
 8007bac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bb0:	4b91      	ldr	r3, [pc, #580]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1ee      	bne.n	8007b9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0304 	and.w	r3, r3, #4
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 80a4 	beq.w	8007d12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bca:	4b8b      	ldr	r3, [pc, #556]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10d      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bd6:	4b88      	ldr	r3, [pc, #544]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	4a87      	ldr	r2, [pc, #540]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007be2:	4b85      	ldr	r3, [pc, #532]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bea:	60bb      	str	r3, [r7, #8]
 8007bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bf2:	4b82      	ldr	r3, [pc, #520]	@ (8007dfc <HAL_RCC_OscConfig+0x4d0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d118      	bne.n	8007c30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8007dfc <HAL_RCC_OscConfig+0x4d0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a7e      	ldr	r2, [pc, #504]	@ (8007dfc <HAL_RCC_OscConfig+0x4d0>)
 8007c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c0a:	f7fa fbbf 	bl	800238c <HAL_GetTick>
 8007c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c10:	e008      	b.n	8007c24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c12:	f7fa fbbb 	bl	800238c <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b64      	cmp	r3, #100	@ 0x64
 8007c1e:	d901      	bls.n	8007c24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e120      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c24:	4b75      	ldr	r3, [pc, #468]	@ (8007dfc <HAL_RCC_OscConfig+0x4d0>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0f0      	beq.n	8007c12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d106      	bne.n	8007c46 <HAL_RCC_OscConfig+0x31a>
 8007c38:	4b6f      	ldr	r3, [pc, #444]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c44:	e02d      	b.n	8007ca2 <HAL_RCC_OscConfig+0x376>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10c      	bne.n	8007c68 <HAL_RCC_OscConfig+0x33c>
 8007c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c52:	4a69      	ldr	r2, [pc, #420]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c54:	f023 0301 	bic.w	r3, r3, #1
 8007c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c5a:	4b67      	ldr	r3, [pc, #412]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c5e:	4a66      	ldr	r2, [pc, #408]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c60:	f023 0304 	bic.w	r3, r3, #4
 8007c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c66:	e01c      	b.n	8007ca2 <HAL_RCC_OscConfig+0x376>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b05      	cmp	r3, #5
 8007c6e:	d10c      	bne.n	8007c8a <HAL_RCC_OscConfig+0x35e>
 8007c70:	4b61      	ldr	r3, [pc, #388]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c74:	4a60      	ldr	r2, [pc, #384]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c76:	f043 0304 	orr.w	r3, r3, #4
 8007c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c80:	4a5d      	ldr	r2, [pc, #372]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c82:	f043 0301 	orr.w	r3, r3, #1
 8007c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c88:	e00b      	b.n	8007ca2 <HAL_RCC_OscConfig+0x376>
 8007c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8e:	4a5a      	ldr	r2, [pc, #360]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c96:	4b58      	ldr	r3, [pc, #352]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9a:	4a57      	ldr	r2, [pc, #348]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007c9c:	f023 0304 	bic.w	r3, r3, #4
 8007ca0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d015      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007caa:	f7fa fb6f 	bl	800238c <HAL_GetTick>
 8007cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cb0:	e00a      	b.n	8007cc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cb2:	f7fa fb6b 	bl	800238c <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e0ce      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0ee      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x386>
 8007cd4:	e014      	b.n	8007d00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd6:	f7fa fb59 	bl	800238c <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cdc:	e00a      	b.n	8007cf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cde:	f7fa fb55 	bl	800238c <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e0b8      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf4:	4b40      	ldr	r3, [pc, #256]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1ee      	bne.n	8007cde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d105      	bne.n	8007d12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d06:	4b3c      	ldr	r3, [pc, #240]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d10:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 80a4 	beq.w	8007e64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d1c:	4b36      	ldr	r3, [pc, #216]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 030c 	and.w	r3, r3, #12
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d06b      	beq.n	8007e00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d149      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d30:	4b31      	ldr	r3, [pc, #196]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a30      	ldr	r2, [pc, #192]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7fa fb26 	bl	800238c <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d44:	f7fa fb22 	bl	800238c <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e087      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d56:	4b28      	ldr	r3, [pc, #160]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	69da      	ldr	r2, [r3, #28]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d70:	019b      	lsls	r3, r3, #6
 8007d72:	431a      	orrs	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d78:	085b      	lsrs	r3, r3, #1
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	061b      	lsls	r3, r3, #24
 8007d86:	4313      	orrs	r3, r2
 8007d88:	4a1b      	ldr	r2, [pc, #108]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d90:	4b19      	ldr	r3, [pc, #100]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a18      	ldr	r2, [pc, #96]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d9c:	f7fa faf6 	bl	800238c <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007da4:	f7fa faf2 	bl	800238c <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e057      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007db6:	4b10      	ldr	r3, [pc, #64]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0f0      	beq.n	8007da4 <HAL_RCC_OscConfig+0x478>
 8007dc2:	e04f      	b.n	8007e64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fa fadc 	bl	800238c <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd8:	f7fa fad8 	bl	800238c <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e03d      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dea:	4b03      	ldr	r3, [pc, #12]	@ (8007df8 <HAL_RCC_OscConfig+0x4cc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x4ac>
 8007df6:	e035      	b.n	8007e64 <HAL_RCC_OscConfig+0x538>
 8007df8:	40023800 	.word	0x40023800
 8007dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e00:	4b1b      	ldr	r3, [pc, #108]	@ (8007e70 <HAL_RCC_OscConfig+0x544>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d028      	beq.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d121      	bne.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d11a      	bne.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e30:	4013      	ands	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d111      	bne.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e46:	085b      	lsrs	r3, r3, #1
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d001      	beq.n	8007e64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e000      	b.n	8007e66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40023800 	.word	0x40023800

08007e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e0d0      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d910      	bls.n	8007ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9a:	4b67      	ldr	r3, [pc, #412]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f023 020f 	bic.w	r2, r3, #15
 8007ea2:	4965      	ldr	r1, [pc, #404]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eaa:	4b63      	ldr	r3, [pc, #396]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0b8      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d020      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ed4:	4b59      	ldr	r3, [pc, #356]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	4a58      	ldr	r2, [pc, #352]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eec:	4b53      	ldr	r3, [pc, #332]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a52      	ldr	r2, [pc, #328]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ef8:	4b50      	ldr	r3, [pc, #320]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	494d      	ldr	r1, [pc, #308]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d040      	beq.n	8007f98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d107      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f1e:	4b47      	ldr	r3, [pc, #284]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d115      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e07f      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d107      	bne.n	8007f46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f36:	4b41      	ldr	r3, [pc, #260]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e073      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f46:	4b3d      	ldr	r3, [pc, #244]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e06b      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f56:	4b39      	ldr	r3, [pc, #228]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f023 0203 	bic.w	r2, r3, #3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	4936      	ldr	r1, [pc, #216]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f68:	f7fa fa10 	bl	800238c <HAL_GetTick>
 8007f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f6e:	e00a      	b.n	8007f86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f70:	f7fa fa0c 	bl	800238c <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e053      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f86:	4b2d      	ldr	r3, [pc, #180]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 020c 	and.w	r2, r3, #12
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d1eb      	bne.n	8007f70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f98:	4b27      	ldr	r3, [pc, #156]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d210      	bcs.n	8007fc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa6:	4b24      	ldr	r3, [pc, #144]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f023 020f 	bic.w	r2, r3, #15
 8007fae:	4922      	ldr	r1, [pc, #136]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fb6:	4b20      	ldr	r3, [pc, #128]	@ (8008038 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d001      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e032      	b.n	800802e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fd4:	4b19      	ldr	r3, [pc, #100]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	4916      	ldr	r1, [pc, #88]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ff2:	4b12      	ldr	r3, [pc, #72]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	490e      	ldr	r1, [pc, #56]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 8008002:	4313      	orrs	r3, r2
 8008004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008006:	f000 f821 	bl	800804c <HAL_RCC_GetSysClockFreq>
 800800a:	4602      	mov	r2, r0
 800800c:	4b0b      	ldr	r3, [pc, #44]	@ (800803c <HAL_RCC_ClockConfig+0x1c8>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	091b      	lsrs	r3, r3, #4
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	490a      	ldr	r1, [pc, #40]	@ (8008040 <HAL_RCC_ClockConfig+0x1cc>)
 8008018:	5ccb      	ldrb	r3, [r1, r3]
 800801a:	fa22 f303 	lsr.w	r3, r2, r3
 800801e:	4a09      	ldr	r2, [pc, #36]	@ (8008044 <HAL_RCC_ClockConfig+0x1d0>)
 8008020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008022:	4b09      	ldr	r3, [pc, #36]	@ (8008048 <HAL_RCC_ClockConfig+0x1d4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f7f9 fb06 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40023c00 	.word	0x40023c00
 800803c:	40023800 	.word	0x40023800
 8008040:	08024c40 	.word	0x08024c40
 8008044:	20000000 	.word	0x20000000
 8008048:	20000004 	.word	0x20000004

0800804c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800804c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008050:	b090      	sub	sp, #64	@ 0x40
 8008052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	637b      	str	r3, [r7, #52]	@ 0x34
 8008058:	2300      	movs	r3, #0
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800805c:	2300      	movs	r3, #0
 800805e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008064:	4b59      	ldr	r3, [pc, #356]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 030c 	and.w	r3, r3, #12
 800806c:	2b08      	cmp	r3, #8
 800806e:	d00d      	beq.n	800808c <HAL_RCC_GetSysClockFreq+0x40>
 8008070:	2b08      	cmp	r3, #8
 8008072:	f200 80a1 	bhi.w	80081b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_RCC_GetSysClockFreq+0x34>
 800807a:	2b04      	cmp	r3, #4
 800807c:	d003      	beq.n	8008086 <HAL_RCC_GetSysClockFreq+0x3a>
 800807e:	e09b      	b.n	80081b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008080:	4b53      	ldr	r3, [pc, #332]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008082:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008084:	e09b      	b.n	80081be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008086:	4b53      	ldr	r3, [pc, #332]	@ (80081d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008088:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800808a:	e098      	b.n	80081be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800808c:	4b4f      	ldr	r3, [pc, #316]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008094:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008096:	4b4d      	ldr	r3, [pc, #308]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d028      	beq.n	80080f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080a2:	4b4a      	ldr	r3, [pc, #296]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	2200      	movs	r2, #0
 80080aa:	623b      	str	r3, [r7, #32]
 80080ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080b4:	2100      	movs	r1, #0
 80080b6:	4b47      	ldr	r3, [pc, #284]	@ (80081d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80080b8:	fb03 f201 	mul.w	r2, r3, r1
 80080bc:	2300      	movs	r3, #0
 80080be:	fb00 f303 	mul.w	r3, r0, r3
 80080c2:	4413      	add	r3, r2
 80080c4:	4a43      	ldr	r2, [pc, #268]	@ (80081d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80080c6:	fba0 1202 	umull	r1, r2, r0, r2
 80080ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080cc:	460a      	mov	r2, r1
 80080ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080d2:	4413      	add	r3, r2
 80080d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d8:	2200      	movs	r2, #0
 80080da:	61bb      	str	r3, [r7, #24]
 80080dc:	61fa      	str	r2, [r7, #28]
 80080de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080e6:	f7f8 f8e3 	bl	80002b0 <__aeabi_uldivmod>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4613      	mov	r3, r2
 80080f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f2:	e053      	b.n	800819c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080f4:	4b35      	ldr	r3, [pc, #212]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	099b      	lsrs	r3, r3, #6
 80080fa:	2200      	movs	r2, #0
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	617a      	str	r2, [r7, #20]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008106:	f04f 0b00 	mov.w	fp, #0
 800810a:	4652      	mov	r2, sl
 800810c:	465b      	mov	r3, fp
 800810e:	f04f 0000 	mov.w	r0, #0
 8008112:	f04f 0100 	mov.w	r1, #0
 8008116:	0159      	lsls	r1, r3, #5
 8008118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800811c:	0150      	lsls	r0, r2, #5
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	ebb2 080a 	subs.w	r8, r2, sl
 8008126:	eb63 090b 	sbc.w	r9, r3, fp
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800813a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800813e:	ebb2 0408 	subs.w	r4, r2, r8
 8008142:	eb63 0509 	sbc.w	r5, r3, r9
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	00eb      	lsls	r3, r5, #3
 8008150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008154:	00e2      	lsls	r2, r4, #3
 8008156:	4614      	mov	r4, r2
 8008158:	461d      	mov	r5, r3
 800815a:	eb14 030a 	adds.w	r3, r4, sl
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	eb45 030b 	adc.w	r3, r5, fp
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	f04f 0300 	mov.w	r3, #0
 800816e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008172:	4629      	mov	r1, r5
 8008174:	028b      	lsls	r3, r1, #10
 8008176:	4621      	mov	r1, r4
 8008178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800817c:	4621      	mov	r1, r4
 800817e:	028a      	lsls	r2, r1, #10
 8008180:	4610      	mov	r0, r2
 8008182:	4619      	mov	r1, r3
 8008184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008186:	2200      	movs	r2, #0
 8008188:	60bb      	str	r3, [r7, #8]
 800818a:	60fa      	str	r2, [r7, #12]
 800818c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008190:	f7f8 f88e 	bl	80002b0 <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4613      	mov	r3, r2
 800819a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800819c:	4b0b      	ldr	r3, [pc, #44]	@ (80081cc <HAL_RCC_GetSysClockFreq+0x180>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	0c1b      	lsrs	r3, r3, #16
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	3301      	adds	r3, #1
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80081ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081b6:	e002      	b.n	80081be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081b8:	4b05      	ldr	r3, [pc, #20]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80081ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3740      	adds	r7, #64	@ 0x40
 80081c4:	46bd      	mov	sp, r7
 80081c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ca:	bf00      	nop
 80081cc:	40023800 	.word	0x40023800
 80081d0:	00f42400 	.word	0x00f42400
 80081d4:	017d7840 	.word	0x017d7840

080081d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081dc:	4b03      	ldr	r3, [pc, #12]	@ (80081ec <HAL_RCC_GetHCLKFreq+0x14>)
 80081de:	681b      	ldr	r3, [r3, #0]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000000 	.word	0x20000000

080081f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081f4:	f7ff fff0 	bl	80081d8 <HAL_RCC_GetHCLKFreq>
 80081f8:	4602      	mov	r2, r0
 80081fa:	4b05      	ldr	r3, [pc, #20]	@ (8008210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	0a9b      	lsrs	r3, r3, #10
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	4903      	ldr	r1, [pc, #12]	@ (8008214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008206:	5ccb      	ldrb	r3, [r1, r3]
 8008208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800820c:	4618      	mov	r0, r3
 800820e:	bd80      	pop	{r7, pc}
 8008210:	40023800 	.word	0x40023800
 8008214:	08024c50 	.word	0x08024c50

08008218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800821c:	f7ff ffdc 	bl	80081d8 <HAL_RCC_GetHCLKFreq>
 8008220:	4602      	mov	r2, r0
 8008222:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	0b5b      	lsrs	r3, r3, #13
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	4903      	ldr	r1, [pc, #12]	@ (800823c <HAL_RCC_GetPCLK2Freq+0x24>)
 800822e:	5ccb      	ldrb	r3, [r1, r3]
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008234:	4618      	mov	r0, r3
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40023800 	.word	0x40023800
 800823c:	08024c50 	.word	0x08024c50

08008240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	220f      	movs	r2, #15
 800824e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008250:	4b12      	ldr	r3, [pc, #72]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 0203 	and.w	r2, r3, #3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800825c:	4b0f      	ldr	r3, [pc, #60]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008268:	4b0c      	ldr	r3, [pc, #48]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008274:	4b09      	ldr	r3, [pc, #36]	@ (800829c <HAL_RCC_GetClockConfig+0x5c>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008282:	4b07      	ldr	r3, [pc, #28]	@ (80082a0 <HAL_RCC_GetClockConfig+0x60>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 020f 	and.w	r2, r3, #15
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	601a      	str	r2, [r3, #0]
}
 800828e:	bf00      	nop
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40023800 	.word	0x40023800
 80082a0:	40023c00 	.word	0x40023c00

080082a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d012      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082cc:	4b69      	ldr	r3, [pc, #420]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	4a68      	ldr	r2, [pc, #416]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082d6:	6093      	str	r3, [r2, #8]
 80082d8:	4b66      	ldr	r3, [pc, #408]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082e0:	4964      	ldr	r1, [pc, #400]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082ee:	2301      	movs	r3, #1
 80082f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d017      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082fe:	4b5d      	ldr	r3, [pc, #372]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008304:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800830c:	4959      	ldr	r1, [pc, #356]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800831c:	d101      	bne.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800831e:	2301      	movs	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d017      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800833a:	4b4e      	ldr	r3, [pc, #312]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800833c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008340:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008348:	494a      	ldr	r1, [pc, #296]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008358:	d101      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800835a:	2301      	movs	r3, #1
 800835c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008366:	2301      	movs	r3, #1
 8008368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008376:	2301      	movs	r3, #1
 8008378:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 808b 	beq.w	800849e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008388:	4b3a      	ldr	r3, [pc, #232]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838c:	4a39      	ldr	r2, [pc, #228]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008392:	6413      	str	r3, [r2, #64]	@ 0x40
 8008394:	4b37      	ldr	r3, [pc, #220]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800839c:	60bb      	str	r3, [r7, #8]
 800839e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083a0:	4b35      	ldr	r3, [pc, #212]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a34      	ldr	r2, [pc, #208]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ac:	f7f9 ffee 	bl	800238c <HAL_GetTick>
 80083b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083b2:	e008      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083b4:	f7f9 ffea 	bl	800238c <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b64      	cmp	r3, #100	@ 0x64
 80083c0:	d901      	bls.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e357      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0f0      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083d2:	4b28      	ldr	r3, [pc, #160]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d035      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d02e      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083f0:	4b20      	ldr	r3, [pc, #128]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008404:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008406:	4b1b      	ldr	r3, [pc, #108]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800840a:	4a1a      	ldr	r2, [pc, #104]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008410:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008412:	4a18      	ldr	r2, [pc, #96]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008418:	4b16      	ldr	r3, [pc, #88]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b01      	cmp	r3, #1
 8008422:	d114      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008424:	f7f9 ffb2 	bl	800238c <HAL_GetTick>
 8008428:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800842a:	e00a      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800842c:	f7f9 ffae 	bl	800238c <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800843a:	4293      	cmp	r3, r2
 800843c:	d901      	bls.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e319      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008442:	4b0c      	ldr	r3, [pc, #48]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0ee      	beq.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800845a:	d111      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800845c:	4b05      	ldr	r3, [pc, #20]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008468:	4b04      	ldr	r3, [pc, #16]	@ (800847c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800846a:	400b      	ands	r3, r1
 800846c:	4901      	ldr	r1, [pc, #4]	@ (8008474 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846e:	4313      	orrs	r3, r2
 8008470:	608b      	str	r3, [r1, #8]
 8008472:	e00b      	b.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008474:	40023800 	.word	0x40023800
 8008478:	40007000 	.word	0x40007000
 800847c:	0ffffcff 	.word	0x0ffffcff
 8008480:	4baa      	ldr	r3, [pc, #680]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	4aa9      	ldr	r2, [pc, #676]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008486:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800848a:	6093      	str	r3, [r2, #8]
 800848c:	4ba7      	ldr	r3, [pc, #668]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008498:	49a4      	ldr	r1, [pc, #656]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849a:	4313      	orrs	r3, r2
 800849c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0310 	and.w	r3, r3, #16
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d010      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084aa:	4ba0      	ldr	r3, [pc, #640]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084b0:	4a9e      	ldr	r2, [pc, #632]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80084ba:	4b9c      	ldr	r3, [pc, #624]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	4999      	ldr	r1, [pc, #612]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084d8:	4b94      	ldr	r3, [pc, #592]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084e6:	4991      	ldr	r1, [pc, #580]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084fa:	4b8c      	ldr	r3, [pc, #560]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008500:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008508:	4988      	ldr	r1, [pc, #544]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800851c:	4b83      	ldr	r3, [pc, #524]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800852a:	4980      	ldr	r1, [pc, #512]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800853e:	4b7b      	ldr	r3, [pc, #492]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008544:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800854c:	4977      	ldr	r1, [pc, #476]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008560:	4b72      	ldr	r3, [pc, #456]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008566:	f023 0203 	bic.w	r2, r3, #3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800856e:	496f      	ldr	r1, [pc, #444]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008582:	4b6a      	ldr	r3, [pc, #424]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008588:	f023 020c 	bic.w	r2, r3, #12
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008590:	4966      	ldr	r1, [pc, #408]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085a4:	4b61      	ldr	r3, [pc, #388]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085b2:	495e      	ldr	r1, [pc, #376]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085c6:	4b59      	ldr	r3, [pc, #356]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d4:	4955      	ldr	r1, [pc, #340]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085e8:	4b50      	ldr	r3, [pc, #320]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f6:	494d      	ldr	r1, [pc, #308]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800860a:	4b48      	ldr	r3, [pc, #288]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008610:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008618:	4944      	ldr	r1, [pc, #272]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800862c:	4b3f      	ldr	r3, [pc, #252]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008632:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800863a:	493c      	ldr	r1, [pc, #240]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800864e:	4b37      	ldr	r3, [pc, #220]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008654:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800865c:	4933      	ldr	r1, [pc, #204]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008670:	4b2e      	ldr	r3, [pc, #184]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008676:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800867e:	492b      	ldr	r1, [pc, #172]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008680:	4313      	orrs	r3, r2
 8008682:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d011      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008692:	4b26      	ldr	r3, [pc, #152]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008698:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086a0:	4922      	ldr	r1, [pc, #136]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086b0:	d101      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086b2:	2301      	movs	r3, #1
 80086b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086c2:	2301      	movs	r3, #1
 80086c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086d2:	4b16      	ldr	r3, [pc, #88]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086e0:	4912      	ldr	r1, [pc, #72]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086f4:	4b0d      	ldr	r3, [pc, #52]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008704:	4909      	ldr	r1, [pc, #36]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008706:	4313      	orrs	r3, r2
 8008708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d006      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 80d9 	beq.w	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008720:	4b02      	ldr	r3, [pc, #8]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a01      	ldr	r2, [pc, #4]	@ (800872c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008726:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800872a:	e001      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800872c:	40023800 	.word	0x40023800
 8008730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008732:	f7f9 fe2b 	bl	800238c <HAL_GetTick>
 8008736:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008738:	e008      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800873a:	f7f9 fe27 	bl	800238c <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	2b64      	cmp	r3, #100	@ 0x64
 8008746:	d901      	bls.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e194      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800874c:	4b6c      	ldr	r3, [pc, #432]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1f0      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	d021      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008768:	2b00      	cmp	r3, #0
 800876a:	d11d      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800876c:	4b64      	ldr	r3, [pc, #400]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800876e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008772:	0c1b      	lsrs	r3, r3, #16
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800877a:	4b61      	ldr	r3, [pc, #388]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800877c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008780:	0e1b      	lsrs	r3, r3, #24
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	019a      	lsls	r2, r3, #6
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	041b      	lsls	r3, r3, #16
 8008792:	431a      	orrs	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	061b      	lsls	r3, r3, #24
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	071b      	lsls	r3, r3, #28
 80087a0:	4957      	ldr	r1, [pc, #348]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087bc:	d00a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d02e      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087d2:	d129      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087d4:	4b4a      	ldr	r3, [pc, #296]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	f003 0303 	and.w	r3, r3, #3
 80087e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087e2:	4b47      	ldr	r3, [pc, #284]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e8:	0f1b      	lsrs	r3, r3, #28
 80087ea:	f003 0307 	and.w	r3, r3, #7
 80087ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	019a      	lsls	r2, r3, #6
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	041b      	lsls	r3, r3, #16
 80087fa:	431a      	orrs	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	061b      	lsls	r3, r3, #24
 8008802:	431a      	orrs	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	071b      	lsls	r3, r3, #28
 8008808:	493d      	ldr	r1, [pc, #244]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800880a:	4313      	orrs	r3, r2
 800880c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008810:	4b3b      	ldr	r3, [pc, #236]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008816:	f023 021f 	bic.w	r2, r3, #31
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881e:	3b01      	subs	r3, #1
 8008820:	4937      	ldr	r1, [pc, #220]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01d      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008834:	4b32      	ldr	r3, [pc, #200]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800883a:	0e1b      	lsrs	r3, r3, #24
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008842:	4b2f      	ldr	r3, [pc, #188]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008848:	0f1b      	lsrs	r3, r3, #28
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	019a      	lsls	r2, r3, #6
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	041b      	lsls	r3, r3, #16
 800885c:	431a      	orrs	r2, r3
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	061b      	lsls	r3, r3, #24
 8008862:	431a      	orrs	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	071b      	lsls	r3, r3, #28
 8008868:	4925      	ldr	r1, [pc, #148]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800886a:	4313      	orrs	r3, r2
 800886c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d011      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	019a      	lsls	r2, r3, #6
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	061b      	lsls	r3, r3, #24
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	071b      	lsls	r3, r3, #28
 8008898:	4919      	ldr	r1, [pc, #100]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088a0:	4b17      	ldr	r3, [pc, #92]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a16      	ldr	r2, [pc, #88]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ac:	f7f9 fd6e 	bl	800238c <HAL_GetTick>
 80088b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088b4:	f7f9 fd6a 	bl	800238c <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b64      	cmp	r3, #100	@ 0x64
 80088c0:	d901      	bls.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e0d7      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	f040 80cd 	bne.w	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088da:	4b09      	ldr	r3, [pc, #36]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a08      	ldr	r2, [pc, #32]	@ (8008900 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e6:	f7f9 fd51 	bl	800238c <HAL_GetTick>
 80088ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088ec:	e00a      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088ee:	f7f9 fd4d 	bl	800238c <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b64      	cmp	r3, #100	@ 0x64
 80088fa:	d903      	bls.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e0ba      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008900:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008904:	4b5e      	ldr	r3, [pc, #376]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800890c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008910:	d0ed      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d009      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800892e:	2b00      	cmp	r3, #0
 8008930:	d02e      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d12a      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800893a:	4b51      	ldr	r3, [pc, #324]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800893c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008948:	4b4d      	ldr	r3, [pc, #308]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800894e:	0f1b      	lsrs	r3, r3, #28
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	019a      	lsls	r2, r3, #6
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	431a      	orrs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	061b      	lsls	r3, r3, #24
 8008968:	431a      	orrs	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	071b      	lsls	r3, r3, #28
 800896e:	4944      	ldr	r1, [pc, #272]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008970:	4313      	orrs	r3, r2
 8008972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008976:	4b42      	ldr	r3, [pc, #264]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800897c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	3b01      	subs	r3, #1
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	493d      	ldr	r1, [pc, #244]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800898a:	4313      	orrs	r3, r2
 800898c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d022      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089a4:	d11d      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089a6:	4b36      	ldr	r3, [pc, #216]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ac:	0e1b      	lsrs	r3, r3, #24
 80089ae:	f003 030f 	and.w	r3, r3, #15
 80089b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089b4:	4b32      	ldr	r3, [pc, #200]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089ba:	0f1b      	lsrs	r3, r3, #28
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	019a      	lsls	r2, r3, #6
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	041b      	lsls	r3, r3, #16
 80089ce:	431a      	orrs	r2, r3
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	061b      	lsls	r3, r3, #24
 80089d4:	431a      	orrs	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	071b      	lsls	r3, r3, #28
 80089da:	4929      	ldr	r1, [pc, #164]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d028      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089ee:	4b24      	ldr	r3, [pc, #144]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f4:	0e1b      	lsrs	r3, r3, #24
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089fc:	4b20      	ldr	r3, [pc, #128]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a02:	0c1b      	lsrs	r3, r3, #16
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	019a      	lsls	r2, r3, #6
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	041b      	lsls	r3, r3, #16
 8008a14:	431a      	orrs	r2, r3
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	061b      	lsls	r3, r3, #24
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	071b      	lsls	r3, r3, #28
 8008a22:	4917      	ldr	r1, [pc, #92]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a2a:	4b15      	ldr	r3, [pc, #84]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a38:	4911      	ldr	r1, [pc, #68]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a40:	4b0f      	ldr	r3, [pc, #60]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a0e      	ldr	r2, [pc, #56]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4c:	f7f9 fc9e 	bl	800238c <HAL_GetTick>
 8008a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a52:	e008      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a54:	f7f9 fc9a 	bl	800238c <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b64      	cmp	r3, #100	@ 0x64
 8008a60:	d901      	bls.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e007      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a66:	4b06      	ldr	r3, [pc, #24]	@ (8008a80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a72:	d1ef      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023800 	.word	0x40023800

08008a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e09d      	b.n	8008bd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d108      	bne.n	8008ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aa6:	d009      	beq.n	8008abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	61da      	str	r2, [r3, #28]
 8008aae:	e005      	b.n	8008abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d106      	bne.n	8008adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7f8 fc18 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008afc:	d902      	bls.n	8008b04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	e002      	b.n	8008b0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008b12:	d007      	beq.n	8008b24 <HAL_SPI_Init+0xa0>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b1c:	d002      	beq.n	8008b24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b66:	ea42 0103 	orr.w	r1, r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	0c1b      	lsrs	r3, r3, #16
 8008b80:	f003 0204 	and.w	r2, r3, #4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b88:	f003 0310 	and.w	r3, r3, #16
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008ba0:	ea42 0103 	orr.w	r1, r2, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d001      	beq.n	8008bfa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e0d4      	b.n	8008da4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <HAL_SPI_Transmit_DMA+0x2a>
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e0cc      	b.n	8008da4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_SPI_Transmit_DMA+0x3c>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e0c5      	b.n	8008da4 <HAL_SPI_Transmit_DMA+0x1c8>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2203      	movs	r2, #3
 8008c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	88fa      	ldrh	r2, [r7, #6]
 8008c38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	88fa      	ldrh	r2, [r7, #6]
 8008c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c6a:	d10f      	bne.n	8008c8c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c90:	4a46      	ldr	r2, [pc, #280]	@ (8008dac <HAL_SPI_Transmit_DMA+0x1d0>)
 8008c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c98:	4a45      	ldr	r2, [pc, #276]	@ (8008db0 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca0:	4a44      	ldr	r2, [pc, #272]	@ (8008db4 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008ca2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca8:	2200      	movs	r2, #0
 8008caa:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008cc4:	d82d      	bhi.n	8008d22 <HAL_SPI_Transmit_DMA+0x146>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cd0:	d127      	bne.n	8008d22 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10f      	bne.n	8008d00 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cfe:	e010      	b.n	8008d22 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d0e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	330c      	adds	r3, #12
 8008d32:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d38:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d3a:	f7fa fb77 	bl	800342c <HAL_DMA_Start_IT>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d48:	f043 0210 	orr.w	r2, r3, #16
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e023      	b.n	8008da4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d66:	2b40      	cmp	r3, #64	@ 0x40
 8008d68:	d007      	beq.n	8008d7a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d78:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 0220 	orr.w	r2, r2, #32
 8008d90:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0202 	orr.w	r2, r2, #2
 8008da0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	0800998d 	.word	0x0800998d
 8008db0:	080097a9 	.word	0x080097a9
 8008db4:	080099e1 	.word	0x080099e1

08008db8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d001      	beq.n	8008dd6 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e105      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <HAL_SPI_Receive_DMA+0x2a>
 8008ddc:	88fb      	ldrh	r3, [r7, #6]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e0fd      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d110      	bne.n	8008e10 <HAL_SPI_Receive_DMA+0x58>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008df6:	d10b      	bne.n	8008e10 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f8f6 	bl	8008ff8 <HAL_SPI_TransmitReceive_DMA>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	e0e8      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <HAL_SPI_Receive_DMA+0x66>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e0e1      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2204      	movs	r2, #4
 8008e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	88fa      	ldrh	r2, [r7, #6]
 8008e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	88fa      	ldrh	r2, [r7, #6]
 8008e46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e6a:	d10f      	bne.n	8008e8c <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e9a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ea4:	d908      	bls.n	8008eb8 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008eb4:	605a      	str	r2, [r3, #4]
 8008eb6:	e042      	b.n	8008f3e <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ec6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ed2:	d134      	bne.n	8008f3e <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ee2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d111      	bne.n	8008f18 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f02:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	085b      	lsrs	r3, r3, #1
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008f16:	e012      	b.n	8008f3e <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f26:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3301      	adds	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f42:	4a2a      	ldr	r2, [pc, #168]	@ (8008fec <HAL_SPI_Receive_DMA+0x234>)
 8008f44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4a:	4a29      	ldr	r2, [pc, #164]	@ (8008ff0 <HAL_SPI_Receive_DMA+0x238>)
 8008f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f52:	4a28      	ldr	r2, [pc, #160]	@ (8008ff4 <HAL_SPI_Receive_DMA+0x23c>)
 8008f54:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	330c      	adds	r3, #12
 8008f68:	4619      	mov	r1, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f78:	f7fa fa58 	bl	800342c <HAL_DMA_Start_IT>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00b      	beq.n	8008f9a <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f86:	f043 0210 	orr.w	r2, r3, #16
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e023      	b.n	8008fe2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa4:	2b40      	cmp	r3, #64	@ 0x40
 8008fa6:	d007      	beq.n	8008fb8 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fb6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0220 	orr.w	r2, r2, #32
 8008fce:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	080099a9 	.word	0x080099a9
 8008ff0:	08009851 	.word	0x08009851
 8008ff4:	080099e1 	.word	0x080099e1

08008ff8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800900c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d00c      	beq.n	8009034 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009020:	d106      	bne.n	8009030 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d102      	bne.n	8009030 <HAL_SPI_TransmitReceive_DMA+0x38>
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	2b04      	cmp	r3, #4
 800902e:	d001      	beq.n	8009034 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009030:	2302      	movs	r3, #2
 8009032:	e158      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009040:	887b      	ldrh	r3, [r7, #2]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e14d      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_SPI_TransmitReceive_DMA+0x60>
 8009054:	2302      	movs	r3, #2
 8009056:	e146      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b04      	cmp	r3, #4
 800906a:	d003      	beq.n	8009074 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2205      	movs	r2, #5
 8009070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	887a      	ldrh	r2, [r7, #2]
 8009084:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	887a      	ldrh	r2, [r7, #2]
 800908a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	887a      	ldrh	r2, [r7, #2]
 8009096:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	887a      	ldrh	r2, [r7, #2]
 800909e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80090bc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090c6:	d908      	bls.n	80090da <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090d6:	605a      	str	r2, [r3, #4]
 80090d8:	e06f      	b.n	80091ba <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090e8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090f4:	d126      	bne.n	8009144 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10f      	bne.n	8009122 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009110:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009116:	b29b      	uxth	r3, r3
 8009118:	085b      	lsrs	r3, r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009120:	e010      	b.n	8009144 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009130:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009136:	b29b      	uxth	r3, r3
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	b29b      	uxth	r3, r3
 800913c:	3301      	adds	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800914e:	d134      	bne.n	80091ba <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800915e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009166:	b29b      	uxth	r3, r3
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d111      	bne.n	8009194 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800917e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009186:	b29b      	uxth	r3, r3
 8009188:	085b      	lsrs	r3, r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009192:	e012      	b.n	80091ba <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	085b      	lsrs	r3, r3, #1
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3301      	adds	r3, #1
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d108      	bne.n	80091d8 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ca:	4a49      	ldr	r2, [pc, #292]	@ (80092f0 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80091cc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d2:	4a48      	ldr	r2, [pc, #288]	@ (80092f4 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80091d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80091d6:	e007      	b.n	80091e8 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091dc:	4a46      	ldr	r2, [pc, #280]	@ (80092f8 <HAL_SPI_TransmitReceive_DMA+0x300>)
 80091de:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e4:	4a45      	ldr	r2, [pc, #276]	@ (80092fc <HAL_SPI_TransmitReceive_DMA+0x304>)
 80091e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ec:	4a44      	ldr	r2, [pc, #272]	@ (8009300 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80091ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091f4:	2200      	movs	r2, #0
 80091f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	4619      	mov	r1, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009208:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009210:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009212:	f7fa f90b 	bl	800342c <HAL_DMA_Start_IT>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00b      	beq.n	8009234 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009220:	f043 0210 	orr.w	r2, r3, #16
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e058      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f042 0201 	orr.w	r2, r2, #1
 8009242:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009248:	2200      	movs	r2, #0
 800924a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009250:	2200      	movs	r2, #0
 8009252:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009258:	2200      	movs	r2, #0
 800925a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009260:	2200      	movs	r2, #0
 8009262:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	4619      	mov	r1, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330c      	adds	r3, #12
 8009274:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800927a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800927c:	f7fa f8d6 	bl	800342c <HAL_DMA_Start_IT>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00b      	beq.n	800929e <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800928a:	f043 0210 	orr.w	r2, r3, #16
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e023      	b.n	80092e6 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a8:	2b40      	cmp	r3, #64	@ 0x40
 80092aa:	d007      	beq.n	80092bc <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0220 	orr.w	r2, r2, #32
 80092d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685a      	ldr	r2, [r3, #4]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0202 	orr.w	r2, r2, #2
 80092e2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	080099a9 	.word	0x080099a9
 80092f4:	08009851 	.word	0x08009851
 80092f8:	080099c5 	.word	0x080099c5
 80092fc:	080098fb 	.word	0x080098fb
 8009300:	080099e1 	.word	0x080099e1

08009304 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08a      	sub	sp, #40	@ 0x28
 8009308:	af02      	add	r7, sp, #8
 800930a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009310:	4b88      	ldr	r3, [pc, #544]	@ (8009534 <HAL_SPI_Abort+0x230>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a88      	ldr	r2, [pc, #544]	@ (8009538 <HAL_SPI_Abort+0x234>)
 8009316:	fba2 2303 	umull	r2, r3, r2, r3
 800931a:	0a5b      	lsrs	r3, r3, #9
 800931c:	2264      	movs	r2, #100	@ 0x64
 800931e:	fb02 f303 	mul.w	r3, r2, r3
 8009322:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0220 	bic.w	r2, r2, #32
 8009336:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009342:	2b80      	cmp	r3, #128	@ 0x80
 8009344:	d117      	bne.n	8009376 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a7c      	ldr	r2, [pc, #496]	@ (800953c <HAL_SPI_Abort+0x238>)
 800934a:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009356:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800935e:	e008      	b.n	8009372 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	3b01      	subs	r3, #1
 8009364:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b07      	cmp	r3, #7
 8009370:	d1ec      	bne.n	800934c <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009380:	2b40      	cmp	r3, #64	@ 0x40
 8009382:	d117      	bne.n	80093b4 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a6e      	ldr	r2, [pc, #440]	@ (8009540 <HAL_SPI_Abort+0x23c>)
 8009388:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d106      	bne.n	800939e <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009394:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800939c:	e008      	b.n	80093b0 <HAL_SPI_Abort+0xac>
      }
      count--;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b07      	cmp	r3, #7
 80093ae:	d1ec      	bne.n	800938a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d141      	bne.n	8009446 <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d03d      	beq.n	8009446 <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ce:	2200      	movs	r2, #0
 80093d0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fa f888 	bl	80034ec <HAL_DMA_Abort>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2240      	movs	r2, #64	@ 0x40
 80093e6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0202 	bic.w	r2, r2, #2
 80093f6:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80093f8:	f7f8 ffc8 	bl	800238c <HAL_GetTick>
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	2164      	movs	r1, #100	@ 0x64
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fcbc 	bl	8009d80 <SPI_EndRxTxTransaction>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2240      	movs	r2, #64	@ 0x40
 8009412:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009422:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009424:	f7f8 ffb2 	bl	800238c <HAL_GetTick>
 8009428:	4603      	mov	r3, r0
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2364      	movs	r3, #100	@ 0x64
 800942e:	2200      	movs	r2, #0
 8009430:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fb91 	bl	8009b5c <SPI_WaitFifoStateUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2240      	movs	r2, #64	@ 0x40
 8009444:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	2b01      	cmp	r3, #1
 8009452:	d143      	bne.n	80094dc <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009458:	2b00      	cmp	r3, #0
 800945a:	d03f      	beq.n	80094dc <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009460:	2200      	movs	r2, #0
 8009462:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009468:	4618      	mov	r0, r3
 800946a:	f7fa f83f 	bl	80034ec <HAL_DMA_Abort>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2240      	movs	r2, #64	@ 0x40
 8009478:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009488:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800948a:	f7f8 ff7f 	bl	800238c <HAL_GetTick>
 800948e:	4603      	mov	r3, r0
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	2364      	movs	r3, #100	@ 0x64
 8009494:	2200      	movs	r2, #0
 8009496:	2180      	movs	r1, #128	@ 0x80
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fad7 	bl	8009a4c <SPI_WaitFlagStateUntilTimeout>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2240      	movs	r2, #64	@ 0x40
 80094a8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 80094aa:	f7f8 ff6f 	bl	800238c <HAL_GetTick>
 80094ae:	4603      	mov	r3, r0
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	2364      	movs	r3, #100	@ 0x64
 80094b4:	2200      	movs	r2, #0
 80094b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fb4e 	bl	8009b5c <SPI_WaitFifoStateUntilTimeout>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2240      	movs	r2, #64	@ 0x40
 80094ca:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0201 	bic.w	r2, r2, #1
 80094da:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ee:	2b40      	cmp	r3, #64	@ 0x40
 80094f0:	d102      	bne.n	80094f8 <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	77fb      	strb	r3, [r7, #31]
 80094f6:	e002      	b.n	80094fe <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094fe:	2300      	movs	r3, #0
 8009500:	613b      	str	r3, [r7, #16]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	613b      	str	r3, [r7, #16]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	613b      	str	r3, [r7, #16]
 8009512:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 800952a:	7ffb      	ldrb	r3, [r7, #31]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3720      	adds	r7, #32
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20000000 	.word	0x20000000
 8009538:	057619f1 	.word	0x057619f1
 800953c:	08009f15 	.word	0x08009f15
 8009540:	08009e55 	.word	0x08009e55

08009544 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	099b      	lsrs	r3, r3, #6
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10f      	bne.n	8009588 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	099b      	lsrs	r3, r3, #6
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d004      	beq.n	8009588 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	4798      	blx	r3
    return;
 8009586:	e0d7      	b.n	8009738 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <HAL_SPI_IRQHandler+0x66>
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	09db      	lsrs	r3, r3, #7
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3
    return;
 80095a8:	e0c6      	b.n	8009738 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	095b      	lsrs	r3, r3, #5
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10c      	bne.n	80095d0 <HAL_SPI_IRQHandler+0x8c>
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	099b      	lsrs	r3, r3, #6
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d106      	bne.n	80095d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	0a1b      	lsrs	r3, r3, #8
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 80b4 	beq.w	8009738 <HAL_SPI_IRQHandler+0x1f4>
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	095b      	lsrs	r3, r3, #5
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f000 80ad 	beq.w	8009738 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	099b      	lsrs	r3, r3, #6
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d023      	beq.n	8009632 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d011      	beq.n	800961a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fa:	f043 0204 	orr.w	r2, r3, #4
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009602:	2300      	movs	r3, #0
 8009604:	617b      	str	r3, [r7, #20]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	e00b      	b.n	8009632 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800961a:	2300      	movs	r3, #0
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	613b      	str	r3, [r7, #16]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	693b      	ldr	r3, [r7, #16]
        return;
 8009630:	e082      	b.n	8009738 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	095b      	lsrs	r3, r3, #5
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d014      	beq.n	8009668 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009642:	f043 0201 	orr.w	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00c      	beq.n	800968e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009678:	f043 0208 	orr.w	r2, r3, #8
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009680:	2300      	movs	r3, #0
 8009682:	60bb      	str	r3, [r7, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	60bb      	str	r3, [r7, #8]
 800968c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009692:	2b00      	cmp	r3, #0
 8009694:	d04f      	beq.n	8009736 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80096a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <HAL_SPI_IRQHandler+0x17e>
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d034      	beq.n	800972c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f022 0203 	bic.w	r2, r2, #3
 80096d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d011      	beq.n	80096fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096de:	4a18      	ldr	r2, [pc, #96]	@ (8009740 <HAL_SPI_IRQHandler+0x1fc>)
 80096e0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7f9 ff70 	bl	80035cc <HAL_DMA_Abort_IT>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009702:	2b00      	cmp	r3, #0
 8009704:	d016      	beq.n	8009734 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800970a:	4a0d      	ldr	r2, [pc, #52]	@ (8009740 <HAL_SPI_IRQHandler+0x1fc>)
 800970c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009712:	4618      	mov	r0, r3
 8009714:	f7f9 ff5a 	bl	80035cc <HAL_DMA_Abort_IT>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009722:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800972a:	e003      	b.n	8009734 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f831 	bl	8009794 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009732:	e000      	b.n	8009736 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009734:	bf00      	nop
    return;
 8009736:	bf00      	nop
  }
}
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	08009a21 	.word	0x08009a21

08009744 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097b6:	f7f8 fde9 	bl	800238c <HAL_GetTick>
 80097ba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ca:	d03b      	beq.n	8009844 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0220 	bic.w	r2, r2, #32
 80097da:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 0202 	bic.w	r2, r2, #2
 80097ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80097ec:	693a      	ldr	r2, [r7, #16]
 80097ee:	2164      	movs	r1, #100	@ 0x64
 80097f0:	6978      	ldr	r0, [r7, #20]
 80097f2:	f000 fac5 	bl	8009d80 <SPI_EndRxTxTransaction>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d005      	beq.n	8009808 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009800:	f043 0220 	orr.w	r2, r3, #32
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	2200      	movs	r2, #0
 800982a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800983c:	6978      	ldr	r0, [r7, #20]
 800983e:	f7ff ffa9 	bl	8009794 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009842:	e002      	b.n	800984a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009844:	6978      	ldr	r0, [r7, #20]
 8009846:	f016 f83b 	bl	801f8c0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800985e:	f7f8 fd95 	bl	800238c <HAL_GetTick>
 8009862:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009872:	d03c      	beq.n	80098ee <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0220 	bic.w	r2, r2, #32
 8009882:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10d      	bne.n	80098a8 <SPI_DMAReceiveCplt+0x58>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009894:	d108      	bne.n	80098a8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0203 	bic.w	r2, r2, #3
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	e007      	b.n	80098b8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0201 	bic.w	r2, r2, #1
 80098b6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	2164      	movs	r1, #100	@ 0x64
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 f9e3 	bl	8009c88 <SPI_EndRxTransaction>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2220      	movs	r2, #32
 80098cc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7ff ff54 	bl	8009794 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80098ec:	e002      	b.n	80098f4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f016 f808 	bl	801f904 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009906:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009908:	f7f8 fd40 	bl	800238c <HAL_GetTick>
 800990c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800991c:	d030      	beq.n	8009980 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0220 	bic.w	r2, r2, #32
 800992c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	2164      	movs	r1, #100	@ 0x64
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 fa24 	bl	8009d80 <SPI_EndRxTxTransaction>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d005      	beq.n	800994a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009942:	f043 0220 	orr.w	r2, r3, #32
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f022 0203 	bic.w	r2, r2, #3
 8009958:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7ff ff0b 	bl	8009794 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800997e:	e002      	b.n	8009986 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f7ff fedf 	bl	8009744 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009998:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff fedc 	bl	8009758 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff fed8 	bl	800976c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7ff fed4 	bl	8009780 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099d8:	bf00      	nop
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f022 0203 	bic.w	r2, r2, #3
 80099fc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a02:	f043 0210 	orr.w	r2, r3, #16
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7ff febe 	bl	8009794 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a18:	bf00      	nop
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f7ff fea9 	bl	8009794 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	603b      	str	r3, [r7, #0]
 8009a58:	4613      	mov	r3, r2
 8009a5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a5c:	f7f8 fc96 	bl	800238c <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	4413      	add	r3, r2
 8009a6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a6c:	f7f8 fc8e 	bl	800238c <HAL_GetTick>
 8009a70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a72:	4b39      	ldr	r3, [pc, #228]	@ (8009b58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	015b      	lsls	r3, r3, #5
 8009a78:	0d1b      	lsrs	r3, r3, #20
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	fb02 f303 	mul.w	r3, r2, r3
 8009a80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a82:	e055      	b.n	8009b30 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a8a:	d051      	beq.n	8009b30 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a8c:	f7f8 fc7e 	bl	800238c <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	69fa      	ldr	r2, [r7, #28]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d902      	bls.n	8009aa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d13d      	bne.n	8009b1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009aba:	d111      	bne.n	8009ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ac4:	d004      	beq.n	8009ad0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ace:	d107      	bne.n	8009ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ade:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ae8:	d10f      	bne.n	8009b0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e018      	b.n	8009b50 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	e002      	b.n	8009b30 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689a      	ldr	r2, [r3, #8]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	4013      	ands	r3, r2
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	bf0c      	ite	eq
 8009b40:	2301      	moveq	r3, #1
 8009b42:	2300      	movne	r3, #0
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	461a      	mov	r2, r3
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d19a      	bne.n	8009a84 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20000000 	.word	0x20000000

08009b5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08a      	sub	sp, #40	@ 0x28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009b6e:	f7f8 fc0d 	bl	800238c <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009b7e:	f7f8 fc05 	bl	800238c <HAL_GetTick>
 8009b82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	330c      	adds	r3, #12
 8009b8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8009c84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4613      	mov	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	00da      	lsls	r2, r3, #3
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	0d1b      	lsrs	r3, r3, #20
 8009b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ba2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ba4:	e061      	b.n	8009c6a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009bac:	d107      	bne.n	8009bbe <SPI_WaitFifoStateUntilTimeout+0x62>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d104      	bne.n	8009bbe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bc4:	d051      	beq.n	8009c6a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009bc6:	f7f8 fbe1 	bl	800238c <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d902      	bls.n	8009bdc <SPI_WaitFifoStateUntilTimeout+0x80>
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d13d      	bne.n	8009c58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009bea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bf4:	d111      	bne.n	8009c1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bfe:	d004      	beq.n	8009c0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c08:	d107      	bne.n	8009c1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c22:	d10f      	bne.n	8009c44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e011      	b.n	8009c7c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d102      	bne.n	8009c64 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c62:	e002      	b.n	8009c6a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4013      	ands	r3, r2
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d195      	bne.n	8009ba6 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3728      	adds	r7, #40	@ 0x28
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20000000 	.word	0x20000000

08009c88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c9c:	d111      	bne.n	8009cc2 <SPI_EndRxTransaction+0x3a>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ca6:	d004      	beq.n	8009cb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cb0:	d107      	bne.n	8009cc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cca:	d112      	bne.n	8009cf2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2180      	movs	r1, #128	@ 0x80
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f7ff feb8 	bl	8009a4c <SPI_WaitFlagStateUntilTimeout>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d021      	beq.n	8009d26 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ce6:	f043 0220 	orr.w	r2, r3, #32
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e03d      	b.n	8009d6e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009cf2:	4b21      	ldr	r3, [pc, #132]	@ (8009d78 <SPI_EndRxTransaction+0xf0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a21      	ldr	r2, [pc, #132]	@ (8009d7c <SPI_EndRxTransaction+0xf4>)
 8009cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfc:	0d5b      	lsrs	r3, r3, #21
 8009cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d02:	fb02 f303 	mul.w	r3, r2, r3
 8009d06:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d1e:	2b80      	cmp	r3, #128	@ 0x80
 8009d20:	d0f2      	beq.n	8009d08 <SPI_EndRxTransaction+0x80>
 8009d22:	e000      	b.n	8009d26 <SPI_EndRxTransaction+0x9e>
        break;
 8009d24:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d2e:	d11d      	bne.n	8009d6c <SPI_EndRxTransaction+0xe4>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d38:	d004      	beq.n	8009d44 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d42:	d113      	bne.n	8009d6c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff ff03 	bl	8009b5c <SPI_WaitFifoStateUntilTimeout>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d007      	beq.n	8009d6c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d60:	f043 0220 	orr.w	r2, r3, #32
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e000      	b.n	8009d6e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000000 	.word	0x20000000
 8009d7c:	165e9f81 	.word	0x165e9f81

08009d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af02      	add	r7, sp, #8
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7ff fedf 	bl	8009b5c <SPI_WaitFifoStateUntilTimeout>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009da8:	f043 0220 	orr.w	r2, r3, #32
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e046      	b.n	8009e42 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009db4:	4b25      	ldr	r3, [pc, #148]	@ (8009e4c <SPI_EndRxTxTransaction+0xcc>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a25      	ldr	r2, [pc, #148]	@ (8009e50 <SPI_EndRxTxTransaction+0xd0>)
 8009dba:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbe:	0d5b      	lsrs	r3, r3, #21
 8009dc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009dc4:	fb02 f303 	mul.w	r3, r2, r3
 8009dc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009dd2:	d112      	bne.n	8009dfa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2180      	movs	r1, #128	@ 0x80
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f7ff fe34 	bl	8009a4c <SPI_WaitFlagStateUntilTimeout>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d016      	beq.n	8009e18 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dee:	f043 0220 	orr.w	r2, r3, #32
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e023      	b.n	8009e42 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00a      	beq.n	8009e16 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	3b01      	subs	r3, #1
 8009e04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e10:	2b80      	cmp	r3, #128	@ 0x80
 8009e12:	d0f2      	beq.n	8009dfa <SPI_EndRxTxTransaction+0x7a>
 8009e14:	e000      	b.n	8009e18 <SPI_EndRxTxTransaction+0x98>
        break;
 8009e16:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7ff fe99 	bl	8009b5c <SPI_WaitFifoStateUntilTimeout>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e34:	f043 0220 	orr.w	r2, r3, #32
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e000      	b.n	8009e42 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20000000 	.word	0x20000000
 8009e50:	165e9f81 	.word	0x165e9f81

08009e54 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af02      	add	r7, sp, #8
 8009e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e6a:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009e6c:	4b27      	ldr	r3, [pc, #156]	@ (8009f0c <SPI_AbortRx_ISR+0xb8>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a27      	ldr	r2, [pc, #156]	@ (8009f10 <SPI_AbortRx_ISR+0xbc>)
 8009e72:	fba2 2303 	umull	r2, r3, r2, r3
 8009e76:	0a5b      	lsrs	r3, r3, #9
 8009e78:	2264      	movs	r2, #100	@ 0x64
 8009e7a:	fb02 f303 	mul.w	r3, r2, r3
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e8e:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009ea2:	e009      	b.n	8009eb8 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb4:	2b40      	cmp	r3, #64	@ 0x40
 8009eb6:	d0eb      	beq.n	8009e90 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009eb8:	f7f8 fa68 	bl	800238c <HAL_GetTick>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	2364      	movs	r3, #100	@ 0x64
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2180      	movs	r1, #128	@ 0x80
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff fdc0 	bl	8009a4c <SPI_WaitFlagStateUntilTimeout>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2240      	movs	r2, #64	@ 0x40
 8009ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009ed8:	f7f8 fa58 	bl	800238c <HAL_GetTick>
 8009edc:	4603      	mov	r3, r0
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	2364      	movs	r3, #100	@ 0x64
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fe37 	bl	8009b5c <SPI_WaitFifoStateUntilTimeout>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2240      	movs	r2, #64	@ 0x40
 8009ef8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2207      	movs	r2, #7
 8009efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000000 	.word	0x20000000
 8009f10:	057619f1 	.word	0x057619f1

08009f14 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af02      	add	r7, sp, #8
 8009f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009f1c:	4b4c      	ldr	r3, [pc, #304]	@ (800a050 <SPI_AbortTx_ISR+0x13c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a4c      	ldr	r2, [pc, #304]	@ (800a054 <SPI_AbortTx_ISR+0x140>)
 8009f22:	fba2 2303 	umull	r2, r3, r2, r3
 8009f26:	0a5b      	lsrs	r3, r3, #9
 8009f28:	2264      	movs	r2, #100	@ 0x64
 8009f2a:	fb02 f303 	mul.w	r3, r2, r3
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f3e:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d106      	bne.n	8009f54 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009f52:	e009      	b.n	8009f68 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f64:	2b80      	cmp	r3, #128	@ 0x80
 8009f66:	d0eb      	beq.n	8009f40 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009f68:	f7f8 fa10 	bl	800238c <HAL_GetTick>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	2164      	movs	r1, #100	@ 0x64
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff ff04 	bl	8009d80 <SPI_EndRxTxTransaction>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d002      	beq.n	8009f84 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2240      	movs	r2, #64	@ 0x40
 8009f82:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f92:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009f94:	f7f8 f9fa 	bl	800238c <HAL_GetTick>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2364      	movs	r3, #100	@ 0x64
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff fdd9 	bl	8009b5c <SPI_WaitFifoStateUntilTimeout>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2240      	movs	r2, #64	@ 0x40
 8009fb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc0:	2b40      	cmp	r3, #64	@ 0x40
 8009fc2:	d13c      	bne.n	800a03e <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fd2:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009fe6:	e009      	b.n	8009ffc <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff8:	2b40      	cmp	r3, #64	@ 0x40
 8009ffa:	d0eb      	beq.n	8009fd4 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009ffc:	f7f8 f9c6 	bl	800238c <HAL_GetTick>
 800a000:	4603      	mov	r3, r0
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2364      	movs	r3, #100	@ 0x64
 800a006:	2200      	movs	r2, #0
 800a008:	2180      	movs	r1, #128	@ 0x80
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff fd1e 	bl	8009a4c <SPI_WaitFlagStateUntilTimeout>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2240      	movs	r2, #64	@ 0x40
 800a01a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a01c:	f7f8 f9b6 	bl	800238c <HAL_GetTick>
 800a020:	4603      	mov	r3, r0
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	2364      	movs	r3, #100	@ 0x64
 800a026:	2200      	movs	r2, #0
 800a028:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff fd95 	bl	8009b5c <SPI_WaitFifoStateUntilTimeout>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2240      	movs	r2, #64	@ 0x40
 800a03c:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2207      	movs	r2, #7
 800a042:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000000 	.word	0x20000000
 800a054:	057619f1 	.word	0x057619f1

0800a058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e049      	b.n	800a0fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7f7 fdae 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	4619      	mov	r1, r3
 800a096:	4610      	mov	r0, r2
 800a098:	f000 fb40 	bl	800a71c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d001      	beq.n	800a120 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e04c      	b.n	800a1ba <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2202      	movs	r2, #2
 800a124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a26      	ldr	r2, [pc, #152]	@ (800a1c8 <HAL_TIM_Base_Start+0xc0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d022      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a13a:	d01d      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a22      	ldr	r2, [pc, #136]	@ (800a1cc <HAL_TIM_Base_Start+0xc4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d018      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a21      	ldr	r2, [pc, #132]	@ (800a1d0 <HAL_TIM_Base_Start+0xc8>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d013      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a1f      	ldr	r2, [pc, #124]	@ (800a1d4 <HAL_TIM_Base_Start+0xcc>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d00e      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1e      	ldr	r2, [pc, #120]	@ (800a1d8 <HAL_TIM_Base_Start+0xd0>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d009      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1c      	ldr	r2, [pc, #112]	@ (800a1dc <HAL_TIM_Base_Start+0xd4>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d004      	beq.n	800a178 <HAL_TIM_Base_Start+0x70>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a1b      	ldr	r2, [pc, #108]	@ (800a1e0 <HAL_TIM_Base_Start+0xd8>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d115      	bne.n	800a1a4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	689a      	ldr	r2, [r3, #8]
 800a17e:	4b19      	ldr	r3, [pc, #100]	@ (800a1e4 <HAL_TIM_Base_Start+0xdc>)
 800a180:	4013      	ands	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b06      	cmp	r3, #6
 800a188:	d015      	beq.n	800a1b6 <HAL_TIM_Base_Start+0xae>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a190:	d011      	beq.n	800a1b6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f042 0201 	orr.w	r2, r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a2:	e008      	b.n	800a1b6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0201 	orr.w	r2, r2, #1
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	e000      	b.n	800a1b8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	40010000 	.word	0x40010000
 800a1cc:	40000400 	.word	0x40000400
 800a1d0:	40000800 	.word	0x40000800
 800a1d4:	40000c00 	.word	0x40000c00
 800a1d8:	40010400 	.word	0x40010400
 800a1dc:	40014000 	.word	0x40014000
 800a1e0:	40001800 	.word	0x40001800
 800a1e4:	00010007 	.word	0x00010007

0800a1e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6a1a      	ldr	r2, [r3, #32]
 800a1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a234 <HAL_TIM_Base_Stop+0x4c>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10f      	bne.n	800a21e <HAL_TIM_Base_Stop+0x36>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6a1a      	ldr	r2, [r3, #32]
 800a204:	f240 4344 	movw	r3, #1092	@ 0x444
 800a208:	4013      	ands	r3, r2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d107      	bne.n	800a21e <HAL_TIM_Base_Stop+0x36>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0201 	bic.w	r2, r2, #1
 800a21c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	00111111 	.word	0x00111111

0800a238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d001      	beq.n	800a250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e054      	b.n	800a2fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68da      	ldr	r2, [r3, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f042 0201 	orr.w	r2, r2, #1
 800a266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a26      	ldr	r2, [pc, #152]	@ (800a308 <HAL_TIM_Base_Start_IT+0xd0>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d022      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x80>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a27a:	d01d      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x80>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a22      	ldr	r2, [pc, #136]	@ (800a30c <HAL_TIM_Base_Start_IT+0xd4>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d018      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x80>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a21      	ldr	r2, [pc, #132]	@ (800a310 <HAL_TIM_Base_Start_IT+0xd8>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d013      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x80>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a1f      	ldr	r2, [pc, #124]	@ (800a314 <HAL_TIM_Base_Start_IT+0xdc>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00e      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x80>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a1e      	ldr	r2, [pc, #120]	@ (800a318 <HAL_TIM_Base_Start_IT+0xe0>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d009      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x80>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a1c      	ldr	r2, [pc, #112]	@ (800a31c <HAL_TIM_Base_Start_IT+0xe4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d004      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0x80>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1b      	ldr	r2, [pc, #108]	@ (800a320 <HAL_TIM_Base_Start_IT+0xe8>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d115      	bne.n	800a2e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	4b19      	ldr	r3, [pc, #100]	@ (800a324 <HAL_TIM_Base_Start_IT+0xec>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b06      	cmp	r3, #6
 800a2c8:	d015      	beq.n	800a2f6 <HAL_TIM_Base_Start_IT+0xbe>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2d0:	d011      	beq.n	800a2f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f042 0201 	orr.w	r2, r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e2:	e008      	b.n	800a2f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f042 0201 	orr.w	r2, r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	e000      	b.n	800a2f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	40010000 	.word	0x40010000
 800a30c:	40000400 	.word	0x40000400
 800a310:	40000800 	.word	0x40000800
 800a314:	40000c00 	.word	0x40000c00
 800a318:	40010400 	.word	0x40010400
 800a31c:	40014000 	.word	0x40014000
 800a320:	40001800 	.word	0x40001800
 800a324:	00010007 	.word	0x00010007

0800a328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d020      	beq.n	800a38c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d01b      	beq.n	800a38c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f06f 0202 	mvn.w	r2, #2
 800a35c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	f003 0303 	and.w	r3, r3, #3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f9b4 	bl	800a6e0 <HAL_TIM_IC_CaptureCallback>
 800a378:	e005      	b.n	800a386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f9a6 	bl	800a6cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f9b7 	bl	800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f003 0304 	and.w	r3, r3, #4
 800a392:	2b00      	cmp	r3, #0
 800a394:	d020      	beq.n	800a3d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d01b      	beq.n	800a3d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f06f 0204 	mvn.w	r2, #4
 800a3a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f98e 	bl	800a6e0 <HAL_TIM_IC_CaptureCallback>
 800a3c4:	e005      	b.n	800a3d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f980 	bl	800a6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f991 	bl	800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d020      	beq.n	800a424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f003 0308 	and.w	r3, r3, #8
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01b      	beq.n	800a424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f06f 0208 	mvn.w	r2, #8
 800a3f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f968 	bl	800a6e0 <HAL_TIM_IC_CaptureCallback>
 800a410:	e005      	b.n	800a41e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f95a 	bl	800a6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f96b 	bl	800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f003 0310 	and.w	r3, r3, #16
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d020      	beq.n	800a470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f003 0310 	and.w	r3, r3, #16
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01b      	beq.n	800a470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 0210 	mvn.w	r2, #16
 800a440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2208      	movs	r2, #8
 800a446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f942 	bl	800a6e0 <HAL_TIM_IC_CaptureCallback>
 800a45c:	e005      	b.n	800a46a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f934 	bl	800a6cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f945 	bl	800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00c      	beq.n	800a494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d007      	beq.n	800a494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f06f 0201 	mvn.w	r2, #1
 800a48c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7f6 feae 	bl	80011f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d104      	bne.n	800a4a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00c      	beq.n	800a4c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d007      	beq.n	800a4c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a4ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fb05 	bl	800aacc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00c      	beq.n	800a4e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d007      	beq.n	800a4e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a4de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fafd 	bl	800aae0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00c      	beq.n	800a50a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d007      	beq.n	800a50a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f8ff 	bl	800a708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f003 0320 	and.w	r3, r3, #32
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00c      	beq.n	800a52e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d007      	beq.n	800a52e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f06f 0220 	mvn.w	r2, #32
 800a526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fac5 	bl	800aab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a52e:	bf00      	nop
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d101      	bne.n	800a554 <HAL_TIM_ConfigClockSource+0x1c>
 800a550:	2302      	movs	r3, #2
 800a552:	e0b4      	b.n	800a6be <HAL_TIM_ConfigClockSource+0x186>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	4b56      	ldr	r3, [pc, #344]	@ (800a6c8 <HAL_TIM_ConfigClockSource+0x190>)
 800a570:	4013      	ands	r3, r2
 800a572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a57a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a58c:	d03e      	beq.n	800a60c <HAL_TIM_ConfigClockSource+0xd4>
 800a58e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a592:	f200 8087 	bhi.w	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a59a:	f000 8086 	beq.w	800a6aa <HAL_TIM_ConfigClockSource+0x172>
 800a59e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5a2:	d87f      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5a4:	2b70      	cmp	r3, #112	@ 0x70
 800a5a6:	d01a      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0xa6>
 800a5a8:	2b70      	cmp	r3, #112	@ 0x70
 800a5aa:	d87b      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5ac:	2b60      	cmp	r3, #96	@ 0x60
 800a5ae:	d050      	beq.n	800a652 <HAL_TIM_ConfigClockSource+0x11a>
 800a5b0:	2b60      	cmp	r3, #96	@ 0x60
 800a5b2:	d877      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5b4:	2b50      	cmp	r3, #80	@ 0x50
 800a5b6:	d03c      	beq.n	800a632 <HAL_TIM_ConfigClockSource+0xfa>
 800a5b8:	2b50      	cmp	r3, #80	@ 0x50
 800a5ba:	d873      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5bc:	2b40      	cmp	r3, #64	@ 0x40
 800a5be:	d058      	beq.n	800a672 <HAL_TIM_ConfigClockSource+0x13a>
 800a5c0:	2b40      	cmp	r3, #64	@ 0x40
 800a5c2:	d86f      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5c4:	2b30      	cmp	r3, #48	@ 0x30
 800a5c6:	d064      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x15a>
 800a5c8:	2b30      	cmp	r3, #48	@ 0x30
 800a5ca:	d86b      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5cc:	2b20      	cmp	r3, #32
 800a5ce:	d060      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x15a>
 800a5d0:	2b20      	cmp	r3, #32
 800a5d2:	d867      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d05c      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x15a>
 800a5d8:	2b10      	cmp	r3, #16
 800a5da:	d05a      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x15a>
 800a5dc:	e062      	b.n	800a6a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5ee:	f000 f9b5 	bl	800a95c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	609a      	str	r2, [r3, #8]
      break;
 800a60a:	e04f      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a61c:	f000 f99e 	bl	800a95c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a62e:	609a      	str	r2, [r3, #8]
      break;
 800a630:	e03c      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a63e:	461a      	mov	r2, r3
 800a640:	f000 f912 	bl	800a868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2150      	movs	r1, #80	@ 0x50
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 f96b 	bl	800a926 <TIM_ITRx_SetConfig>
      break;
 800a650:	e02c      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a65e:	461a      	mov	r2, r3
 800a660:	f000 f931 	bl	800a8c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2160      	movs	r1, #96	@ 0x60
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 f95b 	bl	800a926 <TIM_ITRx_SetConfig>
      break;
 800a670:	e01c      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67e:	461a      	mov	r2, r3
 800a680:	f000 f8f2 	bl	800a868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2140      	movs	r1, #64	@ 0x40
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 f94b 	bl	800a926 <TIM_ITRx_SetConfig>
      break;
 800a690:	e00c      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4619      	mov	r1, r3
 800a69c:	4610      	mov	r0, r2
 800a69e:	f000 f942 	bl	800a926 <TIM_ITRx_SetConfig>
      break;
 800a6a2:	e003      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6a8:	e000      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	fffeff88 	.word	0xfffeff88

0800a6cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a43      	ldr	r2, [pc, #268]	@ (800a83c <TIM_Base_SetConfig+0x120>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d013      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a73a:	d00f      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a40      	ldr	r2, [pc, #256]	@ (800a840 <TIM_Base_SetConfig+0x124>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d00b      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a3f      	ldr	r2, [pc, #252]	@ (800a844 <TIM_Base_SetConfig+0x128>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d007      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a3e      	ldr	r2, [pc, #248]	@ (800a848 <TIM_Base_SetConfig+0x12c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d003      	beq.n	800a75c <TIM_Base_SetConfig+0x40>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a3d      	ldr	r2, [pc, #244]	@ (800a84c <TIM_Base_SetConfig+0x130>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d108      	bne.n	800a76e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a32      	ldr	r2, [pc, #200]	@ (800a83c <TIM_Base_SetConfig+0x120>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d02b      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a77c:	d027      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a2f      	ldr	r2, [pc, #188]	@ (800a840 <TIM_Base_SetConfig+0x124>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d023      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a2e      	ldr	r2, [pc, #184]	@ (800a844 <TIM_Base_SetConfig+0x128>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d01f      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a2d      	ldr	r2, [pc, #180]	@ (800a848 <TIM_Base_SetConfig+0x12c>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d01b      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a2c      	ldr	r2, [pc, #176]	@ (800a84c <TIM_Base_SetConfig+0x130>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d017      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a2b      	ldr	r2, [pc, #172]	@ (800a850 <TIM_Base_SetConfig+0x134>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d013      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a2a      	ldr	r2, [pc, #168]	@ (800a854 <TIM_Base_SetConfig+0x138>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d00f      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a29      	ldr	r2, [pc, #164]	@ (800a858 <TIM_Base_SetConfig+0x13c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d00b      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a28      	ldr	r2, [pc, #160]	@ (800a85c <TIM_Base_SetConfig+0x140>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d007      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a27      	ldr	r2, [pc, #156]	@ (800a860 <TIM_Base_SetConfig+0x144>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d003      	beq.n	800a7ce <TIM_Base_SetConfig+0xb2>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a26      	ldr	r2, [pc, #152]	@ (800a864 <TIM_Base_SetConfig+0x148>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d108      	bne.n	800a7e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a0e      	ldr	r2, [pc, #56]	@ (800a83c <TIM_Base_SetConfig+0x120>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d003      	beq.n	800a80e <TIM_Base_SetConfig+0xf2>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a10      	ldr	r2, [pc, #64]	@ (800a84c <TIM_Base_SetConfig+0x130>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d103      	bne.n	800a816 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	691a      	ldr	r2, [r3, #16]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f043 0204 	orr.w	r2, r3, #4
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	601a      	str	r2, [r3, #0]
}
 800a82e:	bf00      	nop
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	40010000 	.word	0x40010000
 800a840:	40000400 	.word	0x40000400
 800a844:	40000800 	.word	0x40000800
 800a848:	40000c00 	.word	0x40000c00
 800a84c:	40010400 	.word	0x40010400
 800a850:	40014000 	.word	0x40014000
 800a854:	40014400 	.word	0x40014400
 800a858:	40014800 	.word	0x40014800
 800a85c:	40001800 	.word	0x40001800
 800a860:	40001c00 	.word	0x40001c00
 800a864:	40002000 	.word	0x40002000

0800a868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	f023 0201 	bic.w	r2, r3, #1
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f023 030a 	bic.w	r3, r3, #10
 800a8a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	621a      	str	r2, [r3, #32]
}
 800a8ba:	bf00      	nop
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b087      	sub	sp, #28
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	f023 0210 	bic.w	r2, r3, #16
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	031b      	lsls	r3, r3, #12
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a902:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	621a      	str	r2, [r3, #32]
}
 800a91a:	bf00      	nop
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a926:	b480      	push	{r7}
 800a928:	b085      	sub	sp, #20
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a93c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4313      	orrs	r3, r2
 800a944:	f043 0307 	orr.w	r3, r3, #7
 800a948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	609a      	str	r2, [r3, #8]
}
 800a950:	bf00      	nop
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	021a      	lsls	r2, r3, #8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	431a      	orrs	r2, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	4313      	orrs	r3, r2
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	609a      	str	r2, [r3, #8]
}
 800a990:	bf00      	nop
 800a992:	371c      	adds	r7, #28
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d101      	bne.n	800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e06d      	b.n	800aa90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a30      	ldr	r2, [pc, #192]	@ (800aa9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d004      	beq.n	800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a2f      	ldr	r2, [pc, #188]	@ (800aaa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d108      	bne.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a9ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a20      	ldr	r2, [pc, #128]	@ (800aa9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d022      	beq.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa26:	d01d      	beq.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d018      	beq.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a1c      	ldr	r2, [pc, #112]	@ (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d013      	beq.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a1a      	ldr	r2, [pc, #104]	@ (800aaac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d00e      	beq.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a15      	ldr	r2, [pc, #84]	@ (800aaa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d009      	beq.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a16      	ldr	r2, [pc, #88]	@ (800aab0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d004      	beq.n	800aa64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a15      	ldr	r2, [pc, #84]	@ (800aab4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d10c      	bne.n	800aa7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	40010000 	.word	0x40010000
 800aaa0:	40010400 	.word	0x40010400
 800aaa4:	40000400 	.word	0x40000400
 800aaa8:	40000800 	.word	0x40000800
 800aaac:	40000c00 	.word	0x40000c00
 800aab0:	40014000 	.word	0x40014000
 800aab4:	40001800 	.word	0x40001800

0800aab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e040      	b.n	800ab88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7f7 f95e 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2224      	movs	r2, #36	@ 0x24
 800ab20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f022 0201 	bic.w	r2, r2, #1
 800ab30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d002      	beq.n	800ab40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fece 	bl	800b8dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fc67 	bl	800b414 <UART_SetConfig>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d101      	bne.n	800ab50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e01b      	b.n	800ab88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	689a      	ldr	r2, [r3, #8]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0201 	orr.w	r2, r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 ff4d 	bl	800ba20 <UART_CheckIdleState>
 800ab86:	4603      	mov	r3, r0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	@ 0x28
 800ab94:	af02      	add	r7, sp, #8
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	603b      	str	r3, [r7, #0]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aba4:	2b20      	cmp	r3, #32
 800aba6:	d177      	bne.n	800ac98 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <HAL_UART_Transmit+0x24>
 800abae:	88fb      	ldrh	r3, [r7, #6]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e070      	b.n	800ac9a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2221      	movs	r2, #33	@ 0x21
 800abc4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abc6:	f7f7 fbe1 	bl	800238c <HAL_GetTick>
 800abca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	88fa      	ldrh	r2, [r7, #6]
 800abd0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	88fa      	ldrh	r2, [r7, #6]
 800abd8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abe4:	d108      	bne.n	800abf8 <HAL_UART_Transmit+0x68>
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d104      	bne.n	800abf8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800abee:	2300      	movs	r3, #0
 800abf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	e003      	b.n	800ac00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ac00:	e02f      	b.n	800ac62 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2180      	movs	r1, #128	@ 0x80
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 ff5e 	bl	800bace <UART_WaitOnFlagUntilTimeout>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d004      	beq.n	800ac22 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ac1e:	2303      	movs	r3, #3
 800ac20:	e03b      	b.n	800ac9a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10b      	bne.n	800ac40 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	3302      	adds	r3, #2
 800ac3c:	61bb      	str	r3, [r7, #24]
 800ac3e:	e007      	b.n	800ac50 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	781a      	ldrb	r2, [r3, #0]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1c9      	bne.n	800ac02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2200      	movs	r2, #0
 800ac76:	2140      	movs	r1, #64	@ 0x40
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 ff28 	bl	800bace <UART_WaitOnFlagUntilTimeout>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2220      	movs	r2, #32
 800ac88:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e005      	b.n	800ac9a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2220      	movs	r2, #32
 800ac92:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	e000      	b.n	800ac9a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ac98:	2302      	movs	r3, #2
  }
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b08b      	sub	sp, #44	@ 0x2c
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	d147      	bne.n	800ad4a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <HAL_UART_Transmit_IT+0x22>
 800acc0:	88fb      	ldrh	r3, [r7, #6]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e040      	b.n	800ad4c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	88fa      	ldrh	r2, [r7, #6]
 800acd4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	88fa      	ldrh	r2, [r7, #6]
 800acdc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2221      	movs	r2, #33	@ 0x21
 800acf2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acfc:	d107      	bne.n	800ad0e <HAL_UART_Transmit_IT+0x6a>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d103      	bne.n	800ad0e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	4a13      	ldr	r2, [pc, #76]	@ (800ad58 <HAL_UART_Transmit_IT+0xb4>)
 800ad0a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ad0c:	e002      	b.n	800ad14 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	4a12      	ldr	r2, [pc, #72]	@ (800ad5c <HAL_UART_Transmit_IT+0xb8>)
 800ad12:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
 800ad20:	613b      	str	r3, [r7, #16]
   return(result);
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad28:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad32:	623b      	str	r3, [r7, #32]
 800ad34:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad36:	69f9      	ldr	r1, [r7, #28]
 800ad38:	6a3a      	ldr	r2, [r7, #32]
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e6      	bne.n	800ad14 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e000      	b.n	800ad4c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800ad4a:	2302      	movs	r3, #2
  }
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	372c      	adds	r7, #44	@ 0x2c
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	0800c125 	.word	0x0800c125
 800ad5c:	0800c06f 	.word	0x0800c06f

0800ad60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08a      	sub	sp, #40	@ 0x28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	4613      	mov	r3, r2
 800ad6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d132      	bne.n	800adde <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <HAL_UART_Receive_DMA+0x24>
 800ad7e:	88fb      	ldrh	r3, [r7, #6]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e02b      	b.n	800ade0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d018      	beq.n	800adce <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	e853 3f00 	ldrex	r3, [r3]
 800ada8:	613b      	str	r3, [r7, #16]
   return(result);
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800adb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adba:	623b      	str	r3, [r7, #32]
 800adbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	69f9      	ldr	r1, [r7, #28]
 800adc0:	6a3a      	ldr	r2, [r7, #32]
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	61bb      	str	r3, [r7, #24]
   return(result);
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e6      	bne.n	800ad9c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800adce:	88fb      	ldrh	r3, [r7, #6]
 800add0:	461a      	mov	r2, r3
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 fee7 	bl	800bba8 <UART_Start_Receive_DMA>
 800adda:	4603      	mov	r3, r0
 800addc:	e000      	b.n	800ade0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800adde:	2302      	movs	r3, #2
  }
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3728      	adds	r7, #40	@ 0x28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b0ba      	sub	sp, #232	@ 0xe8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ae12:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ae16:	4013      	ands	r3, r2
 800ae18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ae1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d115      	bne.n	800ae50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae28:	f003 0320 	and.w	r3, r3, #32
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00f      	beq.n	800ae50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f000 82b1 	beq.w	800b3a8 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	4798      	blx	r3
      }
      return;
 800ae4e:	e2ab      	b.n	800b3a8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f000 8117 	beq.w	800b088 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ae66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ae6a:	4b85      	ldr	r3, [pc, #532]	@ (800b080 <HAL_UART_IRQHandler+0x298>)
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f000 810a 	beq.w	800b088 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d011      	beq.n	800aea4 <HAL_UART_IRQHandler+0xbc>
 800ae80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00b      	beq.n	800aea4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2201      	movs	r2, #1
 800ae92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae9a:	f043 0201 	orr.w	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aea8:	f003 0302 	and.w	r3, r3, #2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d011      	beq.n	800aed4 <HAL_UART_IRQHandler+0xec>
 800aeb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aeb4:	f003 0301 	and.w	r3, r3, #1
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00b      	beq.n	800aed4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2202      	movs	r2, #2
 800aec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aeca:	f043 0204 	orr.w	r2, r3, #4
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aed8:	f003 0304 	and.w	r3, r3, #4
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d011      	beq.n	800af04 <HAL_UART_IRQHandler+0x11c>
 800aee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00b      	beq.n	800af04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2204      	movs	r2, #4
 800aef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aefa:	f043 0202 	orr.w	r2, r3, #2
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800af04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af08:	f003 0308 	and.w	r3, r3, #8
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d017      	beq.n	800af40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af14:	f003 0320 	and.w	r3, r3, #32
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d105      	bne.n	800af28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800af1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00b      	beq.n	800af40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2208      	movs	r2, #8
 800af2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af36:	f043 0208 	orr.w	r2, r3, #8
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d012      	beq.n	800af72 <HAL_UART_IRQHandler+0x18a>
 800af4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00c      	beq.n	800af72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af68:	f043 0220 	orr.w	r2, r3, #32
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 8217 	beq.w	800b3ac <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af82:	f003 0320 	and.w	r3, r3, #32
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00d      	beq.n	800afa6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af8e:	f003 0320 	and.w	r3, r3, #32
 800af92:	2b00      	cmp	r3, #0
 800af94:	d007      	beq.n	800afa6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d003      	beq.n	800afa6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afba:	2b40      	cmp	r3, #64	@ 0x40
 800afbc:	d005      	beq.n	800afca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800afbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d04f      	beq.n	800b06a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 feb2 	bl	800bd34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afda:	2b40      	cmp	r3, #64	@ 0x40
 800afdc:	d141      	bne.n	800b062 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3308      	adds	r3, #8
 800afe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afec:	e853 3f00 	ldrex	r3, [r3]
 800aff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800affc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3308      	adds	r3, #8
 800b006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b00a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b00e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1d9      	bne.n	800afde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d013      	beq.n	800b05a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b036:	4a13      	ldr	r2, [pc, #76]	@ (800b084 <HAL_UART_IRQHandler+0x29c>)
 800b038:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b03e:	4618      	mov	r0, r3
 800b040:	f7f8 fac4 	bl	80035cc <HAL_DMA_Abort_IT>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d017      	beq.n	800b07a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b04e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b054:	4610      	mov	r0, r2
 800b056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b058:	e00f      	b.n	800b07a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f9c4 	bl	800b3e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b060:	e00b      	b.n	800b07a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f9c0 	bl	800b3e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b068:	e007      	b.n	800b07a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9bc 	bl	800b3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b078:	e198      	b.n	800b3ac <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b07a:	bf00      	nop
    return;
 800b07c:	e196      	b.n	800b3ac <HAL_UART_IRQHandler+0x5c4>
 800b07e:	bf00      	nop
 800b080:	04000120 	.word	0x04000120
 800b084:	0800c04b 	.word	0x0800c04b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	f040 8166 	bne.w	800b35e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b096:	f003 0310 	and.w	r3, r3, #16
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 815f 	beq.w	800b35e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0a4:	f003 0310 	and.w	r3, r3, #16
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 8158 	beq.w	800b35e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2210      	movs	r2, #16
 800b0b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c0:	2b40      	cmp	r3, #64	@ 0x40
 800b0c2:	f040 80d0 	bne.w	800b266 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f000 80ab 	beq.w	800b232 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b0e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	f080 80a3 	bcs.w	800b232 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0fa:	69db      	ldr	r3, [r3, #28]
 800b0fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b100:	f000 8086 	beq.w	800b210 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b118:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b11c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b120:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	461a      	mov	r2, r3
 800b12a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b12e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b132:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b136:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b13a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b13e:	e841 2300 	strex	r3, r2, [r1]
 800b142:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1da      	bne.n	800b104 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3308      	adds	r3, #8
 800b154:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b156:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b158:	e853 3f00 	ldrex	r3, [r3]
 800b15c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b15e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b160:	f023 0301 	bic.w	r3, r3, #1
 800b164:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3308      	adds	r3, #8
 800b16e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b172:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b176:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b17a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b17e:	e841 2300 	strex	r3, r2, [r1]
 800b182:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1e1      	bne.n	800b14e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3308      	adds	r3, #8
 800b190:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b194:	e853 3f00 	ldrex	r3, [r3]
 800b198:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b19a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b19c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	3308      	adds	r3, #8
 800b1aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b1ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b1b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b1b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b1b6:	e841 2300 	strex	r3, r2, [r1]
 800b1ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b1bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1e3      	bne.n	800b18a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1e0:	f023 0310 	bic.w	r3, r3, #16
 800b1e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b1f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e4      	bne.n	800b1d0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f8 f96e 	bl	80034ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b222:	b29b      	uxth	r3, r3
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	b29b      	uxth	r3, r3
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f8e6 	bl	800b3fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b230:	e0be      	b.n	800b3b0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b238:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b23c:	429a      	cmp	r2, r3
 800b23e:	f040 80b7 	bne.w	800b3b0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b246:	69db      	ldr	r3, [r3, #28]
 800b248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b24c:	f040 80b0 	bne.w	800b3b0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2202      	movs	r2, #2
 800b254:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b25c:	4619      	mov	r1, r3
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 f8cc 	bl	800b3fc <HAL_UARTEx_RxEventCallback>
      return;
 800b264:	e0a4      	b.n	800b3b0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b272:	b29b      	uxth	r3, r3
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b280:	b29b      	uxth	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 8096 	beq.w	800b3b4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800b288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8091 	beq.w	800b3b4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29a:	e853 3f00 	ldrex	r3, [r3]
 800b29e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b2b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b2ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b2bc:	e841 2300 	strex	r3, r2, [r1]
 800b2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1e4      	bne.n	800b292 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d2:	e853 3f00 	ldrex	r3, [r3]
 800b2d6:	623b      	str	r3, [r7, #32]
   return(result);
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	f023 0301 	bic.w	r3, r3, #1
 800b2de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b2ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e3      	bne.n	800b2c8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2220      	movs	r2, #32
 800b304:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	e853 3f00 	ldrex	r3, [r3]
 800b320:	60fb      	str	r3, [r7, #12]
   return(result);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f023 0310 	bic.w	r3, r3, #16
 800b328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	461a      	mov	r2, r3
 800b332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b336:	61fb      	str	r3, [r7, #28]
 800b338:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	69b9      	ldr	r1, [r7, #24]
 800b33c:	69fa      	ldr	r2, [r7, #28]
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	617b      	str	r3, [r7, #20]
   return(result);
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e4      	bne.n	800b314 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2202      	movs	r2, #2
 800b34e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b354:	4619      	mov	r1, r3
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 f850 	bl	800b3fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b35c:	e02a      	b.n	800b3b4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00e      	beq.n	800b388 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b36e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b372:	2b00      	cmp	r3, #0
 800b374:	d008      	beq.n	800b388 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d01c      	beq.n	800b3b8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
    }
    return;
 800b386:	e017      	b.n	800b3b8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d012      	beq.n	800b3ba <HAL_UART_IRQHandler+0x5d2>
 800b394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00c      	beq.n	800b3ba <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 ff1f 	bl	800c1e4 <UART_EndTransmit_IT>
    return;
 800b3a6:	e008      	b.n	800b3ba <HAL_UART_IRQHandler+0x5d2>
      return;
 800b3a8:	bf00      	nop
 800b3aa:	e006      	b.n	800b3ba <HAL_UART_IRQHandler+0x5d2>
    return;
 800b3ac:	bf00      	nop
 800b3ae:	e004      	b.n	800b3ba <HAL_UART_IRQHandler+0x5d2>
      return;
 800b3b0:	bf00      	nop
 800b3b2:	e002      	b.n	800b3ba <HAL_UART_IRQHandler+0x5d2>
      return;
 800b3b4:	bf00      	nop
 800b3b6:	e000      	b.n	800b3ba <HAL_UART_IRQHandler+0x5d2>
    return;
 800b3b8:	bf00      	nop
  }

}
 800b3ba:	37e8      	adds	r7, #232	@ 0xe8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	431a      	orrs	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	69db      	ldr	r3, [r3, #28]
 800b434:	4313      	orrs	r3, r2
 800b436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	4ba6      	ldr	r3, [pc, #664]	@ (800b6d8 <UART_SetConfig+0x2c4>)
 800b440:	4013      	ands	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	6812      	ldr	r2, [r2, #0]
 800b446:	6979      	ldr	r1, [r7, #20]
 800b448:	430b      	orrs	r3, r1
 800b44a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68da      	ldr	r2, [r3, #12]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	430a      	orrs	r2, r1
 800b460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a1b      	ldr	r3, [r3, #32]
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	4313      	orrs	r3, r2
 800b470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	697a      	ldr	r2, [r7, #20]
 800b482:	430a      	orrs	r2, r1
 800b484:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a94      	ldr	r2, [pc, #592]	@ (800b6dc <UART_SetConfig+0x2c8>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d120      	bne.n	800b4d2 <UART_SetConfig+0xbe>
 800b490:	4b93      	ldr	r3, [pc, #588]	@ (800b6e0 <UART_SetConfig+0x2cc>)
 800b492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d816      	bhi.n	800b4cc <UART_SetConfig+0xb8>
 800b49e:	a201      	add	r2, pc, #4	@ (adr r2, 800b4a4 <UART_SetConfig+0x90>)
 800b4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a4:	0800b4b5 	.word	0x0800b4b5
 800b4a8:	0800b4c1 	.word	0x0800b4c1
 800b4ac:	0800b4bb 	.word	0x0800b4bb
 800b4b0:	0800b4c7 	.word	0x0800b4c7
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	77fb      	strb	r3, [r7, #31]
 800b4b8:	e150      	b.n	800b75c <UART_SetConfig+0x348>
 800b4ba:	2302      	movs	r3, #2
 800b4bc:	77fb      	strb	r3, [r7, #31]
 800b4be:	e14d      	b.n	800b75c <UART_SetConfig+0x348>
 800b4c0:	2304      	movs	r3, #4
 800b4c2:	77fb      	strb	r3, [r7, #31]
 800b4c4:	e14a      	b.n	800b75c <UART_SetConfig+0x348>
 800b4c6:	2308      	movs	r3, #8
 800b4c8:	77fb      	strb	r3, [r7, #31]
 800b4ca:	e147      	b.n	800b75c <UART_SetConfig+0x348>
 800b4cc:	2310      	movs	r3, #16
 800b4ce:	77fb      	strb	r3, [r7, #31]
 800b4d0:	e144      	b.n	800b75c <UART_SetConfig+0x348>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a83      	ldr	r2, [pc, #524]	@ (800b6e4 <UART_SetConfig+0x2d0>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d132      	bne.n	800b542 <UART_SetConfig+0x12e>
 800b4dc:	4b80      	ldr	r3, [pc, #512]	@ (800b6e0 <UART_SetConfig+0x2cc>)
 800b4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4e2:	f003 030c 	and.w	r3, r3, #12
 800b4e6:	2b0c      	cmp	r3, #12
 800b4e8:	d828      	bhi.n	800b53c <UART_SetConfig+0x128>
 800b4ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b4f0 <UART_SetConfig+0xdc>)
 800b4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f0:	0800b525 	.word	0x0800b525
 800b4f4:	0800b53d 	.word	0x0800b53d
 800b4f8:	0800b53d 	.word	0x0800b53d
 800b4fc:	0800b53d 	.word	0x0800b53d
 800b500:	0800b531 	.word	0x0800b531
 800b504:	0800b53d 	.word	0x0800b53d
 800b508:	0800b53d 	.word	0x0800b53d
 800b50c:	0800b53d 	.word	0x0800b53d
 800b510:	0800b52b 	.word	0x0800b52b
 800b514:	0800b53d 	.word	0x0800b53d
 800b518:	0800b53d 	.word	0x0800b53d
 800b51c:	0800b53d 	.word	0x0800b53d
 800b520:	0800b537 	.word	0x0800b537
 800b524:	2300      	movs	r3, #0
 800b526:	77fb      	strb	r3, [r7, #31]
 800b528:	e118      	b.n	800b75c <UART_SetConfig+0x348>
 800b52a:	2302      	movs	r3, #2
 800b52c:	77fb      	strb	r3, [r7, #31]
 800b52e:	e115      	b.n	800b75c <UART_SetConfig+0x348>
 800b530:	2304      	movs	r3, #4
 800b532:	77fb      	strb	r3, [r7, #31]
 800b534:	e112      	b.n	800b75c <UART_SetConfig+0x348>
 800b536:	2308      	movs	r3, #8
 800b538:	77fb      	strb	r3, [r7, #31]
 800b53a:	e10f      	b.n	800b75c <UART_SetConfig+0x348>
 800b53c:	2310      	movs	r3, #16
 800b53e:	77fb      	strb	r3, [r7, #31]
 800b540:	e10c      	b.n	800b75c <UART_SetConfig+0x348>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a68      	ldr	r2, [pc, #416]	@ (800b6e8 <UART_SetConfig+0x2d4>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d120      	bne.n	800b58e <UART_SetConfig+0x17a>
 800b54c:	4b64      	ldr	r3, [pc, #400]	@ (800b6e0 <UART_SetConfig+0x2cc>)
 800b54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b552:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b556:	2b30      	cmp	r3, #48	@ 0x30
 800b558:	d013      	beq.n	800b582 <UART_SetConfig+0x16e>
 800b55a:	2b30      	cmp	r3, #48	@ 0x30
 800b55c:	d814      	bhi.n	800b588 <UART_SetConfig+0x174>
 800b55e:	2b20      	cmp	r3, #32
 800b560:	d009      	beq.n	800b576 <UART_SetConfig+0x162>
 800b562:	2b20      	cmp	r3, #32
 800b564:	d810      	bhi.n	800b588 <UART_SetConfig+0x174>
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <UART_SetConfig+0x15c>
 800b56a:	2b10      	cmp	r3, #16
 800b56c:	d006      	beq.n	800b57c <UART_SetConfig+0x168>
 800b56e:	e00b      	b.n	800b588 <UART_SetConfig+0x174>
 800b570:	2300      	movs	r3, #0
 800b572:	77fb      	strb	r3, [r7, #31]
 800b574:	e0f2      	b.n	800b75c <UART_SetConfig+0x348>
 800b576:	2302      	movs	r3, #2
 800b578:	77fb      	strb	r3, [r7, #31]
 800b57a:	e0ef      	b.n	800b75c <UART_SetConfig+0x348>
 800b57c:	2304      	movs	r3, #4
 800b57e:	77fb      	strb	r3, [r7, #31]
 800b580:	e0ec      	b.n	800b75c <UART_SetConfig+0x348>
 800b582:	2308      	movs	r3, #8
 800b584:	77fb      	strb	r3, [r7, #31]
 800b586:	e0e9      	b.n	800b75c <UART_SetConfig+0x348>
 800b588:	2310      	movs	r3, #16
 800b58a:	77fb      	strb	r3, [r7, #31]
 800b58c:	e0e6      	b.n	800b75c <UART_SetConfig+0x348>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a56      	ldr	r2, [pc, #344]	@ (800b6ec <UART_SetConfig+0x2d8>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d120      	bne.n	800b5da <UART_SetConfig+0x1c6>
 800b598:	4b51      	ldr	r3, [pc, #324]	@ (800b6e0 <UART_SetConfig+0x2cc>)
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b59e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b5a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5a4:	d013      	beq.n	800b5ce <UART_SetConfig+0x1ba>
 800b5a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b5a8:	d814      	bhi.n	800b5d4 <UART_SetConfig+0x1c0>
 800b5aa:	2b80      	cmp	r3, #128	@ 0x80
 800b5ac:	d009      	beq.n	800b5c2 <UART_SetConfig+0x1ae>
 800b5ae:	2b80      	cmp	r3, #128	@ 0x80
 800b5b0:	d810      	bhi.n	800b5d4 <UART_SetConfig+0x1c0>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d002      	beq.n	800b5bc <UART_SetConfig+0x1a8>
 800b5b6:	2b40      	cmp	r3, #64	@ 0x40
 800b5b8:	d006      	beq.n	800b5c8 <UART_SetConfig+0x1b4>
 800b5ba:	e00b      	b.n	800b5d4 <UART_SetConfig+0x1c0>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	77fb      	strb	r3, [r7, #31]
 800b5c0:	e0cc      	b.n	800b75c <UART_SetConfig+0x348>
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	77fb      	strb	r3, [r7, #31]
 800b5c6:	e0c9      	b.n	800b75c <UART_SetConfig+0x348>
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	77fb      	strb	r3, [r7, #31]
 800b5cc:	e0c6      	b.n	800b75c <UART_SetConfig+0x348>
 800b5ce:	2308      	movs	r3, #8
 800b5d0:	77fb      	strb	r3, [r7, #31]
 800b5d2:	e0c3      	b.n	800b75c <UART_SetConfig+0x348>
 800b5d4:	2310      	movs	r3, #16
 800b5d6:	77fb      	strb	r3, [r7, #31]
 800b5d8:	e0c0      	b.n	800b75c <UART_SetConfig+0x348>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a44      	ldr	r2, [pc, #272]	@ (800b6f0 <UART_SetConfig+0x2dc>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d125      	bne.n	800b630 <UART_SetConfig+0x21c>
 800b5e4:	4b3e      	ldr	r3, [pc, #248]	@ (800b6e0 <UART_SetConfig+0x2cc>)
 800b5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5f2:	d017      	beq.n	800b624 <UART_SetConfig+0x210>
 800b5f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b5f8:	d817      	bhi.n	800b62a <UART_SetConfig+0x216>
 800b5fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5fe:	d00b      	beq.n	800b618 <UART_SetConfig+0x204>
 800b600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b604:	d811      	bhi.n	800b62a <UART_SetConfig+0x216>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <UART_SetConfig+0x1fe>
 800b60a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b60e:	d006      	beq.n	800b61e <UART_SetConfig+0x20a>
 800b610:	e00b      	b.n	800b62a <UART_SetConfig+0x216>
 800b612:	2300      	movs	r3, #0
 800b614:	77fb      	strb	r3, [r7, #31]
 800b616:	e0a1      	b.n	800b75c <UART_SetConfig+0x348>
 800b618:	2302      	movs	r3, #2
 800b61a:	77fb      	strb	r3, [r7, #31]
 800b61c:	e09e      	b.n	800b75c <UART_SetConfig+0x348>
 800b61e:	2304      	movs	r3, #4
 800b620:	77fb      	strb	r3, [r7, #31]
 800b622:	e09b      	b.n	800b75c <UART_SetConfig+0x348>
 800b624:	2308      	movs	r3, #8
 800b626:	77fb      	strb	r3, [r7, #31]
 800b628:	e098      	b.n	800b75c <UART_SetConfig+0x348>
 800b62a:	2310      	movs	r3, #16
 800b62c:	77fb      	strb	r3, [r7, #31]
 800b62e:	e095      	b.n	800b75c <UART_SetConfig+0x348>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a2f      	ldr	r2, [pc, #188]	@ (800b6f4 <UART_SetConfig+0x2e0>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d125      	bne.n	800b686 <UART_SetConfig+0x272>
 800b63a:	4b29      	ldr	r3, [pc, #164]	@ (800b6e0 <UART_SetConfig+0x2cc>)
 800b63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b640:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b648:	d017      	beq.n	800b67a <UART_SetConfig+0x266>
 800b64a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b64e:	d817      	bhi.n	800b680 <UART_SetConfig+0x26c>
 800b650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b654:	d00b      	beq.n	800b66e <UART_SetConfig+0x25a>
 800b656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b65a:	d811      	bhi.n	800b680 <UART_SetConfig+0x26c>
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <UART_SetConfig+0x254>
 800b660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b664:	d006      	beq.n	800b674 <UART_SetConfig+0x260>
 800b666:	e00b      	b.n	800b680 <UART_SetConfig+0x26c>
 800b668:	2301      	movs	r3, #1
 800b66a:	77fb      	strb	r3, [r7, #31]
 800b66c:	e076      	b.n	800b75c <UART_SetConfig+0x348>
 800b66e:	2302      	movs	r3, #2
 800b670:	77fb      	strb	r3, [r7, #31]
 800b672:	e073      	b.n	800b75c <UART_SetConfig+0x348>
 800b674:	2304      	movs	r3, #4
 800b676:	77fb      	strb	r3, [r7, #31]
 800b678:	e070      	b.n	800b75c <UART_SetConfig+0x348>
 800b67a:	2308      	movs	r3, #8
 800b67c:	77fb      	strb	r3, [r7, #31]
 800b67e:	e06d      	b.n	800b75c <UART_SetConfig+0x348>
 800b680:	2310      	movs	r3, #16
 800b682:	77fb      	strb	r3, [r7, #31]
 800b684:	e06a      	b.n	800b75c <UART_SetConfig+0x348>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a1b      	ldr	r2, [pc, #108]	@ (800b6f8 <UART_SetConfig+0x2e4>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d138      	bne.n	800b702 <UART_SetConfig+0x2ee>
 800b690:	4b13      	ldr	r3, [pc, #76]	@ (800b6e0 <UART_SetConfig+0x2cc>)
 800b692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b696:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b69a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b69e:	d017      	beq.n	800b6d0 <UART_SetConfig+0x2bc>
 800b6a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b6a4:	d82a      	bhi.n	800b6fc <UART_SetConfig+0x2e8>
 800b6a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6aa:	d00b      	beq.n	800b6c4 <UART_SetConfig+0x2b0>
 800b6ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6b0:	d824      	bhi.n	800b6fc <UART_SetConfig+0x2e8>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d003      	beq.n	800b6be <UART_SetConfig+0x2aa>
 800b6b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ba:	d006      	beq.n	800b6ca <UART_SetConfig+0x2b6>
 800b6bc:	e01e      	b.n	800b6fc <UART_SetConfig+0x2e8>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	77fb      	strb	r3, [r7, #31]
 800b6c2:	e04b      	b.n	800b75c <UART_SetConfig+0x348>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	77fb      	strb	r3, [r7, #31]
 800b6c8:	e048      	b.n	800b75c <UART_SetConfig+0x348>
 800b6ca:	2304      	movs	r3, #4
 800b6cc:	77fb      	strb	r3, [r7, #31]
 800b6ce:	e045      	b.n	800b75c <UART_SetConfig+0x348>
 800b6d0:	2308      	movs	r3, #8
 800b6d2:	77fb      	strb	r3, [r7, #31]
 800b6d4:	e042      	b.n	800b75c <UART_SetConfig+0x348>
 800b6d6:	bf00      	nop
 800b6d8:	efff69f3 	.word	0xefff69f3
 800b6dc:	40011000 	.word	0x40011000
 800b6e0:	40023800 	.word	0x40023800
 800b6e4:	40004400 	.word	0x40004400
 800b6e8:	40004800 	.word	0x40004800
 800b6ec:	40004c00 	.word	0x40004c00
 800b6f0:	40005000 	.word	0x40005000
 800b6f4:	40011400 	.word	0x40011400
 800b6f8:	40007800 	.word	0x40007800
 800b6fc:	2310      	movs	r3, #16
 800b6fe:	77fb      	strb	r3, [r7, #31]
 800b700:	e02c      	b.n	800b75c <UART_SetConfig+0x348>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a72      	ldr	r2, [pc, #456]	@ (800b8d0 <UART_SetConfig+0x4bc>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d125      	bne.n	800b758 <UART_SetConfig+0x344>
 800b70c:	4b71      	ldr	r3, [pc, #452]	@ (800b8d4 <UART_SetConfig+0x4c0>)
 800b70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b712:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b716:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b71a:	d017      	beq.n	800b74c <UART_SetConfig+0x338>
 800b71c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b720:	d817      	bhi.n	800b752 <UART_SetConfig+0x33e>
 800b722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b726:	d00b      	beq.n	800b740 <UART_SetConfig+0x32c>
 800b728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b72c:	d811      	bhi.n	800b752 <UART_SetConfig+0x33e>
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <UART_SetConfig+0x326>
 800b732:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b736:	d006      	beq.n	800b746 <UART_SetConfig+0x332>
 800b738:	e00b      	b.n	800b752 <UART_SetConfig+0x33e>
 800b73a:	2300      	movs	r3, #0
 800b73c:	77fb      	strb	r3, [r7, #31]
 800b73e:	e00d      	b.n	800b75c <UART_SetConfig+0x348>
 800b740:	2302      	movs	r3, #2
 800b742:	77fb      	strb	r3, [r7, #31]
 800b744:	e00a      	b.n	800b75c <UART_SetConfig+0x348>
 800b746:	2304      	movs	r3, #4
 800b748:	77fb      	strb	r3, [r7, #31]
 800b74a:	e007      	b.n	800b75c <UART_SetConfig+0x348>
 800b74c:	2308      	movs	r3, #8
 800b74e:	77fb      	strb	r3, [r7, #31]
 800b750:	e004      	b.n	800b75c <UART_SetConfig+0x348>
 800b752:	2310      	movs	r3, #16
 800b754:	77fb      	strb	r3, [r7, #31]
 800b756:	e001      	b.n	800b75c <UART_SetConfig+0x348>
 800b758:	2310      	movs	r3, #16
 800b75a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b764:	d15b      	bne.n	800b81e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b766:	7ffb      	ldrb	r3, [r7, #31]
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d828      	bhi.n	800b7be <UART_SetConfig+0x3aa>
 800b76c:	a201      	add	r2, pc, #4	@ (adr r2, 800b774 <UART_SetConfig+0x360>)
 800b76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b772:	bf00      	nop
 800b774:	0800b799 	.word	0x0800b799
 800b778:	0800b7a1 	.word	0x0800b7a1
 800b77c:	0800b7a9 	.word	0x0800b7a9
 800b780:	0800b7bf 	.word	0x0800b7bf
 800b784:	0800b7af 	.word	0x0800b7af
 800b788:	0800b7bf 	.word	0x0800b7bf
 800b78c:	0800b7bf 	.word	0x0800b7bf
 800b790:	0800b7bf 	.word	0x0800b7bf
 800b794:	0800b7b7 	.word	0x0800b7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b798:	f7fc fd2a 	bl	80081f0 <HAL_RCC_GetPCLK1Freq>
 800b79c:	61b8      	str	r0, [r7, #24]
        break;
 800b79e:	e013      	b.n	800b7c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7a0:	f7fc fd3a 	bl	8008218 <HAL_RCC_GetPCLK2Freq>
 800b7a4:	61b8      	str	r0, [r7, #24]
        break;
 800b7a6:	e00f      	b.n	800b7c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7a8:	4b4b      	ldr	r3, [pc, #300]	@ (800b8d8 <UART_SetConfig+0x4c4>)
 800b7aa:	61bb      	str	r3, [r7, #24]
        break;
 800b7ac:	e00c      	b.n	800b7c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7ae:	f7fc fc4d 	bl	800804c <HAL_RCC_GetSysClockFreq>
 800b7b2:	61b8      	str	r0, [r7, #24]
        break;
 800b7b4:	e008      	b.n	800b7c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7ba:	61bb      	str	r3, [r7, #24]
        break;
 800b7bc:	e004      	b.n	800b7c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	77bb      	strb	r3, [r7, #30]
        break;
 800b7c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d074      	beq.n	800b8b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	005a      	lsls	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	085b      	lsrs	r3, r3, #1
 800b7d8:	441a      	add	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	2b0f      	cmp	r3, #15
 800b7e8:	d916      	bls.n	800b818 <UART_SetConfig+0x404>
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7f0:	d212      	bcs.n	800b818 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	f023 030f 	bic.w	r3, r3, #15
 800b7fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	085b      	lsrs	r3, r3, #1
 800b800:	b29b      	uxth	r3, r3
 800b802:	f003 0307 	and.w	r3, r3, #7
 800b806:	b29a      	uxth	r2, r3
 800b808:	89fb      	ldrh	r3, [r7, #14]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	89fa      	ldrh	r2, [r7, #14]
 800b814:	60da      	str	r2, [r3, #12]
 800b816:	e04f      	b.n	800b8b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	77bb      	strb	r3, [r7, #30]
 800b81c:	e04c      	b.n	800b8b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b81e:	7ffb      	ldrb	r3, [r7, #31]
 800b820:	2b08      	cmp	r3, #8
 800b822:	d828      	bhi.n	800b876 <UART_SetConfig+0x462>
 800b824:	a201      	add	r2, pc, #4	@ (adr r2, 800b82c <UART_SetConfig+0x418>)
 800b826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82a:	bf00      	nop
 800b82c:	0800b851 	.word	0x0800b851
 800b830:	0800b859 	.word	0x0800b859
 800b834:	0800b861 	.word	0x0800b861
 800b838:	0800b877 	.word	0x0800b877
 800b83c:	0800b867 	.word	0x0800b867
 800b840:	0800b877 	.word	0x0800b877
 800b844:	0800b877 	.word	0x0800b877
 800b848:	0800b877 	.word	0x0800b877
 800b84c:	0800b86f 	.word	0x0800b86f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b850:	f7fc fcce 	bl	80081f0 <HAL_RCC_GetPCLK1Freq>
 800b854:	61b8      	str	r0, [r7, #24]
        break;
 800b856:	e013      	b.n	800b880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b858:	f7fc fcde 	bl	8008218 <HAL_RCC_GetPCLK2Freq>
 800b85c:	61b8      	str	r0, [r7, #24]
        break;
 800b85e:	e00f      	b.n	800b880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b860:	4b1d      	ldr	r3, [pc, #116]	@ (800b8d8 <UART_SetConfig+0x4c4>)
 800b862:	61bb      	str	r3, [r7, #24]
        break;
 800b864:	e00c      	b.n	800b880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b866:	f7fc fbf1 	bl	800804c <HAL_RCC_GetSysClockFreq>
 800b86a:	61b8      	str	r0, [r7, #24]
        break;
 800b86c:	e008      	b.n	800b880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b86e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b872:	61bb      	str	r3, [r7, #24]
        break;
 800b874:	e004      	b.n	800b880 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	77bb      	strb	r3, [r7, #30]
        break;
 800b87e:	bf00      	nop
    }

    if (pclk != 0U)
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d018      	beq.n	800b8b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	085a      	lsrs	r2, r3, #1
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	441a      	add	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	fbb2 f3f3 	udiv	r3, r2, r3
 800b898:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	2b0f      	cmp	r3, #15
 800b89e:	d909      	bls.n	800b8b4 <UART_SetConfig+0x4a0>
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8a6:	d205      	bcs.n	800b8b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	60da      	str	r2, [r3, #12]
 800b8b2:	e001      	b.n	800b8b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b8c4:	7fbb      	ldrb	r3, [r7, #30]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3720      	adds	r7, #32
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	40007c00 	.word	0x40007c00
 800b8d4:	40023800 	.word	0x40023800
 800b8d8:	00f42400 	.word	0x00f42400

0800b8dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e8:	f003 0308 	and.w	r3, r3, #8
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00a      	beq.n	800b906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	430a      	orrs	r2, r1
 800b926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94e:	f003 0304 	and.w	r3, r3, #4
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b970:	f003 0310 	and.w	r3, r3, #16
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00a      	beq.n	800b98e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b992:	f003 0320 	and.w	r3, r3, #32
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00a      	beq.n	800b9b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d01a      	beq.n	800b9f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9da:	d10a      	bne.n	800b9f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00a      	beq.n	800ba14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	430a      	orrs	r2, r1
 800ba12:	605a      	str	r2, [r3, #4]
  }
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08c      	sub	sp, #48	@ 0x30
 800ba24:	af02      	add	r7, sp, #8
 800ba26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba30:	f7f6 fcac 	bl	800238c <HAL_GetTick>
 800ba34:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0308 	and.w	r3, r3, #8
 800ba40:	2b08      	cmp	r3, #8
 800ba42:	d12e      	bne.n	800baa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f83b 	bl	800bace <UART_WaitOnFlagUntilTimeout>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d021      	beq.n	800baa2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	e853 3f00 	ldrex	r3, [r3]
 800ba6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba72:	623b      	str	r3, [r7, #32]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	61fb      	str	r3, [r7, #28]
 800ba7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba80:	69b9      	ldr	r1, [r7, #24]
 800ba82:	69fa      	ldr	r2, [r7, #28]
 800ba84:	e841 2300 	strex	r3, r2, [r1]
 800ba88:	617b      	str	r3, [r7, #20]
   return(result);
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1e6      	bne.n	800ba5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2220      	movs	r2, #32
 800ba94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	e011      	b.n	800bac6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2220      	movs	r2, #32
 800baa6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2220      	movs	r2, #32
 800baac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3728      	adds	r7, #40	@ 0x28
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b084      	sub	sp, #16
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	603b      	str	r3, [r7, #0]
 800bada:	4613      	mov	r3, r2
 800badc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bade:	e04f      	b.n	800bb80 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bae6:	d04b      	beq.n	800bb80 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bae8:	f7f6 fc50 	bl	800238c <HAL_GetTick>
 800baec:	4602      	mov	r2, r0
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	69ba      	ldr	r2, [r7, #24]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d302      	bcc.n	800bafe <UART_WaitOnFlagUntilTimeout+0x30>
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e04e      	b.n	800bba0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 0304 	and.w	r3, r3, #4
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d037      	beq.n	800bb80 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	2b80      	cmp	r3, #128	@ 0x80
 800bb14:	d034      	beq.n	800bb80 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2b40      	cmp	r3, #64	@ 0x40
 800bb1a:	d031      	beq.n	800bb80 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	69db      	ldr	r3, [r3, #28]
 800bb22:	f003 0308 	and.w	r3, r3, #8
 800bb26:	2b08      	cmp	r3, #8
 800bb28:	d110      	bne.n	800bb4c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2208      	movs	r2, #8
 800bb30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 f8fe 	bl	800bd34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e029      	b.n	800bba0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb5a:	d111      	bne.n	800bb80 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f000 f8e4 	bl	800bd34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e00f      	b.n	800bba0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	69da      	ldr	r2, [r3, #28]
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	4013      	ands	r3, r2
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	bf0c      	ite	eq
 800bb90:	2301      	moveq	r3, #1
 800bb92:	2300      	movne	r3, #0
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	461a      	mov	r2, r3
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d0a0      	beq.n	800bae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b096      	sub	sp, #88	@ 0x58
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	88fa      	ldrh	r2, [r7, #6]
 800bbc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2222      	movs	r2, #34	@ 0x22
 800bbd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d028      	beq.n	800bc2e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbe0:	4a3e      	ldr	r2, [pc, #248]	@ (800bcdc <UART_Start_Receive_DMA+0x134>)
 800bbe2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbe8:	4a3d      	ldr	r2, [pc, #244]	@ (800bce0 <UART_Start_Receive_DMA+0x138>)
 800bbea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbf0:	4a3c      	ldr	r2, [pc, #240]	@ (800bce4 <UART_Start_Receive_DMA+0x13c>)
 800bbf2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3324      	adds	r3, #36	@ 0x24
 800bc06:	4619      	mov	r1, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	88fb      	ldrh	r3, [r7, #6]
 800bc10:	f7f7 fc0c 	bl	800342c <HAL_DMA_Start_IT>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d009      	beq.n	800bc2e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2210      	movs	r2, #16
 800bc1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2220      	movs	r2, #32
 800bc26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e051      	b.n	800bcd2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d018      	beq.n	800bc68 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc3e:	e853 3f00 	ldrex	r3, [r3]
 800bc42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc56:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bc5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc5c:	e841 2300 	strex	r3, r2, [r1]
 800bc60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bc62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1e6      	bne.n	800bc36 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7a:	f043 0301 	orr.w	r3, r3, #1
 800bc7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	3308      	adds	r3, #8
 800bc86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc88:	637a      	str	r2, [r7, #52]	@ 0x34
 800bc8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bc8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e5      	bne.n	800bc68 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3308      	adds	r3, #8
 800bca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	e853 3f00 	ldrex	r3, [r3]
 800bcaa:	613b      	str	r3, [r7, #16]
   return(result);
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3308      	adds	r3, #8
 800bcba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bcbc:	623a      	str	r2, [r7, #32]
 800bcbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc0:	69f9      	ldr	r1, [r7, #28]
 800bcc2:	6a3a      	ldr	r2, [r7, #32]
 800bcc4:	e841 2300 	strex	r3, r2, [r1]
 800bcc8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1e5      	bne.n	800bc9c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3758      	adds	r7, #88	@ 0x58
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	0800bdfd 	.word	0x0800bdfd
 800bce0:	0800bf5b 	.word	0x0800bf5b
 800bce4:	0800bfcd 	.word	0x0800bfcd

0800bce8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b089      	sub	sp, #36	@ 0x24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	e853 3f00 	ldrex	r3, [r3]
 800bcfc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bd04:	61fb      	str	r3, [r7, #28]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	61bb      	str	r3, [r7, #24]
 800bd10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd12:	6979      	ldr	r1, [r7, #20]
 800bd14:	69ba      	ldr	r2, [r7, #24]
 800bd16:	e841 2300 	strex	r3, r2, [r1]
 800bd1a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1e6      	bne.n	800bcf0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2220      	movs	r2, #32
 800bd26:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800bd28:	bf00      	nop
 800bd2a:	3724      	adds	r7, #36	@ 0x24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b095      	sub	sp, #84	@ 0x54
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e6      	bne.n	800bd3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3308      	adds	r3, #8
 800bd74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	f023 0301 	bic.w	r3, r3, #1
 800bd84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3308      	adds	r3, #8
 800bd8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bd90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e5      	bne.n	800bd6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d118      	bne.n	800bddc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	e853 3f00 	ldrex	r3, [r3]
 800bdb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f023 0310 	bic.w	r3, r3, #16
 800bdbe:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc8:	61bb      	str	r3, [r7, #24]
 800bdca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	6979      	ldr	r1, [r7, #20]
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e6      	bne.n	800bdaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2220      	movs	r2, #32
 800bde0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bdf0:	bf00      	nop
 800bdf2:	3754      	adds	r7, #84	@ 0x54
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b09c      	sub	sp, #112	@ 0x70
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be08:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be12:	d071      	beq.n	800bef8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800be14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be16:	2200      	movs	r2, #0
 800be18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be24:	e853 3f00 	ldrex	r3, [r3]
 800be28:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800be2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be30:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	461a      	mov	r2, r3
 800be38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be3a:	657b      	str	r3, [r7, #84]	@ 0x54
 800be3c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800be40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be42:	e841 2300 	strex	r3, r2, [r1]
 800be46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800be48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e6      	bne.n	800be1c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3308      	adds	r3, #8
 800be54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be60:	f023 0301 	bic.w	r3, r3, #1
 800be64:	667b      	str	r3, [r7, #100]	@ 0x64
 800be66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	3308      	adds	r3, #8
 800be6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800be6e:	643a      	str	r2, [r7, #64]	@ 0x40
 800be70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e5      	bne.n	800be4e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3308      	adds	r3, #8
 800be88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	e853 3f00 	ldrex	r3, [r3]
 800be90:	61fb      	str	r3, [r7, #28]
   return(result);
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be98:	663b      	str	r3, [r7, #96]	@ 0x60
 800be9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3308      	adds	r3, #8
 800bea0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800beb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d1e5      	bne.n	800be82 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800beb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beb8:	2220      	movs	r2, #32
 800beba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d118      	bne.n	800bef8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	f023 0310 	bic.w	r3, r3, #16
 800beda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bedc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	461a      	mov	r2, r3
 800bee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bee4:	61bb      	str	r3, [r7, #24]
 800bee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee8:	6979      	ldr	r1, [r7, #20]
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	e841 2300 	strex	r3, r2, [r1]
 800bef0:	613b      	str	r3, [r7, #16]
   return(result);
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1e6      	bne.n	800bec6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800befa:	2200      	movs	r2, #0
 800befc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800befe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d122      	bne.n	800bf4c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800bf06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800bf18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bf1e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d204      	bcs.n	800bf30 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bf26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf28:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bf2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bf36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4619      	mov	r1, r3
 800bf44:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf46:	f7ff fa59 	bl	800b3fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf4a:	e002      	b.n	800bf52 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bf4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf4e:	f013 ff57 	bl	801fe00 <HAL_UART_RxCpltCallback>
}
 800bf52:	bf00      	nop
 800bf54:	3770      	adds	r7, #112	@ 0x70
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf66:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d123      	bne.n	800bfbe <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bf7c:	085b      	lsrs	r3, r3, #1
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bf94:	897a      	ldrh	r2, [r7, #10]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d803      	bhi.n	800bfa2 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	897a      	ldrh	r2, [r7, #10]
 800bf9e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f7ff fa20 	bl	800b3fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bfbc:	e002      	b.n	800bfc4 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f7ff fa08 	bl	800b3d4 <HAL_UART_RxHalfCpltCallback>
}
 800bfc4:	bf00      	nop
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bff2:	2b80      	cmp	r3, #128	@ 0x80
 800bff4:	d109      	bne.n	800c00a <UART_DMAError+0x3e>
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2b21      	cmp	r3, #33	@ 0x21
 800bffa:	d106      	bne.n	800c00a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800c004:	6978      	ldr	r0, [r7, #20]
 800c006:	f7ff fe6f 	bl	800bce8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c014:	2b40      	cmp	r3, #64	@ 0x40
 800c016:	d109      	bne.n	800c02c <UART_DMAError+0x60>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b22      	cmp	r3, #34	@ 0x22
 800c01c:	d106      	bne.n	800c02c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2200      	movs	r2, #0
 800c022:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800c026:	6978      	ldr	r0, [r7, #20]
 800c028:	f7ff fe84 	bl	800bd34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c032:	f043 0210 	orr.w	r2, r3, #16
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c03c:	6978      	ldr	r0, [r7, #20]
 800c03e:	f7ff f9d3 	bl	800b3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c042:	bf00      	nop
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c056:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f7ff f9c1 	bl	800b3e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c06e:	b480      	push	{r7}
 800c070:	b08f      	sub	sp, #60	@ 0x3c
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c07a:	2b21      	cmp	r3, #33	@ 0x21
 800c07c:	d14c      	bne.n	800c118 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c084:	b29b      	uxth	r3, r3
 800c086:	2b00      	cmp	r3, #0
 800c088:	d132      	bne.n	800c0f0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	e853 3f00 	ldrex	r3, [r3]
 800c096:	61fb      	str	r3, [r7, #28]
   return(result);
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c09e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0b0:	e841 2300 	strex	r3, r2, [r1]
 800c0b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1e6      	bne.n	800c08a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	e853 3f00 	ldrex	r3, [r3]
 800c0c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0da:	61bb      	str	r3, [r7, #24]
 800c0dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6979      	ldr	r1, [r7, #20]
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e6      	bne.n	800c0bc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c0ee:	e013      	b.n	800c118 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0f4:	781a      	ldrb	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c100:	1c5a      	adds	r2, r3, #1
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	3b01      	subs	r3, #1
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c118:	bf00      	nop
 800c11a:	373c      	adds	r7, #60	@ 0x3c
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c124:	b480      	push	{r7}
 800c126:	b091      	sub	sp, #68	@ 0x44
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c130:	2b21      	cmp	r3, #33	@ 0x21
 800c132:	d151      	bne.n	800c1d8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d132      	bne.n	800c1a6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	e853 3f00 	ldrex	r3, [r3]
 800c14c:	623b      	str	r3, [r7, #32]
   return(result);
 800c14e:	6a3b      	ldr	r3, [r7, #32]
 800c150:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c154:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c160:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c166:	e841 2300 	strex	r3, r2, [r1]
 800c16a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1e6      	bne.n	800c140 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	e853 3f00 	ldrex	r3, [r3]
 800c17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c186:	637b      	str	r3, [r7, #52]	@ 0x34
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	461a      	mov	r2, r3
 800c18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c190:	61fb      	str	r3, [r7, #28]
 800c192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c194:	69b9      	ldr	r1, [r7, #24]
 800c196:	69fa      	ldr	r2, [r7, #28]
 800c198:	e841 2300 	strex	r3, r2, [r1]
 800c19c:	617b      	str	r3, [r7, #20]
   return(result);
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1e6      	bne.n	800c172 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c1a4:	e018      	b.n	800c1d8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1ba:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1c0:	1c9a      	adds	r2, r3, #2
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c1d8:	bf00      	nop
 800c1da:	3744      	adds	r7, #68	@ 0x44
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c200:	61fb      	str	r3, [r7, #28]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	61bb      	str	r3, [r7, #24]
 800c20c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6979      	ldr	r1, [r7, #20]
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	613b      	str	r3, [r7, #16]
   return(result);
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e6      	bne.n	800c1ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2220      	movs	r2, #32
 800c222:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff f8c8 	bl	800b3c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c230:	bf00      	nop
 800c232:	3720      	adds	r7, #32
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800c23e:	4b92      	ldr	r3, [pc, #584]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c240:	220a      	movs	r2, #10
 800c242:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800c244:	4b90      	ldr	r3, [pc, #576]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c246:	2200      	movs	r2, #0
 800c248:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800c24a:	4b8f      	ldr	r3, [pc, #572]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c24c:	2201      	movs	r2, #1
 800c24e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800c250:	4b8d      	ldr	r3, [pc, #564]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c252:	2264      	movs	r2, #100	@ 0x64
 800c254:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c256:	4b8d      	ldr	r3, [pc, #564]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c258:	22ff      	movs	r2, #255	@ 0xff
 800c25a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c25c:	4b8b      	ldr	r3, [pc, #556]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c25e:	22ff      	movs	r2, #255	@ 0xff
 800c260:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c262:	4b8a      	ldr	r3, [pc, #552]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c264:	22ff      	movs	r2, #255	@ 0xff
 800c266:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c268:	4b88      	ldr	r3, [pc, #544]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c26a:	2200      	movs	r2, #0
 800c26c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800c26e:	4b88      	ldr	r3, [pc, #544]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c270:	220a      	movs	r2, #10
 800c272:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800c274:	4b86      	ldr	r3, [pc, #536]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c276:	2200      	movs	r2, #0
 800c278:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800c27a:	4b85      	ldr	r3, [pc, #532]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c27c:	2201      	movs	r2, #1
 800c27e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800c280:	4b83      	ldr	r3, [pc, #524]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c282:	2265      	movs	r2, #101	@ 0x65
 800c284:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c286:	2100      	movs	r1, #0
 800c288:	2000      	movs	r0, #0
 800c28a:	f006 ff75 	bl	8013178 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c28e:	4b7e      	ldr	r3, [pc, #504]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	061a      	lsls	r2, r3, #24
 800c294:	4b7c      	ldr	r3, [pc, #496]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c296:	785b      	ldrb	r3, [r3, #1]
 800c298:	041b      	lsls	r3, r3, #16
 800c29a:	431a      	orrs	r2, r3
 800c29c:	4b7a      	ldr	r3, [pc, #488]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c29e:	789b      	ldrb	r3, [r3, #2]
 800c2a0:	021b      	lsls	r3, r3, #8
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	4a78      	ldr	r2, [pc, #480]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2a6:	78d2      	ldrb	r2, [r2, #3]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	061a      	lsls	r2, r3, #24
 800c2ac:	4b76      	ldr	r3, [pc, #472]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	0619      	lsls	r1, r3, #24
 800c2b2:	4b75      	ldr	r3, [pc, #468]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2b4:	785b      	ldrb	r3, [r3, #1]
 800c2b6:	041b      	lsls	r3, r3, #16
 800c2b8:	4319      	orrs	r1, r3
 800c2ba:	4b73      	ldr	r3, [pc, #460]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2bc:	789b      	ldrb	r3, [r3, #2]
 800c2be:	021b      	lsls	r3, r3, #8
 800c2c0:	430b      	orrs	r3, r1
 800c2c2:	4971      	ldr	r1, [pc, #452]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2c4:	78c9      	ldrb	r1, [r1, #3]
 800c2c6:	430b      	orrs	r3, r1
 800c2c8:	021b      	lsls	r3, r3, #8
 800c2ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	4b6d      	ldr	r3, [pc, #436]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	0619      	lsls	r1, r3, #24
 800c2d6:	4b6c      	ldr	r3, [pc, #432]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2d8:	785b      	ldrb	r3, [r3, #1]
 800c2da:	041b      	lsls	r3, r3, #16
 800c2dc:	4319      	orrs	r1, r3
 800c2de:	4b6a      	ldr	r3, [pc, #424]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2e0:	789b      	ldrb	r3, [r3, #2]
 800c2e2:	021b      	lsls	r3, r3, #8
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	4968      	ldr	r1, [pc, #416]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2e8:	78c9      	ldrb	r1, [r1, #3]
 800c2ea:	430b      	orrs	r3, r1
 800c2ec:	0a1b      	lsrs	r3, r3, #8
 800c2ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	4b64      	ldr	r3, [pc, #400]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	0619      	lsls	r1, r3, #24
 800c2fa:	4b63      	ldr	r3, [pc, #396]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c2fc:	785b      	ldrb	r3, [r3, #1]
 800c2fe:	041b      	lsls	r3, r3, #16
 800c300:	4319      	orrs	r1, r3
 800c302:	4b61      	ldr	r3, [pc, #388]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c304:	789b      	ldrb	r3, [r3, #2]
 800c306:	021b      	lsls	r3, r3, #8
 800c308:	430b      	orrs	r3, r1
 800c30a:	495f      	ldr	r1, [pc, #380]	@ (800c488 <MX_LWIP_Init+0x250>)
 800c30c:	78c9      	ldrb	r1, [r1, #3]
 800c30e:	430b      	orrs	r3, r1
 800c310:	0e1b      	lsrs	r3, r3, #24
 800c312:	4313      	orrs	r3, r2
 800c314:	4a5f      	ldr	r2, [pc, #380]	@ (800c494 <MX_LWIP_Init+0x25c>)
 800c316:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c318:	4b5c      	ldr	r3, [pc, #368]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	061a      	lsls	r2, r3, #24
 800c31e:	4b5b      	ldr	r3, [pc, #364]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c320:	785b      	ldrb	r3, [r3, #1]
 800c322:	041b      	lsls	r3, r3, #16
 800c324:	431a      	orrs	r2, r3
 800c326:	4b59      	ldr	r3, [pc, #356]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c328:	789b      	ldrb	r3, [r3, #2]
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	4313      	orrs	r3, r2
 800c32e:	4a57      	ldr	r2, [pc, #348]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c330:	78d2      	ldrb	r2, [r2, #3]
 800c332:	4313      	orrs	r3, r2
 800c334:	061a      	lsls	r2, r3, #24
 800c336:	4b55      	ldr	r3, [pc, #340]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	0619      	lsls	r1, r3, #24
 800c33c:	4b53      	ldr	r3, [pc, #332]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c33e:	785b      	ldrb	r3, [r3, #1]
 800c340:	041b      	lsls	r3, r3, #16
 800c342:	4319      	orrs	r1, r3
 800c344:	4b51      	ldr	r3, [pc, #324]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c346:	789b      	ldrb	r3, [r3, #2]
 800c348:	021b      	lsls	r3, r3, #8
 800c34a:	430b      	orrs	r3, r1
 800c34c:	494f      	ldr	r1, [pc, #316]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c34e:	78c9      	ldrb	r1, [r1, #3]
 800c350:	430b      	orrs	r3, r1
 800c352:	021b      	lsls	r3, r3, #8
 800c354:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c358:	431a      	orrs	r2, r3
 800c35a:	4b4c      	ldr	r3, [pc, #304]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	0619      	lsls	r1, r3, #24
 800c360:	4b4a      	ldr	r3, [pc, #296]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c362:	785b      	ldrb	r3, [r3, #1]
 800c364:	041b      	lsls	r3, r3, #16
 800c366:	4319      	orrs	r1, r3
 800c368:	4b48      	ldr	r3, [pc, #288]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c36a:	789b      	ldrb	r3, [r3, #2]
 800c36c:	021b      	lsls	r3, r3, #8
 800c36e:	430b      	orrs	r3, r1
 800c370:	4946      	ldr	r1, [pc, #280]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c372:	78c9      	ldrb	r1, [r1, #3]
 800c374:	430b      	orrs	r3, r1
 800c376:	0a1b      	lsrs	r3, r3, #8
 800c378:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c37c:	431a      	orrs	r2, r3
 800c37e:	4b43      	ldr	r3, [pc, #268]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	0619      	lsls	r1, r3, #24
 800c384:	4b41      	ldr	r3, [pc, #260]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c386:	785b      	ldrb	r3, [r3, #1]
 800c388:	041b      	lsls	r3, r3, #16
 800c38a:	4319      	orrs	r1, r3
 800c38c:	4b3f      	ldr	r3, [pc, #252]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c38e:	789b      	ldrb	r3, [r3, #2]
 800c390:	021b      	lsls	r3, r3, #8
 800c392:	430b      	orrs	r3, r1
 800c394:	493d      	ldr	r1, [pc, #244]	@ (800c48c <MX_LWIP_Init+0x254>)
 800c396:	78c9      	ldrb	r1, [r1, #3]
 800c398:	430b      	orrs	r3, r1
 800c39a:	0e1b      	lsrs	r3, r3, #24
 800c39c:	4313      	orrs	r3, r2
 800c39e:	4a3e      	ldr	r2, [pc, #248]	@ (800c498 <MX_LWIP_Init+0x260>)
 800c3a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c3a2:	4b3b      	ldr	r3, [pc, #236]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	061a      	lsls	r2, r3, #24
 800c3a8:	4b39      	ldr	r3, [pc, #228]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3aa:	785b      	ldrb	r3, [r3, #1]
 800c3ac:	041b      	lsls	r3, r3, #16
 800c3ae:	431a      	orrs	r2, r3
 800c3b0:	4b37      	ldr	r3, [pc, #220]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3b2:	789b      	ldrb	r3, [r3, #2]
 800c3b4:	021b      	lsls	r3, r3, #8
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	4a35      	ldr	r2, [pc, #212]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3ba:	78d2      	ldrb	r2, [r2, #3]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	061a      	lsls	r2, r3, #24
 800c3c0:	4b33      	ldr	r3, [pc, #204]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	0619      	lsls	r1, r3, #24
 800c3c6:	4b32      	ldr	r3, [pc, #200]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3c8:	785b      	ldrb	r3, [r3, #1]
 800c3ca:	041b      	lsls	r3, r3, #16
 800c3cc:	4319      	orrs	r1, r3
 800c3ce:	4b30      	ldr	r3, [pc, #192]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3d0:	789b      	ldrb	r3, [r3, #2]
 800c3d2:	021b      	lsls	r3, r3, #8
 800c3d4:	430b      	orrs	r3, r1
 800c3d6:	492e      	ldr	r1, [pc, #184]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3d8:	78c9      	ldrb	r1, [r1, #3]
 800c3da:	430b      	orrs	r3, r1
 800c3dc:	021b      	lsls	r3, r3, #8
 800c3de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	4b2a      	ldr	r3, [pc, #168]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	0619      	lsls	r1, r3, #24
 800c3ea:	4b29      	ldr	r3, [pc, #164]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	041b      	lsls	r3, r3, #16
 800c3f0:	4319      	orrs	r1, r3
 800c3f2:	4b27      	ldr	r3, [pc, #156]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3f4:	789b      	ldrb	r3, [r3, #2]
 800c3f6:	021b      	lsls	r3, r3, #8
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	4925      	ldr	r1, [pc, #148]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c3fc:	78c9      	ldrb	r1, [r1, #3]
 800c3fe:	430b      	orrs	r3, r1
 800c400:	0a1b      	lsrs	r3, r3, #8
 800c402:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c406:	431a      	orrs	r2, r3
 800c408:	4b21      	ldr	r3, [pc, #132]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	0619      	lsls	r1, r3, #24
 800c40e:	4b20      	ldr	r3, [pc, #128]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c410:	785b      	ldrb	r3, [r3, #1]
 800c412:	041b      	lsls	r3, r3, #16
 800c414:	4319      	orrs	r1, r3
 800c416:	4b1e      	ldr	r3, [pc, #120]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c418:	789b      	ldrb	r3, [r3, #2]
 800c41a:	021b      	lsls	r3, r3, #8
 800c41c:	430b      	orrs	r3, r1
 800c41e:	491c      	ldr	r1, [pc, #112]	@ (800c490 <MX_LWIP_Init+0x258>)
 800c420:	78c9      	ldrb	r1, [r1, #3]
 800c422:	430b      	orrs	r3, r1
 800c424:	0e1b      	lsrs	r3, r3, #24
 800c426:	4313      	orrs	r3, r2
 800c428:	4a1c      	ldr	r2, [pc, #112]	@ (800c49c <MX_LWIP_Init+0x264>)
 800c42a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c42c:	4b1c      	ldr	r3, [pc, #112]	@ (800c4a0 <MX_LWIP_Init+0x268>)
 800c42e:	9302      	str	r3, [sp, #8]
 800c430:	4b1c      	ldr	r3, [pc, #112]	@ (800c4a4 <MX_LWIP_Init+0x26c>)
 800c432:	9301      	str	r3, [sp, #4]
 800c434:	2300      	movs	r3, #0
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	4b18      	ldr	r3, [pc, #96]	@ (800c49c <MX_LWIP_Init+0x264>)
 800c43a:	4a17      	ldr	r2, [pc, #92]	@ (800c498 <MX_LWIP_Init+0x260>)
 800c43c:	4915      	ldr	r1, [pc, #84]	@ (800c494 <MX_LWIP_Init+0x25c>)
 800c43e:	481a      	ldr	r0, [pc, #104]	@ (800c4a8 <MX_LWIP_Init+0x270>)
 800c440:	f007 fd30 	bl	8013ea4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c444:	4818      	ldr	r0, [pc, #96]	@ (800c4a8 <MX_LWIP_Init+0x270>)
 800c446:	f007 fedf 	bl	8014208 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c44a:	4817      	ldr	r0, [pc, #92]	@ (800c4a8 <MX_LWIP_Init+0x270>)
 800c44c:	f007 feec 	bl	8014228 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c450:	4916      	ldr	r1, [pc, #88]	@ (800c4ac <MX_LWIP_Init+0x274>)
 800c452:	4815      	ldr	r0, [pc, #84]	@ (800c4a8 <MX_LWIP_Init+0x270>)
 800c454:	f007 ffea 	bl	801442c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c458:	2224      	movs	r2, #36	@ 0x24
 800c45a:	2100      	movs	r1, #0
 800c45c:	4814      	ldr	r0, [pc, #80]	@ (800c4b0 <MX_LWIP_Init+0x278>)
 800c45e:	f013 ff49 	bl	80202f4 <memset>
  attributes.name = "EthLink";
 800c462:	4b13      	ldr	r3, [pc, #76]	@ (800c4b0 <MX_LWIP_Init+0x278>)
 800c464:	4a13      	ldr	r2, [pc, #76]	@ (800c4b4 <MX_LWIP_Init+0x27c>)
 800c466:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c468:	4b11      	ldr	r3, [pc, #68]	@ (800c4b0 <MX_LWIP_Init+0x278>)
 800c46a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c46e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800c470:	4b0f      	ldr	r3, [pc, #60]	@ (800c4b0 <MX_LWIP_Init+0x278>)
 800c472:	2210      	movs	r2, #16
 800c474:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800c476:	4a0e      	ldr	r2, [pc, #56]	@ (800c4b0 <MX_LWIP_Init+0x278>)
 800c478:	490b      	ldr	r1, [pc, #44]	@ (800c4a8 <MX_LWIP_Init+0x270>)
 800c47a:	480f      	ldr	r0, [pc, #60]	@ (800c4b8 <MX_LWIP_Init+0x280>)
 800c47c:	f000 fdce 	bl	800d01c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c480:	bf00      	nop
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20000b4c 	.word	0x20000b4c
 800c48c:	20000b50 	.word	0x20000b50
 800c490:	20000b54 	.word	0x20000b54
 800c494:	20000b40 	.word	0x20000b40
 800c498:	20000b44 	.word	0x20000b44
 800c49c:	20000b48 	.word	0x20000b48
 800c4a0:	08013089 	.word	0x08013089
 800c4a4:	0800c9fd 	.word	0x0800c9fd
 800c4a8:	20000b0c 	.word	0x20000b0c
 800c4ac:	0800c4bd 	.word	0x0800c4bd
 800c4b0:	20000b58 	.word	0x20000b58
 800c4b4:	080210e4 	.word	0x080210e4
 800c4b8:	0800ccd5 	.word	0x0800ccd5

0800c4bc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c4e2:	2320      	movs	r3, #32
 800c4e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c4e6:	f3bf 8f4f 	dsb	sy
}
 800c4ea:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c4ec:	e00b      	b.n	800c506 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c4ee:	4a0d      	ldr	r2, [pc, #52]	@ (800c524 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	dcf0      	bgt.n	800c4ee <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c50c:	f3bf 8f4f 	dsb	sy
}
 800c510:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c512:	f3bf 8f6f 	isb	sy
}
 800c516:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c518:	bf00      	nop
 800c51a:	371c      	adds	r7, #28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	e000ed00 	.word	0xe000ed00

0800c528 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c530:	4b04      	ldr	r3, [pc, #16]	@ (800c544 <HAL_ETH_RxCpltCallback+0x1c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4618      	mov	r0, r3
 800c536:	f001 f897 	bl	800d668 <osSemaphoreRelease>
}
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	2000cf94 	.word	0x2000cf94

0800c548 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c550:	4b04      	ldr	r3, [pc, #16]	@ (800c564 <HAL_ETH_TxCpltCallback+0x1c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4618      	mov	r0, r3
 800c556:	f001 f887 	bl	800d668 <osSemaphoreRelease>
}
 800c55a:	bf00      	nop
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	2000cf98 	.word	0x2000cf98

0800c568 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7f8 f96e 	bl	8004852 <HAL_ETH_GetDMAError>
 800c576:	4603      	mov	r3, r0
 800c578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c57c:	2b80      	cmp	r3, #128	@ 0x80
 800c57e:	d104      	bne.n	800c58a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c580:	4b04      	ldr	r3, [pc, #16]	@ (800c594 <HAL_ETH_ErrorCallback+0x2c>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4618      	mov	r0, r3
 800c586:	f001 f86f 	bl	800d668 <osSemaphoreRelease>
  }
}
 800c58a:	bf00      	nop
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	2000cf94 	.word	0x2000cf94

0800c598 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b0aa      	sub	sp, #168	@ 0xa8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c5b2:	f107 0310 	add.w	r3, r7, #16
 800c5b6:	2264      	movs	r2, #100	@ 0x64
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f013 fe9a 	bl	80202f4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c5c0:	4b89      	ldr	r3, [pc, #548]	@ (800c7e8 <low_level_init+0x250>)
 800c5c2:	4a8a      	ldr	r2, [pc, #552]	@ (800c7ec <low_level_init+0x254>)
 800c5c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c5ca:	2380      	movs	r3, #128	@ 0x80
 800c5cc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c5ce:	23e1      	movs	r3, #225	@ 0xe1
 800c5d0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c5de:	4a82      	ldr	r2, [pc, #520]	@ (800c7e8 <low_level_init+0x250>)
 800c5e0:	f107 0308 	add.w	r3, r7, #8
 800c5e4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c5e6:	4b80      	ldr	r3, [pc, #512]	@ (800c7e8 <low_level_init+0x250>)
 800c5e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c5ec:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c5ee:	4b7e      	ldr	r3, [pc, #504]	@ (800c7e8 <low_level_init+0x250>)
 800c5f0:	4a7f      	ldr	r2, [pc, #508]	@ (800c7f0 <low_level_init+0x258>)
 800c5f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c5f4:	4b7c      	ldr	r3, [pc, #496]	@ (800c7e8 <low_level_init+0x250>)
 800c5f6:	4a7f      	ldr	r2, [pc, #508]	@ (800c7f4 <low_level_init+0x25c>)
 800c5f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c5fa:	4b7b      	ldr	r3, [pc, #492]	@ (800c7e8 <low_level_init+0x250>)
 800c5fc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c600:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c602:	4879      	ldr	r0, [pc, #484]	@ (800c7e8 <low_level_init+0x250>)
 800c604:	f7f7 fadc 	bl	8003bc0 <HAL_ETH_Init>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c60e:	2238      	movs	r2, #56	@ 0x38
 800c610:	2100      	movs	r1, #0
 800c612:	4879      	ldr	r0, [pc, #484]	@ (800c7f8 <low_level_init+0x260>)
 800c614:	f013 fe6e 	bl	80202f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c618:	4b77      	ldr	r3, [pc, #476]	@ (800c7f8 <low_level_init+0x260>)
 800c61a:	2221      	movs	r2, #33	@ 0x21
 800c61c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c61e:	4b76      	ldr	r3, [pc, #472]	@ (800c7f8 <low_level_init+0x260>)
 800c620:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c624:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c626:	4b74      	ldr	r3, [pc, #464]	@ (800c7f8 <low_level_init+0x260>)
 800c628:	2200      	movs	r2, #0
 800c62a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c62c:	4873      	ldr	r0, [pc, #460]	@ (800c7fc <low_level_init+0x264>)
 800c62e:	f007 fac1 	bl	8013bb4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2206      	movs	r2, #6
 800c636:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c63a:	4b6b      	ldr	r3, [pc, #428]	@ (800c7e8 <low_level_init+0x250>)
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	781a      	ldrb	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c646:	4b68      	ldr	r3, [pc, #416]	@ (800c7e8 <low_level_init+0x250>)
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	785a      	ldrb	r2, [r3, #1]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c652:	4b65      	ldr	r3, [pc, #404]	@ (800c7e8 <low_level_init+0x250>)
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	789a      	ldrb	r2, [r3, #2]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c65e:	4b62      	ldr	r3, [pc, #392]	@ (800c7e8 <low_level_init+0x250>)
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	78da      	ldrb	r2, [r3, #3]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c66a:	4b5f      	ldr	r3, [pc, #380]	@ (800c7e8 <low_level_init+0x250>)
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	791a      	ldrb	r2, [r3, #4]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c676:	4b5c      	ldr	r3, [pc, #368]	@ (800c7e8 <low_level_init+0x250>)
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	795a      	ldrb	r2, [r3, #5]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c688:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c690:	f043 030a 	orr.w	r3, r3, #10
 800c694:	b2da      	uxtb	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c69c:	2200      	movs	r2, #0
 800c69e:	2100      	movs	r1, #0
 800c6a0:	2001      	movs	r0, #1
 800c6a2:	f000 fedf 	bl	800d464 <osSemaphoreNew>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	4a55      	ldr	r2, [pc, #340]	@ (800c800 <low_level_init+0x268>)
 800c6aa:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f000 fed7 	bl	800d464 <osSemaphoreNew>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	4a52      	ldr	r2, [pc, #328]	@ (800c804 <low_level_init+0x26c>)
 800c6ba:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c6bc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c6c0:	2224      	movs	r2, #36	@ 0x24
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f013 fe15 	bl	80202f4 <memset>
  attributes.name = "EthIf";
 800c6ca:	4b4f      	ldr	r3, [pc, #316]	@ (800c808 <low_level_init+0x270>)
 800c6cc:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c6ce:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c6d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c6d6:	2330      	movs	r3, #48	@ 0x30
 800c6d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c6dc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	6879      	ldr	r1, [r7, #4]
 800c6e4:	4849      	ldr	r0, [pc, #292]	@ (800c80c <low_level_init+0x274>)
 800c6e6:	f000 fc99 	bl	800d01c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c6ea:	4949      	ldr	r1, [pc, #292]	@ (800c810 <low_level_init+0x278>)
 800c6ec:	4849      	ldr	r0, [pc, #292]	@ (800c814 <low_level_init+0x27c>)
 800c6ee:	f7f5 fd26 	bl	800213e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c6f2:	4848      	ldr	r0, [pc, #288]	@ (800c814 <low_level_init+0x27c>)
 800c6f4:	f7f5 fd55 	bl	80021a2 <LAN8742_Init>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d006      	beq.n	800c70c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f007 fe64 	bl	80143cc <netif_set_link_down>
    netif_set_down(netif);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f007 fdfb 	bl	8014300 <netif_set_down>
 800c70a:	e06a      	b.n	800c7e2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c70c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c710:	2b00      	cmp	r3, #0
 800c712:	d164      	bne.n	800c7de <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c714:	483f      	ldr	r0, [pc, #252]	@ (800c814 <low_level_init+0x27c>)
 800c716:	f7f5 fd91 	bl	800223c <LAN8742_GetLinkState>
 800c71a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c71e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c722:	2b01      	cmp	r3, #1
 800c724:	dc06      	bgt.n	800c734 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f007 fe50 	bl	80143cc <netif_set_link_down>
      netif_set_down(netif);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f007 fde7 	bl	8014300 <netif_set_down>
 800c732:	e056      	b.n	800c7e2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c738:	3b02      	subs	r3, #2
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	d82a      	bhi.n	800c794 <low_level_init+0x1fc>
 800c73e:	a201      	add	r2, pc, #4	@ (adr r2, 800c744 <low_level_init+0x1ac>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c755 	.word	0x0800c755
 800c748:	0800c767 	.word	0x0800c767
 800c74c:	0800c777 	.word	0x0800c777
 800c750:	0800c787 	.word	0x0800c787
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c754:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c758:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c75c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c760:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c764:	e01f      	b.n	800c7a6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c766:	2300      	movs	r3, #0
 800c768:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c76c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c770:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c774:	e017      	b.n	800c7a6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c776:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c77a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c77e:	2300      	movs	r3, #0
 800c780:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c784:	e00f      	b.n	800c7a6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c786:	2300      	movs	r3, #0
 800c788:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c78c:	2300      	movs	r3, #0
 800c78e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c792:	e008      	b.n	800c7a6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c794:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c798:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c79c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c7a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c7a4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c7a6:	f107 0310 	add.w	r3, r7, #16
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	480e      	ldr	r0, [pc, #56]	@ (800c7e8 <low_level_init+0x250>)
 800c7ae:	f7f7 feef 	bl	8004590 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c7b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c7b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c7bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c7be:	f107 0310 	add.w	r3, r7, #16
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4808      	ldr	r0, [pc, #32]	@ (800c7e8 <low_level_init+0x250>)
 800c7c6:	f7f7 ffda 	bl	800477e <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c7ca:	4807      	ldr	r0, [pc, #28]	@ (800c7e8 <low_level_init+0x250>)
 800c7cc:	f7f7 fa92 	bl	8003cf4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f007 fd29 	bl	8014228 <netif_set_up>
    netif_set_link_up(netif);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f007 fdc4 	bl	8014364 <netif_set_link_up>
 800c7dc:	e001      	b.n	800c7e2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c7de:	f7f4 fd19 	bl	8001214 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c7e2:	37a8      	adds	r7, #168	@ 0xa8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	2000cf9c 	.word	0x2000cf9c
 800c7ec:	40028000 	.word	0x40028000
 800c7f0:	2000012c 	.word	0x2000012c
 800c7f4:	2000008c 	.word	0x2000008c
 800c7f8:	2000d04c 	.word	0x2000d04c
 800c7fc:	08024c60 	.word	0x08024c60
 800c800:	2000cf94 	.word	0x2000cf94
 800c804:	2000cf98 	.word	0x2000cf98
 800c808:	080210ec 	.word	0x080210ec
 800c80c:	0800c9a9 	.word	0x0800c9a9
 800c810:	2000000c 	.word	0x2000000c
 800c814:	2000d084 	.word	0x2000d084

0800c818 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b092      	sub	sp, #72	@ 0x48
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c822:	2300      	movs	r3, #0
 800c824:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c826:	2300      	movs	r3, #0
 800c828:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c830:	f107 030c 	add.w	r3, r7, #12
 800c834:	2230      	movs	r2, #48	@ 0x30
 800c836:	2100      	movs	r1, #0
 800c838:	4618      	mov	r0, r3
 800c83a:	f013 fd5b 	bl	80202f4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c83e:	f107 030c 	add.w	r3, r7, #12
 800c842:	2230      	movs	r2, #48	@ 0x30
 800c844:	2100      	movs	r1, #0
 800c846:	4618      	mov	r0, r3
 800c848:	f013 fd54 	bl	80202f4 <memset>

  for(q = p; q != NULL; q = q->next)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c850:	e045      	b.n	800c8de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c854:	2b03      	cmp	r3, #3
 800c856:	d902      	bls.n	800c85e <low_level_output+0x46>
      return ERR_IF;
 800c858:	f06f 030b 	mvn.w	r3, #11
 800c85c:	e07f      	b.n	800c95e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c85e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c860:	6859      	ldr	r1, [r3, #4]
 800c862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c864:	4613      	mov	r3, r2
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	4413      	add	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	3348      	adds	r3, #72	@ 0x48
 800c86e:	443b      	add	r3, r7
 800c870:	3b3c      	subs	r3, #60	@ 0x3c
 800c872:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c876:	895b      	ldrh	r3, [r3, #10]
 800c878:	4619      	mov	r1, r3
 800c87a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c87c:	4613      	mov	r3, r2
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	4413      	add	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	3348      	adds	r3, #72	@ 0x48
 800c886:	443b      	add	r3, r7
 800c888:	3b38      	subs	r3, #56	@ 0x38
 800c88a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c88c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d011      	beq.n	800c8b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c894:	1e5a      	subs	r2, r3, #1
 800c896:	f107 000c 	add.w	r0, r7, #12
 800c89a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c89c:	460b      	mov	r3, r1
 800c89e:	005b      	lsls	r3, r3, #1
 800c8a0:	440b      	add	r3, r1
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	18c1      	adds	r1, r0, r3
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	4413      	add	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	3348      	adds	r3, #72	@ 0x48
 800c8b0:	443b      	add	r3, r7
 800c8b2:	3b34      	subs	r3, #52	@ 0x34
 800c8b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c8b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d109      	bne.n	800c8d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c8be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	005b      	lsls	r3, r3, #1
 800c8c4:	4413      	add	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	3348      	adds	r3, #72	@ 0x48
 800c8ca:	443b      	add	r3, r7
 800c8cc:	3b34      	subs	r3, #52	@ 0x34
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c8d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c8d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1b6      	bne.n	800c852 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	891b      	ldrh	r3, [r3, #8]
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4b1f      	ldr	r3, [pc, #124]	@ (800c968 <low_level_output+0x150>)
 800c8ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c8ee:	4a1e      	ldr	r2, [pc, #120]	@ (800c968 <low_level_output+0x150>)
 800c8f0:	f107 030c 	add.w	r3, r7, #12
 800c8f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c8f6:	4a1c      	ldr	r2, [pc, #112]	@ (800c968 <low_level_output+0x150>)
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c8fc:	6838      	ldr	r0, [r7, #0]
 800c8fe:	f008 f9e9 	bl	8014cd4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c902:	4919      	ldr	r1, [pc, #100]	@ (800c968 <low_level_output+0x150>)
 800c904:	4819      	ldr	r0, [pc, #100]	@ (800c96c <low_level_output+0x154>)
 800c906:	f7f7 fae5 	bl	8003ed4 <HAL_ETH_Transmit_IT>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d103      	bne.n	800c918 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c916:	e01b      	b.n	800c950 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c918:	4814      	ldr	r0, [pc, #80]	@ (800c96c <low_level_output+0x154>)
 800c91a:	f7f7 ff8d 	bl	8004838 <HAL_ETH_GetError>
 800c91e:	4603      	mov	r3, r0
 800c920:	f003 0302 	and.w	r3, r3, #2
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00d      	beq.n	800c944 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c928:	4b11      	ldr	r3, [pc, #68]	@ (800c970 <low_level_output+0x158>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c930:	4618      	mov	r0, r3
 800c932:	f000 fe33 	bl	800d59c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c936:	480d      	ldr	r0, [pc, #52]	@ (800c96c <low_level_output+0x154>)
 800c938:	f7f7 fc6c 	bl	8004214 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c93c:	23fe      	movs	r3, #254	@ 0xfe
 800c93e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c942:	e005      	b.n	800c950 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c944:	6838      	ldr	r0, [r7, #0]
 800c946:	f008 f91f 	bl	8014b88 <pbuf_free>
        errval =  ERR_IF;
 800c94a:	23f4      	movs	r3, #244	@ 0xf4
 800c94c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c950:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c954:	f113 0f02 	cmn.w	r3, #2
 800c958:	d0d3      	beq.n	800c902 <low_level_output+0xea>

  return errval;
 800c95a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3748      	adds	r7, #72	@ 0x48
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	2000d04c 	.word	0x2000d04c
 800c96c:	2000cf9c 	.word	0x2000cf9c
 800c970:	2000cf98 	.word	0x2000cf98

0800c974 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c980:	4b07      	ldr	r3, [pc, #28]	@ (800c9a0 <low_level_input+0x2c>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d105      	bne.n	800c994 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c988:	f107 030c 	add.w	r3, r7, #12
 800c98c:	4619      	mov	r1, r3
 800c98e:	4805      	ldr	r0, [pc, #20]	@ (800c9a4 <low_level_input+0x30>)
 800c990:	f7f7 fafc 	bl	8003f8c <HAL_ETH_ReadData>
  }

  return p;
 800c994:	68fb      	ldr	r3, [r7, #12]
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	2000cf90 	.word	0x2000cf90
 800c9a4:	2000cf9c 	.word	0x2000cf9c

0800c9a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c9f8 <ethernetif_input+0x50>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fdeb 	bl	800d59c <osSemaphoreAcquire>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d1f5      	bne.n	800c9b8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c9cc:	68b8      	ldr	r0, [r7, #8]
 800c9ce:	f7ff ffd1 	bl	800c974 <low_level_input>
 800c9d2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	691b      	ldr	r3, [r3, #16]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	4798      	blx	r3
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f008 f8cc 	bl	8014b88 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1ea      	bne.n	800c9cc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c9f6:	e7df      	b.n	800c9b8 <ethernetif_input+0x10>
 800c9f8:	2000cf94 	.word	0x2000cf94

0800c9fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d106      	bne.n	800ca18 <ethernetif_init+0x1c>
 800ca0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ca44 <ethernetif_init+0x48>)
 800ca0c:	f240 220d 	movw	r2, #525	@ 0x20d
 800ca10:	490d      	ldr	r1, [pc, #52]	@ (800ca48 <ethernetif_init+0x4c>)
 800ca12:	480e      	ldr	r0, [pc, #56]	@ (800ca4c <ethernetif_init+0x50>)
 800ca14:	f013 fb16 	bl	8020044 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2273      	movs	r2, #115	@ 0x73
 800ca1c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2274      	movs	r2, #116	@ 0x74
 800ca24:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	4a09      	ldr	r2, [pc, #36]	@ (800ca50 <ethernetif_init+0x54>)
 800ca2c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a08      	ldr	r2, [pc, #32]	@ (800ca54 <ethernetif_init+0x58>)
 800ca32:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7ff fdaf 	bl	800c598 <low_level_init>

  return ERR_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	080210f4 	.word	0x080210f4
 800ca48:	08021110 	.word	0x08021110
 800ca4c:	08021120 	.word	0x08021120
 800ca50:	0801c849 	.word	0x0801c849
 800ca54:	0800c819 	.word	0x0800c819

0800ca58 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ca64:	68f9      	ldr	r1, [r7, #12]
 800ca66:	4809      	ldr	r0, [pc, #36]	@ (800ca8c <pbuf_free_custom+0x34>)
 800ca68:	f007 f9c6 	bl	8013df8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ca6c:	4b08      	ldr	r3, [pc, #32]	@ (800ca90 <pbuf_free_custom+0x38>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d107      	bne.n	800ca84 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ca74:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <pbuf_free_custom+0x38>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800ca7a:	4b06      	ldr	r3, [pc, #24]	@ (800ca94 <pbuf_free_custom+0x3c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 fdf2 	bl	800d668 <osSemaphoreRelease>
  }
}
 800ca84:	bf00      	nop
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	08024c60 	.word	0x08024c60
 800ca90:	2000cf90 	.word	0x2000cf90
 800ca94:	2000cf94 	.word	0x2000cf94

0800ca98 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ca9c:	f7f5 fc76 	bl	800238c <HAL_GetTick>
 800caa0:	4603      	mov	r3, r0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	bd80      	pop	{r7, pc}
	...

0800caa8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08e      	sub	sp, #56	@ 0x38
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cab4:	2200      	movs	r2, #0
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	605a      	str	r2, [r3, #4]
 800caba:	609a      	str	r2, [r3, #8]
 800cabc:	60da      	str	r2, [r3, #12]
 800cabe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a56      	ldr	r2, [pc, #344]	@ (800cc20 <HAL_ETH_MspInit+0x178>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	f040 80a6 	bne.w	800cc18 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800cacc:	4b55      	ldr	r3, [pc, #340]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad0:	4a54      	ldr	r2, [pc, #336]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cad2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cad6:	6313      	str	r3, [r2, #48]	@ 0x30
 800cad8:	4b52      	ldr	r3, [pc, #328]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cadc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cae0:	623b      	str	r3, [r7, #32]
 800cae2:	6a3b      	ldr	r3, [r7, #32]
 800cae4:	4b4f      	ldr	r3, [pc, #316]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cae8:	4a4e      	ldr	r2, [pc, #312]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800caea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800caee:	6313      	str	r3, [r2, #48]	@ 0x30
 800caf0:	4b4c      	ldr	r3, [pc, #304]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800caf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800caf8:	61fb      	str	r3, [r7, #28]
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	4b49      	ldr	r3, [pc, #292]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cafe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb00:	4a48      	ldr	r2, [pc, #288]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cb06:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb08:	4b46      	ldr	r3, [pc, #280]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb10:	61bb      	str	r3, [r7, #24]
 800cb12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb14:	4b43      	ldr	r3, [pc, #268]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb18:	4a42      	ldr	r2, [pc, #264]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb1a:	f043 0304 	orr.w	r3, r3, #4
 800cb1e:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb20:	4b40      	ldr	r3, [pc, #256]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb24:	f003 0304 	and.w	r3, r3, #4
 800cb28:	617b      	str	r3, [r7, #20]
 800cb2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb2c:	4b3d      	ldr	r3, [pc, #244]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb30:	4a3c      	ldr	r2, [pc, #240]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb32:	f043 0301 	orr.w	r3, r3, #1
 800cb36:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb38:	4b3a      	ldr	r3, [pc, #232]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb3c:	f003 0301 	and.w	r3, r3, #1
 800cb40:	613b      	str	r3, [r7, #16]
 800cb42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb44:	4b37      	ldr	r3, [pc, #220]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb48:	4a36      	ldr	r2, [pc, #216]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb4a:	f043 0302 	orr.w	r3, r3, #2
 800cb4e:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb50:	4b34      	ldr	r3, [pc, #208]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb54:	f003 0302 	and.w	r3, r3, #2
 800cb58:	60fb      	str	r3, [r7, #12]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cb5c:	4b31      	ldr	r3, [pc, #196]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb60:	4a30      	ldr	r2, [pc, #192]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb66:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb68:	4b2e      	ldr	r3, [pc, #184]	@ (800cc24 <HAL_ETH_MspInit+0x17c>)
 800cb6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb70:	60bb      	str	r3, [r7, #8]
 800cb72:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800cb74:	2332      	movs	r3, #50	@ 0x32
 800cb76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb78:	2302      	movs	r3, #2
 800cb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb80:	2303      	movs	r3, #3
 800cb82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cb84:	230b      	movs	r3, #11
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cb88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4826      	ldr	r0, [pc, #152]	@ (800cc28 <HAL_ETH_MspInit+0x180>)
 800cb90:	f7f8 fa8c 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800cb94:	2386      	movs	r3, #134	@ 0x86
 800cb96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb98:	2302      	movs	r3, #2
 800cb9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cba0:	2303      	movs	r3, #3
 800cba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cba4:	230b      	movs	r3, #11
 800cba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbac:	4619      	mov	r1, r3
 800cbae:	481f      	ldr	r0, [pc, #124]	@ (800cc2c <HAL_ETH_MspInit+0x184>)
 800cbb0:	f7f8 fa7c 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cbb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cbb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbba:	2302      	movs	r3, #2
 800cbbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cbc6:	230b      	movs	r3, #11
 800cbc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cbca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbce:	4619      	mov	r1, r3
 800cbd0:	4817      	ldr	r0, [pc, #92]	@ (800cc30 <HAL_ETH_MspInit+0x188>)
 800cbd2:	f7f8 fa6b 	bl	80050ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800cbd6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800cbda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbdc:	2302      	movs	r3, #2
 800cbde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cbe8:	230b      	movs	r3, #11
 800cbea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cbec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4810      	ldr	r0, [pc, #64]	@ (800cc34 <HAL_ETH_MspInit+0x18c>)
 800cbf4:	f7f8 fa5a 	bl	80050ac <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	2105      	movs	r1, #5
 800cbfc:	203d      	movs	r0, #61	@ 0x3d
 800cbfe:	f7f6 f933 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800cc02:	203d      	movs	r0, #61	@ 0x3d
 800cc04:	f7f6 f94c 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800cc08:	2200      	movs	r2, #0
 800cc0a:	2105      	movs	r1, #5
 800cc0c:	203e      	movs	r0, #62	@ 0x3e
 800cc0e:	f7f6 f92b 	bl	8002e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800cc12:	203e      	movs	r0, #62	@ 0x3e
 800cc14:	f7f6 f944 	bl	8002ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800cc18:	bf00      	nop
 800cc1a:	3738      	adds	r7, #56	@ 0x38
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	40028000 	.word	0x40028000
 800cc24:	40023800 	.word	0x40023800
 800cc28:	40020800 	.word	0x40020800
 800cc2c:	40020000 	.word	0x40020000
 800cc30:	40020400 	.word	0x40020400
 800cc34:	40021800 	.word	0x40021800

0800cc38 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800cc3c:	4802      	ldr	r0, [pc, #8]	@ (800cc48 <ETH_PHY_IO_Init+0x10>)
 800cc3e:	f7f7 fdb9 	bl	80047b4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	2000cf9c 	.word	0x2000cf9c

0800cc4c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
  return 0;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	68f9      	ldr	r1, [r7, #12]
 800cc6e:	4807      	ldr	r0, [pc, #28]	@ (800cc8c <ETH_PHY_IO_ReadReg+0x30>)
 800cc70:	f7f7 fbfa 	bl	8004468 <HAL_ETH_ReadPHYRegister>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d002      	beq.n	800cc80 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800cc7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc7e:	e000      	b.n	800cc82 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	2000cf9c 	.word	0x2000cf9c

0800cc90 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	68f9      	ldr	r1, [r7, #12]
 800cca2:	4807      	ldr	r0, [pc, #28]	@ (800ccc0 <ETH_PHY_IO_WriteReg+0x30>)
 800cca4:	f7f7 fc2b 	bl	80044fe <HAL_ETH_WritePHYRegister>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d002      	beq.n	800ccb4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ccae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ccb2:	e000      	b.n	800ccb6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	2000cf9c 	.word	0x2000cf9c

0800ccc4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ccc8:	f7f5 fb60 	bl	800238c <HAL_GetTick>
 800cccc:	4603      	mov	r3, r0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b0a0      	sub	sp, #128	@ 0x80
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ccdc:	f107 0308 	add.w	r3, r7, #8
 800cce0:	2264      	movs	r2, #100	@ 0x64
 800cce2:	2100      	movs	r1, #0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f013 fb05 	bl	80202f4 <memset>
  int32_t PHYLinkState = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ccfe:	483a      	ldr	r0, [pc, #232]	@ (800cde8 <ethernet_link_thread+0x114>)
 800cd00:	f7f5 fa9c 	bl	800223c <LAN8742_GetLinkState>
 800cd04:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800cd06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd0c:	089b      	lsrs	r3, r3, #2
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00c      	beq.n	800cd32 <ethernet_link_thread+0x5e>
 800cd18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	dc09      	bgt.n	800cd32 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800cd1e:	4833      	ldr	r0, [pc, #204]	@ (800cdec <ethernet_link_thread+0x118>)
 800cd20:	f7f7 f858 	bl	8003dd4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800cd24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd26:	f007 faeb 	bl	8014300 <netif_set_down>
    netif_set_link_down(netif);
 800cd2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cd2c:	f007 fb4e 	bl	80143cc <netif_set_link_down>
 800cd30:	e055      	b.n	800cdde <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800cd32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd38:	f003 0304 	and.w	r3, r3, #4
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d14e      	bne.n	800cdde <ethernet_link_thread+0x10a>
 800cd40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	dd4b      	ble.n	800cdde <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800cd46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd48:	3b02      	subs	r3, #2
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	d82a      	bhi.n	800cda4 <ethernet_link_thread+0xd0>
 800cd4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd54 <ethernet_link_thread+0x80>)
 800cd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd54:	0800cd65 	.word	0x0800cd65
 800cd58:	0800cd77 	.word	0x0800cd77
 800cd5c:	0800cd87 	.word	0x0800cd87
 800cd60:	0800cd97 	.word	0x0800cd97
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800cd64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd68:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800cd6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cd6e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cd70:	2301      	movs	r3, #1
 800cd72:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cd74:	e017      	b.n	800cda6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800cd76:	2300      	movs	r3, #0
 800cd78:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800cd7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cd7e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cd80:	2301      	movs	r3, #1
 800cd82:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cd84:	e00f      	b.n	800cda6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800cd86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd8a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cd90:	2301      	movs	r3, #1
 800cd92:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cd94:	e007      	b.n	800cda6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800cd96:	2300      	movs	r3, #0
 800cd98:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cda2:	e000      	b.n	800cda6 <ethernet_link_thread+0xd2>
    default:
      break;
 800cda4:	bf00      	nop
    }

    if(linkchanged)
 800cda6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d018      	beq.n	800cdde <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800cdac:	f107 0308 	add.w	r3, r7, #8
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	480e      	ldr	r0, [pc, #56]	@ (800cdec <ethernet_link_thread+0x118>)
 800cdb4:	f7f7 fbec 	bl	8004590 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800cdb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cdba:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800cdbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cdbe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800cdc0:	f107 0308 	add.w	r3, r7, #8
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4809      	ldr	r0, [pc, #36]	@ (800cdec <ethernet_link_thread+0x118>)
 800cdc8:	f7f7 fcd9 	bl	800477e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800cdcc:	4807      	ldr	r0, [pc, #28]	@ (800cdec <ethernet_link_thread+0x118>)
 800cdce:	f7f6 ff91 	bl	8003cf4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800cdd2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cdd4:	f007 fa28 	bl	8014228 <netif_set_up>
      netif_set_link_up(netif);
 800cdd8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cdda:	f007 fac3 	bl	8014364 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800cdde:	2064      	movs	r0, #100	@ 0x64
 800cde0:	f000 f9ca 	bl	800d178 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cde4:	e78b      	b.n	800ccfe <ethernet_link_thread+0x2a>
 800cde6:	bf00      	nop
 800cde8:	2000d084 	.word	0x2000d084
 800cdec:	2000cf9c 	.word	0x2000cf9c

0800cdf0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800cdf8:	4812      	ldr	r0, [pc, #72]	@ (800ce44 <HAL_ETH_RxAllocateCallback+0x54>)
 800cdfa:	f006 ff83 	bl	8013d04 <memp_malloc_pool>
 800cdfe:	60f8      	str	r0, [r7, #12]
  if (p)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d014      	beq.n	800ce30 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f103 0220 	add.w	r2, r3, #32
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	4a0d      	ldr	r2, [pc, #52]	@ (800ce48 <HAL_ETH_RxAllocateCallback+0x58>)
 800ce14:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ce1e:	9201      	str	r2, [sp, #4]
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2241      	movs	r2, #65	@ 0x41
 800ce26:	2100      	movs	r1, #0
 800ce28:	2000      	movs	r0, #0
 800ce2a:	f007 fcf3 	bl	8014814 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ce2e:	e005      	b.n	800ce3c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ce30:	4b06      	ldr	r3, [pc, #24]	@ (800ce4c <HAL_ETH_RxAllocateCallback+0x5c>)
 800ce32:	2201      	movs	r2, #1
 800ce34:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]
}
 800ce3c:	bf00      	nop
 800ce3e:	3710      	adds	r7, #16
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	08024c60 	.word	0x08024c60
 800ce48:	0800ca59 	.word	0x0800ca59
 800ce4c:	2000cf90 	.word	0x2000cf90

0800ce50 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
 800ce5c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ce66:	2300      	movs	r3, #0
 800ce68:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	3b20      	subs	r3, #32
 800ce6e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	887a      	ldrh	r2, [r7, #2]
 800ce80:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d103      	bne.n	800ce92 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	69fa      	ldr	r2, [r7, #28]
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	e003      	b.n	800ce9a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	69fa      	ldr	r2, [r7, #28]
 800ce98:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	69fa      	ldr	r2, [r7, #28]
 800ce9e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	61fb      	str	r3, [r7, #28]
 800cea6:	e009      	b.n	800cebc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	891a      	ldrh	r2, [r3, #8]
 800ceac:	887b      	ldrh	r3, [r7, #2]
 800ceae:	4413      	add	r3, r2
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	69fb      	ldr	r3, [r7, #28]
 800ceb4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	61fb      	str	r3, [r7, #28]
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1f2      	bne.n	800cea8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800cec2:	887b      	ldrh	r3, [r7, #2]
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fb02 	bl	800c4d0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800cecc:	bf00      	nop
 800cece:	3720      	adds	r7, #32
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f007 fe53 	bl	8014b88 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ceea:	b480      	push	{r7}
 800ceec:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ceee:	bf00      	nop
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cefe:	f3ef 8305 	mrs	r3, IPSR
 800cf02:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d10f      	bne.n	800cf2a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf0e:	607b      	str	r3, [r7, #4]
  return(result);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d105      	bne.n	800cf22 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf16:	f3ef 8311 	mrs	r3, BASEPRI
 800cf1a:	603b      	str	r3, [r7, #0]
  return(result);
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d007      	beq.n	800cf32 <osKernelInitialize+0x3a>
 800cf22:	4b0e      	ldr	r3, [pc, #56]	@ (800cf5c <osKernelInitialize+0x64>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d103      	bne.n	800cf32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cf2a:	f06f 0305 	mvn.w	r3, #5
 800cf2e:	60fb      	str	r3, [r7, #12]
 800cf30:	e00c      	b.n	800cf4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cf32:	4b0a      	ldr	r3, [pc, #40]	@ (800cf5c <osKernelInitialize+0x64>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d105      	bne.n	800cf46 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cf3a:	4b08      	ldr	r3, [pc, #32]	@ (800cf5c <osKernelInitialize+0x64>)
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	e002      	b.n	800cf4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cf46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	2000d0a4 	.word	0x2000d0a4

0800cf60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf66:	f3ef 8305 	mrs	r3, IPSR
 800cf6a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10f      	bne.n	800cf92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf72:	f3ef 8310 	mrs	r3, PRIMASK
 800cf76:	607b      	str	r3, [r7, #4]
  return(result);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d105      	bne.n	800cf8a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf7e:	f3ef 8311 	mrs	r3, BASEPRI
 800cf82:	603b      	str	r3, [r7, #0]
  return(result);
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d007      	beq.n	800cf9a <osKernelStart+0x3a>
 800cf8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cfc8 <osKernelStart+0x68>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d103      	bne.n	800cf9a <osKernelStart+0x3a>
    stat = osErrorISR;
 800cf92:	f06f 0305 	mvn.w	r3, #5
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	e010      	b.n	800cfbc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc8 <osKernelStart+0x68>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d109      	bne.n	800cfb6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cfa2:	f7ff ffa2 	bl	800ceea <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cfa6:	4b08      	ldr	r3, [pc, #32]	@ (800cfc8 <osKernelStart+0x68>)
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cfac:	f002 fa8c 	bl	800f4c8 <vTaskStartScheduler>
      stat = osOK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	e002      	b.n	800cfbc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cfb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	2000d0a4 	.word	0x2000d0a4

0800cfcc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfd2:	f3ef 8305 	mrs	r3, IPSR
 800cfd6:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfd8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d10f      	bne.n	800cffe <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfde:	f3ef 8310 	mrs	r3, PRIMASK
 800cfe2:	607b      	str	r3, [r7, #4]
  return(result);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d105      	bne.n	800cff6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfea:	f3ef 8311 	mrs	r3, BASEPRI
 800cfee:	603b      	str	r3, [r7, #0]
  return(result);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d007      	beq.n	800d006 <osKernelGetTickCount+0x3a>
 800cff6:	4b08      	ldr	r3, [pc, #32]	@ (800d018 <osKernelGetTickCount+0x4c>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d103      	bne.n	800d006 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cffe:	f002 fb95 	bl	800f72c <xTaskGetTickCountFromISR>
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	e002      	b.n	800d00c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800d006:	f002 fb81 	bl	800f70c <xTaskGetTickCount>
 800d00a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800d00c:	68fb      	ldr	r3, [r7, #12]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	2000d0a4 	.word	0x2000d0a4

0800d01c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b090      	sub	sp, #64	@ 0x40
 800d020:	af04      	add	r7, sp, #16
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d028:	2300      	movs	r3, #0
 800d02a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d02c:	f3ef 8305 	mrs	r3, IPSR
 800d030:	61fb      	str	r3, [r7, #28]
  return(result);
 800d032:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d034:	2b00      	cmp	r3, #0
 800d036:	f040 8090 	bne.w	800d15a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d03a:	f3ef 8310 	mrs	r3, PRIMASK
 800d03e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d105      	bne.n	800d052 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d046:	f3ef 8311 	mrs	r3, BASEPRI
 800d04a:	617b      	str	r3, [r7, #20]
  return(result);
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d003      	beq.n	800d05a <osThreadNew+0x3e>
 800d052:	4b44      	ldr	r3, [pc, #272]	@ (800d164 <osThreadNew+0x148>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2b02      	cmp	r3, #2
 800d058:	d07f      	beq.n	800d15a <osThreadNew+0x13e>
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d07c      	beq.n	800d15a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800d060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d064:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d066:	2318      	movs	r3, #24
 800d068:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800d06e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d072:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d045      	beq.n	800d106 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <osThreadNew+0x6c>
        name = attr->name;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d008      	beq.n	800d0ae <osThreadNew+0x92>
 800d09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09e:	2b38      	cmp	r3, #56	@ 0x38
 800d0a0:	d805      	bhi.n	800d0ae <osThreadNew+0x92>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	f003 0301 	and.w	r3, r3, #1
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d001      	beq.n	800d0b2 <osThreadNew+0x96>
        return (NULL);
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e054      	b.n	800d15c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	695b      	ldr	r3, [r3, #20]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d003      	beq.n	800d0c2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	695b      	ldr	r3, [r3, #20]
 800d0be:	089b      	lsrs	r3, r3, #2
 800d0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00e      	beq.n	800d0e8 <osThreadNew+0xcc>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	2ba7      	cmp	r3, #167	@ 0xa7
 800d0d0:	d90a      	bls.n	800d0e8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d006      	beq.n	800d0e8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d002      	beq.n	800d0e8 <osThreadNew+0xcc>
        mem = 1;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	623b      	str	r3, [r7, #32]
 800d0e6:	e010      	b.n	800d10a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10c      	bne.n	800d10a <osThreadNew+0xee>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d108      	bne.n	800d10a <osThreadNew+0xee>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d104      	bne.n	800d10a <osThreadNew+0xee>
          mem = 0;
 800d100:	2300      	movs	r3, #0
 800d102:	623b      	str	r3, [r7, #32]
 800d104:	e001      	b.n	800d10a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800d106:	2300      	movs	r3, #0
 800d108:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d110      	bne.n	800d132 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d118:	9202      	str	r2, [sp, #8]
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d124:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f001 ff5a 	bl	800efe0 <xTaskCreateStatic>
 800d12c:	4603      	mov	r3, r0
 800d12e:	613b      	str	r3, [r7, #16]
 800d130:	e013      	b.n	800d15a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d110      	bne.n	800d15a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	f107 0310 	add.w	r3, r7, #16
 800d140:	9301      	str	r3, [sp, #4]
 800d142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f001 ffae 	bl	800f0ac <xTaskCreate>
 800d150:	4603      	mov	r3, r0
 800d152:	2b01      	cmp	r3, #1
 800d154:	d001      	beq.n	800d15a <osThreadNew+0x13e>
          hTask = NULL;
 800d156:	2300      	movs	r3, #0
 800d158:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d15a:	693b      	ldr	r3, [r7, #16]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3730      	adds	r7, #48	@ 0x30
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	2000d0a4 	.word	0x2000d0a4

0800d168 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800d168:	b580      	push	{r7, lr}
 800d16a:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800d16c:	2000      	movs	r0, #0
 800d16e:	f002 f8fd 	bl	800f36c <vTaskDelete>
#endif
  for (;;);
 800d172:	bf00      	nop
 800d174:	e7fd      	b.n	800d172 <osThreadExit+0xa>
	...

0800d178 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d178:	b580      	push	{r7, lr}
 800d17a:	b086      	sub	sp, #24
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d180:	f3ef 8305 	mrs	r3, IPSR
 800d184:	613b      	str	r3, [r7, #16]
  return(result);
 800d186:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10f      	bne.n	800d1ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d18c:	f3ef 8310 	mrs	r3, PRIMASK
 800d190:	60fb      	str	r3, [r7, #12]
  return(result);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d105      	bne.n	800d1a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d198:	f3ef 8311 	mrs	r3, BASEPRI
 800d19c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d007      	beq.n	800d1b4 <osDelay+0x3c>
 800d1a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d1d0 <osDelay+0x58>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	d103      	bne.n	800d1b4 <osDelay+0x3c>
    stat = osErrorISR;
 800d1ac:	f06f 0305 	mvn.w	r3, #5
 800d1b0:	617b      	str	r3, [r7, #20]
 800d1b2:	e007      	b.n	800d1c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d002      	beq.n	800d1c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f002 f94a 	bl	800f458 <vTaskDelay>
    }
  }

  return (stat);
 800d1c4:	697b      	ldr	r3, [r7, #20]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	2000d0a4 	.word	0x2000d0a4

0800d1d4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08a      	sub	sp, #40	@ 0x28
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1e0:	f3ef 8305 	mrs	r3, IPSR
 800d1e4:	613b      	str	r3, [r7, #16]
  return(result);
 800d1e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f040 8085 	bne.w	800d2f8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d1f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d105      	bne.n	800d206 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1fa:	f3ef 8311 	mrs	r3, BASEPRI
 800d1fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d003      	beq.n	800d20e <osMutexNew+0x3a>
 800d206:	4b3f      	ldr	r3, [pc, #252]	@ (800d304 <osMutexNew+0x130>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d074      	beq.n	800d2f8 <osMutexNew+0x124>
    if (attr != NULL) {
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d003      	beq.n	800d21c <osMutexNew+0x48>
      type = attr->attr_bits;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	623b      	str	r3, [r7, #32]
 800d21a:	e001      	b.n	800d220 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	f003 0301 	and.w	r3, r3, #1
 800d226:	2b00      	cmp	r3, #0
 800d228:	d002      	beq.n	800d230 <osMutexNew+0x5c>
      rmtx = 1U;
 800d22a:	2301      	movs	r3, #1
 800d22c:	61fb      	str	r3, [r7, #28]
 800d22e:	e001      	b.n	800d234 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800d230:	2300      	movs	r3, #0
 800d232:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d234:	6a3b      	ldr	r3, [r7, #32]
 800d236:	f003 0308 	and.w	r3, r3, #8
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d15c      	bne.n	800d2f8 <osMutexNew+0x124>
      mem = -1;
 800d23e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d242:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d015      	beq.n	800d276 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d006      	beq.n	800d260 <osMutexNew+0x8c>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	2b4f      	cmp	r3, #79	@ 0x4f
 800d258:	d902      	bls.n	800d260 <osMutexNew+0x8c>
          mem = 1;
 800d25a:	2301      	movs	r3, #1
 800d25c:	61bb      	str	r3, [r7, #24]
 800d25e:	e00c      	b.n	800d27a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d108      	bne.n	800d27a <osMutexNew+0xa6>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d104      	bne.n	800d27a <osMutexNew+0xa6>
            mem = 0;
 800d270:	2300      	movs	r3, #0
 800d272:	61bb      	str	r3, [r7, #24]
 800d274:	e001      	b.n	800d27a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d276:	2300      	movs	r3, #0
 800d278:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d112      	bne.n	800d2a6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d007      	beq.n	800d296 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	4619      	mov	r1, r3
 800d28c:	2004      	movs	r0, #4
 800d28e:	f000 fec0 	bl	800e012 <xQueueCreateMutexStatic>
 800d292:	6278      	str	r0, [r7, #36]	@ 0x24
 800d294:	e016      	b.n	800d2c4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	4619      	mov	r1, r3
 800d29c:	2001      	movs	r0, #1
 800d29e:	f000 feb8 	bl	800e012 <xQueueCreateMutexStatic>
 800d2a2:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2a4:	e00e      	b.n	800d2c4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10b      	bne.n	800d2c4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d004      	beq.n	800d2bc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d2b2:	2004      	movs	r0, #4
 800d2b4:	f000 fe95 	bl	800dfe2 <xQueueCreateMutex>
 800d2b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2ba:	e003      	b.n	800d2c4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d2bc:	2001      	movs	r0, #1
 800d2be:	f000 fe90 	bl	800dfe2 <xQueueCreateMutex>
 800d2c2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00c      	beq.n	800d2e4 <osMutexNew+0x110>
        if (attr != NULL) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d003      	beq.n	800d2d8 <osMutexNew+0x104>
          name = attr->name;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	617b      	str	r3, [r7, #20]
 800d2d6:	e001      	b.n	800d2dc <osMutexNew+0x108>
        } else {
          name = NULL;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d2dc:	6979      	ldr	r1, [r7, #20]
 800d2de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d2e0:	f001 fdf6 	bl	800eed0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d006      	beq.n	800d2f8 <osMutexNew+0x124>
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d003      	beq.n	800d2f8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f2:	f043 0301 	orr.w	r3, r3, #1
 800d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3728      	adds	r7, #40	@ 0x28
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	2000d0a4 	.word	0x2000d0a4

0800d308 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d308:	b580      	push	{r7, lr}
 800d30a:	b088      	sub	sp, #32
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f023 0301 	bic.w	r3, r3, #1
 800d318:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f003 0301 	and.w	r3, r3, #1
 800d320:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d322:	2300      	movs	r3, #0
 800d324:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d326:	f3ef 8305 	mrs	r3, IPSR
 800d32a:	613b      	str	r3, [r7, #16]
  return(result);
 800d32c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d10f      	bne.n	800d352 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d332:	f3ef 8310 	mrs	r3, PRIMASK
 800d336:	60fb      	str	r3, [r7, #12]
  return(result);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d105      	bne.n	800d34a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d33e:	f3ef 8311 	mrs	r3, BASEPRI
 800d342:	60bb      	str	r3, [r7, #8]
  return(result);
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d007      	beq.n	800d35a <osMutexAcquire+0x52>
 800d34a:	4b1d      	ldr	r3, [pc, #116]	@ (800d3c0 <osMutexAcquire+0xb8>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d103      	bne.n	800d35a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d352:	f06f 0305 	mvn.w	r3, #5
 800d356:	61fb      	str	r3, [r7, #28]
 800d358:	e02c      	b.n	800d3b4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d103      	bne.n	800d368 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800d360:	f06f 0303 	mvn.w	r3, #3
 800d364:	61fb      	str	r3, [r7, #28]
 800d366:	e025      	b.n	800d3b4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d011      	beq.n	800d392 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	69b8      	ldr	r0, [r7, #24]
 800d372:	f000 fea0 	bl	800e0b6 <xQueueTakeMutexRecursive>
 800d376:	4603      	mov	r3, r0
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d01b      	beq.n	800d3b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d003      	beq.n	800d38a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800d382:	f06f 0301 	mvn.w	r3, #1
 800d386:	61fb      	str	r3, [r7, #28]
 800d388:	e014      	b.n	800d3b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d38a:	f06f 0302 	mvn.w	r3, #2
 800d38e:	61fb      	str	r3, [r7, #28]
 800d390:	e010      	b.n	800d3b4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d392:	6839      	ldr	r1, [r7, #0]
 800d394:	69b8      	ldr	r0, [r7, #24]
 800d396:	f001 fa6b 	bl	800e870 <xQueueSemaphoreTake>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d009      	beq.n	800d3b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d003      	beq.n	800d3ae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800d3a6:	f06f 0301 	mvn.w	r3, #1
 800d3aa:	61fb      	str	r3, [r7, #28]
 800d3ac:	e002      	b.n	800d3b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d3ae:	f06f 0302 	mvn.w	r3, #2
 800d3b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d3b4:	69fb      	ldr	r3, [r7, #28]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3720      	adds	r7, #32
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	2000d0a4 	.word	0x2000d0a4

0800d3c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f023 0301 	bic.w	r3, r3, #1
 800d3d2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f003 0301 	and.w	r3, r3, #1
 800d3da:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3e0:	f3ef 8305 	mrs	r3, IPSR
 800d3e4:	613b      	str	r3, [r7, #16]
  return(result);
 800d3e6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10f      	bne.n	800d40c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3ec:	f3ef 8310 	mrs	r3, PRIMASK
 800d3f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d105      	bne.n	800d404 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3f8:	f3ef 8311 	mrs	r3, BASEPRI
 800d3fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d007      	beq.n	800d414 <osMutexRelease+0x50>
 800d404:	4b16      	ldr	r3, [pc, #88]	@ (800d460 <osMutexRelease+0x9c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d103      	bne.n	800d414 <osMutexRelease+0x50>
    stat = osErrorISR;
 800d40c:	f06f 0305 	mvn.w	r3, #5
 800d410:	61fb      	str	r3, [r7, #28]
 800d412:	e01f      	b.n	800d454 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d103      	bne.n	800d422 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d41a:	f06f 0303 	mvn.w	r3, #3
 800d41e:	61fb      	str	r3, [r7, #28]
 800d420:	e018      	b.n	800d454 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d009      	beq.n	800d43c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d428:	69b8      	ldr	r0, [r7, #24]
 800d42a:	f000 fe0d 	bl	800e048 <xQueueGiveMutexRecursive>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b01      	cmp	r3, #1
 800d432:	d00f      	beq.n	800d454 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d434:	f06f 0302 	mvn.w	r3, #2
 800d438:	61fb      	str	r3, [r7, #28]
 800d43a:	e00b      	b.n	800d454 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d43c:	2300      	movs	r3, #0
 800d43e:	2200      	movs	r2, #0
 800d440:	2100      	movs	r1, #0
 800d442:	69b8      	ldr	r0, [r7, #24]
 800d444:	f000 fee6 	bl	800e214 <xQueueGenericSend>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d002      	beq.n	800d454 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d44e:	f06f 0302 	mvn.w	r3, #2
 800d452:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d454:	69fb      	ldr	r3, [r7, #28]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3720      	adds	r7, #32
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	2000d0a4 	.word	0x2000d0a4

0800d464 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d464:	b580      	push	{r7, lr}
 800d466:	b08c      	sub	sp, #48	@ 0x30
 800d468:	af02      	add	r7, sp, #8
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d470:	2300      	movs	r3, #0
 800d472:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d474:	f3ef 8305 	mrs	r3, IPSR
 800d478:	61bb      	str	r3, [r7, #24]
  return(result);
 800d47a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f040 8086 	bne.w	800d58e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d482:	f3ef 8310 	mrs	r3, PRIMASK
 800d486:	617b      	str	r3, [r7, #20]
  return(result);
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d105      	bne.n	800d49a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d48e:	f3ef 8311 	mrs	r3, BASEPRI
 800d492:	613b      	str	r3, [r7, #16]
  return(result);
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <osSemaphoreNew+0x3e>
 800d49a:	4b3f      	ldr	r3, [pc, #252]	@ (800d598 <osSemaphoreNew+0x134>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d075      	beq.n	800d58e <osSemaphoreNew+0x12a>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d072      	beq.n	800d58e <osSemaphoreNew+0x12a>
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d86e      	bhi.n	800d58e <osSemaphoreNew+0x12a>
    mem = -1;
 800d4b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d4b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d015      	beq.n	800d4e8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d006      	beq.n	800d4d2 <osSemaphoreNew+0x6e>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	2b4f      	cmp	r3, #79	@ 0x4f
 800d4ca:	d902      	bls.n	800d4d2 <osSemaphoreNew+0x6e>
        mem = 1;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	623b      	str	r3, [r7, #32]
 800d4d0:	e00c      	b.n	800d4ec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d108      	bne.n	800d4ec <osSemaphoreNew+0x88>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d104      	bne.n	800d4ec <osSemaphoreNew+0x88>
          mem = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	623b      	str	r3, [r7, #32]
 800d4e6:	e001      	b.n	800d4ec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4f2:	d04c      	beq.n	800d58e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d128      	bne.n	800d54c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d10a      	bne.n	800d516 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	2203      	movs	r2, #3
 800d506:	9200      	str	r2, [sp, #0]
 800d508:	2200      	movs	r2, #0
 800d50a:	2100      	movs	r1, #0
 800d50c:	2001      	movs	r0, #1
 800d50e:	f000 fc61 	bl	800ddd4 <xQueueGenericCreateStatic>
 800d512:	6278      	str	r0, [r7, #36]	@ 0x24
 800d514:	e005      	b.n	800d522 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d516:	2203      	movs	r2, #3
 800d518:	2100      	movs	r1, #0
 800d51a:	2001      	movs	r0, #1
 800d51c:	f000 fce1 	bl	800dee2 <xQueueGenericCreate>
 800d520:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d524:	2b00      	cmp	r3, #0
 800d526:	d022      	beq.n	800d56e <osSemaphoreNew+0x10a>
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d01f      	beq.n	800d56e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d52e:	2300      	movs	r3, #0
 800d530:	2200      	movs	r2, #0
 800d532:	2100      	movs	r1, #0
 800d534:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d536:	f000 fe6d 	bl	800e214 <xQueueGenericSend>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d016      	beq.n	800d56e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d540:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d542:	f001 fb77 	bl	800ec34 <vQueueDelete>
            hSemaphore = NULL;
 800d546:	2300      	movs	r3, #0
 800d548:	627b      	str	r3, [r7, #36]	@ 0x24
 800d54a:	e010      	b.n	800d56e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d54c:	6a3b      	ldr	r3, [r7, #32]
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d108      	bne.n	800d564 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	461a      	mov	r2, r3
 800d558:	68b9      	ldr	r1, [r7, #8]
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f000 fde4 	bl	800e128 <xQueueCreateCountingSemaphoreStatic>
 800d560:	6278      	str	r0, [r7, #36]	@ 0x24
 800d562:	e004      	b.n	800d56e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d564:	68b9      	ldr	r1, [r7, #8]
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f000 fe1b 	bl	800e1a2 <xQueueCreateCountingSemaphore>
 800d56c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00c      	beq.n	800d58e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <osSemaphoreNew+0x11e>
          name = attr->name;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	61fb      	str	r3, [r7, #28]
 800d580:	e001      	b.n	800d586 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d582:	2300      	movs	r3, #0
 800d584:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d586:	69f9      	ldr	r1, [r7, #28]
 800d588:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d58a:	f001 fca1 	bl	800eed0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d590:	4618      	mov	r0, r3
 800d592:	3728      	adds	r7, #40	@ 0x28
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	2000d0a4 	.word	0x2000d0a4

0800d59c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b088      	sub	sp, #32
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d103      	bne.n	800d5bc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d5b4:	f06f 0303 	mvn.w	r3, #3
 800d5b8:	61fb      	str	r3, [r7, #28]
 800d5ba:	e04b      	b.n	800d654 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5bc:	f3ef 8305 	mrs	r3, IPSR
 800d5c0:	617b      	str	r3, [r7, #20]
  return(result);
 800d5c2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10f      	bne.n	800d5e8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d5cc:	613b      	str	r3, [r7, #16]
  return(result);
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d105      	bne.n	800d5e0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5d4:	f3ef 8311 	mrs	r3, BASEPRI
 800d5d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d026      	beq.n	800d62e <osSemaphoreAcquire+0x92>
 800d5e0:	4b1f      	ldr	r3, [pc, #124]	@ (800d660 <osSemaphoreAcquire+0xc4>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d122      	bne.n	800d62e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d5ee:	f06f 0303 	mvn.w	r3, #3
 800d5f2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d5f4:	e02d      	b.n	800d652 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d5fa:	f107 0308 	add.w	r3, r7, #8
 800d5fe:	461a      	mov	r2, r3
 800d600:	2100      	movs	r1, #0
 800d602:	69b8      	ldr	r0, [r7, #24]
 800d604:	f001 fa4c 	bl	800eaa0 <xQueueReceiveFromISR>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d003      	beq.n	800d616 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d60e:	f06f 0302 	mvn.w	r3, #2
 800d612:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d614:	e01d      	b.n	800d652 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d01a      	beq.n	800d652 <osSemaphoreAcquire+0xb6>
 800d61c:	4b11      	ldr	r3, [pc, #68]	@ (800d664 <osSemaphoreAcquire+0xc8>)
 800d61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	f3bf 8f4f 	dsb	sy
 800d628:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d62c:	e011      	b.n	800d652 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d62e:	6839      	ldr	r1, [r7, #0]
 800d630:	69b8      	ldr	r0, [r7, #24]
 800d632:	f001 f91d 	bl	800e870 <xQueueSemaphoreTake>
 800d636:	4603      	mov	r3, r0
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d00b      	beq.n	800d654 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d642:	f06f 0301 	mvn.w	r3, #1
 800d646:	61fb      	str	r3, [r7, #28]
 800d648:	e004      	b.n	800d654 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d64a:	f06f 0302 	mvn.w	r3, #2
 800d64e:	61fb      	str	r3, [r7, #28]
 800d650:	e000      	b.n	800d654 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d652:	bf00      	nop
      }
    }
  }

  return (stat);
 800d654:	69fb      	ldr	r3, [r7, #28]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3720      	adds	r7, #32
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	2000d0a4 	.word	0x2000d0a4
 800d664:	e000ed04 	.word	0xe000ed04

0800d668 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d674:	2300      	movs	r3, #0
 800d676:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d103      	bne.n	800d686 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d67e:	f06f 0303 	mvn.w	r3, #3
 800d682:	61fb      	str	r3, [r7, #28]
 800d684:	e03e      	b.n	800d704 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d686:	f3ef 8305 	mrs	r3, IPSR
 800d68a:	617b      	str	r3, [r7, #20]
  return(result);
 800d68c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d10f      	bne.n	800d6b2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d692:	f3ef 8310 	mrs	r3, PRIMASK
 800d696:	613b      	str	r3, [r7, #16]
  return(result);
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d105      	bne.n	800d6aa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d69e:	f3ef 8311 	mrs	r3, BASEPRI
 800d6a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d01e      	beq.n	800d6e8 <osSemaphoreRelease+0x80>
 800d6aa:	4b19      	ldr	r3, [pc, #100]	@ (800d710 <osSemaphoreRelease+0xa8>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b02      	cmp	r3, #2
 800d6b0:	d11a      	bne.n	800d6e8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d6b6:	f107 0308 	add.w	r3, r7, #8
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	69b8      	ldr	r0, [r7, #24]
 800d6be:	f000 ff56 	bl	800e56e <xQueueGiveFromISR>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d003      	beq.n	800d6d0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d6c8:	f06f 0302 	mvn.w	r3, #2
 800d6cc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d6ce:	e018      	b.n	800d702 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d015      	beq.n	800d702 <osSemaphoreRelease+0x9a>
 800d6d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d714 <osSemaphoreRelease+0xac>)
 800d6d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d6e6:	e00c      	b.n	800d702 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	69b8      	ldr	r0, [r7, #24]
 800d6f0:	f000 fd90 	bl	800e214 <xQueueGenericSend>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d004      	beq.n	800d704 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d6fa:	f06f 0302 	mvn.w	r3, #2
 800d6fe:	61fb      	str	r3, [r7, #28]
 800d700:	e000      	b.n	800d704 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d702:	bf00      	nop
    }
  }

  return (stat);
 800d704:	69fb      	ldr	r3, [r7, #28]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3720      	adds	r7, #32
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	2000d0a4 	.word	0x2000d0a4
 800d714:	e000ed04 	.word	0xe000ed04

0800d718 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d718:	b580      	push	{r7, lr}
 800d71a:	b088      	sub	sp, #32
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d724:	f3ef 8305 	mrs	r3, IPSR
 800d728:	617b      	str	r3, [r7, #20]
  return(result);
 800d72a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10f      	bne.n	800d750 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d730:	f3ef 8310 	mrs	r3, PRIMASK
 800d734:	613b      	str	r3, [r7, #16]
  return(result);
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d105      	bne.n	800d748 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d73c:	f3ef 8311 	mrs	r3, BASEPRI
 800d740:	60fb      	str	r3, [r7, #12]
  return(result);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d007      	beq.n	800d758 <osSemaphoreDelete+0x40>
 800d748:	4b0d      	ldr	r3, [pc, #52]	@ (800d780 <osSemaphoreDelete+0x68>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d103      	bne.n	800d758 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d750:	f06f 0305 	mvn.w	r3, #5
 800d754:	61fb      	str	r3, [r7, #28]
 800d756:	e00e      	b.n	800d776 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d103      	bne.n	800d766 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d75e:	f06f 0303 	mvn.w	r3, #3
 800d762:	61fb      	str	r3, [r7, #28]
 800d764:	e007      	b.n	800d776 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d766:	69b8      	ldr	r0, [r7, #24]
 800d768:	f001 fbdc 	bl	800ef24 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d770:	69b8      	ldr	r0, [r7, #24]
 800d772:	f001 fa5f 	bl	800ec34 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d776:	69fb      	ldr	r3, [r7, #28]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3720      	adds	r7, #32
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	2000d0a4 	.word	0x2000d0a4

0800d784 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d784:	b580      	push	{r7, lr}
 800d786:	b08c      	sub	sp, #48	@ 0x30
 800d788:	af02      	add	r7, sp, #8
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d790:	2300      	movs	r3, #0
 800d792:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d794:	f3ef 8305 	mrs	r3, IPSR
 800d798:	61bb      	str	r3, [r7, #24]
  return(result);
 800d79a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d16f      	bne.n	800d880 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7a4:	617b      	str	r3, [r7, #20]
  return(result);
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7ac:	f3ef 8311 	mrs	r3, BASEPRI
 800d7b0:	613b      	str	r3, [r7, #16]
  return(result);
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d003      	beq.n	800d7c0 <osMessageQueueNew+0x3c>
 800d7b8:	4b34      	ldr	r3, [pc, #208]	@ (800d88c <osMessageQueueNew+0x108>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d05f      	beq.n	800d880 <osMessageQueueNew+0xfc>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d05c      	beq.n	800d880 <osMessageQueueNew+0xfc>
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d059      	beq.n	800d880 <osMessageQueueNew+0xfc>
    mem = -1;
 800d7cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d7d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d029      	beq.n	800d82c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d012      	beq.n	800d806 <osMessageQueueNew+0x82>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	2b4f      	cmp	r3, #79	@ 0x4f
 800d7e6:	d90e      	bls.n	800d806 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00a      	beq.n	800d806 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	695a      	ldr	r2, [r3, #20]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	68b9      	ldr	r1, [r7, #8]
 800d7f8:	fb01 f303 	mul.w	r3, r1, r3
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d302      	bcc.n	800d806 <osMessageQueueNew+0x82>
        mem = 1;
 800d800:	2301      	movs	r3, #1
 800d802:	623b      	str	r3, [r7, #32]
 800d804:	e014      	b.n	800d830 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	689b      	ldr	r3, [r3, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d110      	bne.n	800d830 <osMessageQueueNew+0xac>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10c      	bne.n	800d830 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d108      	bne.n	800d830 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d104      	bne.n	800d830 <osMessageQueueNew+0xac>
          mem = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	623b      	str	r3, [r7, #32]
 800d82a:	e001      	b.n	800d830 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d10b      	bne.n	800d84e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	691a      	ldr	r2, [r3, #16]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	2100      	movs	r1, #0
 800d840:	9100      	str	r1, [sp, #0]
 800d842:	68b9      	ldr	r1, [r7, #8]
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f000 fac5 	bl	800ddd4 <xQueueGenericCreateStatic>
 800d84a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d84c:	e008      	b.n	800d860 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d84e:	6a3b      	ldr	r3, [r7, #32]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d105      	bne.n	800d860 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d854:	2200      	movs	r2, #0
 800d856:	68b9      	ldr	r1, [r7, #8]
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f000 fb42 	bl	800dee2 <xQueueGenericCreate>
 800d85e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00c      	beq.n	800d880 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d003      	beq.n	800d874 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	61fb      	str	r3, [r7, #28]
 800d872:	e001      	b.n	800d878 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d874:	2300      	movs	r3, #0
 800d876:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d878:	69f9      	ldr	r1, [r7, #28]
 800d87a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d87c:	f001 fb28 	bl	800eed0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d882:	4618      	mov	r0, r3
 800d884:	3728      	adds	r7, #40	@ 0x28
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	2000d0a4 	.word	0x2000d0a4

0800d890 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d890:	b580      	push	{r7, lr}
 800d892:	b08a      	sub	sp, #40	@ 0x28
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	603b      	str	r3, [r7, #0]
 800d89c:	4613      	mov	r3, r2
 800d89e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8a8:	f3ef 8305 	mrs	r3, IPSR
 800d8ac:	61fb      	str	r3, [r7, #28]
  return(result);
 800d8ae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10f      	bne.n	800d8d4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d8b8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d105      	bne.n	800d8cc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d8c0:	f3ef 8311 	mrs	r3, BASEPRI
 800d8c4:	617b      	str	r3, [r7, #20]
  return(result);
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d02c      	beq.n	800d926 <osMessageQueuePut+0x96>
 800d8cc:	4b28      	ldr	r3, [pc, #160]	@ (800d970 <osMessageQueuePut+0xe0>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d128      	bne.n	800d926 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8d4:	6a3b      	ldr	r3, [r7, #32]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d005      	beq.n	800d8e6 <osMessageQueuePut+0x56>
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <osMessageQueuePut+0x56>
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d003      	beq.n	800d8ee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d8e6:	f06f 0303 	mvn.w	r3, #3
 800d8ea:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d8ec:	e039      	b.n	800d962 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d8f2:	f107 0210 	add.w	r2, r7, #16
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	68b9      	ldr	r1, [r7, #8]
 800d8fa:	6a38      	ldr	r0, [r7, #32]
 800d8fc:	f000 fd94 	bl	800e428 <xQueueGenericSendFromISR>
 800d900:	4603      	mov	r3, r0
 800d902:	2b01      	cmp	r3, #1
 800d904:	d003      	beq.n	800d90e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d906:	f06f 0302 	mvn.w	r3, #2
 800d90a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d90c:	e029      	b.n	800d962 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d026      	beq.n	800d962 <osMessageQueuePut+0xd2>
 800d914:	4b17      	ldr	r3, [pc, #92]	@ (800d974 <osMessageQueuePut+0xe4>)
 800d916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d924:	e01d      	b.n	800d962 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d926:	6a3b      	ldr	r3, [r7, #32]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <osMessageQueuePut+0xa2>
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d103      	bne.n	800d93a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d932:	f06f 0303 	mvn.w	r3, #3
 800d936:	627b      	str	r3, [r7, #36]	@ 0x24
 800d938:	e014      	b.n	800d964 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d93a:	2300      	movs	r3, #0
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	68b9      	ldr	r1, [r7, #8]
 800d940:	6a38      	ldr	r0, [r7, #32]
 800d942:	f000 fc67 	bl	800e214 <xQueueGenericSend>
 800d946:	4603      	mov	r3, r0
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d00b      	beq.n	800d964 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d003      	beq.n	800d95a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d952:	f06f 0301 	mvn.w	r3, #1
 800d956:	627b      	str	r3, [r7, #36]	@ 0x24
 800d958:	e004      	b.n	800d964 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d95a:	f06f 0302 	mvn.w	r3, #2
 800d95e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d960:	e000      	b.n	800d964 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d962:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d966:	4618      	mov	r0, r3
 800d968:	3728      	adds	r7, #40	@ 0x28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	2000d0a4 	.word	0x2000d0a4
 800d974:	e000ed04 	.word	0xe000ed04

0800d978 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d978:	b580      	push	{r7, lr}
 800d97a:	b08a      	sub	sp, #40	@ 0x28
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
 800d984:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d98e:	f3ef 8305 	mrs	r3, IPSR
 800d992:	61fb      	str	r3, [r7, #28]
  return(result);
 800d994:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10f      	bne.n	800d9ba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d99a:	f3ef 8310 	mrs	r3, PRIMASK
 800d99e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d105      	bne.n	800d9b2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d9a6:	f3ef 8311 	mrs	r3, BASEPRI
 800d9aa:	617b      	str	r3, [r7, #20]
  return(result);
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d02c      	beq.n	800da0c <osMessageQueueGet+0x94>
 800d9b2:	4b28      	ldr	r3, [pc, #160]	@ (800da54 <osMessageQueueGet+0xdc>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d128      	bne.n	800da0c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d005      	beq.n	800d9cc <osMessageQueueGet+0x54>
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <osMessageQueueGet+0x54>
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d003      	beq.n	800d9d4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d9cc:	f06f 0303 	mvn.w	r3, #3
 800d9d0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d9d2:	e038      	b.n	800da46 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d9d8:	f107 0310 	add.w	r3, r7, #16
 800d9dc:	461a      	mov	r2, r3
 800d9de:	68b9      	ldr	r1, [r7, #8]
 800d9e0:	6a38      	ldr	r0, [r7, #32]
 800d9e2:	f001 f85d 	bl	800eaa0 <xQueueReceiveFromISR>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d003      	beq.n	800d9f4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d9ec:	f06f 0302 	mvn.w	r3, #2
 800d9f0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d9f2:	e028      	b.n	800da46 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d025      	beq.n	800da46 <osMessageQueueGet+0xce>
 800d9fa:	4b17      	ldr	r3, [pc, #92]	@ (800da58 <osMessageQueueGet+0xe0>)
 800d9fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800da0a:	e01c      	b.n	800da46 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800da0c:	6a3b      	ldr	r3, [r7, #32]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d002      	beq.n	800da18 <osMessageQueueGet+0xa0>
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d103      	bne.n	800da20 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800da18:	f06f 0303 	mvn.w	r3, #3
 800da1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800da1e:	e013      	b.n	800da48 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	68b9      	ldr	r1, [r7, #8]
 800da24:	6a38      	ldr	r0, [r7, #32]
 800da26:	f000 fe3b 	bl	800e6a0 <xQueueReceive>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d00b      	beq.n	800da48 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800da36:	f06f 0301 	mvn.w	r3, #1
 800da3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800da3c:	e004      	b.n	800da48 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800da3e:	f06f 0302 	mvn.w	r3, #2
 800da42:	627b      	str	r3, [r7, #36]	@ 0x24
 800da44:	e000      	b.n	800da48 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800da46:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800da48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3728      	adds	r7, #40	@ 0x28
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	2000d0a4 	.word	0x2000d0a4
 800da58:	e000ed04 	.word	0xe000ed04

0800da5c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b088      	sub	sp, #32
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d102      	bne.n	800da74 <osMessageQueueGetCount+0x18>
    count = 0U;
 800da6e:	2300      	movs	r3, #0
 800da70:	61fb      	str	r3, [r7, #28]
 800da72:	e01e      	b.n	800dab2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da74:	f3ef 8305 	mrs	r3, IPSR
 800da78:	617b      	str	r3, [r7, #20]
  return(result);
 800da7a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10f      	bne.n	800daa0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da80:	f3ef 8310 	mrs	r3, PRIMASK
 800da84:	613b      	str	r3, [r7, #16]
  return(result);
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d105      	bne.n	800da98 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da8c:	f3ef 8311 	mrs	r3, BASEPRI
 800da90:	60fb      	str	r3, [r7, #12]
  return(result);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d008      	beq.n	800daaa <osMessageQueueGetCount+0x4e>
 800da98:	4b08      	ldr	r3, [pc, #32]	@ (800dabc <osMessageQueueGetCount+0x60>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b02      	cmp	r3, #2
 800da9e:	d104      	bne.n	800daaa <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800daa0:	69b8      	ldr	r0, [r7, #24]
 800daa2:	f001 f8a6 	bl	800ebf2 <uxQueueMessagesWaitingFromISR>
 800daa6:	61f8      	str	r0, [r7, #28]
 800daa8:	e003      	b.n	800dab2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800daaa:	69b8      	ldr	r0, [r7, #24]
 800daac:	f001 f880 	bl	800ebb0 <uxQueueMessagesWaiting>
 800dab0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800dab2:	69fb      	ldr	r3, [r7, #28]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3720      	adds	r7, #32
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	2000d0a4 	.word	0x2000d0a4

0800dac0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b088      	sub	sp, #32
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dacc:	f3ef 8305 	mrs	r3, IPSR
 800dad0:	617b      	str	r3, [r7, #20]
  return(result);
 800dad2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10f      	bne.n	800daf8 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dad8:	f3ef 8310 	mrs	r3, PRIMASK
 800dadc:	613b      	str	r3, [r7, #16]
  return(result);
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d105      	bne.n	800daf0 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dae4:	f3ef 8311 	mrs	r3, BASEPRI
 800dae8:	60fb      	str	r3, [r7, #12]
  return(result);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d007      	beq.n	800db00 <osMessageQueueDelete+0x40>
 800daf0:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <osMessageQueueDelete+0x68>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	d103      	bne.n	800db00 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800daf8:	f06f 0305 	mvn.w	r3, #5
 800dafc:	61fb      	str	r3, [r7, #28]
 800dafe:	e00e      	b.n	800db1e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d103      	bne.n	800db0e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800db06:	f06f 0303 	mvn.w	r3, #3
 800db0a:	61fb      	str	r3, [r7, #28]
 800db0c:	e007      	b.n	800db1e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800db0e:	69b8      	ldr	r0, [r7, #24]
 800db10:	f001 fa08 	bl	800ef24 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800db14:	2300      	movs	r3, #0
 800db16:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800db18:	69b8      	ldr	r0, [r7, #24]
 800db1a:	f001 f88b 	bl	800ec34 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800db1e:	69fb      	ldr	r3, [r7, #28]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3720      	adds	r7, #32
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	2000d0a4 	.word	0x2000d0a4

0800db2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	4a07      	ldr	r2, [pc, #28]	@ (800db58 <vApplicationGetIdleTaskMemory+0x2c>)
 800db3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	4a06      	ldr	r2, [pc, #24]	@ (800db5c <vApplicationGetIdleTaskMemory+0x30>)
 800db42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db4a:	601a      	str	r2, [r3, #0]
}
 800db4c:	bf00      	nop
 800db4e:	3714      	adds	r7, #20
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	2000d0a8 	.word	0x2000d0a8
 800db5c:	2000d150 	.word	0x2000d150

0800db60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800db60:	b480      	push	{r7}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	4a07      	ldr	r2, [pc, #28]	@ (800db8c <vApplicationGetTimerTaskMemory+0x2c>)
 800db70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	4a06      	ldr	r2, [pc, #24]	@ (800db90 <vApplicationGetTimerTaskMemory+0x30>)
 800db76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800db7e:	601a      	str	r2, [r3, #0]
}
 800db80:	bf00      	nop
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr
 800db8c:	2000d950 	.word	0x2000d950
 800db90:	2000d9f8 	.word	0x2000d9f8

0800db94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f103 0208 	add.w	r2, r3, #8
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dbac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f103 0208 	add.w	r2, r3, #8
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f103 0208 	add.w	r2, r3, #8
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dbc8:	bf00      	nop
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dbe2:	bf00      	nop
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b085      	sub	sp, #20
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	68fa      	ldr	r2, [r7, #12]
 800dc02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	689a      	ldr	r2, [r3, #8]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	683a      	ldr	r2, [r7, #0]
 800dc12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	683a      	ldr	r2, [r7, #0]
 800dc18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	1c5a      	adds	r2, r3, #1
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	601a      	str	r2, [r3, #0]
}
 800dc2a:	bf00      	nop
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc36:	b480      	push	{r7}
 800dc38:	b085      	sub	sp, #20
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
 800dc3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc4c:	d103      	bne.n	800dc56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	691b      	ldr	r3, [r3, #16]
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	e00c      	b.n	800dc70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	3308      	adds	r3, #8
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	e002      	b.n	800dc64 <vListInsert+0x2e>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d2f6      	bcs.n	800dc5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	1c5a      	adds	r2, r3, #1
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	601a      	str	r2, [r3, #0]
}
 800dc9c:	bf00      	nop
 800dc9e:	3714      	adds	r7, #20
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	6892      	ldr	r2, [r2, #8]
 800dcbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	689b      	ldr	r3, [r3, #8]
 800dcc4:	687a      	ldr	r2, [r7, #4]
 800dcc6:	6852      	ldr	r2, [r2, #4]
 800dcc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d103      	bne.n	800dcdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	689a      	ldr	r2, [r3, #8]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	1e5a      	subs	r2, r3, #1
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3714      	adds	r7, #20
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10d      	bne.n	800dd2c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd14:	b672      	cpsid	i
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	b662      	cpsie	i
 800dd24:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dd26:	bf00      	nop
 800dd28:	bf00      	nop
 800dd2a:	e7fd      	b.n	800dd28 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800dd2c:	f002 feee 	bl	8010b0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd38:	68f9      	ldr	r1, [r7, #12]
 800dd3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dd3c:	fb01 f303 	mul.w	r3, r1, r3
 800dd40:	441a      	add	r2, r3
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	68f9      	ldr	r1, [r7, #12]
 800dd60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dd62:	fb01 f303 	mul.w	r3, r1, r3
 800dd66:	441a      	add	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	22ff      	movs	r2, #255	@ 0xff
 800dd70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	22ff      	movs	r2, #255	@ 0xff
 800dd78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d114      	bne.n	800ddac <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d01a      	beq.n	800ddc0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	3310      	adds	r3, #16
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f001 fe7c 	bl	800fa8c <xTaskRemoveFromEventList>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d012      	beq.n	800ddc0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ddd0 <xQueueGenericReset+0xd4>)
 800dd9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dda0:	601a      	str	r2, [r3, #0]
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	e009      	b.n	800ddc0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3310      	adds	r3, #16
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7ff feef 	bl	800db94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3324      	adds	r3, #36	@ 0x24
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7ff feea 	bl	800db94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ddc0:	f002 feda 	bl	8010b78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ddc4:	2301      	movs	r3, #1
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	e000ed04 	.word	0xe000ed04

0800ddd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b08e      	sub	sp, #56	@ 0x38
 800ddd8:	af02      	add	r7, sp, #8
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
 800dde0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10d      	bne.n	800de04 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddec:	b672      	cpsid	i
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	b662      	cpsie	i
 800ddfc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ddfe:	bf00      	nop
 800de00:	bf00      	nop
 800de02:	e7fd      	b.n	800de00 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10d      	bne.n	800de26 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0e:	b672      	cpsid	i
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	b662      	cpsie	i
 800de1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800de20:	bf00      	nop
 800de22:	bf00      	nop
 800de24:	e7fd      	b.n	800de22 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d002      	beq.n	800de32 <xQueueGenericCreateStatic+0x5e>
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <xQueueGenericCreateStatic+0x62>
 800de32:	2301      	movs	r3, #1
 800de34:	e000      	b.n	800de38 <xQueueGenericCreateStatic+0x64>
 800de36:	2300      	movs	r3, #0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10d      	bne.n	800de58 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800de3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de40:	b672      	cpsid	i
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	b662      	cpsie	i
 800de50:	623b      	str	r3, [r7, #32]
}
 800de52:	bf00      	nop
 800de54:	bf00      	nop
 800de56:	e7fd      	b.n	800de54 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d102      	bne.n	800de64 <xQueueGenericCreateStatic+0x90>
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d101      	bne.n	800de68 <xQueueGenericCreateStatic+0x94>
 800de64:	2301      	movs	r3, #1
 800de66:	e000      	b.n	800de6a <xQueueGenericCreateStatic+0x96>
 800de68:	2300      	movs	r3, #0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10d      	bne.n	800de8a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800de6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de72:	b672      	cpsid	i
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	b662      	cpsie	i
 800de82:	61fb      	str	r3, [r7, #28]
}
 800de84:	bf00      	nop
 800de86:	bf00      	nop
 800de88:	e7fd      	b.n	800de86 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800de8a:	2350      	movs	r3, #80	@ 0x50
 800de8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	2b50      	cmp	r3, #80	@ 0x50
 800de92:	d00d      	beq.n	800deb0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de98:	b672      	cpsid	i
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	b662      	cpsie	i
 800dea8:	61bb      	str	r3, [r7, #24]
}
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	e7fd      	b.n	800deac <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800deb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800deb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00d      	beq.n	800ded8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800debc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dec4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800dec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	4613      	mov	r3, r2
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	68b9      	ldr	r1, [r7, #8]
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f000 f848 	bl	800df68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ded8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800deda:	4618      	mov	r0, r3
 800dedc:	3730      	adds	r7, #48	@ 0x30
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b08a      	sub	sp, #40	@ 0x28
 800dee6:	af02      	add	r7, sp, #8
 800dee8:	60f8      	str	r0, [r7, #12]
 800deea:	60b9      	str	r1, [r7, #8]
 800deec:	4613      	mov	r3, r2
 800deee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10d      	bne.n	800df12 <xQueueGenericCreate+0x30>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defa:	b672      	cpsid	i
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	b662      	cpsie	i
 800df0a:	613b      	str	r3, [r7, #16]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d102      	bne.n	800df1e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800df18:	2300      	movs	r3, #0
 800df1a:	61fb      	str	r3, [r7, #28]
 800df1c:	e004      	b.n	800df28 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	fb02 f303 	mul.w	r3, r2, r3
 800df26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	3350      	adds	r3, #80	@ 0x50
 800df2c:	4618      	mov	r0, r3
 800df2e:	f002 ff1b 	bl	8010d68 <pvPortMalloc>
 800df32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d011      	beq.n	800df5e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	3350      	adds	r3, #80	@ 0x50
 800df42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	2200      	movs	r2, #0
 800df48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df4c:	79fa      	ldrb	r2, [r7, #7]
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	4613      	mov	r3, r2
 800df54:	697a      	ldr	r2, [r7, #20]
 800df56:	68b9      	ldr	r1, [r7, #8]
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f000 f805 	bl	800df68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df5e:	69bb      	ldr	r3, [r7, #24]
	}
 800df60:	4618      	mov	r0, r3
 800df62:	3720      	adds	r7, #32
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
 800df74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d103      	bne.n	800df84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	69ba      	ldr	r2, [r7, #24]
 800df80:	601a      	str	r2, [r3, #0]
 800df82:	e002      	b.n	800df8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	68ba      	ldr	r2, [r7, #8]
 800df94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800df96:	2101      	movs	r1, #1
 800df98:	69b8      	ldr	r0, [r7, #24]
 800df9a:	f7ff feaf 	bl	800dcfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	78fa      	ldrb	r2, [r7, #3]
 800dfa2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dfa6:	bf00      	nop
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00e      	beq.n	800dfda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dfce:	2300      	movs	r3, #0
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f91d 	bl	800e214 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dfda:	bf00      	nop
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b086      	sub	sp, #24
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	4603      	mov	r3, r0
 800dfea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dfec:	2301      	movs	r3, #1
 800dfee:	617b      	str	r3, [r7, #20]
 800dff0:	2300      	movs	r3, #0
 800dff2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dff4:	79fb      	ldrb	r3, [r7, #7]
 800dff6:	461a      	mov	r2, r3
 800dff8:	6939      	ldr	r1, [r7, #16]
 800dffa:	6978      	ldr	r0, [r7, #20]
 800dffc:	f7ff ff71 	bl	800dee2 <xQueueGenericCreate>
 800e000:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f7ff ffd3 	bl	800dfae <prvInitialiseMutex>

		return xNewQueue;
 800e008:	68fb      	ldr	r3, [r7, #12]
	}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3718      	adds	r7, #24
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e012:	b580      	push	{r7, lr}
 800e014:	b088      	sub	sp, #32
 800e016:	af02      	add	r7, sp, #8
 800e018:	4603      	mov	r3, r0
 800e01a:	6039      	str	r1, [r7, #0]
 800e01c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e01e:	2301      	movs	r3, #1
 800e020:	617b      	str	r3, [r7, #20]
 800e022:	2300      	movs	r3, #0
 800e024:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e026:	79fb      	ldrb	r3, [r7, #7]
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	2200      	movs	r2, #0
 800e02e:	6939      	ldr	r1, [r7, #16]
 800e030:	6978      	ldr	r0, [r7, #20]
 800e032:	f7ff fecf 	bl	800ddd4 <xQueueGenericCreateStatic>
 800e036:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f7ff ffb8 	bl	800dfae <prvInitialiseMutex>

		return xNewQueue;
 800e03e:	68fb      	ldr	r3, [r7, #12]
	}
 800e040:	4618      	mov	r0, r3
 800e042:	3718      	adds	r7, #24
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e048:	b590      	push	{r4, r7, lr}
 800e04a:	b087      	sub	sp, #28
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10d      	bne.n	800e076 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05e:	b672      	cpsid	i
 800e060:	f383 8811 	msr	BASEPRI, r3
 800e064:	f3bf 8f6f 	isb	sy
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	b662      	cpsie	i
 800e06e:	60fb      	str	r3, [r7, #12]
}
 800e070:	bf00      	nop
 800e072:	bf00      	nop
 800e074:	e7fd      	b.n	800e072 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	689c      	ldr	r4, [r3, #8]
 800e07a:	f001 fed5 	bl	800fe28 <xTaskGetCurrentTaskHandle>
 800e07e:	4603      	mov	r3, r0
 800e080:	429c      	cmp	r4, r3
 800e082:	d111      	bne.n	800e0a8 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	1e5a      	subs	r2, r3, #1
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d105      	bne.n	800e0a2 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e096:	2300      	movs	r3, #0
 800e098:	2200      	movs	r2, #0
 800e09a:	2100      	movs	r1, #0
 800e09c:	6938      	ldr	r0, [r7, #16]
 800e09e:	f000 f8b9 	bl	800e214 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	617b      	str	r3, [r7, #20]
 800e0a6:	e001      	b.n	800e0ac <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e0ac:	697b      	ldr	r3, [r7, #20]
	}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	371c      	adds	r7, #28
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd90      	pop	{r4, r7, pc}

0800e0b6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e0b6:	b590      	push	{r4, r7, lr}
 800e0b8:	b087      	sub	sp, #28
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10d      	bne.n	800e0e6 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800e0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ce:	b672      	cpsid	i
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	b662      	cpsie	i
 800e0de:	60fb      	str	r3, [r7, #12]
}
 800e0e0:	bf00      	nop
 800e0e2:	bf00      	nop
 800e0e4:	e7fd      	b.n	800e0e2 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	689c      	ldr	r4, [r3, #8]
 800e0ea:	f001 fe9d 	bl	800fe28 <xTaskGetCurrentTaskHandle>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	429c      	cmp	r4, r3
 800e0f2:	d107      	bne.n	800e104 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	1c5a      	adds	r2, r3, #1
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e0fe:	2301      	movs	r3, #1
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	e00c      	b.n	800e11e <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6938      	ldr	r0, [r7, #16]
 800e108:	f000 fbb2 	bl	800e870 <xQueueSemaphoreTake>
 800e10c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d004      	beq.n	800e11e <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	1c5a      	adds	r2, r3, #1
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e11e:	697b      	ldr	r3, [r7, #20]
	}
 800e120:	4618      	mov	r0, r3
 800e122:	371c      	adds	r7, #28
 800e124:	46bd      	mov	sp, r7
 800e126:	bd90      	pop	{r4, r7, pc}

0800e128 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	@ 0x28
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10d      	bne.n	800e156 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e13e:	b672      	cpsid	i
 800e140:	f383 8811 	msr	BASEPRI, r3
 800e144:	f3bf 8f6f 	isb	sy
 800e148:	f3bf 8f4f 	dsb	sy
 800e14c:	b662      	cpsie	i
 800e14e:	61bb      	str	r3, [r7, #24]
}
 800e150:	bf00      	nop
 800e152:	bf00      	nop
 800e154:	e7fd      	b.n	800e152 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d90d      	bls.n	800e17a <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e162:	b672      	cpsid	i
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	b662      	cpsie	i
 800e172:	617b      	str	r3, [r7, #20]
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop
 800e178:	e7fd      	b.n	800e176 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e17a:	2302      	movs	r3, #2
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	2100      	movs	r1, #0
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff fe25 	bl	800ddd4 <xQueueGenericCreateStatic>
 800e18a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d002      	beq.n	800e198 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e198:	69fb      	ldr	r3, [r7, #28]
	}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3720      	adds	r7, #32
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b086      	sub	sp, #24
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10d      	bne.n	800e1ce <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b6:	b672      	cpsid	i
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	b662      	cpsie	i
 800e1c6:	613b      	str	r3, [r7, #16]
}
 800e1c8:	bf00      	nop
 800e1ca:	bf00      	nop
 800e1cc:	e7fd      	b.n	800e1ca <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e1ce:	683a      	ldr	r2, [r7, #0]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d90d      	bls.n	800e1f2 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	b672      	cpsid	i
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	b662      	cpsie	i
 800e1ea:	60fb      	str	r3, [r7, #12]
}
 800e1ec:	bf00      	nop
 800e1ee:	bf00      	nop
 800e1f0:	e7fd      	b.n	800e1ee <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f7ff fe73 	bl	800dee2 <xQueueGenericCreate>
 800e1fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e20a:	697b      	ldr	r3, [r7, #20]
	}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08e      	sub	sp, #56	@ 0x38
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e222:	2300      	movs	r3, #0
 800e224:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10d      	bne.n	800e24c <xQueueGenericSend+0x38>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e234:	b672      	cpsid	i
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	b662      	cpsie	i
 800e244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e246:	bf00      	nop
 800e248:	bf00      	nop
 800e24a:	e7fd      	b.n	800e248 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d103      	bne.n	800e25a <xQueueGenericSend+0x46>
 800e252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e256:	2b00      	cmp	r3, #0
 800e258:	d101      	bne.n	800e25e <xQueueGenericSend+0x4a>
 800e25a:	2301      	movs	r3, #1
 800e25c:	e000      	b.n	800e260 <xQueueGenericSend+0x4c>
 800e25e:	2300      	movs	r3, #0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d10d      	bne.n	800e280 <xQueueGenericSend+0x6c>
	__asm volatile
 800e264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e268:	b672      	cpsid	i
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	b662      	cpsie	i
 800e278:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e27a:	bf00      	nop
 800e27c:	bf00      	nop
 800e27e:	e7fd      	b.n	800e27c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b02      	cmp	r3, #2
 800e284:	d103      	bne.n	800e28e <xQueueGenericSend+0x7a>
 800e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d101      	bne.n	800e292 <xQueueGenericSend+0x7e>
 800e28e:	2301      	movs	r3, #1
 800e290:	e000      	b.n	800e294 <xQueueGenericSend+0x80>
 800e292:	2300      	movs	r3, #0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10d      	bne.n	800e2b4 <xQueueGenericSend+0xa0>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29c:	b672      	cpsid	i
 800e29e:	f383 8811 	msr	BASEPRI, r3
 800e2a2:	f3bf 8f6f 	isb	sy
 800e2a6:	f3bf 8f4f 	dsb	sy
 800e2aa:	b662      	cpsie	i
 800e2ac:	623b      	str	r3, [r7, #32]
}
 800e2ae:	bf00      	nop
 800e2b0:	bf00      	nop
 800e2b2:	e7fd      	b.n	800e2b0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2b4:	f001 fdc8 	bl	800fe48 <xTaskGetSchedulerState>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d102      	bne.n	800e2c4 <xQueueGenericSend+0xb0>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d101      	bne.n	800e2c8 <xQueueGenericSend+0xb4>
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	e000      	b.n	800e2ca <xQueueGenericSend+0xb6>
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10d      	bne.n	800e2ea <xQueueGenericSend+0xd6>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d2:	b672      	cpsid	i
 800e2d4:	f383 8811 	msr	BASEPRI, r3
 800e2d8:	f3bf 8f6f 	isb	sy
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	b662      	cpsie	i
 800e2e2:	61fb      	str	r3, [r7, #28]
}
 800e2e4:	bf00      	nop
 800e2e6:	bf00      	nop
 800e2e8:	e7fd      	b.n	800e2e6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2ea:	f002 fc0f 	bl	8010b0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d302      	bcc.n	800e300 <xQueueGenericSend+0xec>
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d129      	bne.n	800e354 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	68b9      	ldr	r1, [r7, #8]
 800e304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e306:	f000 fcd3 	bl	800ecb0 <prvCopyDataToQueue>
 800e30a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e30e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e310:	2b00      	cmp	r3, #0
 800e312:	d010      	beq.n	800e336 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e316:	3324      	adds	r3, #36	@ 0x24
 800e318:	4618      	mov	r0, r3
 800e31a:	f001 fbb7 	bl	800fa8c <xTaskRemoveFromEventList>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d013      	beq.n	800e34c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e324:	4b3f      	ldr	r3, [pc, #252]	@ (800e424 <xQueueGenericSend+0x210>)
 800e326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e32a:	601a      	str	r2, [r3, #0]
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	e00a      	b.n	800e34c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d007      	beq.n	800e34c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e33c:	4b39      	ldr	r3, [pc, #228]	@ (800e424 <xQueueGenericSend+0x210>)
 800e33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e342:	601a      	str	r2, [r3, #0]
 800e344:	f3bf 8f4f 	dsb	sy
 800e348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e34c:	f002 fc14 	bl	8010b78 <vPortExitCritical>
				return pdPASS;
 800e350:	2301      	movs	r3, #1
 800e352:	e063      	b.n	800e41c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d103      	bne.n	800e362 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e35a:	f002 fc0d 	bl	8010b78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e35e:	2300      	movs	r3, #0
 800e360:	e05c      	b.n	800e41c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e364:	2b00      	cmp	r3, #0
 800e366:	d106      	bne.n	800e376 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e368:	f107 0314 	add.w	r3, r7, #20
 800e36c:	4618      	mov	r0, r3
 800e36e:	f001 fbf3 	bl	800fb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e372:	2301      	movs	r3, #1
 800e374:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e376:	f002 fbff 	bl	8010b78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e37a:	f001 f919 	bl	800f5b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e37e:	f002 fbc5 	bl	8010b0c <vPortEnterCritical>
 800e382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e388:	b25b      	sxtb	r3, r3
 800e38a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e38e:	d103      	bne.n	800e398 <xQueueGenericSend+0x184>
 800e390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e39e:	b25b      	sxtb	r3, r3
 800e3a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3a4:	d103      	bne.n	800e3ae <xQueueGenericSend+0x19a>
 800e3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3ae:	f002 fbe3 	bl	8010b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3b2:	1d3a      	adds	r2, r7, #4
 800e3b4:	f107 0314 	add.w	r3, r7, #20
 800e3b8:	4611      	mov	r1, r2
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f001 fbe2 	bl	800fb84 <xTaskCheckForTimeOut>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d124      	bne.n	800e410 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e3c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3c8:	f000 fd6a 	bl	800eea0 <prvIsQueueFull>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d018      	beq.n	800e404 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3d4:	3310      	adds	r3, #16
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	4611      	mov	r1, r2
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f001 fb00 	bl	800f9e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e3e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3e2:	f000 fcf5 	bl	800edd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e3e6:	f001 f8f1 	bl	800f5cc <xTaskResumeAll>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f47f af7c 	bne.w	800e2ea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800e424 <xQueueGenericSend+0x210>)
 800e3f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3f8:	601a      	str	r2, [r3, #0]
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	e772      	b.n	800e2ea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e406:	f000 fce3 	bl	800edd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e40a:	f001 f8df 	bl	800f5cc <xTaskResumeAll>
 800e40e:	e76c      	b.n	800e2ea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e412:	f000 fcdd 	bl	800edd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e416:	f001 f8d9 	bl	800f5cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e41a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3738      	adds	r7, #56	@ 0x38
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	e000ed04 	.word	0xe000ed04

0800e428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b08e      	sub	sp, #56	@ 0x38
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	607a      	str	r2, [r7, #4]
 800e434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d10d      	bne.n	800e45c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e444:	b672      	cpsid	i
 800e446:	f383 8811 	msr	BASEPRI, r3
 800e44a:	f3bf 8f6f 	isb	sy
 800e44e:	f3bf 8f4f 	dsb	sy
 800e452:	b662      	cpsie	i
 800e454:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e456:	bf00      	nop
 800e458:	bf00      	nop
 800e45a:	e7fd      	b.n	800e458 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d103      	bne.n	800e46a <xQueueGenericSendFromISR+0x42>
 800e462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <xQueueGenericSendFromISR+0x46>
 800e46a:	2301      	movs	r3, #1
 800e46c:	e000      	b.n	800e470 <xQueueGenericSendFromISR+0x48>
 800e46e:	2300      	movs	r3, #0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d10d      	bne.n	800e490 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e478:	b672      	cpsid	i
 800e47a:	f383 8811 	msr	BASEPRI, r3
 800e47e:	f3bf 8f6f 	isb	sy
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	b662      	cpsie	i
 800e488:	623b      	str	r3, [r7, #32]
}
 800e48a:	bf00      	nop
 800e48c:	bf00      	nop
 800e48e:	e7fd      	b.n	800e48c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	2b02      	cmp	r3, #2
 800e494:	d103      	bne.n	800e49e <xQueueGenericSendFromISR+0x76>
 800e496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d101      	bne.n	800e4a2 <xQueueGenericSendFromISR+0x7a>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e000      	b.n	800e4a4 <xQueueGenericSendFromISR+0x7c>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d10d      	bne.n	800e4c4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ac:	b672      	cpsid	i
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	b662      	cpsie	i
 800e4bc:	61fb      	str	r3, [r7, #28]
}
 800e4be:	bf00      	nop
 800e4c0:	bf00      	nop
 800e4c2:	e7fd      	b.n	800e4c0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4c4:	f002 fc0a 	bl	8010cdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e4c8:	f3ef 8211 	mrs	r2, BASEPRI
 800e4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d0:	b672      	cpsid	i
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	b662      	cpsie	i
 800e4e0:	61ba      	str	r2, [r7, #24]
 800e4e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e4e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d302      	bcc.n	800e4fa <xQueueGenericSendFromISR+0xd2>
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d12c      	bne.n	800e554 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e504:	683a      	ldr	r2, [r7, #0]
 800e506:	68b9      	ldr	r1, [r7, #8]
 800e508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e50a:	f000 fbd1 	bl	800ecb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e50e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e516:	d112      	bne.n	800e53e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d016      	beq.n	800e54e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e522:	3324      	adds	r3, #36	@ 0x24
 800e524:	4618      	mov	r0, r3
 800e526:	f001 fab1 	bl	800fa8c <xTaskRemoveFromEventList>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00e      	beq.n	800e54e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d00b      	beq.n	800e54e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2201      	movs	r2, #1
 800e53a:	601a      	str	r2, [r3, #0]
 800e53c:	e007      	b.n	800e54e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e53e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e542:	3301      	adds	r3, #1
 800e544:	b2db      	uxtb	r3, r3
 800e546:	b25a      	sxtb	r2, r3
 800e548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e54a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e54e:	2301      	movs	r3, #1
 800e550:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e552:	e001      	b.n	800e558 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e554:	2300      	movs	r3, #0
 800e556:	637b      	str	r3, [r7, #52]	@ 0x34
 800e558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e562:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e566:	4618      	mov	r0, r3
 800e568:	3738      	adds	r7, #56	@ 0x38
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b08e      	sub	sp, #56	@ 0x38
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d10d      	bne.n	800e59e <xQueueGiveFromISR+0x30>
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e586:	b672      	cpsid	i
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	b662      	cpsie	i
 800e596:	623b      	str	r3, [r7, #32]
}
 800e598:	bf00      	nop
 800e59a:	bf00      	nop
 800e59c:	e7fd      	b.n	800e59a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00d      	beq.n	800e5c2 <xQueueGiveFromISR+0x54>
	__asm volatile
 800e5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5aa:	b672      	cpsid	i
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	b662      	cpsie	i
 800e5ba:	61fb      	str	r3, [r7, #28]
}
 800e5bc:	bf00      	nop
 800e5be:	bf00      	nop
 800e5c0:	e7fd      	b.n	800e5be <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d103      	bne.n	800e5d2 <xQueueGiveFromISR+0x64>
 800e5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d101      	bne.n	800e5d6 <xQueueGiveFromISR+0x68>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e000      	b.n	800e5d8 <xQueueGiveFromISR+0x6a>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d10d      	bne.n	800e5f8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e0:	b672      	cpsid	i
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	b662      	cpsie	i
 800e5f0:	61bb      	str	r3, [r7, #24]
}
 800e5f2:	bf00      	nop
 800e5f4:	bf00      	nop
 800e5f6:	e7fd      	b.n	800e5f4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5f8:	f002 fb70 	bl	8010cdc <vPortValidateInterruptPriority>
	__asm volatile
 800e5fc:	f3ef 8211 	mrs	r2, BASEPRI
 800e600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e604:	b672      	cpsid	i
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	b662      	cpsie	i
 800e614:	617a      	str	r2, [r7, #20]
 800e616:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e618:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e61a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e620:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e628:	429a      	cmp	r2, r3
 800e62a:	d22b      	bcs.n	800e684 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e638:	1c5a      	adds	r2, r3, #1
 800e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e63e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e646:	d112      	bne.n	800e66e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d016      	beq.n	800e67e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e652:	3324      	adds	r3, #36	@ 0x24
 800e654:	4618      	mov	r0, r3
 800e656:	f001 fa19 	bl	800fa8c <xTaskRemoveFromEventList>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00e      	beq.n	800e67e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00b      	beq.n	800e67e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	2201      	movs	r2, #1
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	e007      	b.n	800e67e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e66e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e672:	3301      	adds	r3, #1
 800e674:	b2db      	uxtb	r3, r3
 800e676:	b25a      	sxtb	r2, r3
 800e678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e67e:	2301      	movs	r3, #1
 800e680:	637b      	str	r3, [r7, #52]	@ 0x34
 800e682:	e001      	b.n	800e688 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e684:	2300      	movs	r3, #0
 800e686:	637b      	str	r3, [r7, #52]	@ 0x34
 800e688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e68a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f383 8811 	msr	BASEPRI, r3
}
 800e692:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e696:	4618      	mov	r0, r3
 800e698:	3738      	adds	r7, #56	@ 0x38
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
	...

0800e6a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b08c      	sub	sp, #48	@ 0x30
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10d      	bne.n	800e6d6 <xQueueReceive+0x36>
	__asm volatile
 800e6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6be:	b672      	cpsid	i
 800e6c0:	f383 8811 	msr	BASEPRI, r3
 800e6c4:	f3bf 8f6f 	isb	sy
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	b662      	cpsie	i
 800e6ce:	623b      	str	r3, [r7, #32]
}
 800e6d0:	bf00      	nop
 800e6d2:	bf00      	nop
 800e6d4:	e7fd      	b.n	800e6d2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d103      	bne.n	800e6e4 <xQueueReceive+0x44>
 800e6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d101      	bne.n	800e6e8 <xQueueReceive+0x48>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e000      	b.n	800e6ea <xQueueReceive+0x4a>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10d      	bne.n	800e70a <xQueueReceive+0x6a>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6f2:	b672      	cpsid	i
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	b662      	cpsie	i
 800e702:	61fb      	str	r3, [r7, #28]
}
 800e704:	bf00      	nop
 800e706:	bf00      	nop
 800e708:	e7fd      	b.n	800e706 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e70a:	f001 fb9d 	bl	800fe48 <xTaskGetSchedulerState>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d102      	bne.n	800e71a <xQueueReceive+0x7a>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d101      	bne.n	800e71e <xQueueReceive+0x7e>
 800e71a:	2301      	movs	r3, #1
 800e71c:	e000      	b.n	800e720 <xQueueReceive+0x80>
 800e71e:	2300      	movs	r3, #0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10d      	bne.n	800e740 <xQueueReceive+0xa0>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e728:	b672      	cpsid	i
 800e72a:	f383 8811 	msr	BASEPRI, r3
 800e72e:	f3bf 8f6f 	isb	sy
 800e732:	f3bf 8f4f 	dsb	sy
 800e736:	b662      	cpsie	i
 800e738:	61bb      	str	r3, [r7, #24]
}
 800e73a:	bf00      	nop
 800e73c:	bf00      	nop
 800e73e:	e7fd      	b.n	800e73c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e740:	f002 f9e4 	bl	8010b0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e748:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01f      	beq.n	800e790 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e750:	68b9      	ldr	r1, [r7, #8]
 800e752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e754:	f000 fb16 	bl	800ed84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	1e5a      	subs	r2, r3, #1
 800e75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e75e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e762:	691b      	ldr	r3, [r3, #16]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00f      	beq.n	800e788 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e76a:	3310      	adds	r3, #16
 800e76c:	4618      	mov	r0, r3
 800e76e:	f001 f98d 	bl	800fa8c <xTaskRemoveFromEventList>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d007      	beq.n	800e788 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e778:	4b3c      	ldr	r3, [pc, #240]	@ (800e86c <xQueueReceive+0x1cc>)
 800e77a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e77e:	601a      	str	r2, [r3, #0]
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e788:	f002 f9f6 	bl	8010b78 <vPortExitCritical>
				return pdPASS;
 800e78c:	2301      	movs	r3, #1
 800e78e:	e069      	b.n	800e864 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d103      	bne.n	800e79e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e796:	f002 f9ef 	bl	8010b78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e79a:	2300      	movs	r3, #0
 800e79c:	e062      	b.n	800e864 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d106      	bne.n	800e7b2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e7a4:	f107 0310 	add.w	r3, r7, #16
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f001 f9d5 	bl	800fb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7b2:	f002 f9e1 	bl	8010b78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7b6:	f000 fefb 	bl	800f5b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7ba:	f002 f9a7 	bl	8010b0c <vPortEnterCritical>
 800e7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e7c4:	b25b      	sxtb	r3, r3
 800e7c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7ca:	d103      	bne.n	800e7d4 <xQueueReceive+0x134>
 800e7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7da:	b25b      	sxtb	r3, r3
 800e7dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7e0:	d103      	bne.n	800e7ea <xQueueReceive+0x14a>
 800e7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e7ea:	f002 f9c5 	bl	8010b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7ee:	1d3a      	adds	r2, r7, #4
 800e7f0:	f107 0310 	add.w	r3, r7, #16
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f001 f9c4 	bl	800fb84 <xTaskCheckForTimeOut>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d123      	bne.n	800e84a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e804:	f000 fb36 	bl	800ee74 <prvIsQueueEmpty>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d017      	beq.n	800e83e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e810:	3324      	adds	r3, #36	@ 0x24
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	4611      	mov	r1, r2
 800e816:	4618      	mov	r0, r3
 800e818:	f001 f8e2 	bl	800f9e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e81c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e81e:	f000 fad7 	bl	800edd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e822:	f000 fed3 	bl	800f5cc <xTaskResumeAll>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d189      	bne.n	800e740 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e82c:	4b0f      	ldr	r3, [pc, #60]	@ (800e86c <xQueueReceive+0x1cc>)
 800e82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e832:	601a      	str	r2, [r3, #0]
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	e780      	b.n	800e740 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e83e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e840:	f000 fac6 	bl	800edd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e844:	f000 fec2 	bl	800f5cc <xTaskResumeAll>
 800e848:	e77a      	b.n	800e740 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e84a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e84c:	f000 fac0 	bl	800edd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e850:	f000 febc 	bl	800f5cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e856:	f000 fb0d 	bl	800ee74 <prvIsQueueEmpty>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f43f af6f 	beq.w	800e740 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e862:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e864:	4618      	mov	r0, r3
 800e866:	3730      	adds	r7, #48	@ 0x30
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	e000ed04 	.word	0xe000ed04

0800e870 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b08e      	sub	sp, #56	@ 0x38
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e87a:	2300      	movs	r3, #0
 800e87c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e882:	2300      	movs	r3, #0
 800e884:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10d      	bne.n	800e8a8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e890:	b672      	cpsid	i
 800e892:	f383 8811 	msr	BASEPRI, r3
 800e896:	f3bf 8f6f 	isb	sy
 800e89a:	f3bf 8f4f 	dsb	sy
 800e89e:	b662      	cpsie	i
 800e8a0:	623b      	str	r3, [r7, #32]
}
 800e8a2:	bf00      	nop
 800e8a4:	bf00      	nop
 800e8a6:	e7fd      	b.n	800e8a4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00d      	beq.n	800e8cc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b4:	b672      	cpsid	i
 800e8b6:	f383 8811 	msr	BASEPRI, r3
 800e8ba:	f3bf 8f6f 	isb	sy
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	b662      	cpsie	i
 800e8c4:	61fb      	str	r3, [r7, #28]
}
 800e8c6:	bf00      	nop
 800e8c8:	bf00      	nop
 800e8ca:	e7fd      	b.n	800e8c8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8cc:	f001 fabc 	bl	800fe48 <xTaskGetSchedulerState>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d102      	bne.n	800e8dc <xQueueSemaphoreTake+0x6c>
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <xQueueSemaphoreTake+0x70>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e000      	b.n	800e8e2 <xQueueSemaphoreTake+0x72>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10d      	bne.n	800e902 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ea:	b672      	cpsid	i
 800e8ec:	f383 8811 	msr	BASEPRI, r3
 800e8f0:	f3bf 8f6f 	isb	sy
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	b662      	cpsie	i
 800e8fa:	61bb      	str	r3, [r7, #24]
}
 800e8fc:	bf00      	nop
 800e8fe:	bf00      	nop
 800e900:	e7fd      	b.n	800e8fe <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e902:	f002 f903 	bl	8010b0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e90a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d024      	beq.n	800e95c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e914:	1e5a      	subs	r2, r3, #1
 800e916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e918:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d104      	bne.n	800e92c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e922:	f001 fc13 	bl	801014c <pvTaskIncrementMutexHeldCount>
 800e926:	4602      	mov	r2, r0
 800e928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00f      	beq.n	800e954 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e936:	3310      	adds	r3, #16
 800e938:	4618      	mov	r0, r3
 800e93a:	f001 f8a7 	bl	800fa8c <xTaskRemoveFromEventList>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d007      	beq.n	800e954 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e944:	4b55      	ldr	r3, [pc, #340]	@ (800ea9c <xQueueSemaphoreTake+0x22c>)
 800e946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e954:	f002 f910 	bl	8010b78 <vPortExitCritical>
				return pdPASS;
 800e958:	2301      	movs	r3, #1
 800e95a:	e09a      	b.n	800ea92 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d114      	bne.n	800e98c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00d      	beq.n	800e984 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e96c:	b672      	cpsid	i
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	b662      	cpsie	i
 800e97c:	617b      	str	r3, [r7, #20]
}
 800e97e:	bf00      	nop
 800e980:	bf00      	nop
 800e982:	e7fd      	b.n	800e980 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e984:	f002 f8f8 	bl	8010b78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e988:	2300      	movs	r3, #0
 800e98a:	e082      	b.n	800ea92 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d106      	bne.n	800e9a0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e992:	f107 030c 	add.w	r3, r7, #12
 800e996:	4618      	mov	r0, r3
 800e998:	f001 f8de 	bl	800fb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e99c:	2301      	movs	r3, #1
 800e99e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9a0:	f002 f8ea 	bl	8010b78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9a4:	f000 fe04 	bl	800f5b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9a8:	f002 f8b0 	bl	8010b0c <vPortEnterCritical>
 800e9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e9b2:	b25b      	sxtb	r3, r3
 800e9b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9b8:	d103      	bne.n	800e9c2 <xQueueSemaphoreTake+0x152>
 800e9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9c8:	b25b      	sxtb	r3, r3
 800e9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9ce:	d103      	bne.n	800e9d8 <xQueueSemaphoreTake+0x168>
 800e9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9d8:	f002 f8ce 	bl	8010b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9dc:	463a      	mov	r2, r7
 800e9de:	f107 030c 	add.w	r3, r7, #12
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f001 f8cd 	bl	800fb84 <xTaskCheckForTimeOut>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d132      	bne.n	800ea56 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e9f2:	f000 fa3f 	bl	800ee74 <prvIsQueueEmpty>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d026      	beq.n	800ea4a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d109      	bne.n	800ea18 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ea04:	f002 f882 	bl	8010b0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f001 fa39 	bl	800fe84 <xTaskPriorityInherit>
 800ea12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ea14:	f002 f8b0 	bl	8010b78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea1a:	3324      	adds	r3, #36	@ 0x24
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	4611      	mov	r1, r2
 800ea20:	4618      	mov	r0, r3
 800ea22:	f000 ffdd 	bl	800f9e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea28:	f000 f9d2 	bl	800edd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea2c:	f000 fdce 	bl	800f5cc <xTaskResumeAll>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f47f af65 	bne.w	800e902 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ea38:	4b18      	ldr	r3, [pc, #96]	@ (800ea9c <xQueueSemaphoreTake+0x22c>)
 800ea3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	f3bf 8f6f 	isb	sy
 800ea48:	e75b      	b.n	800e902 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ea4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea4c:	f000 f9c0 	bl	800edd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea50:	f000 fdbc 	bl	800f5cc <xTaskResumeAll>
 800ea54:	e755      	b.n	800e902 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ea56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea58:	f000 f9ba 	bl	800edd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea5c:	f000 fdb6 	bl	800f5cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea62:	f000 fa07 	bl	800ee74 <prvIsQueueEmpty>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f43f af4a 	beq.w	800e902 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00d      	beq.n	800ea90 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ea74:	f002 f84a 	bl	8010b0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ea78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea7a:	f000 f901 	bl	800ec80 <prvGetDisinheritPriorityAfterTimeout>
 800ea7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ea80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea86:	4618      	mov	r0, r3
 800ea88:	f001 fad8 	bl	801003c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ea8c:	f002 f874 	bl	8010b78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3738      	adds	r7, #56	@ 0x38
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	e000ed04 	.word	0xe000ed04

0800eaa0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b08e      	sub	sp, #56	@ 0x38
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800eab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d10d      	bne.n	800ead2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800eab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaba:	b672      	cpsid	i
 800eabc:	f383 8811 	msr	BASEPRI, r3
 800eac0:	f3bf 8f6f 	isb	sy
 800eac4:	f3bf 8f4f 	dsb	sy
 800eac8:	b662      	cpsie	i
 800eaca:	623b      	str	r3, [r7, #32]
}
 800eacc:	bf00      	nop
 800eace:	bf00      	nop
 800ead0:	e7fd      	b.n	800eace <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d103      	bne.n	800eae0 <xQueueReceiveFromISR+0x40>
 800ead8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <xQueueReceiveFromISR+0x44>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e000      	b.n	800eae6 <xQueueReceiveFromISR+0x46>
 800eae4:	2300      	movs	r3, #0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d10d      	bne.n	800eb06 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800eaea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaee:	b672      	cpsid	i
 800eaf0:	f383 8811 	msr	BASEPRI, r3
 800eaf4:	f3bf 8f6f 	isb	sy
 800eaf8:	f3bf 8f4f 	dsb	sy
 800eafc:	b662      	cpsie	i
 800eafe:	61fb      	str	r3, [r7, #28]
}
 800eb00:	bf00      	nop
 800eb02:	bf00      	nop
 800eb04:	e7fd      	b.n	800eb02 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb06:	f002 f8e9 	bl	8010cdc <vPortValidateInterruptPriority>
	__asm volatile
 800eb0a:	f3ef 8211 	mrs	r2, BASEPRI
 800eb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb12:	b672      	cpsid	i
 800eb14:	f383 8811 	msr	BASEPRI, r3
 800eb18:	f3bf 8f6f 	isb	sy
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	b662      	cpsie	i
 800eb22:	61ba      	str	r2, [r7, #24]
 800eb24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eb26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb2e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d02f      	beq.n	800eb96 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb40:	68b9      	ldr	r1, [r7, #8]
 800eb42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb44:	f000 f91e 	bl	800ed84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4a:	1e5a      	subs	r2, r3, #1
 800eb4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eb50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800eb54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb58:	d112      	bne.n	800eb80 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d016      	beq.n	800eb90 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb64:	3310      	adds	r3, #16
 800eb66:	4618      	mov	r0, r3
 800eb68:	f000 ff90 	bl	800fa8c <xTaskRemoveFromEventList>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00e      	beq.n	800eb90 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00b      	beq.n	800eb90 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	601a      	str	r2, [r3, #0]
 800eb7e:	e007      	b.n	800eb90 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eb80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb84:	3301      	adds	r3, #1
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	b25a      	sxtb	r2, r3
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800eb90:	2301      	movs	r3, #1
 800eb92:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb94:	e001      	b.n	800eb9a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800eb96:	2300      	movs	r3, #0
 800eb98:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	f383 8811 	msr	BASEPRI, r3
}
 800eba4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3738      	adds	r7, #56	@ 0x38
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d10d      	bne.n	800ebda <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc2:	b672      	cpsid	i
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	b662      	cpsie	i
 800ebd2:	60bb      	str	r3, [r7, #8]
}
 800ebd4:	bf00      	nop
 800ebd6:	bf00      	nop
 800ebd8:	e7fd      	b.n	800ebd6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800ebda:	f001 ff97 	bl	8010b0c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebe2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ebe4:	f001 ffc8 	bl	8010b78 <vPortExitCritical>

	return uxReturn;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ebea:	4618      	mov	r0, r3
 800ebec:	3710      	adds	r7, #16
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}

0800ebf2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ebf2:	b480      	push	{r7}
 800ebf4:	b087      	sub	sp, #28
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10d      	bne.n	800ec20 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800ec04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec08:	b672      	cpsid	i
 800ec0a:	f383 8811 	msr	BASEPRI, r3
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f3bf 8f4f 	dsb	sy
 800ec16:	b662      	cpsie	i
 800ec18:	60fb      	str	r3, [r7, #12]
}
 800ec1a:	bf00      	nop
 800ec1c:	bf00      	nop
 800ec1e:	e7fd      	b.n	800ec1c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec24:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ec26:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ec28:	4618      	mov	r0, r3
 800ec2a:	371c      	adds	r7, #28
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b084      	sub	sp, #16
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10d      	bne.n	800ec62 <vQueueDelete+0x2e>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec4a:	b672      	cpsid	i
 800ec4c:	f383 8811 	msr	BASEPRI, r3
 800ec50:	f3bf 8f6f 	isb	sy
 800ec54:	f3bf 8f4f 	dsb	sy
 800ec58:	b662      	cpsie	i
 800ec5a:	60bb      	str	r3, [r7, #8]
}
 800ec5c:	bf00      	nop
 800ec5e:	bf00      	nop
 800ec60:	e7fd      	b.n	800ec5e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f000 f95e 	bl	800ef24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d102      	bne.n	800ec78 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f002 f94a 	bl	8010f0c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ec78:	bf00      	nop
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d006      	beq.n	800ec9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e001      	b.n	800eca2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eca2:	68fb      	ldr	r3, [r7, #12]
	}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3714      	adds	r7, #20
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10d      	bne.n	800ecea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d14d      	bne.n	800ed72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f001 f93a 	bl	800ff54 <xTaskPriorityDisinherit>
 800ece0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2200      	movs	r2, #0
 800ece6:	609a      	str	r2, [r3, #8]
 800ece8:	e043      	b.n	800ed72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d119      	bne.n	800ed24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6858      	ldr	r0, [r3, #4]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	68b9      	ldr	r1, [r7, #8]
 800ecfc:	f011 fbcd 	bl	802049a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	685a      	ldr	r2, [r3, #4]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed08:	441a      	add	r2, r3
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	685a      	ldr	r2, [r3, #4]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d32b      	bcc.n	800ed72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	605a      	str	r2, [r3, #4]
 800ed22:	e026      	b.n	800ed72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	68d8      	ldr	r0, [r3, #12]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	68b9      	ldr	r1, [r7, #8]
 800ed30:	f011 fbb3 	bl	802049a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68da      	ldr	r2, [r3, #12]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed3c:	425b      	negs	r3, r3
 800ed3e:	441a      	add	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	68da      	ldr	r2, [r3, #12]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d207      	bcs.n	800ed60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	689a      	ldr	r2, [r3, #8]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed58:	425b      	negs	r3, r3
 800ed5a:	441a      	add	r2, r3
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d105      	bne.n	800ed72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	3b01      	subs	r3, #1
 800ed70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	1c5a      	adds	r2, r3, #1
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ed7a:	697b      	ldr	r3, [r7, #20]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3718      	adds	r7, #24
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d018      	beq.n	800edc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	68da      	ldr	r2, [r3, #12]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed9e:	441a      	add	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	68da      	ldr	r2, [r3, #12]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	429a      	cmp	r2, r3
 800edae:	d303      	bcc.n	800edb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	68d9      	ldr	r1, [r3, #12]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edc0:	461a      	mov	r2, r3
 800edc2:	6838      	ldr	r0, [r7, #0]
 800edc4:	f011 fb69 	bl	802049a <memcpy>
	}
}
 800edc8:	bf00      	nop
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800edd8:	f001 fe98 	bl	8010b0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ede2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ede4:	e011      	b.n	800ee0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edea:	2b00      	cmp	r3, #0
 800edec:	d012      	beq.n	800ee14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	3324      	adds	r3, #36	@ 0x24
 800edf2:	4618      	mov	r0, r3
 800edf4:	f000 fe4a 	bl	800fa8c <xTaskRemoveFromEventList>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d001      	beq.n	800ee02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800edfe:	f000 ff29 	bl	800fc54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ee02:	7bfb      	ldrb	r3, [r7, #15]
 800ee04:	3b01      	subs	r3, #1
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	dce9      	bgt.n	800ede6 <prvUnlockQueue+0x16>
 800ee12:	e000      	b.n	800ee16 <prvUnlockQueue+0x46>
					break;
 800ee14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	22ff      	movs	r2, #255	@ 0xff
 800ee1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ee1e:	f001 feab 	bl	8010b78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ee22:	f001 fe73 	bl	8010b0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee2e:	e011      	b.n	800ee54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d012      	beq.n	800ee5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	3310      	adds	r3, #16
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f000 fe25 	bl	800fa8c <xTaskRemoveFromEventList>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee48:	f000 ff04 	bl	800fc54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee4c:	7bbb      	ldrb	r3, [r7, #14]
 800ee4e:	3b01      	subs	r3, #1
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	dce9      	bgt.n	800ee30 <prvUnlockQueue+0x60>
 800ee5c:	e000      	b.n	800ee60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	22ff      	movs	r2, #255	@ 0xff
 800ee64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ee68:	f001 fe86 	bl	8010b78 <vPortExitCritical>
}
 800ee6c:	bf00      	nop
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ee7c:	f001 fe46 	bl	8010b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d102      	bne.n	800ee8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	60fb      	str	r3, [r7, #12]
 800ee8c:	e001      	b.n	800ee92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ee92:	f001 fe71 	bl	8010b78 <vPortExitCritical>

	return xReturn;
 800ee96:	68fb      	ldr	r3, [r7, #12]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eea8:	f001 fe30 	bl	8010b0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d102      	bne.n	800eebe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eeb8:	2301      	movs	r3, #1
 800eeba:	60fb      	str	r3, [r7, #12]
 800eebc:	e001      	b.n	800eec2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eebe:	2300      	movs	r3, #0
 800eec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eec2:	f001 fe59 	bl	8010b78 <vPortExitCritical>

	return xReturn;
 800eec6:	68fb      	ldr	r3, [r7, #12]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eeda:	2300      	movs	r3, #0
 800eedc:	60fb      	str	r3, [r7, #12]
 800eede:	e014      	b.n	800ef0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eee0:	4a0f      	ldr	r2, [pc, #60]	@ (800ef20 <vQueueAddToRegistry+0x50>)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10b      	bne.n	800ef04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eeec:	490c      	ldr	r1, [pc, #48]	@ (800ef20 <vQueueAddToRegistry+0x50>)
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eef6:	4a0a      	ldr	r2, [pc, #40]	@ (800ef20 <vQueueAddToRegistry+0x50>)
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	00db      	lsls	r3, r3, #3
 800eefc:	4413      	add	r3, r2
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ef02:	e006      	b.n	800ef12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	3301      	adds	r3, #1
 800ef08:	60fb      	str	r3, [r7, #12]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2b0b      	cmp	r3, #11
 800ef0e:	d9e7      	bls.n	800eee0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ef10:	bf00      	nop
 800ef12:	bf00      	nop
 800ef14:	3714      	adds	r7, #20
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr
 800ef1e:	bf00      	nop
 800ef20:	2000e9f8 	.word	0x2000e9f8

0800ef24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	e016      	b.n	800ef60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ef32:	4a10      	ldr	r2, [pc, #64]	@ (800ef74 <vQueueUnregisterQueue+0x50>)
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	00db      	lsls	r3, r3, #3
 800ef38:	4413      	add	r3, r2
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d10b      	bne.n	800ef5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ef42:	4a0c      	ldr	r2, [pc, #48]	@ (800ef74 <vQueueUnregisterQueue+0x50>)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2100      	movs	r1, #0
 800ef48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ef4c:	4a09      	ldr	r2, [pc, #36]	@ (800ef74 <vQueueUnregisterQueue+0x50>)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	4413      	add	r3, r2
 800ef54:	2200      	movs	r2, #0
 800ef56:	605a      	str	r2, [r3, #4]
				break;
 800ef58:	e006      	b.n	800ef68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2b0b      	cmp	r3, #11
 800ef64:	d9e5      	bls.n	800ef32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ef66:	bf00      	nop
 800ef68:	bf00      	nop
 800ef6a:	3714      	adds	r7, #20
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr
 800ef74:	2000e9f8 	.word	0x2000e9f8

0800ef78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b086      	sub	sp, #24
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ef88:	f001 fdc0 	bl	8010b0c <vPortEnterCritical>
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef92:	b25b      	sxtb	r3, r3
 800ef94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef98:	d103      	bne.n	800efa2 <vQueueWaitForMessageRestricted+0x2a>
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efa8:	b25b      	sxtb	r3, r3
 800efaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800efae:	d103      	bne.n	800efb8 <vQueueWaitForMessageRestricted+0x40>
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efb8:	f001 fdde 	bl	8010b78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d106      	bne.n	800efd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	3324      	adds	r3, #36	@ 0x24
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	68b9      	ldr	r1, [r7, #8]
 800efcc:	4618      	mov	r0, r3
 800efce:	f000 fd2f 	bl	800fa30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800efd2:	6978      	ldr	r0, [r7, #20]
 800efd4:	f7ff fefc 	bl	800edd0 <prvUnlockQueue>
	}
 800efd8:	bf00      	nop
 800efda:	3718      	adds	r7, #24
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b08e      	sub	sp, #56	@ 0x38
 800efe4:	af04      	add	r7, sp, #16
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800efee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d10d      	bne.n	800f010 <xTaskCreateStatic+0x30>
	__asm volatile
 800eff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eff8:	b672      	cpsid	i
 800effa:	f383 8811 	msr	BASEPRI, r3
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	b662      	cpsie	i
 800f008:	623b      	str	r3, [r7, #32]
}
 800f00a:	bf00      	nop
 800f00c:	bf00      	nop
 800f00e:	e7fd      	b.n	800f00c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f012:	2b00      	cmp	r3, #0
 800f014:	d10d      	bne.n	800f032 <xTaskCreateStatic+0x52>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01a:	b672      	cpsid	i
 800f01c:	f383 8811 	msr	BASEPRI, r3
 800f020:	f3bf 8f6f 	isb	sy
 800f024:	f3bf 8f4f 	dsb	sy
 800f028:	b662      	cpsie	i
 800f02a:	61fb      	str	r3, [r7, #28]
}
 800f02c:	bf00      	nop
 800f02e:	bf00      	nop
 800f030:	e7fd      	b.n	800f02e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f032:	23a8      	movs	r3, #168	@ 0xa8
 800f034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	2ba8      	cmp	r3, #168	@ 0xa8
 800f03a:	d00d      	beq.n	800f058 <xTaskCreateStatic+0x78>
	__asm volatile
 800f03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f040:	b672      	cpsid	i
 800f042:	f383 8811 	msr	BASEPRI, r3
 800f046:	f3bf 8f6f 	isb	sy
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	b662      	cpsie	i
 800f050:	61bb      	str	r3, [r7, #24]
}
 800f052:	bf00      	nop
 800f054:	bf00      	nop
 800f056:	e7fd      	b.n	800f054 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f058:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d01e      	beq.n	800f09e <xTaskCreateStatic+0xbe>
 800f060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f062:	2b00      	cmp	r3, #0
 800f064:	d01b      	beq.n	800f09e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f068:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f06c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f06e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f072:	2202      	movs	r2, #2
 800f074:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f078:	2300      	movs	r3, #0
 800f07a:	9303      	str	r3, [sp, #12]
 800f07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f07e:	9302      	str	r3, [sp, #8]
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	68b9      	ldr	r1, [r7, #8]
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f000 f851 	bl	800f138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f096:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f098:	f000 f8f8 	bl	800f28c <prvAddNewTaskToReadyList>
 800f09c:	e001      	b.n	800f0a2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f0a2:	697b      	ldr	r3, [r7, #20]
	}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3728      	adds	r7, #40	@ 0x28
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b08c      	sub	sp, #48	@ 0x30
 800f0b0:	af04      	add	r7, sp, #16
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	603b      	str	r3, [r7, #0]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f0bc:	88fb      	ldrh	r3, [r7, #6]
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f001 fe51 	bl	8010d68 <pvPortMalloc>
 800f0c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d00e      	beq.n	800f0ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f0ce:	20a8      	movs	r0, #168	@ 0xa8
 800f0d0:	f001 fe4a 	bl	8010d68 <pvPortMalloc>
 800f0d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d003      	beq.n	800f0e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	697a      	ldr	r2, [r7, #20]
 800f0e0:	631a      	str	r2, [r3, #48]	@ 0x30
 800f0e2:	e005      	b.n	800f0f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f0e4:	6978      	ldr	r0, [r7, #20]
 800f0e6:	f001 ff11 	bl	8010f0c <vPortFree>
 800f0ea:	e001      	b.n	800f0f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d017      	beq.n	800f126 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f0fe:	88fa      	ldrh	r2, [r7, #6]
 800f100:	2300      	movs	r3, #0
 800f102:	9303      	str	r3, [sp, #12]
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	9302      	str	r3, [sp, #8]
 800f108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f10a:	9301      	str	r3, [sp, #4]
 800f10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	68b9      	ldr	r1, [r7, #8]
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f000 f80f 	bl	800f138 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f11a:	69f8      	ldr	r0, [r7, #28]
 800f11c:	f000 f8b6 	bl	800f28c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f120:	2301      	movs	r3, #1
 800f122:	61bb      	str	r3, [r7, #24]
 800f124:	e002      	b.n	800f12c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f12a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f12c:	69bb      	ldr	r3, [r7, #24]
	}
 800f12e:	4618      	mov	r0, r3
 800f130:	3720      	adds	r7, #32
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b088      	sub	sp, #32
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f148:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	461a      	mov	r2, r3
 800f150:	21a5      	movs	r1, #165	@ 0xa5
 800f152:	f011 f8cf 	bl	80202f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f15a:	6879      	ldr	r1, [r7, #4]
 800f15c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f160:	440b      	add	r3, r1
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	4413      	add	r3, r2
 800f166:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	f023 0307 	bic.w	r3, r3, #7
 800f16e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	f003 0307 	and.w	r3, r3, #7
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00d      	beq.n	800f196 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f17e:	b672      	cpsid	i
 800f180:	f383 8811 	msr	BASEPRI, r3
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	b662      	cpsie	i
 800f18e:	617b      	str	r3, [r7, #20]
}
 800f190:	bf00      	nop
 800f192:	bf00      	nop
 800f194:	e7fd      	b.n	800f192 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d01f      	beq.n	800f1dc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f19c:	2300      	movs	r3, #0
 800f19e:	61fb      	str	r3, [r7, #28]
 800f1a0:	e012      	b.n	800f1c8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	7819      	ldrb	r1, [r3, #0]
 800f1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	3334      	adds	r3, #52	@ 0x34
 800f1b2:	460a      	mov	r2, r1
 800f1b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	4413      	add	r3, r2
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d006      	beq.n	800f1d0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	61fb      	str	r3, [r7, #28]
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	2b0f      	cmp	r3, #15
 800f1cc:	d9e9      	bls.n	800f1a2 <prvInitialiseNewTask+0x6a>
 800f1ce:	e000      	b.n	800f1d2 <prvInitialiseNewTask+0x9a>
			{
				break;
 800f1d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f1da:	e003      	b.n	800f1e4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e6:	2b37      	cmp	r3, #55	@ 0x37
 800f1e8:	d901      	bls.n	800f1ee <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f1ea:	2337      	movs	r3, #55	@ 0x37
 800f1ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f202:	3304      	adds	r3, #4
 800f204:	4618      	mov	r0, r3
 800f206:	f7fe fce5 	bl	800dbd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f20c:	3318      	adds	r3, #24
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fe fce0 	bl	800dbd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f218:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f222:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f228:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f22c:	2200      	movs	r2, #0
 800f22e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	2200      	movs	r2, #0
 800f236:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f23c:	3354      	adds	r3, #84	@ 0x54
 800f23e:	224c      	movs	r2, #76	@ 0x4c
 800f240:	2100      	movs	r1, #0
 800f242:	4618      	mov	r0, r3
 800f244:	f011 f856 	bl	80202f4 <memset>
 800f248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24a:	4a0d      	ldr	r2, [pc, #52]	@ (800f280 <prvInitialiseNewTask+0x148>)
 800f24c:	659a      	str	r2, [r3, #88]	@ 0x58
 800f24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f250:	4a0c      	ldr	r2, [pc, #48]	@ (800f284 <prvInitialiseNewTask+0x14c>)
 800f252:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f256:	4a0c      	ldr	r2, [pc, #48]	@ (800f288 <prvInitialiseNewTask+0x150>)
 800f258:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f25a:	683a      	ldr	r2, [r7, #0]
 800f25c:	68f9      	ldr	r1, [r7, #12]
 800f25e:	69b8      	ldr	r0, [r7, #24]
 800f260:	f001 fb44 	bl	80108ec <pxPortInitialiseStack>
 800f264:	4602      	mov	r2, r0
 800f266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f268:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f276:	bf00      	nop
 800f278:	3720      	adds	r7, #32
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	2002d774 	.word	0x2002d774
 800f284:	2002d7dc 	.word	0x2002d7dc
 800f288:	2002d844 	.word	0x2002d844

0800f28c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f294:	f001 fc3a 	bl	8010b0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f298:	4b2d      	ldr	r3, [pc, #180]	@ (800f350 <prvAddNewTaskToReadyList+0xc4>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	3301      	adds	r3, #1
 800f29e:	4a2c      	ldr	r2, [pc, #176]	@ (800f350 <prvAddNewTaskToReadyList+0xc4>)
 800f2a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f2a2:	4b2c      	ldr	r3, [pc, #176]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d109      	bne.n	800f2be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f2aa:	4a2a      	ldr	r2, [pc, #168]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f2b0:	4b27      	ldr	r3, [pc, #156]	@ (800f350 <prvAddNewTaskToReadyList+0xc4>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d110      	bne.n	800f2da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f2b8:	f000 fcf0 	bl	800fc9c <prvInitialiseTaskLists>
 800f2bc:	e00d      	b.n	800f2da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f2be:	4b26      	ldr	r3, [pc, #152]	@ (800f358 <prvAddNewTaskToReadyList+0xcc>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d109      	bne.n	800f2da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f2c6:	4b23      	ldr	r3, [pc, #140]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d802      	bhi.n	800f2da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f2d4:	4a1f      	ldr	r2, [pc, #124]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f2da:	4b20      	ldr	r3, [pc, #128]	@ (800f35c <prvAddNewTaskToReadyList+0xd0>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	4a1e      	ldr	r2, [pc, #120]	@ (800f35c <prvAddNewTaskToReadyList+0xd0>)
 800f2e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800f35c <prvAddNewTaskToReadyList+0xd0>)
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2f0:	4b1b      	ldr	r3, [pc, #108]	@ (800f360 <prvAddNewTaskToReadyList+0xd4>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d903      	bls.n	800f300 <prvAddNewTaskToReadyList+0x74>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fc:	4a18      	ldr	r2, [pc, #96]	@ (800f360 <prvAddNewTaskToReadyList+0xd4>)
 800f2fe:	6013      	str	r3, [r2, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f304:	4613      	mov	r3, r2
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	4a15      	ldr	r2, [pc, #84]	@ (800f364 <prvAddNewTaskToReadyList+0xd8>)
 800f30e:	441a      	add	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	3304      	adds	r3, #4
 800f314:	4619      	mov	r1, r3
 800f316:	4610      	mov	r0, r2
 800f318:	f7fe fc69 	bl	800dbee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f31c:	f001 fc2c 	bl	8010b78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f320:	4b0d      	ldr	r3, [pc, #52]	@ (800f358 <prvAddNewTaskToReadyList+0xcc>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00e      	beq.n	800f346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f328:	4b0a      	ldr	r3, [pc, #40]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f332:	429a      	cmp	r2, r3
 800f334:	d207      	bcs.n	800f346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f336:	4b0c      	ldr	r3, [pc, #48]	@ (800f368 <prvAddNewTaskToReadyList+0xdc>)
 800f338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f346:	bf00      	nop
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	2000ef2c 	.word	0x2000ef2c
 800f354:	2000ea58 	.word	0x2000ea58
 800f358:	2000ef38 	.word	0x2000ef38
 800f35c:	2000ef48 	.word	0x2000ef48
 800f360:	2000ef34 	.word	0x2000ef34
 800f364:	2000ea5c 	.word	0x2000ea5c
 800f368:	e000ed04 	.word	0xe000ed04

0800f36c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f374:	f001 fbca 	bl	8010b0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <vTaskDelete+0x18>
 800f37e:	4b2e      	ldr	r3, [pc, #184]	@ (800f438 <vTaskDelete+0xcc>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	e000      	b.n	800f386 <vTaskDelete+0x1a>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	3304      	adds	r3, #4
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe fc8b 	bl	800dca8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f396:	2b00      	cmp	r3, #0
 800f398:	d004      	beq.n	800f3a4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3318      	adds	r3, #24
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7fe fc82 	bl	800dca8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800f3a4:	4b25      	ldr	r3, [pc, #148]	@ (800f43c <vTaskDelete+0xd0>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	4a24      	ldr	r2, [pc, #144]	@ (800f43c <vTaskDelete+0xd0>)
 800f3ac:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800f3ae:	4b22      	ldr	r3, [pc, #136]	@ (800f438 <vTaskDelete+0xcc>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	68fa      	ldr	r2, [r7, #12]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d10b      	bne.n	800f3d0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3304      	adds	r3, #4
 800f3bc:	4619      	mov	r1, r3
 800f3be:	4820      	ldr	r0, [pc, #128]	@ (800f440 <vTaskDelete+0xd4>)
 800f3c0:	f7fe fc15 	bl	800dbee <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800f3c4:	4b1f      	ldr	r3, [pc, #124]	@ (800f444 <vTaskDelete+0xd8>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	4a1e      	ldr	r2, [pc, #120]	@ (800f444 <vTaskDelete+0xd8>)
 800f3cc:	6013      	str	r3, [r2, #0]
 800f3ce:	e009      	b.n	800f3e4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800f448 <vTaskDelete+0xdc>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	4a1c      	ldr	r2, [pc, #112]	@ (800f448 <vTaskDelete+0xdc>)
 800f3d8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f000 fccc 	bl	800fd78 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f3e0:	f000 fd02 	bl	800fde8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800f3e4:	f001 fbc8 	bl	8010b78 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f3e8:	4b18      	ldr	r3, [pc, #96]	@ (800f44c <vTaskDelete+0xe0>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d01e      	beq.n	800f42e <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 800f3f0:	4b11      	ldr	r3, [pc, #68]	@ (800f438 <vTaskDelete+0xcc>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d119      	bne.n	800f42e <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f3fa:	4b15      	ldr	r3, [pc, #84]	@ (800f450 <vTaskDelete+0xe4>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d00d      	beq.n	800f41e <vTaskDelete+0xb2>
	__asm volatile
 800f402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f406:	b672      	cpsid	i
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	b662      	cpsie	i
 800f416:	60bb      	str	r3, [r7, #8]
}
 800f418:	bf00      	nop
 800f41a:	bf00      	nop
 800f41c:	e7fd      	b.n	800f41a <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800f41e:	4b0d      	ldr	r3, [pc, #52]	@ (800f454 <vTaskDelete+0xe8>)
 800f420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f424:	601a      	str	r2, [r3, #0]
 800f426:	f3bf 8f4f 	dsb	sy
 800f42a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f42e:	bf00      	nop
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	2000ea58 	.word	0x2000ea58
 800f43c:	2000ef48 	.word	0x2000ef48
 800f440:	2000ef00 	.word	0x2000ef00
 800f444:	2000ef14 	.word	0x2000ef14
 800f448:	2000ef2c 	.word	0x2000ef2c
 800f44c:	2000ef38 	.word	0x2000ef38
 800f450:	2000ef54 	.word	0x2000ef54
 800f454:	e000ed04 	.word	0xe000ed04

0800f458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f460:	2300      	movs	r3, #0
 800f462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d01a      	beq.n	800f4a0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f46a:	4b15      	ldr	r3, [pc, #84]	@ (800f4c0 <vTaskDelay+0x68>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00d      	beq.n	800f48e <vTaskDelay+0x36>
	__asm volatile
 800f472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f476:	b672      	cpsid	i
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	b662      	cpsie	i
 800f486:	60bb      	str	r3, [r7, #8]
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	e7fd      	b.n	800f48a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f48e:	f000 f88f 	bl	800f5b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f492:	2100      	movs	r1, #0
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 fe6d 	bl	8010174 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f49a:	f000 f897 	bl	800f5cc <xTaskResumeAll>
 800f49e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d107      	bne.n	800f4b6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f4a6:	4b07      	ldr	r3, [pc, #28]	@ (800f4c4 <vTaskDelay+0x6c>)
 800f4a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4ac:	601a      	str	r2, [r3, #0]
 800f4ae:	f3bf 8f4f 	dsb	sy
 800f4b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4b6:	bf00      	nop
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	2000ef54 	.word	0x2000ef54
 800f4c4:	e000ed04 	.word	0xe000ed04

0800f4c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b08a      	sub	sp, #40	@ 0x28
 800f4cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f4d6:	463a      	mov	r2, r7
 800f4d8:	1d39      	adds	r1, r7, #4
 800f4da:	f107 0308 	add.w	r3, r7, #8
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fe fb24 	bl	800db2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f4e4:	6839      	ldr	r1, [r7, #0]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	9202      	str	r2, [sp, #8]
 800f4ec:	9301      	str	r3, [sp, #4]
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	460a      	mov	r2, r1
 800f4f6:	4926      	ldr	r1, [pc, #152]	@ (800f590 <vTaskStartScheduler+0xc8>)
 800f4f8:	4826      	ldr	r0, [pc, #152]	@ (800f594 <vTaskStartScheduler+0xcc>)
 800f4fa:	f7ff fd71 	bl	800efe0 <xTaskCreateStatic>
 800f4fe:	4603      	mov	r3, r0
 800f500:	4a25      	ldr	r2, [pc, #148]	@ (800f598 <vTaskStartScheduler+0xd0>)
 800f502:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f504:	4b24      	ldr	r3, [pc, #144]	@ (800f598 <vTaskStartScheduler+0xd0>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d002      	beq.n	800f512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f50c:	2301      	movs	r3, #1
 800f50e:	617b      	str	r3, [r7, #20]
 800f510:	e001      	b.n	800f516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f512:	2300      	movs	r3, #0
 800f514:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d102      	bne.n	800f522 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f51c:	f000 fe7e 	bl	801021c <xTimerCreateTimerTask>
 800f520:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d11d      	bne.n	800f564 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f52c:	b672      	cpsid	i
 800f52e:	f383 8811 	msr	BASEPRI, r3
 800f532:	f3bf 8f6f 	isb	sy
 800f536:	f3bf 8f4f 	dsb	sy
 800f53a:	b662      	cpsie	i
 800f53c:	613b      	str	r3, [r7, #16]
}
 800f53e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f540:	4b16      	ldr	r3, [pc, #88]	@ (800f59c <vTaskStartScheduler+0xd4>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	3354      	adds	r3, #84	@ 0x54
 800f546:	4a16      	ldr	r2, [pc, #88]	@ (800f5a0 <vTaskStartScheduler+0xd8>)
 800f548:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f54a:	4b16      	ldr	r3, [pc, #88]	@ (800f5a4 <vTaskStartScheduler+0xdc>)
 800f54c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f550:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f552:	4b15      	ldr	r3, [pc, #84]	@ (800f5a8 <vTaskStartScheduler+0xe0>)
 800f554:	2201      	movs	r2, #1
 800f556:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f558:	4b14      	ldr	r3, [pc, #80]	@ (800f5ac <vTaskStartScheduler+0xe4>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f55e:	f001 fa57 	bl	8010a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f562:	e011      	b.n	800f588 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f56a:	d10d      	bne.n	800f588 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f570:	b672      	cpsid	i
 800f572:	f383 8811 	msr	BASEPRI, r3
 800f576:	f3bf 8f6f 	isb	sy
 800f57a:	f3bf 8f4f 	dsb	sy
 800f57e:	b662      	cpsie	i
 800f580:	60fb      	str	r3, [r7, #12]
}
 800f582:	bf00      	nop
 800f584:	bf00      	nop
 800f586:	e7fd      	b.n	800f584 <vTaskStartScheduler+0xbc>
}
 800f588:	bf00      	nop
 800f58a:	3718      	adds	r7, #24
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bd80      	pop	{r7, pc}
 800f590:	08021148 	.word	0x08021148
 800f594:	0800fc6d 	.word	0x0800fc6d
 800f598:	2000ef50 	.word	0x2000ef50
 800f59c:	2000ea58 	.word	0x2000ea58
 800f5a0:	2000003c 	.word	0x2000003c
 800f5a4:	2000ef4c 	.word	0x2000ef4c
 800f5a8:	2000ef38 	.word	0x2000ef38
 800f5ac:	2000ef30 	.word	0x2000ef30

0800f5b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f5b4:	4b04      	ldr	r3, [pc, #16]	@ (800f5c8 <vTaskSuspendAll+0x18>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	4a03      	ldr	r2, [pc, #12]	@ (800f5c8 <vTaskSuspendAll+0x18>)
 800f5bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f5be:	bf00      	nop
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr
 800f5c8:	2000ef54 	.word	0x2000ef54

0800f5cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f5da:	4b43      	ldr	r3, [pc, #268]	@ (800f6e8 <xTaskResumeAll+0x11c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d10d      	bne.n	800f5fe <xTaskResumeAll+0x32>
	__asm volatile
 800f5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5e6:	b672      	cpsid	i
 800f5e8:	f383 8811 	msr	BASEPRI, r3
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	b662      	cpsie	i
 800f5f6:	603b      	str	r3, [r7, #0]
}
 800f5f8:	bf00      	nop
 800f5fa:	bf00      	nop
 800f5fc:	e7fd      	b.n	800f5fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f5fe:	f001 fa85 	bl	8010b0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f602:	4b39      	ldr	r3, [pc, #228]	@ (800f6e8 <xTaskResumeAll+0x11c>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	3b01      	subs	r3, #1
 800f608:	4a37      	ldr	r2, [pc, #220]	@ (800f6e8 <xTaskResumeAll+0x11c>)
 800f60a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f60c:	4b36      	ldr	r3, [pc, #216]	@ (800f6e8 <xTaskResumeAll+0x11c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d162      	bne.n	800f6da <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f614:	4b35      	ldr	r3, [pc, #212]	@ (800f6ec <xTaskResumeAll+0x120>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d05e      	beq.n	800f6da <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f61c:	e02f      	b.n	800f67e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f61e:	4b34      	ldr	r3, [pc, #208]	@ (800f6f0 <xTaskResumeAll+0x124>)
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	3318      	adds	r3, #24
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fe fb3c 	bl	800dca8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	3304      	adds	r3, #4
 800f634:	4618      	mov	r0, r3
 800f636:	f7fe fb37 	bl	800dca8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f63e:	4b2d      	ldr	r3, [pc, #180]	@ (800f6f4 <xTaskResumeAll+0x128>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	429a      	cmp	r2, r3
 800f644:	d903      	bls.n	800f64e <xTaskResumeAll+0x82>
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f64a:	4a2a      	ldr	r2, [pc, #168]	@ (800f6f4 <xTaskResumeAll+0x128>)
 800f64c:	6013      	str	r3, [r2, #0]
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f652:	4613      	mov	r3, r2
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	4413      	add	r3, r2
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	4a27      	ldr	r2, [pc, #156]	@ (800f6f8 <xTaskResumeAll+0x12c>)
 800f65c:	441a      	add	r2, r3
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	3304      	adds	r3, #4
 800f662:	4619      	mov	r1, r3
 800f664:	4610      	mov	r0, r2
 800f666:	f7fe fac2 	bl	800dbee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f66e:	4b23      	ldr	r3, [pc, #140]	@ (800f6fc <xTaskResumeAll+0x130>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f674:	429a      	cmp	r2, r3
 800f676:	d302      	bcc.n	800f67e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f678:	4b21      	ldr	r3, [pc, #132]	@ (800f700 <xTaskResumeAll+0x134>)
 800f67a:	2201      	movs	r2, #1
 800f67c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f67e:	4b1c      	ldr	r3, [pc, #112]	@ (800f6f0 <xTaskResumeAll+0x124>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d1cb      	bne.n	800f61e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f68c:	f000 fbac 	bl	800fde8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f690:	4b1c      	ldr	r3, [pc, #112]	@ (800f704 <xTaskResumeAll+0x138>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d010      	beq.n	800f6be <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f69c:	f000 f858 	bl	800f750 <xTaskIncrementTick>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d002      	beq.n	800f6ac <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f6a6:	4b16      	ldr	r3, [pc, #88]	@ (800f700 <xTaskResumeAll+0x134>)
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d1f1      	bne.n	800f69c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f6b8:	4b12      	ldr	r3, [pc, #72]	@ (800f704 <xTaskResumeAll+0x138>)
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f6be:	4b10      	ldr	r3, [pc, #64]	@ (800f700 <xTaskResumeAll+0x134>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d009      	beq.n	800f6da <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f6ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f708 <xTaskResumeAll+0x13c>)
 800f6cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6d0:	601a      	str	r2, [r3, #0]
 800f6d2:	f3bf 8f4f 	dsb	sy
 800f6d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6da:	f001 fa4d 	bl	8010b78 <vPortExitCritical>

	return xAlreadyYielded;
 800f6de:	68bb      	ldr	r3, [r7, #8]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3710      	adds	r7, #16
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	2000ef54 	.word	0x2000ef54
 800f6ec:	2000ef2c 	.word	0x2000ef2c
 800f6f0:	2000eeec 	.word	0x2000eeec
 800f6f4:	2000ef34 	.word	0x2000ef34
 800f6f8:	2000ea5c 	.word	0x2000ea5c
 800f6fc:	2000ea58 	.word	0x2000ea58
 800f700:	2000ef40 	.word	0x2000ef40
 800f704:	2000ef3c 	.word	0x2000ef3c
 800f708:	e000ed04 	.word	0xe000ed04

0800f70c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f712:	4b05      	ldr	r3, [pc, #20]	@ (800f728 <xTaskGetTickCount+0x1c>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f718:	687b      	ldr	r3, [r7, #4]
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	370c      	adds	r7, #12
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop
 800f728:	2000ef30 	.word	0x2000ef30

0800f72c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f732:	f001 fad3 	bl	8010cdc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f736:	2300      	movs	r3, #0
 800f738:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f73a:	4b04      	ldr	r3, [pc, #16]	@ (800f74c <xTaskGetTickCountFromISR+0x20>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f740:	683b      	ldr	r3, [r7, #0]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3708      	adds	r7, #8
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	2000ef30 	.word	0x2000ef30

0800f750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f756:	2300      	movs	r3, #0
 800f758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f75a:	4b50      	ldr	r3, [pc, #320]	@ (800f89c <xTaskIncrementTick+0x14c>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	f040 808c 	bne.w	800f87c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f764:	4b4e      	ldr	r3, [pc, #312]	@ (800f8a0 <xTaskIncrementTick+0x150>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	3301      	adds	r3, #1
 800f76a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f76c:	4a4c      	ldr	r2, [pc, #304]	@ (800f8a0 <xTaskIncrementTick+0x150>)
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d123      	bne.n	800f7c0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f778:	4b4a      	ldr	r3, [pc, #296]	@ (800f8a4 <xTaskIncrementTick+0x154>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d00d      	beq.n	800f79e <xTaskIncrementTick+0x4e>
	__asm volatile
 800f782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f786:	b672      	cpsid	i
 800f788:	f383 8811 	msr	BASEPRI, r3
 800f78c:	f3bf 8f6f 	isb	sy
 800f790:	f3bf 8f4f 	dsb	sy
 800f794:	b662      	cpsie	i
 800f796:	603b      	str	r3, [r7, #0]
}
 800f798:	bf00      	nop
 800f79a:	bf00      	nop
 800f79c:	e7fd      	b.n	800f79a <xTaskIncrementTick+0x4a>
 800f79e:	4b41      	ldr	r3, [pc, #260]	@ (800f8a4 <xTaskIncrementTick+0x154>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	60fb      	str	r3, [r7, #12]
 800f7a4:	4b40      	ldr	r3, [pc, #256]	@ (800f8a8 <xTaskIncrementTick+0x158>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a3e      	ldr	r2, [pc, #248]	@ (800f8a4 <xTaskIncrementTick+0x154>)
 800f7aa:	6013      	str	r3, [r2, #0]
 800f7ac:	4a3e      	ldr	r2, [pc, #248]	@ (800f8a8 <xTaskIncrementTick+0x158>)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	6013      	str	r3, [r2, #0]
 800f7b2:	4b3e      	ldr	r3, [pc, #248]	@ (800f8ac <xTaskIncrementTick+0x15c>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	4a3c      	ldr	r2, [pc, #240]	@ (800f8ac <xTaskIncrementTick+0x15c>)
 800f7ba:	6013      	str	r3, [r2, #0]
 800f7bc:	f000 fb14 	bl	800fde8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f7c0:	4b3b      	ldr	r3, [pc, #236]	@ (800f8b0 <xTaskIncrementTick+0x160>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	693a      	ldr	r2, [r7, #16]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d349      	bcc.n	800f85e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7ca:	4b36      	ldr	r3, [pc, #216]	@ (800f8a4 <xTaskIncrementTick+0x154>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d104      	bne.n	800f7de <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7d4:	4b36      	ldr	r3, [pc, #216]	@ (800f8b0 <xTaskIncrementTick+0x160>)
 800f7d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f7da:	601a      	str	r2, [r3, #0]
					break;
 800f7dc:	e03f      	b.n	800f85e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7de:	4b31      	ldr	r3, [pc, #196]	@ (800f8a4 <xTaskIncrementTick+0x154>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f7ee:	693a      	ldr	r2, [r7, #16]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d203      	bcs.n	800f7fe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f7f6:	4a2e      	ldr	r2, [pc, #184]	@ (800f8b0 <xTaskIncrementTick+0x160>)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f7fc:	e02f      	b.n	800f85e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	3304      	adds	r3, #4
 800f802:	4618      	mov	r0, r3
 800f804:	f7fe fa50 	bl	800dca8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d004      	beq.n	800f81a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	3318      	adds	r3, #24
 800f814:	4618      	mov	r0, r3
 800f816:	f7fe fa47 	bl	800dca8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f81e:	4b25      	ldr	r3, [pc, #148]	@ (800f8b4 <xTaskIncrementTick+0x164>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	429a      	cmp	r2, r3
 800f824:	d903      	bls.n	800f82e <xTaskIncrementTick+0xde>
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f82a:	4a22      	ldr	r2, [pc, #136]	@ (800f8b4 <xTaskIncrementTick+0x164>)
 800f82c:	6013      	str	r3, [r2, #0]
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f832:	4613      	mov	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	4413      	add	r3, r2
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	4a1f      	ldr	r2, [pc, #124]	@ (800f8b8 <xTaskIncrementTick+0x168>)
 800f83c:	441a      	add	r2, r3
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	3304      	adds	r3, #4
 800f842:	4619      	mov	r1, r3
 800f844:	4610      	mov	r0, r2
 800f846:	f7fe f9d2 	bl	800dbee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f84e:	4b1b      	ldr	r3, [pc, #108]	@ (800f8bc <xTaskIncrementTick+0x16c>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f854:	429a      	cmp	r2, r3
 800f856:	d3b8      	bcc.n	800f7ca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f858:	2301      	movs	r3, #1
 800f85a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f85c:	e7b5      	b.n	800f7ca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f85e:	4b17      	ldr	r3, [pc, #92]	@ (800f8bc <xTaskIncrementTick+0x16c>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f864:	4914      	ldr	r1, [pc, #80]	@ (800f8b8 <xTaskIncrementTick+0x168>)
 800f866:	4613      	mov	r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4413      	add	r3, r2
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	440b      	add	r3, r1
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d907      	bls.n	800f886 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f876:	2301      	movs	r3, #1
 800f878:	617b      	str	r3, [r7, #20]
 800f87a:	e004      	b.n	800f886 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f87c:	4b10      	ldr	r3, [pc, #64]	@ (800f8c0 <xTaskIncrementTick+0x170>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	3301      	adds	r3, #1
 800f882:	4a0f      	ldr	r2, [pc, #60]	@ (800f8c0 <xTaskIncrementTick+0x170>)
 800f884:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f886:	4b0f      	ldr	r3, [pc, #60]	@ (800f8c4 <xTaskIncrementTick+0x174>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d001      	beq.n	800f892 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f88e:	2301      	movs	r3, #1
 800f890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f892:	697b      	ldr	r3, [r7, #20]
}
 800f894:	4618      	mov	r0, r3
 800f896:	3718      	adds	r7, #24
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	2000ef54 	.word	0x2000ef54
 800f8a0:	2000ef30 	.word	0x2000ef30
 800f8a4:	2000eee4 	.word	0x2000eee4
 800f8a8:	2000eee8 	.word	0x2000eee8
 800f8ac:	2000ef44 	.word	0x2000ef44
 800f8b0:	2000ef4c 	.word	0x2000ef4c
 800f8b4:	2000ef34 	.word	0x2000ef34
 800f8b8:	2000ea5c 	.word	0x2000ea5c
 800f8bc:	2000ea58 	.word	0x2000ea58
 800f8c0:	2000ef3c 	.word	0x2000ef3c
 800f8c4:	2000ef40 	.word	0x2000ef40

0800f8c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b086      	sub	sp, #24
 800f8cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f8ce:	4b3e      	ldr	r3, [pc, #248]	@ (800f9c8 <vTaskSwitchContext+0x100>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d003      	beq.n	800f8de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f8d6:	4b3d      	ldr	r3, [pc, #244]	@ (800f9cc <vTaskSwitchContext+0x104>)
 800f8d8:	2201      	movs	r2, #1
 800f8da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8dc:	e070      	b.n	800f9c0 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f8de:	4b3b      	ldr	r3, [pc, #236]	@ (800f9cc <vTaskSwitchContext+0x104>)
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f8e4:	4b3a      	ldr	r3, [pc, #232]	@ (800f9d0 <vTaskSwitchContext+0x108>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ea:	613b      	str	r3, [r7, #16]
 800f8ec:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f8f0:	60fb      	str	r3, [r7, #12]
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	68fa      	ldr	r2, [r7, #12]
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d111      	bne.n	800f920 <vTaskSwitchContext+0x58>
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	3304      	adds	r3, #4
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	429a      	cmp	r2, r3
 800f906:	d10b      	bne.n	800f920 <vTaskSwitchContext+0x58>
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	3308      	adds	r3, #8
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	429a      	cmp	r2, r3
 800f912:	d105      	bne.n	800f920 <vTaskSwitchContext+0x58>
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	330c      	adds	r3, #12
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	68fa      	ldr	r2, [r7, #12]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d008      	beq.n	800f932 <vTaskSwitchContext+0x6a>
 800f920:	4b2b      	ldr	r3, [pc, #172]	@ (800f9d0 <vTaskSwitchContext+0x108>)
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	4b2a      	ldr	r3, [pc, #168]	@ (800f9d0 <vTaskSwitchContext+0x108>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	3334      	adds	r3, #52	@ 0x34
 800f92a:	4619      	mov	r1, r3
 800f92c:	4610      	mov	r0, r2
 800f92e:	f7f0 ffdd 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f932:	4b28      	ldr	r3, [pc, #160]	@ (800f9d4 <vTaskSwitchContext+0x10c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	617b      	str	r3, [r7, #20]
 800f938:	e013      	b.n	800f962 <vTaskSwitchContext+0x9a>
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d10d      	bne.n	800f95c <vTaskSwitchContext+0x94>
	__asm volatile
 800f940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f944:	b672      	cpsid	i
 800f946:	f383 8811 	msr	BASEPRI, r3
 800f94a:	f3bf 8f6f 	isb	sy
 800f94e:	f3bf 8f4f 	dsb	sy
 800f952:	b662      	cpsie	i
 800f954:	607b      	str	r3, [r7, #4]
}
 800f956:	bf00      	nop
 800f958:	bf00      	nop
 800f95a:	e7fd      	b.n	800f958 <vTaskSwitchContext+0x90>
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	3b01      	subs	r3, #1
 800f960:	617b      	str	r3, [r7, #20]
 800f962:	491d      	ldr	r1, [pc, #116]	@ (800f9d8 <vTaskSwitchContext+0x110>)
 800f964:	697a      	ldr	r2, [r7, #20]
 800f966:	4613      	mov	r3, r2
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	4413      	add	r3, r2
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	440b      	add	r3, r1
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d0e1      	beq.n	800f93a <vTaskSwitchContext+0x72>
 800f976:	697a      	ldr	r2, [r7, #20]
 800f978:	4613      	mov	r3, r2
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	4413      	add	r3, r2
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	4a15      	ldr	r2, [pc, #84]	@ (800f9d8 <vTaskSwitchContext+0x110>)
 800f982:	4413      	add	r3, r2
 800f984:	60bb      	str	r3, [r7, #8]
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	685a      	ldr	r2, [r3, #4]
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	605a      	str	r2, [r3, #4]
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	685a      	ldr	r2, [r3, #4]
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	3308      	adds	r3, #8
 800f998:	429a      	cmp	r2, r3
 800f99a:	d104      	bne.n	800f9a6 <vTaskSwitchContext+0xde>
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	685a      	ldr	r2, [r3, #4]
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	605a      	str	r2, [r3, #4]
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	4a08      	ldr	r2, [pc, #32]	@ (800f9d0 <vTaskSwitchContext+0x108>)
 800f9ae:	6013      	str	r3, [r2, #0]
 800f9b0:	4a08      	ldr	r2, [pc, #32]	@ (800f9d4 <vTaskSwitchContext+0x10c>)
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f9b6:	4b06      	ldr	r3, [pc, #24]	@ (800f9d0 <vTaskSwitchContext+0x108>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	3354      	adds	r3, #84	@ 0x54
 800f9bc:	4a07      	ldr	r2, [pc, #28]	@ (800f9dc <vTaskSwitchContext+0x114>)
 800f9be:	6013      	str	r3, [r2, #0]
}
 800f9c0:	bf00      	nop
 800f9c2:	3718      	adds	r7, #24
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	2000ef54 	.word	0x2000ef54
 800f9cc:	2000ef40 	.word	0x2000ef40
 800f9d0:	2000ea58 	.word	0x2000ea58
 800f9d4:	2000ef34 	.word	0x2000ef34
 800f9d8:	2000ea5c 	.word	0x2000ea5c
 800f9dc:	2000003c 	.word	0x2000003c

0800f9e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d10d      	bne.n	800fa0c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f4:	b672      	cpsid	i
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	b662      	cpsie	i
 800fa04:	60fb      	str	r3, [r7, #12]
}
 800fa06:	bf00      	nop
 800fa08:	bf00      	nop
 800fa0a:	e7fd      	b.n	800fa08 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa0c:	4b07      	ldr	r3, [pc, #28]	@ (800fa2c <vTaskPlaceOnEventList+0x4c>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	3318      	adds	r3, #24
 800fa12:	4619      	mov	r1, r3
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f7fe f90e 	bl	800dc36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa1a:	2101      	movs	r1, #1
 800fa1c:	6838      	ldr	r0, [r7, #0]
 800fa1e:	f000 fba9 	bl	8010174 <prvAddCurrentTaskToDelayedList>
}
 800fa22:	bf00      	nop
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	2000ea58 	.word	0x2000ea58

0800fa30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b086      	sub	sp, #24
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d10d      	bne.n	800fa5e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800fa42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa46:	b672      	cpsid	i
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	b662      	cpsie	i
 800fa56:	617b      	str	r3, [r7, #20]
}
 800fa58:	bf00      	nop
 800fa5a:	bf00      	nop
 800fa5c:	e7fd      	b.n	800fa5a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa5e:	4b0a      	ldr	r3, [pc, #40]	@ (800fa88 <vTaskPlaceOnEventListRestricted+0x58>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3318      	adds	r3, #24
 800fa64:	4619      	mov	r1, r3
 800fa66:	68f8      	ldr	r0, [r7, #12]
 800fa68:	f7fe f8c1 	bl	800dbee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d002      	beq.n	800fa78 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800fa72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fa78:	6879      	ldr	r1, [r7, #4]
 800fa7a:	68b8      	ldr	r0, [r7, #8]
 800fa7c:	f000 fb7a 	bl	8010174 <prvAddCurrentTaskToDelayedList>
	}
 800fa80:	bf00      	nop
 800fa82:	3718      	adds	r7, #24
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	2000ea58 	.word	0x2000ea58

0800fa8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b086      	sub	sp, #24
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d10d      	bne.n	800fabe <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800faa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa6:	b672      	cpsid	i
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	b662      	cpsie	i
 800fab6:	60fb      	str	r3, [r7, #12]
}
 800fab8:	bf00      	nop
 800faba:	bf00      	nop
 800fabc:	e7fd      	b.n	800faba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	3318      	adds	r3, #24
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe f8f0 	bl	800dca8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fac8:	4b1d      	ldr	r3, [pc, #116]	@ (800fb40 <xTaskRemoveFromEventList+0xb4>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d11d      	bne.n	800fb0c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	3304      	adds	r3, #4
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7fe f8e7 	bl	800dca8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fade:	4b19      	ldr	r3, [pc, #100]	@ (800fb44 <xTaskRemoveFromEventList+0xb8>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d903      	bls.n	800faee <xTaskRemoveFromEventList+0x62>
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faea:	4a16      	ldr	r2, [pc, #88]	@ (800fb44 <xTaskRemoveFromEventList+0xb8>)
 800faec:	6013      	str	r3, [r2, #0]
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faf2:	4613      	mov	r3, r2
 800faf4:	009b      	lsls	r3, r3, #2
 800faf6:	4413      	add	r3, r2
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	4a13      	ldr	r2, [pc, #76]	@ (800fb48 <xTaskRemoveFromEventList+0xbc>)
 800fafc:	441a      	add	r2, r3
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	3304      	adds	r3, #4
 800fb02:	4619      	mov	r1, r3
 800fb04:	4610      	mov	r0, r2
 800fb06:	f7fe f872 	bl	800dbee <vListInsertEnd>
 800fb0a:	e005      	b.n	800fb18 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	3318      	adds	r3, #24
 800fb10:	4619      	mov	r1, r3
 800fb12:	480e      	ldr	r0, [pc, #56]	@ (800fb4c <xTaskRemoveFromEventList+0xc0>)
 800fb14:	f7fe f86b 	bl	800dbee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb1c:	4b0c      	ldr	r3, [pc, #48]	@ (800fb50 <xTaskRemoveFromEventList+0xc4>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d905      	bls.n	800fb32 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fb26:	2301      	movs	r3, #1
 800fb28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fb2a:	4b0a      	ldr	r3, [pc, #40]	@ (800fb54 <xTaskRemoveFromEventList+0xc8>)
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	e001      	b.n	800fb36 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fb36:	697b      	ldr	r3, [r7, #20]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	2000ef54 	.word	0x2000ef54
 800fb44:	2000ef34 	.word	0x2000ef34
 800fb48:	2000ea5c 	.word	0x2000ea5c
 800fb4c:	2000eeec 	.word	0x2000eeec
 800fb50:	2000ea58 	.word	0x2000ea58
 800fb54:	2000ef40 	.word	0x2000ef40

0800fb58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb60:	4b06      	ldr	r3, [pc, #24]	@ (800fb7c <vTaskInternalSetTimeOutState+0x24>)
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb68:	4b05      	ldr	r3, [pc, #20]	@ (800fb80 <vTaskInternalSetTimeOutState+0x28>)
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	605a      	str	r2, [r3, #4]
}
 800fb70:	bf00      	nop
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr
 800fb7c:	2000ef44 	.word	0x2000ef44
 800fb80:	2000ef30 	.word	0x2000ef30

0800fb84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b088      	sub	sp, #32
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10d      	bne.n	800fbb0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800fb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb98:	b672      	cpsid	i
 800fb9a:	f383 8811 	msr	BASEPRI, r3
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	f3bf 8f4f 	dsb	sy
 800fba6:	b662      	cpsie	i
 800fba8:	613b      	str	r3, [r7, #16]
}
 800fbaa:	bf00      	nop
 800fbac:	bf00      	nop
 800fbae:	e7fd      	b.n	800fbac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d10d      	bne.n	800fbd2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800fbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbba:	b672      	cpsid	i
 800fbbc:	f383 8811 	msr	BASEPRI, r3
 800fbc0:	f3bf 8f6f 	isb	sy
 800fbc4:	f3bf 8f4f 	dsb	sy
 800fbc8:	b662      	cpsie	i
 800fbca:	60fb      	str	r3, [r7, #12]
}
 800fbcc:	bf00      	nop
 800fbce:	bf00      	nop
 800fbd0:	e7fd      	b.n	800fbce <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800fbd2:	f000 ff9b 	bl	8010b0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fbd6:	4b1d      	ldr	r3, [pc, #116]	@ (800fc4c <xTaskCheckForTimeOut+0xc8>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	69ba      	ldr	r2, [r7, #24]
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fbee:	d102      	bne.n	800fbf6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	61fb      	str	r3, [r7, #28]
 800fbf4:	e023      	b.n	800fc3e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	4b15      	ldr	r3, [pc, #84]	@ (800fc50 <xTaskCheckForTimeOut+0xcc>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d007      	beq.n	800fc12 <xTaskCheckForTimeOut+0x8e>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	69ba      	ldr	r2, [r7, #24]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d302      	bcc.n	800fc12 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	61fb      	str	r3, [r7, #28]
 800fc10:	e015      	b.n	800fc3e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	697a      	ldr	r2, [r7, #20]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d20b      	bcs.n	800fc34 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	1ad2      	subs	r2, r2, r3
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7ff ff95 	bl	800fb58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	61fb      	str	r3, [r7, #28]
 800fc32:	e004      	b.n	800fc3e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	2200      	movs	r2, #0
 800fc38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fc3e:	f000 ff9b 	bl	8010b78 <vPortExitCritical>

	return xReturn;
 800fc42:	69fb      	ldr	r3, [r7, #28]
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3720      	adds	r7, #32
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	2000ef30 	.word	0x2000ef30
 800fc50:	2000ef44 	.word	0x2000ef44

0800fc54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc54:	b480      	push	{r7}
 800fc56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc58:	4b03      	ldr	r3, [pc, #12]	@ (800fc68 <vTaskMissedYield+0x14>)
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	601a      	str	r2, [r3, #0]
}
 800fc5e:	bf00      	nop
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	2000ef40 	.word	0x2000ef40

0800fc6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc74:	f000 f852 	bl	800fd1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc78:	4b06      	ldr	r3, [pc, #24]	@ (800fc94 <prvIdleTask+0x28>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d9f9      	bls.n	800fc74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc80:	4b05      	ldr	r3, [pc, #20]	@ (800fc98 <prvIdleTask+0x2c>)
 800fc82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc86:	601a      	str	r2, [r3, #0]
 800fc88:	f3bf 8f4f 	dsb	sy
 800fc8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fc90:	e7f0      	b.n	800fc74 <prvIdleTask+0x8>
 800fc92:	bf00      	nop
 800fc94:	2000ea5c 	.word	0x2000ea5c
 800fc98:	e000ed04 	.word	0xe000ed04

0800fc9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fca2:	2300      	movs	r3, #0
 800fca4:	607b      	str	r3, [r7, #4]
 800fca6:	e00c      	b.n	800fcc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	4413      	add	r3, r2
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	4a12      	ldr	r2, [pc, #72]	@ (800fcfc <prvInitialiseTaskLists+0x60>)
 800fcb4:	4413      	add	r3, r2
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fd ff6c 	bl	800db94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	607b      	str	r3, [r7, #4]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2b37      	cmp	r3, #55	@ 0x37
 800fcc6:	d9ef      	bls.n	800fca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fcc8:	480d      	ldr	r0, [pc, #52]	@ (800fd00 <prvInitialiseTaskLists+0x64>)
 800fcca:	f7fd ff63 	bl	800db94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fcce:	480d      	ldr	r0, [pc, #52]	@ (800fd04 <prvInitialiseTaskLists+0x68>)
 800fcd0:	f7fd ff60 	bl	800db94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fcd4:	480c      	ldr	r0, [pc, #48]	@ (800fd08 <prvInitialiseTaskLists+0x6c>)
 800fcd6:	f7fd ff5d 	bl	800db94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fcda:	480c      	ldr	r0, [pc, #48]	@ (800fd0c <prvInitialiseTaskLists+0x70>)
 800fcdc:	f7fd ff5a 	bl	800db94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fce0:	480b      	ldr	r0, [pc, #44]	@ (800fd10 <prvInitialiseTaskLists+0x74>)
 800fce2:	f7fd ff57 	bl	800db94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fce6:	4b0b      	ldr	r3, [pc, #44]	@ (800fd14 <prvInitialiseTaskLists+0x78>)
 800fce8:	4a05      	ldr	r2, [pc, #20]	@ (800fd00 <prvInitialiseTaskLists+0x64>)
 800fcea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fcec:	4b0a      	ldr	r3, [pc, #40]	@ (800fd18 <prvInitialiseTaskLists+0x7c>)
 800fcee:	4a05      	ldr	r2, [pc, #20]	@ (800fd04 <prvInitialiseTaskLists+0x68>)
 800fcf0:	601a      	str	r2, [r3, #0]
}
 800fcf2:	bf00      	nop
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	2000ea5c 	.word	0x2000ea5c
 800fd00:	2000eebc 	.word	0x2000eebc
 800fd04:	2000eed0 	.word	0x2000eed0
 800fd08:	2000eeec 	.word	0x2000eeec
 800fd0c:	2000ef00 	.word	0x2000ef00
 800fd10:	2000ef18 	.word	0x2000ef18
 800fd14:	2000eee4 	.word	0x2000eee4
 800fd18:	2000eee8 	.word	0x2000eee8

0800fd1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd22:	e019      	b.n	800fd58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fd24:	f000 fef2 	bl	8010b0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd28:	4b10      	ldr	r3, [pc, #64]	@ (800fd6c <prvCheckTasksWaitingTermination+0x50>)
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3304      	adds	r3, #4
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fd ffb7 	bl	800dca8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd70 <prvCheckTasksWaitingTermination+0x54>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	3b01      	subs	r3, #1
 800fd40:	4a0b      	ldr	r2, [pc, #44]	@ (800fd70 <prvCheckTasksWaitingTermination+0x54>)
 800fd42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fd44:	4b0b      	ldr	r3, [pc, #44]	@ (800fd74 <prvCheckTasksWaitingTermination+0x58>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	4a0a      	ldr	r2, [pc, #40]	@ (800fd74 <prvCheckTasksWaitingTermination+0x58>)
 800fd4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fd4e:	f000 ff13 	bl	8010b78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 f810 	bl	800fd78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd58:	4b06      	ldr	r3, [pc, #24]	@ (800fd74 <prvCheckTasksWaitingTermination+0x58>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1e1      	bne.n	800fd24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd60:	bf00      	nop
 800fd62:	bf00      	nop
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	2000ef00 	.word	0x2000ef00
 800fd70:	2000ef2c 	.word	0x2000ef2c
 800fd74:	2000ef14 	.word	0x2000ef14

0800fd78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	3354      	adds	r3, #84	@ 0x54
 800fd84:	4618      	mov	r0, r3
 800fd86:	f010 facd 	bl	8020324 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d108      	bne.n	800fda6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f001 f8b7 	bl	8010f0c <vPortFree>
				vPortFree( pxTCB );
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f001 f8b4 	bl	8010f0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fda4:	e01b      	b.n	800fdde <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d103      	bne.n	800fdb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f001 f8ab 	bl	8010f0c <vPortFree>
	}
 800fdb6:	e012      	b.n	800fdde <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fdbe:	2b02      	cmp	r3, #2
 800fdc0:	d00d      	beq.n	800fdde <prvDeleteTCB+0x66>
	__asm volatile
 800fdc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc6:	b672      	cpsid	i
 800fdc8:	f383 8811 	msr	BASEPRI, r3
 800fdcc:	f3bf 8f6f 	isb	sy
 800fdd0:	f3bf 8f4f 	dsb	sy
 800fdd4:	b662      	cpsie	i
 800fdd6:	60fb      	str	r3, [r7, #12]
}
 800fdd8:	bf00      	nop
 800fdda:	bf00      	nop
 800fddc:	e7fd      	b.n	800fdda <prvDeleteTCB+0x62>
	}
 800fdde:	bf00      	nop
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
	...

0800fde8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdee:	4b0c      	ldr	r3, [pc, #48]	@ (800fe20 <prvResetNextTaskUnblockTime+0x38>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d104      	bne.n	800fe02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fdf8:	4b0a      	ldr	r3, [pc, #40]	@ (800fe24 <prvResetNextTaskUnblockTime+0x3c>)
 800fdfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fdfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fe00:	e008      	b.n	800fe14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe02:	4b07      	ldr	r3, [pc, #28]	@ (800fe20 <prvResetNextTaskUnblockTime+0x38>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	4a04      	ldr	r2, [pc, #16]	@ (800fe24 <prvResetNextTaskUnblockTime+0x3c>)
 800fe12:	6013      	str	r3, [r2, #0]
}
 800fe14:	bf00      	nop
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	2000eee4 	.word	0x2000eee4
 800fe24:	2000ef4c 	.word	0x2000ef4c

0800fe28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fe2e:	4b05      	ldr	r3, [pc, #20]	@ (800fe44 <xTaskGetCurrentTaskHandle+0x1c>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fe34:	687b      	ldr	r3, [r7, #4]
	}
 800fe36:	4618      	mov	r0, r3
 800fe38:	370c      	adds	r7, #12
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	2000ea58 	.word	0x2000ea58

0800fe48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fe4e:	4b0b      	ldr	r3, [pc, #44]	@ (800fe7c <xTaskGetSchedulerState+0x34>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d102      	bne.n	800fe5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe56:	2301      	movs	r3, #1
 800fe58:	607b      	str	r3, [r7, #4]
 800fe5a:	e008      	b.n	800fe6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe5c:	4b08      	ldr	r3, [pc, #32]	@ (800fe80 <xTaskGetSchedulerState+0x38>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d102      	bne.n	800fe6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe64:	2302      	movs	r3, #2
 800fe66:	607b      	str	r3, [r7, #4]
 800fe68:	e001      	b.n	800fe6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe6e:	687b      	ldr	r3, [r7, #4]
	}
 800fe70:	4618      	mov	r0, r3
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr
 800fe7c:	2000ef38 	.word	0x2000ef38
 800fe80:	2000ef54 	.word	0x2000ef54

0800fe84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fe90:	2300      	movs	r3, #0
 800fe92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d051      	beq.n	800ff3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe9e:	4b2a      	ldr	r3, [pc, #168]	@ (800ff48 <xTaskPriorityInherit+0xc4>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d241      	bcs.n	800ff2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	699b      	ldr	r3, [r3, #24]
 800feac:	2b00      	cmp	r3, #0
 800feae:	db06      	blt.n	800febe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feb0:	4b25      	ldr	r3, [pc, #148]	@ (800ff48 <xTaskPriorityInherit+0xc4>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	6959      	ldr	r1, [r3, #20]
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fec6:	4613      	mov	r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	4413      	add	r3, r2
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	4a1f      	ldr	r2, [pc, #124]	@ (800ff4c <xTaskPriorityInherit+0xc8>)
 800fed0:	4413      	add	r3, r2
 800fed2:	4299      	cmp	r1, r3
 800fed4:	d122      	bne.n	800ff1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	3304      	adds	r3, #4
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fd fee4 	bl	800dca8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fee0:	4b19      	ldr	r3, [pc, #100]	@ (800ff48 <xTaskPriorityInherit+0xc4>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800feee:	4b18      	ldr	r3, [pc, #96]	@ (800ff50 <xTaskPriorityInherit+0xcc>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d903      	bls.n	800fefe <xTaskPriorityInherit+0x7a>
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fefa:	4a15      	ldr	r2, [pc, #84]	@ (800ff50 <xTaskPriorityInherit+0xcc>)
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff02:	4613      	mov	r3, r2
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	4413      	add	r3, r2
 800ff08:	009b      	lsls	r3, r3, #2
 800ff0a:	4a10      	ldr	r2, [pc, #64]	@ (800ff4c <xTaskPriorityInherit+0xc8>)
 800ff0c:	441a      	add	r2, r3
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	3304      	adds	r3, #4
 800ff12:	4619      	mov	r1, r3
 800ff14:	4610      	mov	r0, r2
 800ff16:	f7fd fe6a 	bl	800dbee <vListInsertEnd>
 800ff1a:	e004      	b.n	800ff26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff48 <xTaskPriorityInherit+0xc4>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ff26:	2301      	movs	r3, #1
 800ff28:	60fb      	str	r3, [r7, #12]
 800ff2a:	e008      	b.n	800ff3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ff30:	4b05      	ldr	r3, [pc, #20]	@ (800ff48 <xTaskPriorityInherit+0xc4>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d201      	bcs.n	800ff3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3710      	adds	r7, #16
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	2000ea58 	.word	0x2000ea58
 800ff4c:	2000ea5c 	.word	0x2000ea5c
 800ff50:	2000ef34 	.word	0x2000ef34

0800ff54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b086      	sub	sp, #24
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff60:	2300      	movs	r3, #0
 800ff62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d05c      	beq.n	8010024 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff6a:	4b31      	ldr	r3, [pc, #196]	@ (8010030 <xTaskPriorityDisinherit+0xdc>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	693a      	ldr	r2, [r7, #16]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d00d      	beq.n	800ff90 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800ff74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff78:	b672      	cpsid	i
 800ff7a:	f383 8811 	msr	BASEPRI, r3
 800ff7e:	f3bf 8f6f 	isb	sy
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	b662      	cpsie	i
 800ff88:	60fb      	str	r3, [r7, #12]
}
 800ff8a:	bf00      	nop
 800ff8c:	bf00      	nop
 800ff8e:	e7fd      	b.n	800ff8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d10d      	bne.n	800ffb4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800ff98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff9c:	b672      	cpsid	i
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	b662      	cpsie	i
 800ffac:	60bb      	str	r3, [r7, #8]
}
 800ffae:	bf00      	nop
 800ffb0:	bf00      	nop
 800ffb2:	e7fd      	b.n	800ffb0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffb8:	1e5a      	subs	r2, r3, #1
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d02c      	beq.n	8010024 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d128      	bne.n	8010024 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	3304      	adds	r3, #4
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fd fe66 	bl	800dca8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffe8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fff4:	4b0f      	ldr	r3, [pc, #60]	@ (8010034 <xTaskPriorityDisinherit+0xe0>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d903      	bls.n	8010004 <xTaskPriorityDisinherit+0xb0>
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010000:	4a0c      	ldr	r2, [pc, #48]	@ (8010034 <xTaskPriorityDisinherit+0xe0>)
 8010002:	6013      	str	r3, [r2, #0]
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010008:	4613      	mov	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4413      	add	r3, r2
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	4a09      	ldr	r2, [pc, #36]	@ (8010038 <xTaskPriorityDisinherit+0xe4>)
 8010012:	441a      	add	r2, r3
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	3304      	adds	r3, #4
 8010018:	4619      	mov	r1, r3
 801001a:	4610      	mov	r0, r2
 801001c:	f7fd fde7 	bl	800dbee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010020:	2301      	movs	r3, #1
 8010022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010024:	697b      	ldr	r3, [r7, #20]
	}
 8010026:	4618      	mov	r0, r3
 8010028:	3718      	adds	r7, #24
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	2000ea58 	.word	0x2000ea58
 8010034:	2000ef34 	.word	0x2000ef34
 8010038:	2000ea5c 	.word	0x2000ea5c

0801003c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801003c:	b580      	push	{r7, lr}
 801003e:	b088      	sub	sp, #32
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801004a:	2301      	movs	r3, #1
 801004c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d070      	beq.n	8010136 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010058:	2b00      	cmp	r3, #0
 801005a:	d10d      	bne.n	8010078 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801005c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010060:	b672      	cpsid	i
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	b662      	cpsie	i
 8010070:	60fb      	str	r3, [r7, #12]
}
 8010072:	bf00      	nop
 8010074:	bf00      	nop
 8010076:	e7fd      	b.n	8010074 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801007c:	683a      	ldr	r2, [r7, #0]
 801007e:	429a      	cmp	r2, r3
 8010080:	d902      	bls.n	8010088 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	61fb      	str	r3, [r7, #28]
 8010086:	e002      	b.n	801008e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801008c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010092:	69fa      	ldr	r2, [r7, #28]
 8010094:	429a      	cmp	r2, r3
 8010096:	d04e      	beq.n	8010136 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801009c:	697a      	ldr	r2, [r7, #20]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d149      	bne.n	8010136 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80100a2:	4b27      	ldr	r3, [pc, #156]	@ (8010140 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	69ba      	ldr	r2, [r7, #24]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d10d      	bne.n	80100c8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80100ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100b0:	b672      	cpsid	i
 80100b2:	f383 8811 	msr	BASEPRI, r3
 80100b6:	f3bf 8f6f 	isb	sy
 80100ba:	f3bf 8f4f 	dsb	sy
 80100be:	b662      	cpsie	i
 80100c0:	60bb      	str	r3, [r7, #8]
}
 80100c2:	bf00      	nop
 80100c4:	bf00      	nop
 80100c6:	e7fd      	b.n	80100c4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80100c8:	69bb      	ldr	r3, [r7, #24]
 80100ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	69fa      	ldr	r2, [r7, #28]
 80100d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80100d4:	69bb      	ldr	r3, [r7, #24]
 80100d6:	699b      	ldr	r3, [r3, #24]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	db04      	blt.n	80100e6 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80100e2:	69bb      	ldr	r3, [r7, #24]
 80100e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	6959      	ldr	r1, [r3, #20]
 80100ea:	693a      	ldr	r2, [r7, #16]
 80100ec:	4613      	mov	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	4413      	add	r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4a13      	ldr	r2, [pc, #76]	@ (8010144 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80100f6:	4413      	add	r3, r2
 80100f8:	4299      	cmp	r1, r3
 80100fa:	d11c      	bne.n	8010136 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	3304      	adds	r3, #4
 8010100:	4618      	mov	r0, r3
 8010102:	f7fd fdd1 	bl	800dca8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801010a:	4b0f      	ldr	r3, [pc, #60]	@ (8010148 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	429a      	cmp	r2, r3
 8010110:	d903      	bls.n	801011a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010116:	4a0c      	ldr	r2, [pc, #48]	@ (8010148 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010118:	6013      	str	r3, [r2, #0]
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801011e:	4613      	mov	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	4413      	add	r3, r2
 8010124:	009b      	lsls	r3, r3, #2
 8010126:	4a07      	ldr	r2, [pc, #28]	@ (8010144 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010128:	441a      	add	r2, r3
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	3304      	adds	r3, #4
 801012e:	4619      	mov	r1, r3
 8010130:	4610      	mov	r0, r2
 8010132:	f7fd fd5c 	bl	800dbee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010136:	bf00      	nop
 8010138:	3720      	adds	r7, #32
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	2000ea58 	.word	0x2000ea58
 8010144:	2000ea5c 	.word	0x2000ea5c
 8010148:	2000ef34 	.word	0x2000ef34

0801014c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801014c:	b480      	push	{r7}
 801014e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010150:	4b07      	ldr	r3, [pc, #28]	@ (8010170 <pvTaskIncrementMutexHeldCount+0x24>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d004      	beq.n	8010162 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010158:	4b05      	ldr	r3, [pc, #20]	@ (8010170 <pvTaskIncrementMutexHeldCount+0x24>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801015e:	3201      	adds	r2, #1
 8010160:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8010162:	4b03      	ldr	r3, [pc, #12]	@ (8010170 <pvTaskIncrementMutexHeldCount+0x24>)
 8010164:	681b      	ldr	r3, [r3, #0]
	}
 8010166:	4618      	mov	r0, r3
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr
 8010170:	2000ea58 	.word	0x2000ea58

08010174 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801017e:	4b21      	ldr	r3, [pc, #132]	@ (8010204 <prvAddCurrentTaskToDelayedList+0x90>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010184:	4b20      	ldr	r3, [pc, #128]	@ (8010208 <prvAddCurrentTaskToDelayedList+0x94>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	3304      	adds	r3, #4
 801018a:	4618      	mov	r0, r3
 801018c:	f7fd fd8c 	bl	800dca8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010196:	d10a      	bne.n	80101ae <prvAddCurrentTaskToDelayedList+0x3a>
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d007      	beq.n	80101ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801019e:	4b1a      	ldr	r3, [pc, #104]	@ (8010208 <prvAddCurrentTaskToDelayedList+0x94>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	3304      	adds	r3, #4
 80101a4:	4619      	mov	r1, r3
 80101a6:	4819      	ldr	r0, [pc, #100]	@ (801020c <prvAddCurrentTaskToDelayedList+0x98>)
 80101a8:	f7fd fd21 	bl	800dbee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80101ac:	e026      	b.n	80101fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80101ae:	68fa      	ldr	r2, [r7, #12]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	4413      	add	r3, r2
 80101b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80101b6:	4b14      	ldr	r3, [pc, #80]	@ (8010208 <prvAddCurrentTaskToDelayedList+0x94>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	68ba      	ldr	r2, [r7, #8]
 80101bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d209      	bcs.n	80101da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101c6:	4b12      	ldr	r3, [pc, #72]	@ (8010210 <prvAddCurrentTaskToDelayedList+0x9c>)
 80101c8:	681a      	ldr	r2, [r3, #0]
 80101ca:	4b0f      	ldr	r3, [pc, #60]	@ (8010208 <prvAddCurrentTaskToDelayedList+0x94>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	3304      	adds	r3, #4
 80101d0:	4619      	mov	r1, r3
 80101d2:	4610      	mov	r0, r2
 80101d4:	f7fd fd2f 	bl	800dc36 <vListInsert>
}
 80101d8:	e010      	b.n	80101fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101da:	4b0e      	ldr	r3, [pc, #56]	@ (8010214 <prvAddCurrentTaskToDelayedList+0xa0>)
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	4b0a      	ldr	r3, [pc, #40]	@ (8010208 <prvAddCurrentTaskToDelayedList+0x94>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	3304      	adds	r3, #4
 80101e4:	4619      	mov	r1, r3
 80101e6:	4610      	mov	r0, r2
 80101e8:	f7fd fd25 	bl	800dc36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80101ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010218 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d202      	bcs.n	80101fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80101f6:	4a08      	ldr	r2, [pc, #32]	@ (8010218 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	6013      	str	r3, [r2, #0]
}
 80101fc:	bf00      	nop
 80101fe:	3710      	adds	r7, #16
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	2000ef30 	.word	0x2000ef30
 8010208:	2000ea58 	.word	0x2000ea58
 801020c:	2000ef18 	.word	0x2000ef18
 8010210:	2000eee8 	.word	0x2000eee8
 8010214:	2000eee4 	.word	0x2000eee4
 8010218:	2000ef4c 	.word	0x2000ef4c

0801021c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b08a      	sub	sp, #40	@ 0x28
 8010220:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010222:	2300      	movs	r3, #0
 8010224:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010226:	f000 fb21 	bl	801086c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801022a:	4b1e      	ldr	r3, [pc, #120]	@ (80102a4 <xTimerCreateTimerTask+0x88>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d021      	beq.n	8010276 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010232:	2300      	movs	r3, #0
 8010234:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010236:	2300      	movs	r3, #0
 8010238:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801023a:	1d3a      	adds	r2, r7, #4
 801023c:	f107 0108 	add.w	r1, r7, #8
 8010240:	f107 030c 	add.w	r3, r7, #12
 8010244:	4618      	mov	r0, r3
 8010246:	f7fd fc8b 	bl	800db60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801024a:	6879      	ldr	r1, [r7, #4]
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	68fa      	ldr	r2, [r7, #12]
 8010250:	9202      	str	r2, [sp, #8]
 8010252:	9301      	str	r3, [sp, #4]
 8010254:	2302      	movs	r3, #2
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	2300      	movs	r3, #0
 801025a:	460a      	mov	r2, r1
 801025c:	4912      	ldr	r1, [pc, #72]	@ (80102a8 <xTimerCreateTimerTask+0x8c>)
 801025e:	4813      	ldr	r0, [pc, #76]	@ (80102ac <xTimerCreateTimerTask+0x90>)
 8010260:	f7fe febe 	bl	800efe0 <xTaskCreateStatic>
 8010264:	4603      	mov	r3, r0
 8010266:	4a12      	ldr	r2, [pc, #72]	@ (80102b0 <xTimerCreateTimerTask+0x94>)
 8010268:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801026a:	4b11      	ldr	r3, [pc, #68]	@ (80102b0 <xTimerCreateTimerTask+0x94>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d001      	beq.n	8010276 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010272:	2301      	movs	r3, #1
 8010274:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d10d      	bne.n	8010298 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 801027c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010280:	b672      	cpsid	i
 8010282:	f383 8811 	msr	BASEPRI, r3
 8010286:	f3bf 8f6f 	isb	sy
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	b662      	cpsie	i
 8010290:	613b      	str	r3, [r7, #16]
}
 8010292:	bf00      	nop
 8010294:	bf00      	nop
 8010296:	e7fd      	b.n	8010294 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010298:	697b      	ldr	r3, [r7, #20]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	2000ef88 	.word	0x2000ef88
 80102a8:	08021150 	.word	0x08021150
 80102ac:	080103f5 	.word	0x080103f5
 80102b0:	2000ef8c 	.word	0x2000ef8c

080102b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b08a      	sub	sp, #40	@ 0x28
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	60f8      	str	r0, [r7, #12]
 80102bc:	60b9      	str	r1, [r7, #8]
 80102be:	607a      	str	r2, [r7, #4]
 80102c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80102c2:	2300      	movs	r3, #0
 80102c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d10d      	bne.n	80102e8 <xTimerGenericCommand+0x34>
	__asm volatile
 80102cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d0:	b672      	cpsid	i
 80102d2:	f383 8811 	msr	BASEPRI, r3
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	b662      	cpsie	i
 80102e0:	623b      	str	r3, [r7, #32]
}
 80102e2:	bf00      	nop
 80102e4:	bf00      	nop
 80102e6:	e7fd      	b.n	80102e4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80102e8:	4b19      	ldr	r3, [pc, #100]	@ (8010350 <xTimerGenericCommand+0x9c>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d02a      	beq.n	8010346 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	2b05      	cmp	r3, #5
 8010300:	dc18      	bgt.n	8010334 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010302:	f7ff fda1 	bl	800fe48 <xTaskGetSchedulerState>
 8010306:	4603      	mov	r3, r0
 8010308:	2b02      	cmp	r3, #2
 801030a:	d109      	bne.n	8010320 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801030c:	4b10      	ldr	r3, [pc, #64]	@ (8010350 <xTimerGenericCommand+0x9c>)
 801030e:	6818      	ldr	r0, [r3, #0]
 8010310:	f107 0110 	add.w	r1, r7, #16
 8010314:	2300      	movs	r3, #0
 8010316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010318:	f7fd ff7c 	bl	800e214 <xQueueGenericSend>
 801031c:	6278      	str	r0, [r7, #36]	@ 0x24
 801031e:	e012      	b.n	8010346 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010320:	4b0b      	ldr	r3, [pc, #44]	@ (8010350 <xTimerGenericCommand+0x9c>)
 8010322:	6818      	ldr	r0, [r3, #0]
 8010324:	f107 0110 	add.w	r1, r7, #16
 8010328:	2300      	movs	r3, #0
 801032a:	2200      	movs	r2, #0
 801032c:	f7fd ff72 	bl	800e214 <xQueueGenericSend>
 8010330:	6278      	str	r0, [r7, #36]	@ 0x24
 8010332:	e008      	b.n	8010346 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010334:	4b06      	ldr	r3, [pc, #24]	@ (8010350 <xTimerGenericCommand+0x9c>)
 8010336:	6818      	ldr	r0, [r3, #0]
 8010338:	f107 0110 	add.w	r1, r7, #16
 801033c:	2300      	movs	r3, #0
 801033e:	683a      	ldr	r2, [r7, #0]
 8010340:	f7fe f872 	bl	800e428 <xQueueGenericSendFromISR>
 8010344:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010348:	4618      	mov	r0, r3
 801034a:	3728      	adds	r7, #40	@ 0x28
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}
 8010350:	2000ef88 	.word	0x2000ef88

08010354 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b088      	sub	sp, #32
 8010358:	af02      	add	r7, sp, #8
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801035e:	4b24      	ldr	r3, [pc, #144]	@ (80103f0 <prvProcessExpiredTimer+0x9c>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	3304      	adds	r3, #4
 801036c:	4618      	mov	r0, r3
 801036e:	f7fd fc9b 	bl	800dca8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010378:	f003 0304 	and.w	r3, r3, #4
 801037c:	2b00      	cmp	r3, #0
 801037e:	d025      	beq.n	80103cc <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	699a      	ldr	r2, [r3, #24]
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	18d1      	adds	r1, r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	683a      	ldr	r2, [r7, #0]
 801038c:	6978      	ldr	r0, [r7, #20]
 801038e:	f000 f8d7 	bl	8010540 <prvInsertTimerInActiveList>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d022      	beq.n	80103de <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010398:	2300      	movs	r3, #0
 801039a:	9300      	str	r3, [sp, #0]
 801039c:	2300      	movs	r3, #0
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	2100      	movs	r1, #0
 80103a2:	6978      	ldr	r0, [r7, #20]
 80103a4:	f7ff ff86 	bl	80102b4 <xTimerGenericCommand>
 80103a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d116      	bne.n	80103de <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80103b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b4:	b672      	cpsid	i
 80103b6:	f383 8811 	msr	BASEPRI, r3
 80103ba:	f3bf 8f6f 	isb	sy
 80103be:	f3bf 8f4f 	dsb	sy
 80103c2:	b662      	cpsie	i
 80103c4:	60fb      	str	r3, [r7, #12]
}
 80103c6:	bf00      	nop
 80103c8:	bf00      	nop
 80103ca:	e7fd      	b.n	80103c8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80103d2:	f023 0301 	bic.w	r3, r3, #1
 80103d6:	b2da      	uxtb	r2, r3
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	6a1b      	ldr	r3, [r3, #32]
 80103e2:	6978      	ldr	r0, [r7, #20]
 80103e4:	4798      	blx	r3
}
 80103e6:	bf00      	nop
 80103e8:	3718      	adds	r7, #24
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	2000ef80 	.word	0x2000ef80

080103f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80103fc:	f107 0308 	add.w	r3, r7, #8
 8010400:	4618      	mov	r0, r3
 8010402:	f000 f859 	bl	80104b8 <prvGetNextExpireTime>
 8010406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	4619      	mov	r1, r3
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f000 f805 	bl	801041c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010412:	f000 f8d7 	bl	80105c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010416:	bf00      	nop
 8010418:	e7f0      	b.n	80103fc <prvTimerTask+0x8>
	...

0801041c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010426:	f7ff f8c3 	bl	800f5b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801042a:	f107 0308 	add.w	r3, r7, #8
 801042e:	4618      	mov	r0, r3
 8010430:	f000 f866 	bl	8010500 <prvSampleTimeNow>
 8010434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d130      	bne.n	801049e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d10a      	bne.n	8010458 <prvProcessTimerOrBlockTask+0x3c>
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	429a      	cmp	r2, r3
 8010448:	d806      	bhi.n	8010458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801044a:	f7ff f8bf 	bl	800f5cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801044e:	68f9      	ldr	r1, [r7, #12]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff ff7f 	bl	8010354 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010456:	e024      	b.n	80104a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d008      	beq.n	8010470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801045e:	4b13      	ldr	r3, [pc, #76]	@ (80104ac <prvProcessTimerOrBlockTask+0x90>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d101      	bne.n	801046c <prvProcessTimerOrBlockTask+0x50>
 8010468:	2301      	movs	r3, #1
 801046a:	e000      	b.n	801046e <prvProcessTimerOrBlockTask+0x52>
 801046c:	2300      	movs	r3, #0
 801046e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010470:	4b0f      	ldr	r3, [pc, #60]	@ (80104b0 <prvProcessTimerOrBlockTask+0x94>)
 8010472:	6818      	ldr	r0, [r3, #0]
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	1ad3      	subs	r3, r2, r3
 801047a:	683a      	ldr	r2, [r7, #0]
 801047c:	4619      	mov	r1, r3
 801047e:	f7fe fd7b 	bl	800ef78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010482:	f7ff f8a3 	bl	800f5cc <xTaskResumeAll>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d10a      	bne.n	80104a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801048c:	4b09      	ldr	r3, [pc, #36]	@ (80104b4 <prvProcessTimerOrBlockTask+0x98>)
 801048e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010492:	601a      	str	r2, [r3, #0]
 8010494:	f3bf 8f4f 	dsb	sy
 8010498:	f3bf 8f6f 	isb	sy
}
 801049c:	e001      	b.n	80104a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801049e:	f7ff f895 	bl	800f5cc <xTaskResumeAll>
}
 80104a2:	bf00      	nop
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	2000ef84 	.word	0x2000ef84
 80104b0:	2000ef88 	.word	0x2000ef88
 80104b4:	e000ed04 	.word	0xe000ed04

080104b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104c0:	4b0e      	ldr	r3, [pc, #56]	@ (80104fc <prvGetNextExpireTime+0x44>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d101      	bne.n	80104ce <prvGetNextExpireTime+0x16>
 80104ca:	2201      	movs	r2, #1
 80104cc:	e000      	b.n	80104d0 <prvGetNextExpireTime+0x18>
 80104ce:	2200      	movs	r2, #0
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d105      	bne.n	80104e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104dc:	4b07      	ldr	r3, [pc, #28]	@ (80104fc <prvGetNextExpireTime+0x44>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	60fb      	str	r3, [r7, #12]
 80104e6:	e001      	b.n	80104ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80104e8:	2300      	movs	r3, #0
 80104ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80104ec:	68fb      	ldr	r3, [r7, #12]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3714      	adds	r7, #20
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	2000ef80 	.word	0x2000ef80

08010500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010508:	f7ff f900 	bl	800f70c <xTaskGetTickCount>
 801050c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801050e:	4b0b      	ldr	r3, [pc, #44]	@ (801053c <prvSampleTimeNow+0x3c>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	68fa      	ldr	r2, [r7, #12]
 8010514:	429a      	cmp	r2, r3
 8010516:	d205      	bcs.n	8010524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010518:	f000 f940 	bl	801079c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	601a      	str	r2, [r3, #0]
 8010522:	e002      	b.n	801052a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801052a:	4a04      	ldr	r2, [pc, #16]	@ (801053c <prvSampleTimeNow+0x3c>)
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010530:	68fb      	ldr	r3, [r7, #12]
}
 8010532:	4618      	mov	r0, r3
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	2000ef90 	.word	0x2000ef90

08010540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b086      	sub	sp, #24
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	607a      	str	r2, [r7, #4]
 801054c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801054e:	2300      	movs	r3, #0
 8010550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	68ba      	ldr	r2, [r7, #8]
 8010556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	68fa      	ldr	r2, [r7, #12]
 801055c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	429a      	cmp	r2, r3
 8010564:	d812      	bhi.n	801058c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	1ad2      	subs	r2, r2, r3
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	699b      	ldr	r3, [r3, #24]
 8010570:	429a      	cmp	r2, r3
 8010572:	d302      	bcc.n	801057a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010574:	2301      	movs	r3, #1
 8010576:	617b      	str	r3, [r7, #20]
 8010578:	e01b      	b.n	80105b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801057a:	4b10      	ldr	r3, [pc, #64]	@ (80105bc <prvInsertTimerInActiveList+0x7c>)
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	3304      	adds	r3, #4
 8010582:	4619      	mov	r1, r3
 8010584:	4610      	mov	r0, r2
 8010586:	f7fd fb56 	bl	800dc36 <vListInsert>
 801058a:	e012      	b.n	80105b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801058c:	687a      	ldr	r2, [r7, #4]
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	429a      	cmp	r2, r3
 8010592:	d206      	bcs.n	80105a2 <prvInsertTimerInActiveList+0x62>
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	429a      	cmp	r2, r3
 801059a:	d302      	bcc.n	80105a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801059c:	2301      	movs	r3, #1
 801059e:	617b      	str	r3, [r7, #20]
 80105a0:	e007      	b.n	80105b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105a2:	4b07      	ldr	r3, [pc, #28]	@ (80105c0 <prvInsertTimerInActiveList+0x80>)
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	3304      	adds	r3, #4
 80105aa:	4619      	mov	r1, r3
 80105ac:	4610      	mov	r0, r2
 80105ae:	f7fd fb42 	bl	800dc36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80105b2:	697b      	ldr	r3, [r7, #20]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3718      	adds	r7, #24
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}
 80105bc:	2000ef84 	.word	0x2000ef84
 80105c0:	2000ef80 	.word	0x2000ef80

080105c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08e      	sub	sp, #56	@ 0x38
 80105c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80105ca:	e0d4      	b.n	8010776 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	da1b      	bge.n	801060a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80105d2:	1d3b      	adds	r3, r7, #4
 80105d4:	3304      	adds	r3, #4
 80105d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80105d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d10d      	bne.n	80105fa <prvProcessReceivedCommands+0x36>
	__asm volatile
 80105de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e2:	b672      	cpsid	i
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	b662      	cpsie	i
 80105f2:	61fb      	str	r3, [r7, #28]
}
 80105f4:	bf00      	nop
 80105f6:	bf00      	nop
 80105f8:	e7fd      	b.n	80105f6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80105fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010600:	6850      	ldr	r0, [r2, #4]
 8010602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010604:	6892      	ldr	r2, [r2, #8]
 8010606:	4611      	mov	r1, r2
 8010608:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2b00      	cmp	r3, #0
 801060e:	f2c0 80b2 	blt.w	8010776 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010618:	695b      	ldr	r3, [r3, #20]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d004      	beq.n	8010628 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801061e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010620:	3304      	adds	r3, #4
 8010622:	4618      	mov	r0, r3
 8010624:	f7fd fb40 	bl	800dca8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010628:	463b      	mov	r3, r7
 801062a:	4618      	mov	r0, r3
 801062c:	f7ff ff68 	bl	8010500 <prvSampleTimeNow>
 8010630:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b09      	cmp	r3, #9
 8010636:	f200 809b 	bhi.w	8010770 <prvProcessReceivedCommands+0x1ac>
 801063a:	a201      	add	r2, pc, #4	@ (adr r2, 8010640 <prvProcessReceivedCommands+0x7c>)
 801063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010640:	08010669 	.word	0x08010669
 8010644:	08010669 	.word	0x08010669
 8010648:	08010669 	.word	0x08010669
 801064c:	080106e3 	.word	0x080106e3
 8010650:	080106f7 	.word	0x080106f7
 8010654:	08010747 	.word	0x08010747
 8010658:	08010669 	.word	0x08010669
 801065c:	08010669 	.word	0x08010669
 8010660:	080106e3 	.word	0x080106e3
 8010664:	080106f7 	.word	0x080106f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801066a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801066e:	f043 0301 	orr.w	r3, r3, #1
 8010672:	b2da      	uxtb	r2, r3
 8010674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010676:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801067e:	699b      	ldr	r3, [r3, #24]
 8010680:	18d1      	adds	r1, r2, r3
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010688:	f7ff ff5a 	bl	8010540 <prvInsertTimerInActiveList>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d070      	beq.n	8010774 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010694:	6a1b      	ldr	r3, [r3, #32]
 8010696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010698:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801069a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80106a0:	f003 0304 	and.w	r3, r3, #4
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d065      	beq.n	8010774 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ac:	699b      	ldr	r3, [r3, #24]
 80106ae:	441a      	add	r2, r3
 80106b0:	2300      	movs	r3, #0
 80106b2:	9300      	str	r3, [sp, #0]
 80106b4:	2300      	movs	r3, #0
 80106b6:	2100      	movs	r1, #0
 80106b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80106ba:	f7ff fdfb 	bl	80102b4 <xTimerGenericCommand>
 80106be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80106c0:	6a3b      	ldr	r3, [r7, #32]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d156      	bne.n	8010774 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80106c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106ca:	b672      	cpsid	i
 80106cc:	f383 8811 	msr	BASEPRI, r3
 80106d0:	f3bf 8f6f 	isb	sy
 80106d4:	f3bf 8f4f 	dsb	sy
 80106d8:	b662      	cpsie	i
 80106da:	61bb      	str	r3, [r7, #24]
}
 80106dc:	bf00      	nop
 80106de:	bf00      	nop
 80106e0:	e7fd      	b.n	80106de <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80106e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80106e8:	f023 0301 	bic.w	r3, r3, #1
 80106ec:	b2da      	uxtb	r2, r3
 80106ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80106f4:	e03f      	b.n	8010776 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80106fc:	f043 0301 	orr.w	r3, r3, #1
 8010700:	b2da      	uxtb	r2, r3
 8010702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010704:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010708:	68ba      	ldr	r2, [r7, #8]
 801070a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801070c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801070e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010710:	699b      	ldr	r3, [r3, #24]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10d      	bne.n	8010732 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8010716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801071a:	b672      	cpsid	i
 801071c:	f383 8811 	msr	BASEPRI, r3
 8010720:	f3bf 8f6f 	isb	sy
 8010724:	f3bf 8f4f 	dsb	sy
 8010728:	b662      	cpsie	i
 801072a:	617b      	str	r3, [r7, #20]
}
 801072c:	bf00      	nop
 801072e:	bf00      	nop
 8010730:	e7fd      	b.n	801072e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010734:	699a      	ldr	r2, [r3, #24]
 8010736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010738:	18d1      	adds	r1, r2, r3
 801073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801073e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010740:	f7ff fefe 	bl	8010540 <prvInsertTimerInActiveList>
					break;
 8010744:	e017      	b.n	8010776 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801074c:	f003 0302 	and.w	r3, r3, #2
 8010750:	2b00      	cmp	r3, #0
 8010752:	d103      	bne.n	801075c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8010754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010756:	f000 fbd9 	bl	8010f0c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801075a:	e00c      	b.n	8010776 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801075c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801075e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010762:	f023 0301 	bic.w	r3, r3, #1
 8010766:	b2da      	uxtb	r2, r3
 8010768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801076a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801076e:	e002      	b.n	8010776 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010770:	bf00      	nop
 8010772:	e000      	b.n	8010776 <prvProcessReceivedCommands+0x1b2>
					break;
 8010774:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010776:	4b08      	ldr	r3, [pc, #32]	@ (8010798 <prvProcessReceivedCommands+0x1d4>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	1d39      	adds	r1, r7, #4
 801077c:	2200      	movs	r2, #0
 801077e:	4618      	mov	r0, r3
 8010780:	f7fd ff8e 	bl	800e6a0 <xQueueReceive>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	f47f af20 	bne.w	80105cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801078c:	bf00      	nop
 801078e:	bf00      	nop
 8010790:	3730      	adds	r7, #48	@ 0x30
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	2000ef88 	.word	0x2000ef88

0801079c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80107a2:	e04b      	b.n	801083c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80107a4:	4b2f      	ldr	r3, [pc, #188]	@ (8010864 <prvSwitchTimerLists+0xc8>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107ae:	4b2d      	ldr	r3, [pc, #180]	@ (8010864 <prvSwitchTimerLists+0xc8>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	3304      	adds	r3, #4
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fd fa73 	bl	800dca8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	6a1b      	ldr	r3, [r3, #32]
 80107c6:	68f8      	ldr	r0, [r7, #12]
 80107c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107d0:	f003 0304 	and.w	r3, r3, #4
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d031      	beq.n	801083c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	699b      	ldr	r3, [r3, #24]
 80107dc:	693a      	ldr	r2, [r7, #16]
 80107de:	4413      	add	r3, r2
 80107e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d90e      	bls.n	8010808 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	68ba      	ldr	r2, [r7, #8]
 80107ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68fa      	ldr	r2, [r7, #12]
 80107f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107f6:	4b1b      	ldr	r3, [pc, #108]	@ (8010864 <prvSwitchTimerLists+0xc8>)
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	3304      	adds	r3, #4
 80107fe:	4619      	mov	r1, r3
 8010800:	4610      	mov	r0, r2
 8010802:	f7fd fa18 	bl	800dc36 <vListInsert>
 8010806:	e019      	b.n	801083c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010808:	2300      	movs	r3, #0
 801080a:	9300      	str	r3, [sp, #0]
 801080c:	2300      	movs	r3, #0
 801080e:	693a      	ldr	r2, [r7, #16]
 8010810:	2100      	movs	r1, #0
 8010812:	68f8      	ldr	r0, [r7, #12]
 8010814:	f7ff fd4e 	bl	80102b4 <xTimerGenericCommand>
 8010818:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d10d      	bne.n	801083c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8010820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010824:	b672      	cpsid	i
 8010826:	f383 8811 	msr	BASEPRI, r3
 801082a:	f3bf 8f6f 	isb	sy
 801082e:	f3bf 8f4f 	dsb	sy
 8010832:	b662      	cpsie	i
 8010834:	603b      	str	r3, [r7, #0]
}
 8010836:	bf00      	nop
 8010838:	bf00      	nop
 801083a:	e7fd      	b.n	8010838 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801083c:	4b09      	ldr	r3, [pc, #36]	@ (8010864 <prvSwitchTimerLists+0xc8>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d1ae      	bne.n	80107a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010846:	4b07      	ldr	r3, [pc, #28]	@ (8010864 <prvSwitchTimerLists+0xc8>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801084c:	4b06      	ldr	r3, [pc, #24]	@ (8010868 <prvSwitchTimerLists+0xcc>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	4a04      	ldr	r2, [pc, #16]	@ (8010864 <prvSwitchTimerLists+0xc8>)
 8010852:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010854:	4a04      	ldr	r2, [pc, #16]	@ (8010868 <prvSwitchTimerLists+0xcc>)
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	6013      	str	r3, [r2, #0]
}
 801085a:	bf00      	nop
 801085c:	3718      	adds	r7, #24
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	2000ef80 	.word	0x2000ef80
 8010868:	2000ef84 	.word	0x2000ef84

0801086c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010872:	f000 f94b 	bl	8010b0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010876:	4b15      	ldr	r3, [pc, #84]	@ (80108cc <prvCheckForValidListAndQueue+0x60>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d120      	bne.n	80108c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801087e:	4814      	ldr	r0, [pc, #80]	@ (80108d0 <prvCheckForValidListAndQueue+0x64>)
 8010880:	f7fd f988 	bl	800db94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010884:	4813      	ldr	r0, [pc, #76]	@ (80108d4 <prvCheckForValidListAndQueue+0x68>)
 8010886:	f7fd f985 	bl	800db94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801088a:	4b13      	ldr	r3, [pc, #76]	@ (80108d8 <prvCheckForValidListAndQueue+0x6c>)
 801088c:	4a10      	ldr	r2, [pc, #64]	@ (80108d0 <prvCheckForValidListAndQueue+0x64>)
 801088e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010890:	4b12      	ldr	r3, [pc, #72]	@ (80108dc <prvCheckForValidListAndQueue+0x70>)
 8010892:	4a10      	ldr	r2, [pc, #64]	@ (80108d4 <prvCheckForValidListAndQueue+0x68>)
 8010894:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010896:	2300      	movs	r3, #0
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	4b11      	ldr	r3, [pc, #68]	@ (80108e0 <prvCheckForValidListAndQueue+0x74>)
 801089c:	4a11      	ldr	r2, [pc, #68]	@ (80108e4 <prvCheckForValidListAndQueue+0x78>)
 801089e:	2110      	movs	r1, #16
 80108a0:	200a      	movs	r0, #10
 80108a2:	f7fd fa97 	bl	800ddd4 <xQueueGenericCreateStatic>
 80108a6:	4603      	mov	r3, r0
 80108a8:	4a08      	ldr	r2, [pc, #32]	@ (80108cc <prvCheckForValidListAndQueue+0x60>)
 80108aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80108ac:	4b07      	ldr	r3, [pc, #28]	@ (80108cc <prvCheckForValidListAndQueue+0x60>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d005      	beq.n	80108c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80108b4:	4b05      	ldr	r3, [pc, #20]	@ (80108cc <prvCheckForValidListAndQueue+0x60>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	490b      	ldr	r1, [pc, #44]	@ (80108e8 <prvCheckForValidListAndQueue+0x7c>)
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7fe fb08 	bl	800eed0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80108c0:	f000 f95a 	bl	8010b78 <vPortExitCritical>
}
 80108c4:	bf00      	nop
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	2000ef88 	.word	0x2000ef88
 80108d0:	2000ef58 	.word	0x2000ef58
 80108d4:	2000ef6c 	.word	0x2000ef6c
 80108d8:	2000ef80 	.word	0x2000ef80
 80108dc:	2000ef84 	.word	0x2000ef84
 80108e0:	2000f034 	.word	0x2000f034
 80108e4:	2000ef94 	.word	0x2000ef94
 80108e8:	08021158 	.word	0x08021158

080108ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80108ec:	b480      	push	{r7}
 80108ee:	b085      	sub	sp, #20
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	3b04      	subs	r3, #4
 80108fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	3b04      	subs	r3, #4
 801090a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	f023 0201 	bic.w	r2, r3, #1
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	3b04      	subs	r3, #4
 801091a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801091c:	4a0c      	ldr	r2, [pc, #48]	@ (8010950 <pxPortInitialiseStack+0x64>)
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	3b14      	subs	r3, #20
 8010926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	3b04      	subs	r3, #4
 8010932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f06f 0202 	mvn.w	r2, #2
 801093a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	3b20      	subs	r3, #32
 8010940:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010942:	68fb      	ldr	r3, [r7, #12]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3714      	adds	r7, #20
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr
 8010950:	08010955 	.word	0x08010955

08010954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801095a:	2300      	movs	r3, #0
 801095c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801095e:	4b15      	ldr	r3, [pc, #84]	@ (80109b4 <prvTaskExitError+0x60>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010966:	d00d      	beq.n	8010984 <prvTaskExitError+0x30>
	__asm volatile
 8010968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801096c:	b672      	cpsid	i
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	b662      	cpsie	i
 801097c:	60fb      	str	r3, [r7, #12]
}
 801097e:	bf00      	nop
 8010980:	bf00      	nop
 8010982:	e7fd      	b.n	8010980 <prvTaskExitError+0x2c>
	__asm volatile
 8010984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010988:	b672      	cpsid	i
 801098a:	f383 8811 	msr	BASEPRI, r3
 801098e:	f3bf 8f6f 	isb	sy
 8010992:	f3bf 8f4f 	dsb	sy
 8010996:	b662      	cpsie	i
 8010998:	60bb      	str	r3, [r7, #8]
}
 801099a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801099c:	bf00      	nop
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d0fc      	beq.n	801099e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80109a4:	bf00      	nop
 80109a6:	bf00      	nop
 80109a8:	3714      	adds	r7, #20
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	20000020 	.word	0x20000020
	...

080109c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80109c0:	4b07      	ldr	r3, [pc, #28]	@ (80109e0 <pxCurrentTCBConst2>)
 80109c2:	6819      	ldr	r1, [r3, #0]
 80109c4:	6808      	ldr	r0, [r1, #0]
 80109c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109ca:	f380 8809 	msr	PSP, r0
 80109ce:	f3bf 8f6f 	isb	sy
 80109d2:	f04f 0000 	mov.w	r0, #0
 80109d6:	f380 8811 	msr	BASEPRI, r0
 80109da:	4770      	bx	lr
 80109dc:	f3af 8000 	nop.w

080109e0 <pxCurrentTCBConst2>:
 80109e0:	2000ea58 	.word	0x2000ea58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80109e4:	bf00      	nop
 80109e6:	bf00      	nop

080109e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80109e8:	4808      	ldr	r0, [pc, #32]	@ (8010a0c <prvPortStartFirstTask+0x24>)
 80109ea:	6800      	ldr	r0, [r0, #0]
 80109ec:	6800      	ldr	r0, [r0, #0]
 80109ee:	f380 8808 	msr	MSP, r0
 80109f2:	f04f 0000 	mov.w	r0, #0
 80109f6:	f380 8814 	msr	CONTROL, r0
 80109fa:	b662      	cpsie	i
 80109fc:	b661      	cpsie	f
 80109fe:	f3bf 8f4f 	dsb	sy
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	df00      	svc	0
 8010a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a0a:	bf00      	nop
 8010a0c:	e000ed08 	.word	0xe000ed08

08010a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010a16:	4b37      	ldr	r3, [pc, #220]	@ (8010af4 <xPortStartScheduler+0xe4>)
 8010a18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	22ff      	movs	r2, #255	@ 0xff
 8010a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010a30:	78fb      	ldrb	r3, [r7, #3]
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010a38:	b2da      	uxtb	r2, r3
 8010a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8010af8 <xPortStartScheduler+0xe8>)
 8010a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8010afc <xPortStartScheduler+0xec>)
 8010a40:	2207      	movs	r2, #7
 8010a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a44:	e009      	b.n	8010a5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010a46:	4b2d      	ldr	r3, [pc, #180]	@ (8010afc <xPortStartScheduler+0xec>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8010afc <xPortStartScheduler+0xec>)
 8010a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a50:	78fb      	ldrb	r3, [r7, #3]
 8010a52:	b2db      	uxtb	r3, r3
 8010a54:	005b      	lsls	r3, r3, #1
 8010a56:	b2db      	uxtb	r3, r3
 8010a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a5a:	78fb      	ldrb	r3, [r7, #3]
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a62:	2b80      	cmp	r3, #128	@ 0x80
 8010a64:	d0ef      	beq.n	8010a46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a66:	4b25      	ldr	r3, [pc, #148]	@ (8010afc <xPortStartScheduler+0xec>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f1c3 0307 	rsb	r3, r3, #7
 8010a6e:	2b04      	cmp	r3, #4
 8010a70:	d00d      	beq.n	8010a8e <xPortStartScheduler+0x7e>
	__asm volatile
 8010a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a76:	b672      	cpsid	i
 8010a78:	f383 8811 	msr	BASEPRI, r3
 8010a7c:	f3bf 8f6f 	isb	sy
 8010a80:	f3bf 8f4f 	dsb	sy
 8010a84:	b662      	cpsie	i
 8010a86:	60bb      	str	r3, [r7, #8]
}
 8010a88:	bf00      	nop
 8010a8a:	bf00      	nop
 8010a8c:	e7fd      	b.n	8010a8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8010afc <xPortStartScheduler+0xec>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	021b      	lsls	r3, r3, #8
 8010a94:	4a19      	ldr	r2, [pc, #100]	@ (8010afc <xPortStartScheduler+0xec>)
 8010a96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a98:	4b18      	ldr	r3, [pc, #96]	@ (8010afc <xPortStartScheduler+0xec>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010aa0:	4a16      	ldr	r2, [pc, #88]	@ (8010afc <xPortStartScheduler+0xec>)
 8010aa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	b2da      	uxtb	r2, r3
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010aac:	4b14      	ldr	r3, [pc, #80]	@ (8010b00 <xPortStartScheduler+0xf0>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a13      	ldr	r2, [pc, #76]	@ (8010b00 <xPortStartScheduler+0xf0>)
 8010ab2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ab8:	4b11      	ldr	r3, [pc, #68]	@ (8010b00 <xPortStartScheduler+0xf0>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a10      	ldr	r2, [pc, #64]	@ (8010b00 <xPortStartScheduler+0xf0>)
 8010abe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010ac2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010ac4:	f000 f8dc 	bl	8010c80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8010b04 <xPortStartScheduler+0xf4>)
 8010aca:	2200      	movs	r2, #0
 8010acc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010ace:	f000 f8fb 	bl	8010cc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8010b08 <xPortStartScheduler+0xf8>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8010b08 <xPortStartScheduler+0xf8>)
 8010ad8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010adc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010ade:	f7ff ff83 	bl	80109e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010ae2:	f7fe fef1 	bl	800f8c8 <vTaskSwitchContext>
	prvTaskExitError();
 8010ae6:	f7ff ff35 	bl	8010954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010aea:	2300      	movs	r3, #0
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3710      	adds	r7, #16
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	e000e400 	.word	0xe000e400
 8010af8:	2000f084 	.word	0x2000f084
 8010afc:	2000f088 	.word	0x2000f088
 8010b00:	e000ed20 	.word	0xe000ed20
 8010b04:	20000020 	.word	0x20000020
 8010b08:	e000ef34 	.word	0xe000ef34

08010b0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b083      	sub	sp, #12
 8010b10:	af00      	add	r7, sp, #0
	__asm volatile
 8010b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b16:	b672      	cpsid	i
 8010b18:	f383 8811 	msr	BASEPRI, r3
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	b662      	cpsie	i
 8010b26:	607b      	str	r3, [r7, #4]
}
 8010b28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010b2a:	4b11      	ldr	r3, [pc, #68]	@ (8010b70 <vPortEnterCritical+0x64>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	3301      	adds	r3, #1
 8010b30:	4a0f      	ldr	r2, [pc, #60]	@ (8010b70 <vPortEnterCritical+0x64>)
 8010b32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010b34:	4b0e      	ldr	r3, [pc, #56]	@ (8010b70 <vPortEnterCritical+0x64>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	d112      	bne.n	8010b62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8010b74 <vPortEnterCritical+0x68>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d00d      	beq.n	8010b62 <vPortEnterCritical+0x56>
	__asm volatile
 8010b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b4a:	b672      	cpsid	i
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	b662      	cpsie	i
 8010b5a:	603b      	str	r3, [r7, #0]
}
 8010b5c:	bf00      	nop
 8010b5e:	bf00      	nop
 8010b60:	e7fd      	b.n	8010b5e <vPortEnterCritical+0x52>
	}
}
 8010b62:	bf00      	nop
 8010b64:	370c      	adds	r7, #12
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr
 8010b6e:	bf00      	nop
 8010b70:	20000020 	.word	0x20000020
 8010b74:	e000ed04 	.word	0xe000ed04

08010b78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b083      	sub	sp, #12
 8010b7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b7e:	4b13      	ldr	r3, [pc, #76]	@ (8010bcc <vPortExitCritical+0x54>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d10d      	bne.n	8010ba2 <vPortExitCritical+0x2a>
	__asm volatile
 8010b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b8a:	b672      	cpsid	i
 8010b8c:	f383 8811 	msr	BASEPRI, r3
 8010b90:	f3bf 8f6f 	isb	sy
 8010b94:	f3bf 8f4f 	dsb	sy
 8010b98:	b662      	cpsie	i
 8010b9a:	607b      	str	r3, [r7, #4]
}
 8010b9c:	bf00      	nop
 8010b9e:	bf00      	nop
 8010ba0:	e7fd      	b.n	8010b9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8010bcc <vPortExitCritical+0x54>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	4a08      	ldr	r2, [pc, #32]	@ (8010bcc <vPortExitCritical+0x54>)
 8010baa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010bac:	4b07      	ldr	r3, [pc, #28]	@ (8010bcc <vPortExitCritical+0x54>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d105      	bne.n	8010bc0 <vPortExitCritical+0x48>
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	f383 8811 	msr	BASEPRI, r3
}
 8010bbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010bc0:	bf00      	nop
 8010bc2:	370c      	adds	r7, #12
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr
 8010bcc:	20000020 	.word	0x20000020

08010bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010bd0:	f3ef 8009 	mrs	r0, PSP
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	4b15      	ldr	r3, [pc, #84]	@ (8010c30 <pxCurrentTCBConst>)
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	f01e 0f10 	tst.w	lr, #16
 8010be0:	bf08      	it	eq
 8010be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bea:	6010      	str	r0, [r2, #0]
 8010bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010bf4:	b672      	cpsid	i
 8010bf6:	f380 8811 	msr	BASEPRI, r0
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	b662      	cpsie	i
 8010c04:	f7fe fe60 	bl	800f8c8 <vTaskSwitchContext>
 8010c08:	f04f 0000 	mov.w	r0, #0
 8010c0c:	f380 8811 	msr	BASEPRI, r0
 8010c10:	bc09      	pop	{r0, r3}
 8010c12:	6819      	ldr	r1, [r3, #0]
 8010c14:	6808      	ldr	r0, [r1, #0]
 8010c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c1a:	f01e 0f10 	tst.w	lr, #16
 8010c1e:	bf08      	it	eq
 8010c20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010c24:	f380 8809 	msr	PSP, r0
 8010c28:	f3bf 8f6f 	isb	sy
 8010c2c:	4770      	bx	lr
 8010c2e:	bf00      	nop

08010c30 <pxCurrentTCBConst>:
 8010c30:	2000ea58 	.word	0x2000ea58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010c34:	bf00      	nop
 8010c36:	bf00      	nop

08010c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8010c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c42:	b672      	cpsid	i
 8010c44:	f383 8811 	msr	BASEPRI, r3
 8010c48:	f3bf 8f6f 	isb	sy
 8010c4c:	f3bf 8f4f 	dsb	sy
 8010c50:	b662      	cpsie	i
 8010c52:	607b      	str	r3, [r7, #4]
}
 8010c54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c56:	f7fe fd7b 	bl	800f750 <xTaskIncrementTick>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d003      	beq.n	8010c68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c60:	4b06      	ldr	r3, [pc, #24]	@ (8010c7c <SysTick_Handler+0x44>)
 8010c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c66:	601a      	str	r2, [r3, #0]
 8010c68:	2300      	movs	r3, #0
 8010c6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	f383 8811 	msr	BASEPRI, r3
}
 8010c72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c74:	bf00      	nop
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	e000ed04 	.word	0xe000ed04

08010c80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c80:	b480      	push	{r7}
 8010c82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c84:	4b0b      	ldr	r3, [pc, #44]	@ (8010cb4 <vPortSetupTimerInterrupt+0x34>)
 8010c86:	2200      	movs	r2, #0
 8010c88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8010cb8 <vPortSetupTimerInterrupt+0x38>)
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c90:	4b0a      	ldr	r3, [pc, #40]	@ (8010cbc <vPortSetupTimerInterrupt+0x3c>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4a0a      	ldr	r2, [pc, #40]	@ (8010cc0 <vPortSetupTimerInterrupt+0x40>)
 8010c96:	fba2 2303 	umull	r2, r3, r2, r3
 8010c9a:	099b      	lsrs	r3, r3, #6
 8010c9c:	4a09      	ldr	r2, [pc, #36]	@ (8010cc4 <vPortSetupTimerInterrupt+0x44>)
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010ca2:	4b04      	ldr	r3, [pc, #16]	@ (8010cb4 <vPortSetupTimerInterrupt+0x34>)
 8010ca4:	2207      	movs	r2, #7
 8010ca6:	601a      	str	r2, [r3, #0]
}
 8010ca8:	bf00      	nop
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	e000e010 	.word	0xe000e010
 8010cb8:	e000e018 	.word	0xe000e018
 8010cbc:	20000000 	.word	0x20000000
 8010cc0:	10624dd3 	.word	0x10624dd3
 8010cc4:	e000e014 	.word	0xe000e014

08010cc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010cc8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010cd8 <vPortEnableVFP+0x10>
 8010ccc:	6801      	ldr	r1, [r0, #0]
 8010cce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010cd2:	6001      	str	r1, [r0, #0]
 8010cd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010cd6:	bf00      	nop
 8010cd8:	e000ed88 	.word	0xe000ed88

08010cdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010cdc:	b480      	push	{r7}
 8010cde:	b085      	sub	sp, #20
 8010ce0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010ce2:	f3ef 8305 	mrs	r3, IPSR
 8010ce6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2b0f      	cmp	r3, #15
 8010cec:	d917      	bls.n	8010d1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010cee:	4a1a      	ldr	r2, [pc, #104]	@ (8010d58 <vPortValidateInterruptPriority+0x7c>)
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010cf8:	4b18      	ldr	r3, [pc, #96]	@ (8010d5c <vPortValidateInterruptPriority+0x80>)
 8010cfa:	781b      	ldrb	r3, [r3, #0]
 8010cfc:	7afa      	ldrb	r2, [r7, #11]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d20d      	bcs.n	8010d1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d06:	b672      	cpsid	i
 8010d08:	f383 8811 	msr	BASEPRI, r3
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	b662      	cpsie	i
 8010d16:	607b      	str	r3, [r7, #4]
}
 8010d18:	bf00      	nop
 8010d1a:	bf00      	nop
 8010d1c:	e7fd      	b.n	8010d1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d1e:	4b10      	ldr	r3, [pc, #64]	@ (8010d60 <vPortValidateInterruptPriority+0x84>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010d26:	4b0f      	ldr	r3, [pc, #60]	@ (8010d64 <vPortValidateInterruptPriority+0x88>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d90d      	bls.n	8010d4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8010d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d32:	b672      	cpsid	i
 8010d34:	f383 8811 	msr	BASEPRI, r3
 8010d38:	f3bf 8f6f 	isb	sy
 8010d3c:	f3bf 8f4f 	dsb	sy
 8010d40:	b662      	cpsie	i
 8010d42:	603b      	str	r3, [r7, #0]
}
 8010d44:	bf00      	nop
 8010d46:	bf00      	nop
 8010d48:	e7fd      	b.n	8010d46 <vPortValidateInterruptPriority+0x6a>
	}
 8010d4a:	bf00      	nop
 8010d4c:	3714      	adds	r7, #20
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	e000e3f0 	.word	0xe000e3f0
 8010d5c:	2000f084 	.word	0x2000f084
 8010d60:	e000ed0c 	.word	0xe000ed0c
 8010d64:	2000f088 	.word	0x2000f088

08010d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b08a      	sub	sp, #40	@ 0x28
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d70:	2300      	movs	r3, #0
 8010d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d74:	f7fe fc1c 	bl	800f5b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d78:	4b5f      	ldr	r3, [pc, #380]	@ (8010ef8 <pvPortMalloc+0x190>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d80:	f000 f924 	bl	8010fcc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d84:	4b5d      	ldr	r3, [pc, #372]	@ (8010efc <pvPortMalloc+0x194>)
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4013      	ands	r3, r2
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f040 8094 	bne.w	8010eba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d020      	beq.n	8010dda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010d98:	2208      	movs	r2, #8
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f003 0307 	and.w	r3, r3, #7
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d017      	beq.n	8010dda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f023 0307 	bic.w	r3, r3, #7
 8010db0:	3308      	adds	r3, #8
 8010db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f003 0307 	and.w	r3, r3, #7
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00d      	beq.n	8010dda <pvPortMalloc+0x72>
	__asm volatile
 8010dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc2:	b672      	cpsid	i
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	b662      	cpsie	i
 8010dd2:	617b      	str	r3, [r7, #20]
}
 8010dd4:	bf00      	nop
 8010dd6:	bf00      	nop
 8010dd8:	e7fd      	b.n	8010dd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d06c      	beq.n	8010eba <pvPortMalloc+0x152>
 8010de0:	4b47      	ldr	r3, [pc, #284]	@ (8010f00 <pvPortMalloc+0x198>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d867      	bhi.n	8010eba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010dea:	4b46      	ldr	r3, [pc, #280]	@ (8010f04 <pvPortMalloc+0x19c>)
 8010dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010dee:	4b45      	ldr	r3, [pc, #276]	@ (8010f04 <pvPortMalloc+0x19c>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010df4:	e004      	b.n	8010e00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	687a      	ldr	r2, [r7, #4]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d903      	bls.n	8010e12 <pvPortMalloc+0xaa>
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d1f1      	bne.n	8010df6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e12:	4b39      	ldr	r3, [pc, #228]	@ (8010ef8 <pvPortMalloc+0x190>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d04e      	beq.n	8010eba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e1c:	6a3b      	ldr	r3, [r7, #32]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	2208      	movs	r2, #8
 8010e22:	4413      	add	r3, r2
 8010e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	6a3b      	ldr	r3, [r7, #32]
 8010e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e30:	685a      	ldr	r2, [r3, #4]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	1ad2      	subs	r2, r2, r3
 8010e36:	2308      	movs	r3, #8
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d922      	bls.n	8010e84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	4413      	add	r3, r2
 8010e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	f003 0307 	and.w	r3, r3, #7
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00d      	beq.n	8010e6c <pvPortMalloc+0x104>
	__asm volatile
 8010e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e54:	b672      	cpsid	i
 8010e56:	f383 8811 	msr	BASEPRI, r3
 8010e5a:	f3bf 8f6f 	isb	sy
 8010e5e:	f3bf 8f4f 	dsb	sy
 8010e62:	b662      	cpsie	i
 8010e64:	613b      	str	r3, [r7, #16]
}
 8010e66:	bf00      	nop
 8010e68:	bf00      	nop
 8010e6a:	e7fd      	b.n	8010e68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e6e:	685a      	ldr	r2, [r3, #4]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	1ad2      	subs	r2, r2, r3
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e7a:	687a      	ldr	r2, [r7, #4]
 8010e7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e7e:	69b8      	ldr	r0, [r7, #24]
 8010e80:	f000 f906 	bl	8011090 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e84:	4b1e      	ldr	r3, [pc, #120]	@ (8010f00 <pvPortMalloc+0x198>)
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	1ad3      	subs	r3, r2, r3
 8010e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8010f00 <pvPortMalloc+0x198>)
 8010e90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e92:	4b1b      	ldr	r3, [pc, #108]	@ (8010f00 <pvPortMalloc+0x198>)
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	4b1c      	ldr	r3, [pc, #112]	@ (8010f08 <pvPortMalloc+0x1a0>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d203      	bcs.n	8010ea6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e9e:	4b18      	ldr	r3, [pc, #96]	@ (8010f00 <pvPortMalloc+0x198>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	4a19      	ldr	r2, [pc, #100]	@ (8010f08 <pvPortMalloc+0x1a0>)
 8010ea4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea8:	685a      	ldr	r2, [r3, #4]
 8010eaa:	4b14      	ldr	r3, [pc, #80]	@ (8010efc <pvPortMalloc+0x194>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	431a      	orrs	r2, r3
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010eba:	f7fe fb87 	bl	800f5cc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d101      	bne.n	8010ec8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010ec4:	f7ef fd22 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	f003 0307 	and.w	r3, r3, #7
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00d      	beq.n	8010eee <pvPortMalloc+0x186>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed6:	b672      	cpsid	i
 8010ed8:	f383 8811 	msr	BASEPRI, r3
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	f3bf 8f4f 	dsb	sy
 8010ee4:	b662      	cpsie	i
 8010ee6:	60fb      	str	r3, [r7, #12]
}
 8010ee8:	bf00      	nop
 8010eea:	bf00      	nop
 8010eec:	e7fd      	b.n	8010eea <pvPortMalloc+0x182>
	return pvReturn;
 8010eee:	69fb      	ldr	r3, [r7, #28]
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3728      	adds	r7, #40	@ 0x28
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}
 8010ef8:	20027094 	.word	0x20027094
 8010efc:	200270a0 	.word	0x200270a0
 8010f00:	20027098 	.word	0x20027098
 8010f04:	2002708c 	.word	0x2002708c
 8010f08:	2002709c 	.word	0x2002709c

08010f0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b086      	sub	sp, #24
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d04e      	beq.n	8010fbc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010f1e:	2308      	movs	r3, #8
 8010f20:	425b      	negs	r3, r3
 8010f22:	697a      	ldr	r2, [r7, #20]
 8010f24:	4413      	add	r3, r2
 8010f26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	685a      	ldr	r2, [r3, #4]
 8010f30:	4b24      	ldr	r3, [pc, #144]	@ (8010fc4 <vPortFree+0xb8>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4013      	ands	r3, r2
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d10d      	bne.n	8010f56 <vPortFree+0x4a>
	__asm volatile
 8010f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f3e:	b672      	cpsid	i
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	b662      	cpsie	i
 8010f4e:	60fb      	str	r3, [r7, #12]
}
 8010f50:	bf00      	nop
 8010f52:	bf00      	nop
 8010f54:	e7fd      	b.n	8010f52 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d00d      	beq.n	8010f7a <vPortFree+0x6e>
	__asm volatile
 8010f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f62:	b672      	cpsid	i
 8010f64:	f383 8811 	msr	BASEPRI, r3
 8010f68:	f3bf 8f6f 	isb	sy
 8010f6c:	f3bf 8f4f 	dsb	sy
 8010f70:	b662      	cpsie	i
 8010f72:	60bb      	str	r3, [r7, #8]
}
 8010f74:	bf00      	nop
 8010f76:	bf00      	nop
 8010f78:	e7fd      	b.n	8010f76 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	685a      	ldr	r2, [r3, #4]
 8010f7e:	4b11      	ldr	r3, [pc, #68]	@ (8010fc4 <vPortFree+0xb8>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	4013      	ands	r3, r2
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d019      	beq.n	8010fbc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d115      	bne.n	8010fbc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	685a      	ldr	r2, [r3, #4]
 8010f94:	4b0b      	ldr	r3, [pc, #44]	@ (8010fc4 <vPortFree+0xb8>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	43db      	mvns	r3, r3
 8010f9a:	401a      	ands	r2, r3
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010fa0:	f7fe fb06 	bl	800f5b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	685a      	ldr	r2, [r3, #4]
 8010fa8:	4b07      	ldr	r3, [pc, #28]	@ (8010fc8 <vPortFree+0xbc>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	4413      	add	r3, r2
 8010fae:	4a06      	ldr	r2, [pc, #24]	@ (8010fc8 <vPortFree+0xbc>)
 8010fb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010fb2:	6938      	ldr	r0, [r7, #16]
 8010fb4:	f000 f86c 	bl	8011090 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010fb8:	f7fe fb08 	bl	800f5cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010fbc:	bf00      	nop
 8010fbe:	3718      	adds	r7, #24
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	200270a0 	.word	0x200270a0
 8010fc8:	20027098 	.word	0x20027098

08010fcc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b085      	sub	sp, #20
 8010fd0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010fd2:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8010fd6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010fd8:	4b27      	ldr	r3, [pc, #156]	@ (8011078 <prvHeapInit+0xac>)
 8010fda:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	f003 0307 	and.w	r3, r3, #7
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d00c      	beq.n	8011000 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	3307      	adds	r3, #7
 8010fea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f023 0307 	bic.w	r3, r3, #7
 8010ff2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8011078 <prvHeapInit+0xac>)
 8010ffc:	4413      	add	r3, r2
 8010ffe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011004:	4a1d      	ldr	r2, [pc, #116]	@ (801107c <prvHeapInit+0xb0>)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801100a:	4b1c      	ldr	r3, [pc, #112]	@ (801107c <prvHeapInit+0xb0>)
 801100c:	2200      	movs	r2, #0
 801100e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	68ba      	ldr	r2, [r7, #8]
 8011014:	4413      	add	r3, r2
 8011016:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011018:	2208      	movs	r2, #8
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	1a9b      	subs	r3, r3, r2
 801101e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	f023 0307 	bic.w	r3, r3, #7
 8011026:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	4a15      	ldr	r2, [pc, #84]	@ (8011080 <prvHeapInit+0xb4>)
 801102c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801102e:	4b14      	ldr	r3, [pc, #80]	@ (8011080 <prvHeapInit+0xb4>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2200      	movs	r2, #0
 8011034:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011036:	4b12      	ldr	r3, [pc, #72]	@ (8011080 <prvHeapInit+0xb4>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	2200      	movs	r2, #0
 801103c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	1ad2      	subs	r2, r2, r3
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801104c:	4b0c      	ldr	r3, [pc, #48]	@ (8011080 <prvHeapInit+0xb4>)
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	4a0a      	ldr	r2, [pc, #40]	@ (8011084 <prvHeapInit+0xb8>)
 801105a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	4a09      	ldr	r2, [pc, #36]	@ (8011088 <prvHeapInit+0xbc>)
 8011062:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011064:	4b09      	ldr	r3, [pc, #36]	@ (801108c <prvHeapInit+0xc0>)
 8011066:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801106a:	601a      	str	r2, [r3, #0]
}
 801106c:	bf00      	nop
 801106e:	3714      	adds	r7, #20
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr
 8011078:	2000f08c 	.word	0x2000f08c
 801107c:	2002708c 	.word	0x2002708c
 8011080:	20027094 	.word	0x20027094
 8011084:	2002709c 	.word	0x2002709c
 8011088:	20027098 	.word	0x20027098
 801108c:	200270a0 	.word	0x200270a0

08011090 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011098:	4b28      	ldr	r3, [pc, #160]	@ (801113c <prvInsertBlockIntoFreeList+0xac>)
 801109a:	60fb      	str	r3, [r7, #12]
 801109c:	e002      	b.n	80110a4 <prvInsertBlockIntoFreeList+0x14>
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	60fb      	str	r3, [r7, #12]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d8f7      	bhi.n	801109e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	68ba      	ldr	r2, [r7, #8]
 80110b8:	4413      	add	r3, r2
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d108      	bne.n	80110d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	685a      	ldr	r2, [r3, #4]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	441a      	add	r2, r3
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	68ba      	ldr	r2, [r7, #8]
 80110dc:	441a      	add	r2, r3
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d118      	bne.n	8011118 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	4b15      	ldr	r3, [pc, #84]	@ (8011140 <prvInsertBlockIntoFreeList+0xb0>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d00d      	beq.n	801110e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	685a      	ldr	r2, [r3, #4]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	441a      	add	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	601a      	str	r2, [r3, #0]
 801110c:	e008      	b.n	8011120 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801110e:	4b0c      	ldr	r3, [pc, #48]	@ (8011140 <prvInsertBlockIntoFreeList+0xb0>)
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	601a      	str	r2, [r3, #0]
 8011116:	e003      	b.n	8011120 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011120:	68fa      	ldr	r2, [r7, #12]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	429a      	cmp	r2, r3
 8011126:	d002      	beq.n	801112e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801112e:	bf00      	nop
 8011130:	3714      	adds	r7, #20
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	2002708c 	.word	0x2002708c
 8011140:	20027094 	.word	0x20027094

08011144 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	330c      	adds	r3, #12
 8011154:	461a      	mov	r2, r3
 8011156:	6839      	ldr	r1, [r7, #0]
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f001 fff7 	bl	801314c <tcpip_send_msg_wait_sem>
 801115e:	4603      	mov	r3, r0
 8011160:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d103      	bne.n	8011172 <netconn_apimsg+0x2e>
    return apimsg->err;
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011170:	e001      	b.n	8011176 <netconn_apimsg+0x32>
  }
  return err;
 8011172:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011176:	4618      	mov	r0, r3
 8011178:	3710      	adds	r7, #16
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}
	...

08011180 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b08c      	sub	sp, #48	@ 0x30
 8011184:	af00      	add	r7, sp, #0
 8011186:	4603      	mov	r3, r0
 8011188:	603a      	str	r2, [r7, #0]
 801118a:	71fb      	strb	r3, [r7, #7]
 801118c:	460b      	mov	r3, r1
 801118e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011190:	79fb      	ldrb	r3, [r7, #7]
 8011192:	6839      	ldr	r1, [r7, #0]
 8011194:	4618      	mov	r0, r3
 8011196:	f000 ff21 	bl	8011fdc <netconn_alloc>
 801119a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 801119c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d054      	beq.n	801124c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80111a2:	79bb      	ldrb	r3, [r7, #6]
 80111a4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80111a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111a8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80111aa:	f107 0308 	add.w	r3, r7, #8
 80111ae:	4619      	mov	r1, r3
 80111b0:	4829      	ldr	r0, [pc, #164]	@ (8011258 <netconn_new_with_proto_and_callback+0xd8>)
 80111b2:	f7ff ffc7 	bl	8011144 <netconn_apimsg>
 80111b6:	4603      	mov	r3, r0
 80111b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80111bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d043      	beq.n	801124c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80111c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d005      	beq.n	80111d8 <netconn_new_with_proto_and_callback+0x58>
 80111cc:	4b23      	ldr	r3, [pc, #140]	@ (801125c <netconn_new_with_proto_and_callback+0xdc>)
 80111ce:	22a3      	movs	r2, #163	@ 0xa3
 80111d0:	4923      	ldr	r1, [pc, #140]	@ (8011260 <netconn_new_with_proto_and_callback+0xe0>)
 80111d2:	4824      	ldr	r0, [pc, #144]	@ (8011264 <netconn_new_with_proto_and_callback+0xe4>)
 80111d4:	f00e ff36 	bl	8020044 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80111d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111da:	3310      	adds	r3, #16
 80111dc:	4618      	mov	r0, r3
 80111de:	f00d fba3 	bl	801e928 <sys_mbox_valid>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d105      	bne.n	80111f4 <netconn_new_with_proto_and_callback+0x74>
 80111e8:	4b1c      	ldr	r3, [pc, #112]	@ (801125c <netconn_new_with_proto_and_callback+0xdc>)
 80111ea:	22a4      	movs	r2, #164	@ 0xa4
 80111ec:	491e      	ldr	r1, [pc, #120]	@ (8011268 <netconn_new_with_proto_and_callback+0xe8>)
 80111ee:	481d      	ldr	r0, [pc, #116]	@ (8011264 <netconn_new_with_proto_and_callback+0xe4>)
 80111f0:	f00e ff28 	bl	8020044 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80111f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111f6:	3314      	adds	r3, #20
 80111f8:	4618      	mov	r0, r3
 80111fa:	f00d fb95 	bl	801e928 <sys_mbox_valid>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d005      	beq.n	8011210 <netconn_new_with_proto_and_callback+0x90>
 8011204:	4b15      	ldr	r3, [pc, #84]	@ (801125c <netconn_new_with_proto_and_callback+0xdc>)
 8011206:	22a6      	movs	r2, #166	@ 0xa6
 8011208:	4918      	ldr	r1, [pc, #96]	@ (801126c <netconn_new_with_proto_and_callback+0xec>)
 801120a:	4816      	ldr	r0, [pc, #88]	@ (8011264 <netconn_new_with_proto_and_callback+0xe4>)
 801120c:	f00e ff1a 	bl	8020044 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8011210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011212:	330c      	adds	r3, #12
 8011214:	4618      	mov	r0, r3
 8011216:	f00d fc41 	bl	801ea9c <sys_sem_valid>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d105      	bne.n	801122c <netconn_new_with_proto_and_callback+0xac>
 8011220:	4b0e      	ldr	r3, [pc, #56]	@ (801125c <netconn_new_with_proto_and_callback+0xdc>)
 8011222:	22a9      	movs	r2, #169	@ 0xa9
 8011224:	4912      	ldr	r1, [pc, #72]	@ (8011270 <netconn_new_with_proto_and_callback+0xf0>)
 8011226:	480f      	ldr	r0, [pc, #60]	@ (8011264 <netconn_new_with_proto_and_callback+0xe4>)
 8011228:	f00e ff0c 	bl	8020044 <iprintf>
      sys_sem_free(&conn->op_completed);
 801122c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801122e:	330c      	adds	r3, #12
 8011230:	4618      	mov	r0, r3
 8011232:	f00d fc1b 	bl	801ea6c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8011236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011238:	3310      	adds	r3, #16
 801123a:	4618      	mov	r0, r3
 801123c:	f00d fae0 	bl	801e800 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011242:	2007      	movs	r0, #7
 8011244:	f002 fdfc 	bl	8013e40 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011248:	2300      	movs	r3, #0
 801124a:	e000      	b.n	801124e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801124c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801124e:	4618      	mov	r0, r3
 8011250:	3730      	adds	r7, #48	@ 0x30
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	08011fb1 	.word	0x08011fb1
 801125c:	08021160 	.word	0x08021160
 8011260:	08021194 	.word	0x08021194
 8011264:	080211b8 	.word	0x080211b8
 8011268:	080211e0 	.word	0x080211e0
 801126c:	080211f8 	.word	0x080211f8
 8011270:	0802121c 	.word	0x0802121c

08011274 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b08c      	sub	sp, #48	@ 0x30
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d101      	bne.n	8011286 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011282:	2300      	movs	r3, #0
 8011284:	e014      	b.n	80112b0 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801128a:	2329      	movs	r3, #41	@ 0x29
 801128c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801128e:	f107 030c 	add.w	r3, r7, #12
 8011292:	4619      	mov	r1, r3
 8011294:	4808      	ldr	r0, [pc, #32]	@ (80112b8 <netconn_prepare_delete+0x44>)
 8011296:	f7ff ff55 	bl	8011144 <netconn_apimsg>
 801129a:	4603      	mov	r3, r0
 801129c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80112a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d002      	beq.n	80112ae <netconn_prepare_delete+0x3a>
    return err;
 80112a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80112ac:	e000      	b.n	80112b0 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80112ae:	2300      	movs	r3, #0
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3730      	adds	r7, #48	@ 0x30
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	0801251d 	.word	0x0801251d

080112bc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d101      	bne.n	80112ce <netconn_delete+0x12>
    return ERR_OK;
 80112ca:	2300      	movs	r3, #0
 80112cc:	e00d      	b.n	80112ea <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f7ff ffd0 	bl	8011274 <netconn_prepare_delete>
 80112d4:	4603      	mov	r3, r0
 80112d6:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80112d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d102      	bne.n	80112e6 <netconn_delete+0x2a>
    netconn_free(conn);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f000 fee9 	bl	80120b8 <netconn_free>
  }
  return err;
 80112e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}
	...

080112f4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b08e      	sub	sp, #56	@ 0x38
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	4613      	mov	r3, r2
 8011300:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d109      	bne.n	801131c <netconn_bind+0x28>
 8011308:	4b11      	ldr	r3, [pc, #68]	@ (8011350 <netconn_bind+0x5c>)
 801130a:	f44f 729c 	mov.w	r2, #312	@ 0x138
 801130e:	4911      	ldr	r1, [pc, #68]	@ (8011354 <netconn_bind+0x60>)
 8011310:	4811      	ldr	r0, [pc, #68]	@ (8011358 <netconn_bind+0x64>)
 8011312:	f00e fe97 	bl	8020044 <iprintf>
 8011316:	f06f 030f 	mvn.w	r3, #15
 801131a:	e015      	b.n	8011348 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d101      	bne.n	8011326 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8011322:	4b0e      	ldr	r3, [pc, #56]	@ (801135c <netconn_bind+0x68>)
 8011324:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801132e:	88fb      	ldrh	r3, [r7, #6]
 8011330:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011332:	f107 0314 	add.w	r3, r7, #20
 8011336:	4619      	mov	r1, r3
 8011338:	4809      	ldr	r0, [pc, #36]	@ (8011360 <netconn_bind+0x6c>)
 801133a:	f7ff ff03 	bl	8011144 <netconn_apimsg>
 801133e:	4603      	mov	r3, r0
 8011340:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011344:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8011348:	4618      	mov	r0, r3
 801134a:	3738      	adds	r7, #56	@ 0x38
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	08021160 	.word	0x08021160
 8011354:	08021298 	.word	0x08021298
 8011358:	080211b8 	.word	0x080211b8
 801135c:	08024db8 	.word	0x08024db8
 8011360:	080126e5 	.word	0x080126e5

08011364 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b088      	sub	sp, #32
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	4613      	mov	r3, r2
 8011370:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8011372:	2300      	movs	r3, #0
 8011374:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d109      	bne.n	8011390 <netconn_recv_data+0x2c>
 801137c:	4b58      	ldr	r3, [pc, #352]	@ (80114e0 <netconn_recv_data+0x17c>)
 801137e:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8011382:	4958      	ldr	r1, [pc, #352]	@ (80114e4 <netconn_recv_data+0x180>)
 8011384:	4858      	ldr	r0, [pc, #352]	@ (80114e8 <netconn_recv_data+0x184>)
 8011386:	f00e fe5d 	bl	8020044 <iprintf>
 801138a:	f06f 030f 	mvn.w	r3, #15
 801138e:	e0a2      	b.n	80114d6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	2200      	movs	r2, #0
 8011394:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d109      	bne.n	80113b0 <netconn_recv_data+0x4c>
 801139c:	4b50      	ldr	r3, [pc, #320]	@ (80114e0 <netconn_recv_data+0x17c>)
 801139e:	f240 224a 	movw	r2, #586	@ 0x24a
 80113a2:	4952      	ldr	r1, [pc, #328]	@ (80114ec <netconn_recv_data+0x188>)
 80113a4:	4850      	ldr	r0, [pc, #320]	@ (80114e8 <netconn_recv_data+0x184>)
 80113a6:	f00e fe4d 	bl	8020044 <iprintf>
 80113aa:	f06f 030f 	mvn.w	r3, #15
 80113ae:	e092      	b.n	80114d6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	3310      	adds	r3, #16
 80113b4:	4618      	mov	r0, r3
 80113b6:	f00d fab7 	bl	801e928 <sys_mbox_valid>
 80113ba:	4603      	mov	r3, r0
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d10e      	bne.n	80113de <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80113c0:	68f8      	ldr	r0, [r7, #12]
 80113c2:	f000 fa45 	bl	8011850 <netconn_err>
 80113c6:	4603      	mov	r3, r0
 80113c8:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80113ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d002      	beq.n	80113d8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80113d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80113d6:	e07e      	b.n	80114d6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80113d8:	f06f 030a 	mvn.w	r3, #10
 80113dc:	e07b      	b.n	80114d6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	7f1b      	ldrb	r3, [r3, #28]
 80113e2:	f003 0302 	and.w	r3, r3, #2
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d10f      	bne.n	801140a <netconn_recv_data+0xa6>
 80113ea:	79fb      	ldrb	r3, [r7, #7]
 80113ec:	f003 0304 	and.w	r3, r3, #4
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d10a      	bne.n	801140a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	7f1b      	ldrb	r3, [r3, #28]
 80113f8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d104      	bne.n	801140a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d023      	beq.n	8011452 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	3310      	adds	r3, #16
 801140e:	f107 0218 	add.w	r2, r7, #24
 8011412:	4611      	mov	r1, r2
 8011414:	4618      	mov	r0, r3
 8011416:	f00d fa70 	bl	801e8fa <sys_arch_mbox_tryfetch>
 801141a:	4603      	mov	r3, r0
 801141c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011420:	d11f      	bne.n	8011462 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f000 fa14 	bl	8011850 <netconn_err>
 8011428:	4603      	mov	r3, r0
 801142a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 801142c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d002      	beq.n	801143a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8011434:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011438:	e04d      	b.n	80114d6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	7f1b      	ldrb	r3, [r3, #28]
 801143e:	f003 0301 	and.w	r3, r3, #1
 8011442:	2b00      	cmp	r3, #0
 8011444:	d002      	beq.n	801144c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011446:	f06f 030a 	mvn.w	r3, #10
 801144a:	e044      	b.n	80114d6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 801144c:	f06f 0306 	mvn.w	r3, #6
 8011450:	e041      	b.n	80114d6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	3310      	adds	r3, #16
 8011456:	f107 0118 	add.w	r1, r7, #24
 801145a:	2200      	movs	r2, #0
 801145c:	4618      	mov	r0, r3
 801145e:	f00d fa1b 	bl	801e898 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801146a:	2b10      	cmp	r3, #16
 801146c:	d117      	bne.n	801149e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	f107 0217 	add.w	r2, r7, #23
 8011474:	4611      	mov	r1, r2
 8011476:	4618      	mov	r0, r3
 8011478:	f000 fa3c 	bl	80118f4 <lwip_netconn_is_err_msg>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d009      	beq.n	8011496 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011486:	f113 0f0f 	cmn.w	r3, #15
 801148a:	d101      	bne.n	8011490 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801148c:	2300      	movs	r3, #0
 801148e:	e022      	b.n	80114d6 <netconn_recv_data+0x172>
      }
      return err;
 8011490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011494:	e01f      	b.n	80114d6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011496:	69bb      	ldr	r3, [r7, #24]
 8011498:	891b      	ldrh	r3, [r3, #8]
 801149a:	83fb      	strh	r3, [r7, #30]
 801149c:	e00d      	b.n	80114ba <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d106      	bne.n	80114b2 <netconn_recv_data+0x14e>
 80114a4:	4b0e      	ldr	r3, [pc, #56]	@ (80114e0 <netconn_recv_data+0x17c>)
 80114a6:	f240 2291 	movw	r2, #657	@ 0x291
 80114aa:	4911      	ldr	r1, [pc, #68]	@ (80114f0 <netconn_recv_data+0x18c>)
 80114ac:	480e      	ldr	r0, [pc, #56]	@ (80114e8 <netconn_recv_data+0x184>)
 80114ae:	f00e fdc9 	bl	8020044 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	891b      	ldrh	r3, [r3, #8]
 80114b8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d005      	beq.n	80114ce <netconn_recv_data+0x16a>
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114c6:	8bfa      	ldrh	r2, [r7, #30]
 80114c8:	2101      	movs	r1, #1
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80114ce:	69ba      	ldr	r2, [r7, #24]
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80114d4:	2300      	movs	r3, #0
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3720      	adds	r7, #32
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop
 80114e0:	08021160 	.word	0x08021160
 80114e4:	08021378 	.word	0x08021378
 80114e8:	080211b8 	.word	0x080211b8
 80114ec:	08021398 	.word	0x08021398
 80114f0:	080213b4 	.word	0x080213b4

080114f4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d005      	beq.n	8011512 <netconn_tcp_recvd_msg+0x1e>
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	781b      	ldrb	r3, [r3, #0]
 801150a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801150e:	2b10      	cmp	r3, #16
 8011510:	d009      	beq.n	8011526 <netconn_tcp_recvd_msg+0x32>
 8011512:	4b0c      	ldr	r3, [pc, #48]	@ (8011544 <netconn_tcp_recvd_msg+0x50>)
 8011514:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8011518:	490b      	ldr	r1, [pc, #44]	@ (8011548 <netconn_tcp_recvd_msg+0x54>)
 801151a:	480c      	ldr	r0, [pc, #48]	@ (801154c <netconn_tcp_recvd_msg+0x58>)
 801151c:	f00e fd92 	bl	8020044 <iprintf>
 8011520:	f06f 030f 	mvn.w	r3, #15
 8011524:	e00a      	b.n	801153c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	68fa      	ldr	r2, [r7, #12]
 801152a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011532:	6879      	ldr	r1, [r7, #4]
 8011534:	4806      	ldr	r0, [pc, #24]	@ (8011550 <netconn_tcp_recvd_msg+0x5c>)
 8011536:	f7ff fe05 	bl	8011144 <netconn_apimsg>
 801153a:	4603      	mov	r3, r0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	08021160 	.word	0x08021160
 8011548:	080213c0 	.word	0x080213c0
 801154c:	080211b8 	.word	0x080211b8
 8011550:	080127f3 	.word	0x080127f3

08011554 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b090      	sub	sp, #64	@ 0x40
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	4613      	mov	r3, r2
 8011560:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	3310      	adds	r3, #16
 8011566:	4618      	mov	r0, r3
 8011568:	f00d f9de 	bl	801e928 <sys_mbox_valid>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d102      	bne.n	8011578 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011572:	f06f 030a 	mvn.w	r3, #10
 8011576:	e06d      	b.n	8011654 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	7f1b      	ldrb	r3, [r3, #28]
 801157c:	b25b      	sxtb	r3, r3
 801157e:	2b00      	cmp	r3, #0
 8011580:	da07      	bge.n	8011592 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	7f1b      	ldrb	r3, [r3, #28]
 8011586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801158a:	b2da      	uxtb	r2, r3
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011590:	e039      	b.n	8011606 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011592:	79fb      	ldrb	r3, [r7, #7]
 8011594:	461a      	mov	r2, r3
 8011596:	68b9      	ldr	r1, [r7, #8]
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f7ff fee3 	bl	8011364 <netconn_recv_data>
 801159e:	4603      	mov	r3, r0
 80115a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80115a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d002      	beq.n	80115b2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80115ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80115b0:	e050      	b.n	8011654 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80115b8:	79fb      	ldrb	r3, [r7, #7]
 80115ba:	f003 0308 	and.w	r3, r3, #8
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d10e      	bne.n	80115e0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80115c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d002      	beq.n	80115ce <netconn_recv_data_tcp+0x7a>
 80115c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ca:	891b      	ldrh	r3, [r3, #8]
 80115cc:	e000      	b.n	80115d0 <netconn_recv_data_tcp+0x7c>
 80115ce:	2301      	movs	r3, #1
 80115d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80115d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80115d4:	f107 0214 	add.w	r2, r7, #20
 80115d8:	4619      	mov	r1, r3
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f7ff ff8a 	bl	80114f4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80115e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d134      	bne.n	8011650 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80115e6:	79fb      	ldrb	r3, [r7, #7]
 80115e8:	f003 0310 	and.w	r3, r3, #16
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d009      	beq.n	8011604 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	7f1b      	ldrb	r3, [r3, #28]
 80115f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80115f8:	b2da      	uxtb	r2, r3
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80115fe:	f06f 0306 	mvn.w	r3, #6
 8011602:	e027      	b.n	8011654 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011604:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801160a:	2b00      	cmp	r3, #0
 801160c:	d005      	beq.n	801161a <netconn_recv_data_tcp+0xc6>
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011612:	2200      	movs	r2, #0
 8011614:	2101      	movs	r1, #1
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d10f      	bne.n	8011642 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f000 f914 	bl	8011850 <netconn_err>
 8011628:	4603      	mov	r3, r0
 801162a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 801162e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011632:	2b00      	cmp	r3, #0
 8011634:	d002      	beq.n	801163c <netconn_recv_data_tcp+0xe8>
          return err;
 8011636:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801163a:	e00b      	b.n	8011654 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 801163c:	f06f 030d 	mvn.w	r3, #13
 8011640:	e008      	b.n	8011654 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011642:	2101      	movs	r1, #1
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	f000 f8d3 	bl	80117f0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801164a:	f06f 030e 	mvn.w	r3, #14
 801164e:	e001      	b.n	8011654 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011650:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011654:	4618      	mov	r0, r3
 8011656:	3740      	adds	r7, #64	@ 0x40
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}

0801165c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b086      	sub	sp, #24
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011666:	2300      	movs	r3, #0
 8011668:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d109      	bne.n	8011684 <netconn_recv+0x28>
 8011670:	4b32      	ldr	r3, [pc, #200]	@ (801173c <netconn_recv+0xe0>)
 8011672:	f240 3263 	movw	r2, #867	@ 0x363
 8011676:	4932      	ldr	r1, [pc, #200]	@ (8011740 <netconn_recv+0xe4>)
 8011678:	4832      	ldr	r0, [pc, #200]	@ (8011744 <netconn_recv+0xe8>)
 801167a:	f00e fce3 	bl	8020044 <iprintf>
 801167e:	f06f 030f 	mvn.w	r3, #15
 8011682:	e056      	b.n	8011732 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2200      	movs	r2, #0
 8011688:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d109      	bne.n	80116a4 <netconn_recv+0x48>
 8011690:	4b2a      	ldr	r3, [pc, #168]	@ (801173c <netconn_recv+0xe0>)
 8011692:	f240 3265 	movw	r2, #869	@ 0x365
 8011696:	492c      	ldr	r1, [pc, #176]	@ (8011748 <netconn_recv+0xec>)
 8011698:	482a      	ldr	r0, [pc, #168]	@ (8011744 <netconn_recv+0xe8>)
 801169a:	f00e fcd3 	bl	8020044 <iprintf>
 801169e:	f06f 030f 	mvn.w	r3, #15
 80116a2:	e046      	b.n	8011732 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80116ac:	2b10      	cmp	r3, #16
 80116ae:	d13a      	bne.n	8011726 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80116b0:	2300      	movs	r3, #0
 80116b2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80116b4:	2006      	movs	r0, #6
 80116b6:	f002 fb47 	bl	8013d48 <memp_malloc>
 80116ba:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d102      	bne.n	80116c8 <netconn_recv+0x6c>
      return ERR_MEM;
 80116c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80116c6:	e034      	b.n	8011732 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80116c8:	f107 030c 	add.w	r3, r7, #12
 80116cc:	2200      	movs	r2, #0
 80116ce:	4619      	mov	r1, r3
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f7ff ff3f 	bl	8011554 <netconn_recv_data_tcp>
 80116d6:	4603      	mov	r3, r0
 80116d8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80116da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d006      	beq.n	80116f0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80116e2:	6979      	ldr	r1, [r7, #20]
 80116e4:	2006      	movs	r0, #6
 80116e6:	f002 fbab 	bl	8013e40 <memp_free>
      return err;
 80116ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80116ee:	e020      	b.n	8011732 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d106      	bne.n	8011704 <netconn_recv+0xa8>
 80116f6:	4b11      	ldr	r3, [pc, #68]	@ (801173c <netconn_recv+0xe0>)
 80116f8:	f240 3279 	movw	r2, #889	@ 0x379
 80116fc:	4913      	ldr	r1, [pc, #76]	@ (801174c <netconn_recv+0xf0>)
 80116fe:	4811      	ldr	r0, [pc, #68]	@ (8011744 <netconn_recv+0xe8>)
 8011700:	f00e fca0 	bl	8020044 <iprintf>

    buf->p = p;
 8011704:	68fa      	ldr	r2, [r7, #12]
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	2200      	movs	r2, #0
 8011714:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	2200      	movs	r2, #0
 801171a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	697a      	ldr	r2, [r7, #20]
 8011720:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011722:	2300      	movs	r3, #0
 8011724:	e005      	b.n	8011732 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8011726:	2200      	movs	r2, #0
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f7ff fe1a 	bl	8011364 <netconn_recv_data>
 8011730:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011732:	4618      	mov	r0, r3
 8011734:	3718      	adds	r7, #24
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	08021160 	.word	0x08021160
 8011740:	08021378 	.word	0x08021378
 8011744:	080211b8 	.word	0x080211b8
 8011748:	08021398 	.word	0x08021398
 801174c:	08021410 	.word	0x08021410

08011750 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	607a      	str	r2, [r7, #4]
 801175c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d011      	beq.n	8011788 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d002      	beq.n	8011770 <netconn_sendto+0x20>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	e000      	b.n	8011772 <netconn_sendto+0x22>
 8011770:	2300      	movs	r3, #0
 8011772:	68ba      	ldr	r2, [r7, #8]
 8011774:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	887a      	ldrh	r2, [r7, #2]
 801177a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 801177c:	68b9      	ldr	r1, [r7, #8]
 801177e:	68f8      	ldr	r0, [r7, #12]
 8011780:	f000 f808 	bl	8011794 <netconn_send>
 8011784:	4603      	mov	r3, r0
 8011786:	e001      	b.n	801178c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8011788:	f06f 0305 	mvn.w	r3, #5
}
 801178c:	4618      	mov	r0, r3
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}

08011794 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b08c      	sub	sp, #48	@ 0x30
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d109      	bne.n	80117b8 <netconn_send+0x24>
 80117a4:	4b0e      	ldr	r3, [pc, #56]	@ (80117e0 <netconn_send+0x4c>)
 80117a6:	f240 32b2 	movw	r2, #946	@ 0x3b2
 80117aa:	490e      	ldr	r1, [pc, #56]	@ (80117e4 <netconn_send+0x50>)
 80117ac:	480e      	ldr	r0, [pc, #56]	@ (80117e8 <netconn_send+0x54>)
 80117ae:	f00e fc49 	bl	8020044 <iprintf>
 80117b2:	f06f 030f 	mvn.w	r3, #15
 80117b6:	e00e      	b.n	80117d6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80117c0:	f107 030c 	add.w	r3, r7, #12
 80117c4:	4619      	mov	r1, r3
 80117c6:	4809      	ldr	r0, [pc, #36]	@ (80117ec <netconn_send+0x58>)
 80117c8:	f7ff fcbc 	bl	8011144 <netconn_apimsg>
 80117cc:	4603      	mov	r3, r0
 80117ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80117d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80117d6:	4618      	mov	r0, r3
 80117d8:	3730      	adds	r7, #48	@ 0x30
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	bf00      	nop
 80117e0:	08021160 	.word	0x08021160
 80117e4:	0802141c 	.word	0x0802141c
 80117e8:	080211b8 	.word	0x080211b8
 80117ec:	08012759 	.word	0x08012759

080117f0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b08c      	sub	sp, #48	@ 0x30
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d109      	bne.n	8011816 <netconn_close_shutdown+0x26>
 8011802:	4b0f      	ldr	r3, [pc, #60]	@ (8011840 <netconn_close_shutdown+0x50>)
 8011804:	f240 4247 	movw	r2, #1095	@ 0x447
 8011808:	490e      	ldr	r1, [pc, #56]	@ (8011844 <netconn_close_shutdown+0x54>)
 801180a:	480f      	ldr	r0, [pc, #60]	@ (8011848 <netconn_close_shutdown+0x58>)
 801180c:	f00e fc1a 	bl	8020044 <iprintf>
 8011810:	f06f 030f 	mvn.w	r3, #15
 8011814:	e010      	b.n	8011838 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801181a:	78fb      	ldrb	r3, [r7, #3]
 801181c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801181e:	2329      	movs	r3, #41	@ 0x29
 8011820:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011822:	f107 030c 	add.w	r3, r7, #12
 8011826:	4619      	mov	r1, r3
 8011828:	4808      	ldr	r0, [pc, #32]	@ (801184c <netconn_close_shutdown+0x5c>)
 801182a:	f7ff fc8b 	bl	8011144 <netconn_apimsg>
 801182e:	4603      	mov	r3, r0
 8011830:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011834:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011838:	4618      	mov	r0, r3
 801183a:	3730      	adds	r7, #48	@ 0x30
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	08021160 	.word	0x08021160
 8011844:	0802149c 	.word	0x0802149c
 8011848:	080211b8 	.word	0x080211b8
 801184c:	08012bf5 	.word	0x08012bf5

08011850 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d101      	bne.n	8011862 <netconn_err+0x12>
    return ERR_OK;
 801185e:	2300      	movs	r3, #0
 8011860:	e00d      	b.n	801187e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011862:	f00d f9b7 	bl	801ebd4 <sys_arch_protect>
 8011866:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	7a1b      	ldrb	r3, [r3, #8]
 801186c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2200      	movs	r2, #0
 8011872:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f00d f9bb 	bl	801ebf0 <sys_arch_unprotect>
  return err;
 801187a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
	...

08011888 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	4603      	mov	r3, r0
 8011890:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011896:	f113 0f0d 	cmn.w	r3, #13
 801189a:	d009      	beq.n	80118b0 <lwip_netconn_err_to_msg+0x28>
 801189c:	f113 0f0d 	cmn.w	r3, #13
 80118a0:	dc0c      	bgt.n	80118bc <lwip_netconn_err_to_msg+0x34>
 80118a2:	f113 0f0f 	cmn.w	r3, #15
 80118a6:	d007      	beq.n	80118b8 <lwip_netconn_err_to_msg+0x30>
 80118a8:	f113 0f0e 	cmn.w	r3, #14
 80118ac:	d002      	beq.n	80118b4 <lwip_netconn_err_to_msg+0x2c>
 80118ae:	e005      	b.n	80118bc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80118b0:	4b0a      	ldr	r3, [pc, #40]	@ (80118dc <lwip_netconn_err_to_msg+0x54>)
 80118b2:	e00e      	b.n	80118d2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80118b4:	4b0a      	ldr	r3, [pc, #40]	@ (80118e0 <lwip_netconn_err_to_msg+0x58>)
 80118b6:	e00c      	b.n	80118d2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80118b8:	4b0a      	ldr	r3, [pc, #40]	@ (80118e4 <lwip_netconn_err_to_msg+0x5c>)
 80118ba:	e00a      	b.n	80118d2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80118bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d005      	beq.n	80118d0 <lwip_netconn_err_to_msg+0x48>
 80118c4:	4b08      	ldr	r3, [pc, #32]	@ (80118e8 <lwip_netconn_err_to_msg+0x60>)
 80118c6:	227d      	movs	r2, #125	@ 0x7d
 80118c8:	4908      	ldr	r1, [pc, #32]	@ (80118ec <lwip_netconn_err_to_msg+0x64>)
 80118ca:	4809      	ldr	r0, [pc, #36]	@ (80118f0 <lwip_netconn_err_to_msg+0x68>)
 80118cc:	f00e fbba 	bl	8020044 <iprintf>
      return NULL;
 80118d0:	2300      	movs	r3, #0
  }
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3708      	adds	r7, #8
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}
 80118da:	bf00      	nop
 80118dc:	08024c70 	.word	0x08024c70
 80118e0:	08024c71 	.word	0x08024c71
 80118e4:	08024c72 	.word	0x08024c72
 80118e8:	080214b8 	.word	0x080214b8
 80118ec:	080214ec 	.word	0x080214ec
 80118f0:	080214fc 	.word	0x080214fc

080118f4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d105      	bne.n	8011910 <lwip_netconn_is_err_msg+0x1c>
 8011904:	4b12      	ldr	r3, [pc, #72]	@ (8011950 <lwip_netconn_is_err_msg+0x5c>)
 8011906:	2285      	movs	r2, #133	@ 0x85
 8011908:	4912      	ldr	r1, [pc, #72]	@ (8011954 <lwip_netconn_is_err_msg+0x60>)
 801190a:	4813      	ldr	r0, [pc, #76]	@ (8011958 <lwip_netconn_is_err_msg+0x64>)
 801190c:	f00e fb9a 	bl	8020044 <iprintf>

  if (msg == &netconn_aborted) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	4a12      	ldr	r2, [pc, #72]	@ (801195c <lwip_netconn_is_err_msg+0x68>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d104      	bne.n	8011922 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	22f3      	movs	r2, #243	@ 0xf3
 801191c:	701a      	strb	r2, [r3, #0]
    return 1;
 801191e:	2301      	movs	r3, #1
 8011920:	e012      	b.n	8011948 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4a0e      	ldr	r2, [pc, #56]	@ (8011960 <lwip_netconn_is_err_msg+0x6c>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d104      	bne.n	8011934 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	22f2      	movs	r2, #242	@ 0xf2
 801192e:	701a      	strb	r2, [r3, #0]
    return 1;
 8011930:	2301      	movs	r3, #1
 8011932:	e009      	b.n	8011948 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	4a0b      	ldr	r2, [pc, #44]	@ (8011964 <lwip_netconn_is_err_msg+0x70>)
 8011938:	4293      	cmp	r3, r2
 801193a:	d104      	bne.n	8011946 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	22f1      	movs	r2, #241	@ 0xf1
 8011940:	701a      	strb	r2, [r3, #0]
    return 1;
 8011942:	2301      	movs	r3, #1
 8011944:	e000      	b.n	8011948 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	080214b8 	.word	0x080214b8
 8011954:	08021524 	.word	0x08021524
 8011958:	080214fc 	.word	0x080214fc
 801195c:	08024c70 	.word	0x08024c70
 8011960:	08024c71 	.word	0x08024c71
 8011964:	08024c72 	.word	0x08024c72

08011968 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b088      	sub	sp, #32
 801196c:	af00      	add	r7, sp, #0
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	60b9      	str	r1, [r7, #8]
 8011972:	607a      	str	r2, [r7, #4]
 8011974:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d105      	bne.n	8011988 <recv_udp+0x20>
 801197c:	4b34      	ldr	r3, [pc, #208]	@ (8011a50 <recv_udp+0xe8>)
 801197e:	22e5      	movs	r2, #229	@ 0xe5
 8011980:	4934      	ldr	r1, [pc, #208]	@ (8011a54 <recv_udp+0xec>)
 8011982:	4835      	ldr	r0, [pc, #212]	@ (8011a58 <recv_udp+0xf0>)
 8011984:	f00e fb5e 	bl	8020044 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d105      	bne.n	801199a <recv_udp+0x32>
 801198e:	4b30      	ldr	r3, [pc, #192]	@ (8011a50 <recv_udp+0xe8>)
 8011990:	22e6      	movs	r2, #230	@ 0xe6
 8011992:	4932      	ldr	r1, [pc, #200]	@ (8011a5c <recv_udp+0xf4>)
 8011994:	4830      	ldr	r0, [pc, #192]	@ (8011a58 <recv_udp+0xf0>)
 8011996:	f00e fb55 	bl	8020044 <iprintf>
  conn = (struct netconn *)arg;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801199e:	69fb      	ldr	r3, [r7, #28]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d103      	bne.n	80119ac <recv_udp+0x44>
    pbuf_free(p);
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f003 f8ef 	bl	8014b88 <pbuf_free>
    return;
 80119aa:	e04d      	b.n	8011a48 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	68ba      	ldr	r2, [r7, #8]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d005      	beq.n	80119c2 <recv_udp+0x5a>
 80119b6:	4b26      	ldr	r3, [pc, #152]	@ (8011a50 <recv_udp+0xe8>)
 80119b8:	22ee      	movs	r2, #238	@ 0xee
 80119ba:	4929      	ldr	r1, [pc, #164]	@ (8011a60 <recv_udp+0xf8>)
 80119bc:	4826      	ldr	r0, [pc, #152]	@ (8011a58 <recv_udp+0xf0>)
 80119be:	f00e fb41 	bl	8020044 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80119c2:	69fb      	ldr	r3, [r7, #28]
 80119c4:	3310      	adds	r3, #16
 80119c6:	4618      	mov	r0, r3
 80119c8:	f00c ffae 	bl	801e928 <sys_mbox_valid>
 80119cc:	4603      	mov	r3, r0
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d103      	bne.n	80119da <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f003 f8d8 	bl	8014b88 <pbuf_free>
    return;
 80119d8:	e036      	b.n	8011a48 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80119da:	2006      	movs	r0, #6
 80119dc:	f002 f9b4 	bl	8013d48 <memp_malloc>
 80119e0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d103      	bne.n	80119f0 <recv_udp+0x88>
    pbuf_free(p);
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f003 f8cd 	bl	8014b88 <pbuf_free>
    return;
 80119ee:	e02b      	b.n	8011a48 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	687a      	ldr	r2, [r7, #4]
 80119f4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d002      	beq.n	8011a08 <recv_udp+0xa0>
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	e000      	b.n	8011a0a <recv_udp+0xa2>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	69ba      	ldr	r2, [r7, #24]
 8011a0c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011a0e:	69bb      	ldr	r3, [r7, #24]
 8011a10:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011a12:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	891b      	ldrh	r3, [r3, #8]
 8011a18:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	3310      	adds	r3, #16
 8011a1e:	69b9      	ldr	r1, [r7, #24]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f00c ff15 	bl	801e850 <sys_mbox_trypost>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d003      	beq.n	8011a34 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011a2c:	69b8      	ldr	r0, [r7, #24]
 8011a2e:	f001 f981 	bl	8012d34 <netbuf_delete>
    return;
 8011a32:	e009      	b.n	8011a48 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011a34:	69fb      	ldr	r3, [r7, #28]
 8011a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d005      	beq.n	8011a48 <recv_udp+0xe0>
 8011a3c:	69fb      	ldr	r3, [r7, #28]
 8011a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a40:	8afa      	ldrh	r2, [r7, #22]
 8011a42:	2100      	movs	r1, #0
 8011a44:	69f8      	ldr	r0, [r7, #28]
 8011a46:	4798      	blx	r3
  }
}
 8011a48:	3720      	adds	r7, #32
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	080214b8 	.word	0x080214b8
 8011a54:	08021530 	.word	0x08021530
 8011a58:	080214fc 	.word	0x080214fc
 8011a5c:	08021554 	.word	0x08021554
 8011a60:	08021574 	.word	0x08021574

08011a64 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b088      	sub	sp, #32
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
 8011a70:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d106      	bne.n	8011a86 <recv_tcp+0x22>
 8011a78:	4b36      	ldr	r3, [pc, #216]	@ (8011b54 <recv_tcp+0xf0>)
 8011a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011a7e:	4936      	ldr	r1, [pc, #216]	@ (8011b58 <recv_tcp+0xf4>)
 8011a80:	4836      	ldr	r0, [pc, #216]	@ (8011b5c <recv_tcp+0xf8>)
 8011a82:	f00e fadf 	bl	8020044 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d106      	bne.n	8011a9a <recv_tcp+0x36>
 8011a8c:	4b31      	ldr	r3, [pc, #196]	@ (8011b54 <recv_tcp+0xf0>)
 8011a8e:	f240 122d 	movw	r2, #301	@ 0x12d
 8011a92:	4933      	ldr	r1, [pc, #204]	@ (8011b60 <recv_tcp+0xfc>)
 8011a94:	4831      	ldr	r0, [pc, #196]	@ (8011b5c <recv_tcp+0xf8>)
 8011a96:	f00e fad5 	bl	8020044 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d006      	beq.n	8011ab0 <recv_tcp+0x4c>
 8011aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8011b54 <recv_tcp+0xf0>)
 8011aa4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011aa8:	492e      	ldr	r1, [pc, #184]	@ (8011b64 <recv_tcp+0x100>)
 8011aaa:	482c      	ldr	r0, [pc, #176]	@ (8011b5c <recv_tcp+0xf8>)
 8011aac:	f00e faca 	bl	8020044 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011ab4:	697b      	ldr	r3, [r7, #20]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d102      	bne.n	8011ac0 <recv_tcp+0x5c>
    return ERR_VAL;
 8011aba:	f06f 0305 	mvn.w	r3, #5
 8011abe:	e045      	b.n	8011b4c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d006      	beq.n	8011ad8 <recv_tcp+0x74>
 8011aca:	4b22      	ldr	r3, [pc, #136]	@ (8011b54 <recv_tcp+0xf0>)
 8011acc:	f240 1235 	movw	r2, #309	@ 0x135
 8011ad0:	4925      	ldr	r1, [pc, #148]	@ (8011b68 <recv_tcp+0x104>)
 8011ad2:	4822      	ldr	r0, [pc, #136]	@ (8011b5c <recv_tcp+0xf8>)
 8011ad4:	f00e fab6 	bl	8020044 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	3310      	adds	r3, #16
 8011adc:	4618      	mov	r0, r3
 8011ade:	f00c ff23 	bl	801e928 <sys_mbox_valid>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d10d      	bne.n	8011b04 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d008      	beq.n	8011b00 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	891b      	ldrh	r3, [r3, #8]
 8011af2:	4619      	mov	r1, r3
 8011af4:	68b8      	ldr	r0, [r7, #8]
 8011af6:	f003 ff4d 	bl	8015994 <tcp_recved>
      pbuf_free(p);
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f003 f844 	bl	8014b88 <pbuf_free>
    }
    return ERR_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	e023      	b.n	8011b4c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d005      	beq.n	8011b16 <recv_tcp+0xb2>
    msg = p;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	891b      	ldrh	r3, [r3, #8]
 8011b12:	83fb      	strh	r3, [r7, #30]
 8011b14:	e003      	b.n	8011b1e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011b16:	4b15      	ldr	r3, [pc, #84]	@ (8011b6c <recv_tcp+0x108>)
 8011b18:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	3310      	adds	r3, #16
 8011b22:	69b9      	ldr	r1, [r7, #24]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f00c fe93 	bl	801e850 <sys_mbox_trypost>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d002      	beq.n	8011b36 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011b34:	e00a      	b.n	8011b4c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d005      	beq.n	8011b4a <recv_tcp+0xe6>
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b42:	8bfa      	ldrh	r2, [r7, #30]
 8011b44:	2100      	movs	r1, #0
 8011b46:	6978      	ldr	r0, [r7, #20]
 8011b48:	4798      	blx	r3
  }

  return ERR_OK;
 8011b4a:	2300      	movs	r3, #0
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3720      	adds	r7, #32
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	080214b8 	.word	0x080214b8
 8011b58:	08021594 	.word	0x08021594
 8011b5c:	080214fc 	.word	0x080214fc
 8011b60:	080215b8 	.word	0x080215b8
 8011b64:	080215d8 	.word	0x080215d8
 8011b68:	080215f0 	.word	0x080215f0
 8011b6c:	08024c72 	.word	0x08024c72

08011b70 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d106      	bne.n	8011b92 <poll_tcp+0x22>
 8011b84:	4b29      	ldr	r3, [pc, #164]	@ (8011c2c <poll_tcp+0xbc>)
 8011b86:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011b8a:	4929      	ldr	r1, [pc, #164]	@ (8011c30 <poll_tcp+0xc0>)
 8011b8c:	4829      	ldr	r0, [pc, #164]	@ (8011c34 <poll_tcp+0xc4>)
 8011b8e:	f00e fa59 	bl	8020044 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	785b      	ldrb	r3, [r3, #1]
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d104      	bne.n	8011ba4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011b9a:	2101      	movs	r1, #1
 8011b9c:	68f8      	ldr	r0, [r7, #12]
 8011b9e:	f000 fe5d 	bl	801285c <lwip_netconn_do_writemore>
 8011ba2:	e016      	b.n	8011bd2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	785b      	ldrb	r3, [r3, #1]
 8011ba8:	2b04      	cmp	r3, #4
 8011baa:	d112      	bne.n	8011bd2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	6a1b      	ldr	r3, [r3, #32]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00a      	beq.n	8011bca <poll_tcp+0x5a>
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	6a1b      	ldr	r3, [r3, #32]
 8011bb8:	7a5b      	ldrb	r3, [r3, #9]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d005      	beq.n	8011bca <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	7a5a      	ldrb	r2, [r3, #9]
 8011bc4:	3a01      	subs	r2, #1
 8011bc6:	b2d2      	uxtb	r2, r2
 8011bc8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011bca:	2101      	movs	r1, #1
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f000 fb3b 	bl	8012248 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	7f1b      	ldrb	r3, [r3, #28]
 8011bd6:	f003 0310 	and.w	r3, r3, #16
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d021      	beq.n	8011c22 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d01d      	beq.n	8011c22 <poll_tcp+0xb2>
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011bee:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011bf2:	d316      	bcc.n	8011c22 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	685b      	ldr	r3, [r3, #4]
 8011bf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011bfc:	2b04      	cmp	r3, #4
 8011bfe:	d810      	bhi.n	8011c22 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	7f1b      	ldrb	r3, [r3, #28]
 8011c04:	f023 0310 	bic.w	r3, r3, #16
 8011c08:	b2da      	uxtb	r2, r3
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d005      	beq.n	8011c22 <poll_tcp+0xb2>
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	2102      	movs	r1, #2
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011c22:	2300      	movs	r3, #0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3710      	adds	r7, #16
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	080214b8 	.word	0x080214b8
 8011c30:	08021610 	.word	0x08021610
 8011c34:	080214fc 	.word	0x080214fc

08011c38 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	4613      	mov	r3, r2
 8011c44:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d106      	bne.n	8011c5e <sent_tcp+0x26>
 8011c50:	4b20      	ldr	r3, [pc, #128]	@ (8011cd4 <sent_tcp+0x9c>)
 8011c52:	f240 1293 	movw	r2, #403	@ 0x193
 8011c56:	4920      	ldr	r1, [pc, #128]	@ (8011cd8 <sent_tcp+0xa0>)
 8011c58:	4820      	ldr	r0, [pc, #128]	@ (8011cdc <sent_tcp+0xa4>)
 8011c5a:	f00e f9f3 	bl	8020044 <iprintf>

  if (conn) {
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d032      	beq.n	8011cca <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	785b      	ldrb	r3, [r3, #1]
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d104      	bne.n	8011c76 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011c6c:	2101      	movs	r1, #1
 8011c6e:	6978      	ldr	r0, [r7, #20]
 8011c70:	f000 fdf4 	bl	801285c <lwip_netconn_do_writemore>
 8011c74:	e007      	b.n	8011c86 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	785b      	ldrb	r3, [r3, #1]
 8011c7a:	2b04      	cmp	r3, #4
 8011c7c:	d103      	bne.n	8011c86 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011c7e:	2101      	movs	r1, #1
 8011c80:	6978      	ldr	r0, [r7, #20]
 8011c82:	f000 fae1 	bl	8012248 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d01d      	beq.n	8011cca <sent_tcp+0x92>
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011c96:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011c9a:	d316      	bcc.n	8011cca <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011ca4:	2b04      	cmp	r3, #4
 8011ca6:	d810      	bhi.n	8011cca <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	7f1b      	ldrb	r3, [r3, #28]
 8011cac:	f023 0310 	bic.w	r3, r3, #16
 8011cb0:	b2da      	uxtb	r2, r3
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d005      	beq.n	8011cca <sent_tcp+0x92>
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cc2:	88fa      	ldrh	r2, [r7, #6]
 8011cc4:	2102      	movs	r1, #2
 8011cc6:	6978      	ldr	r0, [r7, #20]
 8011cc8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011cca:	2300      	movs	r3, #0
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3718      	adds	r7, #24
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	080214b8 	.word	0x080214b8
 8011cd8:	08021610 	.word	0x08021610
 8011cdc:	080214fc 	.word	0x080214fc

08011ce0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b088      	sub	sp, #32
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d106      	bne.n	8011d04 <err_tcp+0x24>
 8011cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8011e74 <err_tcp+0x194>)
 8011cf8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011cfc:	495e      	ldr	r1, [pc, #376]	@ (8011e78 <err_tcp+0x198>)
 8011cfe:	485f      	ldr	r0, [pc, #380]	@ (8011e7c <err_tcp+0x19c>)
 8011d00:	f00e f9a0 	bl	8020044 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011d04:	f00c ff66 	bl	801ebd4 <sys_arch_protect>
 8011d08:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	78fa      	ldrb	r2, [r7, #3]
 8011d14:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	7f1b      	ldrb	r3, [r3, #28]
 8011d1a:	f043 0301 	orr.w	r3, r3, #1
 8011d1e:	b2da      	uxtb	r2, r3
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011d24:	69fb      	ldr	r3, [r7, #28]
 8011d26:	785b      	ldrb	r3, [r3, #1]
 8011d28:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011d2a:	69fb      	ldr	r3, [r7, #28]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011d30:	69b8      	ldr	r0, [r7, #24]
 8011d32:	f00c ff5d 	bl	801ebf0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d005      	beq.n	8011d4a <err_tcp+0x6a>
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d42:	2200      	movs	r2, #0
 8011d44:	2104      	movs	r1, #4
 8011d46:	69f8      	ldr	r0, [r7, #28]
 8011d48:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d005      	beq.n	8011d5e <err_tcp+0x7e>
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d56:	2200      	movs	r2, #0
 8011d58:	2100      	movs	r1, #0
 8011d5a:	69f8      	ldr	r0, [r7, #28]
 8011d5c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d005      	beq.n	8011d72 <err_tcp+0x92>
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	2102      	movs	r1, #2
 8011d6e:	69f8      	ldr	r0, [r7, #28]
 8011d70:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7ff fd86 	bl	8011888 <lwip_netconn_err_to_msg>
 8011d7c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	3310      	adds	r3, #16
 8011d82:	4618      	mov	r0, r3
 8011d84:	f00c fdd0 	bl	801e928 <sys_mbox_valid>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d005      	beq.n	8011d9a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	3310      	adds	r3, #16
 8011d92:	6939      	ldr	r1, [r7, #16]
 8011d94:	4618      	mov	r0, r3
 8011d96:	f00c fd5b 	bl	801e850 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	3314      	adds	r3, #20
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f00c fdc2 	bl	801e928 <sys_mbox_valid>
 8011da4:	4603      	mov	r3, r0
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d005      	beq.n	8011db6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	3314      	adds	r3, #20
 8011dae:	6939      	ldr	r1, [r7, #16]
 8011db0:	4618      	mov	r0, r3
 8011db2:	f00c fd4d 	bl	801e850 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011db6:	7dfb      	ldrb	r3, [r7, #23]
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d005      	beq.n	8011dc8 <err_tcp+0xe8>
 8011dbc:	7dfb      	ldrb	r3, [r7, #23]
 8011dbe:	2b04      	cmp	r3, #4
 8011dc0:	d002      	beq.n	8011dc8 <err_tcp+0xe8>
 8011dc2:	7dfb      	ldrb	r3, [r7, #23]
 8011dc4:	2b03      	cmp	r3, #3
 8011dc6:	d143      	bne.n	8011e50 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	7f1b      	ldrb	r3, [r3, #28]
 8011dcc:	f003 0304 	and.w	r3, r3, #4
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	bf14      	ite	ne
 8011dd4:	2301      	movne	r3, #1
 8011dd6:	2300      	moveq	r3, #0
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011ddc:	69fb      	ldr	r3, [r7, #28]
 8011dde:	7f1b      	ldrb	r3, [r3, #28]
 8011de0:	f023 0304 	bic.w	r3, r3, #4
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d13b      	bne.n	8011e68 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	6a1b      	ldr	r3, [r3, #32]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d106      	bne.n	8011e06 <err_tcp+0x126>
 8011df8:	4b1e      	ldr	r3, [pc, #120]	@ (8011e74 <err_tcp+0x194>)
 8011dfa:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011dfe:	4920      	ldr	r1, [pc, #128]	@ (8011e80 <err_tcp+0x1a0>)
 8011e00:	481e      	ldr	r0, [pc, #120]	@ (8011e7c <err_tcp+0x19c>)
 8011e02:	f00e f91f 	bl	8020044 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011e06:	7dfb      	ldrb	r3, [r7, #23]
 8011e08:	2b04      	cmp	r3, #4
 8011e0a:	d104      	bne.n	8011e16 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	6a1b      	ldr	r3, [r3, #32]
 8011e10:	2200      	movs	r2, #0
 8011e12:	711a      	strb	r2, [r3, #4]
 8011e14:	e003      	b.n	8011e1e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011e16:	69fb      	ldr	r3, [r7, #28]
 8011e18:	6a1b      	ldr	r3, [r3, #32]
 8011e1a:	78fa      	ldrb	r2, [r7, #3]
 8011e1c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011e1e:	69fb      	ldr	r3, [r7, #28]
 8011e20:	6a1b      	ldr	r3, [r3, #32]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	330c      	adds	r3, #12
 8011e26:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011e28:	68b8      	ldr	r0, [r7, #8]
 8011e2a:	f00c fe37 	bl	801ea9c <sys_sem_valid>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d106      	bne.n	8011e42 <err_tcp+0x162>
 8011e34:	4b0f      	ldr	r3, [pc, #60]	@ (8011e74 <err_tcp+0x194>)
 8011e36:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8011e3a:	4912      	ldr	r1, [pc, #72]	@ (8011e84 <err_tcp+0x1a4>)
 8011e3c:	480f      	ldr	r0, [pc, #60]	@ (8011e7c <err_tcp+0x19c>)
 8011e3e:	f00e f901 	bl	8020044 <iprintf>
      conn->current_msg = NULL;
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	2200      	movs	r2, #0
 8011e46:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011e48:	68b8      	ldr	r0, [r7, #8]
 8011e4a:	f00c fe02 	bl	801ea52 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011e4e:	e00b      	b.n	8011e68 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	6a1b      	ldr	r3, [r3, #32]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d008      	beq.n	8011e6a <err_tcp+0x18a>
 8011e58:	4b06      	ldr	r3, [pc, #24]	@ (8011e74 <err_tcp+0x194>)
 8011e5a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8011e5e:	490a      	ldr	r1, [pc, #40]	@ (8011e88 <err_tcp+0x1a8>)
 8011e60:	4806      	ldr	r0, [pc, #24]	@ (8011e7c <err_tcp+0x19c>)
 8011e62:	f00e f8ef 	bl	8020044 <iprintf>
  }
}
 8011e66:	e000      	b.n	8011e6a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011e68:	bf00      	nop
}
 8011e6a:	bf00      	nop
 8011e6c:	3720      	adds	r7, #32
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
 8011e72:	bf00      	nop
 8011e74:	080214b8 	.word	0x080214b8
 8011e78:	08021610 	.word	0x08021610
 8011e7c:	080214fc 	.word	0x080214fc
 8011e80:	08021620 	.word	0x08021620
 8011e84:	0802163c 	.word	0x0802163c
 8011e88:	08021658 	.word	0x08021658

08011e8c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011e9a:	6879      	ldr	r1, [r7, #4]
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f004 fc6b 	bl	8016778 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011ea2:	490a      	ldr	r1, [pc, #40]	@ (8011ecc <setup_tcp+0x40>)
 8011ea4:	68f8      	ldr	r0, [r7, #12]
 8011ea6:	f004 fc79 	bl	801679c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011eaa:	4909      	ldr	r1, [pc, #36]	@ (8011ed0 <setup_tcp+0x44>)
 8011eac:	68f8      	ldr	r0, [r7, #12]
 8011eae:	f004 fc97 	bl	80167e0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011eb2:	2202      	movs	r2, #2
 8011eb4:	4907      	ldr	r1, [pc, #28]	@ (8011ed4 <setup_tcp+0x48>)
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f004 fcee 	bl	8016898 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011ebc:	4906      	ldr	r1, [pc, #24]	@ (8011ed8 <setup_tcp+0x4c>)
 8011ebe:	68f8      	ldr	r0, [r7, #12]
 8011ec0:	f004 fcb0 	bl	8016824 <tcp_err>
}
 8011ec4:	bf00      	nop
 8011ec6:	3710      	adds	r7, #16
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bd80      	pop	{r7, pc}
 8011ecc:	08011a65 	.word	0x08011a65
 8011ed0:	08011c39 	.word	0x08011c39
 8011ed4:	08011b71 	.word	0x08011b71
 8011ed8:	08011ce1 	.word	0x08011ce1

08011edc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011edc:	b590      	push	{r4, r7, lr}
 8011ede:	b085      	sub	sp, #20
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d006      	beq.n	8011f00 <pcb_new+0x24>
 8011ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8011fa0 <pcb_new+0xc4>)
 8011ef4:	f240 2265 	movw	r2, #613	@ 0x265
 8011ef8:	492a      	ldr	r1, [pc, #168]	@ (8011fa4 <pcb_new+0xc8>)
 8011efa:	482b      	ldr	r0, [pc, #172]	@ (8011fa8 <pcb_new+0xcc>)
 8011efc:	f00e f8a2 	bl	8020044 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011f0a:	2b10      	cmp	r3, #16
 8011f0c:	d022      	beq.n	8011f54 <pcb_new+0x78>
 8011f0e:	2b20      	cmp	r3, #32
 8011f10:	d133      	bne.n	8011f7a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681c      	ldr	r4, [r3, #0]
 8011f16:	7bfb      	ldrb	r3, [r7, #15]
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f009 fff2 	bl	801bf02 <udp_new_ip_type>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d02a      	beq.n	8011f82 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	2b22      	cmp	r3, #34	@ 0x22
 8011f34:	d104      	bne.n	8011f40 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	6858      	ldr	r0, [r3, #4]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	4917      	ldr	r1, [pc, #92]	@ (8011fac <pcb_new+0xd0>)
 8011f4e:	f009 ff5f 	bl	801be10 <udp_recv>
      }
      break;
 8011f52:	e016      	b.n	8011f82 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681c      	ldr	r4, [r3, #0]
 8011f58:	7bfb      	ldrb	r3, [r7, #15]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f004 fbfe 	bl	801675c <tcp_new_ip_type>
 8011f60:	4603      	mov	r3, r0
 8011f62:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00b      	beq.n	8011f86 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7ff ff8a 	bl	8011e8c <setup_tcp>
      }
      break;
 8011f78:	e005      	b.n	8011f86 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	22fa      	movs	r2, #250	@ 0xfa
 8011f7e:	711a      	strb	r2, [r3, #4]
      return;
 8011f80:	e00a      	b.n	8011f98 <pcb_new+0xbc>
      break;
 8011f82:	bf00      	nop
 8011f84:	e000      	b.n	8011f88 <pcb_new+0xac>
      break;
 8011f86:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d102      	bne.n	8011f98 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	22ff      	movs	r2, #255	@ 0xff
 8011f96:	711a      	strb	r2, [r3, #4]
  }
}
 8011f98:	3714      	adds	r7, #20
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd90      	pop	{r4, r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	080214b8 	.word	0x080214b8
 8011fa4:	0802169c 	.word	0x0802169c
 8011fa8:	080214fc 	.word	0x080214fc
 8011fac:	08011969 	.word	0x08011969

08011fb0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d102      	bne.n	8011fd2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f7ff ff85 	bl	8011edc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011fd2:	bf00      	nop
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
	...

08011fdc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b086      	sub	sp, #24
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	6039      	str	r1, [r7, #0]
 8011fe6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011fec:	2007      	movs	r0, #7
 8011fee:	f001 feab 	bl	8013d48 <memp_malloc>
 8011ff2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d101      	bne.n	8011ffe <netconn_alloc+0x22>
    return NULL;
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	e052      	b.n	80120a4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	2200      	movs	r2, #0
 8012002:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	79fa      	ldrb	r2, [r7, #7]
 8012008:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2200      	movs	r2, #0
 801200e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8012010:	79fb      	ldrb	r3, [r7, #7]
 8012012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012016:	2b10      	cmp	r3, #16
 8012018:	d004      	beq.n	8012024 <netconn_alloc+0x48>
 801201a:	2b20      	cmp	r3, #32
 801201c:	d105      	bne.n	801202a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801201e:	2306      	movs	r3, #6
 8012020:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012022:	e00a      	b.n	801203a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8012024:	2306      	movs	r3, #6
 8012026:	617b      	str	r3, [r7, #20]
      break;
 8012028:	e007      	b.n	801203a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801202a:	4b20      	ldr	r3, [pc, #128]	@ (80120ac <netconn_alloc+0xd0>)
 801202c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8012030:	491f      	ldr	r1, [pc, #124]	@ (80120b0 <netconn_alloc+0xd4>)
 8012032:	4820      	ldr	r0, [pc, #128]	@ (80120b4 <netconn_alloc+0xd8>)
 8012034:	f00e f806 	bl	8020044 <iprintf>
      goto free_and_return;
 8012038:	e02f      	b.n	801209a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	3310      	adds	r3, #16
 801203e:	6979      	ldr	r1, [r7, #20]
 8012040:	4618      	mov	r0, r3
 8012042:	f00c fbab 	bl	801e79c <sys_mbox_new>
 8012046:	4603      	mov	r3, r0
 8012048:	2b00      	cmp	r3, #0
 801204a:	d125      	bne.n	8012098 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	330c      	adds	r3, #12
 8012050:	2100      	movs	r1, #0
 8012052:	4618      	mov	r0, r3
 8012054:	f00c fc86 	bl	801e964 <sys_sem_new>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	d005      	beq.n	801206a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	3310      	adds	r3, #16
 8012062:	4618      	mov	r0, r3
 8012064:	f00c fbcc 	bl	801e800 <sys_mbox_free>
    goto free_and_return;
 8012068:	e017      	b.n	801209a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	3314      	adds	r3, #20
 801206e:	4618      	mov	r0, r3
 8012070:	f00c fc6b 	bl	801e94a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	2200      	movs	r2, #0
 8012078:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012080:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	683a      	ldr	r2, [r7, #0]
 8012086:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	2200      	movs	r2, #0
 801208c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	7cfa      	ldrb	r2, [r7, #19]
 8012092:	771a      	strb	r2, [r3, #28]
  return conn;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	e005      	b.n	80120a4 <netconn_alloc+0xc8>
    goto free_and_return;
 8012098:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801209a:	68f9      	ldr	r1, [r7, #12]
 801209c:	2007      	movs	r0, #7
 801209e:	f001 fecf 	bl	8013e40 <memp_free>
  return NULL;
 80120a2:	2300      	movs	r3, #0
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3718      	adds	r7, #24
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	080214b8 	.word	0x080214b8
 80120b0:	080216bc 	.word	0x080216bc
 80120b4:	080214fc 	.word	0x080214fc

080120b8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d006      	beq.n	80120d6 <netconn_free+0x1e>
 80120c8:	4b1b      	ldr	r3, [pc, #108]	@ (8012138 <netconn_free+0x80>)
 80120ca:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80120ce:	491b      	ldr	r1, [pc, #108]	@ (801213c <netconn_free+0x84>)
 80120d0:	481b      	ldr	r0, [pc, #108]	@ (8012140 <netconn_free+0x88>)
 80120d2:	f00d ffb7 	bl	8020044 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	3310      	adds	r3, #16
 80120da:	4618      	mov	r0, r3
 80120dc:	f00c fc24 	bl	801e928 <sys_mbox_valid>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d006      	beq.n	80120f4 <netconn_free+0x3c>
 80120e6:	4b14      	ldr	r3, [pc, #80]	@ (8012138 <netconn_free+0x80>)
 80120e8:	f240 3223 	movw	r2, #803	@ 0x323
 80120ec:	4915      	ldr	r1, [pc, #84]	@ (8012144 <netconn_free+0x8c>)
 80120ee:	4814      	ldr	r0, [pc, #80]	@ (8012140 <netconn_free+0x88>)
 80120f0:	f00d ffa8 	bl	8020044 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	3314      	adds	r3, #20
 80120f8:	4618      	mov	r0, r3
 80120fa:	f00c fc15 	bl	801e928 <sys_mbox_valid>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d006      	beq.n	8012112 <netconn_free+0x5a>
 8012104:	4b0c      	ldr	r3, [pc, #48]	@ (8012138 <netconn_free+0x80>)
 8012106:	f240 3226 	movw	r2, #806	@ 0x326
 801210a:	490f      	ldr	r1, [pc, #60]	@ (8012148 <netconn_free+0x90>)
 801210c:	480c      	ldr	r0, [pc, #48]	@ (8012140 <netconn_free+0x88>)
 801210e:	f00d ff99 	bl	8020044 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	330c      	adds	r3, #12
 8012116:	4618      	mov	r0, r3
 8012118:	f00c fca8 	bl	801ea6c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	330c      	adds	r3, #12
 8012120:	4618      	mov	r0, r3
 8012122:	f00c fccc 	bl	801eabe <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8012126:	6879      	ldr	r1, [r7, #4]
 8012128:	2007      	movs	r0, #7
 801212a:	f001 fe89 	bl	8013e40 <memp_free>
}
 801212e:	bf00      	nop
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	080214b8 	.word	0x080214b8
 801213c:	080216e4 	.word	0x080216e4
 8012140:	080214fc 	.word	0x080214fc
 8012144:	08021714 	.word	0x08021714
 8012148:	08021750 	.word	0x08021750

0801214c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b086      	sub	sp, #24
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	3310      	adds	r3, #16
 8012158:	4618      	mov	r0, r3
 801215a:	f00c fbe5 	bl	801e928 <sys_mbox_valid>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d02f      	beq.n	80121c4 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012164:	e018      	b.n	8012198 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801216e:	2b10      	cmp	r3, #16
 8012170:	d10e      	bne.n	8012190 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	f107 020f 	add.w	r2, r7, #15
 8012178:	4611      	mov	r1, r2
 801217a:	4618      	mov	r0, r3
 801217c:	f7ff fbba 	bl	80118f4 <lwip_netconn_is_err_msg>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d108      	bne.n	8012198 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	4618      	mov	r0, r3
 801218a:	f002 fcfd 	bl	8014b88 <pbuf_free>
 801218e:	e003      	b.n	8012198 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	4618      	mov	r0, r3
 8012194:	f000 fdce 	bl	8012d34 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	3310      	adds	r3, #16
 801219c:	f107 0210 	add.w	r2, r7, #16
 80121a0:	4611      	mov	r1, r2
 80121a2:	4618      	mov	r0, r3
 80121a4:	f00c fba9 	bl	801e8fa <sys_arch_mbox_tryfetch>
 80121a8:	4603      	mov	r3, r0
 80121aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80121ae:	d1da      	bne.n	8012166 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	3310      	adds	r3, #16
 80121b4:	4618      	mov	r0, r3
 80121b6:	f00c fb23 	bl	801e800 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	3310      	adds	r3, #16
 80121be:	4618      	mov	r0, r3
 80121c0:	f00c fbc3 	bl	801e94a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	3314      	adds	r3, #20
 80121c8:	4618      	mov	r0, r3
 80121ca:	f00c fbad 	bl	801e928 <sys_mbox_valid>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d034      	beq.n	801223e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80121d4:	e01d      	b.n	8012212 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80121d6:	693b      	ldr	r3, [r7, #16]
 80121d8:	f107 020e 	add.w	r2, r7, #14
 80121dc:	4611      	mov	r1, r2
 80121de:	4618      	mov	r0, r3
 80121e0:	f7ff fb88 	bl	80118f4 <lwip_netconn_is_err_msg>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d113      	bne.n	8012212 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80121ee:	6978      	ldr	r0, [r7, #20]
 80121f0:	f7ff ffac 	bl	801214c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d007      	beq.n	801220c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	4618      	mov	r0, r3
 8012202:	f003 fac9 	bl	8015798 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	2200      	movs	r2, #0
 801220a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 801220c:	6978      	ldr	r0, [r7, #20]
 801220e:	f7ff ff53 	bl	80120b8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	3314      	adds	r3, #20
 8012216:	f107 0210 	add.w	r2, r7, #16
 801221a:	4611      	mov	r1, r2
 801221c:	4618      	mov	r0, r3
 801221e:	f00c fb6c 	bl	801e8fa <sys_arch_mbox_tryfetch>
 8012222:	4603      	mov	r3, r0
 8012224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012228:	d1d5      	bne.n	80121d6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	3314      	adds	r3, #20
 801222e:	4618      	mov	r0, r3
 8012230:	f00c fae6 	bl	801e800 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	3314      	adds	r3, #20
 8012238:	4618      	mov	r0, r3
 801223a:	f00c fb86 	bl	801e94a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801223e:	bf00      	nop
 8012240:	3718      	adds	r7, #24
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
	...

08012248 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b086      	sub	sp, #24
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	460b      	mov	r3, r1
 8012252:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012254:	2300      	movs	r3, #0
 8012256:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <lwip_netconn_do_close_internal+0x24>
 801225e:	4b87      	ldr	r3, [pc, #540]	@ (801247c <lwip_netconn_do_close_internal+0x234>)
 8012260:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8012264:	4986      	ldr	r1, [pc, #536]	@ (8012480 <lwip_netconn_do_close_internal+0x238>)
 8012266:	4887      	ldr	r0, [pc, #540]	@ (8012484 <lwip_netconn_do_close_internal+0x23c>)
 8012268:	f00d feec 	bl	8020044 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012274:	2b10      	cmp	r3, #16
 8012276:	d006      	beq.n	8012286 <lwip_netconn_do_close_internal+0x3e>
 8012278:	4b80      	ldr	r3, [pc, #512]	@ (801247c <lwip_netconn_do_close_internal+0x234>)
 801227a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 801227e:	4982      	ldr	r1, [pc, #520]	@ (8012488 <lwip_netconn_do_close_internal+0x240>)
 8012280:	4880      	ldr	r0, [pc, #512]	@ (8012484 <lwip_netconn_do_close_internal+0x23c>)
 8012282:	f00d fedf 	bl	8020044 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	785b      	ldrb	r3, [r3, #1]
 801228a:	2b04      	cmp	r3, #4
 801228c:	d006      	beq.n	801229c <lwip_netconn_do_close_internal+0x54>
 801228e:	4b7b      	ldr	r3, [pc, #492]	@ (801247c <lwip_netconn_do_close_internal+0x234>)
 8012290:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8012294:	497d      	ldr	r1, [pc, #500]	@ (801248c <lwip_netconn_do_close_internal+0x244>)
 8012296:	487b      	ldr	r0, [pc, #492]	@ (8012484 <lwip_netconn_do_close_internal+0x23c>)
 8012298:	f00d fed4 	bl	8020044 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d106      	bne.n	80122b2 <lwip_netconn_do_close_internal+0x6a>
 80122a4:	4b75      	ldr	r3, [pc, #468]	@ (801247c <lwip_netconn_do_close_internal+0x234>)
 80122a6:	f240 32a5 	movw	r2, #933	@ 0x3a5
 80122aa:	4979      	ldr	r1, [pc, #484]	@ (8012490 <lwip_netconn_do_close_internal+0x248>)
 80122ac:	4875      	ldr	r0, [pc, #468]	@ (8012484 <lwip_netconn_do_close_internal+0x23c>)
 80122ae:	f00d fec9 	bl	8020044 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6a1b      	ldr	r3, [r3, #32]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d106      	bne.n	80122c8 <lwip_netconn_do_close_internal+0x80>
 80122ba:	4b70      	ldr	r3, [pc, #448]	@ (801247c <lwip_netconn_do_close_internal+0x234>)
 80122bc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80122c0:	4974      	ldr	r1, [pc, #464]	@ (8012494 <lwip_netconn_do_close_internal+0x24c>)
 80122c2:	4870      	ldr	r0, [pc, #448]	@ (8012484 <lwip_netconn_do_close_internal+0x23c>)
 80122c4:	f00d febe 	bl	8020044 <iprintf>

  tpcb = conn->pcb.tcp;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6a1b      	ldr	r3, [r3, #32]
 80122d2:	7a1b      	ldrb	r3, [r3, #8]
 80122d4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80122d6:	7bfb      	ldrb	r3, [r7, #15]
 80122d8:	f003 0301 	and.w	r3, r3, #1
 80122dc:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80122de:	7bfb      	ldrb	r3, [r7, #15]
 80122e0:	f003 0302 	and.w	r3, r3, #2
 80122e4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80122e6:	7bfb      	ldrb	r3, [r7, #15]
 80122e8:	2b03      	cmp	r3, #3
 80122ea:	d102      	bne.n	80122f2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80122ec:	2301      	movs	r3, #1
 80122ee:	75bb      	strb	r3, [r7, #22]
 80122f0:	e01f      	b.n	8012332 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80122f2:	7bbb      	ldrb	r3, [r7, #14]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d00e      	beq.n	8012316 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80122fc:	2b05      	cmp	r3, #5
 80122fe:	d007      	beq.n	8012310 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012304:	2b06      	cmp	r3, #6
 8012306:	d003      	beq.n	8012310 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 801230c:	2b08      	cmp	r3, #8
 801230e:	d102      	bne.n	8012316 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012310:	2301      	movs	r3, #1
 8012312:	75bb      	strb	r3, [r7, #22]
 8012314:	e00d      	b.n	8012332 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8012316:	7b7b      	ldrb	r3, [r7, #13]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d008      	beq.n	801232e <lwip_netconn_do_close_internal+0xe6>
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	8b5b      	ldrh	r3, [r3, #26]
 8012320:	f003 0310 	and.w	r3, r3, #16
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8012328:	2301      	movs	r3, #1
 801232a:	75bb      	strb	r3, [r7, #22]
 801232c:	e001      	b.n	8012332 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801232e:	2300      	movs	r3, #0
 8012330:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012332:	7dbb      	ldrb	r3, [r7, #22]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d003      	beq.n	8012340 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8012338:	2100      	movs	r1, #0
 801233a:	6938      	ldr	r0, [r7, #16]
 801233c:	f004 fa1c 	bl	8016778 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	7d1b      	ldrb	r3, [r3, #20]
 8012344:	2b01      	cmp	r3, #1
 8012346:	d104      	bne.n	8012352 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012348:	2100      	movs	r1, #0
 801234a:	6938      	ldr	r0, [r7, #16]
 801234c:	f004 fa8c 	bl	8016868 <tcp_accept>
 8012350:	e01d      	b.n	801238e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012352:	7bbb      	ldrb	r3, [r7, #14]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d007      	beq.n	8012368 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012358:	2100      	movs	r1, #0
 801235a:	6938      	ldr	r0, [r7, #16]
 801235c:	f004 fa1e 	bl	801679c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012360:	2100      	movs	r1, #0
 8012362:	6938      	ldr	r0, [r7, #16]
 8012364:	f004 fa80 	bl	8016868 <tcp_accept>
    }
    if (shut_tx) {
 8012368:	7b7b      	ldrb	r3, [r7, #13]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d003      	beq.n	8012376 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801236e:	2100      	movs	r1, #0
 8012370:	6938      	ldr	r0, [r7, #16]
 8012372:	f004 fa35 	bl	80167e0 <tcp_sent>
    }
    if (shut_close) {
 8012376:	7dbb      	ldrb	r3, [r7, #22]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d008      	beq.n	801238e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 801237c:	2200      	movs	r2, #0
 801237e:	2100      	movs	r1, #0
 8012380:	6938      	ldr	r0, [r7, #16]
 8012382:	f004 fa89 	bl	8016898 <tcp_poll>
      tcp_err(tpcb, NULL);
 8012386:	2100      	movs	r1, #0
 8012388:	6938      	ldr	r0, [r7, #16]
 801238a:	f004 fa4b 	bl	8016824 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801238e:	7dbb      	ldrb	r3, [r7, #22]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d005      	beq.n	80123a0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012394:	6938      	ldr	r0, [r7, #16]
 8012396:	f003 f8b9 	bl	801550c <tcp_close>
 801239a:	4603      	mov	r3, r0
 801239c:	75fb      	strb	r3, [r7, #23]
 801239e:	e007      	b.n	80123b0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80123a0:	7bbb      	ldrb	r3, [r7, #14]
 80123a2:	7b7a      	ldrb	r2, [r7, #13]
 80123a4:	4619      	mov	r1, r3
 80123a6:	6938      	ldr	r0, [r7, #16]
 80123a8:	f003 f8dc 	bl	8015564 <tcp_shutdown>
 80123ac:	4603      	mov	r3, r0
 80123ae:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80123b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d102      	bne.n	80123be <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80123b8:	2301      	movs	r3, #1
 80123ba:	757b      	strb	r3, [r7, #21]
 80123bc:	e016      	b.n	80123ec <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80123be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80123c6:	d10f      	bne.n	80123e8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6a1b      	ldr	r3, [r3, #32]
 80123cc:	7a5b      	ldrb	r3, [r3, #9]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d10c      	bne.n	80123ec <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80123d2:	2301      	movs	r3, #1
 80123d4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80123d6:	7dbb      	ldrb	r3, [r7, #22]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d007      	beq.n	80123ec <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80123dc:	6938      	ldr	r0, [r7, #16]
 80123de:	f003 f9db 	bl	8015798 <tcp_abort>
          err = ERR_OK;
 80123e2:	2300      	movs	r3, #0
 80123e4:	75fb      	strb	r3, [r7, #23]
 80123e6:	e001      	b.n	80123ec <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80123e8:	2301      	movs	r3, #1
 80123ea:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80123ec:	7d7b      	ldrb	r3, [r7, #21]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d052      	beq.n	8012498 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6a1b      	ldr	r3, [r3, #32]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	330c      	adds	r3, #12
 80123fa:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6a1b      	ldr	r3, [r3, #32]
 8012400:	7dfa      	ldrb	r2, [r7, #23]
 8012402:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2200      	movs	r2, #0
 8012408:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2200      	movs	r2, #0
 801240e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d129      	bne.n	801246c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8012418:	7dbb      	ldrb	r3, [r7, #22]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00c      	beq.n	8012438 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2200      	movs	r2, #0
 8012422:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012428:	2b00      	cmp	r3, #0
 801242a:	d005      	beq.n	8012438 <lwip_netconn_do_close_internal+0x1f0>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012430:	2200      	movs	r2, #0
 8012432:	2104      	movs	r1, #4
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	4798      	blx	r3
      }
      if (shut_rx) {
 8012438:	7bbb      	ldrb	r3, [r7, #14]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d009      	beq.n	8012452 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012442:	2b00      	cmp	r3, #0
 8012444:	d005      	beq.n	8012452 <lwip_netconn_do_close_internal+0x20a>
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801244a:	2200      	movs	r2, #0
 801244c:	2100      	movs	r1, #0
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	4798      	blx	r3
      }
      if (shut_tx) {
 8012452:	7b7b      	ldrb	r3, [r7, #13]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d009      	beq.n	801246c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801245c:	2b00      	cmp	r3, #0
 801245e:	d005      	beq.n	801246c <lwip_netconn_do_close_internal+0x224>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012464:	2200      	movs	r2, #0
 8012466:	2102      	movs	r1, #2
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801246c:	78fb      	ldrb	r3, [r7, #3]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d002      	beq.n	8012478 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012472:	68b8      	ldr	r0, [r7, #8]
 8012474:	f00c faed 	bl	801ea52 <sys_sem_signal>
    }
    return ERR_OK;
 8012478:	2300      	movs	r3, #0
 801247a:	e03c      	b.n	80124f6 <lwip_netconn_do_close_internal+0x2ae>
 801247c:	080214b8 	.word	0x080214b8
 8012480:	0802178c 	.word	0x0802178c
 8012484:	080214fc 	.word	0x080214fc
 8012488:	0802179c 	.word	0x0802179c
 801248c:	080217bc 	.word	0x080217bc
 8012490:	080217e0 	.word	0x080217e0
 8012494:	08021620 	.word	0x08021620
  }
  if (!close_finished) {
 8012498:	7d7b      	ldrb	r3, [r7, #21]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d11e      	bne.n	80124dc <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	7d1b      	ldrb	r3, [r3, #20]
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d106      	bne.n	80124b4 <lwip_netconn_do_close_internal+0x26c>
 80124a6:	4b16      	ldr	r3, [pc, #88]	@ (8012500 <lwip_netconn_do_close_internal+0x2b8>)
 80124a8:	f240 4241 	movw	r2, #1089	@ 0x441
 80124ac:	4915      	ldr	r1, [pc, #84]	@ (8012504 <lwip_netconn_do_close_internal+0x2bc>)
 80124ae:	4816      	ldr	r0, [pc, #88]	@ (8012508 <lwip_netconn_do_close_internal+0x2c0>)
 80124b0:	f00d fdc8 	bl	8020044 <iprintf>
    if (shut_tx) {
 80124b4:	7b7b      	ldrb	r3, [r7, #13]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d003      	beq.n	80124c2 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80124ba:	4914      	ldr	r1, [pc, #80]	@ (801250c <lwip_netconn_do_close_internal+0x2c4>)
 80124bc:	6938      	ldr	r0, [r7, #16]
 80124be:	f004 f98f 	bl	80167e0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80124c2:	2201      	movs	r2, #1
 80124c4:	4912      	ldr	r1, [pc, #72]	@ (8012510 <lwip_netconn_do_close_internal+0x2c8>)
 80124c6:	6938      	ldr	r0, [r7, #16]
 80124c8:	f004 f9e6 	bl	8016898 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80124cc:	4911      	ldr	r1, [pc, #68]	@ (8012514 <lwip_netconn_do_close_internal+0x2cc>)
 80124ce:	6938      	ldr	r0, [r7, #16]
 80124d0:	f004 f9a8 	bl	8016824 <tcp_err>
    tcp_arg(tpcb, conn);
 80124d4:	6879      	ldr	r1, [r7, #4]
 80124d6:	6938      	ldr	r0, [r7, #16]
 80124d8:	f004 f94e 	bl	8016778 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80124dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d106      	bne.n	80124f2 <lwip_netconn_do_close_internal+0x2aa>
 80124e4:	4b06      	ldr	r3, [pc, #24]	@ (8012500 <lwip_netconn_do_close_internal+0x2b8>)
 80124e6:	f240 424d 	movw	r2, #1101	@ 0x44d
 80124ea:	490b      	ldr	r1, [pc, #44]	@ (8012518 <lwip_netconn_do_close_internal+0x2d0>)
 80124ec:	4806      	ldr	r0, [pc, #24]	@ (8012508 <lwip_netconn_do_close_internal+0x2c0>)
 80124ee:	f00d fda9 	bl	8020044 <iprintf>
  return err;
 80124f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3718      	adds	r7, #24
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	080214b8 	.word	0x080214b8
 8012504:	080217f4 	.word	0x080217f4
 8012508:	080214fc 	.word	0x080214fc
 801250c:	08011c39 	.word	0x08011c39
 8012510:	08011b71 	.word	0x08011b71
 8012514:	08011ce1 	.word	0x08011ce1
 8012518:	08021818 	.word	0x08021818

0801251c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b084      	sub	sp, #16
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	785b      	ldrb	r3, [r3, #1]
 801252e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012530:	7afb      	ldrb	r3, [r7, #11]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00d      	beq.n	8012552 <lwip_netconn_do_delconn+0x36>
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012540:	2b10      	cmp	r3, #16
 8012542:	d006      	beq.n	8012552 <lwip_netconn_do_delconn+0x36>
 8012544:	4b60      	ldr	r3, [pc, #384]	@ (80126c8 <lwip_netconn_do_delconn+0x1ac>)
 8012546:	f240 425e 	movw	r2, #1118	@ 0x45e
 801254a:	4960      	ldr	r1, [pc, #384]	@ (80126cc <lwip_netconn_do_delconn+0x1b0>)
 801254c:	4860      	ldr	r0, [pc, #384]	@ (80126d0 <lwip_netconn_do_delconn+0x1b4>)
 801254e:	f00d fd79 	bl	8020044 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012552:	7afb      	ldrb	r3, [r7, #11]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d005      	beq.n	8012564 <lwip_netconn_do_delconn+0x48>
 8012558:	7afb      	ldrb	r3, [r7, #11]
 801255a:	2b02      	cmp	r3, #2
 801255c:	d002      	beq.n	8012564 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801255e:	7afb      	ldrb	r3, [r7, #11]
 8012560:	2b03      	cmp	r3, #3
 8012562:	d109      	bne.n	8012578 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012564:	7afb      	ldrb	r3, [r7, #11]
 8012566:	2b03      	cmp	r3, #3
 8012568:	d10a      	bne.n	8012580 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	7f1b      	ldrb	r3, [r3, #28]
 8012570:	f003 0304 	and.w	r3, r3, #4
 8012574:	2b00      	cmp	r3, #0
 8012576:	d103      	bne.n	8012580 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	22fb      	movs	r2, #251	@ 0xfb
 801257c:	711a      	strb	r2, [r3, #4]
 801257e:	e097      	b.n	80126b0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012580:	7afb      	ldrb	r3, [r7, #11]
 8012582:	2b03      	cmp	r3, #3
 8012584:	d10d      	bne.n	80125a2 <lwip_netconn_do_delconn+0x86>
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	7f1b      	ldrb	r3, [r3, #28]
 801258c:	f003 0304 	and.w	r3, r3, #4
 8012590:	2b00      	cmp	r3, #0
 8012592:	d106      	bne.n	80125a2 <lwip_netconn_do_delconn+0x86>
 8012594:	4b4c      	ldr	r3, [pc, #304]	@ (80126c8 <lwip_netconn_do_delconn+0x1ac>)
 8012596:	f240 427a 	movw	r2, #1146	@ 0x47a
 801259a:	494e      	ldr	r1, [pc, #312]	@ (80126d4 <lwip_netconn_do_delconn+0x1b8>)
 801259c:	484c      	ldr	r0, [pc, #304]	@ (80126d0 <lwip_netconn_do_delconn+0x1b4>)
 801259e:	f00d fd51 	bl	8020044 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2200      	movs	r2, #0
 80125a6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7ff fdcd 	bl	801214c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d05f      	beq.n	801267c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80125c6:	2b10      	cmp	r3, #16
 80125c8:	d00d      	beq.n	80125e6 <lwip_netconn_do_delconn+0xca>
 80125ca:	2b20      	cmp	r3, #32
 80125cc:	d151      	bne.n	8012672 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	2200      	movs	r2, #0
 80125d6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	4618      	mov	r0, r3
 80125e0:	f009 fc36 	bl	801be50 <udp_remove>
          break;
 80125e4:	e046      	b.n	8012674 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	6a1b      	ldr	r3, [r3, #32]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d006      	beq.n	80125fe <lwip_netconn_do_delconn+0xe2>
 80125f0:	4b35      	ldr	r3, [pc, #212]	@ (80126c8 <lwip_netconn_do_delconn+0x1ac>)
 80125f2:	f240 4294 	movw	r2, #1172	@ 0x494
 80125f6:	4938      	ldr	r1, [pc, #224]	@ (80126d8 <lwip_netconn_do_delconn+0x1bc>)
 80125f8:	4835      	ldr	r0, [pc, #212]	@ (80126d0 <lwip_netconn_do_delconn+0x1b4>)
 80125fa:	f00d fd23 	bl	8020044 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2204      	movs	r2, #4
 8012604:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2203      	movs	r2, #3
 801260a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	68fa      	ldr	r2, [r7, #12]
 8012612:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	2100      	movs	r1, #0
 801261a:	4618      	mov	r0, r3
 801261c:	f7ff fe14 	bl	8012248 <lwip_netconn_do_close_internal>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d04b      	beq.n	80126be <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	785b      	ldrb	r3, [r3, #1]
 801262c:	2b04      	cmp	r3, #4
 801262e:	d006      	beq.n	801263e <lwip_netconn_do_delconn+0x122>
 8012630:	4b25      	ldr	r3, [pc, #148]	@ (80126c8 <lwip_netconn_do_delconn+0x1ac>)
 8012632:	f240 429a 	movw	r2, #1178	@ 0x49a
 8012636:	4929      	ldr	r1, [pc, #164]	@ (80126dc <lwip_netconn_do_delconn+0x1c0>)
 8012638:	4825      	ldr	r0, [pc, #148]	@ (80126d0 <lwip_netconn_do_delconn+0x1b4>)
 801263a:	f00d fd03 	bl	8020044 <iprintf>
            UNLOCK_TCPIP_CORE();
 801263e:	4828      	ldr	r0, [pc, #160]	@ (80126e0 <lwip_netconn_do_delconn+0x1c4>)
 8012640:	f00c fa9b 	bl	801eb7a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	330c      	adds	r3, #12
 801264a:	2100      	movs	r1, #0
 801264c:	4618      	mov	r0, r3
 801264e:	f00c f9cf 	bl	801e9f0 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012652:	4823      	ldr	r0, [pc, #140]	@ (80126e0 <lwip_netconn_do_delconn+0x1c4>)
 8012654:	f00c fa82 	bl	801eb5c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	785b      	ldrb	r3, [r3, #1]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d02d      	beq.n	80126be <lwip_netconn_do_delconn+0x1a2>
 8012662:	4b19      	ldr	r3, [pc, #100]	@ (80126c8 <lwip_netconn_do_delconn+0x1ac>)
 8012664:	f240 429e 	movw	r2, #1182	@ 0x49e
 8012668:	491c      	ldr	r1, [pc, #112]	@ (80126dc <lwip_netconn_do_delconn+0x1c0>)
 801266a:	4819      	ldr	r0, [pc, #100]	@ (80126d0 <lwip_netconn_do_delconn+0x1b4>)
 801266c:	f00d fcea 	bl	8020044 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012670:	e025      	b.n	80126be <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8012672:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	2200      	movs	r2, #0
 801267a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012682:	2b00      	cmp	r3, #0
 8012684:	d007      	beq.n	8012696 <lwip_netconn_do_delconn+0x17a>
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	6810      	ldr	r0, [r2, #0]
 8012690:	2200      	movs	r2, #0
 8012692:	2100      	movs	r1, #0
 8012694:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801269c:	2b00      	cmp	r3, #0
 801269e:	d007      	beq.n	80126b0 <lwip_netconn_do_delconn+0x194>
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126a6:	68fa      	ldr	r2, [r7, #12]
 80126a8:	6810      	ldr	r0, [r2, #0]
 80126aa:	2200      	movs	r2, #0
 80126ac:	2102      	movs	r1, #2
 80126ae:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	330c      	adds	r3, #12
 80126b6:	4618      	mov	r0, r3
 80126b8:	f00c f9f0 	bl	801ea9c <sys_sem_valid>
 80126bc:	e000      	b.n	80126c0 <lwip_netconn_do_delconn+0x1a4>
          return;
 80126be:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	080214b8 	.word	0x080214b8
 80126cc:	08021828 	.word	0x08021828
 80126d0:	080214fc 	.word	0x080214fc
 80126d4:	0802183c 	.word	0x0802183c
 80126d8:	0802185c 	.word	0x0802185c
 80126dc:	08021878 	.word	0x08021878
 80126e0:	200270b0 	.word	0x200270b0

080126e4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d025      	beq.n	8012746 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012704:	2b10      	cmp	r3, #16
 8012706:	d00e      	beq.n	8012726 <lwip_netconn_do_bind+0x42>
 8012708:	2b20      	cmp	r3, #32
 801270a:	d119      	bne.n	8012740 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801270c:	68bb      	ldr	r3, [r7, #8]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	6858      	ldr	r0, [r3, #4]
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	6899      	ldr	r1, [r3, #8]
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	899b      	ldrh	r3, [r3, #12]
 801271a:	461a      	mov	r2, r3
 801271c:	f009 faf0 	bl	801bd00 <udp_bind>
 8012720:	4603      	mov	r3, r0
 8012722:	73fb      	strb	r3, [r7, #15]
        break;
 8012724:	e011      	b.n	801274a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	6858      	ldr	r0, [r3, #4]
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	6899      	ldr	r1, [r3, #8]
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	899b      	ldrh	r3, [r3, #12]
 8012734:	461a      	mov	r2, r3
 8012736:	f003 f83b 	bl	80157b0 <tcp_bind>
 801273a:	4603      	mov	r3, r0
 801273c:	73fb      	strb	r3, [r7, #15]
        break;
 801273e:	e004      	b.n	801274a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012740:	23fa      	movs	r3, #250	@ 0xfa
 8012742:	73fb      	strb	r3, [r7, #15]
        break;
 8012744:	e001      	b.n	801274a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8012746:	23fa      	movs	r3, #250	@ 0xfa
 8012748:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	7bfa      	ldrb	r2, [r7, #15]
 801274e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012750:	bf00      	nop
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4618      	mov	r0, r3
 801276a:	f7ff f871 	bl	8011850 <netconn_err>
 801276e:	4603      	mov	r3, r0
 8012770:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d134      	bne.n	80127e4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d02d      	beq.n	80127e0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801278e:	2b20      	cmp	r3, #32
 8012790:	d123      	bne.n	80127da <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	689b      	ldr	r3, [r3, #8]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d10c      	bne.n	80127b6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	685a      	ldr	r2, [r3, #4]
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	689b      	ldr	r3, [r3, #8]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	4619      	mov	r1, r3
 80127aa:	4610      	mov	r0, r2
 80127ac:	f009 f8aa 	bl	801b904 <udp_send>
 80127b0:	4603      	mov	r3, r0
 80127b2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80127b4:	e016      	b.n	80127e4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	6858      	ldr	r0, [r3, #4]
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	689b      	ldr	r3, [r3, #8]
 80127c0:	6819      	ldr	r1, [r3, #0]
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	f103 0208 	add.w	r2, r3, #8
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	689b      	ldr	r3, [r3, #8]
 80127ce:	899b      	ldrh	r3, [r3, #12]
 80127d0:	f009 f8cc 	bl	801b96c <udp_sendto>
 80127d4:	4603      	mov	r3, r0
 80127d6:	73fb      	strb	r3, [r7, #15]
          break;
 80127d8:	e004      	b.n	80127e4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80127da:	23f5      	movs	r3, #245	@ 0xf5
 80127dc:	73fb      	strb	r3, [r7, #15]
          break;
 80127de:	e001      	b.n	80127e4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80127e0:	23f5      	movs	r3, #245	@ 0xf5
 80127e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	7bfa      	ldrb	r2, [r7, #15]
 80127e8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80127ea:	bf00      	nop
 80127ec:	3710      	adds	r7, #16
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80127f2:	b580      	push	{r7, lr}
 80127f4:	b086      	sub	sp, #24
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	2200      	movs	r2, #0
 8012802:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	685b      	ldr	r3, [r3, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d022      	beq.n	8012854 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012818:	2b10      	cmp	r3, #16
 801281a:	d11b      	bne.n	8012854 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	689b      	ldr	r3, [r3, #8]
 8012820:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012828:	d202      	bcs.n	8012830 <lwip_netconn_do_recv+0x3e>
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	b29b      	uxth	r3, r3
 801282e:	e001      	b.n	8012834 <lwip_netconn_do_recv+0x42>
 8012830:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012834:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	89fa      	ldrh	r2, [r7, #14]
 801283e:	4611      	mov	r1, r2
 8012840:	4618      	mov	r0, r3
 8012842:	f003 f8a7 	bl	8015994 <tcp_recved>
        remaining -= recved;
 8012846:	89fb      	ldrh	r3, [r7, #14]
 8012848:	697a      	ldr	r2, [r7, #20]
 801284a:	1ad3      	subs	r3, r2, r3
 801284c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d1e6      	bne.n	8012822 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012854:	bf00      	nop
 8012856:	3718      	adds	r7, #24
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b088      	sub	sp, #32
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	460b      	mov	r3, r1
 8012866:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012868:	2300      	movs	r3, #0
 801286a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d106      	bne.n	8012880 <lwip_netconn_do_writemore+0x24>
 8012872:	4b96      	ldr	r3, [pc, #600]	@ (8012acc <lwip_netconn_do_writemore+0x270>)
 8012874:	f240 6273 	movw	r2, #1651	@ 0x673
 8012878:	4995      	ldr	r1, [pc, #596]	@ (8012ad0 <lwip_netconn_do_writemore+0x274>)
 801287a:	4896      	ldr	r0, [pc, #600]	@ (8012ad4 <lwip_netconn_do_writemore+0x278>)
 801287c:	f00d fbe2 	bl	8020044 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	785b      	ldrb	r3, [r3, #1]
 8012884:	2b01      	cmp	r3, #1
 8012886:	d006      	beq.n	8012896 <lwip_netconn_do_writemore+0x3a>
 8012888:	4b90      	ldr	r3, [pc, #576]	@ (8012acc <lwip_netconn_do_writemore+0x270>)
 801288a:	f240 6274 	movw	r2, #1652	@ 0x674
 801288e:	4992      	ldr	r1, [pc, #584]	@ (8012ad8 <lwip_netconn_do_writemore+0x27c>)
 8012890:	4890      	ldr	r0, [pc, #576]	@ (8012ad4 <lwip_netconn_do_writemore+0x278>)
 8012892:	f00d fbd7 	bl	8020044 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6a1b      	ldr	r3, [r3, #32]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d106      	bne.n	80128ac <lwip_netconn_do_writemore+0x50>
 801289e:	4b8b      	ldr	r3, [pc, #556]	@ (8012acc <lwip_netconn_do_writemore+0x270>)
 80128a0:	f240 6275 	movw	r2, #1653	@ 0x675
 80128a4:	498d      	ldr	r1, [pc, #564]	@ (8012adc <lwip_netconn_do_writemore+0x280>)
 80128a6:	488b      	ldr	r0, [pc, #556]	@ (8012ad4 <lwip_netconn_do_writemore+0x278>)
 80128a8:	f00d fbcc 	bl	8020044 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d106      	bne.n	80128c2 <lwip_netconn_do_writemore+0x66>
 80128b4:	4b85      	ldr	r3, [pc, #532]	@ (8012acc <lwip_netconn_do_writemore+0x270>)
 80128b6:	f240 6276 	movw	r2, #1654	@ 0x676
 80128ba:	4989      	ldr	r1, [pc, #548]	@ (8012ae0 <lwip_netconn_do_writemore+0x284>)
 80128bc:	4885      	ldr	r0, [pc, #532]	@ (8012ad4 <lwip_netconn_do_writemore+0x278>)
 80128be:	f00d fbc1 	bl	8020044 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a1b      	ldr	r3, [r3, #32]
 80128c6:	699a      	ldr	r2, [r3, #24]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a1b      	ldr	r3, [r3, #32]
 80128cc:	695b      	ldr	r3, [r3, #20]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d306      	bcc.n	80128e0 <lwip_netconn_do_writemore+0x84>
 80128d2:	4b7e      	ldr	r3, [pc, #504]	@ (8012acc <lwip_netconn_do_writemore+0x270>)
 80128d4:	f240 6277 	movw	r2, #1655	@ 0x677
 80128d8:	4982      	ldr	r1, [pc, #520]	@ (8012ae4 <lwip_netconn_do_writemore+0x288>)
 80128da:	487e      	ldr	r0, [pc, #504]	@ (8012ad4 <lwip_netconn_do_writemore+0x278>)
 80128dc:	f00d fbb2 	bl	8020044 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6a1b      	ldr	r3, [r3, #32]
 80128e4:	899b      	ldrh	r3, [r3, #12]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d106      	bne.n	80128f8 <lwip_netconn_do_writemore+0x9c>
 80128ea:	4b78      	ldr	r3, [pc, #480]	@ (8012acc <lwip_netconn_do_writemore+0x270>)
 80128ec:	f240 6279 	movw	r2, #1657	@ 0x679
 80128f0:	497d      	ldr	r1, [pc, #500]	@ (8012ae8 <lwip_netconn_do_writemore+0x28c>)
 80128f2:	4878      	ldr	r0, [pc, #480]	@ (8012ad4 <lwip_netconn_do_writemore+0x278>)
 80128f4:	f00d fba6 	bl	8020044 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6a1b      	ldr	r3, [r3, #32]
 80128fc:	7f1b      	ldrb	r3, [r3, #28]
 80128fe:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	7f1b      	ldrb	r3, [r3, #28]
 8012904:	f003 0302 	and.w	r3, r3, #2
 8012908:	2b00      	cmp	r3, #0
 801290a:	d104      	bne.n	8012916 <lwip_netconn_do_writemore+0xba>
 801290c:	7ebb      	ldrb	r3, [r7, #26]
 801290e:	f003 0304 	and.w	r3, r3, #4
 8012912:	2b00      	cmp	r3, #0
 8012914:	d001      	beq.n	801291a <lwip_netconn_do_writemore+0xbe>
 8012916:	2301      	movs	r3, #1
 8012918:	e000      	b.n	801291c <lwip_netconn_do_writemore+0xc0>
 801291a:	2300      	movs	r3, #0
 801291c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6a1b      	ldr	r3, [r3, #32]
 8012922:	689b      	ldr	r3, [r3, #8]
 8012924:	681a      	ldr	r2, [r3, #0]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6a1b      	ldr	r3, [r3, #32]
 801292a:	691b      	ldr	r3, [r3, #16]
 801292c:	4413      	add	r3, r2
 801292e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6a1b      	ldr	r3, [r3, #32]
 8012934:	689b      	ldr	r3, [r3, #8]
 8012936:	685a      	ldr	r2, [r3, #4]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6a1b      	ldr	r3, [r3, #32]
 801293c:	691b      	ldr	r3, [r3, #16]
 801293e:	1ad3      	subs	r3, r2, r3
 8012940:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012948:	d307      	bcc.n	801295a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801294a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801294e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012950:	7ebb      	ldrb	r3, [r7, #26]
 8012952:	f043 0302 	orr.w	r3, r3, #2
 8012956:	76bb      	strb	r3, [r7, #26]
 8012958:	e001      	b.n	801295e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012966:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012968:	89fa      	ldrh	r2, [r7, #14]
 801296a:	8bbb      	ldrh	r3, [r7, #28]
 801296c:	429a      	cmp	r2, r3
 801296e:	d216      	bcs.n	801299e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012970:	89fb      	ldrh	r3, [r7, #14]
 8012972:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012974:	7e3b      	ldrb	r3, [r7, #24]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d00d      	beq.n	8012996 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801297a:	8bbb      	ldrh	r3, [r7, #28]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d10e      	bne.n	801299e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6a1b      	ldr	r3, [r3, #32]
 8012984:	699b      	ldr	r3, [r3, #24]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d102      	bne.n	8012990 <lwip_netconn_do_writemore+0x134>
 801298a:	f06f 0306 	mvn.w	r3, #6
 801298e:	e000      	b.n	8012992 <lwip_netconn_do_writemore+0x136>
 8012990:	2300      	movs	r3, #0
 8012992:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012994:	e07d      	b.n	8012a92 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012996:	7ebb      	ldrb	r3, [r7, #26]
 8012998:	f043 0302 	orr.w	r3, r3, #2
 801299c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6a1b      	ldr	r3, [r3, #32]
 80129a2:	691a      	ldr	r2, [r3, #16]
 80129a4:	8bbb      	ldrh	r3, [r7, #28]
 80129a6:	441a      	add	r2, r3
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	6a1b      	ldr	r3, [r3, #32]
 80129ac:	689b      	ldr	r3, [r3, #8]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d906      	bls.n	80129c2 <lwip_netconn_do_writemore+0x166>
 80129b4:	4b45      	ldr	r3, [pc, #276]	@ (8012acc <lwip_netconn_do_writemore+0x270>)
 80129b6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80129ba:	494c      	ldr	r1, [pc, #304]	@ (8012aec <lwip_netconn_do_writemore+0x290>)
 80129bc:	4845      	ldr	r0, [pc, #276]	@ (8012ad4 <lwip_netconn_do_writemore+0x278>)
 80129be:	f00d fb41 	bl	8020044 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80129c2:	8bbb      	ldrh	r3, [r7, #28]
 80129c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129c8:	4293      	cmp	r3, r2
 80129ca:	d103      	bne.n	80129d4 <lwip_netconn_do_writemore+0x178>
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129d2:	d209      	bcs.n	80129e8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80129d8:	8bba      	ldrh	r2, [r7, #28]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d10b      	bne.n	80129f6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6a1b      	ldr	r3, [r3, #32]
 80129e2:	899b      	ldrh	r3, [r3, #12]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d906      	bls.n	80129f6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80129e8:	2301      	movs	r3, #1
 80129ea:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80129ec:	7ebb      	ldrb	r3, [r7, #26]
 80129ee:	f043 0302 	orr.w	r3, r3, #2
 80129f2:	76bb      	strb	r3, [r7, #26]
 80129f4:	e001      	b.n	80129fa <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80129f6:	2300      	movs	r3, #0
 80129f8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6858      	ldr	r0, [r3, #4]
 80129fe:	7ebb      	ldrb	r3, [r7, #26]
 8012a00:	8bba      	ldrh	r2, [r7, #28]
 8012a02:	6979      	ldr	r1, [r7, #20]
 8012a04:	f006 fe6e 	bl	80196e4 <tcp_write>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012a0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d12c      	bne.n	8012a6e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6a1b      	ldr	r3, [r3, #32]
 8012a18:	6999      	ldr	r1, [r3, #24]
 8012a1a:	8bba      	ldrh	r2, [r7, #28]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6a1b      	ldr	r3, [r3, #32]
 8012a20:	440a      	add	r2, r1
 8012a22:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6a1b      	ldr	r3, [r3, #32]
 8012a28:	6919      	ldr	r1, [r3, #16]
 8012a2a:	8bba      	ldrh	r2, [r7, #28]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6a1b      	ldr	r3, [r3, #32]
 8012a30:	440a      	add	r2, r1
 8012a32:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6a1b      	ldr	r3, [r3, #32]
 8012a38:	691a      	ldr	r2, [r3, #16]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6a1b      	ldr	r3, [r3, #32]
 8012a3e:	689b      	ldr	r3, [r3, #8]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d113      	bne.n	8012a6e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6a1b      	ldr	r3, [r3, #32]
 8012a4a:	899a      	ldrh	r2, [r3, #12]
 8012a4c:	3a01      	subs	r2, #1
 8012a4e:	b292      	uxth	r2, r2
 8012a50:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6a1b      	ldr	r3, [r3, #32]
 8012a56:	899b      	ldrh	r3, [r3, #12]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d008      	beq.n	8012a6e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6a1b      	ldr	r3, [r3, #32]
 8012a60:	689a      	ldr	r2, [r3, #8]
 8012a62:	3208      	adds	r2, #8
 8012a64:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012a6e:	7e7b      	ldrb	r3, [r7, #25]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d004      	beq.n	8012a7e <lwip_netconn_do_writemore+0x222>
 8012a74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f43f af50 	beq.w	801291e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012a7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d004      	beq.n	8012a90 <lwip_netconn_do_writemore+0x234>
 8012a86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012a8e:	d146      	bne.n	8012b1e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012a90:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012a92:	7e3b      	ldrb	r3, [r7, #24]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d02b      	beq.n	8012af0 <lwip_netconn_do_writemore+0x294>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6a1b      	ldr	r3, [r3, #32]
 8012a9c:	699a      	ldr	r2, [r3, #24]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6a1b      	ldr	r3, [r3, #32]
 8012aa2:	695b      	ldr	r3, [r3, #20]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d223      	bcs.n	8012af0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d005      	beq.n	8012abc <lwip_netconn_do_writemore+0x260>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	2103      	movs	r1, #3
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	7f1b      	ldrb	r3, [r3, #28]
 8012ac0:	f043 0310 	orr.w	r3, r3, #16
 8012ac4:	b2da      	uxtb	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	771a      	strb	r2, [r3, #28]
 8012aca:	e028      	b.n	8012b1e <lwip_netconn_do_writemore+0x2c2>
 8012acc:	080214b8 	.word	0x080214b8
 8012ad0:	08021610 	.word	0x08021610
 8012ad4:	080214fc 	.word	0x080214fc
 8012ad8:	08021918 	.word	0x08021918
 8012adc:	08021620 	.word	0x08021620
 8012ae0:	08021938 	.word	0x08021938
 8012ae4:	08021950 	.word	0x08021950
 8012ae8:	08021990 	.word	0x08021990
 8012aec:	080219b8 	.word	0x080219b8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012af8:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8012afc:	d305      	bcc.n	8012b0a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012b06:	2b04      	cmp	r3, #4
 8012b08:	d909      	bls.n	8012b1e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d005      	beq.n	8012b1e <lwip_netconn_do_writemore+0x2c2>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b16:	2200      	movs	r2, #0
 8012b18:	2103      	movs	r1, #3
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012b1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d11d      	bne.n	8012b62 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6a1b      	ldr	r3, [r3, #32]
 8012b2a:	699a      	ldr	r2, [r3, #24]
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6a1b      	ldr	r3, [r3, #32]
 8012b30:	695b      	ldr	r3, [r3, #20]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d002      	beq.n	8012b3c <lwip_netconn_do_writemore+0x2e0>
 8012b36:	7e3b      	ldrb	r3, [r7, #24]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d001      	beq.n	8012b40 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	4618      	mov	r0, r3
 8012b46:	f007 fbdd 	bl	801a304 <tcp_output>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012b4e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012b52:	f113 0f04 	cmn.w	r3, #4
 8012b56:	d12c      	bne.n	8012bb2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012b58:	7b3b      	ldrb	r3, [r7, #12]
 8012b5a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012b5c:	2301      	movs	r3, #1
 8012b5e:	76fb      	strb	r3, [r7, #27]
 8012b60:	e027      	b.n	8012bb2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012b62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b6a:	d120      	bne.n	8012bae <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	4618      	mov	r0, r3
 8012b72:	f007 fbc7 	bl	801a304 <tcp_output>
 8012b76:	4603      	mov	r3, r0
 8012b78:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012b7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012b7e:	f113 0f04 	cmn.w	r3, #4
 8012b82:	d104      	bne.n	8012b8e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012b84:	7b7b      	ldrb	r3, [r7, #13]
 8012b86:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	76fb      	strb	r3, [r7, #27]
 8012b8c:	e011      	b.n	8012bb2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012b8e:	7e3b      	ldrb	r3, [r7, #24]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d00e      	beq.n	8012bb2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6a1b      	ldr	r3, [r3, #32]
 8012b98:	699b      	ldr	r3, [r3, #24]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d102      	bne.n	8012ba4 <lwip_netconn_do_writemore+0x348>
 8012b9e:	f06f 0306 	mvn.w	r3, #6
 8012ba2:	e000      	b.n	8012ba6 <lwip_netconn_do_writemore+0x34a>
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012ba8:	2301      	movs	r3, #1
 8012baa:	76fb      	strb	r3, [r7, #27]
 8012bac:	e001      	b.n	8012bb2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012bae:	2301      	movs	r3, #1
 8012bb0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012bb2:	7efb      	ldrb	r3, [r7, #27]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d015      	beq.n	8012be4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6a1b      	ldr	r3, [r3, #32]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	330c      	adds	r3, #12
 8012bc0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a1b      	ldr	r3, [r3, #32]
 8012bc6:	7ffa      	ldrb	r2, [r7, #31]
 8012bc8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012bd6:	78fb      	ldrb	r3, [r7, #3]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d006      	beq.n	8012bea <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012bdc:	68b8      	ldr	r0, [r7, #8]
 8012bde:	f00b ff38 	bl	801ea52 <sys_sem_signal>
 8012be2:	e002      	b.n	8012bea <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012be8:	e000      	b.n	8012bec <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8012bea:	2300      	movs	r3, #0
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3720      	adds	r7, #32
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	785b      	ldrb	r3, [r3, #1]
 8012c06:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d069      	beq.n	8012ce6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012c1c:	2b10      	cmp	r3, #16
 8012c1e:	d162      	bne.n	8012ce6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012c24:	2b03      	cmp	r3, #3
 8012c26:	d002      	beq.n	8012c2e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012c28:	7afb      	ldrb	r3, [r7, #11]
 8012c2a:	2b02      	cmp	r3, #2
 8012c2c:	d05b      	beq.n	8012ce6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012c2e:	7afb      	ldrb	r3, [r7, #11]
 8012c30:	2b03      	cmp	r3, #3
 8012c32:	d103      	bne.n	8012c3c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	22f5      	movs	r2, #245	@ 0xf5
 8012c38:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012c3a:	e059      	b.n	8012cf0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012c3c:	7afb      	ldrb	r3, [r7, #11]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	d103      	bne.n	8012c4a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	22fb      	movs	r2, #251	@ 0xfb
 8012c46:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012c48:	e052      	b.n	8012cf0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	7a1b      	ldrb	r3, [r3, #8]
 8012c4e:	f003 0301 	and.w	r3, r3, #1
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d004      	beq.n	8012c60 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7ff fa76 	bl	801214c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	6a1b      	ldr	r3, [r3, #32]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d006      	beq.n	8012c78 <lwip_netconn_do_close+0x84>
 8012c6a:	4b23      	ldr	r3, [pc, #140]	@ (8012cf8 <lwip_netconn_do_close+0x104>)
 8012c6c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8012c70:	4922      	ldr	r1, [pc, #136]	@ (8012cfc <lwip_netconn_do_close+0x108>)
 8012c72:	4823      	ldr	r0, [pc, #140]	@ (8012d00 <lwip_netconn_do_close+0x10c>)
 8012c74:	f00d f9e6 	bl	8020044 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2204      	movs	r2, #4
 8012c7e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	68fa      	ldr	r2, [r7, #12]
 8012c86:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2100      	movs	r1, #0
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7ff fada 	bl	8012248 <lwip_netconn_do_close_internal>
 8012c94:	4603      	mov	r3, r0
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d029      	beq.n	8012cee <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	785b      	ldrb	r3, [r3, #1]
 8012ca0:	2b04      	cmp	r3, #4
 8012ca2:	d006      	beq.n	8012cb2 <lwip_netconn_do_close+0xbe>
 8012ca4:	4b14      	ldr	r3, [pc, #80]	@ (8012cf8 <lwip_netconn_do_close+0x104>)
 8012ca6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8012caa:	4916      	ldr	r1, [pc, #88]	@ (8012d04 <lwip_netconn_do_close+0x110>)
 8012cac:	4814      	ldr	r0, [pc, #80]	@ (8012d00 <lwip_netconn_do_close+0x10c>)
 8012cae:	f00d f9c9 	bl	8020044 <iprintf>
        UNLOCK_TCPIP_CORE();
 8012cb2:	4815      	ldr	r0, [pc, #84]	@ (8012d08 <lwip_netconn_do_close+0x114>)
 8012cb4:	f00b ff61 	bl	801eb7a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	330c      	adds	r3, #12
 8012cbe:	2100      	movs	r1, #0
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f00b fe95 	bl	801e9f0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012cc6:	4810      	ldr	r0, [pc, #64]	@ (8012d08 <lwip_netconn_do_close+0x114>)
 8012cc8:	f00b ff48 	bl	801eb5c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	785b      	ldrb	r3, [r3, #1]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d00b      	beq.n	8012cee <lwip_netconn_do_close+0xfa>
 8012cd6:	4b08      	ldr	r3, [pc, #32]	@ (8012cf8 <lwip_netconn_do_close+0x104>)
 8012cd8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8012cdc:	4909      	ldr	r1, [pc, #36]	@ (8012d04 <lwip_netconn_do_close+0x110>)
 8012cde:	4808      	ldr	r0, [pc, #32]	@ (8012d00 <lwip_netconn_do_close+0x10c>)
 8012ce0:	f00d f9b0 	bl	8020044 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012ce4:	e003      	b.n	8012cee <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	22f5      	movs	r2, #245	@ 0xf5
 8012cea:	711a      	strb	r2, [r3, #4]
 8012cec:	e000      	b.n	8012cf0 <lwip_netconn_do_close+0xfc>
      return;
 8012cee:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	080214b8 	.word	0x080214b8
 8012cfc:	0802185c 	.word	0x0802185c
 8012d00:	080214fc 	.word	0x080214fc
 8012d04:	08021878 	.word	0x08021878
 8012d08:	200270b0 	.word	0x200270b0

08012d0c <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012d12:	2006      	movs	r0, #6
 8012d14:	f001 f818 	bl	8013d48 <memp_malloc>
 8012d18:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d004      	beq.n	8012d2a <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012d20:	2210      	movs	r2, #16
 8012d22:	2100      	movs	r1, #0
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	f00d fae5 	bl	80202f4 <memset>
  }
  return buf;
 8012d2a:	687b      	ldr	r3, [r7, #4]
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3708      	adds	r7, #8
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}

08012d34 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d013      	beq.n	8012d6a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d00b      	beq.n	8012d62 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f001 ff1a 	bl	8014b88 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2200      	movs	r2, #0
 8012d58:	605a      	str	r2, [r3, #4]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	685a      	ldr	r2, [r3, #4]
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012d62:	6879      	ldr	r1, [r7, #4]
 8012d64:	2006      	movs	r0, #6
 8012d66:	f001 f86b 	bl	8013e40 <memp_free>
  }
}
 8012d6a:	bf00      	nop
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
	...

08012d74 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b082      	sub	sp, #8
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d107      	bne.n	8012d96 <netbuf_alloc+0x22>
 8012d86:	4b1c      	ldr	r3, [pc, #112]	@ (8012df8 <netbuf_alloc+0x84>)
 8012d88:	2268      	movs	r2, #104	@ 0x68
 8012d8a:	491c      	ldr	r1, [pc, #112]	@ (8012dfc <netbuf_alloc+0x88>)
 8012d8c:	481c      	ldr	r0, [pc, #112]	@ (8012e00 <netbuf_alloc+0x8c>)
 8012d8e:	f00d f959 	bl	8020044 <iprintf>
 8012d92:	2300      	movs	r3, #0
 8012d94:	e02b      	b.n	8012dee <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d004      	beq.n	8012da8 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f001 fef0 	bl	8014b88 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8012da8:	887b      	ldrh	r3, [r7, #2]
 8012daa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012dae:	4619      	mov	r1, r3
 8012db0:	2036      	movs	r0, #54	@ 0x36
 8012db2:	f001 fc05 	bl	80145c0 <pbuf_alloc>
 8012db6:	4602      	mov	r2, r0
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d101      	bne.n	8012dc8 <netbuf_alloc+0x54>
    return NULL;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	e012      	b.n	8012dee <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	895b      	ldrh	r3, [r3, #10]
 8012dce:	887a      	ldrh	r2, [r7, #2]
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d905      	bls.n	8012de0 <netbuf_alloc+0x6c>
 8012dd4:	4b08      	ldr	r3, [pc, #32]	@ (8012df8 <netbuf_alloc+0x84>)
 8012dd6:	2272      	movs	r2, #114	@ 0x72
 8012dd8:	490a      	ldr	r1, [pc, #40]	@ (8012e04 <netbuf_alloc+0x90>)
 8012dda:	4809      	ldr	r0, [pc, #36]	@ (8012e00 <netbuf_alloc+0x8c>)
 8012ddc:	f00d f932 	bl	8020044 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681a      	ldr	r2, [r3, #0]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	685b      	ldr	r3, [r3, #4]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3708      	adds	r7, #8
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	08021a10 	.word	0x08021a10
 8012dfc:	08021a44 	.word	0x08021a44
 8012e00:	08021a60 	.word	0x08021a60
 8012e04:	08021a88 	.word	0x08021a88

08012e08 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	60f8      	str	r0, [r7, #12]
 8012e10:	60b9      	str	r1, [r7, #8]
 8012e12:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d108      	bne.n	8012e2c <netbuf_data+0x24>
 8012e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8012e88 <netbuf_data+0x80>)
 8012e1c:	22c6      	movs	r2, #198	@ 0xc6
 8012e1e:	491b      	ldr	r1, [pc, #108]	@ (8012e8c <netbuf_data+0x84>)
 8012e20:	481b      	ldr	r0, [pc, #108]	@ (8012e90 <netbuf_data+0x88>)
 8012e22:	f00d f90f 	bl	8020044 <iprintf>
 8012e26:	f06f 030f 	mvn.w	r3, #15
 8012e2a:	e029      	b.n	8012e80 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d108      	bne.n	8012e44 <netbuf_data+0x3c>
 8012e32:	4b15      	ldr	r3, [pc, #84]	@ (8012e88 <netbuf_data+0x80>)
 8012e34:	22c7      	movs	r2, #199	@ 0xc7
 8012e36:	4917      	ldr	r1, [pc, #92]	@ (8012e94 <netbuf_data+0x8c>)
 8012e38:	4815      	ldr	r0, [pc, #84]	@ (8012e90 <netbuf_data+0x88>)
 8012e3a:	f00d f903 	bl	8020044 <iprintf>
 8012e3e:	f06f 030f 	mvn.w	r3, #15
 8012e42:	e01d      	b.n	8012e80 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d108      	bne.n	8012e5c <netbuf_data+0x54>
 8012e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8012e88 <netbuf_data+0x80>)
 8012e4c:	22c8      	movs	r2, #200	@ 0xc8
 8012e4e:	4912      	ldr	r1, [pc, #72]	@ (8012e98 <netbuf_data+0x90>)
 8012e50:	480f      	ldr	r0, [pc, #60]	@ (8012e90 <netbuf_data+0x88>)
 8012e52:	f00d f8f7 	bl	8020044 <iprintf>
 8012e56:	f06f 030f 	mvn.w	r3, #15
 8012e5a:	e011      	b.n	8012e80 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d102      	bne.n	8012e6a <netbuf_data+0x62>
    return ERR_BUF;
 8012e64:	f06f 0301 	mvn.w	r3, #1
 8012e68:	e00a      	b.n	8012e80 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	685b      	ldr	r3, [r3, #4]
 8012e6e:	685a      	ldr	r2, [r3, #4]
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	895a      	ldrh	r2, [r3, #10]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3710      	adds	r7, #16
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	08021a10 	.word	0x08021a10
 8012e8c:	08021b18 	.word	0x08021b18
 8012e90:	08021a60 	.word	0x08021a60
 8012e94:	08021b34 	.word	0x08021b34
 8012e98:	08021b54 	.word	0x08021b54

08012e9c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b084      	sub	sp, #16
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
 8012ea4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012ea6:	f008 faf9 	bl	801b49c <sys_timeouts_sleeptime>
 8012eaa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012eb2:	d10b      	bne.n	8012ecc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012eb4:	4813      	ldr	r0, [pc, #76]	@ (8012f04 <tcpip_timeouts_mbox_fetch+0x68>)
 8012eb6:	f00b fe60 	bl	801eb7a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012eba:	2200      	movs	r2, #0
 8012ebc:	6839      	ldr	r1, [r7, #0]
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f00b fcea 	bl	801e898 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012ec4:	480f      	ldr	r0, [pc, #60]	@ (8012f04 <tcpip_timeouts_mbox_fetch+0x68>)
 8012ec6:	f00b fe49 	bl	801eb5c <sys_mutex_lock>
    return;
 8012eca:	e018      	b.n	8012efe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d102      	bne.n	8012ed8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012ed2:	f008 faa9 	bl	801b428 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012ed6:	e7e6      	b.n	8012ea6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012ed8:	480a      	ldr	r0, [pc, #40]	@ (8012f04 <tcpip_timeouts_mbox_fetch+0x68>)
 8012eda:	f00b fe4e 	bl	801eb7a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012ede:	68fa      	ldr	r2, [r7, #12]
 8012ee0:	6839      	ldr	r1, [r7, #0]
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f00b fcd8 	bl	801e898 <sys_arch_mbox_fetch>
 8012ee8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012eea:	4806      	ldr	r0, [pc, #24]	@ (8012f04 <tcpip_timeouts_mbox_fetch+0x68>)
 8012eec:	f00b fe36 	bl	801eb5c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ef6:	d102      	bne.n	8012efe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012ef8:	f008 fa96 	bl	801b428 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012efc:	e7d3      	b.n	8012ea6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012efe:	3710      	adds	r7, #16
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	200270b0 	.word	0x200270b0

08012f08 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b084      	sub	sp, #16
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012f10:	4810      	ldr	r0, [pc, #64]	@ (8012f54 <tcpip_thread+0x4c>)
 8012f12:	f00b fe23 	bl	801eb5c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012f16:	4b10      	ldr	r3, [pc, #64]	@ (8012f58 <tcpip_thread+0x50>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d005      	beq.n	8012f2a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8012f58 <tcpip_thread+0x50>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4a0e      	ldr	r2, [pc, #56]	@ (8012f5c <tcpip_thread+0x54>)
 8012f24:	6812      	ldr	r2, [r2, #0]
 8012f26:	4610      	mov	r0, r2
 8012f28:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012f2a:	f107 030c 	add.w	r3, r7, #12
 8012f2e:	4619      	mov	r1, r3
 8012f30:	480b      	ldr	r0, [pc, #44]	@ (8012f60 <tcpip_thread+0x58>)
 8012f32:	f7ff ffb3 	bl	8012e9c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d106      	bne.n	8012f4a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012f3c:	4b09      	ldr	r3, [pc, #36]	@ (8012f64 <tcpip_thread+0x5c>)
 8012f3e:	2291      	movs	r2, #145	@ 0x91
 8012f40:	4909      	ldr	r1, [pc, #36]	@ (8012f68 <tcpip_thread+0x60>)
 8012f42:	480a      	ldr	r0, [pc, #40]	@ (8012f6c <tcpip_thread+0x64>)
 8012f44:	f00d f87e 	bl	8020044 <iprintf>
      continue;
 8012f48:	e003      	b.n	8012f52 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f000 f80f 	bl	8012f70 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012f52:	e7ea      	b.n	8012f2a <tcpip_thread+0x22>
 8012f54:	200270b0 	.word	0x200270b0
 8012f58:	200270a4 	.word	0x200270a4
 8012f5c:	200270a8 	.word	0x200270a8
 8012f60:	200270ac 	.word	0x200270ac
 8012f64:	08021ba8 	.word	0x08021ba8
 8012f68:	08021bd8 	.word	0x08021bd8
 8012f6c:	08021bf8 	.word	0x08021bf8

08012f70 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	2b02      	cmp	r3, #2
 8012f7e:	d026      	beq.n	8012fce <tcpip_thread_handle_msg+0x5e>
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	dc2b      	bgt.n	8012fdc <tcpip_thread_handle_msg+0x6c>
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d002      	beq.n	8012f8e <tcpip_thread_handle_msg+0x1e>
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d015      	beq.n	8012fb8 <tcpip_thread_handle_msg+0x48>
 8012f8c:	e026      	b.n	8012fdc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	6850      	ldr	r0, [r2, #4]
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	6892      	ldr	r2, [r2, #8]
 8012f9a:	4611      	mov	r1, r2
 8012f9c:	4798      	blx	r3
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d004      	beq.n	8012fae <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f001 fded 	bl	8014b88 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012fae:	6879      	ldr	r1, [r7, #4]
 8012fb0:	2009      	movs	r0, #9
 8012fb2:	f000 ff45 	bl	8013e40 <memp_free>
      break;
 8012fb6:	e018      	b.n	8012fea <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	6892      	ldr	r2, [r2, #8]
 8012fc0:	4610      	mov	r0, r2
 8012fc2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012fc4:	6879      	ldr	r1, [r7, #4]
 8012fc6:	2008      	movs	r0, #8
 8012fc8:	f000 ff3a 	bl	8013e40 <memp_free>
      break;
 8012fcc:	e00d      	b.n	8012fea <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	6892      	ldr	r2, [r2, #8]
 8012fd6:	4610      	mov	r0, r2
 8012fd8:	4798      	blx	r3
      break;
 8012fda:	e006      	b.n	8012fea <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012fdc:	4b05      	ldr	r3, [pc, #20]	@ (8012ff4 <tcpip_thread_handle_msg+0x84>)
 8012fde:	22cf      	movs	r2, #207	@ 0xcf
 8012fe0:	4905      	ldr	r1, [pc, #20]	@ (8012ff8 <tcpip_thread_handle_msg+0x88>)
 8012fe2:	4806      	ldr	r0, [pc, #24]	@ (8012ffc <tcpip_thread_handle_msg+0x8c>)
 8012fe4:	f00d f82e 	bl	8020044 <iprintf>
      break;
 8012fe8:	bf00      	nop
  }
}
 8012fea:	bf00      	nop
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	08021ba8 	.word	0x08021ba8
 8012ff8:	08021bd8 	.word	0x08021bd8
 8012ffc:	08021bf8 	.word	0x08021bf8

08013000 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b086      	sub	sp, #24
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801300c:	481a      	ldr	r0, [pc, #104]	@ (8013078 <tcpip_inpkt+0x78>)
 801300e:	f00b fc8b 	bl	801e928 <sys_mbox_valid>
 8013012:	4603      	mov	r3, r0
 8013014:	2b00      	cmp	r3, #0
 8013016:	d105      	bne.n	8013024 <tcpip_inpkt+0x24>
 8013018:	4b18      	ldr	r3, [pc, #96]	@ (801307c <tcpip_inpkt+0x7c>)
 801301a:	22fc      	movs	r2, #252	@ 0xfc
 801301c:	4918      	ldr	r1, [pc, #96]	@ (8013080 <tcpip_inpkt+0x80>)
 801301e:	4819      	ldr	r0, [pc, #100]	@ (8013084 <tcpip_inpkt+0x84>)
 8013020:	f00d f810 	bl	8020044 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8013024:	2009      	movs	r0, #9
 8013026:	f000 fe8f 	bl	8013d48 <memp_malloc>
 801302a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d102      	bne.n	8013038 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8013032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013036:	e01a      	b.n	801306e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	2200      	movs	r2, #0
 801303c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	68fa      	ldr	r2, [r7, #12]
 8013042:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	68ba      	ldr	r2, [r7, #8]
 8013048:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013050:	6979      	ldr	r1, [r7, #20]
 8013052:	4809      	ldr	r0, [pc, #36]	@ (8013078 <tcpip_inpkt+0x78>)
 8013054:	f00b fbfc 	bl	801e850 <sys_mbox_trypost>
 8013058:	4603      	mov	r3, r0
 801305a:	2b00      	cmp	r3, #0
 801305c:	d006      	beq.n	801306c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801305e:	6979      	ldr	r1, [r7, #20]
 8013060:	2009      	movs	r0, #9
 8013062:	f000 feed 	bl	8013e40 <memp_free>
    return ERR_MEM;
 8013066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801306a:	e000      	b.n	801306e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801306c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801306e:	4618      	mov	r0, r3
 8013070:	3718      	adds	r7, #24
 8013072:	46bd      	mov	sp, r7
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	200270ac 	.word	0x200270ac
 801307c:	08021ba8 	.word	0x08021ba8
 8013080:	08021c20 	.word	0x08021c20
 8013084:	08021bf8 	.word	0x08021bf8

08013088 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013098:	f003 0318 	and.w	r3, r3, #24
 801309c:	2b00      	cmp	r3, #0
 801309e:	d006      	beq.n	80130ae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80130a0:	4a08      	ldr	r2, [pc, #32]	@ (80130c4 <tcpip_input+0x3c>)
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f7ff ffab 	bl	8013000 <tcpip_inpkt>
 80130aa:	4603      	mov	r3, r0
 80130ac:	e005      	b.n	80130ba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80130ae:	4a06      	ldr	r2, [pc, #24]	@ (80130c8 <tcpip_input+0x40>)
 80130b0:	6839      	ldr	r1, [r7, #0]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f7ff ffa4 	bl	8013000 <tcpip_inpkt>
 80130b8:	4603      	mov	r3, r0
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3708      	adds	r7, #8
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}
 80130c2:	bf00      	nop
 80130c4:	0801e599 	.word	0x0801e599
 80130c8:	0801d375 	.word	0x0801d375

080130cc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80130d6:	4819      	ldr	r0, [pc, #100]	@ (801313c <tcpip_try_callback+0x70>)
 80130d8:	f00b fc26 	bl	801e928 <sys_mbox_valid>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <tcpip_try_callback+0x24>
 80130e2:	4b17      	ldr	r3, [pc, #92]	@ (8013140 <tcpip_try_callback+0x74>)
 80130e4:	f240 125d 	movw	r2, #349	@ 0x15d
 80130e8:	4916      	ldr	r1, [pc, #88]	@ (8013144 <tcpip_try_callback+0x78>)
 80130ea:	4817      	ldr	r0, [pc, #92]	@ (8013148 <tcpip_try_callback+0x7c>)
 80130ec:	f00c ffaa 	bl	8020044 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80130f0:	2008      	movs	r0, #8
 80130f2:	f000 fe29 	bl	8013d48 <memp_malloc>
 80130f6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d102      	bne.n	8013104 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80130fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013102:	e017      	b.n	8013134 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	2201      	movs	r2, #1
 8013108:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	683a      	ldr	r2, [r7, #0]
 8013114:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013116:	68f9      	ldr	r1, [r7, #12]
 8013118:	4808      	ldr	r0, [pc, #32]	@ (801313c <tcpip_try_callback+0x70>)
 801311a:	f00b fb99 	bl	801e850 <sys_mbox_trypost>
 801311e:	4603      	mov	r3, r0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d006      	beq.n	8013132 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8013124:	68f9      	ldr	r1, [r7, #12]
 8013126:	2008      	movs	r0, #8
 8013128:	f000 fe8a 	bl	8013e40 <memp_free>
    return ERR_MEM;
 801312c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013130:	e000      	b.n	8013134 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8013132:	2300      	movs	r3, #0
}
 8013134:	4618      	mov	r0, r3
 8013136:	3710      	adds	r7, #16
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}
 801313c:	200270ac 	.word	0x200270ac
 8013140:	08021ba8 	.word	0x08021ba8
 8013144:	08021c20 	.word	0x08021c20
 8013148:	08021bf8 	.word	0x08021bf8

0801314c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b084      	sub	sp, #16
 8013150:	af00      	add	r7, sp, #0
 8013152:	60f8      	str	r0, [r7, #12]
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8013158:	4806      	ldr	r0, [pc, #24]	@ (8013174 <tcpip_send_msg_wait_sem+0x28>)
 801315a:	f00b fcff 	bl	801eb5c <sys_mutex_lock>
  fn(apimsg);
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	68b8      	ldr	r0, [r7, #8]
 8013162:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8013164:	4803      	ldr	r0, [pc, #12]	@ (8013174 <tcpip_send_msg_wait_sem+0x28>)
 8013166:	f00b fd08 	bl	801eb7a <sys_mutex_unlock>
  return ERR_OK;
 801316a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801316c:	4618      	mov	r0, r3
 801316e:	3710      	adds	r7, #16
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}
 8013174:	200270b0 	.word	0x200270b0

08013178 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b084      	sub	sp, #16
 801317c:	af02      	add	r7, sp, #8
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013182:	f000 f872 	bl	801326a <lwip_init>

  tcpip_init_done = initfunc;
 8013186:	4a17      	ldr	r2, [pc, #92]	@ (80131e4 <tcpip_init+0x6c>)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801318c:	4a16      	ldr	r2, [pc, #88]	@ (80131e8 <tcpip_init+0x70>)
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013192:	2106      	movs	r1, #6
 8013194:	4815      	ldr	r0, [pc, #84]	@ (80131ec <tcpip_init+0x74>)
 8013196:	f00b fb01 	bl	801e79c <sys_mbox_new>
 801319a:	4603      	mov	r3, r0
 801319c:	2b00      	cmp	r3, #0
 801319e:	d006      	beq.n	80131ae <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80131a0:	4b13      	ldr	r3, [pc, #76]	@ (80131f0 <tcpip_init+0x78>)
 80131a2:	f240 2261 	movw	r2, #609	@ 0x261
 80131a6:	4913      	ldr	r1, [pc, #76]	@ (80131f4 <tcpip_init+0x7c>)
 80131a8:	4813      	ldr	r0, [pc, #76]	@ (80131f8 <tcpip_init+0x80>)
 80131aa:	f00c ff4b 	bl	8020044 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80131ae:	4813      	ldr	r0, [pc, #76]	@ (80131fc <tcpip_init+0x84>)
 80131b0:	f00b fc9e 	bl	801eaf0 <sys_mutex_new>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d006      	beq.n	80131c8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80131ba:	4b0d      	ldr	r3, [pc, #52]	@ (80131f0 <tcpip_init+0x78>)
 80131bc:	f240 2265 	movw	r2, #613	@ 0x265
 80131c0:	490f      	ldr	r1, [pc, #60]	@ (8013200 <tcpip_init+0x88>)
 80131c2:	480d      	ldr	r0, [pc, #52]	@ (80131f8 <tcpip_init+0x80>)
 80131c4:	f00c ff3e 	bl	8020044 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80131c8:	2318      	movs	r3, #24
 80131ca:	9300      	str	r3, [sp, #0]
 80131cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80131d0:	2200      	movs	r2, #0
 80131d2:	490c      	ldr	r1, [pc, #48]	@ (8013204 <tcpip_init+0x8c>)
 80131d4:	480c      	ldr	r0, [pc, #48]	@ (8013208 <tcpip_init+0x90>)
 80131d6:	f00b fcdd 	bl	801eb94 <sys_thread_new>
}
 80131da:	bf00      	nop
 80131dc:	3708      	adds	r7, #8
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}
 80131e2:	bf00      	nop
 80131e4:	200270a4 	.word	0x200270a4
 80131e8:	200270a8 	.word	0x200270a8
 80131ec:	200270ac 	.word	0x200270ac
 80131f0:	08021ba8 	.word	0x08021ba8
 80131f4:	08021c30 	.word	0x08021c30
 80131f8:	08021bf8 	.word	0x08021bf8
 80131fc:	200270b0 	.word	0x200270b0
 8013200:	08021c54 	.word	0x08021c54
 8013204:	08012f09 	.word	0x08012f09
 8013208:	08021c78 	.word	0x08021c78

0801320c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801320c:	b480      	push	{r7}
 801320e:	b083      	sub	sp, #12
 8013210:	af00      	add	r7, sp, #0
 8013212:	4603      	mov	r3, r0
 8013214:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801321a:	021b      	lsls	r3, r3, #8
 801321c:	b21a      	sxth	r2, r3
 801321e:	88fb      	ldrh	r3, [r7, #6]
 8013220:	0a1b      	lsrs	r3, r3, #8
 8013222:	b29b      	uxth	r3, r3
 8013224:	b21b      	sxth	r3, r3
 8013226:	4313      	orrs	r3, r2
 8013228:	b21b      	sxth	r3, r3
 801322a:	b29b      	uxth	r3, r3
}
 801322c:	4618      	mov	r0, r3
 801322e:	370c      	adds	r7, #12
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr

08013238 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013238:	b480      	push	{r7}
 801323a:	b083      	sub	sp, #12
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	061a      	lsls	r2, r3, #24
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	021b      	lsls	r3, r3, #8
 8013248:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801324c:	431a      	orrs	r2, r3
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	0a1b      	lsrs	r3, r3, #8
 8013252:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013256:	431a      	orrs	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	0e1b      	lsrs	r3, r3, #24
 801325c:	4313      	orrs	r3, r2
}
 801325e:	4618      	mov	r0, r3
 8013260:	370c      	adds	r7, #12
 8013262:	46bd      	mov	sp, r7
 8013264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013268:	4770      	bx	lr

0801326a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801326a:	b580      	push	{r7, lr}
 801326c:	b082      	sub	sp, #8
 801326e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013270:	2300      	movs	r3, #0
 8013272:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8013274:	f001 ff32 	bl	80150dc <stats_init>
#if !NO_SYS
  sys_init();
 8013278:	f00b fc2e 	bl	801ead8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801327c:	f000 f8d4 	bl	8013428 <mem_init>
  memp_init();
 8013280:	f000 fccc 	bl	8013c1c <memp_init>
  pbuf_init();
  netif_init();
 8013284:	f000 fe06 	bl	8013e94 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013288:	f008 f940 	bl	801b50c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801328c:	f001 ff2e 	bl	80150ec <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013290:	f008 f882 	bl	801b398 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013294:	bf00      	nop
 8013296:	3708      	adds	r7, #8
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	4603      	mov	r3, r0
 80132a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80132a6:	4b05      	ldr	r3, [pc, #20]	@ (80132bc <ptr_to_mem+0x20>)
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	88fb      	ldrh	r3, [r7, #6]
 80132ac:	4413      	add	r3, r2
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	370c      	adds	r7, #12
 80132b2:	46bd      	mov	sp, r7
 80132b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b8:	4770      	bx	lr
 80132ba:	bf00      	nop
 80132bc:	200270cc 	.word	0x200270cc

080132c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80132c8:	4b05      	ldr	r3, [pc, #20]	@ (80132e0 <mem_to_ptr+0x20>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	1ad3      	subs	r3, r2, r3
 80132d0:	b29b      	uxth	r3, r3
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	200270cc 	.word	0x200270cc

080132e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80132e4:	b590      	push	{r4, r7, lr}
 80132e6:	b085      	sub	sp, #20
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80132ec:	4b45      	ldr	r3, [pc, #276]	@ (8013404 <plug_holes+0x120>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d206      	bcs.n	8013304 <plug_holes+0x20>
 80132f6:	4b44      	ldr	r3, [pc, #272]	@ (8013408 <plug_holes+0x124>)
 80132f8:	f240 12df 	movw	r2, #479	@ 0x1df
 80132fc:	4943      	ldr	r1, [pc, #268]	@ (801340c <plug_holes+0x128>)
 80132fe:	4844      	ldr	r0, [pc, #272]	@ (8013410 <plug_holes+0x12c>)
 8013300:	f00c fea0 	bl	8020044 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013304:	4b43      	ldr	r3, [pc, #268]	@ (8013414 <plug_holes+0x130>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	687a      	ldr	r2, [r7, #4]
 801330a:	429a      	cmp	r2, r3
 801330c:	d306      	bcc.n	801331c <plug_holes+0x38>
 801330e:	4b3e      	ldr	r3, [pc, #248]	@ (8013408 <plug_holes+0x124>)
 8013310:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013314:	4940      	ldr	r1, [pc, #256]	@ (8013418 <plug_holes+0x134>)
 8013316:	483e      	ldr	r0, [pc, #248]	@ (8013410 <plug_holes+0x12c>)
 8013318:	f00c fe94 	bl	8020044 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	791b      	ldrb	r3, [r3, #4]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d006      	beq.n	8013332 <plug_holes+0x4e>
 8013324:	4b38      	ldr	r3, [pc, #224]	@ (8013408 <plug_holes+0x124>)
 8013326:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801332a:	493c      	ldr	r1, [pc, #240]	@ (801341c <plug_holes+0x138>)
 801332c:	4838      	ldr	r0, [pc, #224]	@ (8013410 <plug_holes+0x12c>)
 801332e:	f00c fe89 	bl	8020044 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	881b      	ldrh	r3, [r3, #0]
 8013336:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801333a:	d906      	bls.n	801334a <plug_holes+0x66>
 801333c:	4b32      	ldr	r3, [pc, #200]	@ (8013408 <plug_holes+0x124>)
 801333e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8013342:	4937      	ldr	r1, [pc, #220]	@ (8013420 <plug_holes+0x13c>)
 8013344:	4832      	ldr	r0, [pc, #200]	@ (8013410 <plug_holes+0x12c>)
 8013346:	f00c fe7d 	bl	8020044 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	881b      	ldrh	r3, [r3, #0]
 801334e:	4618      	mov	r0, r3
 8013350:	f7ff ffa4 	bl	801329c <ptr_to_mem>
 8013354:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	429a      	cmp	r2, r3
 801335c:	d024      	beq.n	80133a8 <plug_holes+0xc4>
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	791b      	ldrb	r3, [r3, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d120      	bne.n	80133a8 <plug_holes+0xc4>
 8013366:	4b2b      	ldr	r3, [pc, #172]	@ (8013414 <plug_holes+0x130>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	68fa      	ldr	r2, [r7, #12]
 801336c:	429a      	cmp	r2, r3
 801336e:	d01b      	beq.n	80133a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013370:	4b2c      	ldr	r3, [pc, #176]	@ (8013424 <plug_holes+0x140>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	68fa      	ldr	r2, [r7, #12]
 8013376:	429a      	cmp	r2, r3
 8013378:	d102      	bne.n	8013380 <plug_holes+0x9c>
      lfree = mem;
 801337a:	4a2a      	ldr	r2, [pc, #168]	@ (8013424 <plug_holes+0x140>)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	881a      	ldrh	r2, [r3, #0]
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	881b      	ldrh	r3, [r3, #0]
 801338c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013390:	d00a      	beq.n	80133a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	881b      	ldrh	r3, [r3, #0]
 8013396:	4618      	mov	r0, r3
 8013398:	f7ff ff80 	bl	801329c <ptr_to_mem>
 801339c:	4604      	mov	r4, r0
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f7ff ff8e 	bl	80132c0 <mem_to_ptr>
 80133a4:	4603      	mov	r3, r0
 80133a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	885b      	ldrh	r3, [r3, #2]
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7ff ff75 	bl	801329c <ptr_to_mem>
 80133b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80133b4:	68ba      	ldr	r2, [r7, #8]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d01f      	beq.n	80133fc <plug_holes+0x118>
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	791b      	ldrb	r3, [r3, #4]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d11b      	bne.n	80133fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80133c4:	4b17      	ldr	r3, [pc, #92]	@ (8013424 <plug_holes+0x140>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d102      	bne.n	80133d4 <plug_holes+0xf0>
      lfree = pmem;
 80133ce:	4a15      	ldr	r2, [pc, #84]	@ (8013424 <plug_holes+0x140>)
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	881a      	ldrh	r2, [r3, #0]
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	881b      	ldrh	r3, [r3, #0]
 80133e0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80133e4:	d00a      	beq.n	80133fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	881b      	ldrh	r3, [r3, #0]
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7ff ff56 	bl	801329c <ptr_to_mem>
 80133f0:	4604      	mov	r4, r0
 80133f2:	68b8      	ldr	r0, [r7, #8]
 80133f4:	f7ff ff64 	bl	80132c0 <mem_to_ptr>
 80133f8:	4603      	mov	r3, r0
 80133fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80133fc:	bf00      	nop
 80133fe:	3714      	adds	r7, #20
 8013400:	46bd      	mov	sp, r7
 8013402:	bd90      	pop	{r4, r7, pc}
 8013404:	200270cc 	.word	0x200270cc
 8013408:	08021c88 	.word	0x08021c88
 801340c:	08021cb8 	.word	0x08021cb8
 8013410:	08021cd0 	.word	0x08021cd0
 8013414:	200270d0 	.word	0x200270d0
 8013418:	08021cf8 	.word	0x08021cf8
 801341c:	08021d14 	.word	0x08021d14
 8013420:	08021d30 	.word	0x08021d30
 8013424:	200270d8 	.word	0x200270d8

08013428 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801342e:	4b1f      	ldr	r3, [pc, #124]	@ (80134ac <mem_init+0x84>)
 8013430:	4a1f      	ldr	r2, [pc, #124]	@ (80134b0 <mem_init+0x88>)
 8013432:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013434:	4b1d      	ldr	r3, [pc, #116]	@ (80134ac <mem_init+0x84>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013440:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2200      	movs	r2, #0
 8013446:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2200      	movs	r2, #0
 801344c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801344e:	f44f 40c8 	mov.w	r0, #25600	@ 0x6400
 8013452:	f7ff ff23 	bl	801329c <ptr_to_mem>
 8013456:	4603      	mov	r3, r0
 8013458:	4a16      	ldr	r2, [pc, #88]	@ (80134b4 <mem_init+0x8c>)
 801345a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801345c:	4b15      	ldr	r3, [pc, #84]	@ (80134b4 <mem_init+0x8c>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2201      	movs	r2, #1
 8013462:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013464:	4b13      	ldr	r3, [pc, #76]	@ (80134b4 <mem_init+0x8c>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 801346c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801346e:	4b11      	ldr	r3, [pc, #68]	@ (80134b4 <mem_init+0x8c>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013476:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013478:	4b0c      	ldr	r3, [pc, #48]	@ (80134ac <mem_init+0x84>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4a0e      	ldr	r2, [pc, #56]	@ (80134b8 <mem_init+0x90>)
 801347e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013480:	4b0e      	ldr	r3, [pc, #56]	@ (80134bc <mem_init+0x94>)
 8013482:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013486:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801348a:	480d      	ldr	r0, [pc, #52]	@ (80134c0 <mem_init+0x98>)
 801348c:	f00b fb30 	bl	801eaf0 <sys_mutex_new>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d006      	beq.n	80134a4 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013496:	4b0b      	ldr	r3, [pc, #44]	@ (80134c4 <mem_init+0x9c>)
 8013498:	f240 221f 	movw	r2, #543	@ 0x21f
 801349c:	490a      	ldr	r1, [pc, #40]	@ (80134c8 <mem_init+0xa0>)
 801349e:	480b      	ldr	r0, [pc, #44]	@ (80134cc <mem_init+0xa4>)
 80134a0:	f00c fdd0 	bl	8020044 <iprintf>
  }
}
 80134a4:	bf00      	nop
 80134a6:	3708      	adds	r7, #8
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	200270cc 	.word	0x200270cc
 80134b0:	20048000 	.word	0x20048000
 80134b4:	200270d0 	.word	0x200270d0
 80134b8:	200270d8 	.word	0x200270d8
 80134bc:	2002d2b0 	.word	0x2002d2b0
 80134c0:	200270d4 	.word	0x200270d4
 80134c4:	08021c88 	.word	0x08021c88
 80134c8:	08021d5c 	.word	0x08021d5c
 80134cc:	08021cd0 	.word	0x08021cd0

080134d0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b086      	sub	sp, #24
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80134d8:	6878      	ldr	r0, [r7, #4]
 80134da:	f7ff fef1 	bl	80132c0 <mem_to_ptr>
 80134de:	4603      	mov	r3, r0
 80134e0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	881b      	ldrh	r3, [r3, #0]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7ff fed8 	bl	801329c <ptr_to_mem>
 80134ec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	885b      	ldrh	r3, [r3, #2]
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7ff fed2 	bl	801329c <ptr_to_mem>
 80134f8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	881b      	ldrh	r3, [r3, #0]
 80134fe:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013502:	d818      	bhi.n	8013536 <mem_link_valid+0x66>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	885b      	ldrh	r3, [r3, #2]
 8013508:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801350c:	d813      	bhi.n	8013536 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013512:	8afa      	ldrh	r2, [r7, #22]
 8013514:	429a      	cmp	r2, r3
 8013516:	d004      	beq.n	8013522 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	881b      	ldrh	r3, [r3, #0]
 801351c:	8afa      	ldrh	r2, [r7, #22]
 801351e:	429a      	cmp	r2, r3
 8013520:	d109      	bne.n	8013536 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013522:	4b08      	ldr	r3, [pc, #32]	@ (8013544 <mem_link_valid+0x74>)
 8013524:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013526:	693a      	ldr	r2, [r7, #16]
 8013528:	429a      	cmp	r2, r3
 801352a:	d006      	beq.n	801353a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	885b      	ldrh	r3, [r3, #2]
 8013530:	8afa      	ldrh	r2, [r7, #22]
 8013532:	429a      	cmp	r2, r3
 8013534:	d001      	beq.n	801353a <mem_link_valid+0x6a>
    return 0;
 8013536:	2300      	movs	r3, #0
 8013538:	e000      	b.n	801353c <mem_link_valid+0x6c>
  }
  return 1;
 801353a:	2301      	movs	r3, #1
}
 801353c:	4618      	mov	r0, r3
 801353e:	3718      	adds	r7, #24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	200270d0 	.word	0x200270d0

08013548 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b088      	sub	sp, #32
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2b00      	cmp	r3, #0
 8013554:	f000 80a2 	beq.w	801369c <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f003 0303 	and.w	r3, r3, #3
 801355e:	2b00      	cmp	r3, #0
 8013560:	d015      	beq.n	801358e <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013562:	4b50      	ldr	r3, [pc, #320]	@ (80136a4 <mem_free+0x15c>)
 8013564:	f240 2273 	movw	r2, #627	@ 0x273
 8013568:	494f      	ldr	r1, [pc, #316]	@ (80136a8 <mem_free+0x160>)
 801356a:	4850      	ldr	r0, [pc, #320]	@ (80136ac <mem_free+0x164>)
 801356c:	f00c fd6a 	bl	8020044 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013570:	f00b fb30 	bl	801ebd4 <sys_arch_protect>
 8013574:	60f8      	str	r0, [r7, #12]
 8013576:	4b4e      	ldr	r3, [pc, #312]	@ (80136b0 <mem_free+0x168>)
 8013578:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801357c:	3301      	adds	r3, #1
 801357e:	b29a      	uxth	r2, r3
 8013580:	4b4b      	ldr	r3, [pc, #300]	@ (80136b0 <mem_free+0x168>)
 8013582:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013586:	68f8      	ldr	r0, [r7, #12]
 8013588:	f00b fb32 	bl	801ebf0 <sys_arch_unprotect>
    return;
 801358c:	e087      	b.n	801369e <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	3b08      	subs	r3, #8
 8013592:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013594:	4b47      	ldr	r3, [pc, #284]	@ (80136b4 <mem_free+0x16c>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	69fa      	ldr	r2, [r7, #28]
 801359a:	429a      	cmp	r2, r3
 801359c:	d306      	bcc.n	80135ac <mem_free+0x64>
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f103 020c 	add.w	r2, r3, #12
 80135a4:	4b44      	ldr	r3, [pc, #272]	@ (80136b8 <mem_free+0x170>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d915      	bls.n	80135d8 <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80135ac:	4b3d      	ldr	r3, [pc, #244]	@ (80136a4 <mem_free+0x15c>)
 80135ae:	f240 227f 	movw	r2, #639	@ 0x27f
 80135b2:	4942      	ldr	r1, [pc, #264]	@ (80136bc <mem_free+0x174>)
 80135b4:	483d      	ldr	r0, [pc, #244]	@ (80136ac <mem_free+0x164>)
 80135b6:	f00c fd45 	bl	8020044 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135ba:	f00b fb0b 	bl	801ebd4 <sys_arch_protect>
 80135be:	6138      	str	r0, [r7, #16]
 80135c0:	4b3b      	ldr	r3, [pc, #236]	@ (80136b0 <mem_free+0x168>)
 80135c2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80135c6:	3301      	adds	r3, #1
 80135c8:	b29a      	uxth	r2, r3
 80135ca:	4b39      	ldr	r3, [pc, #228]	@ (80136b0 <mem_free+0x168>)
 80135cc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80135d0:	6938      	ldr	r0, [r7, #16]
 80135d2:	f00b fb0d 	bl	801ebf0 <sys_arch_unprotect>
    return;
 80135d6:	e062      	b.n	801369e <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80135d8:	4839      	ldr	r0, [pc, #228]	@ (80136c0 <mem_free+0x178>)
 80135da:	f00b fabf 	bl	801eb5c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	791b      	ldrb	r3, [r3, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d118      	bne.n	8013618 <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80135e6:	4b2f      	ldr	r3, [pc, #188]	@ (80136a4 <mem_free+0x15c>)
 80135e8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80135ec:	4935      	ldr	r1, [pc, #212]	@ (80136c4 <mem_free+0x17c>)
 80135ee:	482f      	ldr	r0, [pc, #188]	@ (80136ac <mem_free+0x164>)
 80135f0:	f00c fd28 	bl	8020044 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80135f4:	4832      	ldr	r0, [pc, #200]	@ (80136c0 <mem_free+0x178>)
 80135f6:	f00b fac0 	bl	801eb7a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135fa:	f00b faeb 	bl	801ebd4 <sys_arch_protect>
 80135fe:	6178      	str	r0, [r7, #20]
 8013600:	4b2b      	ldr	r3, [pc, #172]	@ (80136b0 <mem_free+0x168>)
 8013602:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013606:	3301      	adds	r3, #1
 8013608:	b29a      	uxth	r2, r3
 801360a:	4b29      	ldr	r3, [pc, #164]	@ (80136b0 <mem_free+0x168>)
 801360c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013610:	6978      	ldr	r0, [r7, #20]
 8013612:	f00b faed 	bl	801ebf0 <sys_arch_unprotect>
    return;
 8013616:	e042      	b.n	801369e <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 8013618:	69f8      	ldr	r0, [r7, #28]
 801361a:	f7ff ff59 	bl	80134d0 <mem_link_valid>
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d118      	bne.n	8013656 <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013624:	4b1f      	ldr	r3, [pc, #124]	@ (80136a4 <mem_free+0x15c>)
 8013626:	f240 2295 	movw	r2, #661	@ 0x295
 801362a:	4927      	ldr	r1, [pc, #156]	@ (80136c8 <mem_free+0x180>)
 801362c:	481f      	ldr	r0, [pc, #124]	@ (80136ac <mem_free+0x164>)
 801362e:	f00c fd09 	bl	8020044 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013632:	4823      	ldr	r0, [pc, #140]	@ (80136c0 <mem_free+0x178>)
 8013634:	f00b faa1 	bl	801eb7a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013638:	f00b facc 	bl	801ebd4 <sys_arch_protect>
 801363c:	61b8      	str	r0, [r7, #24]
 801363e:	4b1c      	ldr	r3, [pc, #112]	@ (80136b0 <mem_free+0x168>)
 8013640:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013644:	3301      	adds	r3, #1
 8013646:	b29a      	uxth	r2, r3
 8013648:	4b19      	ldr	r3, [pc, #100]	@ (80136b0 <mem_free+0x168>)
 801364a:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 801364e:	69b8      	ldr	r0, [r7, #24]
 8013650:	f00b face 	bl	801ebf0 <sys_arch_unprotect>
    return;
 8013654:	e023      	b.n	801369e <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	2200      	movs	r2, #0
 801365a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801365c:	4b1b      	ldr	r3, [pc, #108]	@ (80136cc <mem_free+0x184>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	69fa      	ldr	r2, [r7, #28]
 8013662:	429a      	cmp	r2, r3
 8013664:	d202      	bcs.n	801366c <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013666:	4a19      	ldr	r2, [pc, #100]	@ (80136cc <mem_free+0x184>)
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801366c:	4b10      	ldr	r3, [pc, #64]	@ (80136b0 <mem_free+0x168>)
 801366e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013672:	4b10      	ldr	r3, [pc, #64]	@ (80136b4 <mem_free+0x16c>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	69f9      	ldr	r1, [r7, #28]
 8013678:	1acb      	subs	r3, r1, r3
 801367a:	b299      	uxth	r1, r3
 801367c:	69fb      	ldr	r3, [r7, #28]
 801367e:	881b      	ldrh	r3, [r3, #0]
 8013680:	1acb      	subs	r3, r1, r3
 8013682:	b29b      	uxth	r3, r3
 8013684:	4413      	add	r3, r2
 8013686:	b29a      	uxth	r2, r3
 8013688:	4b09      	ldr	r3, [pc, #36]	@ (80136b0 <mem_free+0x168>)
 801368a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801368e:	69f8      	ldr	r0, [r7, #28]
 8013690:	f7ff fe28 	bl	80132e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013694:	480a      	ldr	r0, [pc, #40]	@ (80136c0 <mem_free+0x178>)
 8013696:	f00b fa70 	bl	801eb7a <sys_mutex_unlock>
 801369a:	e000      	b.n	801369e <mem_free+0x156>
    return;
 801369c:	bf00      	nop
}
 801369e:	3720      	adds	r7, #32
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}
 80136a4:	08021c88 	.word	0x08021c88
 80136a8:	08021d78 	.word	0x08021d78
 80136ac:	08021cd0 	.word	0x08021cd0
 80136b0:	2002d2b0 	.word	0x2002d2b0
 80136b4:	200270cc 	.word	0x200270cc
 80136b8:	200270d0 	.word	0x200270d0
 80136bc:	08021d9c 	.word	0x08021d9c
 80136c0:	200270d4 	.word	0x200270d4
 80136c4:	08021db8 	.word	0x08021db8
 80136c8:	08021de0 	.word	0x08021de0
 80136cc:	200270d8 	.word	0x200270d8

080136d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b088      	sub	sp, #32
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	460b      	mov	r3, r1
 80136da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80136dc:	887b      	ldrh	r3, [r7, #2]
 80136de:	3303      	adds	r3, #3
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	f023 0303 	bic.w	r3, r3, #3
 80136e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80136e8:	8bfb      	ldrh	r3, [r7, #30]
 80136ea:	2b0b      	cmp	r3, #11
 80136ec:	d801      	bhi.n	80136f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80136ee:	230c      	movs	r3, #12
 80136f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80136f2:	8bfb      	ldrh	r3, [r7, #30]
 80136f4:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80136f8:	d803      	bhi.n	8013702 <mem_trim+0x32>
 80136fa:	8bfa      	ldrh	r2, [r7, #30]
 80136fc:	887b      	ldrh	r3, [r7, #2]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d201      	bcs.n	8013706 <mem_trim+0x36>
    return NULL;
 8013702:	2300      	movs	r3, #0
 8013704:	e0f8      	b.n	80138f8 <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013706:	4b7e      	ldr	r3, [pc, #504]	@ (8013900 <mem_trim+0x230>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	429a      	cmp	r2, r3
 801370e:	d304      	bcc.n	801371a <mem_trim+0x4a>
 8013710:	4b7c      	ldr	r3, [pc, #496]	@ (8013904 <mem_trim+0x234>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	429a      	cmp	r2, r3
 8013718:	d306      	bcc.n	8013728 <mem_trim+0x58>
 801371a:	4b7b      	ldr	r3, [pc, #492]	@ (8013908 <mem_trim+0x238>)
 801371c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013720:	497a      	ldr	r1, [pc, #488]	@ (801390c <mem_trim+0x23c>)
 8013722:	487b      	ldr	r0, [pc, #492]	@ (8013910 <mem_trim+0x240>)
 8013724:	f00c fc8e 	bl	8020044 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013728:	4b75      	ldr	r3, [pc, #468]	@ (8013900 <mem_trim+0x230>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	687a      	ldr	r2, [r7, #4]
 801372e:	429a      	cmp	r2, r3
 8013730:	d304      	bcc.n	801373c <mem_trim+0x6c>
 8013732:	4b74      	ldr	r3, [pc, #464]	@ (8013904 <mem_trim+0x234>)
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	429a      	cmp	r2, r3
 801373a:	d30f      	bcc.n	801375c <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801373c:	f00b fa4a 	bl	801ebd4 <sys_arch_protect>
 8013740:	60b8      	str	r0, [r7, #8]
 8013742:	4b74      	ldr	r3, [pc, #464]	@ (8013914 <mem_trim+0x244>)
 8013744:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013748:	3301      	adds	r3, #1
 801374a:	b29a      	uxth	r2, r3
 801374c:	4b71      	ldr	r3, [pc, #452]	@ (8013914 <mem_trim+0x244>)
 801374e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013752:	68b8      	ldr	r0, [r7, #8]
 8013754:	f00b fa4c 	bl	801ebf0 <sys_arch_unprotect>
    return rmem;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	e0cd      	b.n	80138f8 <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	3b08      	subs	r3, #8
 8013760:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013762:	69b8      	ldr	r0, [r7, #24]
 8013764:	f7ff fdac 	bl	80132c0 <mem_to_ptr>
 8013768:	4603      	mov	r3, r0
 801376a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	881a      	ldrh	r2, [r3, #0]
 8013770:	8afb      	ldrh	r3, [r7, #22]
 8013772:	1ad3      	subs	r3, r2, r3
 8013774:	b29b      	uxth	r3, r3
 8013776:	3b08      	subs	r3, #8
 8013778:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801377a:	8bfa      	ldrh	r2, [r7, #30]
 801377c:	8abb      	ldrh	r3, [r7, #20]
 801377e:	429a      	cmp	r2, r3
 8013780:	d906      	bls.n	8013790 <mem_trim+0xc0>
 8013782:	4b61      	ldr	r3, [pc, #388]	@ (8013908 <mem_trim+0x238>)
 8013784:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013788:	4963      	ldr	r1, [pc, #396]	@ (8013918 <mem_trim+0x248>)
 801378a:	4861      	ldr	r0, [pc, #388]	@ (8013910 <mem_trim+0x240>)
 801378c:	f00c fc5a 	bl	8020044 <iprintf>
  if (newsize > size) {
 8013790:	8bfa      	ldrh	r2, [r7, #30]
 8013792:	8abb      	ldrh	r3, [r7, #20]
 8013794:	429a      	cmp	r2, r3
 8013796:	d901      	bls.n	801379c <mem_trim+0xcc>
    /* not supported */
    return NULL;
 8013798:	2300      	movs	r3, #0
 801379a:	e0ad      	b.n	80138f8 <mem_trim+0x228>
  }
  if (newsize == size) {
 801379c:	8bfa      	ldrh	r2, [r7, #30]
 801379e:	8abb      	ldrh	r3, [r7, #20]
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d101      	bne.n	80137a8 <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	e0a7      	b.n	80138f8 <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80137a8:	485c      	ldr	r0, [pc, #368]	@ (801391c <mem_trim+0x24c>)
 80137aa:	f00b f9d7 	bl	801eb5c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	881b      	ldrh	r3, [r3, #0]
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff fd72 	bl	801329c <ptr_to_mem>
 80137b8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	791b      	ldrb	r3, [r3, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d14b      	bne.n	801385a <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	881b      	ldrh	r3, [r3, #0]
 80137c6:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80137ca:	d106      	bne.n	80137da <mem_trim+0x10a>
 80137cc:	4b4e      	ldr	r3, [pc, #312]	@ (8013908 <mem_trim+0x238>)
 80137ce:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80137d2:	4953      	ldr	r1, [pc, #332]	@ (8013920 <mem_trim+0x250>)
 80137d4:	484e      	ldr	r0, [pc, #312]	@ (8013910 <mem_trim+0x240>)
 80137d6:	f00c fc35 	bl	8020044 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	881b      	ldrh	r3, [r3, #0]
 80137de:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80137e0:	8afa      	ldrh	r2, [r7, #22]
 80137e2:	8bfb      	ldrh	r3, [r7, #30]
 80137e4:	4413      	add	r3, r2
 80137e6:	b29b      	uxth	r3, r3
 80137e8:	3308      	adds	r3, #8
 80137ea:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80137ec:	4b4d      	ldr	r3, [pc, #308]	@ (8013924 <mem_trim+0x254>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	693a      	ldr	r2, [r7, #16]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d106      	bne.n	8013804 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 80137f6:	89fb      	ldrh	r3, [r7, #14]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7ff fd4f 	bl	801329c <ptr_to_mem>
 80137fe:	4603      	mov	r3, r0
 8013800:	4a48      	ldr	r2, [pc, #288]	@ (8013924 <mem_trim+0x254>)
 8013802:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013804:	89fb      	ldrh	r3, [r7, #14]
 8013806:	4618      	mov	r0, r3
 8013808:	f7ff fd48 	bl	801329c <ptr_to_mem>
 801380c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	2200      	movs	r2, #0
 8013812:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	89ba      	ldrh	r2, [r7, #12]
 8013818:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	8afa      	ldrh	r2, [r7, #22]
 801381e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	89fa      	ldrh	r2, [r7, #14]
 8013824:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	881b      	ldrh	r3, [r3, #0]
 801382a:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801382e:	d007      	beq.n	8013840 <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	4618      	mov	r0, r3
 8013836:	f7ff fd31 	bl	801329c <ptr_to_mem>
 801383a:	4602      	mov	r2, r0
 801383c:	89fb      	ldrh	r3, [r7, #14]
 801383e:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013840:	4b34      	ldr	r3, [pc, #208]	@ (8013914 <mem_trim+0x244>)
 8013842:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013846:	8bf9      	ldrh	r1, [r7, #30]
 8013848:	8abb      	ldrh	r3, [r7, #20]
 801384a:	1acb      	subs	r3, r1, r3
 801384c:	b29b      	uxth	r3, r3
 801384e:	4413      	add	r3, r2
 8013850:	b29a      	uxth	r2, r3
 8013852:	4b30      	ldr	r3, [pc, #192]	@ (8013914 <mem_trim+0x244>)
 8013854:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013858:	e04a      	b.n	80138f0 <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801385a:	8bfb      	ldrh	r3, [r7, #30]
 801385c:	f103 0214 	add.w	r2, r3, #20
 8013860:	8abb      	ldrh	r3, [r7, #20]
 8013862:	429a      	cmp	r2, r3
 8013864:	d844      	bhi.n	80138f0 <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013866:	8afa      	ldrh	r2, [r7, #22]
 8013868:	8bfb      	ldrh	r3, [r7, #30]
 801386a:	4413      	add	r3, r2
 801386c:	b29b      	uxth	r3, r3
 801386e:	3308      	adds	r3, #8
 8013870:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	881b      	ldrh	r3, [r3, #0]
 8013876:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801387a:	d106      	bne.n	801388a <mem_trim+0x1ba>
 801387c:	4b22      	ldr	r3, [pc, #136]	@ (8013908 <mem_trim+0x238>)
 801387e:	f240 3216 	movw	r2, #790	@ 0x316
 8013882:	4927      	ldr	r1, [pc, #156]	@ (8013920 <mem_trim+0x250>)
 8013884:	4822      	ldr	r0, [pc, #136]	@ (8013910 <mem_trim+0x240>)
 8013886:	f00c fbdd 	bl	8020044 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801388a:	89fb      	ldrh	r3, [r7, #14]
 801388c:	4618      	mov	r0, r3
 801388e:	f7ff fd05 	bl	801329c <ptr_to_mem>
 8013892:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013894:	4b23      	ldr	r3, [pc, #140]	@ (8013924 <mem_trim+0x254>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	693a      	ldr	r2, [r7, #16]
 801389a:	429a      	cmp	r2, r3
 801389c:	d202      	bcs.n	80138a4 <mem_trim+0x1d4>
      lfree = mem2;
 801389e:	4a21      	ldr	r2, [pc, #132]	@ (8013924 <mem_trim+0x254>)
 80138a0:	693b      	ldr	r3, [r7, #16]
 80138a2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	2200      	movs	r2, #0
 80138a8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	881a      	ldrh	r2, [r3, #0]
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	8afa      	ldrh	r2, [r7, #22]
 80138b6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	89fa      	ldrh	r2, [r7, #14]
 80138bc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80138c6:	d007      	beq.n	80138d8 <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7ff fce5 	bl	801329c <ptr_to_mem>
 80138d2:	4602      	mov	r2, r0
 80138d4:	89fb      	ldrh	r3, [r7, #14]
 80138d6:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80138d8:	4b0e      	ldr	r3, [pc, #56]	@ (8013914 <mem_trim+0x244>)
 80138da:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80138de:	8bf9      	ldrh	r1, [r7, #30]
 80138e0:	8abb      	ldrh	r3, [r7, #20]
 80138e2:	1acb      	subs	r3, r1, r3
 80138e4:	b29b      	uxth	r3, r3
 80138e6:	4413      	add	r3, r2
 80138e8:	b29a      	uxth	r2, r3
 80138ea:	4b0a      	ldr	r3, [pc, #40]	@ (8013914 <mem_trim+0x244>)
 80138ec:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80138f0:	480a      	ldr	r0, [pc, #40]	@ (801391c <mem_trim+0x24c>)
 80138f2:	f00b f942 	bl	801eb7a <sys_mutex_unlock>
  return rmem;
 80138f6:	687b      	ldr	r3, [r7, #4]
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3720      	adds	r7, #32
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	200270cc 	.word	0x200270cc
 8013904:	200270d0 	.word	0x200270d0
 8013908:	08021c88 	.word	0x08021c88
 801390c:	08021e14 	.word	0x08021e14
 8013910:	08021cd0 	.word	0x08021cd0
 8013914:	2002d2b0 	.word	0x2002d2b0
 8013918:	08021e2c 	.word	0x08021e2c
 801391c:	200270d4 	.word	0x200270d4
 8013920:	08021e4c 	.word	0x08021e4c
 8013924:	200270d8 	.word	0x200270d8

08013928 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013928:	b590      	push	{r4, r7, lr}
 801392a:	b089      	sub	sp, #36	@ 0x24
 801392c:	af00      	add	r7, sp, #0
 801392e:	4603      	mov	r3, r0
 8013930:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013932:	88fb      	ldrh	r3, [r7, #6]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d101      	bne.n	801393c <mem_malloc+0x14>
    return NULL;
 8013938:	2300      	movs	r3, #0
 801393a:	e121      	b.n	8013b80 <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801393c:	88fb      	ldrh	r3, [r7, #6]
 801393e:	3303      	adds	r3, #3
 8013940:	b29b      	uxth	r3, r3
 8013942:	f023 0303 	bic.w	r3, r3, #3
 8013946:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013948:	8bbb      	ldrh	r3, [r7, #28]
 801394a:	2b0b      	cmp	r3, #11
 801394c:	d801      	bhi.n	8013952 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801394e:	230c      	movs	r3, #12
 8013950:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013952:	8bbb      	ldrh	r3, [r7, #28]
 8013954:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013958:	d803      	bhi.n	8013962 <mem_malloc+0x3a>
 801395a:	8bba      	ldrh	r2, [r7, #28]
 801395c:	88fb      	ldrh	r3, [r7, #6]
 801395e:	429a      	cmp	r2, r3
 8013960:	d201      	bcs.n	8013966 <mem_malloc+0x3e>
    return NULL;
 8013962:	2300      	movs	r3, #0
 8013964:	e10c      	b.n	8013b80 <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013966:	4888      	ldr	r0, [pc, #544]	@ (8013b88 <mem_malloc+0x260>)
 8013968:	f00b f8f8 	bl	801eb5c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801396c:	4b87      	ldr	r3, [pc, #540]	@ (8013b8c <mem_malloc+0x264>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	4618      	mov	r0, r3
 8013972:	f7ff fca5 	bl	80132c0 <mem_to_ptr>
 8013976:	4603      	mov	r3, r0
 8013978:	83fb      	strh	r3, [r7, #30]
 801397a:	e0ee      	b.n	8013b5a <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801397c:	8bfb      	ldrh	r3, [r7, #30]
 801397e:	4618      	mov	r0, r3
 8013980:	f7ff fc8c 	bl	801329c <ptr_to_mem>
 8013984:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	791b      	ldrb	r3, [r3, #4]
 801398a:	2b00      	cmp	r3, #0
 801398c:	f040 80de 	bne.w	8013b4c <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	881b      	ldrh	r3, [r3, #0]
 8013994:	461a      	mov	r2, r3
 8013996:	8bfb      	ldrh	r3, [r7, #30]
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	f1a3 0208 	sub.w	r2, r3, #8
 801399e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80139a0:	429a      	cmp	r2, r3
 80139a2:	f0c0 80d3 	bcc.w	8013b4c <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	881b      	ldrh	r3, [r3, #0]
 80139aa:	461a      	mov	r2, r3
 80139ac:	8bfb      	ldrh	r3, [r7, #30]
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	f1a3 0208 	sub.w	r2, r3, #8
 80139b4:	8bbb      	ldrh	r3, [r7, #28]
 80139b6:	3314      	adds	r3, #20
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d34c      	bcc.n	8013a56 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80139bc:	8bfa      	ldrh	r2, [r7, #30]
 80139be:	8bbb      	ldrh	r3, [r7, #28]
 80139c0:	4413      	add	r3, r2
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	3308      	adds	r3, #8
 80139c6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80139c8:	8a7b      	ldrh	r3, [r7, #18]
 80139ca:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80139ce:	d106      	bne.n	80139de <mem_malloc+0xb6>
 80139d0:	4b6f      	ldr	r3, [pc, #444]	@ (8013b90 <mem_malloc+0x268>)
 80139d2:	f240 3287 	movw	r2, #903	@ 0x387
 80139d6:	496f      	ldr	r1, [pc, #444]	@ (8013b94 <mem_malloc+0x26c>)
 80139d8:	486f      	ldr	r0, [pc, #444]	@ (8013b98 <mem_malloc+0x270>)
 80139da:	f00c fb33 	bl	8020044 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80139de:	8a7b      	ldrh	r3, [r7, #18]
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7ff fc5b 	bl	801329c <ptr_to_mem>
 80139e6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2200      	movs	r2, #0
 80139ec:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	881a      	ldrh	r2, [r3, #0]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	8bfa      	ldrh	r2, [r7, #30]
 80139fa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	8a7a      	ldrh	r2, [r7, #18]
 8013a00:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	2201      	movs	r2, #1
 8013a06:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	881b      	ldrh	r3, [r3, #0]
 8013a0c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013a10:	d007      	beq.n	8013a22 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	881b      	ldrh	r3, [r3, #0]
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7ff fc40 	bl	801329c <ptr_to_mem>
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	8a7b      	ldrh	r3, [r7, #18]
 8013a20:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8013a22:	4b5e      	ldr	r3, [pc, #376]	@ (8013b9c <mem_malloc+0x274>)
 8013a24:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013a28:	8bbb      	ldrh	r3, [r7, #28]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	3308      	adds	r3, #8
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	4b5a      	ldr	r3, [pc, #360]	@ (8013b9c <mem_malloc+0x274>)
 8013a34:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013a38:	4b58      	ldr	r3, [pc, #352]	@ (8013b9c <mem_malloc+0x274>)
 8013a3a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	@ 0xae
 8013a3e:	4b57      	ldr	r3, [pc, #348]	@ (8013b9c <mem_malloc+0x274>)
 8013a40:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d227      	bcs.n	8013a98 <mem_malloc+0x170>
 8013a48:	4b54      	ldr	r3, [pc, #336]	@ (8013b9c <mem_malloc+0x274>)
 8013a4a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013a4e:	4b53      	ldr	r3, [pc, #332]	@ (8013b9c <mem_malloc+0x274>)
 8013a50:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 8013a54:	e020      	b.n	8013a98 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	2201      	movs	r2, #1
 8013a5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8013a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8013b9c <mem_malloc+0x274>)
 8013a5e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	881b      	ldrh	r3, [r3, #0]
 8013a66:	4413      	add	r3, r2
 8013a68:	b29c      	uxth	r4, r3
 8013a6a:	6978      	ldr	r0, [r7, #20]
 8013a6c:	f7ff fc28 	bl	80132c0 <mem_to_ptr>
 8013a70:	4603      	mov	r3, r0
 8013a72:	1ae3      	subs	r3, r4, r3
 8013a74:	b29a      	uxth	r2, r3
 8013a76:	4b49      	ldr	r3, [pc, #292]	@ (8013b9c <mem_malloc+0x274>)
 8013a78:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013a7c:	4b47      	ldr	r3, [pc, #284]	@ (8013b9c <mem_malloc+0x274>)
 8013a7e:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	@ 0xae
 8013a82:	4b46      	ldr	r3, [pc, #280]	@ (8013b9c <mem_malloc+0x274>)
 8013a84:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d205      	bcs.n	8013a98 <mem_malloc+0x170>
 8013a8c:	4b43      	ldr	r3, [pc, #268]	@ (8013b9c <mem_malloc+0x274>)
 8013a8e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013a92:	4b42      	ldr	r3, [pc, #264]	@ (8013b9c <mem_malloc+0x274>)
 8013a94:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013a98:	4b3c      	ldr	r3, [pc, #240]	@ (8013b8c <mem_malloc+0x264>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	697a      	ldr	r2, [r7, #20]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d127      	bne.n	8013af2 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 8013aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8013b8c <mem_malloc+0x264>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013aa8:	e005      	b.n	8013ab6 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013aaa:	69bb      	ldr	r3, [r7, #24]
 8013aac:	881b      	ldrh	r3, [r3, #0]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7ff fbf4 	bl	801329c <ptr_to_mem>
 8013ab4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013ab6:	69bb      	ldr	r3, [r7, #24]
 8013ab8:	791b      	ldrb	r3, [r3, #4]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d004      	beq.n	8013ac8 <mem_malloc+0x1a0>
 8013abe:	4b38      	ldr	r3, [pc, #224]	@ (8013ba0 <mem_malloc+0x278>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	69ba      	ldr	r2, [r7, #24]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d1f0      	bne.n	8013aaa <mem_malloc+0x182>
          }
          lfree = cur;
 8013ac8:	4a30      	ldr	r2, [pc, #192]	@ (8013b8c <mem_malloc+0x264>)
 8013aca:	69bb      	ldr	r3, [r7, #24]
 8013acc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013ace:	4b2f      	ldr	r3, [pc, #188]	@ (8013b8c <mem_malloc+0x264>)
 8013ad0:	681a      	ldr	r2, [r3, #0]
 8013ad2:	4b33      	ldr	r3, [pc, #204]	@ (8013ba0 <mem_malloc+0x278>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d00b      	beq.n	8013af2 <mem_malloc+0x1ca>
 8013ada:	4b2c      	ldr	r3, [pc, #176]	@ (8013b8c <mem_malloc+0x264>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	791b      	ldrb	r3, [r3, #4]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d006      	beq.n	8013af2 <mem_malloc+0x1ca>
 8013ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8013b90 <mem_malloc+0x268>)
 8013ae6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013aea:	492e      	ldr	r1, [pc, #184]	@ (8013ba4 <mem_malloc+0x27c>)
 8013aec:	482a      	ldr	r0, [pc, #168]	@ (8013b98 <mem_malloc+0x270>)
 8013aee:	f00c faa9 	bl	8020044 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013af2:	4825      	ldr	r0, [pc, #148]	@ (8013b88 <mem_malloc+0x260>)
 8013af4:	f00b f841 	bl	801eb7a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013af8:	8bba      	ldrh	r2, [r7, #28]
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	4413      	add	r3, r2
 8013afe:	3308      	adds	r3, #8
 8013b00:	4a27      	ldr	r2, [pc, #156]	@ (8013ba0 <mem_malloc+0x278>)
 8013b02:	6812      	ldr	r2, [r2, #0]
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d906      	bls.n	8013b16 <mem_malloc+0x1ee>
 8013b08:	4b21      	ldr	r3, [pc, #132]	@ (8013b90 <mem_malloc+0x268>)
 8013b0a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013b0e:	4926      	ldr	r1, [pc, #152]	@ (8013ba8 <mem_malloc+0x280>)
 8013b10:	4821      	ldr	r0, [pc, #132]	@ (8013b98 <mem_malloc+0x270>)
 8013b12:	f00c fa97 	bl	8020044 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	f003 0303 	and.w	r3, r3, #3
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d006      	beq.n	8013b2e <mem_malloc+0x206>
 8013b20:	4b1b      	ldr	r3, [pc, #108]	@ (8013b90 <mem_malloc+0x268>)
 8013b22:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013b26:	4921      	ldr	r1, [pc, #132]	@ (8013bac <mem_malloc+0x284>)
 8013b28:	481b      	ldr	r0, [pc, #108]	@ (8013b98 <mem_malloc+0x270>)
 8013b2a:	f00c fa8b 	bl	8020044 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	f003 0303 	and.w	r3, r3, #3
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d006      	beq.n	8013b46 <mem_malloc+0x21e>
 8013b38:	4b15      	ldr	r3, [pc, #84]	@ (8013b90 <mem_malloc+0x268>)
 8013b3a:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013b3e:	491c      	ldr	r1, [pc, #112]	@ (8013bb0 <mem_malloc+0x288>)
 8013b40:	4815      	ldr	r0, [pc, #84]	@ (8013b98 <mem_malloc+0x270>)
 8013b42:	f00c fa7f 	bl	8020044 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	3308      	adds	r3, #8
 8013b4a:	e019      	b.n	8013b80 <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 8013b4c:	8bfb      	ldrh	r3, [r7, #30]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7ff fba4 	bl	801329c <ptr_to_mem>
 8013b54:	4603      	mov	r3, r0
 8013b56:	881b      	ldrh	r3, [r3, #0]
 8013b58:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013b5a:	8bfa      	ldrh	r2, [r7, #30]
 8013b5c:	8bbb      	ldrh	r3, [r7, #28]
 8013b5e:	f5c3 43c8 	rsb	r3, r3, #25600	@ 0x6400
 8013b62:	429a      	cmp	r2, r3
 8013b64:	f4ff af0a 	bcc.w	801397c <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8013b68:	4b0c      	ldr	r3, [pc, #48]	@ (8013b9c <mem_malloc+0x274>)
 8013b6a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8013b6e:	3301      	adds	r3, #1
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	4b0a      	ldr	r3, [pc, #40]	@ (8013b9c <mem_malloc+0x274>)
 8013b74:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013b78:	4803      	ldr	r0, [pc, #12]	@ (8013b88 <mem_malloc+0x260>)
 8013b7a:	f00a fffe 	bl	801eb7a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013b7e:	2300      	movs	r3, #0
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3724      	adds	r7, #36	@ 0x24
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd90      	pop	{r4, r7, pc}
 8013b88:	200270d4 	.word	0x200270d4
 8013b8c:	200270d8 	.word	0x200270d8
 8013b90:	08021c88 	.word	0x08021c88
 8013b94:	08021e4c 	.word	0x08021e4c
 8013b98:	08021cd0 	.word	0x08021cd0
 8013b9c:	2002d2b0 	.word	0x2002d2b0
 8013ba0:	200270d0 	.word	0x200270d0
 8013ba4:	08021e60 	.word	0x08021e60
 8013ba8:	08021e7c 	.word	0x08021e7c
 8013bac:	08021eac 	.word	0x08021eac
 8013bb0:	08021edc 	.word	0x08021edc

08013bb4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b085      	sub	sp, #20
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	689b      	ldr	r3, [r3, #8]
 8013bc8:	3303      	adds	r3, #3
 8013bca:	f023 0303 	bic.w	r3, r3, #3
 8013bce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	60fb      	str	r3, [r7, #12]
 8013bd4:	e011      	b.n	8013bfa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	68db      	ldr	r3, [r3, #12]
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	68db      	ldr	r3, [r3, #12]
 8013be4:	68ba      	ldr	r2, [r7, #8]
 8013be6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	889b      	ldrh	r3, [r3, #4]
 8013bec:	461a      	mov	r2, r3
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	4413      	add	r3, r2
 8013bf2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	60fb      	str	r3, [r7, #12]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	88db      	ldrh	r3, [r3, #6]
 8013bfe:	461a      	mov	r2, r3
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	4293      	cmp	r3, r2
 8013c04:	dbe7      	blt.n	8013bd6 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	88d2      	ldrh	r2, [r2, #6]
 8013c0e:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013c10:	bf00      	nop
 8013c12:	3714      	adds	r7, #20
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013c22:	2300      	movs	r3, #0
 8013c24:	80fb      	strh	r3, [r7, #6]
 8013c26:	e014      	b.n	8013c52 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8013c28:	88fb      	ldrh	r3, [r7, #6]
 8013c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8013c64 <memp_init+0x48>)
 8013c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7ff ffbf 	bl	8013bb4 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8013c36:	88fb      	ldrh	r3, [r7, #6]
 8013c38:	4a0a      	ldr	r2, [pc, #40]	@ (8013c64 <memp_init+0x48>)
 8013c3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013c3e:	88fb      	ldrh	r3, [r7, #6]
 8013c40:	6812      	ldr	r2, [r2, #0]
 8013c42:	4909      	ldr	r1, [pc, #36]	@ (8013c68 <memp_init+0x4c>)
 8013c44:	332c      	adds	r3, #44	@ 0x2c
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	440b      	add	r3, r1
 8013c4a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013c4c:	88fb      	ldrh	r3, [r7, #6]
 8013c4e:	3301      	adds	r3, #1
 8013c50:	80fb      	strh	r3, [r7, #6]
 8013c52:	88fb      	ldrh	r3, [r7, #6]
 8013c54:	2b0c      	cmp	r3, #12
 8013c56:	d9e7      	bls.n	8013c28 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013c58:	bf00      	nop
 8013c5a:	bf00      	nop
 8013c5c:	3708      	adds	r7, #8
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	08024d44 	.word	0x08024d44
 8013c68:	2002d2b0 	.word	0x2002d2b0

08013c6c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b084      	sub	sp, #16
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013c74:	f00a ffae 	bl	801ebd4 <sys_arch_protect>
 8013c78:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	68db      	ldr	r3, [r3, #12]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d029      	beq.n	8013cdc <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	68ba      	ldr	r2, [r7, #8]
 8013c8e:	6812      	ldr	r2, [r2, #0]
 8013c90:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	f003 0303 	and.w	r3, r3, #3
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d006      	beq.n	8013caa <do_memp_malloc_pool+0x3e>
 8013c9c:	4b16      	ldr	r3, [pc, #88]	@ (8013cf8 <do_memp_malloc_pool+0x8c>)
 8013c9e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013ca2:	4916      	ldr	r1, [pc, #88]	@ (8013cfc <do_memp_malloc_pool+0x90>)
 8013ca4:	4816      	ldr	r0, [pc, #88]	@ (8013d00 <do_memp_malloc_pool+0x94>)
 8013ca6:	f00c f9cd 	bl	8020044 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	889a      	ldrh	r2, [r3, #4]
 8013cb0:	3201      	adds	r2, #1
 8013cb2:	b292      	uxth	r2, r2
 8013cb4:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	889a      	ldrh	r2, [r3, #4]
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	88db      	ldrh	r3, [r3, #6]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d905      	bls.n	8013cd2 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	8892      	ldrh	r2, [r2, #4]
 8013cd0:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013cd2:	68f8      	ldr	r0, [r7, #12]
 8013cd4:	f00a ff8c 	bl	801ebf0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	e009      	b.n	8013cf0 <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	881a      	ldrh	r2, [r3, #0]
 8013ce2:	3201      	adds	r2, #1
 8013ce4:	b292      	uxth	r2, r2
 8013ce6:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013ce8:	68f8      	ldr	r0, [r7, #12]
 8013cea:	f00a ff81 	bl	801ebf0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013cee:	2300      	movs	r3, #0
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3710      	adds	r7, #16
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}
 8013cf8:	08021f00 	.word	0x08021f00
 8013cfc:	08021f30 	.word	0x08021f30
 8013d00:	08021f54 	.word	0x08021f54

08013d04 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d106      	bne.n	8013d20 <memp_malloc_pool+0x1c>
 8013d12:	4b0a      	ldr	r3, [pc, #40]	@ (8013d3c <memp_malloc_pool+0x38>)
 8013d14:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013d18:	4909      	ldr	r1, [pc, #36]	@ (8013d40 <memp_malloc_pool+0x3c>)
 8013d1a:	480a      	ldr	r0, [pc, #40]	@ (8013d44 <memp_malloc_pool+0x40>)
 8013d1c:	f00c f992 	bl	8020044 <iprintf>
  if (desc == NULL) {
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d101      	bne.n	8013d2a <memp_malloc_pool+0x26>
    return NULL;
 8013d26:	2300      	movs	r3, #0
 8013d28:	e003      	b.n	8013d32 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7ff ff9e 	bl	8013c6c <do_memp_malloc_pool>
 8013d30:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3708      	adds	r7, #8
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}
 8013d3a:	bf00      	nop
 8013d3c:	08021f00 	.word	0x08021f00
 8013d40:	08021f7c 	.word	0x08021f7c
 8013d44:	08021f54 	.word	0x08021f54

08013d48 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b084      	sub	sp, #16
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	4603      	mov	r3, r0
 8013d50:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013d52:	79fb      	ldrb	r3, [r7, #7]
 8013d54:	2b0c      	cmp	r3, #12
 8013d56:	d908      	bls.n	8013d6a <memp_malloc+0x22>
 8013d58:	4b0a      	ldr	r3, [pc, #40]	@ (8013d84 <memp_malloc+0x3c>)
 8013d5a:	f240 1257 	movw	r2, #343	@ 0x157
 8013d5e:	490a      	ldr	r1, [pc, #40]	@ (8013d88 <memp_malloc+0x40>)
 8013d60:	480a      	ldr	r0, [pc, #40]	@ (8013d8c <memp_malloc+0x44>)
 8013d62:	f00c f96f 	bl	8020044 <iprintf>
 8013d66:	2300      	movs	r3, #0
 8013d68:	e008      	b.n	8013d7c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013d6a:	79fb      	ldrb	r3, [r7, #7]
 8013d6c:	4a08      	ldr	r2, [pc, #32]	@ (8013d90 <memp_malloc+0x48>)
 8013d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d72:	4618      	mov	r0, r3
 8013d74:	f7ff ff7a 	bl	8013c6c <do_memp_malloc_pool>
 8013d78:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3710      	adds	r7, #16
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	08021f00 	.word	0x08021f00
 8013d88:	08021f90 	.word	0x08021f90
 8013d8c:	08021f54 	.word	0x08021f54
 8013d90:	08024d44 	.word	0x08024d44

08013d94 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	f003 0303 	and.w	r3, r3, #3
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d006      	beq.n	8013db6 <do_memp_free_pool+0x22>
 8013da8:	4b10      	ldr	r3, [pc, #64]	@ (8013dec <do_memp_free_pool+0x58>)
 8013daa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8013dae:	4910      	ldr	r1, [pc, #64]	@ (8013df0 <do_memp_free_pool+0x5c>)
 8013db0:	4810      	ldr	r0, [pc, #64]	@ (8013df4 <do_memp_free_pool+0x60>)
 8013db2:	f00c f947 	bl	8020044 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013dba:	f00a ff0b 	bl	801ebd4 <sys_arch_protect>
 8013dbe:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	889a      	ldrh	r2, [r3, #4]
 8013dc6:	3a01      	subs	r2, #1
 8013dc8:	b292      	uxth	r2, r2
 8013dca:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	68fa      	ldr	r2, [r7, #12]
 8013ddc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013dde:	68b8      	ldr	r0, [r7, #8]
 8013de0:	f00a ff06 	bl	801ebf0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013de4:	bf00      	nop
 8013de6:	3710      	adds	r7, #16
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	08021f00 	.word	0x08021f00
 8013df0:	08021fb0 	.word	0x08021fb0
 8013df4:	08021f54 	.word	0x08021f54

08013df8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b082      	sub	sp, #8
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d106      	bne.n	8013e16 <memp_free_pool+0x1e>
 8013e08:	4b0a      	ldr	r3, [pc, #40]	@ (8013e34 <memp_free_pool+0x3c>)
 8013e0a:	f240 1295 	movw	r2, #405	@ 0x195
 8013e0e:	490a      	ldr	r1, [pc, #40]	@ (8013e38 <memp_free_pool+0x40>)
 8013e10:	480a      	ldr	r0, [pc, #40]	@ (8013e3c <memp_free_pool+0x44>)
 8013e12:	f00c f917 	bl	8020044 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d007      	beq.n	8013e2c <memp_free_pool+0x34>
 8013e1c:	683b      	ldr	r3, [r7, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d004      	beq.n	8013e2c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013e22:	6839      	ldr	r1, [r7, #0]
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f7ff ffb5 	bl	8013d94 <do_memp_free_pool>
 8013e2a:	e000      	b.n	8013e2e <memp_free_pool+0x36>
    return;
 8013e2c:	bf00      	nop
}
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	08021f00 	.word	0x08021f00
 8013e38:	08021f7c 	.word	0x08021f7c
 8013e3c:	08021f54 	.word	0x08021f54

08013e40 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	4603      	mov	r3, r0
 8013e48:	6039      	str	r1, [r7, #0]
 8013e4a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013e4c:	79fb      	ldrb	r3, [r7, #7]
 8013e4e:	2b0c      	cmp	r3, #12
 8013e50:	d907      	bls.n	8013e62 <memp_free+0x22>
 8013e52:	4b0c      	ldr	r3, [pc, #48]	@ (8013e84 <memp_free+0x44>)
 8013e54:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013e58:	490b      	ldr	r1, [pc, #44]	@ (8013e88 <memp_free+0x48>)
 8013e5a:	480c      	ldr	r0, [pc, #48]	@ (8013e8c <memp_free+0x4c>)
 8013e5c:	f00c f8f2 	bl	8020044 <iprintf>
 8013e60:	e00c      	b.n	8013e7c <memp_free+0x3c>

  if (mem == NULL) {
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d008      	beq.n	8013e7a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013e68:	79fb      	ldrb	r3, [r7, #7]
 8013e6a:	4a09      	ldr	r2, [pc, #36]	@ (8013e90 <memp_free+0x50>)
 8013e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e70:	6839      	ldr	r1, [r7, #0]
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7ff ff8e 	bl	8013d94 <do_memp_free_pool>
 8013e78:	e000      	b.n	8013e7c <memp_free+0x3c>
    return;
 8013e7a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013e7c:	3708      	adds	r7, #8
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}
 8013e82:	bf00      	nop
 8013e84:	08021f00 	.word	0x08021f00
 8013e88:	08021fd0 	.word	0x08021fd0
 8013e8c:	08021f54 	.word	0x08021f54
 8013e90:	08024d44 	.word	0x08024d44

08013e94 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013e94:	b480      	push	{r7}
 8013e96:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013e98:	bf00      	nop
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea0:	4770      	bx	lr
	...

08013ea4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b086      	sub	sp, #24
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
 8013eb0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d108      	bne.n	8013eca <netif_add+0x26>
 8013eb8:	4b57      	ldr	r3, [pc, #348]	@ (8014018 <netif_add+0x174>)
 8013eba:	f240 1227 	movw	r2, #295	@ 0x127
 8013ebe:	4957      	ldr	r1, [pc, #348]	@ (801401c <netif_add+0x178>)
 8013ec0:	4857      	ldr	r0, [pc, #348]	@ (8014020 <netif_add+0x17c>)
 8013ec2:	f00c f8bf 	bl	8020044 <iprintf>
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	e0a2      	b.n	8014010 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d108      	bne.n	8013ee2 <netif_add+0x3e>
 8013ed0:	4b51      	ldr	r3, [pc, #324]	@ (8014018 <netif_add+0x174>)
 8013ed2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013ed6:	4953      	ldr	r1, [pc, #332]	@ (8014024 <netif_add+0x180>)
 8013ed8:	4851      	ldr	r0, [pc, #324]	@ (8014020 <netif_add+0x17c>)
 8013eda:	f00c f8b3 	bl	8020044 <iprintf>
 8013ede:	2300      	movs	r3, #0
 8013ee0:	e096      	b.n	8014010 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d101      	bne.n	8013eec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8014028 <netif_add+0x184>)
 8013eea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8014028 <netif_add+0x184>)
 8013ef4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d101      	bne.n	8013f00 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013efc:	4b4a      	ldr	r3, [pc, #296]	@ (8014028 <netif_add+0x184>)
 8013efe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	2200      	movs	r2, #0
 8013f04:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	4a45      	ldr	r2, [pc, #276]	@ (801402c <netif_add+0x188>)
 8013f16:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2200      	movs	r2, #0
 8013f22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	2200      	movs	r2, #0
 8013f2a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	6a3a      	ldr	r2, [r7, #32]
 8013f30:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013f32:	4b3f      	ldr	r3, [pc, #252]	@ (8014030 <netif_add+0x18c>)
 8013f34:	781a      	ldrb	r2, [r3, #0]
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f40:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	68b9      	ldr	r1, [r7, #8]
 8013f48:	68f8      	ldr	r0, [r7, #12]
 8013f4a:	f000 f913 	bl	8014174 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	4798      	blx	r3
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d001      	beq.n	8013f5e <netif_add+0xba>
    return NULL;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	e058      	b.n	8014010 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013f64:	2bff      	cmp	r3, #255	@ 0xff
 8013f66:	d103      	bne.n	8013f70 <netif_add+0xcc>
        netif->num = 0;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013f70:	2300      	movs	r3, #0
 8013f72:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013f74:	4b2f      	ldr	r3, [pc, #188]	@ (8014034 <netif_add+0x190>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	617b      	str	r3, [r7, #20]
 8013f7a:	e02b      	b.n	8013fd4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013f7c:	697a      	ldr	r2, [r7, #20]
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d106      	bne.n	8013f92 <netif_add+0xee>
 8013f84:	4b24      	ldr	r3, [pc, #144]	@ (8014018 <netif_add+0x174>)
 8013f86:	f240 128b 	movw	r2, #395	@ 0x18b
 8013f8a:	492b      	ldr	r1, [pc, #172]	@ (8014038 <netif_add+0x194>)
 8013f8c:	4824      	ldr	r0, [pc, #144]	@ (8014020 <netif_add+0x17c>)
 8013f8e:	f00c f859 	bl	8020044 <iprintf>
        num_netifs++;
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	3301      	adds	r3, #1
 8013f96:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	2bff      	cmp	r3, #255	@ 0xff
 8013f9c:	dd06      	ble.n	8013fac <netif_add+0x108>
 8013f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8014018 <netif_add+0x174>)
 8013fa0:	f240 128d 	movw	r2, #397	@ 0x18d
 8013fa4:	4925      	ldr	r1, [pc, #148]	@ (801403c <netif_add+0x198>)
 8013fa6:	481e      	ldr	r0, [pc, #120]	@ (8014020 <netif_add+0x17c>)
 8013fa8:	f00c f84c 	bl	8020044 <iprintf>
        if (netif2->num == netif->num) {
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d108      	bne.n	8013fce <netif_add+0x12a>
          netif->num++;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013fc2:	3301      	adds	r3, #1
 8013fc4:	b2da      	uxtb	r2, r3
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013fcc:	e005      	b.n	8013fda <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	617b      	str	r3, [r7, #20]
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d1d0      	bne.n	8013f7c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d1be      	bne.n	8013f5e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013fe6:	2bfe      	cmp	r3, #254	@ 0xfe
 8013fe8:	d103      	bne.n	8013ff2 <netif_add+0x14e>
    netif_num = 0;
 8013fea:	4b11      	ldr	r3, [pc, #68]	@ (8014030 <netif_add+0x18c>)
 8013fec:	2200      	movs	r2, #0
 8013fee:	701a      	strb	r2, [r3, #0]
 8013ff0:	e006      	b.n	8014000 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	b2da      	uxtb	r2, r3
 8013ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8014030 <netif_add+0x18c>)
 8013ffe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014000:	4b0c      	ldr	r3, [pc, #48]	@ (8014034 <netif_add+0x190>)
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014008:	4a0a      	ldr	r2, [pc, #40]	@ (8014034 <netif_add+0x190>)
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801400e:	68fb      	ldr	r3, [r7, #12]
}
 8014010:	4618      	mov	r0, r3
 8014012:	3718      	adds	r7, #24
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}
 8014018:	08021fec 	.word	0x08021fec
 801401c:	08022080 	.word	0x08022080
 8014020:	0802203c 	.word	0x0802203c
 8014024:	0802209c 	.word	0x0802209c
 8014028:	08024db8 	.word	0x08024db8
 801402c:	0801444f 	.word	0x0801444f
 8014030:	2002d2ac 	.word	0x2002d2ac
 8014034:	2002d2a4 	.word	0x2002d2a4
 8014038:	080220c0 	.word	0x080220c0
 801403c:	080220d4 	.word	0x080220d4

08014040 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801404a:	6839      	ldr	r1, [r7, #0]
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f002 fdc9 	bl	8016be4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8014052:	6839      	ldr	r1, [r7, #0]
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f007 ff61 	bl	801bf1c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801405a:	bf00      	nop
 801405c:	3708      	adds	r7, #8
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
	...

08014064 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b086      	sub	sp, #24
 8014068:	af00      	add	r7, sp, #0
 801406a:	60f8      	str	r0, [r7, #12]
 801406c:	60b9      	str	r1, [r7, #8]
 801406e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d106      	bne.n	8014084 <netif_do_set_ipaddr+0x20>
 8014076:	4b1d      	ldr	r3, [pc, #116]	@ (80140ec <netif_do_set_ipaddr+0x88>)
 8014078:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801407c:	491c      	ldr	r1, [pc, #112]	@ (80140f0 <netif_do_set_ipaddr+0x8c>)
 801407e:	481d      	ldr	r0, [pc, #116]	@ (80140f4 <netif_do_set_ipaddr+0x90>)
 8014080:	f00b ffe0 	bl	8020044 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d106      	bne.n	8014098 <netif_do_set_ipaddr+0x34>
 801408a:	4b18      	ldr	r3, [pc, #96]	@ (80140ec <netif_do_set_ipaddr+0x88>)
 801408c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8014090:	4917      	ldr	r1, [pc, #92]	@ (80140f0 <netif_do_set_ipaddr+0x8c>)
 8014092:	4818      	ldr	r0, [pc, #96]	@ (80140f4 <netif_do_set_ipaddr+0x90>)
 8014094:	f00b ffd6 	bl	8020044 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	681a      	ldr	r2, [r3, #0]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	3304      	adds	r3, #4
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d01c      	beq.n	80140e0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	3304      	adds	r3, #4
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80140b6:	f107 0314 	add.w	r3, r7, #20
 80140ba:	4619      	mov	r1, r3
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f7ff ffbf 	bl	8014040 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d002      	beq.n	80140ce <netif_do_set_ipaddr+0x6a>
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	e000      	b.n	80140d0 <netif_do_set_ipaddr+0x6c>
 80140ce:	2300      	movs	r3, #0
 80140d0:	68fa      	ldr	r2, [r7, #12]
 80140d2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80140d4:	2101      	movs	r1, #1
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f000 f8d2 	bl	8014280 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80140dc:	2301      	movs	r3, #1
 80140de:	e000      	b.n	80140e2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80140e0:	2300      	movs	r3, #0
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3718      	adds	r7, #24
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	08021fec 	.word	0x08021fec
 80140f0:	08022104 	.word	0x08022104
 80140f4:	0802203c 	.word	0x0802203c

080140f8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80140f8:	b480      	push	{r7}
 80140fa:	b085      	sub	sp, #20
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	3308      	adds	r3, #8
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	429a      	cmp	r2, r3
 8014110:	d00a      	beq.n	8014128 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d002      	beq.n	801411e <netif_do_set_netmask+0x26>
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	e000      	b.n	8014120 <netif_do_set_netmask+0x28>
 801411e:	2300      	movs	r3, #0
 8014120:	68fa      	ldr	r2, [r7, #12]
 8014122:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8014124:	2301      	movs	r3, #1
 8014126:	e000      	b.n	801412a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8014128:	2300      	movs	r3, #0
}
 801412a:	4618      	mov	r0, r3
 801412c:	3714      	adds	r7, #20
 801412e:	46bd      	mov	sp, r7
 8014130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014134:	4770      	bx	lr

08014136 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8014136:	b480      	push	{r7}
 8014138:	b085      	sub	sp, #20
 801413a:	af00      	add	r7, sp, #0
 801413c:	60f8      	str	r0, [r7, #12]
 801413e:	60b9      	str	r1, [r7, #8]
 8014140:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	330c      	adds	r3, #12
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	429a      	cmp	r2, r3
 801414e:	d00a      	beq.n	8014166 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d002      	beq.n	801415c <netif_do_set_gw+0x26>
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	e000      	b.n	801415e <netif_do_set_gw+0x28>
 801415c:	2300      	movs	r3, #0
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8014162:	2301      	movs	r3, #1
 8014164:	e000      	b.n	8014168 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8014166:	2300      	movs	r3, #0
}
 8014168:	4618      	mov	r0, r3
 801416a:	3714      	adds	r7, #20
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b088      	sub	sp, #32
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
 8014180:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8014182:	2300      	movs	r3, #0
 8014184:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014186:	2300      	movs	r3, #0
 8014188:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d101      	bne.n	8014194 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014190:	4b1c      	ldr	r3, [pc, #112]	@ (8014204 <netif_set_addr+0x90>)
 8014192:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d101      	bne.n	801419e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801419a:	4b1a      	ldr	r3, [pc, #104]	@ (8014204 <netif_set_addr+0x90>)
 801419c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d101      	bne.n	80141a8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80141a4:	4b17      	ldr	r3, [pc, #92]	@ (8014204 <netif_set_addr+0x90>)
 80141a6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d003      	beq.n	80141b6 <netif_set_addr+0x42>
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d101      	bne.n	80141ba <netif_set_addr+0x46>
 80141b6:	2301      	movs	r3, #1
 80141b8:	e000      	b.n	80141bc <netif_set_addr+0x48>
 80141ba:	2300      	movs	r3, #0
 80141bc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d006      	beq.n	80141d2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80141c4:	f107 0310 	add.w	r3, r7, #16
 80141c8:	461a      	mov	r2, r3
 80141ca:	68b9      	ldr	r1, [r7, #8]
 80141cc:	68f8      	ldr	r0, [r7, #12]
 80141ce:	f7ff ff49 	bl	8014064 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80141d2:	69fa      	ldr	r2, [r7, #28]
 80141d4:	6879      	ldr	r1, [r7, #4]
 80141d6:	68f8      	ldr	r0, [r7, #12]
 80141d8:	f7ff ff8e 	bl	80140f8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80141dc:	69ba      	ldr	r2, [r7, #24]
 80141de:	6839      	ldr	r1, [r7, #0]
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	f7ff ffa8 	bl	8014136 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d106      	bne.n	80141fa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80141ec:	f107 0310 	add.w	r3, r7, #16
 80141f0:	461a      	mov	r2, r3
 80141f2:	68b9      	ldr	r1, [r7, #8]
 80141f4:	68f8      	ldr	r0, [r7, #12]
 80141f6:	f7ff ff35 	bl	8014064 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80141fa:	bf00      	nop
 80141fc:	3720      	adds	r7, #32
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	08024db8 	.word	0x08024db8

08014208 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014208:	b480      	push	{r7}
 801420a:	b083      	sub	sp, #12
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8014210:	4a04      	ldr	r2, [pc, #16]	@ (8014224 <netif_set_default+0x1c>)
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8014216:	bf00      	nop
 8014218:	370c      	adds	r7, #12
 801421a:	46bd      	mov	sp, r7
 801421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014220:	4770      	bx	lr
 8014222:	bf00      	nop
 8014224:	2002d2a8 	.word	0x2002d2a8

08014228 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d107      	bne.n	8014246 <netif_set_up+0x1e>
 8014236:	4b0f      	ldr	r3, [pc, #60]	@ (8014274 <netif_set_up+0x4c>)
 8014238:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801423c:	490e      	ldr	r1, [pc, #56]	@ (8014278 <netif_set_up+0x50>)
 801423e:	480f      	ldr	r0, [pc, #60]	@ (801427c <netif_set_up+0x54>)
 8014240:	f00b ff00 	bl	8020044 <iprintf>
 8014244:	e013      	b.n	801426e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801424c:	f003 0301 	and.w	r3, r3, #1
 8014250:	2b00      	cmp	r3, #0
 8014252:	d10c      	bne.n	801426e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801425a:	f043 0301 	orr.w	r3, r3, #1
 801425e:	b2da      	uxtb	r2, r3
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014266:	2103      	movs	r1, #3
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f000 f809 	bl	8014280 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801426e:	3708      	adds	r7, #8
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}
 8014274:	08021fec 	.word	0x08021fec
 8014278:	08022174 	.word	0x08022174
 801427c:	0802203c 	.word	0x0802203c

08014280 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
 8014288:	460b      	mov	r3, r1
 801428a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d106      	bne.n	80142a0 <netif_issue_reports+0x20>
 8014292:	4b18      	ldr	r3, [pc, #96]	@ (80142f4 <netif_issue_reports+0x74>)
 8014294:	f240 326d 	movw	r2, #877	@ 0x36d
 8014298:	4917      	ldr	r1, [pc, #92]	@ (80142f8 <netif_issue_reports+0x78>)
 801429a:	4818      	ldr	r0, [pc, #96]	@ (80142fc <netif_issue_reports+0x7c>)
 801429c:	f00b fed2 	bl	8020044 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80142a6:	f003 0304 	and.w	r3, r3, #4
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d01e      	beq.n	80142ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80142b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d017      	beq.n	80142ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80142bc:	78fb      	ldrb	r3, [r7, #3]
 80142be:	f003 0301 	and.w	r3, r3, #1
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d013      	beq.n	80142ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	3304      	adds	r3, #4
 80142ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d00e      	beq.n	80142ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80142d6:	f003 0308 	and.w	r3, r3, #8
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d007      	beq.n	80142ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	3304      	adds	r3, #4
 80142e2:	4619      	mov	r1, r3
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f008 fdc3 	bl	801ce70 <etharp_request>
 80142ea:	e000      	b.n	80142ee <netif_issue_reports+0x6e>
    return;
 80142ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	08021fec 	.word	0x08021fec
 80142f8:	08022190 	.word	0x08022190
 80142fc:	0802203c 	.word	0x0802203c

08014300 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d107      	bne.n	801431e <netif_set_down+0x1e>
 801430e:	4b12      	ldr	r3, [pc, #72]	@ (8014358 <netif_set_down+0x58>)
 8014310:	f240 329b 	movw	r2, #923	@ 0x39b
 8014314:	4911      	ldr	r1, [pc, #68]	@ (801435c <netif_set_down+0x5c>)
 8014316:	4812      	ldr	r0, [pc, #72]	@ (8014360 <netif_set_down+0x60>)
 8014318:	f00b fe94 	bl	8020044 <iprintf>
 801431c:	e019      	b.n	8014352 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014324:	f003 0301 	and.w	r3, r3, #1
 8014328:	2b00      	cmp	r3, #0
 801432a:	d012      	beq.n	8014352 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014332:	f023 0301 	bic.w	r3, r3, #1
 8014336:	b2da      	uxtb	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014344:	f003 0308 	and.w	r3, r3, #8
 8014348:	2b00      	cmp	r3, #0
 801434a:	d002      	beq.n	8014352 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	f008 f90d 	bl	801c56c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	08021fec 	.word	0x08021fec
 801435c:	080221b4 	.word	0x080221b4
 8014360:	0802203c 	.word	0x0802203c

08014364 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d107      	bne.n	8014382 <netif_set_link_up+0x1e>
 8014372:	4b13      	ldr	r3, [pc, #76]	@ (80143c0 <netif_set_link_up+0x5c>)
 8014374:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014378:	4912      	ldr	r1, [pc, #72]	@ (80143c4 <netif_set_link_up+0x60>)
 801437a:	4813      	ldr	r0, [pc, #76]	@ (80143c8 <netif_set_link_up+0x64>)
 801437c:	f00b fe62 	bl	8020044 <iprintf>
 8014380:	e01b      	b.n	80143ba <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014388:	f003 0304 	and.w	r3, r3, #4
 801438c:	2b00      	cmp	r3, #0
 801438e:	d114      	bne.n	80143ba <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014396:	f043 0304 	orr.w	r3, r3, #4
 801439a:	b2da      	uxtb	r2, r3
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80143a2:	2103      	movs	r1, #3
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f7ff ff6b 	bl	8014280 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	69db      	ldr	r3, [r3, #28]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d003      	beq.n	80143ba <netif_set_link_up+0x56>
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	69db      	ldr	r3, [r3, #28]
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	08021fec 	.word	0x08021fec
 80143c4:	080221d4 	.word	0x080221d4
 80143c8:	0802203c 	.word	0x0802203c

080143cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b082      	sub	sp, #8
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d107      	bne.n	80143ea <netif_set_link_down+0x1e>
 80143da:	4b11      	ldr	r3, [pc, #68]	@ (8014420 <netif_set_link_down+0x54>)
 80143dc:	f240 4206 	movw	r2, #1030	@ 0x406
 80143e0:	4910      	ldr	r1, [pc, #64]	@ (8014424 <netif_set_link_down+0x58>)
 80143e2:	4811      	ldr	r0, [pc, #68]	@ (8014428 <netif_set_link_down+0x5c>)
 80143e4:	f00b fe2e 	bl	8020044 <iprintf>
 80143e8:	e017      	b.n	801441a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80143f0:	f003 0304 	and.w	r3, r3, #4
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d010      	beq.n	801441a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80143fe:	f023 0304 	bic.w	r3, r3, #4
 8014402:	b2da      	uxtb	r2, r3
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	69db      	ldr	r3, [r3, #28]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d003      	beq.n	801441a <netif_set_link_down+0x4e>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	69db      	ldr	r3, [r3, #28]
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}
 8014420:	08021fec 	.word	0x08021fec
 8014424:	080221f8 	.word	0x080221f8
 8014428:	0802203c 	.word	0x0802203c

0801442c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801442c:	b480      	push	{r7}
 801442e:	b083      	sub	sp, #12
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d002      	beq.n	8014442 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	683a      	ldr	r2, [r7, #0]
 8014440:	61da      	str	r2, [r3, #28]
  }
}
 8014442:	bf00      	nop
 8014444:	370c      	adds	r7, #12
 8014446:	46bd      	mov	sp, r7
 8014448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444c:	4770      	bx	lr

0801444e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801444e:	b480      	push	{r7}
 8014450:	b085      	sub	sp, #20
 8014452:	af00      	add	r7, sp, #0
 8014454:	60f8      	str	r0, [r7, #12]
 8014456:	60b9      	str	r1, [r7, #8]
 8014458:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801445a:	f06f 030b 	mvn.w	r3, #11
}
 801445e:	4618      	mov	r0, r3
 8014460:	3714      	adds	r7, #20
 8014462:	46bd      	mov	sp, r7
 8014464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014468:	4770      	bx	lr
	...

0801446c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801446c:	b480      	push	{r7}
 801446e:	b085      	sub	sp, #20
 8014470:	af00      	add	r7, sp, #0
 8014472:	4603      	mov	r3, r0
 8014474:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014476:	79fb      	ldrb	r3, [r7, #7]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d013      	beq.n	80144a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801447c:	4b0d      	ldr	r3, [pc, #52]	@ (80144b4 <netif_get_by_index+0x48>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	60fb      	str	r3, [r7, #12]
 8014482:	e00c      	b.n	801449e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801448a:	3301      	adds	r3, #1
 801448c:	b2db      	uxtb	r3, r3
 801448e:	79fa      	ldrb	r2, [r7, #7]
 8014490:	429a      	cmp	r2, r3
 8014492:	d101      	bne.n	8014498 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	e006      	b.n	80144a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	60fb      	str	r3, [r7, #12]
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d1ef      	bne.n	8014484 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80144a4:	2300      	movs	r3, #0
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3714      	adds	r7, #20
 80144aa:	46bd      	mov	sp, r7
 80144ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b0:	4770      	bx	lr
 80144b2:	bf00      	nop
 80144b4:	2002d2a4 	.word	0x2002d2a4

080144b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80144be:	f00a fb89 	bl	801ebd4 <sys_arch_protect>
 80144c2:	6038      	str	r0, [r7, #0]
 80144c4:	4b0d      	ldr	r3, [pc, #52]	@ (80144fc <pbuf_free_ooseq+0x44>)
 80144c6:	2200      	movs	r2, #0
 80144c8:	701a      	strb	r2, [r3, #0]
 80144ca:	6838      	ldr	r0, [r7, #0]
 80144cc:	f00a fb90 	bl	801ebf0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80144d0:	4b0b      	ldr	r3, [pc, #44]	@ (8014500 <pbuf_free_ooseq+0x48>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	607b      	str	r3, [r7, #4]
 80144d6:	e00a      	b.n	80144ee <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d003      	beq.n	80144e8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f002 fbbd 	bl	8016c60 <tcp_free_ooseq>
      return;
 80144e6:	e005      	b.n	80144f4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	607b      	str	r3, [r7, #4]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d1f1      	bne.n	80144d8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80144f4:	3708      	adds	r7, #8
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	2002d2ad 	.word	0x2002d2ad
 8014500:	2002d3b8 	.word	0x2002d3b8

08014504 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b082      	sub	sp, #8
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801450c:	f7ff ffd4 	bl	80144b8 <pbuf_free_ooseq>
}
 8014510:	bf00      	nop
 8014512:	3708      	adds	r7, #8
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801451e:	f00a fb59 	bl	801ebd4 <sys_arch_protect>
 8014522:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014524:	4b0f      	ldr	r3, [pc, #60]	@ (8014564 <pbuf_pool_is_empty+0x4c>)
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801452a:	4b0e      	ldr	r3, [pc, #56]	@ (8014564 <pbuf_pool_is_empty+0x4c>)
 801452c:	2201      	movs	r2, #1
 801452e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f00a fb5d 	bl	801ebf0 <sys_arch_unprotect>

  if (!queued) {
 8014536:	78fb      	ldrb	r3, [r7, #3]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d10f      	bne.n	801455c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801453c:	2100      	movs	r1, #0
 801453e:	480a      	ldr	r0, [pc, #40]	@ (8014568 <pbuf_pool_is_empty+0x50>)
 8014540:	f7fe fdc4 	bl	80130cc <tcpip_try_callback>
 8014544:	4603      	mov	r3, r0
 8014546:	2b00      	cmp	r3, #0
 8014548:	d008      	beq.n	801455c <pbuf_pool_is_empty+0x44>
 801454a:	f00a fb43 	bl	801ebd4 <sys_arch_protect>
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	4b04      	ldr	r3, [pc, #16]	@ (8014564 <pbuf_pool_is_empty+0x4c>)
 8014552:	2200      	movs	r2, #0
 8014554:	701a      	strb	r2, [r3, #0]
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f00a fb4a 	bl	801ebf0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801455c:	bf00      	nop
 801455e:	3708      	adds	r7, #8
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}
 8014564:	2002d2ad 	.word	0x2002d2ad
 8014568:	08014505 	.word	0x08014505

0801456c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801456c:	b480      	push	{r7}
 801456e:	b085      	sub	sp, #20
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	4611      	mov	r1, r2
 8014578:	461a      	mov	r2, r3
 801457a:	460b      	mov	r3, r1
 801457c:	80fb      	strh	r3, [r7, #6]
 801457e:	4613      	mov	r3, r2
 8014580:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	2200      	movs	r2, #0
 8014586:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	68ba      	ldr	r2, [r7, #8]
 801458c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	88fa      	ldrh	r2, [r7, #6]
 8014592:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	88ba      	ldrh	r2, [r7, #4]
 8014598:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801459a:	8b3b      	ldrh	r3, [r7, #24]
 801459c:	b2da      	uxtb	r2, r3
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	7f3a      	ldrb	r2, [r7, #28]
 80145a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2201      	movs	r2, #1
 80145ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	2200      	movs	r2, #0
 80145b2:	73da      	strb	r2, [r3, #15]
}
 80145b4:	bf00      	nop
 80145b6:	3714      	adds	r7, #20
 80145b8:	46bd      	mov	sp, r7
 80145ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145be:	4770      	bx	lr

080145c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b08c      	sub	sp, #48	@ 0x30
 80145c4:	af02      	add	r7, sp, #8
 80145c6:	4603      	mov	r3, r0
 80145c8:	71fb      	strb	r3, [r7, #7]
 80145ca:	460b      	mov	r3, r1
 80145cc:	80bb      	strh	r3, [r7, #4]
 80145ce:	4613      	mov	r3, r2
 80145d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80145d2:	79fb      	ldrb	r3, [r7, #7]
 80145d4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80145d6:	887b      	ldrh	r3, [r7, #2]
 80145d8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80145dc:	d07f      	beq.n	80146de <pbuf_alloc+0x11e>
 80145de:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80145e2:	f300 80c8 	bgt.w	8014776 <pbuf_alloc+0x1b6>
 80145e6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80145ea:	d010      	beq.n	801460e <pbuf_alloc+0x4e>
 80145ec:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80145f0:	f300 80c1 	bgt.w	8014776 <pbuf_alloc+0x1b6>
 80145f4:	2b01      	cmp	r3, #1
 80145f6:	d002      	beq.n	80145fe <pbuf_alloc+0x3e>
 80145f8:	2b41      	cmp	r3, #65	@ 0x41
 80145fa:	f040 80bc 	bne.w	8014776 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80145fe:	887a      	ldrh	r2, [r7, #2]
 8014600:	88bb      	ldrh	r3, [r7, #4]
 8014602:	4619      	mov	r1, r3
 8014604:	2000      	movs	r0, #0
 8014606:	f000 f8d1 	bl	80147ac <pbuf_alloc_reference>
 801460a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801460c:	e0bd      	b.n	801478a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801460e:	2300      	movs	r3, #0
 8014610:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8014612:	2300      	movs	r3, #0
 8014614:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014616:	88bb      	ldrh	r3, [r7, #4]
 8014618:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801461a:	200c      	movs	r0, #12
 801461c:	f7ff fb94 	bl	8013d48 <memp_malloc>
 8014620:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d109      	bne.n	801463c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014628:	f7ff ff76 	bl	8014518 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801462e:	2b00      	cmp	r3, #0
 8014630:	d002      	beq.n	8014638 <pbuf_alloc+0x78>
            pbuf_free(p);
 8014632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014634:	f000 faa8 	bl	8014b88 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014638:	2300      	movs	r3, #0
 801463a:	e0a7      	b.n	801478c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801463c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801463e:	3303      	adds	r3, #3
 8014640:	b29b      	uxth	r3, r3
 8014642:	f023 0303 	bic.w	r3, r3, #3
 8014646:	b29b      	uxth	r3, r3
 8014648:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801464c:	b29b      	uxth	r3, r3
 801464e:	8b7a      	ldrh	r2, [r7, #26]
 8014650:	4293      	cmp	r3, r2
 8014652:	bf28      	it	cs
 8014654:	4613      	movcs	r3, r2
 8014656:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014658:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801465a:	3310      	adds	r3, #16
 801465c:	693a      	ldr	r2, [r7, #16]
 801465e:	4413      	add	r3, r2
 8014660:	3303      	adds	r3, #3
 8014662:	f023 0303 	bic.w	r3, r3, #3
 8014666:	4618      	mov	r0, r3
 8014668:	89f9      	ldrh	r1, [r7, #14]
 801466a:	8b7a      	ldrh	r2, [r7, #26]
 801466c:	2300      	movs	r3, #0
 801466e:	9301      	str	r3, [sp, #4]
 8014670:	887b      	ldrh	r3, [r7, #2]
 8014672:	9300      	str	r3, [sp, #0]
 8014674:	460b      	mov	r3, r1
 8014676:	4601      	mov	r1, r0
 8014678:	6938      	ldr	r0, [r7, #16]
 801467a:	f7ff ff77 	bl	801456c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801467e:	693b      	ldr	r3, [r7, #16]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	f003 0303 	and.w	r3, r3, #3
 8014686:	2b00      	cmp	r3, #0
 8014688:	d006      	beq.n	8014698 <pbuf_alloc+0xd8>
 801468a:	4b42      	ldr	r3, [pc, #264]	@ (8014794 <pbuf_alloc+0x1d4>)
 801468c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014690:	4941      	ldr	r1, [pc, #260]	@ (8014798 <pbuf_alloc+0x1d8>)
 8014692:	4842      	ldr	r0, [pc, #264]	@ (801479c <pbuf_alloc+0x1dc>)
 8014694:	f00b fcd6 	bl	8020044 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014698:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801469a:	3303      	adds	r3, #3
 801469c:	f023 0303 	bic.w	r3, r3, #3
 80146a0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80146a4:	d106      	bne.n	80146b4 <pbuf_alloc+0xf4>
 80146a6:	4b3b      	ldr	r3, [pc, #236]	@ (8014794 <pbuf_alloc+0x1d4>)
 80146a8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80146ac:	493c      	ldr	r1, [pc, #240]	@ (80147a0 <pbuf_alloc+0x1e0>)
 80146ae:	483b      	ldr	r0, [pc, #236]	@ (801479c <pbuf_alloc+0x1dc>)
 80146b0:	f00b fcc8 	bl	8020044 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80146b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d102      	bne.n	80146c0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80146be:	e002      	b.n	80146c6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80146c0:	69fb      	ldr	r3, [r7, #28]
 80146c2:	693a      	ldr	r2, [r7, #16]
 80146c4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80146ca:	8b7a      	ldrh	r2, [r7, #26]
 80146cc:	89fb      	ldrh	r3, [r7, #14]
 80146ce:	1ad3      	subs	r3, r2, r3
 80146d0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80146d2:	2300      	movs	r3, #0
 80146d4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80146d6:	8b7b      	ldrh	r3, [r7, #26]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d19e      	bne.n	801461a <pbuf_alloc+0x5a>
      break;
 80146dc:	e055      	b.n	801478a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80146de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146e0:	3303      	adds	r3, #3
 80146e2:	b29b      	uxth	r3, r3
 80146e4:	f023 0303 	bic.w	r3, r3, #3
 80146e8:	b29a      	uxth	r2, r3
 80146ea:	88bb      	ldrh	r3, [r7, #4]
 80146ec:	3303      	adds	r3, #3
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	f023 0303 	bic.w	r3, r3, #3
 80146f4:	b29b      	uxth	r3, r3
 80146f6:	4413      	add	r3, r2
 80146f8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80146fa:	8b3b      	ldrh	r3, [r7, #24]
 80146fc:	3310      	adds	r3, #16
 80146fe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014700:	8b3a      	ldrh	r2, [r7, #24]
 8014702:	88bb      	ldrh	r3, [r7, #4]
 8014704:	3303      	adds	r3, #3
 8014706:	f023 0303 	bic.w	r3, r3, #3
 801470a:	429a      	cmp	r2, r3
 801470c:	d306      	bcc.n	801471c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801470e:	8afa      	ldrh	r2, [r7, #22]
 8014710:	88bb      	ldrh	r3, [r7, #4]
 8014712:	3303      	adds	r3, #3
 8014714:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014718:	429a      	cmp	r2, r3
 801471a:	d201      	bcs.n	8014720 <pbuf_alloc+0x160>
        return NULL;
 801471c:	2300      	movs	r3, #0
 801471e:	e035      	b.n	801478c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014720:	8afb      	ldrh	r3, [r7, #22]
 8014722:	4618      	mov	r0, r3
 8014724:	f7ff f900 	bl	8013928 <mem_malloc>
 8014728:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801472c:	2b00      	cmp	r3, #0
 801472e:	d101      	bne.n	8014734 <pbuf_alloc+0x174>
        return NULL;
 8014730:	2300      	movs	r3, #0
 8014732:	e02b      	b.n	801478c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014734:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014736:	3310      	adds	r3, #16
 8014738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801473a:	4413      	add	r3, r2
 801473c:	3303      	adds	r3, #3
 801473e:	f023 0303 	bic.w	r3, r3, #3
 8014742:	4618      	mov	r0, r3
 8014744:	88b9      	ldrh	r1, [r7, #4]
 8014746:	88ba      	ldrh	r2, [r7, #4]
 8014748:	2300      	movs	r3, #0
 801474a:	9301      	str	r3, [sp, #4]
 801474c:	887b      	ldrh	r3, [r7, #2]
 801474e:	9300      	str	r3, [sp, #0]
 8014750:	460b      	mov	r3, r1
 8014752:	4601      	mov	r1, r0
 8014754:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014756:	f7ff ff09 	bl	801456c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801475c:	685b      	ldr	r3, [r3, #4]
 801475e:	f003 0303 	and.w	r3, r3, #3
 8014762:	2b00      	cmp	r3, #0
 8014764:	d010      	beq.n	8014788 <pbuf_alloc+0x1c8>
 8014766:	4b0b      	ldr	r3, [pc, #44]	@ (8014794 <pbuf_alloc+0x1d4>)
 8014768:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801476c:	490d      	ldr	r1, [pc, #52]	@ (80147a4 <pbuf_alloc+0x1e4>)
 801476e:	480b      	ldr	r0, [pc, #44]	@ (801479c <pbuf_alloc+0x1dc>)
 8014770:	f00b fc68 	bl	8020044 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014774:	e008      	b.n	8014788 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014776:	4b07      	ldr	r3, [pc, #28]	@ (8014794 <pbuf_alloc+0x1d4>)
 8014778:	f240 1227 	movw	r2, #295	@ 0x127
 801477c:	490a      	ldr	r1, [pc, #40]	@ (80147a8 <pbuf_alloc+0x1e8>)
 801477e:	4807      	ldr	r0, [pc, #28]	@ (801479c <pbuf_alloc+0x1dc>)
 8014780:	f00b fc60 	bl	8020044 <iprintf>
      return NULL;
 8014784:	2300      	movs	r3, #0
 8014786:	e001      	b.n	801478c <pbuf_alloc+0x1cc>
      break;
 8014788:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801478c:	4618      	mov	r0, r3
 801478e:	3728      	adds	r7, #40	@ 0x28
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	0802221c 	.word	0x0802221c
 8014798:	0802224c 	.word	0x0802224c
 801479c:	0802227c 	.word	0x0802227c
 80147a0:	080222a4 	.word	0x080222a4
 80147a4:	080222d8 	.word	0x080222d8
 80147a8:	08022304 	.word	0x08022304

080147ac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b086      	sub	sp, #24
 80147b0:	af02      	add	r7, sp, #8
 80147b2:	6078      	str	r0, [r7, #4]
 80147b4:	460b      	mov	r3, r1
 80147b6:	807b      	strh	r3, [r7, #2]
 80147b8:	4613      	mov	r3, r2
 80147ba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80147bc:	883b      	ldrh	r3, [r7, #0]
 80147be:	2b41      	cmp	r3, #65	@ 0x41
 80147c0:	d009      	beq.n	80147d6 <pbuf_alloc_reference+0x2a>
 80147c2:	883b      	ldrh	r3, [r7, #0]
 80147c4:	2b01      	cmp	r3, #1
 80147c6:	d006      	beq.n	80147d6 <pbuf_alloc_reference+0x2a>
 80147c8:	4b0f      	ldr	r3, [pc, #60]	@ (8014808 <pbuf_alloc_reference+0x5c>)
 80147ca:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80147ce:	490f      	ldr	r1, [pc, #60]	@ (801480c <pbuf_alloc_reference+0x60>)
 80147d0:	480f      	ldr	r0, [pc, #60]	@ (8014810 <pbuf_alloc_reference+0x64>)
 80147d2:	f00b fc37 	bl	8020044 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80147d6:	200b      	movs	r0, #11
 80147d8:	f7ff fab6 	bl	8013d48 <memp_malloc>
 80147dc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d101      	bne.n	80147e8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80147e4:	2300      	movs	r3, #0
 80147e6:	e00b      	b.n	8014800 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80147e8:	8879      	ldrh	r1, [r7, #2]
 80147ea:	887a      	ldrh	r2, [r7, #2]
 80147ec:	2300      	movs	r3, #0
 80147ee:	9301      	str	r3, [sp, #4]
 80147f0:	883b      	ldrh	r3, [r7, #0]
 80147f2:	9300      	str	r3, [sp, #0]
 80147f4:	460b      	mov	r3, r1
 80147f6:	6879      	ldr	r1, [r7, #4]
 80147f8:	68f8      	ldr	r0, [r7, #12]
 80147fa:	f7ff feb7 	bl	801456c <pbuf_init_alloced_pbuf>
  return p;
 80147fe:	68fb      	ldr	r3, [r7, #12]
}
 8014800:	4618      	mov	r0, r3
 8014802:	3710      	adds	r7, #16
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}
 8014808:	0802221c 	.word	0x0802221c
 801480c:	08022320 	.word	0x08022320
 8014810:	0802227c 	.word	0x0802227c

08014814 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b088      	sub	sp, #32
 8014818:	af02      	add	r7, sp, #8
 801481a:	607b      	str	r3, [r7, #4]
 801481c:	4603      	mov	r3, r0
 801481e:	73fb      	strb	r3, [r7, #15]
 8014820:	460b      	mov	r3, r1
 8014822:	81bb      	strh	r3, [r7, #12]
 8014824:	4613      	mov	r3, r2
 8014826:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014828:	7bfb      	ldrb	r3, [r7, #15]
 801482a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801482c:	8a7b      	ldrh	r3, [r7, #18]
 801482e:	3303      	adds	r3, #3
 8014830:	f023 0203 	bic.w	r2, r3, #3
 8014834:	89bb      	ldrh	r3, [r7, #12]
 8014836:	441a      	add	r2, r3
 8014838:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801483a:	429a      	cmp	r2, r3
 801483c:	d901      	bls.n	8014842 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801483e:	2300      	movs	r3, #0
 8014840:	e018      	b.n	8014874 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014842:	6a3b      	ldr	r3, [r7, #32]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d007      	beq.n	8014858 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014848:	8a7b      	ldrh	r3, [r7, #18]
 801484a:	3303      	adds	r3, #3
 801484c:	f023 0303 	bic.w	r3, r3, #3
 8014850:	6a3a      	ldr	r2, [r7, #32]
 8014852:	4413      	add	r3, r2
 8014854:	617b      	str	r3, [r7, #20]
 8014856:	e001      	b.n	801485c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014858:	2300      	movs	r3, #0
 801485a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	89b9      	ldrh	r1, [r7, #12]
 8014860:	89ba      	ldrh	r2, [r7, #12]
 8014862:	2302      	movs	r3, #2
 8014864:	9301      	str	r3, [sp, #4]
 8014866:	897b      	ldrh	r3, [r7, #10]
 8014868:	9300      	str	r3, [sp, #0]
 801486a:	460b      	mov	r3, r1
 801486c:	6979      	ldr	r1, [r7, #20]
 801486e:	f7ff fe7d 	bl	801456c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014872:	687b      	ldr	r3, [r7, #4]
}
 8014874:	4618      	mov	r0, r3
 8014876:	3718      	adds	r7, #24
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	460b      	mov	r3, r1
 8014886:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d106      	bne.n	801489c <pbuf_realloc+0x20>
 801488e:	4b3a      	ldr	r3, [pc, #232]	@ (8014978 <pbuf_realloc+0xfc>)
 8014890:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014894:	4939      	ldr	r1, [pc, #228]	@ (801497c <pbuf_realloc+0x100>)
 8014896:	483a      	ldr	r0, [pc, #232]	@ (8014980 <pbuf_realloc+0x104>)
 8014898:	f00b fbd4 	bl	8020044 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	891b      	ldrh	r3, [r3, #8]
 80148a0:	887a      	ldrh	r2, [r7, #2]
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d263      	bcs.n	801496e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	891a      	ldrh	r2, [r3, #8]
 80148aa:	887b      	ldrh	r3, [r7, #2]
 80148ac:	1ad3      	subs	r3, r2, r3
 80148ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80148b0:	887b      	ldrh	r3, [r7, #2]
 80148b2:	817b      	strh	r3, [r7, #10]
  q = p;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80148b8:	e018      	b.n	80148ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	895b      	ldrh	r3, [r3, #10]
 80148be:	897a      	ldrh	r2, [r7, #10]
 80148c0:	1ad3      	subs	r3, r2, r3
 80148c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	891a      	ldrh	r2, [r3, #8]
 80148c8:	893b      	ldrh	r3, [r7, #8]
 80148ca:	1ad3      	subs	r3, r2, r3
 80148cc:	b29a      	uxth	r2, r3
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d106      	bne.n	80148ec <pbuf_realloc+0x70>
 80148de:	4b26      	ldr	r3, [pc, #152]	@ (8014978 <pbuf_realloc+0xfc>)
 80148e0:	f240 12af 	movw	r2, #431	@ 0x1af
 80148e4:	4927      	ldr	r1, [pc, #156]	@ (8014984 <pbuf_realloc+0x108>)
 80148e6:	4826      	ldr	r0, [pc, #152]	@ (8014980 <pbuf_realloc+0x104>)
 80148e8:	f00b fbac 	bl	8020044 <iprintf>
  while (rem_len > q->len) {
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	895b      	ldrh	r3, [r3, #10]
 80148f0:	897a      	ldrh	r2, [r7, #10]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d8e1      	bhi.n	80148ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	7b1b      	ldrb	r3, [r3, #12]
 80148fa:	f003 030f 	and.w	r3, r3, #15
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d121      	bne.n	8014946 <pbuf_realloc+0xca>
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	895b      	ldrh	r3, [r3, #10]
 8014906:	897a      	ldrh	r2, [r7, #10]
 8014908:	429a      	cmp	r2, r3
 801490a:	d01c      	beq.n	8014946 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	7b5b      	ldrb	r3, [r3, #13]
 8014910:	f003 0302 	and.w	r3, r3, #2
 8014914:	2b00      	cmp	r3, #0
 8014916:	d116      	bne.n	8014946 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	685a      	ldr	r2, [r3, #4]
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	1ad3      	subs	r3, r2, r3
 8014920:	b29a      	uxth	r2, r3
 8014922:	897b      	ldrh	r3, [r7, #10]
 8014924:	4413      	add	r3, r2
 8014926:	b29b      	uxth	r3, r3
 8014928:	4619      	mov	r1, r3
 801492a:	68f8      	ldr	r0, [r7, #12]
 801492c:	f7fe fed0 	bl	80136d0 <mem_trim>
 8014930:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d106      	bne.n	8014946 <pbuf_realloc+0xca>
 8014938:	4b0f      	ldr	r3, [pc, #60]	@ (8014978 <pbuf_realloc+0xfc>)
 801493a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801493e:	4912      	ldr	r1, [pc, #72]	@ (8014988 <pbuf_realloc+0x10c>)
 8014940:	480f      	ldr	r0, [pc, #60]	@ (8014980 <pbuf_realloc+0x104>)
 8014942:	f00b fb7f 	bl	8020044 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	897a      	ldrh	r2, [r7, #10]
 801494a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	895a      	ldrh	r2, [r3, #10]
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d004      	beq.n	8014966 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	4618      	mov	r0, r3
 8014962:	f000 f911 	bl	8014b88 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	2200      	movs	r2, #0
 801496a:	601a      	str	r2, [r3, #0]
 801496c:	e000      	b.n	8014970 <pbuf_realloc+0xf4>
    return;
 801496e:	bf00      	nop

}
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
 8014976:	bf00      	nop
 8014978:	0802221c 	.word	0x0802221c
 801497c:	08022334 	.word	0x08022334
 8014980:	0802227c 	.word	0x0802227c
 8014984:	0802234c 	.word	0x0802234c
 8014988:	08022364 	.word	0x08022364

0801498c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	4613      	mov	r3, r2
 8014998:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d106      	bne.n	80149ae <pbuf_add_header_impl+0x22>
 80149a0:	4b2b      	ldr	r3, [pc, #172]	@ (8014a50 <pbuf_add_header_impl+0xc4>)
 80149a2:	f240 12df 	movw	r2, #479	@ 0x1df
 80149a6:	492b      	ldr	r1, [pc, #172]	@ (8014a54 <pbuf_add_header_impl+0xc8>)
 80149a8:	482b      	ldr	r0, [pc, #172]	@ (8014a58 <pbuf_add_header_impl+0xcc>)
 80149aa:	f00b fb4b 	bl	8020044 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d003      	beq.n	80149bc <pbuf_add_header_impl+0x30>
 80149b4:	68bb      	ldr	r3, [r7, #8]
 80149b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80149ba:	d301      	bcc.n	80149c0 <pbuf_add_header_impl+0x34>
    return 1;
 80149bc:	2301      	movs	r3, #1
 80149be:	e043      	b.n	8014a48 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d101      	bne.n	80149ca <pbuf_add_header_impl+0x3e>
    return 0;
 80149c6:	2300      	movs	r3, #0
 80149c8:	e03e      	b.n	8014a48 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	891a      	ldrh	r2, [r3, #8]
 80149d2:	8a7b      	ldrh	r3, [r7, #18]
 80149d4:	4413      	add	r3, r2
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	8a7a      	ldrh	r2, [r7, #18]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d901      	bls.n	80149e2 <pbuf_add_header_impl+0x56>
    return 1;
 80149de:	2301      	movs	r3, #1
 80149e0:	e032      	b.n	8014a48 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	7b1b      	ldrb	r3, [r3, #12]
 80149e6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80149e8:	8a3b      	ldrh	r3, [r7, #16]
 80149ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d00c      	beq.n	8014a0c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	685a      	ldr	r2, [r3, #4]
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	425b      	negs	r3, r3
 80149fa:	4413      	add	r3, r2
 80149fc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	3310      	adds	r3, #16
 8014a02:	697a      	ldr	r2, [r7, #20]
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d20d      	bcs.n	8014a24 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	e01d      	b.n	8014a48 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014a0c:	79fb      	ldrb	r3, [r7, #7]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d006      	beq.n	8014a20 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	685a      	ldr	r2, [r3, #4]
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	425b      	negs	r3, r3
 8014a1a:	4413      	add	r3, r2
 8014a1c:	617b      	str	r3, [r7, #20]
 8014a1e:	e001      	b.n	8014a24 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014a20:	2301      	movs	r3, #1
 8014a22:	e011      	b.n	8014a48 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	697a      	ldr	r2, [r7, #20]
 8014a28:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	895a      	ldrh	r2, [r3, #10]
 8014a2e:	8a7b      	ldrh	r3, [r7, #18]
 8014a30:	4413      	add	r3, r2
 8014a32:	b29a      	uxth	r2, r3
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	891a      	ldrh	r2, [r3, #8]
 8014a3c:	8a7b      	ldrh	r3, [r7, #18]
 8014a3e:	4413      	add	r3, r2
 8014a40:	b29a      	uxth	r2, r3
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	811a      	strh	r2, [r3, #8]


  return 0;
 8014a46:	2300      	movs	r3, #0
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3718      	adds	r7, #24
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}
 8014a50:	0802221c 	.word	0x0802221c
 8014a54:	08022380 	.word	0x08022380
 8014a58:	0802227c 	.word	0x0802227c

08014a5c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b082      	sub	sp, #8
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014a66:	2200      	movs	r2, #0
 8014a68:	6839      	ldr	r1, [r7, #0]
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7ff ff8e 	bl	801498c <pbuf_add_header_impl>
 8014a70:	4603      	mov	r3, r0
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3708      	adds	r7, #8
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
	...

08014a7c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d106      	bne.n	8014a9a <pbuf_remove_header+0x1e>
 8014a8c:	4b20      	ldr	r3, [pc, #128]	@ (8014b10 <pbuf_remove_header+0x94>)
 8014a8e:	f240 224b 	movw	r2, #587	@ 0x24b
 8014a92:	4920      	ldr	r1, [pc, #128]	@ (8014b14 <pbuf_remove_header+0x98>)
 8014a94:	4820      	ldr	r0, [pc, #128]	@ (8014b18 <pbuf_remove_header+0x9c>)
 8014a96:	f00b fad5 	bl	8020044 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d003      	beq.n	8014aa8 <pbuf_remove_header+0x2c>
 8014aa0:	683b      	ldr	r3, [r7, #0]
 8014aa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014aa6:	d301      	bcc.n	8014aac <pbuf_remove_header+0x30>
    return 1;
 8014aa8:	2301      	movs	r3, #1
 8014aaa:	e02c      	b.n	8014b06 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d101      	bne.n	8014ab6 <pbuf_remove_header+0x3a>
    return 0;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	e027      	b.n	8014b06 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	895b      	ldrh	r3, [r3, #10]
 8014abe:	89fa      	ldrh	r2, [r7, #14]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d908      	bls.n	8014ad6 <pbuf_remove_header+0x5a>
 8014ac4:	4b12      	ldr	r3, [pc, #72]	@ (8014b10 <pbuf_remove_header+0x94>)
 8014ac6:	f240 2255 	movw	r2, #597	@ 0x255
 8014aca:	4914      	ldr	r1, [pc, #80]	@ (8014b1c <pbuf_remove_header+0xa0>)
 8014acc:	4812      	ldr	r0, [pc, #72]	@ (8014b18 <pbuf_remove_header+0x9c>)
 8014ace:	f00b fab9 	bl	8020044 <iprintf>
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	e017      	b.n	8014b06 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	685a      	ldr	r2, [r3, #4]
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	441a      	add	r2, r3
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	895a      	ldrh	r2, [r3, #10]
 8014aec:	89fb      	ldrh	r3, [r7, #14]
 8014aee:	1ad3      	subs	r3, r2, r3
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	891a      	ldrh	r2, [r3, #8]
 8014afa:	89fb      	ldrh	r3, [r7, #14]
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014b04:	2300      	movs	r3, #0
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	3710      	adds	r7, #16
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}
 8014b0e:	bf00      	nop
 8014b10:	0802221c 	.word	0x0802221c
 8014b14:	08022380 	.word	0x08022380
 8014b18:	0802227c 	.word	0x0802227c
 8014b1c:	0802238c 	.word	0x0802238c

08014b20 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
 8014b28:	460b      	mov	r3, r1
 8014b2a:	807b      	strh	r3, [r7, #2]
 8014b2c:	4613      	mov	r3, r2
 8014b2e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014b30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	da08      	bge.n	8014b4a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b3c:	425b      	negs	r3, r3
 8014b3e:	4619      	mov	r1, r3
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f7ff ff9b 	bl	8014a7c <pbuf_remove_header>
 8014b46:	4603      	mov	r3, r0
 8014b48:	e007      	b.n	8014b5a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014b4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b4e:	787a      	ldrb	r2, [r7, #1]
 8014b50:	4619      	mov	r1, r3
 8014b52:	6878      	ldr	r0, [r7, #4]
 8014b54:	f7ff ff1a 	bl	801498c <pbuf_add_header_impl>
 8014b58:	4603      	mov	r3, r0
  }
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3708      	adds	r7, #8
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}

08014b62 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014b62:	b580      	push	{r7, lr}
 8014b64:	b082      	sub	sp, #8
 8014b66:	af00      	add	r7, sp, #0
 8014b68:	6078      	str	r0, [r7, #4]
 8014b6a:	460b      	mov	r3, r1
 8014b6c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014b6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014b72:	2201      	movs	r2, #1
 8014b74:	4619      	mov	r1, r3
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f7ff ffd2 	bl	8014b20 <pbuf_header_impl>
 8014b7c:	4603      	mov	r3, r0
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3708      	adds	r7, #8
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
	...

08014b88 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b088      	sub	sp, #32
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d10b      	bne.n	8014bae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d106      	bne.n	8014baa <pbuf_free+0x22>
 8014b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8014c8c <pbuf_free+0x104>)
 8014b9e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014ba2:	493b      	ldr	r1, [pc, #236]	@ (8014c90 <pbuf_free+0x108>)
 8014ba4:	483b      	ldr	r0, [pc, #236]	@ (8014c94 <pbuf_free+0x10c>)
 8014ba6:	f00b fa4d 	bl	8020044 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014baa:	2300      	movs	r3, #0
 8014bac:	e069      	b.n	8014c82 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014bb2:	e062      	b.n	8014c7a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014bb4:	f00a f80e 	bl	801ebd4 <sys_arch_protect>
 8014bb8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	7b9b      	ldrb	r3, [r3, #14]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d106      	bne.n	8014bd0 <pbuf_free+0x48>
 8014bc2:	4b32      	ldr	r3, [pc, #200]	@ (8014c8c <pbuf_free+0x104>)
 8014bc4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014bc8:	4933      	ldr	r1, [pc, #204]	@ (8014c98 <pbuf_free+0x110>)
 8014bca:	4832      	ldr	r0, [pc, #200]	@ (8014c94 <pbuf_free+0x10c>)
 8014bcc:	f00b fa3a 	bl	8020044 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	7b9b      	ldrb	r3, [r3, #14]
 8014bd4:	3b01      	subs	r3, #1
 8014bd6:	b2da      	uxtb	r2, r3
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	739a      	strb	r2, [r3, #14]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	7b9b      	ldrb	r3, [r3, #14]
 8014be0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014be2:	69b8      	ldr	r0, [r7, #24]
 8014be4:	f00a f804 	bl	801ebf0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014be8:	7dfb      	ldrb	r3, [r7, #23]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d143      	bne.n	8014c76 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	7b1b      	ldrb	r3, [r3, #12]
 8014bf8:	f003 030f 	and.w	r3, r3, #15
 8014bfc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	7b5b      	ldrb	r3, [r3, #13]
 8014c02:	f003 0302 	and.w	r3, r3, #2
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d011      	beq.n	8014c2e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	691b      	ldr	r3, [r3, #16]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d106      	bne.n	8014c24 <pbuf_free+0x9c>
 8014c16:	4b1d      	ldr	r3, [pc, #116]	@ (8014c8c <pbuf_free+0x104>)
 8014c18:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014c1c:	491f      	ldr	r1, [pc, #124]	@ (8014c9c <pbuf_free+0x114>)
 8014c1e:	481d      	ldr	r0, [pc, #116]	@ (8014c94 <pbuf_free+0x10c>)
 8014c20:	f00b fa10 	bl	8020044 <iprintf>
        pc->custom_free_function(p);
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	691b      	ldr	r3, [r3, #16]
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	4798      	blx	r3
 8014c2c:	e01d      	b.n	8014c6a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014c2e:	7bfb      	ldrb	r3, [r7, #15]
 8014c30:	2b02      	cmp	r3, #2
 8014c32:	d104      	bne.n	8014c3e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014c34:	6879      	ldr	r1, [r7, #4]
 8014c36:	200c      	movs	r0, #12
 8014c38:	f7ff f902 	bl	8013e40 <memp_free>
 8014c3c:	e015      	b.n	8014c6a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014c3e:	7bfb      	ldrb	r3, [r7, #15]
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d104      	bne.n	8014c4e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014c44:	6879      	ldr	r1, [r7, #4]
 8014c46:	200b      	movs	r0, #11
 8014c48:	f7ff f8fa 	bl	8013e40 <memp_free>
 8014c4c:	e00d      	b.n	8014c6a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014c4e:	7bfb      	ldrb	r3, [r7, #15]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d103      	bne.n	8014c5c <pbuf_free+0xd4>
          mem_free(p);
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f7fe fc77 	bl	8013548 <mem_free>
 8014c5a:	e006      	b.n	8014c6a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8014c8c <pbuf_free+0x104>)
 8014c5e:	f240 320f 	movw	r2, #783	@ 0x30f
 8014c62:	490f      	ldr	r1, [pc, #60]	@ (8014ca0 <pbuf_free+0x118>)
 8014c64:	480b      	ldr	r0, [pc, #44]	@ (8014c94 <pbuf_free+0x10c>)
 8014c66:	f00b f9ed 	bl	8020044 <iprintf>
        }
      }
      count++;
 8014c6a:	7ffb      	ldrb	r3, [r7, #31]
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014c70:	693b      	ldr	r3, [r7, #16]
 8014c72:	607b      	str	r3, [r7, #4]
 8014c74:	e001      	b.n	8014c7a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014c76:	2300      	movs	r3, #0
 8014c78:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d199      	bne.n	8014bb4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3720      	adds	r7, #32
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	0802221c 	.word	0x0802221c
 8014c90:	08022380 	.word	0x08022380
 8014c94:	0802227c 	.word	0x0802227c
 8014c98:	080223ac 	.word	0x080223ac
 8014c9c:	080223c4 	.word	0x080223c4
 8014ca0:	080223e8 	.word	0x080223e8

08014ca4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b085      	sub	sp, #20
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014cac:	2300      	movs	r3, #0
 8014cae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014cb0:	e005      	b.n	8014cbe <pbuf_clen+0x1a>
    ++len;
 8014cb2:	89fb      	ldrh	r3, [r7, #14]
 8014cb4:	3301      	adds	r3, #1
 8014cb6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d1f6      	bne.n	8014cb2 <pbuf_clen+0xe>
  }
  return len;
 8014cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3714      	adds	r7, #20
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr
	...

08014cd4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b084      	sub	sp, #16
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d016      	beq.n	8014d10 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014ce2:	f009 ff77 	bl	801ebd4 <sys_arch_protect>
 8014ce6:	60f8      	str	r0, [r7, #12]
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	7b9b      	ldrb	r3, [r3, #14]
 8014cec:	3301      	adds	r3, #1
 8014cee:	b2da      	uxtb	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	739a      	strb	r2, [r3, #14]
 8014cf4:	68f8      	ldr	r0, [r7, #12]
 8014cf6:	f009 ff7b 	bl	801ebf0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	7b9b      	ldrb	r3, [r3, #14]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d106      	bne.n	8014d10 <pbuf_ref+0x3c>
 8014d02:	4b05      	ldr	r3, [pc, #20]	@ (8014d18 <pbuf_ref+0x44>)
 8014d04:	f240 3242 	movw	r2, #834	@ 0x342
 8014d08:	4904      	ldr	r1, [pc, #16]	@ (8014d1c <pbuf_ref+0x48>)
 8014d0a:	4805      	ldr	r0, [pc, #20]	@ (8014d20 <pbuf_ref+0x4c>)
 8014d0c:	f00b f99a 	bl	8020044 <iprintf>
  }
}
 8014d10:	bf00      	nop
 8014d12:	3710      	adds	r7, #16
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	0802221c 	.word	0x0802221c
 8014d1c:	080223fc 	.word	0x080223fc
 8014d20:	0802227c 	.word	0x0802227c

08014d24 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d002      	beq.n	8014d3a <pbuf_cat+0x16>
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d107      	bne.n	8014d4a <pbuf_cat+0x26>
 8014d3a:	4b20      	ldr	r3, [pc, #128]	@ (8014dbc <pbuf_cat+0x98>)
 8014d3c:	f240 3259 	movw	r2, #857	@ 0x359
 8014d40:	491f      	ldr	r1, [pc, #124]	@ (8014dc0 <pbuf_cat+0x9c>)
 8014d42:	4820      	ldr	r0, [pc, #128]	@ (8014dc4 <pbuf_cat+0xa0>)
 8014d44:	f00b f97e 	bl	8020044 <iprintf>
 8014d48:	e034      	b.n	8014db4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	60fb      	str	r3, [r7, #12]
 8014d4e:	e00a      	b.n	8014d66 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	891a      	ldrh	r2, [r3, #8]
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	891b      	ldrh	r3, [r3, #8]
 8014d58:	4413      	add	r3, r2
 8014d5a:	b29a      	uxth	r2, r3
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	60fb      	str	r3, [r7, #12]
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d1f0      	bne.n	8014d50 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	891a      	ldrh	r2, [r3, #8]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	895b      	ldrh	r3, [r3, #10]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d006      	beq.n	8014d88 <pbuf_cat+0x64>
 8014d7a:	4b10      	ldr	r3, [pc, #64]	@ (8014dbc <pbuf_cat+0x98>)
 8014d7c:	f240 3262 	movw	r2, #866	@ 0x362
 8014d80:	4911      	ldr	r1, [pc, #68]	@ (8014dc8 <pbuf_cat+0xa4>)
 8014d82:	4810      	ldr	r0, [pc, #64]	@ (8014dc4 <pbuf_cat+0xa0>)
 8014d84:	f00b f95e 	bl	8020044 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d006      	beq.n	8014d9e <pbuf_cat+0x7a>
 8014d90:	4b0a      	ldr	r3, [pc, #40]	@ (8014dbc <pbuf_cat+0x98>)
 8014d92:	f240 3263 	movw	r2, #867	@ 0x363
 8014d96:	490d      	ldr	r1, [pc, #52]	@ (8014dcc <pbuf_cat+0xa8>)
 8014d98:	480a      	ldr	r0, [pc, #40]	@ (8014dc4 <pbuf_cat+0xa0>)
 8014d9a:	f00b f953 	bl	8020044 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	891a      	ldrh	r2, [r3, #8]
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	891b      	ldrh	r3, [r3, #8]
 8014da6:	4413      	add	r3, r2
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	683a      	ldr	r2, [r7, #0]
 8014db2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014db4:	3710      	adds	r7, #16
 8014db6:	46bd      	mov	sp, r7
 8014db8:	bd80      	pop	{r7, pc}
 8014dba:	bf00      	nop
 8014dbc:	0802221c 	.word	0x0802221c
 8014dc0:	08022410 	.word	0x08022410
 8014dc4:	0802227c 	.word	0x0802227c
 8014dc8:	08022448 	.word	0x08022448
 8014dcc:	08022478 	.word	0x08022478

08014dd0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014dda:	6839      	ldr	r1, [r7, #0]
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f7ff ffa1 	bl	8014d24 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014de2:	6838      	ldr	r0, [r7, #0]
 8014de4:	f7ff ff76 	bl	8014cd4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014de8:	bf00      	nop
 8014dea:	3708      	adds	r7, #8
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b086      	sub	sp, #24
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	617b      	str	r3, [r7, #20]
 8014dfe:	2300      	movs	r3, #0
 8014e00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d008      	beq.n	8014e1a <pbuf_copy+0x2a>
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d005      	beq.n	8014e1a <pbuf_copy+0x2a>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	891a      	ldrh	r2, [r3, #8]
 8014e12:	683b      	ldr	r3, [r7, #0]
 8014e14:	891b      	ldrh	r3, [r3, #8]
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d209      	bcs.n	8014e2e <pbuf_copy+0x3e>
 8014e1a:	4b57      	ldr	r3, [pc, #348]	@ (8014f78 <pbuf_copy+0x188>)
 8014e1c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014e20:	4956      	ldr	r1, [pc, #344]	@ (8014f7c <pbuf_copy+0x18c>)
 8014e22:	4857      	ldr	r0, [pc, #348]	@ (8014f80 <pbuf_copy+0x190>)
 8014e24:	f00b f90e 	bl	8020044 <iprintf>
 8014e28:	f06f 030f 	mvn.w	r3, #15
 8014e2c:	e09f      	b.n	8014f6e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	895b      	ldrh	r3, [r3, #10]
 8014e32:	461a      	mov	r2, r3
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	1ad2      	subs	r2, r2, r3
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	895b      	ldrh	r3, [r3, #10]
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	1acb      	subs	r3, r1, r3
 8014e42:	429a      	cmp	r2, r3
 8014e44:	d306      	bcc.n	8014e54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	895b      	ldrh	r3, [r3, #10]
 8014e4a:	461a      	mov	r2, r3
 8014e4c:	693b      	ldr	r3, [r7, #16]
 8014e4e:	1ad3      	subs	r3, r2, r3
 8014e50:	60fb      	str	r3, [r7, #12]
 8014e52:	e005      	b.n	8014e60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	895b      	ldrh	r3, [r3, #10]
 8014e58:	461a      	mov	r2, r3
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	1ad3      	subs	r3, r2, r3
 8014e5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	685a      	ldr	r2, [r3, #4]
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	18d0      	adds	r0, r2, r3
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	685a      	ldr	r2, [r3, #4]
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	4413      	add	r3, r2
 8014e70:	68fa      	ldr	r2, [r7, #12]
 8014e72:	4619      	mov	r1, r3
 8014e74:	f00b fb11 	bl	802049a <memcpy>
    offset_to += len;
 8014e78:	697a      	ldr	r2, [r7, #20]
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014e80:	693a      	ldr	r2, [r7, #16]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	4413      	add	r3, r2
 8014e86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	895b      	ldrh	r3, [r3, #10]
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d906      	bls.n	8014ea2 <pbuf_copy+0xb2>
 8014e94:	4b38      	ldr	r3, [pc, #224]	@ (8014f78 <pbuf_copy+0x188>)
 8014e96:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8014e9a:	493a      	ldr	r1, [pc, #232]	@ (8014f84 <pbuf_copy+0x194>)
 8014e9c:	4838      	ldr	r0, [pc, #224]	@ (8014f80 <pbuf_copy+0x190>)
 8014e9e:	f00b f8d1 	bl	8020044 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	895b      	ldrh	r3, [r3, #10]
 8014ea6:	461a      	mov	r2, r3
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	4293      	cmp	r3, r2
 8014eac:	d906      	bls.n	8014ebc <pbuf_copy+0xcc>
 8014eae:	4b32      	ldr	r3, [pc, #200]	@ (8014f78 <pbuf_copy+0x188>)
 8014eb0:	f240 32da 	movw	r2, #986	@ 0x3da
 8014eb4:	4934      	ldr	r1, [pc, #208]	@ (8014f88 <pbuf_copy+0x198>)
 8014eb6:	4832      	ldr	r0, [pc, #200]	@ (8014f80 <pbuf_copy+0x190>)
 8014eb8:	f00b f8c4 	bl	8020044 <iprintf>
    if (offset_from >= p_from->len) {
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	895b      	ldrh	r3, [r3, #10]
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d304      	bcc.n	8014ed2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	895b      	ldrh	r3, [r3, #10]
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	4293      	cmp	r3, r2
 8014edc:	d114      	bne.n	8014f08 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10c      	bne.n	8014f08 <pbuf_copy+0x118>
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d009      	beq.n	8014f08 <pbuf_copy+0x118>
 8014ef4:	4b20      	ldr	r3, [pc, #128]	@ (8014f78 <pbuf_copy+0x188>)
 8014ef6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8014efa:	4924      	ldr	r1, [pc, #144]	@ (8014f8c <pbuf_copy+0x19c>)
 8014efc:	4820      	ldr	r0, [pc, #128]	@ (8014f80 <pbuf_copy+0x190>)
 8014efe:	f00b f8a1 	bl	8020044 <iprintf>
 8014f02:	f06f 030f 	mvn.w	r3, #15
 8014f06:	e032      	b.n	8014f6e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014f08:	683b      	ldr	r3, [r7, #0]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d013      	beq.n	8014f36 <pbuf_copy+0x146>
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	895a      	ldrh	r2, [r3, #10]
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	891b      	ldrh	r3, [r3, #8]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d10d      	bne.n	8014f36 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d009      	beq.n	8014f36 <pbuf_copy+0x146>
 8014f22:	4b15      	ldr	r3, [pc, #84]	@ (8014f78 <pbuf_copy+0x188>)
 8014f24:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8014f28:	4919      	ldr	r1, [pc, #100]	@ (8014f90 <pbuf_copy+0x1a0>)
 8014f2a:	4815      	ldr	r0, [pc, #84]	@ (8014f80 <pbuf_copy+0x190>)
 8014f2c:	f00b f88a 	bl	8020044 <iprintf>
 8014f30:	f06f 0305 	mvn.w	r3, #5
 8014f34:	e01b      	b.n	8014f6e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d013      	beq.n	8014f64 <pbuf_copy+0x174>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	895a      	ldrh	r2, [r3, #10]
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	891b      	ldrh	r3, [r3, #8]
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d10d      	bne.n	8014f64 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d009      	beq.n	8014f64 <pbuf_copy+0x174>
 8014f50:	4b09      	ldr	r3, [pc, #36]	@ (8014f78 <pbuf_copy+0x188>)
 8014f52:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8014f56:	490e      	ldr	r1, [pc, #56]	@ (8014f90 <pbuf_copy+0x1a0>)
 8014f58:	4809      	ldr	r0, [pc, #36]	@ (8014f80 <pbuf_copy+0x190>)
 8014f5a:	f00b f873 	bl	8020044 <iprintf>
 8014f5e:	f06f 0305 	mvn.w	r3, #5
 8014f62:	e004      	b.n	8014f6e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	f47f af61 	bne.w	8014e2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014f6c:	2300      	movs	r3, #0
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3718      	adds	r7, #24
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	0802221c 	.word	0x0802221c
 8014f7c:	080224c4 	.word	0x080224c4
 8014f80:	0802227c 	.word	0x0802227c
 8014f84:	080224f4 	.word	0x080224f4
 8014f88:	0802250c 	.word	0x0802250c
 8014f8c:	08022528 	.word	0x08022528
 8014f90:	08022538 	.word	0x08022538

08014f94 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b088      	sub	sp, #32
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	60f8      	str	r0, [r7, #12]
 8014f9c:	60b9      	str	r1, [r7, #8]
 8014f9e:	4611      	mov	r1, r2
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	460b      	mov	r3, r1
 8014fa4:	80fb      	strh	r3, [r7, #6]
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014faa:	2300      	movs	r3, #0
 8014fac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d108      	bne.n	8014fca <pbuf_copy_partial+0x36>
 8014fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8015068 <pbuf_copy_partial+0xd4>)
 8014fba:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014fbe:	492b      	ldr	r1, [pc, #172]	@ (801506c <pbuf_copy_partial+0xd8>)
 8014fc0:	482b      	ldr	r0, [pc, #172]	@ (8015070 <pbuf_copy_partial+0xdc>)
 8014fc2:	f00b f83f 	bl	8020044 <iprintf>
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	e04a      	b.n	8015060 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014fca:	68bb      	ldr	r3, [r7, #8]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d108      	bne.n	8014fe2 <pbuf_copy_partial+0x4e>
 8014fd0:	4b25      	ldr	r3, [pc, #148]	@ (8015068 <pbuf_copy_partial+0xd4>)
 8014fd2:	f240 420b 	movw	r2, #1035	@ 0x40b
 8014fd6:	4927      	ldr	r1, [pc, #156]	@ (8015074 <pbuf_copy_partial+0xe0>)
 8014fd8:	4825      	ldr	r0, [pc, #148]	@ (8015070 <pbuf_copy_partial+0xdc>)
 8014fda:	f00b f833 	bl	8020044 <iprintf>
 8014fde:	2300      	movs	r3, #0
 8014fe0:	e03e      	b.n	8015060 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	61fb      	str	r3, [r7, #28]
 8014fe6:	e034      	b.n	8015052 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014fe8:	88bb      	ldrh	r3, [r7, #4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00a      	beq.n	8015004 <pbuf_copy_partial+0x70>
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	895b      	ldrh	r3, [r3, #10]
 8014ff2:	88ba      	ldrh	r2, [r7, #4]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d305      	bcc.n	8015004 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014ff8:	69fb      	ldr	r3, [r7, #28]
 8014ffa:	895b      	ldrh	r3, [r3, #10]
 8014ffc:	88ba      	ldrh	r2, [r7, #4]
 8014ffe:	1ad3      	subs	r3, r2, r3
 8015000:	80bb      	strh	r3, [r7, #4]
 8015002:	e023      	b.n	801504c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015004:	69fb      	ldr	r3, [r7, #28]
 8015006:	895a      	ldrh	r2, [r3, #10]
 8015008:	88bb      	ldrh	r3, [r7, #4]
 801500a:	1ad3      	subs	r3, r2, r3
 801500c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801500e:	8b3a      	ldrh	r2, [r7, #24]
 8015010:	88fb      	ldrh	r3, [r7, #6]
 8015012:	429a      	cmp	r2, r3
 8015014:	d901      	bls.n	801501a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8015016:	88fb      	ldrh	r3, [r7, #6]
 8015018:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801501a:	8b7b      	ldrh	r3, [r7, #26]
 801501c:	68ba      	ldr	r2, [r7, #8]
 801501e:	18d0      	adds	r0, r2, r3
 8015020:	69fb      	ldr	r3, [r7, #28]
 8015022:	685a      	ldr	r2, [r3, #4]
 8015024:	88bb      	ldrh	r3, [r7, #4]
 8015026:	4413      	add	r3, r2
 8015028:	8b3a      	ldrh	r2, [r7, #24]
 801502a:	4619      	mov	r1, r3
 801502c:	f00b fa35 	bl	802049a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015030:	8afa      	ldrh	r2, [r7, #22]
 8015032:	8b3b      	ldrh	r3, [r7, #24]
 8015034:	4413      	add	r3, r2
 8015036:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015038:	8b7a      	ldrh	r2, [r7, #26]
 801503a:	8b3b      	ldrh	r3, [r7, #24]
 801503c:	4413      	add	r3, r2
 801503e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015040:	88fa      	ldrh	r2, [r7, #6]
 8015042:	8b3b      	ldrh	r3, [r7, #24]
 8015044:	1ad3      	subs	r3, r2, r3
 8015046:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015048:	2300      	movs	r3, #0
 801504a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801504c:	69fb      	ldr	r3, [r7, #28]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	61fb      	str	r3, [r7, #28]
 8015052:	88fb      	ldrh	r3, [r7, #6]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d002      	beq.n	801505e <pbuf_copy_partial+0xca>
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d1c4      	bne.n	8014fe8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801505e:	8afb      	ldrh	r3, [r7, #22]
}
 8015060:	4618      	mov	r0, r3
 8015062:	3720      	adds	r7, #32
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}
 8015068:	0802221c 	.word	0x0802221c
 801506c:	08022564 	.word	0x08022564
 8015070:	0802227c 	.word	0x0802227c
 8015074:	08022584 	.word	0x08022584

08015078 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b084      	sub	sp, #16
 801507c:	af00      	add	r7, sp, #0
 801507e:	4603      	mov	r3, r0
 8015080:	603a      	str	r2, [r7, #0]
 8015082:	71fb      	strb	r3, [r7, #7]
 8015084:	460b      	mov	r3, r1
 8015086:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	8919      	ldrh	r1, [r3, #8]
 801508c:	88ba      	ldrh	r2, [r7, #4]
 801508e:	79fb      	ldrb	r3, [r7, #7]
 8015090:	4618      	mov	r0, r3
 8015092:	f7ff fa95 	bl	80145c0 <pbuf_alloc>
 8015096:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d101      	bne.n	80150a2 <pbuf_clone+0x2a>
    return NULL;
 801509e:	2300      	movs	r3, #0
 80150a0:	e011      	b.n	80150c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80150a2:	6839      	ldr	r1, [r7, #0]
 80150a4:	68f8      	ldr	r0, [r7, #12]
 80150a6:	f7ff fea3 	bl	8014df0 <pbuf_copy>
 80150aa:	4603      	mov	r3, r0
 80150ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80150ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d006      	beq.n	80150c4 <pbuf_clone+0x4c>
 80150b6:	4b06      	ldr	r3, [pc, #24]	@ (80150d0 <pbuf_clone+0x58>)
 80150b8:	f240 5224 	movw	r2, #1316	@ 0x524
 80150bc:	4905      	ldr	r1, [pc, #20]	@ (80150d4 <pbuf_clone+0x5c>)
 80150be:	4806      	ldr	r0, [pc, #24]	@ (80150d8 <pbuf_clone+0x60>)
 80150c0:	f00a ffc0 	bl	8020044 <iprintf>
  return q;
 80150c4:	68fb      	ldr	r3, [r7, #12]
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3710      	adds	r7, #16
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	0802221c 	.word	0x0802221c
 80150d4:	08022690 	.word	0x08022690
 80150d8:	0802227c 	.word	0x0802227c

080150dc <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80150dc:	b480      	push	{r7}
 80150de:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80150e0:	bf00      	nop
 80150e2:	46bd      	mov	sp, r7
 80150e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e8:	4770      	bx	lr
	...

080150ec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80150f0:	f00a fea8 	bl	801fe44 <rand>
 80150f4:	4603      	mov	r3, r0
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015102:	b29a      	uxth	r2, r3
 8015104:	4b01      	ldr	r3, [pc, #4]	@ (801510c <tcp_init+0x20>)
 8015106:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015108:	bf00      	nop
 801510a:	bd80      	pop	{r7, pc}
 801510c:	20000024 	.word	0x20000024

08015110 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	7d1b      	ldrb	r3, [r3, #20]
 801511c:	2b01      	cmp	r3, #1
 801511e:	d105      	bne.n	801512c <tcp_free+0x1c>
 8015120:	4b06      	ldr	r3, [pc, #24]	@ (801513c <tcp_free+0x2c>)
 8015122:	22d4      	movs	r2, #212	@ 0xd4
 8015124:	4906      	ldr	r1, [pc, #24]	@ (8015140 <tcp_free+0x30>)
 8015126:	4807      	ldr	r0, [pc, #28]	@ (8015144 <tcp_free+0x34>)
 8015128:	f00a ff8c 	bl	8020044 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801512c:	6879      	ldr	r1, [r7, #4]
 801512e:	2001      	movs	r0, #1
 8015130:	f7fe fe86 	bl	8013e40 <memp_free>
}
 8015134:	bf00      	nop
 8015136:	3708      	adds	r7, #8
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	0802271c 	.word	0x0802271c
 8015140:	0802274c 	.word	0x0802274c
 8015144:	08022760 	.word	0x08022760

08015148 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	7d1b      	ldrb	r3, [r3, #20]
 8015154:	2b01      	cmp	r3, #1
 8015156:	d105      	bne.n	8015164 <tcp_free_listen+0x1c>
 8015158:	4b06      	ldr	r3, [pc, #24]	@ (8015174 <tcp_free_listen+0x2c>)
 801515a:	22df      	movs	r2, #223	@ 0xdf
 801515c:	4906      	ldr	r1, [pc, #24]	@ (8015178 <tcp_free_listen+0x30>)
 801515e:	4807      	ldr	r0, [pc, #28]	@ (801517c <tcp_free_listen+0x34>)
 8015160:	f00a ff70 	bl	8020044 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015164:	6879      	ldr	r1, [r7, #4]
 8015166:	2002      	movs	r0, #2
 8015168:	f7fe fe6a 	bl	8013e40 <memp_free>
}
 801516c:	bf00      	nop
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}
 8015174:	0802271c 	.word	0x0802271c
 8015178:	08022788 	.word	0x08022788
 801517c:	08022760 	.word	0x08022760

08015180 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015184:	f000 ffde 	bl	8016144 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015188:	4b07      	ldr	r3, [pc, #28]	@ (80151a8 <tcp_tmr+0x28>)
 801518a:	781b      	ldrb	r3, [r3, #0]
 801518c:	3301      	adds	r3, #1
 801518e:	b2da      	uxtb	r2, r3
 8015190:	4b05      	ldr	r3, [pc, #20]	@ (80151a8 <tcp_tmr+0x28>)
 8015192:	701a      	strb	r2, [r3, #0]
 8015194:	4b04      	ldr	r3, [pc, #16]	@ (80151a8 <tcp_tmr+0x28>)
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	f003 0301 	and.w	r3, r3, #1
 801519c:	2b00      	cmp	r3, #0
 801519e:	d001      	beq.n	80151a4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80151a0:	f000 fc8e 	bl	8015ac0 <tcp_slowtmr>
  }
}
 80151a4:	bf00      	nop
 80151a6:	bd80      	pop	{r7, pc}
 80151a8:	2002d3c1 	.word	0x2002d3c1

080151ac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b084      	sub	sp, #16
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d105      	bne.n	80151c8 <tcp_remove_listener+0x1c>
 80151bc:	4b0d      	ldr	r3, [pc, #52]	@ (80151f4 <tcp_remove_listener+0x48>)
 80151be:	22ff      	movs	r2, #255	@ 0xff
 80151c0:	490d      	ldr	r1, [pc, #52]	@ (80151f8 <tcp_remove_listener+0x4c>)
 80151c2:	480e      	ldr	r0, [pc, #56]	@ (80151fc <tcp_remove_listener+0x50>)
 80151c4:	f00a ff3e 	bl	8020044 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	60fb      	str	r3, [r7, #12]
 80151cc:	e00a      	b.n	80151e4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80151d2:	683a      	ldr	r2, [r7, #0]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d102      	bne.n	80151de <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2200      	movs	r2, #0
 80151dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	68db      	ldr	r3, [r3, #12]
 80151e2:	60fb      	str	r3, [r7, #12]
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d1f1      	bne.n	80151ce <tcp_remove_listener+0x22>
    }
  }
}
 80151ea:	bf00      	nop
 80151ec:	bf00      	nop
 80151ee:	3710      	adds	r7, #16
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}
 80151f4:	0802271c 	.word	0x0802271c
 80151f8:	080227a4 	.word	0x080227a4
 80151fc:	08022760 	.word	0x08022760

08015200 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d106      	bne.n	801521c <tcp_listen_closed+0x1c>
 801520e:	4b14      	ldr	r3, [pc, #80]	@ (8015260 <tcp_listen_closed+0x60>)
 8015210:	f240 1211 	movw	r2, #273	@ 0x111
 8015214:	4913      	ldr	r1, [pc, #76]	@ (8015264 <tcp_listen_closed+0x64>)
 8015216:	4814      	ldr	r0, [pc, #80]	@ (8015268 <tcp_listen_closed+0x68>)
 8015218:	f00a ff14 	bl	8020044 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	7d1b      	ldrb	r3, [r3, #20]
 8015220:	2b01      	cmp	r3, #1
 8015222:	d006      	beq.n	8015232 <tcp_listen_closed+0x32>
 8015224:	4b0e      	ldr	r3, [pc, #56]	@ (8015260 <tcp_listen_closed+0x60>)
 8015226:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801522a:	4910      	ldr	r1, [pc, #64]	@ (801526c <tcp_listen_closed+0x6c>)
 801522c:	480e      	ldr	r0, [pc, #56]	@ (8015268 <tcp_listen_closed+0x68>)
 801522e:	f00a ff09 	bl	8020044 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015232:	2301      	movs	r3, #1
 8015234:	60fb      	str	r3, [r7, #12]
 8015236:	e00b      	b.n	8015250 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015238:	4a0d      	ldr	r2, [pc, #52]	@ (8015270 <tcp_listen_closed+0x70>)
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	6879      	ldr	r1, [r7, #4]
 8015244:	4618      	mov	r0, r3
 8015246:	f7ff ffb1 	bl	80151ac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	3301      	adds	r3, #1
 801524e:	60fb      	str	r3, [r7, #12]
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2b03      	cmp	r3, #3
 8015254:	d9f0      	bls.n	8015238 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015256:	bf00      	nop
 8015258:	bf00      	nop
 801525a:	3710      	adds	r7, #16
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	0802271c 	.word	0x0802271c
 8015264:	080227cc 	.word	0x080227cc
 8015268:	08022760 	.word	0x08022760
 801526c:	080227d8 	.word	0x080227d8
 8015270:	08024d90 	.word	0x08024d90

08015274 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015274:	b5b0      	push	{r4, r5, r7, lr}
 8015276:	b088      	sub	sp, #32
 8015278:	af04      	add	r7, sp, #16
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	460b      	mov	r3, r1
 801527e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d106      	bne.n	8015294 <tcp_close_shutdown+0x20>
 8015286:	4b63      	ldr	r3, [pc, #396]	@ (8015414 <tcp_close_shutdown+0x1a0>)
 8015288:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801528c:	4962      	ldr	r1, [pc, #392]	@ (8015418 <tcp_close_shutdown+0x1a4>)
 801528e:	4863      	ldr	r0, [pc, #396]	@ (801541c <tcp_close_shutdown+0x1a8>)
 8015290:	f00a fed8 	bl	8020044 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015294:	78fb      	ldrb	r3, [r7, #3]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d066      	beq.n	8015368 <tcp_close_shutdown+0xf4>
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	7d1b      	ldrb	r3, [r3, #20]
 801529e:	2b04      	cmp	r3, #4
 80152a0:	d003      	beq.n	80152aa <tcp_close_shutdown+0x36>
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	7d1b      	ldrb	r3, [r3, #20]
 80152a6:	2b07      	cmp	r3, #7
 80152a8:	d15e      	bne.n	8015368 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d104      	bne.n	80152bc <tcp_close_shutdown+0x48>
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152b6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80152ba:	d055      	beq.n	8015368 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	8b5b      	ldrh	r3, [r3, #26]
 80152c0:	f003 0310 	and.w	r3, r3, #16
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d106      	bne.n	80152d6 <tcp_close_shutdown+0x62>
 80152c8:	4b52      	ldr	r3, [pc, #328]	@ (8015414 <tcp_close_shutdown+0x1a0>)
 80152ca:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80152ce:	4954      	ldr	r1, [pc, #336]	@ (8015420 <tcp_close_shutdown+0x1ac>)
 80152d0:	4852      	ldr	r0, [pc, #328]	@ (801541c <tcp_close_shutdown+0x1a8>)
 80152d2:	f00a feb7 	bl	8020044 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80152de:	687d      	ldr	r5, [r7, #4]
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	3304      	adds	r3, #4
 80152e4:	687a      	ldr	r2, [r7, #4]
 80152e6:	8ad2      	ldrh	r2, [r2, #22]
 80152e8:	6879      	ldr	r1, [r7, #4]
 80152ea:	8b09      	ldrh	r1, [r1, #24]
 80152ec:	9102      	str	r1, [sp, #8]
 80152ee:	9201      	str	r2, [sp, #4]
 80152f0:	9300      	str	r3, [sp, #0]
 80152f2:	462b      	mov	r3, r5
 80152f4:	4622      	mov	r2, r4
 80152f6:	4601      	mov	r1, r0
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	f005 fdcb 	bl	801ae94 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	f001 fafa 	bl	80168f8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015304:	4b47      	ldr	r3, [pc, #284]	@ (8015424 <tcp_close_shutdown+0x1b0>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	687a      	ldr	r2, [r7, #4]
 801530a:	429a      	cmp	r2, r3
 801530c:	d105      	bne.n	801531a <tcp_close_shutdown+0xa6>
 801530e:	4b45      	ldr	r3, [pc, #276]	@ (8015424 <tcp_close_shutdown+0x1b0>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	68db      	ldr	r3, [r3, #12]
 8015314:	4a43      	ldr	r2, [pc, #268]	@ (8015424 <tcp_close_shutdown+0x1b0>)
 8015316:	6013      	str	r3, [r2, #0]
 8015318:	e013      	b.n	8015342 <tcp_close_shutdown+0xce>
 801531a:	4b42      	ldr	r3, [pc, #264]	@ (8015424 <tcp_close_shutdown+0x1b0>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	60fb      	str	r3, [r7, #12]
 8015320:	e00c      	b.n	801533c <tcp_close_shutdown+0xc8>
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	68db      	ldr	r3, [r3, #12]
 8015326:	687a      	ldr	r2, [r7, #4]
 8015328:	429a      	cmp	r2, r3
 801532a:	d104      	bne.n	8015336 <tcp_close_shutdown+0xc2>
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	68da      	ldr	r2, [r3, #12]
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	60da      	str	r2, [r3, #12]
 8015334:	e005      	b.n	8015342 <tcp_close_shutdown+0xce>
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	68db      	ldr	r3, [r3, #12]
 801533a:	60fb      	str	r3, [r7, #12]
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d1ef      	bne.n	8015322 <tcp_close_shutdown+0xae>
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2200      	movs	r2, #0
 8015346:	60da      	str	r2, [r3, #12]
 8015348:	4b37      	ldr	r3, [pc, #220]	@ (8015428 <tcp_close_shutdown+0x1b4>)
 801534a:	2201      	movs	r2, #1
 801534c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801534e:	4b37      	ldr	r3, [pc, #220]	@ (801542c <tcp_close_shutdown+0x1b8>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	687a      	ldr	r2, [r7, #4]
 8015354:	429a      	cmp	r2, r3
 8015356:	d102      	bne.n	801535e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015358:	f003 fff4 	bl	8019344 <tcp_trigger_input_pcb_close>
 801535c:	e002      	b.n	8015364 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f7ff fed6 	bl	8015110 <tcp_free>
      }
      return ERR_OK;
 8015364:	2300      	movs	r3, #0
 8015366:	e050      	b.n	801540a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	7d1b      	ldrb	r3, [r3, #20]
 801536c:	2b02      	cmp	r3, #2
 801536e:	d03b      	beq.n	80153e8 <tcp_close_shutdown+0x174>
 8015370:	2b02      	cmp	r3, #2
 8015372:	dc44      	bgt.n	80153fe <tcp_close_shutdown+0x18a>
 8015374:	2b00      	cmp	r3, #0
 8015376:	d002      	beq.n	801537e <tcp_close_shutdown+0x10a>
 8015378:	2b01      	cmp	r3, #1
 801537a:	d02a      	beq.n	80153d2 <tcp_close_shutdown+0x15e>
 801537c:	e03f      	b.n	80153fe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	8adb      	ldrh	r3, [r3, #22]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d021      	beq.n	80153ca <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015386:	4b2a      	ldr	r3, [pc, #168]	@ (8015430 <tcp_close_shutdown+0x1bc>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	687a      	ldr	r2, [r7, #4]
 801538c:	429a      	cmp	r2, r3
 801538e:	d105      	bne.n	801539c <tcp_close_shutdown+0x128>
 8015390:	4b27      	ldr	r3, [pc, #156]	@ (8015430 <tcp_close_shutdown+0x1bc>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	68db      	ldr	r3, [r3, #12]
 8015396:	4a26      	ldr	r2, [pc, #152]	@ (8015430 <tcp_close_shutdown+0x1bc>)
 8015398:	6013      	str	r3, [r2, #0]
 801539a:	e013      	b.n	80153c4 <tcp_close_shutdown+0x150>
 801539c:	4b24      	ldr	r3, [pc, #144]	@ (8015430 <tcp_close_shutdown+0x1bc>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	60bb      	str	r3, [r7, #8]
 80153a2:	e00c      	b.n	80153be <tcp_close_shutdown+0x14a>
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	68db      	ldr	r3, [r3, #12]
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d104      	bne.n	80153b8 <tcp_close_shutdown+0x144>
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	68da      	ldr	r2, [r3, #12]
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	60da      	str	r2, [r3, #12]
 80153b6:	e005      	b.n	80153c4 <tcp_close_shutdown+0x150>
 80153b8:	68bb      	ldr	r3, [r7, #8]
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	60bb      	str	r3, [r7, #8]
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d1ef      	bne.n	80153a4 <tcp_close_shutdown+0x130>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2200      	movs	r2, #0
 80153c8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f7ff fea0 	bl	8015110 <tcp_free>
      break;
 80153d0:	e01a      	b.n	8015408 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f7ff ff14 	bl	8015200 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80153d8:	6879      	ldr	r1, [r7, #4]
 80153da:	4816      	ldr	r0, [pc, #88]	@ (8015434 <tcp_close_shutdown+0x1c0>)
 80153dc:	f001 fadc 	bl	8016998 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f7ff feb1 	bl	8015148 <tcp_free_listen>
      break;
 80153e6:	e00f      	b.n	8015408 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80153e8:	6879      	ldr	r1, [r7, #4]
 80153ea:	480e      	ldr	r0, [pc, #56]	@ (8015424 <tcp_close_shutdown+0x1b0>)
 80153ec:	f001 fad4 	bl	8016998 <tcp_pcb_remove>
 80153f0:	4b0d      	ldr	r3, [pc, #52]	@ (8015428 <tcp_close_shutdown+0x1b4>)
 80153f2:	2201      	movs	r2, #1
 80153f4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f7ff fe8a 	bl	8015110 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80153fc:	e004      	b.n	8015408 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f000 f81a 	bl	8015438 <tcp_close_shutdown_fin>
 8015404:	4603      	mov	r3, r0
 8015406:	e000      	b.n	801540a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8015408:	2300      	movs	r3, #0
}
 801540a:	4618      	mov	r0, r3
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bdb0      	pop	{r4, r5, r7, pc}
 8015412:	bf00      	nop
 8015414:	0802271c 	.word	0x0802271c
 8015418:	080227f0 	.word	0x080227f0
 801541c:	08022760 	.word	0x08022760
 8015420:	08022810 	.word	0x08022810
 8015424:	2002d3b8 	.word	0x2002d3b8
 8015428:	2002d3c0 	.word	0x2002d3c0
 801542c:	2002d3f8 	.word	0x2002d3f8
 8015430:	2002d3b0 	.word	0x2002d3b0
 8015434:	2002d3b4 	.word	0x2002d3b4

08015438 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b084      	sub	sp, #16
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d106      	bne.n	8015454 <tcp_close_shutdown_fin+0x1c>
 8015446:	4b2e      	ldr	r3, [pc, #184]	@ (8015500 <tcp_close_shutdown_fin+0xc8>)
 8015448:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801544c:	492d      	ldr	r1, [pc, #180]	@ (8015504 <tcp_close_shutdown_fin+0xcc>)
 801544e:	482e      	ldr	r0, [pc, #184]	@ (8015508 <tcp_close_shutdown_fin+0xd0>)
 8015450:	f00a fdf8 	bl	8020044 <iprintf>

  switch (pcb->state) {
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	7d1b      	ldrb	r3, [r3, #20]
 8015458:	2b07      	cmp	r3, #7
 801545a:	d020      	beq.n	801549e <tcp_close_shutdown_fin+0x66>
 801545c:	2b07      	cmp	r3, #7
 801545e:	dc2b      	bgt.n	80154b8 <tcp_close_shutdown_fin+0x80>
 8015460:	2b03      	cmp	r3, #3
 8015462:	d002      	beq.n	801546a <tcp_close_shutdown_fin+0x32>
 8015464:	2b04      	cmp	r3, #4
 8015466:	d00d      	beq.n	8015484 <tcp_close_shutdown_fin+0x4c>
 8015468:	e026      	b.n	80154b8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f004 fdfa 	bl	801a064 <tcp_send_fin>
 8015470:	4603      	mov	r3, r0
 8015472:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d11f      	bne.n	80154bc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2205      	movs	r2, #5
 8015480:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015482:	e01b      	b.n	80154bc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f004 fded 	bl	801a064 <tcp_send_fin>
 801548a:	4603      	mov	r3, r0
 801548c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801548e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d114      	bne.n	80154c0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2205      	movs	r2, #5
 801549a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801549c:	e010      	b.n	80154c0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801549e:	6878      	ldr	r0, [r7, #4]
 80154a0:	f004 fde0 	bl	801a064 <tcp_send_fin>
 80154a4:	4603      	mov	r3, r0
 80154a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80154a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d109      	bne.n	80154c4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2209      	movs	r2, #9
 80154b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80154b6:	e005      	b.n	80154c4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80154b8:	2300      	movs	r3, #0
 80154ba:	e01c      	b.n	80154f6 <tcp_close_shutdown_fin+0xbe>
      break;
 80154bc:	bf00      	nop
 80154be:	e002      	b.n	80154c6 <tcp_close_shutdown_fin+0x8e>
      break;
 80154c0:	bf00      	nop
 80154c2:	e000      	b.n	80154c6 <tcp_close_shutdown_fin+0x8e>
      break;
 80154c4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80154c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d103      	bne.n	80154d6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f004 ff18 	bl	801a304 <tcp_output>
 80154d4:	e00d      	b.n	80154f2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80154d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80154de:	d108      	bne.n	80154f2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	8b5b      	ldrh	r3, [r3, #26]
 80154e4:	f043 0308 	orr.w	r3, r3, #8
 80154e8:	b29a      	uxth	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80154ee:	2300      	movs	r3, #0
 80154f0:	e001      	b.n	80154f6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80154f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3710      	adds	r7, #16
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	0802271c 	.word	0x0802271c
 8015504:	080227cc 	.word	0x080227cc
 8015508:	08022760 	.word	0x08022760

0801550c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d109      	bne.n	801552e <tcp_close+0x22>
 801551a:	4b0f      	ldr	r3, [pc, #60]	@ (8015558 <tcp_close+0x4c>)
 801551c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8015520:	490e      	ldr	r1, [pc, #56]	@ (801555c <tcp_close+0x50>)
 8015522:	480f      	ldr	r0, [pc, #60]	@ (8015560 <tcp_close+0x54>)
 8015524:	f00a fd8e 	bl	8020044 <iprintf>
 8015528:	f06f 030f 	mvn.w	r3, #15
 801552c:	e00f      	b.n	801554e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	7d1b      	ldrb	r3, [r3, #20]
 8015532:	2b01      	cmp	r3, #1
 8015534:	d006      	beq.n	8015544 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	8b5b      	ldrh	r3, [r3, #26]
 801553a:	f043 0310 	orr.w	r3, r3, #16
 801553e:	b29a      	uxth	r2, r3
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015544:	2101      	movs	r1, #1
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7ff fe94 	bl	8015274 <tcp_close_shutdown>
 801554c:	4603      	mov	r3, r0
}
 801554e:	4618      	mov	r0, r3
 8015550:	3708      	adds	r7, #8
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	0802271c 	.word	0x0802271c
 801555c:	0802282c 	.word	0x0802282c
 8015560:	08022760 	.word	0x08022760

08015564 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b084      	sub	sp, #16
 8015568:	af00      	add	r7, sp, #0
 801556a:	60f8      	str	r0, [r7, #12]
 801556c:	60b9      	str	r1, [r7, #8]
 801556e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d109      	bne.n	801558a <tcp_shutdown+0x26>
 8015576:	4b26      	ldr	r3, [pc, #152]	@ (8015610 <tcp_shutdown+0xac>)
 8015578:	f240 2207 	movw	r2, #519	@ 0x207
 801557c:	4925      	ldr	r1, [pc, #148]	@ (8015614 <tcp_shutdown+0xb0>)
 801557e:	4826      	ldr	r0, [pc, #152]	@ (8015618 <tcp_shutdown+0xb4>)
 8015580:	f00a fd60 	bl	8020044 <iprintf>
 8015584:	f06f 030f 	mvn.w	r3, #15
 8015588:	e03d      	b.n	8015606 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	7d1b      	ldrb	r3, [r3, #20]
 801558e:	2b01      	cmp	r3, #1
 8015590:	d102      	bne.n	8015598 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015592:	f06f 030a 	mvn.w	r3, #10
 8015596:	e036      	b.n	8015606 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d01b      	beq.n	80155d6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	8b5b      	ldrh	r3, [r3, #26]
 80155a2:	f043 0310 	orr.w	r3, r3, #16
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d005      	beq.n	80155be <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80155b2:	2101      	movs	r1, #1
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f7ff fe5d 	bl	8015274 <tcp_close_shutdown>
 80155ba:	4603      	mov	r3, r0
 80155bc:	e023      	b.n	8015606 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d007      	beq.n	80155d6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7ff fadc 	bl	8014b88 <pbuf_free>
      pcb->refused_data = NULL;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2200      	movs	r2, #0
 80155d4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d013      	beq.n	8015604 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	7d1b      	ldrb	r3, [r3, #20]
 80155e0:	2b04      	cmp	r3, #4
 80155e2:	dc02      	bgt.n	80155ea <tcp_shutdown+0x86>
 80155e4:	2b03      	cmp	r3, #3
 80155e6:	da02      	bge.n	80155ee <tcp_shutdown+0x8a>
 80155e8:	e009      	b.n	80155fe <tcp_shutdown+0x9a>
 80155ea:	2b07      	cmp	r3, #7
 80155ec:	d107      	bne.n	80155fe <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	b2db      	uxtb	r3, r3
 80155f2:	4619      	mov	r1, r3
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f7ff fe3d 	bl	8015274 <tcp_close_shutdown>
 80155fa:	4603      	mov	r3, r0
 80155fc:	e003      	b.n	8015606 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80155fe:	f06f 030a 	mvn.w	r3, #10
 8015602:	e000      	b.n	8015606 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015604:	2300      	movs	r3, #0
}
 8015606:	4618      	mov	r0, r3
 8015608:	3710      	adds	r7, #16
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
 801560e:	bf00      	nop
 8015610:	0802271c 	.word	0x0802271c
 8015614:	08022844 	.word	0x08022844
 8015618:	08022760 	.word	0x08022760

0801561c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b08e      	sub	sp, #56	@ 0x38
 8015620:	af04      	add	r7, sp, #16
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d107      	bne.n	801563c <tcp_abandon+0x20>
 801562c:	4b52      	ldr	r3, [pc, #328]	@ (8015778 <tcp_abandon+0x15c>)
 801562e:	f240 223d 	movw	r2, #573	@ 0x23d
 8015632:	4952      	ldr	r1, [pc, #328]	@ (801577c <tcp_abandon+0x160>)
 8015634:	4852      	ldr	r0, [pc, #328]	@ (8015780 <tcp_abandon+0x164>)
 8015636:	f00a fd05 	bl	8020044 <iprintf>
 801563a:	e099      	b.n	8015770 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	7d1b      	ldrb	r3, [r3, #20]
 8015640:	2b01      	cmp	r3, #1
 8015642:	d106      	bne.n	8015652 <tcp_abandon+0x36>
 8015644:	4b4c      	ldr	r3, [pc, #304]	@ (8015778 <tcp_abandon+0x15c>)
 8015646:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801564a:	494e      	ldr	r1, [pc, #312]	@ (8015784 <tcp_abandon+0x168>)
 801564c:	484c      	ldr	r0, [pc, #304]	@ (8015780 <tcp_abandon+0x164>)
 801564e:	f00a fcf9 	bl	8020044 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	7d1b      	ldrb	r3, [r3, #20]
 8015656:	2b0a      	cmp	r3, #10
 8015658:	d107      	bne.n	801566a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801565a:	6879      	ldr	r1, [r7, #4]
 801565c:	484a      	ldr	r0, [pc, #296]	@ (8015788 <tcp_abandon+0x16c>)
 801565e:	f001 f99b 	bl	8016998 <tcp_pcb_remove>
    tcp_free(pcb);
 8015662:	6878      	ldr	r0, [r7, #4]
 8015664:	f7ff fd54 	bl	8015110 <tcp_free>
 8015668:	e082      	b.n	8015770 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801566a:	2300      	movs	r3, #0
 801566c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801566e:	2300      	movs	r3, #0
 8015670:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015676:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801567c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015684:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	691b      	ldr	r3, [r3, #16]
 801568a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	7d1b      	ldrb	r3, [r3, #20]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d126      	bne.n	80156e2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	8adb      	ldrh	r3, [r3, #22]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d02e      	beq.n	80156fa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801569c:	4b3b      	ldr	r3, [pc, #236]	@ (801578c <tcp_abandon+0x170>)
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	687a      	ldr	r2, [r7, #4]
 80156a2:	429a      	cmp	r2, r3
 80156a4:	d105      	bne.n	80156b2 <tcp_abandon+0x96>
 80156a6:	4b39      	ldr	r3, [pc, #228]	@ (801578c <tcp_abandon+0x170>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	68db      	ldr	r3, [r3, #12]
 80156ac:	4a37      	ldr	r2, [pc, #220]	@ (801578c <tcp_abandon+0x170>)
 80156ae:	6013      	str	r3, [r2, #0]
 80156b0:	e013      	b.n	80156da <tcp_abandon+0xbe>
 80156b2:	4b36      	ldr	r3, [pc, #216]	@ (801578c <tcp_abandon+0x170>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	61fb      	str	r3, [r7, #28]
 80156b8:	e00c      	b.n	80156d4 <tcp_abandon+0xb8>
 80156ba:	69fb      	ldr	r3, [r7, #28]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	687a      	ldr	r2, [r7, #4]
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d104      	bne.n	80156ce <tcp_abandon+0xb2>
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	68da      	ldr	r2, [r3, #12]
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	60da      	str	r2, [r3, #12]
 80156cc:	e005      	b.n	80156da <tcp_abandon+0xbe>
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	68db      	ldr	r3, [r3, #12]
 80156d2:	61fb      	str	r3, [r7, #28]
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d1ef      	bne.n	80156ba <tcp_abandon+0x9e>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2200      	movs	r2, #0
 80156de:	60da      	str	r2, [r3, #12]
 80156e0:	e00b      	b.n	80156fa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	8adb      	ldrh	r3, [r3, #22]
 80156ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80156ec:	6879      	ldr	r1, [r7, #4]
 80156ee:	4828      	ldr	r0, [pc, #160]	@ (8015790 <tcp_abandon+0x174>)
 80156f0:	f001 f952 	bl	8016998 <tcp_pcb_remove>
 80156f4:	4b27      	ldr	r3, [pc, #156]	@ (8015794 <tcp_abandon+0x178>)
 80156f6:	2201      	movs	r2, #1
 80156f8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d004      	beq.n	801570c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015706:	4618      	mov	r0, r3
 8015708:	f000 fdfc 	bl	8016304 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015710:	2b00      	cmp	r3, #0
 8015712:	d004      	beq.n	801571e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015718:	4618      	mov	r0, r3
 801571a:	f000 fdf3 	bl	8016304 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015722:	2b00      	cmp	r3, #0
 8015724:	d004      	beq.n	8015730 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801572a:	4618      	mov	r0, r3
 801572c:	f000 fdea 	bl	8016304 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015732:	2b00      	cmp	r3, #0
 8015734:	d00e      	beq.n	8015754 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015736:	6879      	ldr	r1, [r7, #4]
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	3304      	adds	r3, #4
 801573c:	687a      	ldr	r2, [r7, #4]
 801573e:	8b12      	ldrh	r2, [r2, #24]
 8015740:	9202      	str	r2, [sp, #8]
 8015742:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015744:	9201      	str	r2, [sp, #4]
 8015746:	9300      	str	r3, [sp, #0]
 8015748:	460b      	mov	r3, r1
 801574a:	697a      	ldr	r2, [r7, #20]
 801574c:	69b9      	ldr	r1, [r7, #24]
 801574e:	6878      	ldr	r0, [r7, #4]
 8015750:	f005 fba0 	bl	801ae94 <tcp_rst>
    }
    last_state = pcb->state;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	7d1b      	ldrb	r3, [r3, #20]
 8015758:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801575a:	6878      	ldr	r0, [r7, #4]
 801575c:	f7ff fcd8 	bl	8015110 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d004      	beq.n	8015770 <tcp_abandon+0x154>
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	f06f 010c 	mvn.w	r1, #12
 801576c:	68f8      	ldr	r0, [r7, #12]
 801576e:	4798      	blx	r3
  }
}
 8015770:	3728      	adds	r7, #40	@ 0x28
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}
 8015776:	bf00      	nop
 8015778:	0802271c 	.word	0x0802271c
 801577c:	08022860 	.word	0x08022860
 8015780:	08022760 	.word	0x08022760
 8015784:	0802287c 	.word	0x0802287c
 8015788:	2002d3bc 	.word	0x2002d3bc
 801578c:	2002d3b0 	.word	0x2002d3b0
 8015790:	2002d3b8 	.word	0x2002d3b8
 8015794:	2002d3c0 	.word	0x2002d3c0

08015798 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80157a0:	2101      	movs	r1, #1
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7ff ff3a 	bl	801561c <tcp_abandon>
}
 80157a8:	bf00      	nop
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}

080157b0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b088      	sub	sp, #32
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	60b9      	str	r1, [r7, #8]
 80157ba:	4613      	mov	r3, r2
 80157bc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80157be:	2304      	movs	r3, #4
 80157c0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80157c2:	68bb      	ldr	r3, [r7, #8]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d101      	bne.n	80157cc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80157c8:	4b3e      	ldr	r3, [pc, #248]	@ (80158c4 <tcp_bind+0x114>)
 80157ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d109      	bne.n	80157e6 <tcp_bind+0x36>
 80157d2:	4b3d      	ldr	r3, [pc, #244]	@ (80158c8 <tcp_bind+0x118>)
 80157d4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80157d8:	493c      	ldr	r1, [pc, #240]	@ (80158cc <tcp_bind+0x11c>)
 80157da:	483d      	ldr	r0, [pc, #244]	@ (80158d0 <tcp_bind+0x120>)
 80157dc:	f00a fc32 	bl	8020044 <iprintf>
 80157e0:	f06f 030f 	mvn.w	r3, #15
 80157e4:	e06a      	b.n	80158bc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	7d1b      	ldrb	r3, [r3, #20]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d009      	beq.n	8015802 <tcp_bind+0x52>
 80157ee:	4b36      	ldr	r3, [pc, #216]	@ (80158c8 <tcp_bind+0x118>)
 80157f0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80157f4:	4937      	ldr	r1, [pc, #220]	@ (80158d4 <tcp_bind+0x124>)
 80157f6:	4836      	ldr	r0, [pc, #216]	@ (80158d0 <tcp_bind+0x120>)
 80157f8:	f00a fc24 	bl	8020044 <iprintf>
 80157fc:	f06f 0305 	mvn.w	r3, #5
 8015800:	e05c      	b.n	80158bc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8015802:	88fb      	ldrh	r3, [r7, #6]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d109      	bne.n	801581c <tcp_bind+0x6c>
    port = tcp_new_port();
 8015808:	f000 f914 	bl	8015a34 <tcp_new_port>
 801580c:	4603      	mov	r3, r0
 801580e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015810:	88fb      	ldrh	r3, [r7, #6]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d135      	bne.n	8015882 <tcp_bind+0xd2>
      return ERR_BUF;
 8015816:	f06f 0301 	mvn.w	r3, #1
 801581a:	e04f      	b.n	80158bc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801581c:	2300      	movs	r3, #0
 801581e:	61fb      	str	r3, [r7, #28]
 8015820:	e02b      	b.n	801587a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015822:	4a2d      	ldr	r2, [pc, #180]	@ (80158d8 <tcp_bind+0x128>)
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	61bb      	str	r3, [r7, #24]
 801582e:	e01e      	b.n	801586e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015830:	69bb      	ldr	r3, [r7, #24]
 8015832:	8adb      	ldrh	r3, [r3, #22]
 8015834:	88fa      	ldrh	r2, [r7, #6]
 8015836:	429a      	cmp	r2, r3
 8015838:	d116      	bne.n	8015868 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801583a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801583c:	2b00      	cmp	r3, #0
 801583e:	d010      	beq.n	8015862 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015840:	69bb      	ldr	r3, [r7, #24]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d00c      	beq.n	8015862 <tcp_bind+0xb2>
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d009      	beq.n	8015862 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d005      	beq.n	8015862 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015856:	69bb      	ldr	r3, [r7, #24]
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801585e:	429a      	cmp	r2, r3
 8015860:	d102      	bne.n	8015868 <tcp_bind+0xb8>
              return ERR_USE;
 8015862:	f06f 0307 	mvn.w	r3, #7
 8015866:	e029      	b.n	80158bc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015868:	69bb      	ldr	r3, [r7, #24]
 801586a:	68db      	ldr	r3, [r3, #12]
 801586c:	61bb      	str	r3, [r7, #24]
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d1dd      	bne.n	8015830 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	3301      	adds	r3, #1
 8015878:	61fb      	str	r3, [r7, #28]
 801587a:	69fa      	ldr	r2, [r7, #28]
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	429a      	cmp	r2, r3
 8015880:	dbcf      	blt.n	8015822 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00c      	beq.n	80158a2 <tcp_bind+0xf2>
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d008      	beq.n	80158a2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015890:	68bb      	ldr	r3, [r7, #8]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d002      	beq.n	801589c <tcp_bind+0xec>
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	e000      	b.n	801589e <tcp_bind+0xee>
 801589c:	2300      	movs	r3, #0
 801589e:	68fa      	ldr	r2, [r7, #12]
 80158a0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	88fa      	ldrh	r2, [r7, #6]
 80158a6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80158a8:	4b0c      	ldr	r3, [pc, #48]	@ (80158dc <tcp_bind+0x12c>)
 80158aa:	681a      	ldr	r2, [r3, #0]
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	60da      	str	r2, [r3, #12]
 80158b0:	4a0a      	ldr	r2, [pc, #40]	@ (80158dc <tcp_bind+0x12c>)
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	6013      	str	r3, [r2, #0]
 80158b6:	f005 fcaf 	bl	801b218 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80158ba:	2300      	movs	r3, #0
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3720      	adds	r7, #32
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	08024db8 	.word	0x08024db8
 80158c8:	0802271c 	.word	0x0802271c
 80158cc:	080228b0 	.word	0x080228b0
 80158d0:	08022760 	.word	0x08022760
 80158d4:	080228c8 	.word	0x080228c8
 80158d8:	08024d90 	.word	0x08024d90
 80158dc:	2002d3b0 	.word	0x2002d3b0

080158e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b084      	sub	sp, #16
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d106      	bne.n	80158fc <tcp_update_rcv_ann_wnd+0x1c>
 80158ee:	4b25      	ldr	r3, [pc, #148]	@ (8015984 <tcp_update_rcv_ann_wnd+0xa4>)
 80158f0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80158f4:	4924      	ldr	r1, [pc, #144]	@ (8015988 <tcp_update_rcv_ann_wnd+0xa8>)
 80158f6:	4825      	ldr	r0, [pc, #148]	@ (801598c <tcp_update_rcv_ann_wnd+0xac>)
 80158f8:	f00a fba4 	bl	8020044 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015900:	687a      	ldr	r2, [r7, #4]
 8015902:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015904:	4413      	add	r3, r2
 8015906:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8015910:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015914:	bf28      	it	cs
 8015916:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801591a:	b292      	uxth	r2, r2
 801591c:	4413      	add	r3, r2
 801591e:	68fa      	ldr	r2, [r7, #12]
 8015920:	1ad3      	subs	r3, r2, r3
 8015922:	2b00      	cmp	r3, #0
 8015924:	db08      	blt.n	8015938 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015932:	68fa      	ldr	r2, [r7, #12]
 8015934:	1ad3      	subs	r3, r2, r3
 8015936:	e020      	b.n	801597a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015940:	1ad3      	subs	r3, r2, r3
 8015942:	2b00      	cmp	r3, #0
 8015944:	dd03      	ble.n	801594e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	2200      	movs	r2, #0
 801594a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801594c:	e014      	b.n	8015978 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015956:	1ad3      	subs	r3, r2, r3
 8015958:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015960:	d306      	bcc.n	8015970 <tcp_update_rcv_ann_wnd+0x90>
 8015962:	4b08      	ldr	r3, [pc, #32]	@ (8015984 <tcp_update_rcv_ann_wnd+0xa4>)
 8015964:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8015968:	4909      	ldr	r1, [pc, #36]	@ (8015990 <tcp_update_rcv_ann_wnd+0xb0>)
 801596a:	4808      	ldr	r0, [pc, #32]	@ (801598c <tcp_update_rcv_ann_wnd+0xac>)
 801596c:	f00a fb6a 	bl	8020044 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	b29a      	uxth	r2, r3
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015978:	2300      	movs	r3, #0
  }
}
 801597a:	4618      	mov	r0, r3
 801597c:	3710      	adds	r7, #16
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}
 8015982:	bf00      	nop
 8015984:	0802271c 	.word	0x0802271c
 8015988:	08022978 	.word	0x08022978
 801598c:	08022760 	.word	0x08022760
 8015990:	0802299c 	.word	0x0802299c

08015994 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b084      	sub	sp, #16
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
 801599c:	460b      	mov	r3, r1
 801599e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d107      	bne.n	80159b6 <tcp_recved+0x22>
 80159a6:	4b1f      	ldr	r3, [pc, #124]	@ (8015a24 <tcp_recved+0x90>)
 80159a8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80159ac:	491e      	ldr	r1, [pc, #120]	@ (8015a28 <tcp_recved+0x94>)
 80159ae:	481f      	ldr	r0, [pc, #124]	@ (8015a2c <tcp_recved+0x98>)
 80159b0:	f00a fb48 	bl	8020044 <iprintf>
 80159b4:	e032      	b.n	8015a1c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	7d1b      	ldrb	r3, [r3, #20]
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d106      	bne.n	80159cc <tcp_recved+0x38>
 80159be:	4b19      	ldr	r3, [pc, #100]	@ (8015a24 <tcp_recved+0x90>)
 80159c0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80159c4:	491a      	ldr	r1, [pc, #104]	@ (8015a30 <tcp_recved+0x9c>)
 80159c6:	4819      	ldr	r0, [pc, #100]	@ (8015a2c <tcp_recved+0x98>)
 80159c8:	f00a fb3c 	bl	8020044 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80159d0:	887b      	ldrh	r3, [r7, #2]
 80159d2:	4413      	add	r3, r2
 80159d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80159d6:	89fb      	ldrh	r3, [r7, #14]
 80159d8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80159dc:	d804      	bhi.n	80159e8 <tcp_recved+0x54>
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159e2:	89fa      	ldrh	r2, [r7, #14]
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d204      	bcs.n	80159f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80159ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 80159f0:	e002      	b.n	80159f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	89fa      	ldrh	r2, [r7, #14]
 80159f6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f7ff ff71 	bl	80158e0 <tcp_update_rcv_ann_wnd>
 80159fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015a06:	d309      	bcc.n	8015a1c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	8b5b      	ldrh	r3, [r3, #26]
 8015a0c:	f043 0302 	orr.w	r3, r3, #2
 8015a10:	b29a      	uxth	r2, r3
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f004 fc74 	bl	801a304 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015a1c:	3710      	adds	r7, #16
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop
 8015a24:	0802271c 	.word	0x0802271c
 8015a28:	080229b8 	.word	0x080229b8
 8015a2c:	08022760 	.word	0x08022760
 8015a30:	080229d0 	.word	0x080229d0

08015a34 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015a34:	b480      	push	{r7}
 8015a36:	b083      	sub	sp, #12
 8015a38:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8015ab8 <tcp_new_port+0x84>)
 8015a40:	881b      	ldrh	r3, [r3, #0]
 8015a42:	3301      	adds	r3, #1
 8015a44:	b29a      	uxth	r2, r3
 8015a46:	4b1c      	ldr	r3, [pc, #112]	@ (8015ab8 <tcp_new_port+0x84>)
 8015a48:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8015ab8 <tcp_new_port+0x84>)
 8015a4c:	881b      	ldrh	r3, [r3, #0]
 8015a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a52:	4293      	cmp	r3, r2
 8015a54:	d103      	bne.n	8015a5e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015a56:	4b18      	ldr	r3, [pc, #96]	@ (8015ab8 <tcp_new_port+0x84>)
 8015a58:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015a5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015a5e:	2300      	movs	r3, #0
 8015a60:	71fb      	strb	r3, [r7, #7]
 8015a62:	e01e      	b.n	8015aa2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015a64:	79fb      	ldrb	r3, [r7, #7]
 8015a66:	4a15      	ldr	r2, [pc, #84]	@ (8015abc <tcp_new_port+0x88>)
 8015a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	603b      	str	r3, [r7, #0]
 8015a70:	e011      	b.n	8015a96 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	8ada      	ldrh	r2, [r3, #22]
 8015a76:	4b10      	ldr	r3, [pc, #64]	@ (8015ab8 <tcp_new_port+0x84>)
 8015a78:	881b      	ldrh	r3, [r3, #0]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d108      	bne.n	8015a90 <tcp_new_port+0x5c>
        n++;
 8015a7e:	88bb      	ldrh	r3, [r7, #4]
 8015a80:	3301      	adds	r3, #1
 8015a82:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015a84:	88bb      	ldrh	r3, [r7, #4]
 8015a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a8a:	d3d8      	bcc.n	8015a3e <tcp_new_port+0xa>
          return 0;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	e00d      	b.n	8015aac <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015a90:	683b      	ldr	r3, [r7, #0]
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	603b      	str	r3, [r7, #0]
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d1ea      	bne.n	8015a72 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015a9c:	79fb      	ldrb	r3, [r7, #7]
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	71fb      	strb	r3, [r7, #7]
 8015aa2:	79fb      	ldrb	r3, [r7, #7]
 8015aa4:	2b03      	cmp	r3, #3
 8015aa6:	d9dd      	bls.n	8015a64 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015aa8:	4b03      	ldr	r3, [pc, #12]	@ (8015ab8 <tcp_new_port+0x84>)
 8015aaa:	881b      	ldrh	r3, [r3, #0]
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	370c      	adds	r7, #12
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab6:	4770      	bx	lr
 8015ab8:	20000024 	.word	0x20000024
 8015abc:	08024d90 	.word	0x08024d90

08015ac0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015ac0:	b5b0      	push	{r4, r5, r7, lr}
 8015ac2:	b090      	sub	sp, #64	@ 0x40
 8015ac4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015acc:	4b95      	ldr	r3, [pc, #596]	@ (8015d24 <tcp_slowtmr+0x264>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	4a94      	ldr	r2, [pc, #592]	@ (8015d24 <tcp_slowtmr+0x264>)
 8015ad4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015ad6:	4b94      	ldr	r3, [pc, #592]	@ (8015d28 <tcp_slowtmr+0x268>)
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	3301      	adds	r3, #1
 8015adc:	b2da      	uxtb	r2, r3
 8015ade:	4b92      	ldr	r3, [pc, #584]	@ (8015d28 <tcp_slowtmr+0x268>)
 8015ae0:	701a      	strb	r2, [r3, #0]
 8015ae2:	e000      	b.n	8015ae6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015ae4:	bf00      	nop
  prev = NULL;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8015aea:	4b90      	ldr	r3, [pc, #576]	@ (8015d2c <tcp_slowtmr+0x26c>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015af0:	e29d      	b.n	801602e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015af4:	7d1b      	ldrb	r3, [r3, #20]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d106      	bne.n	8015b08 <tcp_slowtmr+0x48>
 8015afa:	4b8d      	ldr	r3, [pc, #564]	@ (8015d30 <tcp_slowtmr+0x270>)
 8015afc:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015b00:	498c      	ldr	r1, [pc, #560]	@ (8015d34 <tcp_slowtmr+0x274>)
 8015b02:	488d      	ldr	r0, [pc, #564]	@ (8015d38 <tcp_slowtmr+0x278>)
 8015b04:	f00a fa9e 	bl	8020044 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b0a:	7d1b      	ldrb	r3, [r3, #20]
 8015b0c:	2b01      	cmp	r3, #1
 8015b0e:	d106      	bne.n	8015b1e <tcp_slowtmr+0x5e>
 8015b10:	4b87      	ldr	r3, [pc, #540]	@ (8015d30 <tcp_slowtmr+0x270>)
 8015b12:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015b16:	4989      	ldr	r1, [pc, #548]	@ (8015d3c <tcp_slowtmr+0x27c>)
 8015b18:	4887      	ldr	r0, [pc, #540]	@ (8015d38 <tcp_slowtmr+0x278>)
 8015b1a:	f00a fa93 	bl	8020044 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b20:	7d1b      	ldrb	r3, [r3, #20]
 8015b22:	2b0a      	cmp	r3, #10
 8015b24:	d106      	bne.n	8015b34 <tcp_slowtmr+0x74>
 8015b26:	4b82      	ldr	r3, [pc, #520]	@ (8015d30 <tcp_slowtmr+0x270>)
 8015b28:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015b2c:	4984      	ldr	r1, [pc, #528]	@ (8015d40 <tcp_slowtmr+0x280>)
 8015b2e:	4882      	ldr	r0, [pc, #520]	@ (8015d38 <tcp_slowtmr+0x278>)
 8015b30:	f00a fa88 	bl	8020044 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b36:	7f9a      	ldrb	r2, [r3, #30]
 8015b38:	4b7b      	ldr	r3, [pc, #492]	@ (8015d28 <tcp_slowtmr+0x268>)
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	d105      	bne.n	8015b4c <tcp_slowtmr+0x8c>
      prev = pcb;
 8015b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b42:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b46:	68db      	ldr	r3, [r3, #12]
 8015b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8015b4a:	e270      	b.n	801602e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8015b4c:	4b76      	ldr	r3, [pc, #472]	@ (8015d28 <tcp_slowtmr+0x268>)
 8015b4e:	781a      	ldrb	r2, [r3, #0]
 8015b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b52:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015b54:	2300      	movs	r3, #0
 8015b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b62:	7d1b      	ldrb	r3, [r3, #20]
 8015b64:	2b02      	cmp	r3, #2
 8015b66:	d10a      	bne.n	8015b7e <tcp_slowtmr+0xbe>
 8015b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015b6e:	2b05      	cmp	r3, #5
 8015b70:	d905      	bls.n	8015b7e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015b72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b76:	3301      	adds	r3, #1
 8015b78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b7c:	e11e      	b.n	8015dbc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015b84:	2b0b      	cmp	r3, #11
 8015b86:	d905      	bls.n	8015b94 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b92:	e113      	b.n	8015dbc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b96:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d075      	beq.n	8015c8a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d006      	beq.n	8015bb4 <tcp_slowtmr+0xf4>
 8015ba6:	4b62      	ldr	r3, [pc, #392]	@ (8015d30 <tcp_slowtmr+0x270>)
 8015ba8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015bac:	4965      	ldr	r1, [pc, #404]	@ (8015d44 <tcp_slowtmr+0x284>)
 8015bae:	4862      	ldr	r0, [pc, #392]	@ (8015d38 <tcp_slowtmr+0x278>)
 8015bb0:	f00a fa48 	bl	8020044 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d106      	bne.n	8015bca <tcp_slowtmr+0x10a>
 8015bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8015d30 <tcp_slowtmr+0x270>)
 8015bbe:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015bc2:	4961      	ldr	r1, [pc, #388]	@ (8015d48 <tcp_slowtmr+0x288>)
 8015bc4:	485c      	ldr	r0, [pc, #368]	@ (8015d38 <tcp_slowtmr+0x278>)
 8015bc6:	f00a fa3d 	bl	8020044 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bcc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015bd0:	2b0b      	cmp	r3, #11
 8015bd2:	d905      	bls.n	8015be0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015bd8:	3301      	adds	r3, #1
 8015bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015bde:	e0ed      	b.n	8015dbc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015be2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015be6:	3b01      	subs	r3, #1
 8015be8:	4a58      	ldr	r2, [pc, #352]	@ (8015d4c <tcp_slowtmr+0x28c>)
 8015bea:	5cd3      	ldrb	r3, [r2, r3]
 8015bec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bf0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015bf4:	7c7a      	ldrb	r2, [r7, #17]
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d907      	bls.n	8015c0a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8015bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bfc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015c00:	3301      	adds	r3, #1
 8015c02:	b2da      	uxtb	r2, r3
 8015c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c06:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8015c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c0c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015c10:	7c7a      	ldrb	r2, [r7, #17]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	f200 80d2 	bhi.w	8015dbc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015c18:	2301      	movs	r3, #1
 8015c1a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d108      	bne.n	8015c38 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015c26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015c28:	f005 fa28 	bl	801b07c <tcp_zero_window_probe>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d014      	beq.n	8015c5c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015c32:	2300      	movs	r3, #0
 8015c34:	623b      	str	r3, [r7, #32]
 8015c36:	e011      	b.n	8015c5c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015c3e:	4619      	mov	r1, r3
 8015c40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015c42:	f004 f8bd 	bl	8019dc0 <tcp_split_unsent_seg>
 8015c46:	4603      	mov	r3, r0
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d107      	bne.n	8015c5c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8015c4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015c4e:	f004 fb59 	bl	801a304 <tcp_output>
 8015c52:	4603      	mov	r3, r0
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d101      	bne.n	8015c5c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8015c5c:	6a3b      	ldr	r3, [r7, #32]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f000 80ac 	beq.w	8015dbc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c66:	2200      	movs	r2, #0
 8015c68:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c6e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015c72:	2b06      	cmp	r3, #6
 8015c74:	f200 80a2 	bhi.w	8015dbc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c7a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015c7e:	3301      	adds	r3, #1
 8015c80:	b2da      	uxtb	r2, r3
 8015c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c84:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015c88:	e098      	b.n	8015dbc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	db0f      	blt.n	8015cb4 <tcp_slowtmr+0x1f4>
 8015c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015c9a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015c9e:	4293      	cmp	r3, r2
 8015ca0:	d008      	beq.n	8015cb4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ca4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015ca8:	b29b      	uxth	r3, r3
 8015caa:	3301      	adds	r3, #1
 8015cac:	b29b      	uxth	r3, r3
 8015cae:	b21a      	sxth	r2, r3
 8015cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8015cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cbc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	db7b      	blt.n	8015dbc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015cc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015cc6:	f004 fe1b 	bl	801a900 <tcp_rexmit_rto_prepare>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d007      	beq.n	8015ce0 <tcp_slowtmr+0x220>
 8015cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d171      	bne.n	8015dbc <tcp_slowtmr+0x2fc>
 8015cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d06d      	beq.n	8015dbc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ce2:	7d1b      	ldrb	r3, [r3, #20]
 8015ce4:	2b02      	cmp	r3, #2
 8015ce6:	d03a      	beq.n	8015d5e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015cee:	2b0c      	cmp	r3, #12
 8015cf0:	bf28      	it	cs
 8015cf2:	230c      	movcs	r3, #12
 8015cf4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015cfc:	10db      	asrs	r3, r3, #3
 8015cfe:	b21b      	sxth	r3, r3
 8015d00:	461a      	mov	r2, r3
 8015d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d04:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015d08:	4413      	add	r3, r2
 8015d0a:	7efa      	ldrb	r2, [r7, #27]
 8015d0c:	4910      	ldr	r1, [pc, #64]	@ (8015d50 <tcp_slowtmr+0x290>)
 8015d0e:	5c8a      	ldrb	r2, [r1, r2]
 8015d10:	4093      	lsls	r3, r2
 8015d12:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8015d1a:	4293      	cmp	r3, r2
 8015d1c:	dc1a      	bgt.n	8015d54 <tcp_slowtmr+0x294>
 8015d1e:	697b      	ldr	r3, [r7, #20]
 8015d20:	b21a      	sxth	r2, r3
 8015d22:	e019      	b.n	8015d58 <tcp_slowtmr+0x298>
 8015d24:	2002d3ac 	.word	0x2002d3ac
 8015d28:	2002d3c2 	.word	0x2002d3c2
 8015d2c:	2002d3b8 	.word	0x2002d3b8
 8015d30:	0802271c 	.word	0x0802271c
 8015d34:	08022a60 	.word	0x08022a60
 8015d38:	08022760 	.word	0x08022760
 8015d3c:	08022a8c 	.word	0x08022a8c
 8015d40:	08022ab8 	.word	0x08022ab8
 8015d44:	08022ae8 	.word	0x08022ae8
 8015d48:	08022b1c 	.word	0x08022b1c
 8015d4c:	08024d88 	.word	0x08024d88
 8015d50:	08024d78 	.word	0x08024d78
 8015d54:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8015d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d60:	2200      	movs	r2, #0
 8015d62:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015d70:	4293      	cmp	r3, r2
 8015d72:	bf28      	it	cs
 8015d74:	4613      	movcs	r3, r2
 8015d76:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015d78:	8a7b      	ldrh	r3, [r7, #18]
 8015d7a:	085b      	lsrs	r3, r3, #1
 8015d7c:	b29a      	uxth	r2, r3
 8015d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d80:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d8e:	005b      	lsls	r3, r3, #1
 8015d90:	b29b      	uxth	r3, r3
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d206      	bcs.n	8015da4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d9a:	005b      	lsls	r3, r3, #1
 8015d9c:	b29a      	uxth	r2, r3
 8015d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015da6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015daa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8015dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db0:	2200      	movs	r2, #0
 8015db2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015db6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015db8:	f004 fe12 	bl	801a9e0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dbe:	7d1b      	ldrb	r3, [r3, #20]
 8015dc0:	2b06      	cmp	r3, #6
 8015dc2:	d111      	bne.n	8015de8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dc6:	8b5b      	ldrh	r3, [r3, #26]
 8015dc8:	f003 0310 	and.w	r3, r3, #16
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d00b      	beq.n	8015de8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015dd0:	4b9c      	ldr	r3, [pc, #624]	@ (8016044 <tcp_slowtmr+0x584>)
 8015dd2:	681a      	ldr	r2, [r3, #0]
 8015dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd6:	6a1b      	ldr	r3, [r3, #32]
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	2b28      	cmp	r3, #40	@ 0x28
 8015ddc:	d904      	bls.n	8015de8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8015dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015de2:	3301      	adds	r3, #1
 8015de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dea:	7a5b      	ldrb	r3, [r3, #9]
 8015dec:	f003 0308 	and.w	r3, r3, #8
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d04a      	beq.n	8015e8a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015df8:	2b04      	cmp	r3, #4
 8015dfa:	d003      	beq.n	8015e04 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dfe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015e00:	2b07      	cmp	r3, #7
 8015e02:	d142      	bne.n	8015e8a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015e04:	4b8f      	ldr	r3, [pc, #572]	@ (8016044 <tcp_slowtmr+0x584>)
 8015e06:	681a      	ldr	r2, [r3, #0]
 8015e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e0a:	6a1b      	ldr	r3, [r3, #32]
 8015e0c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e10:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015e14:	4b8c      	ldr	r3, [pc, #560]	@ (8016048 <tcp_slowtmr+0x588>)
 8015e16:	440b      	add	r3, r1
 8015e18:	498c      	ldr	r1, [pc, #560]	@ (801604c <tcp_slowtmr+0x58c>)
 8015e1a:	fba1 1303 	umull	r1, r3, r1, r3
 8015e1e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d90a      	bls.n	8015e3a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015e24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e28:	3301      	adds	r3, #1
 8015e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8015e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e32:	3301      	adds	r3, #1
 8015e34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015e38:	e027      	b.n	8015e8a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015e3a:	4b82      	ldr	r3, [pc, #520]	@ (8016044 <tcp_slowtmr+0x584>)
 8015e3c:	681a      	ldr	r2, [r3, #0]
 8015e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e40:	6a1b      	ldr	r3, [r3, #32]
 8015e42:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e46:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015e50:	4618      	mov	r0, r3
 8015e52:	4b7f      	ldr	r3, [pc, #508]	@ (8016050 <tcp_slowtmr+0x590>)
 8015e54:	fb00 f303 	mul.w	r3, r0, r3
 8015e58:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015e5a:	497c      	ldr	r1, [pc, #496]	@ (801604c <tcp_slowtmr+0x58c>)
 8015e5c:	fba1 1303 	umull	r1, r3, r1, r3
 8015e60:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015e62:	429a      	cmp	r2, r3
 8015e64:	d911      	bls.n	8015e8a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015e66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e68:	f005 f8c8 	bl	801affc <tcp_keepalive>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015e72:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d107      	bne.n	8015e8a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8015e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e7c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015e80:	3301      	adds	r3, #1
 8015e82:	b2da      	uxtb	r2, r3
 8015e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e86:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8015e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d011      	beq.n	8015eb6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015e92:	4b6c      	ldr	r3, [pc, #432]	@ (8016044 <tcp_slowtmr+0x584>)
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e98:	6a1b      	ldr	r3, [r3, #32]
 8015e9a:	1ad2      	subs	r2, r2, r3
 8015e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e9e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	440b      	add	r3, r1
 8015eaa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d302      	bcc.n	8015eb6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8015eb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015eb2:	f000 fed5 	bl	8016c60 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8015eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb8:	7d1b      	ldrb	r3, [r3, #20]
 8015eba:	2b03      	cmp	r3, #3
 8015ebc:	d10b      	bne.n	8015ed6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ebe:	4b61      	ldr	r3, [pc, #388]	@ (8016044 <tcp_slowtmr+0x584>)
 8015ec0:	681a      	ldr	r2, [r3, #0]
 8015ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec4:	6a1b      	ldr	r3, [r3, #32]
 8015ec6:	1ad3      	subs	r3, r2, r3
 8015ec8:	2b28      	cmp	r3, #40	@ 0x28
 8015eca:	d904      	bls.n	8015ed6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8015ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8015ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ed8:	7d1b      	ldrb	r3, [r3, #20]
 8015eda:	2b09      	cmp	r3, #9
 8015edc:	d10b      	bne.n	8015ef6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015ede:	4b59      	ldr	r3, [pc, #356]	@ (8016044 <tcp_slowtmr+0x584>)
 8015ee0:	681a      	ldr	r2, [r3, #0]
 8015ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ee4:	6a1b      	ldr	r3, [r3, #32]
 8015ee6:	1ad3      	subs	r3, r2, r3
 8015ee8:	2bf0      	cmp	r3, #240	@ 0xf0
 8015eea:	d904      	bls.n	8015ef6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8015ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d060      	beq.n	8015fc0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8015efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015f04:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8015f06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f08:	f000 fcf6 	bl	80168f8 <tcp_pcb_purge>
      if (prev != NULL) {
 8015f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d010      	beq.n	8015f34 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015f12:	4b50      	ldr	r3, [pc, #320]	@ (8016054 <tcp_slowtmr+0x594>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d106      	bne.n	8015f2a <tcp_slowtmr+0x46a>
 8015f1c:	4b4e      	ldr	r3, [pc, #312]	@ (8016058 <tcp_slowtmr+0x598>)
 8015f1e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8015f22:	494e      	ldr	r1, [pc, #312]	@ (801605c <tcp_slowtmr+0x59c>)
 8015f24:	484e      	ldr	r0, [pc, #312]	@ (8016060 <tcp_slowtmr+0x5a0>)
 8015f26:	f00a f88d 	bl	8020044 <iprintf>
        prev->next = pcb->next;
 8015f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f2c:	68da      	ldr	r2, [r3, #12]
 8015f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f30:	60da      	str	r2, [r3, #12]
 8015f32:	e00f      	b.n	8015f54 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015f34:	4b47      	ldr	r3, [pc, #284]	@ (8016054 <tcp_slowtmr+0x594>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d006      	beq.n	8015f4c <tcp_slowtmr+0x48c>
 8015f3e:	4b46      	ldr	r3, [pc, #280]	@ (8016058 <tcp_slowtmr+0x598>)
 8015f40:	f240 5271 	movw	r2, #1393	@ 0x571
 8015f44:	4947      	ldr	r1, [pc, #284]	@ (8016064 <tcp_slowtmr+0x5a4>)
 8015f46:	4846      	ldr	r0, [pc, #280]	@ (8016060 <tcp_slowtmr+0x5a0>)
 8015f48:	f00a f87c 	bl	8020044 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f4e:	68db      	ldr	r3, [r3, #12]
 8015f50:	4a40      	ldr	r2, [pc, #256]	@ (8016054 <tcp_slowtmr+0x594>)
 8015f52:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015f54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d013      	beq.n	8015f84 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f5e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f62:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015f64:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f68:	3304      	adds	r3, #4
 8015f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015f6c:	8ad2      	ldrh	r2, [r2, #22]
 8015f6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015f70:	8b09      	ldrh	r1, [r1, #24]
 8015f72:	9102      	str	r1, [sp, #8]
 8015f74:	9201      	str	r2, [sp, #4]
 8015f76:	9300      	str	r3, [sp, #0]
 8015f78:	462b      	mov	r3, r5
 8015f7a:	4622      	mov	r2, r4
 8015f7c:	4601      	mov	r1, r0
 8015f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f80:	f004 ff88 	bl	801ae94 <tcp_rst>
      err_arg = pcb->callback_arg;
 8015f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f86:	691b      	ldr	r3, [r3, #16]
 8015f88:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f8c:	7d1b      	ldrb	r3, [r3, #20]
 8015f8e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f92:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f96:	68db      	ldr	r3, [r3, #12]
 8015f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015f9a:	6838      	ldr	r0, [r7, #0]
 8015f9c:	f7ff f8b8 	bl	8015110 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015fa0:	4b31      	ldr	r3, [pc, #196]	@ (8016068 <tcp_slowtmr+0x5a8>)
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d004      	beq.n	8015fb6 <tcp_slowtmr+0x4f6>
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	f06f 010c 	mvn.w	r1, #12
 8015fb2:	68b8      	ldr	r0, [r7, #8]
 8015fb4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8016068 <tcp_slowtmr+0x5a8>)
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d037      	beq.n	801602e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8015fbe:	e592      	b.n	8015ae6 <tcp_slowtmr+0x26>
      prev = pcb;
 8015fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fc6:	68db      	ldr	r3, [r3, #12]
 8015fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8015fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fcc:	7f1b      	ldrb	r3, [r3, #28]
 8015fce:	3301      	adds	r3, #1
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fd4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fd8:	7f1a      	ldrb	r2, [r3, #28]
 8015fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fdc:	7f5b      	ldrb	r3, [r3, #29]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d325      	bcc.n	801602e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8016068 <tcp_slowtmr+0x5a8>)
 8015fea:	2200      	movs	r2, #0
 8015fec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d00b      	beq.n	8016010 <tcp_slowtmr+0x550>
 8015ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016000:	6912      	ldr	r2, [r2, #16]
 8016002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016004:	4610      	mov	r0, r2
 8016006:	4798      	blx	r3
 8016008:	4603      	mov	r3, r0
 801600a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801600e:	e002      	b.n	8016016 <tcp_slowtmr+0x556>
 8016010:	2300      	movs	r3, #0
 8016012:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8016016:	4b14      	ldr	r3, [pc, #80]	@ (8016068 <tcp_slowtmr+0x5a8>)
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	f47f ad62 	bne.w	8015ae4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016020:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016024:	2b00      	cmp	r3, #0
 8016026:	d102      	bne.n	801602e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8016028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801602a:	f004 f96b 	bl	801a304 <tcp_output>
  while (pcb != NULL) {
 801602e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016030:	2b00      	cmp	r3, #0
 8016032:	f47f ad5e 	bne.w	8015af2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016036:	2300      	movs	r3, #0
 8016038:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801603a:	4b0c      	ldr	r3, [pc, #48]	@ (801606c <tcp_slowtmr+0x5ac>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016040:	e069      	b.n	8016116 <tcp_slowtmr+0x656>
 8016042:	bf00      	nop
 8016044:	2002d3ac 	.word	0x2002d3ac
 8016048:	000a4cb8 	.word	0x000a4cb8
 801604c:	10624dd3 	.word	0x10624dd3
 8016050:	000124f8 	.word	0x000124f8
 8016054:	2002d3b8 	.word	0x2002d3b8
 8016058:	0802271c 	.word	0x0802271c
 801605c:	08022b54 	.word	0x08022b54
 8016060:	08022760 	.word	0x08022760
 8016064:	08022b80 	.word	0x08022b80
 8016068:	2002d3c0 	.word	0x2002d3c0
 801606c:	2002d3bc 	.word	0x2002d3bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016072:	7d1b      	ldrb	r3, [r3, #20]
 8016074:	2b0a      	cmp	r3, #10
 8016076:	d006      	beq.n	8016086 <tcp_slowtmr+0x5c6>
 8016078:	4b2b      	ldr	r3, [pc, #172]	@ (8016128 <tcp_slowtmr+0x668>)
 801607a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801607e:	492b      	ldr	r1, [pc, #172]	@ (801612c <tcp_slowtmr+0x66c>)
 8016080:	482b      	ldr	r0, [pc, #172]	@ (8016130 <tcp_slowtmr+0x670>)
 8016082:	f009 ffdf 	bl	8020044 <iprintf>
    pcb_remove = 0;
 8016086:	2300      	movs	r3, #0
 8016088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801608c:	4b29      	ldr	r3, [pc, #164]	@ (8016134 <tcp_slowtmr+0x674>)
 801608e:	681a      	ldr	r2, [r3, #0]
 8016090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016092:	6a1b      	ldr	r3, [r3, #32]
 8016094:	1ad3      	subs	r3, r2, r3
 8016096:	2bf0      	cmp	r3, #240	@ 0xf0
 8016098:	d904      	bls.n	80160a4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801609a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801609e:	3301      	adds	r3, #1
 80160a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80160a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d02f      	beq.n	801610c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80160ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80160ae:	f000 fc23 	bl	80168f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80160b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d010      	beq.n	80160da <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80160b8:	4b1f      	ldr	r3, [pc, #124]	@ (8016138 <tcp_slowtmr+0x678>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80160be:	429a      	cmp	r2, r3
 80160c0:	d106      	bne.n	80160d0 <tcp_slowtmr+0x610>
 80160c2:	4b19      	ldr	r3, [pc, #100]	@ (8016128 <tcp_slowtmr+0x668>)
 80160c4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80160c8:	491c      	ldr	r1, [pc, #112]	@ (801613c <tcp_slowtmr+0x67c>)
 80160ca:	4819      	ldr	r0, [pc, #100]	@ (8016130 <tcp_slowtmr+0x670>)
 80160cc:	f009 ffba 	bl	8020044 <iprintf>
        prev->next = pcb->next;
 80160d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160d2:	68da      	ldr	r2, [r3, #12]
 80160d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160d6:	60da      	str	r2, [r3, #12]
 80160d8:	e00f      	b.n	80160fa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80160da:	4b17      	ldr	r3, [pc, #92]	@ (8016138 <tcp_slowtmr+0x678>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d006      	beq.n	80160f2 <tcp_slowtmr+0x632>
 80160e4:	4b10      	ldr	r3, [pc, #64]	@ (8016128 <tcp_slowtmr+0x668>)
 80160e6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80160ea:	4915      	ldr	r1, [pc, #84]	@ (8016140 <tcp_slowtmr+0x680>)
 80160ec:	4810      	ldr	r0, [pc, #64]	@ (8016130 <tcp_slowtmr+0x670>)
 80160ee:	f009 ffa9 	bl	8020044 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80160f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	4a10      	ldr	r2, [pc, #64]	@ (8016138 <tcp_slowtmr+0x678>)
 80160f8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80160fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160fc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80160fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016100:	68db      	ldr	r3, [r3, #12]
 8016102:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016104:	69f8      	ldr	r0, [r7, #28]
 8016106:	f7ff f803 	bl	8015110 <tcp_free>
 801610a:	e004      	b.n	8016116 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801610e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016112:	68db      	ldr	r3, [r3, #12]
 8016114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016118:	2b00      	cmp	r3, #0
 801611a:	d1a9      	bne.n	8016070 <tcp_slowtmr+0x5b0>
    }
  }
}
 801611c:	bf00      	nop
 801611e:	bf00      	nop
 8016120:	3730      	adds	r7, #48	@ 0x30
 8016122:	46bd      	mov	sp, r7
 8016124:	bdb0      	pop	{r4, r5, r7, pc}
 8016126:	bf00      	nop
 8016128:	0802271c 	.word	0x0802271c
 801612c:	08022bac 	.word	0x08022bac
 8016130:	08022760 	.word	0x08022760
 8016134:	2002d3ac 	.word	0x2002d3ac
 8016138:	2002d3bc 	.word	0x2002d3bc
 801613c:	08022bdc 	.word	0x08022bdc
 8016140:	08022c04 	.word	0x08022c04

08016144 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801614a:	4b2d      	ldr	r3, [pc, #180]	@ (8016200 <tcp_fasttmr+0xbc>)
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	3301      	adds	r3, #1
 8016150:	b2da      	uxtb	r2, r3
 8016152:	4b2b      	ldr	r3, [pc, #172]	@ (8016200 <tcp_fasttmr+0xbc>)
 8016154:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016156:	4b2b      	ldr	r3, [pc, #172]	@ (8016204 <tcp_fasttmr+0xc0>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801615c:	e048      	b.n	80161f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	7f9a      	ldrb	r2, [r3, #30]
 8016162:	4b27      	ldr	r3, [pc, #156]	@ (8016200 <tcp_fasttmr+0xbc>)
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	429a      	cmp	r2, r3
 8016168:	d03f      	beq.n	80161ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801616a:	4b25      	ldr	r3, [pc, #148]	@ (8016200 <tcp_fasttmr+0xbc>)
 801616c:	781a      	ldrb	r2, [r3, #0]
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	8b5b      	ldrh	r3, [r3, #26]
 8016176:	f003 0301 	and.w	r3, r3, #1
 801617a:	2b00      	cmp	r3, #0
 801617c:	d010      	beq.n	80161a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	8b5b      	ldrh	r3, [r3, #26]
 8016182:	f043 0302 	orr.w	r3, r3, #2
 8016186:	b29a      	uxth	r2, r3
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f004 f8b9 	bl	801a304 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	8b5b      	ldrh	r3, [r3, #26]
 8016196:	f023 0303 	bic.w	r3, r3, #3
 801619a:	b29a      	uxth	r2, r3
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	8b5b      	ldrh	r3, [r3, #26]
 80161a4:	f003 0308 	and.w	r3, r3, #8
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d009      	beq.n	80161c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	8b5b      	ldrh	r3, [r3, #26]
 80161b0:	f023 0308 	bic.w	r3, r3, #8
 80161b4:	b29a      	uxth	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f7ff f93c 	bl	8015438 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	68db      	ldr	r3, [r3, #12]
 80161c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d00a      	beq.n	80161e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80161ce:	4b0e      	ldr	r3, [pc, #56]	@ (8016208 <tcp_fasttmr+0xc4>)
 80161d0:	2200      	movs	r2, #0
 80161d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f000 f819 	bl	801620c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80161da:	4b0b      	ldr	r3, [pc, #44]	@ (8016208 <tcp_fasttmr+0xc4>)
 80161dc:	781b      	ldrb	r3, [r3, #0]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d000      	beq.n	80161e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80161e2:	e7b8      	b.n	8016156 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	607b      	str	r3, [r7, #4]
 80161e8:	e002      	b.n	80161f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	68db      	ldr	r3, [r3, #12]
 80161ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d1b3      	bne.n	801615e <tcp_fasttmr+0x1a>
    }
  }
}
 80161f6:	bf00      	nop
 80161f8:	bf00      	nop
 80161fa:	3708      	adds	r7, #8
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}
 8016200:	2002d3c2 	.word	0x2002d3c2
 8016204:	2002d3b8 	.word	0x2002d3b8
 8016208:	2002d3c0 	.word	0x2002d3c0

0801620c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801620c:	b590      	push	{r4, r7, lr}
 801620e:	b085      	sub	sp, #20
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d109      	bne.n	801622e <tcp_process_refused_data+0x22>
 801621a:	4b37      	ldr	r3, [pc, #220]	@ (80162f8 <tcp_process_refused_data+0xec>)
 801621c:	f240 6209 	movw	r2, #1545	@ 0x609
 8016220:	4936      	ldr	r1, [pc, #216]	@ (80162fc <tcp_process_refused_data+0xf0>)
 8016222:	4837      	ldr	r0, [pc, #220]	@ (8016300 <tcp_process_refused_data+0xf4>)
 8016224:	f009 ff0e 	bl	8020044 <iprintf>
 8016228:	f06f 030f 	mvn.w	r3, #15
 801622c:	e060      	b.n	80162f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016232:	7b5b      	ldrb	r3, [r3, #13]
 8016234:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801623a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2200      	movs	r2, #0
 8016240:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016248:	2b00      	cmp	r3, #0
 801624a:	d00b      	beq.n	8016264 <tcp_process_refused_data+0x58>
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	6918      	ldr	r0, [r3, #16]
 8016256:	2300      	movs	r3, #0
 8016258:	68ba      	ldr	r2, [r7, #8]
 801625a:	6879      	ldr	r1, [r7, #4]
 801625c:	47a0      	blx	r4
 801625e:	4603      	mov	r3, r0
 8016260:	73fb      	strb	r3, [r7, #15]
 8016262:	e007      	b.n	8016274 <tcp_process_refused_data+0x68>
 8016264:	2300      	movs	r3, #0
 8016266:	68ba      	ldr	r2, [r7, #8]
 8016268:	6879      	ldr	r1, [r7, #4]
 801626a:	2000      	movs	r0, #0
 801626c:	f000 f8a4 	bl	80163b8 <tcp_recv_null>
 8016270:	4603      	mov	r3, r0
 8016272:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d12a      	bne.n	80162d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801627c:	7bbb      	ldrb	r3, [r7, #14]
 801627e:	f003 0320 	and.w	r3, r3, #32
 8016282:	2b00      	cmp	r3, #0
 8016284:	d033      	beq.n	80162ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801628a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801628e:	d005      	beq.n	801629c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016294:	3301      	adds	r3, #1
 8016296:	b29a      	uxth	r2, r3
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d00b      	beq.n	80162be <tcp_process_refused_data+0xb2>
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	6918      	ldr	r0, [r3, #16]
 80162b0:	2300      	movs	r3, #0
 80162b2:	2200      	movs	r2, #0
 80162b4:	6879      	ldr	r1, [r7, #4]
 80162b6:	47a0      	blx	r4
 80162b8:	4603      	mov	r3, r0
 80162ba:	73fb      	strb	r3, [r7, #15]
 80162bc:	e001      	b.n	80162c2 <tcp_process_refused_data+0xb6>
 80162be:	2300      	movs	r3, #0
 80162c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80162c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162c6:	f113 0f0d 	cmn.w	r3, #13
 80162ca:	d110      	bne.n	80162ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80162cc:	f06f 030c 	mvn.w	r3, #12
 80162d0:	e00e      	b.n	80162f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80162d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162d6:	f113 0f0d 	cmn.w	r3, #13
 80162da:	d102      	bne.n	80162e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80162dc:	f06f 030c 	mvn.w	r3, #12
 80162e0:	e006      	b.n	80162f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	68ba      	ldr	r2, [r7, #8]
 80162e6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80162e8:	f06f 0304 	mvn.w	r3, #4
 80162ec:	e000      	b.n	80162f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80162ee:	2300      	movs	r3, #0
}
 80162f0:	4618      	mov	r0, r3
 80162f2:	3714      	adds	r7, #20
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd90      	pop	{r4, r7, pc}
 80162f8:	0802271c 	.word	0x0802271c
 80162fc:	08022c2c 	.word	0x08022c2c
 8016300:	08022760 	.word	0x08022760

08016304 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b084      	sub	sp, #16
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801630c:	e007      	b.n	801631e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f000 f80a 	bl	801632e <tcp_seg_free>
    seg = next;
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d1f4      	bne.n	801630e <tcp_segs_free+0xa>
  }
}
 8016324:	bf00      	nop
 8016326:	bf00      	nop
 8016328:	3710      	adds	r7, #16
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}

0801632e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801632e:	b580      	push	{r7, lr}
 8016330:	b082      	sub	sp, #8
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d00c      	beq.n	8016356 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d004      	beq.n	801634e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	4618      	mov	r0, r3
 801634a:	f7fe fc1d 	bl	8014b88 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801634e:	6879      	ldr	r1, [r7, #4]
 8016350:	2003      	movs	r0, #3
 8016352:	f7fd fd75 	bl	8013e40 <memp_free>
  }
}
 8016356:	bf00      	nop
 8016358:	3708      	adds	r7, #8
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
	...

08016360 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b084      	sub	sp, #16
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d106      	bne.n	801637c <tcp_seg_copy+0x1c>
 801636e:	4b0f      	ldr	r3, [pc, #60]	@ (80163ac <tcp_seg_copy+0x4c>)
 8016370:	f240 6282 	movw	r2, #1666	@ 0x682
 8016374:	490e      	ldr	r1, [pc, #56]	@ (80163b0 <tcp_seg_copy+0x50>)
 8016376:	480f      	ldr	r0, [pc, #60]	@ (80163b4 <tcp_seg_copy+0x54>)
 8016378:	f009 fe64 	bl	8020044 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801637c:	2003      	movs	r0, #3
 801637e:	f7fd fce3 	bl	8013d48 <memp_malloc>
 8016382:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d101      	bne.n	801638e <tcp_seg_copy+0x2e>
    return NULL;
 801638a:	2300      	movs	r3, #0
 801638c:	e00a      	b.n	80163a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801638e:	2210      	movs	r2, #16
 8016390:	6879      	ldr	r1, [r7, #4]
 8016392:	68f8      	ldr	r0, [r7, #12]
 8016394:	f00a f881 	bl	802049a <memcpy>
  pbuf_ref(cseg->p);
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	685b      	ldr	r3, [r3, #4]
 801639c:	4618      	mov	r0, r3
 801639e:	f7fe fc99 	bl	8014cd4 <pbuf_ref>
  return cseg;
 80163a2:	68fb      	ldr	r3, [r7, #12]
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3710      	adds	r7, #16
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	0802271c 	.word	0x0802271c
 80163b0:	08022c70 	.word	0x08022c70
 80163b4:	08022760 	.word	0x08022760

080163b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
 80163c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d109      	bne.n	80163e0 <tcp_recv_null+0x28>
 80163cc:	4b12      	ldr	r3, [pc, #72]	@ (8016418 <tcp_recv_null+0x60>)
 80163ce:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80163d2:	4912      	ldr	r1, [pc, #72]	@ (801641c <tcp_recv_null+0x64>)
 80163d4:	4812      	ldr	r0, [pc, #72]	@ (8016420 <tcp_recv_null+0x68>)
 80163d6:	f009 fe35 	bl	8020044 <iprintf>
 80163da:	f06f 030f 	mvn.w	r3, #15
 80163de:	e016      	b.n	801640e <tcp_recv_null+0x56>

  if (p != NULL) {
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d009      	beq.n	80163fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	891b      	ldrh	r3, [r3, #8]
 80163ea:	4619      	mov	r1, r3
 80163ec:	68b8      	ldr	r0, [r7, #8]
 80163ee:	f7ff fad1 	bl	8015994 <tcp_recved>
    pbuf_free(p);
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f7fe fbc8 	bl	8014b88 <pbuf_free>
 80163f8:	e008      	b.n	801640c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80163fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d104      	bne.n	801640c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016402:	68b8      	ldr	r0, [r7, #8]
 8016404:	f7ff f882 	bl	801550c <tcp_close>
 8016408:	4603      	mov	r3, r0
 801640a:	e000      	b.n	801640e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801640c:	2300      	movs	r3, #0
}
 801640e:	4618      	mov	r0, r3
 8016410:	3710      	adds	r7, #16
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}
 8016416:	bf00      	nop
 8016418:	0802271c 	.word	0x0802271c
 801641c:	08022c8c 	.word	0x08022c8c
 8016420:	08022760 	.word	0x08022760

08016424 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b086      	sub	sp, #24
 8016428:	af00      	add	r7, sp, #0
 801642a:	4603      	mov	r3, r0
 801642c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801642e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016432:	2b00      	cmp	r3, #0
 8016434:	db01      	blt.n	801643a <tcp_kill_prio+0x16>
 8016436:	79fb      	ldrb	r3, [r7, #7]
 8016438:	e000      	b.n	801643c <tcp_kill_prio+0x18>
 801643a:	237f      	movs	r3, #127	@ 0x7f
 801643c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801643e:	7afb      	ldrb	r3, [r7, #11]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d034      	beq.n	80164ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016444:	7afb      	ldrb	r3, [r7, #11]
 8016446:	3b01      	subs	r3, #1
 8016448:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801644a:	2300      	movs	r3, #0
 801644c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801644e:	2300      	movs	r3, #0
 8016450:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016452:	4b19      	ldr	r3, [pc, #100]	@ (80164b8 <tcp_kill_prio+0x94>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	617b      	str	r3, [r7, #20]
 8016458:	e01f      	b.n	801649a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	7d5b      	ldrb	r3, [r3, #21]
 801645e:	7afa      	ldrb	r2, [r7, #11]
 8016460:	429a      	cmp	r2, r3
 8016462:	d80c      	bhi.n	801647e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016468:	7afa      	ldrb	r2, [r7, #11]
 801646a:	429a      	cmp	r2, r3
 801646c:	d112      	bne.n	8016494 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801646e:	4b13      	ldr	r3, [pc, #76]	@ (80164bc <tcp_kill_prio+0x98>)
 8016470:	681a      	ldr	r2, [r3, #0]
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	6a1b      	ldr	r3, [r3, #32]
 8016476:	1ad3      	subs	r3, r2, r3
 8016478:	68fa      	ldr	r2, [r7, #12]
 801647a:	429a      	cmp	r2, r3
 801647c:	d80a      	bhi.n	8016494 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801647e:	4b0f      	ldr	r3, [pc, #60]	@ (80164bc <tcp_kill_prio+0x98>)
 8016480:	681a      	ldr	r2, [r3, #0]
 8016482:	697b      	ldr	r3, [r7, #20]
 8016484:	6a1b      	ldr	r3, [r3, #32]
 8016486:	1ad3      	subs	r3, r2, r3
 8016488:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801648e:	697b      	ldr	r3, [r7, #20]
 8016490:	7d5b      	ldrb	r3, [r3, #21]
 8016492:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016494:	697b      	ldr	r3, [r7, #20]
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	617b      	str	r3, [r7, #20]
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d1dc      	bne.n	801645a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d004      	beq.n	80164b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80164a6:	6938      	ldr	r0, [r7, #16]
 80164a8:	f7ff f976 	bl	8015798 <tcp_abort>
 80164ac:	e000      	b.n	80164b0 <tcp_kill_prio+0x8c>
    return;
 80164ae:	bf00      	nop
  }
}
 80164b0:	3718      	adds	r7, #24
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}
 80164b6:	bf00      	nop
 80164b8:	2002d3b8 	.word	0x2002d3b8
 80164bc:	2002d3ac 	.word	0x2002d3ac

080164c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b086      	sub	sp, #24
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	4603      	mov	r3, r0
 80164c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80164ca:	79fb      	ldrb	r3, [r7, #7]
 80164cc:	2b08      	cmp	r3, #8
 80164ce:	d009      	beq.n	80164e4 <tcp_kill_state+0x24>
 80164d0:	79fb      	ldrb	r3, [r7, #7]
 80164d2:	2b09      	cmp	r3, #9
 80164d4:	d006      	beq.n	80164e4 <tcp_kill_state+0x24>
 80164d6:	4b1a      	ldr	r3, [pc, #104]	@ (8016540 <tcp_kill_state+0x80>)
 80164d8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80164dc:	4919      	ldr	r1, [pc, #100]	@ (8016544 <tcp_kill_state+0x84>)
 80164de:	481a      	ldr	r0, [pc, #104]	@ (8016548 <tcp_kill_state+0x88>)
 80164e0:	f009 fdb0 	bl	8020044 <iprintf>

  inactivity = 0;
 80164e4:	2300      	movs	r3, #0
 80164e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80164e8:	2300      	movs	r3, #0
 80164ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80164ec:	4b17      	ldr	r3, [pc, #92]	@ (801654c <tcp_kill_state+0x8c>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	617b      	str	r3, [r7, #20]
 80164f2:	e017      	b.n	8016524 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	7d1b      	ldrb	r3, [r3, #20]
 80164f8:	79fa      	ldrb	r2, [r7, #7]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d10f      	bne.n	801651e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80164fe:	4b14      	ldr	r3, [pc, #80]	@ (8016550 <tcp_kill_state+0x90>)
 8016500:	681a      	ldr	r2, [r3, #0]
 8016502:	697b      	ldr	r3, [r7, #20]
 8016504:	6a1b      	ldr	r3, [r3, #32]
 8016506:	1ad3      	subs	r3, r2, r3
 8016508:	68fa      	ldr	r2, [r7, #12]
 801650a:	429a      	cmp	r2, r3
 801650c:	d807      	bhi.n	801651e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801650e:	4b10      	ldr	r3, [pc, #64]	@ (8016550 <tcp_kill_state+0x90>)
 8016510:	681a      	ldr	r2, [r3, #0]
 8016512:	697b      	ldr	r3, [r7, #20]
 8016514:	6a1b      	ldr	r3, [r3, #32]
 8016516:	1ad3      	subs	r3, r2, r3
 8016518:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801651a:	697b      	ldr	r3, [r7, #20]
 801651c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801651e:	697b      	ldr	r3, [r7, #20]
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	617b      	str	r3, [r7, #20]
 8016524:	697b      	ldr	r3, [r7, #20]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d1e4      	bne.n	80164f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801652a:	693b      	ldr	r3, [r7, #16]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d003      	beq.n	8016538 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016530:	2100      	movs	r1, #0
 8016532:	6938      	ldr	r0, [r7, #16]
 8016534:	f7ff f872 	bl	801561c <tcp_abandon>
  }
}
 8016538:	bf00      	nop
 801653a:	3718      	adds	r7, #24
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}
 8016540:	0802271c 	.word	0x0802271c
 8016544:	08022ca8 	.word	0x08022ca8
 8016548:	08022760 	.word	0x08022760
 801654c:	2002d3b8 	.word	0x2002d3b8
 8016550:	2002d3ac 	.word	0x2002d3ac

08016554 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b084      	sub	sp, #16
 8016558:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801655e:	2300      	movs	r3, #0
 8016560:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016562:	4b12      	ldr	r3, [pc, #72]	@ (80165ac <tcp_kill_timewait+0x58>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	60fb      	str	r3, [r7, #12]
 8016568:	e012      	b.n	8016590 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801656a:	4b11      	ldr	r3, [pc, #68]	@ (80165b0 <tcp_kill_timewait+0x5c>)
 801656c:	681a      	ldr	r2, [r3, #0]
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	6a1b      	ldr	r3, [r3, #32]
 8016572:	1ad3      	subs	r3, r2, r3
 8016574:	687a      	ldr	r2, [r7, #4]
 8016576:	429a      	cmp	r2, r3
 8016578:	d807      	bhi.n	801658a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801657a:	4b0d      	ldr	r3, [pc, #52]	@ (80165b0 <tcp_kill_timewait+0x5c>)
 801657c:	681a      	ldr	r2, [r3, #0]
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	6a1b      	ldr	r3, [r3, #32]
 8016582:	1ad3      	subs	r3, r2, r3
 8016584:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	68db      	ldr	r3, [r3, #12]
 801658e:	60fb      	str	r3, [r7, #12]
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d1e9      	bne.n	801656a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016596:	68bb      	ldr	r3, [r7, #8]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d002      	beq.n	80165a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801659c:	68b8      	ldr	r0, [r7, #8]
 801659e:	f7ff f8fb 	bl	8015798 <tcp_abort>
  }
}
 80165a2:	bf00      	nop
 80165a4:	3710      	adds	r7, #16
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}
 80165aa:	bf00      	nop
 80165ac:	2002d3bc 	.word	0x2002d3bc
 80165b0:	2002d3ac 	.word	0x2002d3ac

080165b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80165ba:	4b10      	ldr	r3, [pc, #64]	@ (80165fc <tcp_handle_closepend+0x48>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80165c0:	e014      	b.n	80165ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	8b5b      	ldrh	r3, [r3, #26]
 80165cc:	f003 0308 	and.w	r3, r3, #8
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d009      	beq.n	80165e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	8b5b      	ldrh	r3, [r3, #26]
 80165d8:	f023 0308 	bic.w	r3, r3, #8
 80165dc:	b29a      	uxth	r2, r3
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f7fe ff28 	bl	8015438 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d1e7      	bne.n	80165c2 <tcp_handle_closepend+0xe>
  }
}
 80165f2:	bf00      	nop
 80165f4:	bf00      	nop
 80165f6:	3708      	adds	r7, #8
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	2002d3b8 	.word	0x2002d3b8

08016600 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	4603      	mov	r3, r0
 8016608:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801660a:	2001      	movs	r0, #1
 801660c:	f7fd fb9c 	bl	8013d48 <memp_malloc>
 8016610:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d14e      	bne.n	80166b6 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016618:	f7ff ffcc 	bl	80165b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801661c:	f7ff ff9a 	bl	8016554 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016620:	2001      	movs	r0, #1
 8016622:	f7fd fb91 	bl	8013d48 <memp_malloc>
 8016626:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d139      	bne.n	80166a2 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801662e:	2009      	movs	r0, #9
 8016630:	f7ff ff46 	bl	80164c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016634:	2001      	movs	r0, #1
 8016636:	f7fd fb87 	bl	8013d48 <memp_malloc>
 801663a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d125      	bne.n	801668e <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016642:	2008      	movs	r0, #8
 8016644:	f7ff ff3c 	bl	80164c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016648:	2001      	movs	r0, #1
 801664a:	f7fd fb7d 	bl	8013d48 <memp_malloc>
 801664e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d111      	bne.n	801667a <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016656:	79fb      	ldrb	r3, [r7, #7]
 8016658:	4618      	mov	r0, r3
 801665a:	f7ff fee3 	bl	8016424 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801665e:	2001      	movs	r0, #1
 8016660:	f7fd fb72 	bl	8013d48 <memp_malloc>
 8016664:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d006      	beq.n	801667a <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801666c:	4b36      	ldr	r3, [pc, #216]	@ (8016748 <tcp_alloc+0x148>)
 801666e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016672:	881a      	ldrh	r2, [r3, #0]
 8016674:	3a01      	subs	r2, #1
 8016676:	b292      	uxth	r2, r2
 8016678:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d006      	beq.n	801668e <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016680:	4b31      	ldr	r3, [pc, #196]	@ (8016748 <tcp_alloc+0x148>)
 8016682:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016686:	881a      	ldrh	r2, [r3, #0]
 8016688:	3a01      	subs	r2, #1
 801668a:	b292      	uxth	r2, r2
 801668c:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d006      	beq.n	80166a2 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016694:	4b2c      	ldr	r3, [pc, #176]	@ (8016748 <tcp_alloc+0x148>)
 8016696:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801669a:	881a      	ldrh	r2, [r3, #0]
 801669c:	3a01      	subs	r2, #1
 801669e:	b292      	uxth	r2, r2
 80166a0:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d006      	beq.n	80166b6 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80166a8:	4b27      	ldr	r3, [pc, #156]	@ (8016748 <tcp_alloc+0x148>)
 80166aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80166ae:	881a      	ldrh	r2, [r3, #0]
 80166b0:	3a01      	subs	r2, #1
 80166b2:	b292      	uxth	r2, r2
 80166b4:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d03f      	beq.n	801673c <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80166bc:	229c      	movs	r2, #156	@ 0x9c
 80166be:	2100      	movs	r1, #0
 80166c0:	68f8      	ldr	r0, [r7, #12]
 80166c2:	f009 fe17 	bl	80202f4 <memset>
    pcb->prio = prio;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	79fa      	ldrb	r2, [r7, #7]
 80166ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80166d2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80166dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	22ff      	movs	r2, #255	@ 0xff
 80166ea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80166f2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	2206      	movs	r2, #6
 80166f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	2206      	movs	r2, #6
 8016700:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016708:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	2201      	movs	r2, #1
 801670e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8016712:	4b0e      	ldr	r3, [pc, #56]	@ (801674c <tcp_alloc+0x14c>)
 8016714:	681a      	ldr	r2, [r3, #0]
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801671a:	4b0d      	ldr	r3, [pc, #52]	@ (8016750 <tcp_alloc+0x150>)
 801671c:	781a      	ldrb	r2, [r3, #0]
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016728:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	4a09      	ldr	r2, [pc, #36]	@ (8016754 <tcp_alloc+0x154>)
 8016730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	4a08      	ldr	r2, [pc, #32]	@ (8016758 <tcp_alloc+0x158>)
 8016738:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801673c:	68fb      	ldr	r3, [r7, #12]
}
 801673e:	4618      	mov	r0, r3
 8016740:	3710      	adds	r7, #16
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	2002d2b0 	.word	0x2002d2b0
 801674c:	2002d3ac 	.word	0x2002d3ac
 8016750:	2002d3c2 	.word	0x2002d3c2
 8016754:	080163b9 	.word	0x080163b9
 8016758:	006ddd00 	.word	0x006ddd00

0801675c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af00      	add	r7, sp, #0
 8016762:	4603      	mov	r3, r0
 8016764:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016766:	2040      	movs	r0, #64	@ 0x40
 8016768:	f7ff ff4a 	bl	8016600 <tcp_alloc>
 801676c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801676e:	68fb      	ldr	r3, [r7, #12]
}
 8016770:	4618      	mov	r0, r3
 8016772:	3710      	adds	r7, #16
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016778:	b480      	push	{r7}
 801677a:	b083      	sub	sp, #12
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d002      	beq.n	801678e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	683a      	ldr	r2, [r7, #0]
 801678c:	611a      	str	r2, [r3, #16]
  }
}
 801678e:	bf00      	nop
 8016790:	370c      	adds	r7, #12
 8016792:	46bd      	mov	sp, r7
 8016794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016798:	4770      	bx	lr
	...

0801679c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
 80167a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d00e      	beq.n	80167ca <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	7d1b      	ldrb	r3, [r3, #20]
 80167b0:	2b01      	cmp	r3, #1
 80167b2:	d106      	bne.n	80167c2 <tcp_recv+0x26>
 80167b4:	4b07      	ldr	r3, [pc, #28]	@ (80167d4 <tcp_recv+0x38>)
 80167b6:	f240 72df 	movw	r2, #2015	@ 0x7df
 80167ba:	4907      	ldr	r1, [pc, #28]	@ (80167d8 <tcp_recv+0x3c>)
 80167bc:	4807      	ldr	r0, [pc, #28]	@ (80167dc <tcp_recv+0x40>)
 80167be:	f009 fc41 	bl	8020044 <iprintf>
    pcb->recv = recv;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	683a      	ldr	r2, [r7, #0]
 80167c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80167ca:	bf00      	nop
 80167cc:	3708      	adds	r7, #8
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	0802271c 	.word	0x0802271c
 80167d8:	08022cb8 	.word	0x08022cb8
 80167dc:	08022760 	.word	0x08022760

080167e0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d00e      	beq.n	801680e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	7d1b      	ldrb	r3, [r3, #20]
 80167f4:	2b01      	cmp	r3, #1
 80167f6:	d106      	bne.n	8016806 <tcp_sent+0x26>
 80167f8:	4b07      	ldr	r3, [pc, #28]	@ (8016818 <tcp_sent+0x38>)
 80167fa:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80167fe:	4907      	ldr	r1, [pc, #28]	@ (801681c <tcp_sent+0x3c>)
 8016800:	4807      	ldr	r0, [pc, #28]	@ (8016820 <tcp_sent+0x40>)
 8016802:	f009 fc1f 	bl	8020044 <iprintf>
    pcb->sent = sent;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	683a      	ldr	r2, [r7, #0]
 801680a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801680e:	bf00      	nop
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	0802271c 	.word	0x0802271c
 801681c:	08022ce0 	.word	0x08022ce0
 8016820:	08022760 	.word	0x08022760

08016824 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b082      	sub	sp, #8
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d00e      	beq.n	8016852 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	7d1b      	ldrb	r3, [r3, #20]
 8016838:	2b01      	cmp	r3, #1
 801683a:	d106      	bne.n	801684a <tcp_err+0x26>
 801683c:	4b07      	ldr	r3, [pc, #28]	@ (801685c <tcp_err+0x38>)
 801683e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8016842:	4907      	ldr	r1, [pc, #28]	@ (8016860 <tcp_err+0x3c>)
 8016844:	4807      	ldr	r0, [pc, #28]	@ (8016864 <tcp_err+0x40>)
 8016846:	f009 fbfd 	bl	8020044 <iprintf>
    pcb->errf = err;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	683a      	ldr	r2, [r7, #0]
 801684e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8016852:	bf00      	nop
 8016854:	3708      	adds	r7, #8
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	0802271c 	.word	0x0802271c
 8016860:	08022d08 	.word	0x08022d08
 8016864:	08022760 	.word	0x08022760

08016868 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016868:	b480      	push	{r7}
 801686a:	b085      	sub	sp, #20
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d008      	beq.n	801688a <tcp_accept+0x22>
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	7d1b      	ldrb	r3, [r3, #20]
 801687c:	2b01      	cmp	r3, #1
 801687e:	d104      	bne.n	801688a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	683a      	ldr	r2, [r7, #0]
 8016888:	619a      	str	r2, [r3, #24]
  }
}
 801688a:	bf00      	nop
 801688c:	3714      	adds	r7, #20
 801688e:	46bd      	mov	sp, r7
 8016890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016894:	4770      	bx	lr
	...

08016898 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016898:	b580      	push	{r7, lr}
 801689a:	b084      	sub	sp, #16
 801689c:	af00      	add	r7, sp, #0
 801689e:	60f8      	str	r0, [r7, #12]
 80168a0:	60b9      	str	r1, [r7, #8]
 80168a2:	4613      	mov	r3, r2
 80168a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d107      	bne.n	80168bc <tcp_poll+0x24>
 80168ac:	4b0e      	ldr	r3, [pc, #56]	@ (80168e8 <tcp_poll+0x50>)
 80168ae:	f640 023d 	movw	r2, #2109	@ 0x83d
 80168b2:	490e      	ldr	r1, [pc, #56]	@ (80168ec <tcp_poll+0x54>)
 80168b4:	480e      	ldr	r0, [pc, #56]	@ (80168f0 <tcp_poll+0x58>)
 80168b6:	f009 fbc5 	bl	8020044 <iprintf>
 80168ba:	e011      	b.n	80168e0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	7d1b      	ldrb	r3, [r3, #20]
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	d106      	bne.n	80168d2 <tcp_poll+0x3a>
 80168c4:	4b08      	ldr	r3, [pc, #32]	@ (80168e8 <tcp_poll+0x50>)
 80168c6:	f640 023e 	movw	r2, #2110	@ 0x83e
 80168ca:	490a      	ldr	r1, [pc, #40]	@ (80168f4 <tcp_poll+0x5c>)
 80168cc:	4808      	ldr	r0, [pc, #32]	@ (80168f0 <tcp_poll+0x58>)
 80168ce:	f009 fbb9 	bl	8020044 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	68ba      	ldr	r2, [r7, #8]
 80168d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	79fa      	ldrb	r2, [r7, #7]
 80168de:	775a      	strb	r2, [r3, #29]
}
 80168e0:	3710      	adds	r7, #16
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	0802271c 	.word	0x0802271c
 80168ec:	08022d30 	.word	0x08022d30
 80168f0:	08022760 	.word	0x08022760
 80168f4:	08022d48 	.word	0x08022d48

080168f8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d107      	bne.n	8016916 <tcp_pcb_purge+0x1e>
 8016906:	4b21      	ldr	r3, [pc, #132]	@ (801698c <tcp_pcb_purge+0x94>)
 8016908:	f640 0251 	movw	r2, #2129	@ 0x851
 801690c:	4920      	ldr	r1, [pc, #128]	@ (8016990 <tcp_pcb_purge+0x98>)
 801690e:	4821      	ldr	r0, [pc, #132]	@ (8016994 <tcp_pcb_purge+0x9c>)
 8016910:	f009 fb98 	bl	8020044 <iprintf>
 8016914:	e037      	b.n	8016986 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	7d1b      	ldrb	r3, [r3, #20]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d033      	beq.n	8016986 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016922:	2b0a      	cmp	r3, #10
 8016924:	d02f      	beq.n	8016986 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801692a:	2b01      	cmp	r3, #1
 801692c:	d02b      	beq.n	8016986 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016932:	2b00      	cmp	r3, #0
 8016934:	d007      	beq.n	8016946 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801693a:	4618      	mov	r0, r3
 801693c:	f7fe f924 	bl	8014b88 <pbuf_free>
      pcb->refused_data = NULL;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2200      	movs	r2, #0
 8016944:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801694a:	2b00      	cmp	r3, #0
 801694c:	d002      	beq.n	8016954 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f000 f986 	bl	8016c60 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801695a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016960:	4618      	mov	r0, r3
 8016962:	f7ff fccf 	bl	8016304 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801696a:	4618      	mov	r0, r3
 801696c:	f7ff fcca 	bl	8016304 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2200      	movs	r2, #0
 8016974:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2200      	movs	r2, #0
 8016982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	0802271c 	.word	0x0802271c
 8016990:	08022d68 	.word	0x08022d68
 8016994:	08022760 	.word	0x08022760

08016998 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b084      	sub	sp, #16
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
 80169a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80169a2:	683b      	ldr	r3, [r7, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d106      	bne.n	80169b6 <tcp_pcb_remove+0x1e>
 80169a8:	4b3e      	ldr	r3, [pc, #248]	@ (8016aa4 <tcp_pcb_remove+0x10c>)
 80169aa:	f640 0283 	movw	r2, #2179	@ 0x883
 80169ae:	493e      	ldr	r1, [pc, #248]	@ (8016aa8 <tcp_pcb_remove+0x110>)
 80169b0:	483e      	ldr	r0, [pc, #248]	@ (8016aac <tcp_pcb_remove+0x114>)
 80169b2:	f009 fb47 	bl	8020044 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d106      	bne.n	80169ca <tcp_pcb_remove+0x32>
 80169bc:	4b39      	ldr	r3, [pc, #228]	@ (8016aa4 <tcp_pcb_remove+0x10c>)
 80169be:	f640 0284 	movw	r2, #2180	@ 0x884
 80169c2:	493b      	ldr	r1, [pc, #236]	@ (8016ab0 <tcp_pcb_remove+0x118>)
 80169c4:	4839      	ldr	r0, [pc, #228]	@ (8016aac <tcp_pcb_remove+0x114>)
 80169c6:	f009 fb3d 	bl	8020044 <iprintf>

  TCP_RMV(pcblist, pcb);
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	683a      	ldr	r2, [r7, #0]
 80169d0:	429a      	cmp	r2, r3
 80169d2:	d105      	bne.n	80169e0 <tcp_pcb_remove+0x48>
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	68da      	ldr	r2, [r3, #12]
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	601a      	str	r2, [r3, #0]
 80169de:	e013      	b.n	8016a08 <tcp_pcb_remove+0x70>
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	60fb      	str	r3, [r7, #12]
 80169e6:	e00c      	b.n	8016a02 <tcp_pcb_remove+0x6a>
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	68db      	ldr	r3, [r3, #12]
 80169ec:	683a      	ldr	r2, [r7, #0]
 80169ee:	429a      	cmp	r2, r3
 80169f0:	d104      	bne.n	80169fc <tcp_pcb_remove+0x64>
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	68da      	ldr	r2, [r3, #12]
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	60da      	str	r2, [r3, #12]
 80169fa:	e005      	b.n	8016a08 <tcp_pcb_remove+0x70>
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	68db      	ldr	r3, [r3, #12]
 8016a00:	60fb      	str	r3, [r7, #12]
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d1ef      	bne.n	80169e8 <tcp_pcb_remove+0x50>
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016a0e:	6838      	ldr	r0, [r7, #0]
 8016a10:	f7ff ff72 	bl	80168f8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	7d1b      	ldrb	r3, [r3, #20]
 8016a18:	2b0a      	cmp	r3, #10
 8016a1a:	d013      	beq.n	8016a44 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d00f      	beq.n	8016a44 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	8b5b      	ldrh	r3, [r3, #26]
 8016a28:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d009      	beq.n	8016a44 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016a30:	683b      	ldr	r3, [r7, #0]
 8016a32:	8b5b      	ldrh	r3, [r3, #26]
 8016a34:	f043 0302 	orr.w	r3, r3, #2
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016a3e:	6838      	ldr	r0, [r7, #0]
 8016a40:	f003 fc60 	bl	801a304 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	7d1b      	ldrb	r3, [r3, #20]
 8016a48:	2b01      	cmp	r3, #1
 8016a4a:	d020      	beq.n	8016a8e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d006      	beq.n	8016a62 <tcp_pcb_remove+0xca>
 8016a54:	4b13      	ldr	r3, [pc, #76]	@ (8016aa4 <tcp_pcb_remove+0x10c>)
 8016a56:	f640 0293 	movw	r2, #2195	@ 0x893
 8016a5a:	4916      	ldr	r1, [pc, #88]	@ (8016ab4 <tcp_pcb_remove+0x11c>)
 8016a5c:	4813      	ldr	r0, [pc, #76]	@ (8016aac <tcp_pcb_remove+0x114>)
 8016a5e:	f009 faf1 	bl	8020044 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016a62:	683b      	ldr	r3, [r7, #0]
 8016a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d006      	beq.n	8016a78 <tcp_pcb_remove+0xe0>
 8016a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8016aa4 <tcp_pcb_remove+0x10c>)
 8016a6c:	f640 0294 	movw	r2, #2196	@ 0x894
 8016a70:	4911      	ldr	r1, [pc, #68]	@ (8016ab8 <tcp_pcb_remove+0x120>)
 8016a72:	480e      	ldr	r0, [pc, #56]	@ (8016aac <tcp_pcb_remove+0x114>)
 8016a74:	f009 fae6 	bl	8020044 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d006      	beq.n	8016a8e <tcp_pcb_remove+0xf6>
 8016a80:	4b08      	ldr	r3, [pc, #32]	@ (8016aa4 <tcp_pcb_remove+0x10c>)
 8016a82:	f640 0296 	movw	r2, #2198	@ 0x896
 8016a86:	490d      	ldr	r1, [pc, #52]	@ (8016abc <tcp_pcb_remove+0x124>)
 8016a88:	4808      	ldr	r0, [pc, #32]	@ (8016aac <tcp_pcb_remove+0x114>)
 8016a8a:	f009 fadb 	bl	8020044 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	2200      	movs	r2, #0
 8016a92:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016a94:	683b      	ldr	r3, [r7, #0]
 8016a96:	2200      	movs	r2, #0
 8016a98:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016a9a:	bf00      	nop
 8016a9c:	3710      	adds	r7, #16
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	0802271c 	.word	0x0802271c
 8016aa8:	08022d84 	.word	0x08022d84
 8016aac:	08022760 	.word	0x08022760
 8016ab0:	08022da0 	.word	0x08022da0
 8016ab4:	08022dc0 	.word	0x08022dc0
 8016ab8:	08022dd8 	.word	0x08022dd8
 8016abc:	08022df4 	.word	0x08022df4

08016ac0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d106      	bne.n	8016adc <tcp_next_iss+0x1c>
 8016ace:	4b0a      	ldr	r3, [pc, #40]	@ (8016af8 <tcp_next_iss+0x38>)
 8016ad0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016ad4:	4909      	ldr	r1, [pc, #36]	@ (8016afc <tcp_next_iss+0x3c>)
 8016ad6:	480a      	ldr	r0, [pc, #40]	@ (8016b00 <tcp_next_iss+0x40>)
 8016ad8:	f009 fab4 	bl	8020044 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016adc:	4b09      	ldr	r3, [pc, #36]	@ (8016b04 <tcp_next_iss+0x44>)
 8016ade:	681a      	ldr	r2, [r3, #0]
 8016ae0:	4b09      	ldr	r3, [pc, #36]	@ (8016b08 <tcp_next_iss+0x48>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	4413      	add	r3, r2
 8016ae6:	4a07      	ldr	r2, [pc, #28]	@ (8016b04 <tcp_next_iss+0x44>)
 8016ae8:	6013      	str	r3, [r2, #0]
  return iss;
 8016aea:	4b06      	ldr	r3, [pc, #24]	@ (8016b04 <tcp_next_iss+0x44>)
 8016aec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016aee:	4618      	mov	r0, r3
 8016af0:	3708      	adds	r7, #8
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}
 8016af6:	bf00      	nop
 8016af8:	0802271c 	.word	0x0802271c
 8016afc:	08022e0c 	.word	0x08022e0c
 8016b00:	08022760 	.word	0x08022760
 8016b04:	20000028 	.word	0x20000028
 8016b08:	2002d3ac 	.word	0x2002d3ac

08016b0c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b086      	sub	sp, #24
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	4603      	mov	r3, r0
 8016b14:	60b9      	str	r1, [r7, #8]
 8016b16:	607a      	str	r2, [r7, #4]
 8016b18:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d106      	bne.n	8016b2e <tcp_eff_send_mss_netif+0x22>
 8016b20:	4b14      	ldr	r3, [pc, #80]	@ (8016b74 <tcp_eff_send_mss_netif+0x68>)
 8016b22:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8016b26:	4914      	ldr	r1, [pc, #80]	@ (8016b78 <tcp_eff_send_mss_netif+0x6c>)
 8016b28:	4814      	ldr	r0, [pc, #80]	@ (8016b7c <tcp_eff_send_mss_netif+0x70>)
 8016b2a:	f009 fa8b 	bl	8020044 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016b2e:	68bb      	ldr	r3, [r7, #8]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d101      	bne.n	8016b38 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016b34:	89fb      	ldrh	r3, [r7, #14]
 8016b36:	e019      	b.n	8016b6c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016b38:	68bb      	ldr	r3, [r7, #8]
 8016b3a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016b3c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016b3e:	8afb      	ldrh	r3, [r7, #22]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d012      	beq.n	8016b6a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016b44:	2328      	movs	r3, #40	@ 0x28
 8016b46:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016b48:	8afa      	ldrh	r2, [r7, #22]
 8016b4a:	8abb      	ldrh	r3, [r7, #20]
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	d904      	bls.n	8016b5a <tcp_eff_send_mss_netif+0x4e>
 8016b50:	8afa      	ldrh	r2, [r7, #22]
 8016b52:	8abb      	ldrh	r3, [r7, #20]
 8016b54:	1ad3      	subs	r3, r2, r3
 8016b56:	b29b      	uxth	r3, r3
 8016b58:	e000      	b.n	8016b5c <tcp_eff_send_mss_netif+0x50>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016b5e:	8a7a      	ldrh	r2, [r7, #18]
 8016b60:	89fb      	ldrh	r3, [r7, #14]
 8016b62:	4293      	cmp	r3, r2
 8016b64:	bf28      	it	cs
 8016b66:	4613      	movcs	r3, r2
 8016b68:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016b6a:	89fb      	ldrh	r3, [r7, #14]
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3718      	adds	r7, #24
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}
 8016b74:	0802271c 	.word	0x0802271c
 8016b78:	08022e28 	.word	0x08022e28
 8016b7c:	08022760 	.word	0x08022760

08016b80 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
 8016b88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d119      	bne.n	8016bc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016b94:	4b10      	ldr	r3, [pc, #64]	@ (8016bd8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016b96:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016b9a:	4910      	ldr	r1, [pc, #64]	@ (8016bdc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016b9c:	4810      	ldr	r0, [pc, #64]	@ (8016be0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016b9e:	f009 fa51 	bl	8020044 <iprintf>

  while (pcb != NULL) {
 8016ba2:	e011      	b.n	8016bc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	429a      	cmp	r2, r3
 8016bae:	d108      	bne.n	8016bc2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	68db      	ldr	r3, [r3, #12]
 8016bb4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	f7fe fdee 	bl	8015798 <tcp_abort>
      pcb = next;
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	60fb      	str	r3, [r7, #12]
 8016bc0:	e002      	b.n	8016bc8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	68db      	ldr	r3, [r3, #12]
 8016bc6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d1ea      	bne.n	8016ba4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016bce:	bf00      	nop
 8016bd0:	bf00      	nop
 8016bd2:	3710      	adds	r7, #16
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	0802271c 	.word	0x0802271c
 8016bdc:	08022e50 	.word	0x08022e50
 8016be0:	08022760 	.word	0x08022760

08016be4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016be4:	b580      	push	{r7, lr}
 8016be6:	b084      	sub	sp, #16
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
 8016bec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d02a      	beq.n	8016c4a <tcp_netif_ip_addr_changed+0x66>
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d026      	beq.n	8016c4a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016bfc:	4b15      	ldr	r3, [pc, #84]	@ (8016c54 <tcp_netif_ip_addr_changed+0x70>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4619      	mov	r1, r3
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f7ff ffbc 	bl	8016b80 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016c08:	4b13      	ldr	r3, [pc, #76]	@ (8016c58 <tcp_netif_ip_addr_changed+0x74>)
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f7ff ffb6 	bl	8016b80 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d017      	beq.n	8016c4a <tcp_netif_ip_addr_changed+0x66>
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d013      	beq.n	8016c4a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016c22:	4b0e      	ldr	r3, [pc, #56]	@ (8016c5c <tcp_netif_ip_addr_changed+0x78>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	60fb      	str	r3, [r7, #12]
 8016c28:	e00c      	b.n	8016c44 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681a      	ldr	r2, [r3, #0]
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d103      	bne.n	8016c3e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	68db      	ldr	r3, [r3, #12]
 8016c42:	60fb      	str	r3, [r7, #12]
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d1ef      	bne.n	8016c2a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016c4a:	bf00      	nop
 8016c4c:	3710      	adds	r7, #16
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}
 8016c52:	bf00      	nop
 8016c54:	2002d3b8 	.word	0x2002d3b8
 8016c58:	2002d3b0 	.word	0x2002d3b0
 8016c5c:	2002d3b4 	.word	0x2002d3b4

08016c60 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d007      	beq.n	8016c80 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7ff fb45 	bl	8016304 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016c80:	bf00      	nop
 8016c82:	3708      	adds	r7, #8
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd80      	pop	{r7, pc}

08016c88 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016c88:	b590      	push	{r4, r7, lr}
 8016c8a:	b08d      	sub	sp, #52	@ 0x34
 8016c8c:	af04      	add	r7, sp, #16
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d105      	bne.n	8016ca4 <tcp_input+0x1c>
 8016c98:	4b9b      	ldr	r3, [pc, #620]	@ (8016f08 <tcp_input+0x280>)
 8016c9a:	2283      	movs	r2, #131	@ 0x83
 8016c9c:	499b      	ldr	r1, [pc, #620]	@ (8016f0c <tcp_input+0x284>)
 8016c9e:	489c      	ldr	r0, [pc, #624]	@ (8016f10 <tcp_input+0x288>)
 8016ca0:	f009 f9d0 	bl	8020044 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8016ca4:	4b9b      	ldr	r3, [pc, #620]	@ (8016f14 <tcp_input+0x28c>)
 8016ca6:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8016caa:	3301      	adds	r3, #1
 8016cac:	b29a      	uxth	r2, r3
 8016cae:	4b99      	ldr	r3, [pc, #612]	@ (8016f14 <tcp_input+0x28c>)
 8016cb0:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	685b      	ldr	r3, [r3, #4]
 8016cb8:	4a97      	ldr	r2, [pc, #604]	@ (8016f18 <tcp_input+0x290>)
 8016cba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	895b      	ldrh	r3, [r3, #10]
 8016cc0:	2b13      	cmp	r3, #19
 8016cc2:	d809      	bhi.n	8016cd8 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8016cc4:	4b93      	ldr	r3, [pc, #588]	@ (8016f14 <tcp_input+0x28c>)
 8016cc6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016cca:	3301      	adds	r3, #1
 8016ccc:	b29a      	uxth	r2, r3
 8016cce:	4b91      	ldr	r3, [pc, #580]	@ (8016f14 <tcp_input+0x28c>)
 8016cd0:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016cd4:	f000 bc1c 	b.w	8017510 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016cd8:	4b90      	ldr	r3, [pc, #576]	@ (8016f1c <tcp_input+0x294>)
 8016cda:	695b      	ldr	r3, [r3, #20]
 8016cdc:	4a8f      	ldr	r2, [pc, #572]	@ (8016f1c <tcp_input+0x294>)
 8016cde:	6812      	ldr	r2, [r2, #0]
 8016ce0:	4611      	mov	r1, r2
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f006 fdaa 	bl	801d83c <ip4_addr_isbroadcast_u32>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d105      	bne.n	8016cfa <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016cee:	4b8b      	ldr	r3, [pc, #556]	@ (8016f1c <tcp_input+0x294>)
 8016cf0:	695b      	ldr	r3, [r3, #20]
 8016cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016cf6:	2be0      	cmp	r3, #224	@ 0xe0
 8016cf8:	d109      	bne.n	8016d0e <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8016cfa:	4b86      	ldr	r3, [pc, #536]	@ (8016f14 <tcp_input+0x28c>)
 8016cfc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8016d00:	3301      	adds	r3, #1
 8016d02:	b29a      	uxth	r2, r3
 8016d04:	4b83      	ldr	r3, [pc, #524]	@ (8016f14 <tcp_input+0x28c>)
 8016d06:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8016d0a:	f000 bc01 	b.w	8017510 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016d0e:	4b82      	ldr	r3, [pc, #520]	@ (8016f18 <tcp_input+0x290>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	899b      	ldrh	r3, [r3, #12]
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7fc fa78 	bl	801320c <lwip_htons>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	0b1b      	lsrs	r3, r3, #12
 8016d20:	b29b      	uxth	r3, r3
 8016d22:	b2db      	uxtb	r3, r3
 8016d24:	009b      	lsls	r3, r3, #2
 8016d26:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016d28:	7cbb      	ldrb	r3, [r7, #18]
 8016d2a:	2b13      	cmp	r3, #19
 8016d2c:	d905      	bls.n	8016d3a <tcp_input+0xb2>
 8016d2e:	7cbb      	ldrb	r3, [r7, #18]
 8016d30:	b29a      	uxth	r2, r3
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	891b      	ldrh	r3, [r3, #8]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d908      	bls.n	8016d4c <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8016d3a:	4b76      	ldr	r3, [pc, #472]	@ (8016f14 <tcp_input+0x28c>)
 8016d3c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016d40:	3301      	adds	r3, #1
 8016d42:	b29a      	uxth	r2, r3
 8016d44:	4b73      	ldr	r3, [pc, #460]	@ (8016f14 <tcp_input+0x28c>)
 8016d46:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016d4a:	e3e1      	b.n	8017510 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016d4c:	7cbb      	ldrb	r3, [r7, #18]
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	3b14      	subs	r3, #20
 8016d52:	b29a      	uxth	r2, r3
 8016d54:	4b72      	ldr	r3, [pc, #456]	@ (8016f20 <tcp_input+0x298>)
 8016d56:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016d58:	4b72      	ldr	r3, [pc, #456]	@ (8016f24 <tcp_input+0x29c>)
 8016d5a:	2200      	movs	r2, #0
 8016d5c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	895a      	ldrh	r2, [r3, #10]
 8016d62:	7cbb      	ldrb	r3, [r7, #18]
 8016d64:	b29b      	uxth	r3, r3
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d309      	bcc.n	8016d7e <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8016f20 <tcp_input+0x298>)
 8016d6c:	881a      	ldrh	r2, [r3, #0]
 8016d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8016f28 <tcp_input+0x2a0>)
 8016d70:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016d72:	7cbb      	ldrb	r3, [r7, #18]
 8016d74:	4619      	mov	r1, r3
 8016d76:	6878      	ldr	r0, [r7, #4]
 8016d78:	f7fd fe80 	bl	8014a7c <pbuf_remove_header>
 8016d7c:	e056      	b.n	8016e2c <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d105      	bne.n	8016d92 <tcp_input+0x10a>
 8016d86:	4b60      	ldr	r3, [pc, #384]	@ (8016f08 <tcp_input+0x280>)
 8016d88:	22c2      	movs	r2, #194	@ 0xc2
 8016d8a:	4968      	ldr	r1, [pc, #416]	@ (8016f2c <tcp_input+0x2a4>)
 8016d8c:	4860      	ldr	r0, [pc, #384]	@ (8016f10 <tcp_input+0x288>)
 8016d8e:	f009 f959 	bl	8020044 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016d92:	2114      	movs	r1, #20
 8016d94:	6878      	ldr	r0, [r7, #4]
 8016d96:	f7fd fe71 	bl	8014a7c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	895a      	ldrh	r2, [r3, #10]
 8016d9e:	4b62      	ldr	r3, [pc, #392]	@ (8016f28 <tcp_input+0x2a0>)
 8016da0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016da2:	4b5f      	ldr	r3, [pc, #380]	@ (8016f20 <tcp_input+0x298>)
 8016da4:	881a      	ldrh	r2, [r3, #0]
 8016da6:	4b60      	ldr	r3, [pc, #384]	@ (8016f28 <tcp_input+0x2a0>)
 8016da8:	881b      	ldrh	r3, [r3, #0]
 8016daa:	1ad3      	subs	r3, r2, r3
 8016dac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016dae:	4b5e      	ldr	r3, [pc, #376]	@ (8016f28 <tcp_input+0x2a0>)
 8016db0:	881b      	ldrh	r3, [r3, #0]
 8016db2:	4619      	mov	r1, r3
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f7fd fe61 	bl	8014a7c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	895b      	ldrh	r3, [r3, #10]
 8016dc0:	8a3a      	ldrh	r2, [r7, #16]
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	d908      	bls.n	8016dd8 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8016dc6:	4b53      	ldr	r3, [pc, #332]	@ (8016f14 <tcp_input+0x28c>)
 8016dc8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016dcc:	3301      	adds	r3, #1
 8016dce:	b29a      	uxth	r2, r3
 8016dd0:	4b50      	ldr	r3, [pc, #320]	@ (8016f14 <tcp_input+0x28c>)
 8016dd2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016dd6:	e39b      	b.n	8017510 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	685b      	ldr	r3, [r3, #4]
 8016dde:	4a51      	ldr	r2, [pc, #324]	@ (8016f24 <tcp_input+0x29c>)
 8016de0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	8a3a      	ldrh	r2, [r7, #16]
 8016de8:	4611      	mov	r1, r2
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7fd fe46 	bl	8014a7c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	891a      	ldrh	r2, [r3, #8]
 8016df4:	8a3b      	ldrh	r3, [r7, #16]
 8016df6:	1ad3      	subs	r3, r2, r3
 8016df8:	b29a      	uxth	r2, r3
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	895b      	ldrh	r3, [r3, #10]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d005      	beq.n	8016e12 <tcp_input+0x18a>
 8016e06:	4b40      	ldr	r3, [pc, #256]	@ (8016f08 <tcp_input+0x280>)
 8016e08:	22df      	movs	r2, #223	@ 0xdf
 8016e0a:	4949      	ldr	r1, [pc, #292]	@ (8016f30 <tcp_input+0x2a8>)
 8016e0c:	4840      	ldr	r0, [pc, #256]	@ (8016f10 <tcp_input+0x288>)
 8016e0e:	f009 f919 	bl	8020044 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	891a      	ldrh	r2, [r3, #8]
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	891b      	ldrh	r3, [r3, #8]
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d005      	beq.n	8016e2c <tcp_input+0x1a4>
 8016e20:	4b39      	ldr	r3, [pc, #228]	@ (8016f08 <tcp_input+0x280>)
 8016e22:	22e0      	movs	r2, #224	@ 0xe0
 8016e24:	4943      	ldr	r1, [pc, #268]	@ (8016f34 <tcp_input+0x2ac>)
 8016e26:	483a      	ldr	r0, [pc, #232]	@ (8016f10 <tcp_input+0x288>)
 8016e28:	f009 f90c 	bl	8020044 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8016f18 <tcp_input+0x290>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	881b      	ldrh	r3, [r3, #0]
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	4a38      	ldr	r2, [pc, #224]	@ (8016f18 <tcp_input+0x290>)
 8016e36:	6814      	ldr	r4, [r2, #0]
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f7fc f9e7 	bl	801320c <lwip_htons>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016e42:	4b35      	ldr	r3, [pc, #212]	@ (8016f18 <tcp_input+0x290>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	885b      	ldrh	r3, [r3, #2]
 8016e48:	b29b      	uxth	r3, r3
 8016e4a:	4a33      	ldr	r2, [pc, #204]	@ (8016f18 <tcp_input+0x290>)
 8016e4c:	6814      	ldr	r4, [r2, #0]
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7fc f9dc 	bl	801320c <lwip_htons>
 8016e54:	4603      	mov	r3, r0
 8016e56:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016e58:	4b2f      	ldr	r3, [pc, #188]	@ (8016f18 <tcp_input+0x290>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	685b      	ldr	r3, [r3, #4]
 8016e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8016f18 <tcp_input+0x290>)
 8016e60:	6814      	ldr	r4, [r2, #0]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7fc f9e8 	bl	8013238 <lwip_htonl>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	6063      	str	r3, [r4, #4]
 8016e6c:	6863      	ldr	r3, [r4, #4]
 8016e6e:	4a32      	ldr	r2, [pc, #200]	@ (8016f38 <tcp_input+0x2b0>)
 8016e70:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016e72:	4b29      	ldr	r3, [pc, #164]	@ (8016f18 <tcp_input+0x290>)
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	689b      	ldr	r3, [r3, #8]
 8016e78:	4a27      	ldr	r2, [pc, #156]	@ (8016f18 <tcp_input+0x290>)
 8016e7a:	6814      	ldr	r4, [r2, #0]
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f7fc f9db 	bl	8013238 <lwip_htonl>
 8016e82:	4603      	mov	r3, r0
 8016e84:	60a3      	str	r3, [r4, #8]
 8016e86:	68a3      	ldr	r3, [r4, #8]
 8016e88:	4a2c      	ldr	r2, [pc, #176]	@ (8016f3c <tcp_input+0x2b4>)
 8016e8a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016e8c:	4b22      	ldr	r3, [pc, #136]	@ (8016f18 <tcp_input+0x290>)
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	89db      	ldrh	r3, [r3, #14]
 8016e92:	b29b      	uxth	r3, r3
 8016e94:	4a20      	ldr	r2, [pc, #128]	@ (8016f18 <tcp_input+0x290>)
 8016e96:	6814      	ldr	r4, [r2, #0]
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7fc f9b7 	bl	801320c <lwip_htons>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8016f18 <tcp_input+0x290>)
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	899b      	ldrh	r3, [r3, #12]
 8016ea8:	b29b      	uxth	r3, r3
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7fc f9ae 	bl	801320c <lwip_htons>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	b2db      	uxtb	r3, r3
 8016eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016eb8:	b2da      	uxtb	r2, r3
 8016eba:	4b21      	ldr	r3, [pc, #132]	@ (8016f40 <tcp_input+0x2b8>)
 8016ebc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	891a      	ldrh	r2, [r3, #8]
 8016ec2:	4b20      	ldr	r3, [pc, #128]	@ (8016f44 <tcp_input+0x2bc>)
 8016ec4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8016f40 <tcp_input+0x2b8>)
 8016ec8:	781b      	ldrb	r3, [r3, #0]
 8016eca:	f003 0303 	and.w	r3, r3, #3
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d014      	beq.n	8016efc <tcp_input+0x274>
    tcplen++;
 8016ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8016f44 <tcp_input+0x2bc>)
 8016ed4:	881b      	ldrh	r3, [r3, #0]
 8016ed6:	3301      	adds	r3, #1
 8016ed8:	b29a      	uxth	r2, r3
 8016eda:	4b1a      	ldr	r3, [pc, #104]	@ (8016f44 <tcp_input+0x2bc>)
 8016edc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	891a      	ldrh	r2, [r3, #8]
 8016ee2:	4b18      	ldr	r3, [pc, #96]	@ (8016f44 <tcp_input+0x2bc>)
 8016ee4:	881b      	ldrh	r3, [r3, #0]
 8016ee6:	429a      	cmp	r2, r3
 8016ee8:	d908      	bls.n	8016efc <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8016eea:	4b0a      	ldr	r3, [pc, #40]	@ (8016f14 <tcp_input+0x28c>)
 8016eec:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	b29a      	uxth	r2, r3
 8016ef4:	4b07      	ldr	r3, [pc, #28]	@ (8016f14 <tcp_input+0x28c>)
 8016ef6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016efa:	e309      	b.n	8017510 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016efc:	2300      	movs	r3, #0
 8016efe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f00:	4b11      	ldr	r3, [pc, #68]	@ (8016f48 <tcp_input+0x2c0>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	61fb      	str	r3, [r7, #28]
 8016f06:	e0a1      	b.n	801704c <tcp_input+0x3c4>
 8016f08:	08022e84 	.word	0x08022e84
 8016f0c:	08022eb8 	.word	0x08022eb8
 8016f10:	08022ed0 	.word	0x08022ed0
 8016f14:	2002d2b0 	.word	0x2002d2b0
 8016f18:	2002d3d4 	.word	0x2002d3d4
 8016f1c:	200270b4 	.word	0x200270b4
 8016f20:	2002d3d8 	.word	0x2002d3d8
 8016f24:	2002d3dc 	.word	0x2002d3dc
 8016f28:	2002d3da 	.word	0x2002d3da
 8016f2c:	08022ef8 	.word	0x08022ef8
 8016f30:	08022f08 	.word	0x08022f08
 8016f34:	08022f14 	.word	0x08022f14
 8016f38:	2002d3e4 	.word	0x2002d3e4
 8016f3c:	2002d3e8 	.word	0x2002d3e8
 8016f40:	2002d3f0 	.word	0x2002d3f0
 8016f44:	2002d3ee 	.word	0x2002d3ee
 8016f48:	2002d3b8 	.word	0x2002d3b8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	7d1b      	ldrb	r3, [r3, #20]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d105      	bne.n	8016f60 <tcp_input+0x2d8>
 8016f54:	4b8a      	ldr	r3, [pc, #552]	@ (8017180 <tcp_input+0x4f8>)
 8016f56:	22fb      	movs	r2, #251	@ 0xfb
 8016f58:	498a      	ldr	r1, [pc, #552]	@ (8017184 <tcp_input+0x4fc>)
 8016f5a:	488b      	ldr	r0, [pc, #556]	@ (8017188 <tcp_input+0x500>)
 8016f5c:	f009 f872 	bl	8020044 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	7d1b      	ldrb	r3, [r3, #20]
 8016f64:	2b0a      	cmp	r3, #10
 8016f66:	d105      	bne.n	8016f74 <tcp_input+0x2ec>
 8016f68:	4b85      	ldr	r3, [pc, #532]	@ (8017180 <tcp_input+0x4f8>)
 8016f6a:	22fc      	movs	r2, #252	@ 0xfc
 8016f6c:	4987      	ldr	r1, [pc, #540]	@ (801718c <tcp_input+0x504>)
 8016f6e:	4886      	ldr	r0, [pc, #536]	@ (8017188 <tcp_input+0x500>)
 8016f70:	f009 f868 	bl	8020044 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016f74:	69fb      	ldr	r3, [r7, #28]
 8016f76:	7d1b      	ldrb	r3, [r3, #20]
 8016f78:	2b01      	cmp	r3, #1
 8016f7a:	d105      	bne.n	8016f88 <tcp_input+0x300>
 8016f7c:	4b80      	ldr	r3, [pc, #512]	@ (8017180 <tcp_input+0x4f8>)
 8016f7e:	22fd      	movs	r2, #253	@ 0xfd
 8016f80:	4983      	ldr	r1, [pc, #524]	@ (8017190 <tcp_input+0x508>)
 8016f82:	4881      	ldr	r0, [pc, #516]	@ (8017188 <tcp_input+0x500>)
 8016f84:	f009 f85e 	bl	8020044 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016f88:	69fb      	ldr	r3, [r7, #28]
 8016f8a:	7a1b      	ldrb	r3, [r3, #8]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d00c      	beq.n	8016faa <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	7a1a      	ldrb	r2, [r3, #8]
 8016f94:	4b7f      	ldr	r3, [pc, #508]	@ (8017194 <tcp_input+0x50c>)
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016f9c:	3301      	adds	r3, #1
 8016f9e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016fa0:	429a      	cmp	r2, r3
 8016fa2:	d002      	beq.n	8016faa <tcp_input+0x322>
      prev = pcb;
 8016fa4:	69fb      	ldr	r3, [r7, #28]
 8016fa6:	61bb      	str	r3, [r7, #24]
      continue;
 8016fa8:	e04d      	b.n	8017046 <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8016faa:	69fb      	ldr	r3, [r7, #28]
 8016fac:	8b1a      	ldrh	r2, [r3, #24]
 8016fae:	4b7a      	ldr	r3, [pc, #488]	@ (8017198 <tcp_input+0x510>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	881b      	ldrh	r3, [r3, #0]
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d143      	bne.n	8017042 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8016fba:	69fb      	ldr	r3, [r7, #28]
 8016fbc:	8ada      	ldrh	r2, [r3, #22]
 8016fbe:	4b76      	ldr	r3, [pc, #472]	@ (8017198 <tcp_input+0x510>)
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	885b      	ldrh	r3, [r3, #2]
 8016fc4:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016fc6:	429a      	cmp	r2, r3
 8016fc8:	d13b      	bne.n	8017042 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016fca:	69fb      	ldr	r3, [r7, #28]
 8016fcc:	685a      	ldr	r2, [r3, #4]
 8016fce:	4b71      	ldr	r3, [pc, #452]	@ (8017194 <tcp_input+0x50c>)
 8016fd0:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016fd2:	429a      	cmp	r2, r3
 8016fd4:	d135      	bne.n	8017042 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016fd6:	69fb      	ldr	r3, [r7, #28]
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	4b6e      	ldr	r3, [pc, #440]	@ (8017194 <tcp_input+0x50c>)
 8016fdc:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016fde:	429a      	cmp	r2, r3
 8016fe0:	d12f      	bne.n	8017042 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016fe2:	69fb      	ldr	r3, [r7, #28]
 8016fe4:	68db      	ldr	r3, [r3, #12]
 8016fe6:	69fa      	ldr	r2, [r7, #28]
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d106      	bne.n	8016ffa <tcp_input+0x372>
 8016fec:	4b64      	ldr	r3, [pc, #400]	@ (8017180 <tcp_input+0x4f8>)
 8016fee:	f240 120d 	movw	r2, #269	@ 0x10d
 8016ff2:	496a      	ldr	r1, [pc, #424]	@ (801719c <tcp_input+0x514>)
 8016ff4:	4864      	ldr	r0, [pc, #400]	@ (8017188 <tcp_input+0x500>)
 8016ff6:	f009 f825 	bl	8020044 <iprintf>
      if (prev != NULL) {
 8016ffa:	69bb      	ldr	r3, [r7, #24]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d00b      	beq.n	8017018 <tcp_input+0x390>
        prev->next = pcb->next;
 8017000:	69fb      	ldr	r3, [r7, #28]
 8017002:	68da      	ldr	r2, [r3, #12]
 8017004:	69bb      	ldr	r3, [r7, #24]
 8017006:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017008:	4b65      	ldr	r3, [pc, #404]	@ (80171a0 <tcp_input+0x518>)
 801700a:	681a      	ldr	r2, [r3, #0]
 801700c:	69fb      	ldr	r3, [r7, #28]
 801700e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8017010:	4a63      	ldr	r2, [pc, #396]	@ (80171a0 <tcp_input+0x518>)
 8017012:	69fb      	ldr	r3, [r7, #28]
 8017014:	6013      	str	r3, [r2, #0]
 8017016:	e007      	b.n	8017028 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017018:	4b62      	ldr	r3, [pc, #392]	@ (80171a4 <tcp_input+0x51c>)
 801701a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801701e:	3301      	adds	r3, #1
 8017020:	b29a      	uxth	r2, r3
 8017022:	4b60      	ldr	r3, [pc, #384]	@ (80171a4 <tcp_input+0x51c>)
 8017024:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017028:	69fb      	ldr	r3, [r7, #28]
 801702a:	68db      	ldr	r3, [r3, #12]
 801702c:	69fa      	ldr	r2, [r7, #28]
 801702e:	429a      	cmp	r2, r3
 8017030:	d111      	bne.n	8017056 <tcp_input+0x3ce>
 8017032:	4b53      	ldr	r3, [pc, #332]	@ (8017180 <tcp_input+0x4f8>)
 8017034:	f240 1215 	movw	r2, #277	@ 0x115
 8017038:	495b      	ldr	r1, [pc, #364]	@ (80171a8 <tcp_input+0x520>)
 801703a:	4853      	ldr	r0, [pc, #332]	@ (8017188 <tcp_input+0x500>)
 801703c:	f009 f802 	bl	8020044 <iprintf>
      break;
 8017040:	e009      	b.n	8017056 <tcp_input+0x3ce>
    }
    prev = pcb;
 8017042:	69fb      	ldr	r3, [r7, #28]
 8017044:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017046:	69fb      	ldr	r3, [r7, #28]
 8017048:	68db      	ldr	r3, [r3, #12]
 801704a:	61fb      	str	r3, [r7, #28]
 801704c:	69fb      	ldr	r3, [r7, #28]
 801704e:	2b00      	cmp	r3, #0
 8017050:	f47f af7c 	bne.w	8016f4c <tcp_input+0x2c4>
 8017054:	e000      	b.n	8017058 <tcp_input+0x3d0>
      break;
 8017056:	bf00      	nop
  }

  if (pcb == NULL) {
 8017058:	69fb      	ldr	r3, [r7, #28]
 801705a:	2b00      	cmp	r3, #0
 801705c:	f040 80bb 	bne.w	80171d6 <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017060:	4b52      	ldr	r3, [pc, #328]	@ (80171ac <tcp_input+0x524>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	61fb      	str	r3, [r7, #28]
 8017066:	e03f      	b.n	80170e8 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017068:	69fb      	ldr	r3, [r7, #28]
 801706a:	7d1b      	ldrb	r3, [r3, #20]
 801706c:	2b0a      	cmp	r3, #10
 801706e:	d006      	beq.n	801707e <tcp_input+0x3f6>
 8017070:	4b43      	ldr	r3, [pc, #268]	@ (8017180 <tcp_input+0x4f8>)
 8017072:	f240 121f 	movw	r2, #287	@ 0x11f
 8017076:	494e      	ldr	r1, [pc, #312]	@ (80171b0 <tcp_input+0x528>)
 8017078:	4843      	ldr	r0, [pc, #268]	@ (8017188 <tcp_input+0x500>)
 801707a:	f008 ffe3 	bl	8020044 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801707e:	69fb      	ldr	r3, [r7, #28]
 8017080:	7a1b      	ldrb	r3, [r3, #8]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d009      	beq.n	801709a <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017086:	69fb      	ldr	r3, [r7, #28]
 8017088:	7a1a      	ldrb	r2, [r3, #8]
 801708a:	4b42      	ldr	r3, [pc, #264]	@ (8017194 <tcp_input+0x50c>)
 801708c:	685b      	ldr	r3, [r3, #4]
 801708e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017092:	3301      	adds	r3, #1
 8017094:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017096:	429a      	cmp	r2, r3
 8017098:	d122      	bne.n	80170e0 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801709a:	69fb      	ldr	r3, [r7, #28]
 801709c:	8b1a      	ldrh	r2, [r3, #24]
 801709e:	4b3e      	ldr	r3, [pc, #248]	@ (8017198 <tcp_input+0x510>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	881b      	ldrh	r3, [r3, #0]
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d11b      	bne.n	80170e2 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 80170aa:	69fb      	ldr	r3, [r7, #28]
 80170ac:	8ada      	ldrh	r2, [r3, #22]
 80170ae:	4b3a      	ldr	r3, [pc, #232]	@ (8017198 <tcp_input+0x510>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	885b      	ldrh	r3, [r3, #2]
 80170b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d113      	bne.n	80170e2 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80170ba:	69fb      	ldr	r3, [r7, #28]
 80170bc:	685a      	ldr	r2, [r3, #4]
 80170be:	4b35      	ldr	r3, [pc, #212]	@ (8017194 <tcp_input+0x50c>)
 80170c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d10d      	bne.n	80170e2 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80170c6:	69fb      	ldr	r3, [r7, #28]
 80170c8:	681a      	ldr	r2, [r3, #0]
 80170ca:	4b32      	ldr	r3, [pc, #200]	@ (8017194 <tcp_input+0x50c>)
 80170cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d107      	bne.n	80170e2 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80170d2:	69f8      	ldr	r0, [r7, #28]
 80170d4:	f000 fb88 	bl	80177e8 <tcp_timewait_input>
        }
        pbuf_free(p);
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f7fd fd55 	bl	8014b88 <pbuf_free>
        return;
 80170de:	e224      	b.n	801752a <tcp_input+0x8a2>
        continue;
 80170e0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80170e2:	69fb      	ldr	r3, [r7, #28]
 80170e4:	68db      	ldr	r3, [r3, #12]
 80170e6:	61fb      	str	r3, [r7, #28]
 80170e8:	69fb      	ldr	r3, [r7, #28]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d1bc      	bne.n	8017068 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80170ee:	2300      	movs	r3, #0
 80170f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80170f2:	4b30      	ldr	r3, [pc, #192]	@ (80171b4 <tcp_input+0x52c>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	617b      	str	r3, [r7, #20]
 80170f8:	e02a      	b.n	8017150 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	7a1b      	ldrb	r3, [r3, #8]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d00c      	beq.n	801711c <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	7a1a      	ldrb	r2, [r3, #8]
 8017106:	4b23      	ldr	r3, [pc, #140]	@ (8017194 <tcp_input+0x50c>)
 8017108:	685b      	ldr	r3, [r3, #4]
 801710a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801710e:	3301      	adds	r3, #1
 8017110:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017112:	429a      	cmp	r2, r3
 8017114:	d002      	beq.n	801711c <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	61bb      	str	r3, [r7, #24]
        continue;
 801711a:	e016      	b.n	801714a <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	8ada      	ldrh	r2, [r3, #22]
 8017120:	4b1d      	ldr	r3, [pc, #116]	@ (8017198 <tcp_input+0x510>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	885b      	ldrh	r3, [r3, #2]
 8017126:	b29b      	uxth	r3, r3
 8017128:	429a      	cmp	r2, r3
 801712a:	d10c      	bne.n	8017146 <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801712c:	697b      	ldr	r3, [r7, #20]
 801712e:	681a      	ldr	r2, [r3, #0]
 8017130:	4b18      	ldr	r3, [pc, #96]	@ (8017194 <tcp_input+0x50c>)
 8017132:	695b      	ldr	r3, [r3, #20]
 8017134:	429a      	cmp	r2, r3
 8017136:	d00f      	beq.n	8017158 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017138:	697b      	ldr	r3, [r7, #20]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d00d      	beq.n	801715a <tcp_input+0x4d2>
 801713e:	697b      	ldr	r3, [r7, #20]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d009      	beq.n	801715a <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	68db      	ldr	r3, [r3, #12]
 801714e:	617b      	str	r3, [r7, #20]
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d1d1      	bne.n	80170fa <tcp_input+0x472>
 8017156:	e000      	b.n	801715a <tcp_input+0x4d2>
            break;
 8017158:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801715a:	697b      	ldr	r3, [r7, #20]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d03a      	beq.n	80171d6 <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017160:	69bb      	ldr	r3, [r7, #24]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d028      	beq.n	80171b8 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017166:	697b      	ldr	r3, [r7, #20]
 8017168:	68da      	ldr	r2, [r3, #12]
 801716a:	69bb      	ldr	r3, [r7, #24]
 801716c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801716e:	4b11      	ldr	r3, [pc, #68]	@ (80171b4 <tcp_input+0x52c>)
 8017170:	681a      	ldr	r2, [r3, #0]
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017176:	4a0f      	ldr	r2, [pc, #60]	@ (80171b4 <tcp_input+0x52c>)
 8017178:	697b      	ldr	r3, [r7, #20]
 801717a:	6013      	str	r3, [r2, #0]
 801717c:	e024      	b.n	80171c8 <tcp_input+0x540>
 801717e:	bf00      	nop
 8017180:	08022e84 	.word	0x08022e84
 8017184:	08022f34 	.word	0x08022f34
 8017188:	08022ed0 	.word	0x08022ed0
 801718c:	08022f5c 	.word	0x08022f5c
 8017190:	08022f88 	.word	0x08022f88
 8017194:	200270b4 	.word	0x200270b4
 8017198:	2002d3d4 	.word	0x2002d3d4
 801719c:	08022fb0 	.word	0x08022fb0
 80171a0:	2002d3b8 	.word	0x2002d3b8
 80171a4:	2002d2b0 	.word	0x2002d2b0
 80171a8:	08022fdc 	.word	0x08022fdc
 80171ac:	2002d3bc 	.word	0x2002d3bc
 80171b0:	08023008 	.word	0x08023008
 80171b4:	2002d3b4 	.word	0x2002d3b4
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80171b8:	4ba0      	ldr	r3, [pc, #640]	@ (801743c <tcp_input+0x7b4>)
 80171ba:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80171be:	3301      	adds	r3, #1
 80171c0:	b29a      	uxth	r2, r3
 80171c2:	4b9e      	ldr	r3, [pc, #632]	@ (801743c <tcp_input+0x7b4>)
 80171c4:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80171c8:	6978      	ldr	r0, [r7, #20]
 80171ca:	f000 fa05 	bl	80175d8 <tcp_listen_input>
      }
      pbuf_free(p);
 80171ce:	6878      	ldr	r0, [r7, #4]
 80171d0:	f7fd fcda 	bl	8014b88 <pbuf_free>
      return;
 80171d4:	e1a9      	b.n	801752a <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80171d6:	69fb      	ldr	r3, [r7, #28]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	f000 815f 	beq.w	801749c <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80171de:	4b98      	ldr	r3, [pc, #608]	@ (8017440 <tcp_input+0x7b8>)
 80171e0:	2200      	movs	r2, #0
 80171e2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	891a      	ldrh	r2, [r3, #8]
 80171e8:	4b95      	ldr	r3, [pc, #596]	@ (8017440 <tcp_input+0x7b8>)
 80171ea:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80171ec:	4a94      	ldr	r2, [pc, #592]	@ (8017440 <tcp_input+0x7b8>)
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80171f2:	4b94      	ldr	r3, [pc, #592]	@ (8017444 <tcp_input+0x7bc>)
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	4a92      	ldr	r2, [pc, #584]	@ (8017440 <tcp_input+0x7b8>)
 80171f8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80171fa:	4b93      	ldr	r3, [pc, #588]	@ (8017448 <tcp_input+0x7c0>)
 80171fc:	2200      	movs	r2, #0
 80171fe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017200:	4b92      	ldr	r3, [pc, #584]	@ (801744c <tcp_input+0x7c4>)
 8017202:	2200      	movs	r2, #0
 8017204:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017206:	4b92      	ldr	r3, [pc, #584]	@ (8017450 <tcp_input+0x7c8>)
 8017208:	2200      	movs	r2, #0
 801720a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801720c:	4b91      	ldr	r3, [pc, #580]	@ (8017454 <tcp_input+0x7cc>)
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	f003 0308 	and.w	r3, r3, #8
 8017214:	2b00      	cmp	r3, #0
 8017216:	d006      	beq.n	8017226 <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	7b5b      	ldrb	r3, [r3, #13]
 801721c:	f043 0301 	orr.w	r3, r3, #1
 8017220:	b2da      	uxtb	r2, r3
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801722a:	2b00      	cmp	r3, #0
 801722c:	d01e      	beq.n	801726c <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801722e:	69f8      	ldr	r0, [r7, #28]
 8017230:	f7fe ffec 	bl	801620c <tcp_process_refused_data>
 8017234:	4603      	mov	r3, r0
 8017236:	f113 0f0d 	cmn.w	r3, #13
 801723a:	d007      	beq.n	801724c <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801723c:	69fb      	ldr	r3, [r7, #28]
 801723e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017240:	2b00      	cmp	r3, #0
 8017242:	d013      	beq.n	801726c <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017244:	4b84      	ldr	r3, [pc, #528]	@ (8017458 <tcp_input+0x7d0>)
 8017246:	881b      	ldrh	r3, [r3, #0]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d00f      	beq.n	801726c <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801724c:	69fb      	ldr	r3, [r7, #28]
 801724e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017250:	2b00      	cmp	r3, #0
 8017252:	d102      	bne.n	801725a <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017254:	69f8      	ldr	r0, [r7, #28]
 8017256:	f003 fe6f 	bl	801af38 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 801725a:	4b78      	ldr	r3, [pc, #480]	@ (801743c <tcp_input+0x7b4>)
 801725c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017260:	3301      	adds	r3, #1
 8017262:	b29a      	uxth	r2, r3
 8017264:	4b75      	ldr	r3, [pc, #468]	@ (801743c <tcp_input+0x7b4>)
 8017266:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801726a:	e104      	b.n	8017476 <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 801726c:	4a7b      	ldr	r2, [pc, #492]	@ (801745c <tcp_input+0x7d4>)
 801726e:	69fb      	ldr	r3, [r7, #28]
 8017270:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017272:	69f8      	ldr	r0, [r7, #28]
 8017274:	f000 fb32 	bl	80178dc <tcp_process>
 8017278:	4603      	mov	r3, r0
 801727a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801727c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017280:	f113 0f0d 	cmn.w	r3, #13
 8017284:	f000 80d1 	beq.w	801742a <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8017288:	4b70      	ldr	r3, [pc, #448]	@ (801744c <tcp_input+0x7c4>)
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	f003 0308 	and.w	r3, r3, #8
 8017290:	2b00      	cmp	r3, #0
 8017292:	d015      	beq.n	80172c0 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017294:	69fb      	ldr	r3, [r7, #28]
 8017296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801729a:	2b00      	cmp	r3, #0
 801729c:	d008      	beq.n	80172b0 <tcp_input+0x628>
 801729e:	69fb      	ldr	r3, [r7, #28]
 80172a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80172a4:	69fa      	ldr	r2, [r7, #28]
 80172a6:	6912      	ldr	r2, [r2, #16]
 80172a8:	f06f 010d 	mvn.w	r1, #13
 80172ac:	4610      	mov	r0, r2
 80172ae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80172b0:	69f9      	ldr	r1, [r7, #28]
 80172b2:	486b      	ldr	r0, [pc, #428]	@ (8017460 <tcp_input+0x7d8>)
 80172b4:	f7ff fb70 	bl	8016998 <tcp_pcb_remove>
        tcp_free(pcb);
 80172b8:	69f8      	ldr	r0, [r7, #28]
 80172ba:	f7fd ff29 	bl	8015110 <tcp_free>
 80172be:	e0da      	b.n	8017476 <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 80172c0:	2300      	movs	r3, #0
 80172c2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80172c4:	4b62      	ldr	r3, [pc, #392]	@ (8017450 <tcp_input+0x7c8>)
 80172c6:	881b      	ldrh	r3, [r3, #0]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d01d      	beq.n	8017308 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80172cc:	4b60      	ldr	r3, [pc, #384]	@ (8017450 <tcp_input+0x7c8>)
 80172ce:	881b      	ldrh	r3, [r3, #0]
 80172d0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80172d2:	69fb      	ldr	r3, [r7, #28]
 80172d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d00a      	beq.n	80172f2 <tcp_input+0x66a>
 80172dc:	69fb      	ldr	r3, [r7, #28]
 80172de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80172e2:	69fa      	ldr	r2, [r7, #28]
 80172e4:	6910      	ldr	r0, [r2, #16]
 80172e6:	89fa      	ldrh	r2, [r7, #14]
 80172e8:	69f9      	ldr	r1, [r7, #28]
 80172ea:	4798      	blx	r3
 80172ec:	4603      	mov	r3, r0
 80172ee:	74fb      	strb	r3, [r7, #19]
 80172f0:	e001      	b.n	80172f6 <tcp_input+0x66e>
 80172f2:	2300      	movs	r3, #0
 80172f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80172f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80172fa:	f113 0f0d 	cmn.w	r3, #13
 80172fe:	f000 8096 	beq.w	801742e <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017302:	4b53      	ldr	r3, [pc, #332]	@ (8017450 <tcp_input+0x7c8>)
 8017304:	2200      	movs	r2, #0
 8017306:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017308:	69f8      	ldr	r0, [r7, #28]
 801730a:	f000 f925 	bl	8017558 <tcp_input_delayed_close>
 801730e:	4603      	mov	r3, r0
 8017310:	2b00      	cmp	r3, #0
 8017312:	f040 808e 	bne.w	8017432 <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017316:	4b4c      	ldr	r3, [pc, #304]	@ (8017448 <tcp_input+0x7c0>)
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d041      	beq.n	80173a2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801731e:	69fb      	ldr	r3, [r7, #28]
 8017320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017322:	2b00      	cmp	r3, #0
 8017324:	d006      	beq.n	8017334 <tcp_input+0x6ac>
 8017326:	4b4f      	ldr	r3, [pc, #316]	@ (8017464 <tcp_input+0x7dc>)
 8017328:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801732c:	494e      	ldr	r1, [pc, #312]	@ (8017468 <tcp_input+0x7e0>)
 801732e:	484f      	ldr	r0, [pc, #316]	@ (801746c <tcp_input+0x7e4>)
 8017330:	f008 fe88 	bl	8020044 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017334:	69fb      	ldr	r3, [r7, #28]
 8017336:	8b5b      	ldrh	r3, [r3, #26]
 8017338:	f003 0310 	and.w	r3, r3, #16
 801733c:	2b00      	cmp	r3, #0
 801733e:	d008      	beq.n	8017352 <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017340:	4b41      	ldr	r3, [pc, #260]	@ (8017448 <tcp_input+0x7c0>)
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	4618      	mov	r0, r3
 8017346:	f7fd fc1f 	bl	8014b88 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801734a:	69f8      	ldr	r0, [r7, #28]
 801734c:	f7fe fa24 	bl	8015798 <tcp_abort>
            goto aborted;
 8017350:	e091      	b.n	8017476 <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017352:	69fb      	ldr	r3, [r7, #28]
 8017354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017358:	2b00      	cmp	r3, #0
 801735a:	d00c      	beq.n	8017376 <tcp_input+0x6ee>
 801735c:	69fb      	ldr	r3, [r7, #28]
 801735e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017362:	69fb      	ldr	r3, [r7, #28]
 8017364:	6918      	ldr	r0, [r3, #16]
 8017366:	4b38      	ldr	r3, [pc, #224]	@ (8017448 <tcp_input+0x7c0>)
 8017368:	681a      	ldr	r2, [r3, #0]
 801736a:	2300      	movs	r3, #0
 801736c:	69f9      	ldr	r1, [r7, #28]
 801736e:	47a0      	blx	r4
 8017370:	4603      	mov	r3, r0
 8017372:	74fb      	strb	r3, [r7, #19]
 8017374:	e008      	b.n	8017388 <tcp_input+0x700>
 8017376:	4b34      	ldr	r3, [pc, #208]	@ (8017448 <tcp_input+0x7c0>)
 8017378:	681a      	ldr	r2, [r3, #0]
 801737a:	2300      	movs	r3, #0
 801737c:	69f9      	ldr	r1, [r7, #28]
 801737e:	2000      	movs	r0, #0
 8017380:	f7ff f81a 	bl	80163b8 <tcp_recv_null>
 8017384:	4603      	mov	r3, r0
 8017386:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801738c:	f113 0f0d 	cmn.w	r3, #13
 8017390:	d051      	beq.n	8017436 <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017392:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d003      	beq.n	80173a2 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801739a:	4b2b      	ldr	r3, [pc, #172]	@ (8017448 <tcp_input+0x7c0>)
 801739c:	681a      	ldr	r2, [r3, #0]
 801739e:	69fb      	ldr	r3, [r7, #28]
 80173a0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80173a2:	4b2a      	ldr	r3, [pc, #168]	@ (801744c <tcp_input+0x7c4>)
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	f003 0320 	and.w	r3, r3, #32
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d030      	beq.n	8017410 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 80173ae:	69fb      	ldr	r3, [r7, #28]
 80173b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d009      	beq.n	80173ca <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80173b6:	69fb      	ldr	r3, [r7, #28]
 80173b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173ba:	7b5a      	ldrb	r2, [r3, #13]
 80173bc:	69fb      	ldr	r3, [r7, #28]
 80173be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173c0:	f042 0220 	orr.w	r2, r2, #32
 80173c4:	b2d2      	uxtb	r2, r2
 80173c6:	735a      	strb	r2, [r3, #13]
 80173c8:	e022      	b.n	8017410 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80173ca:	69fb      	ldr	r3, [r7, #28]
 80173cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80173ce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80173d2:	d005      	beq.n	80173e0 <tcp_input+0x758>
              pcb->rcv_wnd++;
 80173d4:	69fb      	ldr	r3, [r7, #28]
 80173d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80173d8:	3301      	adds	r3, #1
 80173da:	b29a      	uxth	r2, r3
 80173dc:	69fb      	ldr	r3, [r7, #28]
 80173de:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d00b      	beq.n	8017402 <tcp_input+0x77a>
 80173ea:	69fb      	ldr	r3, [r7, #28]
 80173ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80173f0:	69fb      	ldr	r3, [r7, #28]
 80173f2:	6918      	ldr	r0, [r3, #16]
 80173f4:	2300      	movs	r3, #0
 80173f6:	2200      	movs	r2, #0
 80173f8:	69f9      	ldr	r1, [r7, #28]
 80173fa:	47a0      	blx	r4
 80173fc:	4603      	mov	r3, r0
 80173fe:	74fb      	strb	r3, [r7, #19]
 8017400:	e001      	b.n	8017406 <tcp_input+0x77e>
 8017402:	2300      	movs	r3, #0
 8017404:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017406:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801740a:	f113 0f0d 	cmn.w	r3, #13
 801740e:	d02f      	beq.n	8017470 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017410:	4b12      	ldr	r3, [pc, #72]	@ (801745c <tcp_input+0x7d4>)
 8017412:	2200      	movs	r2, #0
 8017414:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017416:	69f8      	ldr	r0, [r7, #28]
 8017418:	f000 f89e 	bl	8017558 <tcp_input_delayed_close>
 801741c:	4603      	mov	r3, r0
 801741e:	2b00      	cmp	r3, #0
 8017420:	d128      	bne.n	8017474 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017422:	69f8      	ldr	r0, [r7, #28]
 8017424:	f002 ff6e 	bl	801a304 <tcp_output>
 8017428:	e025      	b.n	8017476 <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801742a:	bf00      	nop
 801742c:	e023      	b.n	8017476 <tcp_input+0x7ee>
              goto aborted;
 801742e:	bf00      	nop
 8017430:	e021      	b.n	8017476 <tcp_input+0x7ee>
          goto aborted;
 8017432:	bf00      	nop
 8017434:	e01f      	b.n	8017476 <tcp_input+0x7ee>
            goto aborted;
 8017436:	bf00      	nop
 8017438:	e01d      	b.n	8017476 <tcp_input+0x7ee>
 801743a:	bf00      	nop
 801743c:	2002d2b0 	.word	0x2002d2b0
 8017440:	2002d3c4 	.word	0x2002d3c4
 8017444:	2002d3d4 	.word	0x2002d3d4
 8017448:	2002d3f4 	.word	0x2002d3f4
 801744c:	2002d3f1 	.word	0x2002d3f1
 8017450:	2002d3ec 	.word	0x2002d3ec
 8017454:	2002d3f0 	.word	0x2002d3f0
 8017458:	2002d3ee 	.word	0x2002d3ee
 801745c:	2002d3f8 	.word	0x2002d3f8
 8017460:	2002d3b8 	.word	0x2002d3b8
 8017464:	08022e84 	.word	0x08022e84
 8017468:	08023038 	.word	0x08023038
 801746c:	08022ed0 	.word	0x08022ed0
              goto aborted;
 8017470:	bf00      	nop
 8017472:	e000      	b.n	8017476 <tcp_input+0x7ee>
          goto aborted;
 8017474:	bf00      	nop
    tcp_input_pcb = NULL;
 8017476:	4b2e      	ldr	r3, [pc, #184]	@ (8017530 <tcp_input+0x8a8>)
 8017478:	2200      	movs	r2, #0
 801747a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801747c:	4b2d      	ldr	r3, [pc, #180]	@ (8017534 <tcp_input+0x8ac>)
 801747e:	2200      	movs	r2, #0
 8017480:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017482:	4b2d      	ldr	r3, [pc, #180]	@ (8017538 <tcp_input+0x8b0>)
 8017484:	685b      	ldr	r3, [r3, #4]
 8017486:	2b00      	cmp	r3, #0
 8017488:	d04e      	beq.n	8017528 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 801748a:	4b2b      	ldr	r3, [pc, #172]	@ (8017538 <tcp_input+0x8b0>)
 801748c:	685b      	ldr	r3, [r3, #4]
 801748e:	4618      	mov	r0, r3
 8017490:	f7fd fb7a 	bl	8014b88 <pbuf_free>
      inseg.p = NULL;
 8017494:	4b28      	ldr	r3, [pc, #160]	@ (8017538 <tcp_input+0x8b0>)
 8017496:	2200      	movs	r2, #0
 8017498:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801749a:	e045      	b.n	8017528 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801749c:	4b27      	ldr	r3, [pc, #156]	@ (801753c <tcp_input+0x8b4>)
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	899b      	ldrh	r3, [r3, #12]
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	4618      	mov	r0, r3
 80174a6:	f7fb feb1 	bl	801320c <lwip_htons>
 80174aa:	4603      	mov	r3, r0
 80174ac:	b2db      	uxtb	r3, r3
 80174ae:	f003 0304 	and.w	r3, r3, #4
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d128      	bne.n	8017508 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 80174b6:	4b22      	ldr	r3, [pc, #136]	@ (8017540 <tcp_input+0x8b8>)
 80174b8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80174bc:	3301      	adds	r3, #1
 80174be:	b29a      	uxth	r2, r3
 80174c0:	4b1f      	ldr	r3, [pc, #124]	@ (8017540 <tcp_input+0x8b8>)
 80174c2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 80174c6:	4b1e      	ldr	r3, [pc, #120]	@ (8017540 <tcp_input+0x8b8>)
 80174c8:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80174cc:	3301      	adds	r3, #1
 80174ce:	b29a      	uxth	r2, r3
 80174d0:	4b1b      	ldr	r3, [pc, #108]	@ (8017540 <tcp_input+0x8b8>)
 80174d2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80174d6:	4b1b      	ldr	r3, [pc, #108]	@ (8017544 <tcp_input+0x8bc>)
 80174d8:	6819      	ldr	r1, [r3, #0]
 80174da:	4b1b      	ldr	r3, [pc, #108]	@ (8017548 <tcp_input+0x8c0>)
 80174dc:	881b      	ldrh	r3, [r3, #0]
 80174de:	461a      	mov	r2, r3
 80174e0:	4b1a      	ldr	r3, [pc, #104]	@ (801754c <tcp_input+0x8c4>)
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80174e6:	4b15      	ldr	r3, [pc, #84]	@ (801753c <tcp_input+0x8b4>)
 80174e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80174ea:	885b      	ldrh	r3, [r3, #2]
 80174ec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80174ee:	4a13      	ldr	r2, [pc, #76]	@ (801753c <tcp_input+0x8b4>)
 80174f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80174f2:	8812      	ldrh	r2, [r2, #0]
 80174f4:	b292      	uxth	r2, r2
 80174f6:	9202      	str	r2, [sp, #8]
 80174f8:	9301      	str	r3, [sp, #4]
 80174fa:	4b15      	ldr	r3, [pc, #84]	@ (8017550 <tcp_input+0x8c8>)
 80174fc:	9300      	str	r3, [sp, #0]
 80174fe:	4b15      	ldr	r3, [pc, #84]	@ (8017554 <tcp_input+0x8cc>)
 8017500:	4602      	mov	r2, r0
 8017502:	2000      	movs	r0, #0
 8017504:	f003 fcc6 	bl	801ae94 <tcp_rst>
    pbuf_free(p);
 8017508:	6878      	ldr	r0, [r7, #4]
 801750a:	f7fd fb3d 	bl	8014b88 <pbuf_free>
  return;
 801750e:	e00b      	b.n	8017528 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 8017510:	4b0b      	ldr	r3, [pc, #44]	@ (8017540 <tcp_input+0x8b8>)
 8017512:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017516:	3301      	adds	r3, #1
 8017518:	b29a      	uxth	r2, r3
 801751a:	4b09      	ldr	r3, [pc, #36]	@ (8017540 <tcp_input+0x8b8>)
 801751c:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f7fd fb31 	bl	8014b88 <pbuf_free>
 8017526:	e000      	b.n	801752a <tcp_input+0x8a2>
  return;
 8017528:	bf00      	nop
}
 801752a:	3724      	adds	r7, #36	@ 0x24
 801752c:	46bd      	mov	sp, r7
 801752e:	bd90      	pop	{r4, r7, pc}
 8017530:	2002d3f8 	.word	0x2002d3f8
 8017534:	2002d3f4 	.word	0x2002d3f4
 8017538:	2002d3c4 	.word	0x2002d3c4
 801753c:	2002d3d4 	.word	0x2002d3d4
 8017540:	2002d2b0 	.word	0x2002d2b0
 8017544:	2002d3e8 	.word	0x2002d3e8
 8017548:	2002d3ee 	.word	0x2002d3ee
 801754c:	2002d3e4 	.word	0x2002d3e4
 8017550:	200270c4 	.word	0x200270c4
 8017554:	200270c8 	.word	0x200270c8

08017558 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b082      	sub	sp, #8
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d106      	bne.n	8017574 <tcp_input_delayed_close+0x1c>
 8017566:	4b17      	ldr	r3, [pc, #92]	@ (80175c4 <tcp_input_delayed_close+0x6c>)
 8017568:	f240 225a 	movw	r2, #602	@ 0x25a
 801756c:	4916      	ldr	r1, [pc, #88]	@ (80175c8 <tcp_input_delayed_close+0x70>)
 801756e:	4817      	ldr	r0, [pc, #92]	@ (80175cc <tcp_input_delayed_close+0x74>)
 8017570:	f008 fd68 	bl	8020044 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017574:	4b16      	ldr	r3, [pc, #88]	@ (80175d0 <tcp_input_delayed_close+0x78>)
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	f003 0310 	and.w	r3, r3, #16
 801757c:	2b00      	cmp	r3, #0
 801757e:	d01c      	beq.n	80175ba <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	8b5b      	ldrh	r3, [r3, #26]
 8017584:	f003 0310 	and.w	r3, r3, #16
 8017588:	2b00      	cmp	r3, #0
 801758a:	d10d      	bne.n	80175a8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017592:	2b00      	cmp	r3, #0
 8017594:	d008      	beq.n	80175a8 <tcp_input_delayed_close+0x50>
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	6912      	ldr	r2, [r2, #16]
 80175a0:	f06f 010e 	mvn.w	r1, #14
 80175a4:	4610      	mov	r0, r2
 80175a6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80175a8:	6879      	ldr	r1, [r7, #4]
 80175aa:	480a      	ldr	r0, [pc, #40]	@ (80175d4 <tcp_input_delayed_close+0x7c>)
 80175ac:	f7ff f9f4 	bl	8016998 <tcp_pcb_remove>
    tcp_free(pcb);
 80175b0:	6878      	ldr	r0, [r7, #4]
 80175b2:	f7fd fdad 	bl	8015110 <tcp_free>
    return 1;
 80175b6:	2301      	movs	r3, #1
 80175b8:	e000      	b.n	80175bc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80175ba:	2300      	movs	r3, #0
}
 80175bc:	4618      	mov	r0, r3
 80175be:	3708      	adds	r7, #8
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}
 80175c4:	08022e84 	.word	0x08022e84
 80175c8:	08023054 	.word	0x08023054
 80175cc:	08022ed0 	.word	0x08022ed0
 80175d0:	2002d3f1 	.word	0x2002d3f1
 80175d4:	2002d3b8 	.word	0x2002d3b8

080175d8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80175d8:	b590      	push	{r4, r7, lr}
 80175da:	b08b      	sub	sp, #44	@ 0x2c
 80175dc:	af04      	add	r7, sp, #16
 80175de:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80175e0:	4b73      	ldr	r3, [pc, #460]	@ (80177b0 <tcp_listen_input+0x1d8>)
 80175e2:	781b      	ldrb	r3, [r3, #0]
 80175e4:	f003 0304 	and.w	r3, r3, #4
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	f040 80da 	bne.w	80177a2 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d106      	bne.n	8017602 <tcp_listen_input+0x2a>
 80175f4:	4b6f      	ldr	r3, [pc, #444]	@ (80177b4 <tcp_listen_input+0x1dc>)
 80175f6:	f240 2281 	movw	r2, #641	@ 0x281
 80175fa:	496f      	ldr	r1, [pc, #444]	@ (80177b8 <tcp_listen_input+0x1e0>)
 80175fc:	486f      	ldr	r0, [pc, #444]	@ (80177bc <tcp_listen_input+0x1e4>)
 80175fe:	f008 fd21 	bl	8020044 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017602:	4b6b      	ldr	r3, [pc, #428]	@ (80177b0 <tcp_listen_input+0x1d8>)
 8017604:	781b      	ldrb	r3, [r3, #0]
 8017606:	f003 0310 	and.w	r3, r3, #16
 801760a:	2b00      	cmp	r3, #0
 801760c:	d019      	beq.n	8017642 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801760e:	4b6c      	ldr	r3, [pc, #432]	@ (80177c0 <tcp_listen_input+0x1e8>)
 8017610:	6819      	ldr	r1, [r3, #0]
 8017612:	4b6c      	ldr	r3, [pc, #432]	@ (80177c4 <tcp_listen_input+0x1ec>)
 8017614:	881b      	ldrh	r3, [r3, #0]
 8017616:	461a      	mov	r2, r3
 8017618:	4b6b      	ldr	r3, [pc, #428]	@ (80177c8 <tcp_listen_input+0x1f0>)
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801761e:	4b6b      	ldr	r3, [pc, #428]	@ (80177cc <tcp_listen_input+0x1f4>)
 8017620:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017622:	885b      	ldrh	r3, [r3, #2]
 8017624:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017626:	4a69      	ldr	r2, [pc, #420]	@ (80177cc <tcp_listen_input+0x1f4>)
 8017628:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801762a:	8812      	ldrh	r2, [r2, #0]
 801762c:	b292      	uxth	r2, r2
 801762e:	9202      	str	r2, [sp, #8]
 8017630:	9301      	str	r3, [sp, #4]
 8017632:	4b67      	ldr	r3, [pc, #412]	@ (80177d0 <tcp_listen_input+0x1f8>)
 8017634:	9300      	str	r3, [sp, #0]
 8017636:	4b67      	ldr	r3, [pc, #412]	@ (80177d4 <tcp_listen_input+0x1fc>)
 8017638:	4602      	mov	r2, r0
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f003 fc2a 	bl	801ae94 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017640:	e0b1      	b.n	80177a6 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 8017642:	4b5b      	ldr	r3, [pc, #364]	@ (80177b0 <tcp_listen_input+0x1d8>)
 8017644:	781b      	ldrb	r3, [r3, #0]
 8017646:	f003 0302 	and.w	r3, r3, #2
 801764a:	2b00      	cmp	r3, #0
 801764c:	f000 80ab 	beq.w	80177a6 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	7d5b      	ldrb	r3, [r3, #21]
 8017654:	4618      	mov	r0, r3
 8017656:	f7fe ffd3 	bl	8016600 <tcp_alloc>
 801765a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801765c:	697b      	ldr	r3, [r7, #20]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d119      	bne.n	8017696 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8017662:	4b5d      	ldr	r3, [pc, #372]	@ (80177d8 <tcp_listen_input+0x200>)
 8017664:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8017668:	3301      	adds	r3, #1
 801766a:	b29a      	uxth	r2, r3
 801766c:	4b5a      	ldr	r3, [pc, #360]	@ (80177d8 <tcp_listen_input+0x200>)
 801766e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	699b      	ldr	r3, [r3, #24]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d00a      	beq.n	8017690 <tcp_listen_input+0xb8>
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	699b      	ldr	r3, [r3, #24]
 801767e:	687a      	ldr	r2, [r7, #4]
 8017680:	6910      	ldr	r0, [r2, #16]
 8017682:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017686:	2100      	movs	r1, #0
 8017688:	4798      	blx	r3
 801768a:	4603      	mov	r3, r0
 801768c:	73bb      	strb	r3, [r7, #14]
      return;
 801768e:	e08b      	b.n	80177a8 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017690:	23f0      	movs	r3, #240	@ 0xf0
 8017692:	73bb      	strb	r3, [r7, #14]
      return;
 8017694:	e088      	b.n	80177a8 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017696:	4b51      	ldr	r3, [pc, #324]	@ (80177dc <tcp_listen_input+0x204>)
 8017698:	695a      	ldr	r2, [r3, #20]
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801769e:	4b4f      	ldr	r3, [pc, #316]	@ (80177dc <tcp_listen_input+0x204>)
 80176a0:	691a      	ldr	r2, [r3, #16]
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	8ada      	ldrh	r2, [r3, #22]
 80176aa:	697b      	ldr	r3, [r7, #20]
 80176ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80176ae:	4b47      	ldr	r3, [pc, #284]	@ (80177cc <tcp_listen_input+0x1f4>)
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	881b      	ldrh	r3, [r3, #0]
 80176b4:	b29a      	uxth	r2, r3
 80176b6:	697b      	ldr	r3, [r7, #20]
 80176b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	2203      	movs	r2, #3
 80176be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80176c0:	4b41      	ldr	r3, [pc, #260]	@ (80177c8 <tcp_listen_input+0x1f0>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	1c5a      	adds	r2, r3, #1
 80176c6:	697b      	ldr	r3, [r7, #20]
 80176c8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80176ca:	697b      	ldr	r3, [r7, #20]
 80176cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176ce:	697b      	ldr	r3, [r7, #20]
 80176d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80176d2:	6978      	ldr	r0, [r7, #20]
 80176d4:	f7ff f9f4 	bl	8016ac0 <tcp_next_iss>
 80176d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80176da:	697b      	ldr	r3, [r7, #20]
 80176dc:	693a      	ldr	r2, [r7, #16]
 80176de:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80176e0:	697b      	ldr	r3, [r7, #20]
 80176e2:	693a      	ldr	r2, [r7, #16]
 80176e4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80176e6:	697b      	ldr	r3, [r7, #20]
 80176e8:	693a      	ldr	r2, [r7, #16]
 80176ea:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80176ec:	697b      	ldr	r3, [r7, #20]
 80176ee:	693a      	ldr	r2, [r7, #16]
 80176f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80176f2:	4b35      	ldr	r3, [pc, #212]	@ (80177c8 <tcp_listen_input+0x1f0>)
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	1e5a      	subs	r2, r3, #1
 80176f8:	697b      	ldr	r3, [r7, #20]
 80176fa:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	691a      	ldr	r2, [r3, #16]
 8017700:	697b      	ldr	r3, [r7, #20]
 8017702:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017704:	697b      	ldr	r3, [r7, #20]
 8017706:	687a      	ldr	r2, [r7, #4]
 8017708:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	7a5b      	ldrb	r3, [r3, #9]
 801770e:	f003 030c 	and.w	r3, r3, #12
 8017712:	b2da      	uxtb	r2, r3
 8017714:	697b      	ldr	r3, [r7, #20]
 8017716:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	7a1a      	ldrb	r2, [r3, #8]
 801771c:	697b      	ldr	r3, [r7, #20]
 801771e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017720:	4b2f      	ldr	r3, [pc, #188]	@ (80177e0 <tcp_listen_input+0x208>)
 8017722:	681a      	ldr	r2, [r3, #0]
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	60da      	str	r2, [r3, #12]
 8017728:	4a2d      	ldr	r2, [pc, #180]	@ (80177e0 <tcp_listen_input+0x208>)
 801772a:	697b      	ldr	r3, [r7, #20]
 801772c:	6013      	str	r3, [r2, #0]
 801772e:	f003 fd73 	bl	801b218 <tcp_timer_needed>
 8017732:	4b2c      	ldr	r3, [pc, #176]	@ (80177e4 <tcp_listen_input+0x20c>)
 8017734:	2201      	movs	r2, #1
 8017736:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017738:	6978      	ldr	r0, [r7, #20]
 801773a:	f001 fd8d 	bl	8019258 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801773e:	4b23      	ldr	r3, [pc, #140]	@ (80177cc <tcp_listen_input+0x1f4>)
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	89db      	ldrh	r3, [r3, #14]
 8017744:	b29a      	uxth	r2, r3
 8017746:	697b      	ldr	r3, [r7, #20]
 8017748:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801774c:	697b      	ldr	r3, [r7, #20]
 801774e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017752:	697b      	ldr	r3, [r7, #20]
 8017754:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017758:	697b      	ldr	r3, [r7, #20]
 801775a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	3304      	adds	r3, #4
 8017760:	4618      	mov	r0, r3
 8017762:	f005 fd63 	bl	801d22c <ip4_route>
 8017766:	4601      	mov	r1, r0
 8017768:	697b      	ldr	r3, [r7, #20]
 801776a:	3304      	adds	r3, #4
 801776c:	461a      	mov	r2, r3
 801776e:	4620      	mov	r0, r4
 8017770:	f7ff f9cc 	bl	8016b0c <tcp_eff_send_mss_netif>
 8017774:	4603      	mov	r3, r0
 8017776:	461a      	mov	r2, r3
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801777c:	2112      	movs	r1, #18
 801777e:	6978      	ldr	r0, [r7, #20]
 8017780:	f002 fcc0 	bl	801a104 <tcp_enqueue_flags>
 8017784:	4603      	mov	r3, r0
 8017786:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d004      	beq.n	801779a <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8017790:	2100      	movs	r1, #0
 8017792:	6978      	ldr	r0, [r7, #20]
 8017794:	f7fd ff42 	bl	801561c <tcp_abandon>
      return;
 8017798:	e006      	b.n	80177a8 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 801779a:	6978      	ldr	r0, [r7, #20]
 801779c:	f002 fdb2 	bl	801a304 <tcp_output>
  return;
 80177a0:	e001      	b.n	80177a6 <tcp_listen_input+0x1ce>
    return;
 80177a2:	bf00      	nop
 80177a4:	e000      	b.n	80177a8 <tcp_listen_input+0x1d0>
  return;
 80177a6:	bf00      	nop
}
 80177a8:	371c      	adds	r7, #28
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd90      	pop	{r4, r7, pc}
 80177ae:	bf00      	nop
 80177b0:	2002d3f0 	.word	0x2002d3f0
 80177b4:	08022e84 	.word	0x08022e84
 80177b8:	0802307c 	.word	0x0802307c
 80177bc:	08022ed0 	.word	0x08022ed0
 80177c0:	2002d3e8 	.word	0x2002d3e8
 80177c4:	2002d3ee 	.word	0x2002d3ee
 80177c8:	2002d3e4 	.word	0x2002d3e4
 80177cc:	2002d3d4 	.word	0x2002d3d4
 80177d0:	200270c4 	.word	0x200270c4
 80177d4:	200270c8 	.word	0x200270c8
 80177d8:	2002d2b0 	.word	0x2002d2b0
 80177dc:	200270b4 	.word	0x200270b4
 80177e0:	2002d3b8 	.word	0x2002d3b8
 80177e4:	2002d3c0 	.word	0x2002d3c0

080177e8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b086      	sub	sp, #24
 80177ec:	af04      	add	r7, sp, #16
 80177ee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80177f0:	4b2f      	ldr	r3, [pc, #188]	@ (80178b0 <tcp_timewait_input+0xc8>)
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	f003 0304 	and.w	r3, r3, #4
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d153      	bne.n	80178a4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d106      	bne.n	8017810 <tcp_timewait_input+0x28>
 8017802:	4b2c      	ldr	r3, [pc, #176]	@ (80178b4 <tcp_timewait_input+0xcc>)
 8017804:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017808:	492b      	ldr	r1, [pc, #172]	@ (80178b8 <tcp_timewait_input+0xd0>)
 801780a:	482c      	ldr	r0, [pc, #176]	@ (80178bc <tcp_timewait_input+0xd4>)
 801780c:	f008 fc1a 	bl	8020044 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017810:	4b27      	ldr	r3, [pc, #156]	@ (80178b0 <tcp_timewait_input+0xc8>)
 8017812:	781b      	ldrb	r3, [r3, #0]
 8017814:	f003 0302 	and.w	r3, r3, #2
 8017818:	2b00      	cmp	r3, #0
 801781a:	d02a      	beq.n	8017872 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801781c:	4b28      	ldr	r3, [pc, #160]	@ (80178c0 <tcp_timewait_input+0xd8>)
 801781e:	681a      	ldr	r2, [r3, #0]
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017824:	1ad3      	subs	r3, r2, r3
 8017826:	2b00      	cmp	r3, #0
 8017828:	db2d      	blt.n	8017886 <tcp_timewait_input+0x9e>
 801782a:	4b25      	ldr	r3, [pc, #148]	@ (80178c0 <tcp_timewait_input+0xd8>)
 801782c:	681a      	ldr	r2, [r3, #0]
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017832:	6879      	ldr	r1, [r7, #4]
 8017834:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017836:	440b      	add	r3, r1
 8017838:	1ad3      	subs	r3, r2, r3
 801783a:	2b00      	cmp	r3, #0
 801783c:	dc23      	bgt.n	8017886 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801783e:	4b21      	ldr	r3, [pc, #132]	@ (80178c4 <tcp_timewait_input+0xdc>)
 8017840:	6819      	ldr	r1, [r3, #0]
 8017842:	4b21      	ldr	r3, [pc, #132]	@ (80178c8 <tcp_timewait_input+0xe0>)
 8017844:	881b      	ldrh	r3, [r3, #0]
 8017846:	461a      	mov	r2, r3
 8017848:	4b1d      	ldr	r3, [pc, #116]	@ (80178c0 <tcp_timewait_input+0xd8>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801784e:	4b1f      	ldr	r3, [pc, #124]	@ (80178cc <tcp_timewait_input+0xe4>)
 8017850:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017852:	885b      	ldrh	r3, [r3, #2]
 8017854:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017856:	4a1d      	ldr	r2, [pc, #116]	@ (80178cc <tcp_timewait_input+0xe4>)
 8017858:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801785a:	8812      	ldrh	r2, [r2, #0]
 801785c:	b292      	uxth	r2, r2
 801785e:	9202      	str	r2, [sp, #8]
 8017860:	9301      	str	r3, [sp, #4]
 8017862:	4b1b      	ldr	r3, [pc, #108]	@ (80178d0 <tcp_timewait_input+0xe8>)
 8017864:	9300      	str	r3, [sp, #0]
 8017866:	4b1b      	ldr	r3, [pc, #108]	@ (80178d4 <tcp_timewait_input+0xec>)
 8017868:	4602      	mov	r2, r0
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f003 fb12 	bl	801ae94 <tcp_rst>
      return;
 8017870:	e01b      	b.n	80178aa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017872:	4b0f      	ldr	r3, [pc, #60]	@ (80178b0 <tcp_timewait_input+0xc8>)
 8017874:	781b      	ldrb	r3, [r3, #0]
 8017876:	f003 0301 	and.w	r3, r3, #1
 801787a:	2b00      	cmp	r3, #0
 801787c:	d003      	beq.n	8017886 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801787e:	4b16      	ldr	r3, [pc, #88]	@ (80178d8 <tcp_timewait_input+0xf0>)
 8017880:	681a      	ldr	r2, [r3, #0]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017886:	4b10      	ldr	r3, [pc, #64]	@ (80178c8 <tcp_timewait_input+0xe0>)
 8017888:	881b      	ldrh	r3, [r3, #0]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d00c      	beq.n	80178a8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	8b5b      	ldrh	r3, [r3, #26]
 8017892:	f043 0302 	orr.w	r3, r3, #2
 8017896:	b29a      	uxth	r2, r3
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801789c:	6878      	ldr	r0, [r7, #4]
 801789e:	f002 fd31 	bl	801a304 <tcp_output>
  }
  return;
 80178a2:	e001      	b.n	80178a8 <tcp_timewait_input+0xc0>
    return;
 80178a4:	bf00      	nop
 80178a6:	e000      	b.n	80178aa <tcp_timewait_input+0xc2>
  return;
 80178a8:	bf00      	nop
}
 80178aa:	3708      	adds	r7, #8
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}
 80178b0:	2002d3f0 	.word	0x2002d3f0
 80178b4:	08022e84 	.word	0x08022e84
 80178b8:	0802309c 	.word	0x0802309c
 80178bc:	08022ed0 	.word	0x08022ed0
 80178c0:	2002d3e4 	.word	0x2002d3e4
 80178c4:	2002d3e8 	.word	0x2002d3e8
 80178c8:	2002d3ee 	.word	0x2002d3ee
 80178cc:	2002d3d4 	.word	0x2002d3d4
 80178d0:	200270c4 	.word	0x200270c4
 80178d4:	200270c8 	.word	0x200270c8
 80178d8:	2002d3ac 	.word	0x2002d3ac

080178dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80178dc:	b590      	push	{r4, r7, lr}
 80178de:	b08d      	sub	sp, #52	@ 0x34
 80178e0:	af04      	add	r7, sp, #16
 80178e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80178e4:	2300      	movs	r3, #0
 80178e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80178e8:	2300      	movs	r3, #0
 80178ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d106      	bne.n	8017900 <tcp_process+0x24>
 80178f2:	4b9d      	ldr	r3, [pc, #628]	@ (8017b68 <tcp_process+0x28c>)
 80178f4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80178f8:	499c      	ldr	r1, [pc, #624]	@ (8017b6c <tcp_process+0x290>)
 80178fa:	489d      	ldr	r0, [pc, #628]	@ (8017b70 <tcp_process+0x294>)
 80178fc:	f008 fba2 	bl	8020044 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017900:	4b9c      	ldr	r3, [pc, #624]	@ (8017b74 <tcp_process+0x298>)
 8017902:	781b      	ldrb	r3, [r3, #0]
 8017904:	f003 0304 	and.w	r3, r3, #4
 8017908:	2b00      	cmp	r3, #0
 801790a:	d04e      	beq.n	80179aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	7d1b      	ldrb	r3, [r3, #20]
 8017910:	2b02      	cmp	r3, #2
 8017912:	d108      	bne.n	8017926 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017918:	4b97      	ldr	r3, [pc, #604]	@ (8017b78 <tcp_process+0x29c>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	429a      	cmp	r2, r3
 801791e:	d123      	bne.n	8017968 <tcp_process+0x8c>
        acceptable = 1;
 8017920:	2301      	movs	r3, #1
 8017922:	76fb      	strb	r3, [r7, #27]
 8017924:	e020      	b.n	8017968 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801792a:	4b94      	ldr	r3, [pc, #592]	@ (8017b7c <tcp_process+0x2a0>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	429a      	cmp	r2, r3
 8017930:	d102      	bne.n	8017938 <tcp_process+0x5c>
        acceptable = 1;
 8017932:	2301      	movs	r3, #1
 8017934:	76fb      	strb	r3, [r7, #27]
 8017936:	e017      	b.n	8017968 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017938:	4b90      	ldr	r3, [pc, #576]	@ (8017b7c <tcp_process+0x2a0>)
 801793a:	681a      	ldr	r2, [r3, #0]
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017940:	1ad3      	subs	r3, r2, r3
 8017942:	2b00      	cmp	r3, #0
 8017944:	db10      	blt.n	8017968 <tcp_process+0x8c>
 8017946:	4b8d      	ldr	r3, [pc, #564]	@ (8017b7c <tcp_process+0x2a0>)
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801794e:	6879      	ldr	r1, [r7, #4]
 8017950:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017952:	440b      	add	r3, r1
 8017954:	1ad3      	subs	r3, r2, r3
 8017956:	2b00      	cmp	r3, #0
 8017958:	dc06      	bgt.n	8017968 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	8b5b      	ldrh	r3, [r3, #26]
 801795e:	f043 0302 	orr.w	r3, r3, #2
 8017962:	b29a      	uxth	r2, r3
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017968:	7efb      	ldrb	r3, [r7, #27]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d01b      	beq.n	80179a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	7d1b      	ldrb	r3, [r3, #20]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d106      	bne.n	8017984 <tcp_process+0xa8>
 8017976:	4b7c      	ldr	r3, [pc, #496]	@ (8017b68 <tcp_process+0x28c>)
 8017978:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801797c:	4980      	ldr	r1, [pc, #512]	@ (8017b80 <tcp_process+0x2a4>)
 801797e:	487c      	ldr	r0, [pc, #496]	@ (8017b70 <tcp_process+0x294>)
 8017980:	f008 fb60 	bl	8020044 <iprintf>
      recv_flags |= TF_RESET;
 8017984:	4b7f      	ldr	r3, [pc, #508]	@ (8017b84 <tcp_process+0x2a8>)
 8017986:	781b      	ldrb	r3, [r3, #0]
 8017988:	f043 0308 	orr.w	r3, r3, #8
 801798c:	b2da      	uxtb	r2, r3
 801798e:	4b7d      	ldr	r3, [pc, #500]	@ (8017b84 <tcp_process+0x2a8>)
 8017990:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	8b5b      	ldrh	r3, [r3, #26]
 8017996:	f023 0301 	bic.w	r3, r3, #1
 801799a:	b29a      	uxth	r2, r3
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80179a0:	f06f 030d 	mvn.w	r3, #13
 80179a4:	e37a      	b.n	801809c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80179a6:	2300      	movs	r3, #0
 80179a8:	e378      	b.n	801809c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80179aa:	4b72      	ldr	r3, [pc, #456]	@ (8017b74 <tcp_process+0x298>)
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	f003 0302 	and.w	r3, r3, #2
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d010      	beq.n	80179d8 <tcp_process+0xfc>
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	7d1b      	ldrb	r3, [r3, #20]
 80179ba:	2b02      	cmp	r3, #2
 80179bc:	d00c      	beq.n	80179d8 <tcp_process+0xfc>
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	7d1b      	ldrb	r3, [r3, #20]
 80179c2:	2b03      	cmp	r3, #3
 80179c4:	d008      	beq.n	80179d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	8b5b      	ldrh	r3, [r3, #26]
 80179ca:	f043 0302 	orr.w	r3, r3, #2
 80179ce:	b29a      	uxth	r2, r3
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80179d4:	2300      	movs	r3, #0
 80179d6:	e361      	b.n	801809c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	8b5b      	ldrh	r3, [r3, #26]
 80179dc:	f003 0310 	and.w	r3, r3, #16
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d103      	bne.n	80179ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80179e4:	4b68      	ldr	r3, [pc, #416]	@ (8017b88 <tcp_process+0x2ac>)
 80179e6:	681a      	ldr	r2, [r3, #0]
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	2200      	movs	r2, #0
 80179f0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	2200      	movs	r2, #0
 80179f8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f001 fc2b 	bl	8019258 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	7d1b      	ldrb	r3, [r3, #20]
 8017a06:	3b02      	subs	r3, #2
 8017a08:	2b07      	cmp	r3, #7
 8017a0a:	f200 8337 	bhi.w	801807c <tcp_process+0x7a0>
 8017a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8017a14 <tcp_process+0x138>)
 8017a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a14:	08017a35 	.word	0x08017a35
 8017a18:	08017c65 	.word	0x08017c65
 8017a1c:	08017ddd 	.word	0x08017ddd
 8017a20:	08017e07 	.word	0x08017e07
 8017a24:	08017f2b 	.word	0x08017f2b
 8017a28:	08017ddd 	.word	0x08017ddd
 8017a2c:	08017fb7 	.word	0x08017fb7
 8017a30:	08018047 	.word	0x08018047
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017a34:	4b4f      	ldr	r3, [pc, #316]	@ (8017b74 <tcp_process+0x298>)
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	f003 0310 	and.w	r3, r3, #16
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	f000 80e4 	beq.w	8017c0a <tcp_process+0x32e>
 8017a42:	4b4c      	ldr	r3, [pc, #304]	@ (8017b74 <tcp_process+0x298>)
 8017a44:	781b      	ldrb	r3, [r3, #0]
 8017a46:	f003 0302 	and.w	r3, r3, #2
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	f000 80dd 	beq.w	8017c0a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a54:	1c5a      	adds	r2, r3, #1
 8017a56:	4b48      	ldr	r3, [pc, #288]	@ (8017b78 <tcp_process+0x29c>)
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	f040 80d5 	bne.w	8017c0a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017a60:	4b46      	ldr	r3, [pc, #280]	@ (8017b7c <tcp_process+0x2a0>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	1c5a      	adds	r2, r3, #1
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8017a72:	4b41      	ldr	r3, [pc, #260]	@ (8017b78 <tcp_process+0x29c>)
 8017a74:	681a      	ldr	r2, [r3, #0]
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017a7a:	4b44      	ldr	r3, [pc, #272]	@ (8017b8c <tcp_process+0x2b0>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	89db      	ldrh	r3, [r3, #14]
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017a94:	4b39      	ldr	r3, [pc, #228]	@ (8017b7c <tcp_process+0x2a0>)
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	1e5a      	subs	r2, r3, #1
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	2204      	movs	r2, #4
 8017aa2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	3304      	adds	r3, #4
 8017aac:	4618      	mov	r0, r3
 8017aae:	f005 fbbd 	bl	801d22c <ip4_route>
 8017ab2:	4601      	mov	r1, r0
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	3304      	adds	r3, #4
 8017ab8:	461a      	mov	r2, r3
 8017aba:	4620      	mov	r0, r4
 8017abc:	f7ff f826 	bl	8016b0c <tcp_eff_send_mss_netif>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	461a      	mov	r2, r3
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017acc:	009a      	lsls	r2, r3, #2
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ad2:	005b      	lsls	r3, r3, #1
 8017ad4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017ad8:	428b      	cmp	r3, r1
 8017ada:	bf38      	it	cc
 8017adc:	460b      	movcc	r3, r1
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d204      	bcs.n	8017aec <tcp_process+0x210>
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ae6:	009b      	lsls	r3, r3, #2
 8017ae8:	b29b      	uxth	r3, r3
 8017aea:	e00d      	b.n	8017b08 <tcp_process+0x22c>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017af0:	005b      	lsls	r3, r3, #1
 8017af2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017af6:	4293      	cmp	r3, r2
 8017af8:	d904      	bls.n	8017b04 <tcp_process+0x228>
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017afe:	005b      	lsls	r3, r3, #1
 8017b00:	b29b      	uxth	r3, r3
 8017b02:	e001      	b.n	8017b08 <tcp_process+0x22c>
 8017b04:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017b08:	687a      	ldr	r2, [r7, #4]
 8017b0a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d106      	bne.n	8017b26 <tcp_process+0x24a>
 8017b18:	4b13      	ldr	r3, [pc, #76]	@ (8017b68 <tcp_process+0x28c>)
 8017b1a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8017b1e:	491c      	ldr	r1, [pc, #112]	@ (8017b90 <tcp_process+0x2b4>)
 8017b20:	4813      	ldr	r0, [pc, #76]	@ (8017b70 <tcp_process+0x294>)
 8017b22:	f008 fa8f 	bl	8020044 <iprintf>
        --pcb->snd_queuelen;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017b2c:	3b01      	subs	r3, #1
 8017b2e:	b29a      	uxth	r2, r3
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b3a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017b3c:	69fb      	ldr	r3, [r7, #28]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d12a      	bne.n	8017b98 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b46:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017b48:	69fb      	ldr	r3, [r7, #28]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d106      	bne.n	8017b5c <tcp_process+0x280>
 8017b4e:	4b06      	ldr	r3, [pc, #24]	@ (8017b68 <tcp_process+0x28c>)
 8017b50:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017b54:	490f      	ldr	r1, [pc, #60]	@ (8017b94 <tcp_process+0x2b8>)
 8017b56:	4806      	ldr	r0, [pc, #24]	@ (8017b70 <tcp_process+0x294>)
 8017b58:	f008 fa74 	bl	8020044 <iprintf>
          pcb->unsent = rseg->next;
 8017b5c:	69fb      	ldr	r3, [r7, #28]
 8017b5e:	681a      	ldr	r2, [r3, #0]
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017b64:	e01c      	b.n	8017ba0 <tcp_process+0x2c4>
 8017b66:	bf00      	nop
 8017b68:	08022e84 	.word	0x08022e84
 8017b6c:	080230bc 	.word	0x080230bc
 8017b70:	08022ed0 	.word	0x08022ed0
 8017b74:	2002d3f0 	.word	0x2002d3f0
 8017b78:	2002d3e8 	.word	0x2002d3e8
 8017b7c:	2002d3e4 	.word	0x2002d3e4
 8017b80:	080230d8 	.word	0x080230d8
 8017b84:	2002d3f1 	.word	0x2002d3f1
 8017b88:	2002d3ac 	.word	0x2002d3ac
 8017b8c:	2002d3d4 	.word	0x2002d3d4
 8017b90:	080230f8 	.word	0x080230f8
 8017b94:	08023110 	.word	0x08023110
        } else {
          pcb->unacked = rseg->next;
 8017b98:	69fb      	ldr	r3, [r7, #28]
 8017b9a:	681a      	ldr	r2, [r3, #0]
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017ba0:	69f8      	ldr	r0, [r7, #28]
 8017ba2:	f7fe fbc4 	bl	801632e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d104      	bne.n	8017bb8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017bb4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017bb6:	e006      	b.n	8017bc6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d00a      	beq.n	8017be6 <tcp_process+0x30a>
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017bd6:	687a      	ldr	r2, [r7, #4]
 8017bd8:	6910      	ldr	r0, [r2, #16]
 8017bda:	2200      	movs	r2, #0
 8017bdc:	6879      	ldr	r1, [r7, #4]
 8017bde:	4798      	blx	r3
 8017be0:	4603      	mov	r3, r0
 8017be2:	76bb      	strb	r3, [r7, #26]
 8017be4:	e001      	b.n	8017bea <tcp_process+0x30e>
 8017be6:	2300      	movs	r3, #0
 8017be8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017bea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017bee:	f113 0f0d 	cmn.w	r3, #13
 8017bf2:	d102      	bne.n	8017bfa <tcp_process+0x31e>
          return ERR_ABRT;
 8017bf4:	f06f 030c 	mvn.w	r3, #12
 8017bf8:	e250      	b.n	801809c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	8b5b      	ldrh	r3, [r3, #26]
 8017bfe:	f043 0302 	orr.w	r3, r3, #2
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017c08:	e23a      	b.n	8018080 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017c0a:	4b98      	ldr	r3, [pc, #608]	@ (8017e6c <tcp_process+0x590>)
 8017c0c:	781b      	ldrb	r3, [r3, #0]
 8017c0e:	f003 0310 	and.w	r3, r3, #16
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	f000 8234 	beq.w	8018080 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c18:	4b95      	ldr	r3, [pc, #596]	@ (8017e70 <tcp_process+0x594>)
 8017c1a:	6819      	ldr	r1, [r3, #0]
 8017c1c:	4b95      	ldr	r3, [pc, #596]	@ (8017e74 <tcp_process+0x598>)
 8017c1e:	881b      	ldrh	r3, [r3, #0]
 8017c20:	461a      	mov	r2, r3
 8017c22:	4b95      	ldr	r3, [pc, #596]	@ (8017e78 <tcp_process+0x59c>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017c28:	4b94      	ldr	r3, [pc, #592]	@ (8017e7c <tcp_process+0x5a0>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c2c:	885b      	ldrh	r3, [r3, #2]
 8017c2e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017c30:	4a92      	ldr	r2, [pc, #584]	@ (8017e7c <tcp_process+0x5a0>)
 8017c32:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017c34:	8812      	ldrh	r2, [r2, #0]
 8017c36:	b292      	uxth	r2, r2
 8017c38:	9202      	str	r2, [sp, #8]
 8017c3a:	9301      	str	r3, [sp, #4]
 8017c3c:	4b90      	ldr	r3, [pc, #576]	@ (8017e80 <tcp_process+0x5a4>)
 8017c3e:	9300      	str	r3, [sp, #0]
 8017c40:	4b90      	ldr	r3, [pc, #576]	@ (8017e84 <tcp_process+0x5a8>)
 8017c42:	4602      	mov	r2, r0
 8017c44:	6878      	ldr	r0, [r7, #4]
 8017c46:	f003 f925 	bl	801ae94 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017c50:	2b05      	cmp	r3, #5
 8017c52:	f200 8215 	bhi.w	8018080 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	2200      	movs	r2, #0
 8017c5a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f002 fee7 	bl	801aa30 <tcp_rexmit_rto>
      break;
 8017c62:	e20d      	b.n	8018080 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017c64:	4b81      	ldr	r3, [pc, #516]	@ (8017e6c <tcp_process+0x590>)
 8017c66:	781b      	ldrb	r3, [r3, #0]
 8017c68:	f003 0310 	and.w	r3, r3, #16
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	f000 80a1 	beq.w	8017db4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017c72:	4b7f      	ldr	r3, [pc, #508]	@ (8017e70 <tcp_process+0x594>)
 8017c74:	681a      	ldr	r2, [r3, #0]
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c7a:	1ad3      	subs	r3, r2, r3
 8017c7c:	3b01      	subs	r3, #1
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	db7e      	blt.n	8017d80 <tcp_process+0x4a4>
 8017c82:	4b7b      	ldr	r3, [pc, #492]	@ (8017e70 <tcp_process+0x594>)
 8017c84:	681a      	ldr	r2, [r3, #0]
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c8a:	1ad3      	subs	r3, r2, r3
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	dc77      	bgt.n	8017d80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	2204      	movs	r2, #4
 8017c94:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d102      	bne.n	8017ca4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017c9e:	23fa      	movs	r3, #250	@ 0xfa
 8017ca0:	76bb      	strb	r3, [r7, #26]
 8017ca2:	e01d      	b.n	8017ce0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017ca8:	699b      	ldr	r3, [r3, #24]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d106      	bne.n	8017cbc <tcp_process+0x3e0>
 8017cae:	4b76      	ldr	r3, [pc, #472]	@ (8017e88 <tcp_process+0x5ac>)
 8017cb0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017cb4:	4975      	ldr	r1, [pc, #468]	@ (8017e8c <tcp_process+0x5b0>)
 8017cb6:	4876      	ldr	r0, [pc, #472]	@ (8017e90 <tcp_process+0x5b4>)
 8017cb8:	f008 f9c4 	bl	8020044 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017cc0:	699b      	ldr	r3, [r3, #24]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d00a      	beq.n	8017cdc <tcp_process+0x400>
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017cca:	699b      	ldr	r3, [r3, #24]
 8017ccc:	687a      	ldr	r2, [r7, #4]
 8017cce:	6910      	ldr	r0, [r2, #16]
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	6879      	ldr	r1, [r7, #4]
 8017cd4:	4798      	blx	r3
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	76bb      	strb	r3, [r7, #26]
 8017cda:	e001      	b.n	8017ce0 <tcp_process+0x404>
 8017cdc:	23f0      	movs	r3, #240	@ 0xf0
 8017cde:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017ce0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d00a      	beq.n	8017cfe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017ce8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017cec:	f113 0f0d 	cmn.w	r3, #13
 8017cf0:	d002      	beq.n	8017cf8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017cf2:	6878      	ldr	r0, [r7, #4]
 8017cf4:	f7fd fd50 	bl	8015798 <tcp_abort>
            }
            return ERR_ABRT;
 8017cf8:	f06f 030c 	mvn.w	r3, #12
 8017cfc:	e1ce      	b.n	801809c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f000 fae0 	bl	80182c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017d04:	4b63      	ldr	r3, [pc, #396]	@ (8017e94 <tcp_process+0x5b8>)
 8017d06:	881b      	ldrh	r3, [r3, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d005      	beq.n	8017d18 <tcp_process+0x43c>
            recv_acked--;
 8017d0c:	4b61      	ldr	r3, [pc, #388]	@ (8017e94 <tcp_process+0x5b8>)
 8017d0e:	881b      	ldrh	r3, [r3, #0]
 8017d10:	3b01      	subs	r3, #1
 8017d12:	b29a      	uxth	r2, r3
 8017d14:	4b5f      	ldr	r3, [pc, #380]	@ (8017e94 <tcp_process+0x5b8>)
 8017d16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017d1c:	009a      	lsls	r2, r3, #2
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017d22:	005b      	lsls	r3, r3, #1
 8017d24:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017d28:	428b      	cmp	r3, r1
 8017d2a:	bf38      	it	cc
 8017d2c:	460b      	movcc	r3, r1
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d204      	bcs.n	8017d3c <tcp_process+0x460>
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017d36:	009b      	lsls	r3, r3, #2
 8017d38:	b29b      	uxth	r3, r3
 8017d3a:	e00d      	b.n	8017d58 <tcp_process+0x47c>
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017d40:	005b      	lsls	r3, r3, #1
 8017d42:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017d46:	4293      	cmp	r3, r2
 8017d48:	d904      	bls.n	8017d54 <tcp_process+0x478>
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017d4e:	005b      	lsls	r3, r3, #1
 8017d50:	b29b      	uxth	r3, r3
 8017d52:	e001      	b.n	8017d58 <tcp_process+0x47c>
 8017d54:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017d58:	687a      	ldr	r2, [r7, #4]
 8017d5a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8017e98 <tcp_process+0x5bc>)
 8017d60:	781b      	ldrb	r3, [r3, #0]
 8017d62:	f003 0320 	and.w	r3, r3, #32
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d037      	beq.n	8017dda <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	8b5b      	ldrh	r3, [r3, #26]
 8017d6e:	f043 0302 	orr.w	r3, r3, #2
 8017d72:	b29a      	uxth	r2, r3
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2207      	movs	r2, #7
 8017d7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017d7e:	e02c      	b.n	8017dda <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d80:	4b3b      	ldr	r3, [pc, #236]	@ (8017e70 <tcp_process+0x594>)
 8017d82:	6819      	ldr	r1, [r3, #0]
 8017d84:	4b3b      	ldr	r3, [pc, #236]	@ (8017e74 <tcp_process+0x598>)
 8017d86:	881b      	ldrh	r3, [r3, #0]
 8017d88:	461a      	mov	r2, r3
 8017d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8017e78 <tcp_process+0x59c>)
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d90:	4b3a      	ldr	r3, [pc, #232]	@ (8017e7c <tcp_process+0x5a0>)
 8017d92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d94:	885b      	ldrh	r3, [r3, #2]
 8017d96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d98:	4a38      	ldr	r2, [pc, #224]	@ (8017e7c <tcp_process+0x5a0>)
 8017d9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d9c:	8812      	ldrh	r2, [r2, #0]
 8017d9e:	b292      	uxth	r2, r2
 8017da0:	9202      	str	r2, [sp, #8]
 8017da2:	9301      	str	r3, [sp, #4]
 8017da4:	4b36      	ldr	r3, [pc, #216]	@ (8017e80 <tcp_process+0x5a4>)
 8017da6:	9300      	str	r3, [sp, #0]
 8017da8:	4b36      	ldr	r3, [pc, #216]	@ (8017e84 <tcp_process+0x5a8>)
 8017daa:	4602      	mov	r2, r0
 8017dac:	6878      	ldr	r0, [r7, #4]
 8017dae:	f003 f871 	bl	801ae94 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017db2:	e167      	b.n	8018084 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017db4:	4b2d      	ldr	r3, [pc, #180]	@ (8017e6c <tcp_process+0x590>)
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	f003 0302 	and.w	r3, r3, #2
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	f000 8161 	beq.w	8018084 <tcp_process+0x7a8>
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dc6:	1e5a      	subs	r2, r3, #1
 8017dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8017e78 <tcp_process+0x59c>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	f040 8159 	bne.w	8018084 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017dd2:	6878      	ldr	r0, [r7, #4]
 8017dd4:	f002 fe4e 	bl	801aa74 <tcp_rexmit>
      break;
 8017dd8:	e154      	b.n	8018084 <tcp_process+0x7a8>
 8017dda:	e153      	b.n	8018084 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f000 fa71 	bl	80182c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017de2:	4b2d      	ldr	r3, [pc, #180]	@ (8017e98 <tcp_process+0x5bc>)
 8017de4:	781b      	ldrb	r3, [r3, #0]
 8017de6:	f003 0320 	and.w	r3, r3, #32
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	f000 814c 	beq.w	8018088 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	8b5b      	ldrh	r3, [r3, #26]
 8017df4:	f043 0302 	orr.w	r3, r3, #2
 8017df8:	b29a      	uxth	r2, r3
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2207      	movs	r2, #7
 8017e02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017e04:	e140      	b.n	8018088 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017e06:	6878      	ldr	r0, [r7, #4]
 8017e08:	f000 fa5c 	bl	80182c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017e0c:	4b22      	ldr	r3, [pc, #136]	@ (8017e98 <tcp_process+0x5bc>)
 8017e0e:	781b      	ldrb	r3, [r3, #0]
 8017e10:	f003 0320 	and.w	r3, r3, #32
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d071      	beq.n	8017efc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017e18:	4b14      	ldr	r3, [pc, #80]	@ (8017e6c <tcp_process+0x590>)
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	f003 0310 	and.w	r3, r3, #16
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d060      	beq.n	8017ee6 <tcp_process+0x60a>
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017e28:	4b11      	ldr	r3, [pc, #68]	@ (8017e70 <tcp_process+0x594>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	d15a      	bne.n	8017ee6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d156      	bne.n	8017ee6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	8b5b      	ldrh	r3, [r3, #26]
 8017e3c:	f043 0302 	orr.w	r3, r3, #2
 8017e40:	b29a      	uxth	r2, r3
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f7fe fd56 	bl	80168f8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017e4c:	4b13      	ldr	r3, [pc, #76]	@ (8017e9c <tcp_process+0x5c0>)
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	687a      	ldr	r2, [r7, #4]
 8017e52:	429a      	cmp	r2, r3
 8017e54:	d105      	bne.n	8017e62 <tcp_process+0x586>
 8017e56:	4b11      	ldr	r3, [pc, #68]	@ (8017e9c <tcp_process+0x5c0>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	68db      	ldr	r3, [r3, #12]
 8017e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8017e9c <tcp_process+0x5c0>)
 8017e5e:	6013      	str	r3, [r2, #0]
 8017e60:	e02e      	b.n	8017ec0 <tcp_process+0x5e4>
 8017e62:	4b0e      	ldr	r3, [pc, #56]	@ (8017e9c <tcp_process+0x5c0>)
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	617b      	str	r3, [r7, #20]
 8017e68:	e027      	b.n	8017eba <tcp_process+0x5de>
 8017e6a:	bf00      	nop
 8017e6c:	2002d3f0 	.word	0x2002d3f0
 8017e70:	2002d3e8 	.word	0x2002d3e8
 8017e74:	2002d3ee 	.word	0x2002d3ee
 8017e78:	2002d3e4 	.word	0x2002d3e4
 8017e7c:	2002d3d4 	.word	0x2002d3d4
 8017e80:	200270c4 	.word	0x200270c4
 8017e84:	200270c8 	.word	0x200270c8
 8017e88:	08022e84 	.word	0x08022e84
 8017e8c:	08023124 	.word	0x08023124
 8017e90:	08022ed0 	.word	0x08022ed0
 8017e94:	2002d3ec 	.word	0x2002d3ec
 8017e98:	2002d3f1 	.word	0x2002d3f1
 8017e9c:	2002d3b8 	.word	0x2002d3b8
 8017ea0:	697b      	ldr	r3, [r7, #20]
 8017ea2:	68db      	ldr	r3, [r3, #12]
 8017ea4:	687a      	ldr	r2, [r7, #4]
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d104      	bne.n	8017eb4 <tcp_process+0x5d8>
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	68da      	ldr	r2, [r3, #12]
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	60da      	str	r2, [r3, #12]
 8017eb2:	e005      	b.n	8017ec0 <tcp_process+0x5e4>
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	68db      	ldr	r3, [r3, #12]
 8017eb8:	617b      	str	r3, [r7, #20]
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d1ef      	bne.n	8017ea0 <tcp_process+0x5c4>
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	2200      	movs	r2, #0
 8017ec4:	60da      	str	r2, [r3, #12]
 8017ec6:	4b77      	ldr	r3, [pc, #476]	@ (80180a4 <tcp_process+0x7c8>)
 8017ec8:	2201      	movs	r2, #1
 8017eca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	220a      	movs	r2, #10
 8017ed0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017ed2:	4b75      	ldr	r3, [pc, #468]	@ (80180a8 <tcp_process+0x7cc>)
 8017ed4:	681a      	ldr	r2, [r3, #0]
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	60da      	str	r2, [r3, #12]
 8017eda:	4a73      	ldr	r2, [pc, #460]	@ (80180a8 <tcp_process+0x7cc>)
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	6013      	str	r3, [r2, #0]
 8017ee0:	f003 f99a 	bl	801b218 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017ee4:	e0d2      	b.n	801808c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	8b5b      	ldrh	r3, [r3, #26]
 8017eea:	f043 0302 	orr.w	r3, r3, #2
 8017eee:	b29a      	uxth	r2, r3
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2208      	movs	r2, #8
 8017ef8:	751a      	strb	r2, [r3, #20]
      break;
 8017efa:	e0c7      	b.n	801808c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017efc:	4b6b      	ldr	r3, [pc, #428]	@ (80180ac <tcp_process+0x7d0>)
 8017efe:	781b      	ldrb	r3, [r3, #0]
 8017f00:	f003 0310 	and.w	r3, r3, #16
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	f000 80c1 	beq.w	801808c <tcp_process+0x7b0>
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f0e:	4b68      	ldr	r3, [pc, #416]	@ (80180b0 <tcp_process+0x7d4>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	429a      	cmp	r2, r3
 8017f14:	f040 80ba 	bne.w	801808c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	f040 80b5 	bne.w	801808c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2206      	movs	r2, #6
 8017f26:	751a      	strb	r2, [r3, #20]
      break;
 8017f28:	e0b0      	b.n	801808c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017f2a:	6878      	ldr	r0, [r7, #4]
 8017f2c:	f000 f9ca 	bl	80182c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017f30:	4b60      	ldr	r3, [pc, #384]	@ (80180b4 <tcp_process+0x7d8>)
 8017f32:	781b      	ldrb	r3, [r3, #0]
 8017f34:	f003 0320 	and.w	r3, r3, #32
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	f000 80a9 	beq.w	8018090 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	8b5b      	ldrh	r3, [r3, #26]
 8017f42:	f043 0302 	orr.w	r3, r3, #2
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017f4c:	6878      	ldr	r0, [r7, #4]
 8017f4e:	f7fe fcd3 	bl	80168f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017f52:	4b59      	ldr	r3, [pc, #356]	@ (80180b8 <tcp_process+0x7dc>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	687a      	ldr	r2, [r7, #4]
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d105      	bne.n	8017f68 <tcp_process+0x68c>
 8017f5c:	4b56      	ldr	r3, [pc, #344]	@ (80180b8 <tcp_process+0x7dc>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	68db      	ldr	r3, [r3, #12]
 8017f62:	4a55      	ldr	r2, [pc, #340]	@ (80180b8 <tcp_process+0x7dc>)
 8017f64:	6013      	str	r3, [r2, #0]
 8017f66:	e013      	b.n	8017f90 <tcp_process+0x6b4>
 8017f68:	4b53      	ldr	r3, [pc, #332]	@ (80180b8 <tcp_process+0x7dc>)
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	613b      	str	r3, [r7, #16]
 8017f6e:	e00c      	b.n	8017f8a <tcp_process+0x6ae>
 8017f70:	693b      	ldr	r3, [r7, #16]
 8017f72:	68db      	ldr	r3, [r3, #12]
 8017f74:	687a      	ldr	r2, [r7, #4]
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d104      	bne.n	8017f84 <tcp_process+0x6a8>
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	68da      	ldr	r2, [r3, #12]
 8017f7e:	693b      	ldr	r3, [r7, #16]
 8017f80:	60da      	str	r2, [r3, #12]
 8017f82:	e005      	b.n	8017f90 <tcp_process+0x6b4>
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	68db      	ldr	r3, [r3, #12]
 8017f88:	613b      	str	r3, [r7, #16]
 8017f8a:	693b      	ldr	r3, [r7, #16]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d1ef      	bne.n	8017f70 <tcp_process+0x694>
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	2200      	movs	r2, #0
 8017f94:	60da      	str	r2, [r3, #12]
 8017f96:	4b43      	ldr	r3, [pc, #268]	@ (80180a4 <tcp_process+0x7c8>)
 8017f98:	2201      	movs	r2, #1
 8017f9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	220a      	movs	r2, #10
 8017fa0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017fa2:	4b41      	ldr	r3, [pc, #260]	@ (80180a8 <tcp_process+0x7cc>)
 8017fa4:	681a      	ldr	r2, [r3, #0]
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	60da      	str	r2, [r3, #12]
 8017faa:	4a3f      	ldr	r2, [pc, #252]	@ (80180a8 <tcp_process+0x7cc>)
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6013      	str	r3, [r2, #0]
 8017fb0:	f003 f932 	bl	801b218 <tcp_timer_needed>
      }
      break;
 8017fb4:	e06c      	b.n	8018090 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f000 f984 	bl	80182c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80180ac <tcp_process+0x7d0>)
 8017fbe:	781b      	ldrb	r3, [r3, #0]
 8017fc0:	f003 0310 	and.w	r3, r3, #16
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d065      	beq.n	8018094 <tcp_process+0x7b8>
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017fcc:	4b38      	ldr	r3, [pc, #224]	@ (80180b0 <tcp_process+0x7d4>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d15f      	bne.n	8018094 <tcp_process+0x7b8>
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d15b      	bne.n	8018094 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017fdc:	6878      	ldr	r0, [r7, #4]
 8017fde:	f7fe fc8b 	bl	80168f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017fe2:	4b35      	ldr	r3, [pc, #212]	@ (80180b8 <tcp_process+0x7dc>)
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	687a      	ldr	r2, [r7, #4]
 8017fe8:	429a      	cmp	r2, r3
 8017fea:	d105      	bne.n	8017ff8 <tcp_process+0x71c>
 8017fec:	4b32      	ldr	r3, [pc, #200]	@ (80180b8 <tcp_process+0x7dc>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	68db      	ldr	r3, [r3, #12]
 8017ff2:	4a31      	ldr	r2, [pc, #196]	@ (80180b8 <tcp_process+0x7dc>)
 8017ff4:	6013      	str	r3, [r2, #0]
 8017ff6:	e013      	b.n	8018020 <tcp_process+0x744>
 8017ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80180b8 <tcp_process+0x7dc>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	60fb      	str	r3, [r7, #12]
 8017ffe:	e00c      	b.n	801801a <tcp_process+0x73e>
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	68db      	ldr	r3, [r3, #12]
 8018004:	687a      	ldr	r2, [r7, #4]
 8018006:	429a      	cmp	r2, r3
 8018008:	d104      	bne.n	8018014 <tcp_process+0x738>
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	68da      	ldr	r2, [r3, #12]
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	60da      	str	r2, [r3, #12]
 8018012:	e005      	b.n	8018020 <tcp_process+0x744>
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	68db      	ldr	r3, [r3, #12]
 8018018:	60fb      	str	r3, [r7, #12]
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d1ef      	bne.n	8018000 <tcp_process+0x724>
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	2200      	movs	r2, #0
 8018024:	60da      	str	r2, [r3, #12]
 8018026:	4b1f      	ldr	r3, [pc, #124]	@ (80180a4 <tcp_process+0x7c8>)
 8018028:	2201      	movs	r2, #1
 801802a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	220a      	movs	r2, #10
 8018030:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018032:	4b1d      	ldr	r3, [pc, #116]	@ (80180a8 <tcp_process+0x7cc>)
 8018034:	681a      	ldr	r2, [r3, #0]
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	60da      	str	r2, [r3, #12]
 801803a:	4a1b      	ldr	r2, [pc, #108]	@ (80180a8 <tcp_process+0x7cc>)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	6013      	str	r3, [r2, #0]
 8018040:	f003 f8ea 	bl	801b218 <tcp_timer_needed>
      }
      break;
 8018044:	e026      	b.n	8018094 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018046:	6878      	ldr	r0, [r7, #4]
 8018048:	f000 f93c 	bl	80182c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801804c:	4b17      	ldr	r3, [pc, #92]	@ (80180ac <tcp_process+0x7d0>)
 801804e:	781b      	ldrb	r3, [r3, #0]
 8018050:	f003 0310 	and.w	r3, r3, #16
 8018054:	2b00      	cmp	r3, #0
 8018056:	d01f      	beq.n	8018098 <tcp_process+0x7bc>
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801805c:	4b14      	ldr	r3, [pc, #80]	@ (80180b0 <tcp_process+0x7d4>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	429a      	cmp	r2, r3
 8018062:	d119      	bne.n	8018098 <tcp_process+0x7bc>
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018068:	2b00      	cmp	r3, #0
 801806a:	d115      	bne.n	8018098 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801806c:	4b11      	ldr	r3, [pc, #68]	@ (80180b4 <tcp_process+0x7d8>)
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	f043 0310 	orr.w	r3, r3, #16
 8018074:	b2da      	uxtb	r2, r3
 8018076:	4b0f      	ldr	r3, [pc, #60]	@ (80180b4 <tcp_process+0x7d8>)
 8018078:	701a      	strb	r2, [r3, #0]
      }
      break;
 801807a:	e00d      	b.n	8018098 <tcp_process+0x7bc>
    default:
      break;
 801807c:	bf00      	nop
 801807e:	e00c      	b.n	801809a <tcp_process+0x7be>
      break;
 8018080:	bf00      	nop
 8018082:	e00a      	b.n	801809a <tcp_process+0x7be>
      break;
 8018084:	bf00      	nop
 8018086:	e008      	b.n	801809a <tcp_process+0x7be>
      break;
 8018088:	bf00      	nop
 801808a:	e006      	b.n	801809a <tcp_process+0x7be>
      break;
 801808c:	bf00      	nop
 801808e:	e004      	b.n	801809a <tcp_process+0x7be>
      break;
 8018090:	bf00      	nop
 8018092:	e002      	b.n	801809a <tcp_process+0x7be>
      break;
 8018094:	bf00      	nop
 8018096:	e000      	b.n	801809a <tcp_process+0x7be>
      break;
 8018098:	bf00      	nop
  }
  return ERR_OK;
 801809a:	2300      	movs	r3, #0
}
 801809c:	4618      	mov	r0, r3
 801809e:	3724      	adds	r7, #36	@ 0x24
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd90      	pop	{r4, r7, pc}
 80180a4:	2002d3c0 	.word	0x2002d3c0
 80180a8:	2002d3bc 	.word	0x2002d3bc
 80180ac:	2002d3f0 	.word	0x2002d3f0
 80180b0:	2002d3e8 	.word	0x2002d3e8
 80180b4:	2002d3f1 	.word	0x2002d3f1
 80180b8:	2002d3b8 	.word	0x2002d3b8

080180bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80180bc:	b590      	push	{r4, r7, lr}
 80180be:	b085      	sub	sp, #20
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
 80180c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d106      	bne.n	80180da <tcp_oos_insert_segment+0x1e>
 80180cc:	4b3b      	ldr	r3, [pc, #236]	@ (80181bc <tcp_oos_insert_segment+0x100>)
 80180ce:	f240 421f 	movw	r2, #1055	@ 0x41f
 80180d2:	493b      	ldr	r1, [pc, #236]	@ (80181c0 <tcp_oos_insert_segment+0x104>)
 80180d4:	483b      	ldr	r0, [pc, #236]	@ (80181c4 <tcp_oos_insert_segment+0x108>)
 80180d6:	f007 ffb5 	bl	8020044 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	68db      	ldr	r3, [r3, #12]
 80180de:	899b      	ldrh	r3, [r3, #12]
 80180e0:	b29b      	uxth	r3, r3
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7fb f892 	bl	801320c <lwip_htons>
 80180e8:	4603      	mov	r3, r0
 80180ea:	b2db      	uxtb	r3, r3
 80180ec:	f003 0301 	and.w	r3, r3, #1
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d028      	beq.n	8018146 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80180f4:	6838      	ldr	r0, [r7, #0]
 80180f6:	f7fe f905 	bl	8016304 <tcp_segs_free>
    next = NULL;
 80180fa:	2300      	movs	r3, #0
 80180fc:	603b      	str	r3, [r7, #0]
 80180fe:	e056      	b.n	80181ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	68db      	ldr	r3, [r3, #12]
 8018104:	899b      	ldrh	r3, [r3, #12]
 8018106:	b29b      	uxth	r3, r3
 8018108:	4618      	mov	r0, r3
 801810a:	f7fb f87f 	bl	801320c <lwip_htons>
 801810e:	4603      	mov	r3, r0
 8018110:	b2db      	uxtb	r3, r3
 8018112:	f003 0301 	and.w	r3, r3, #1
 8018116:	2b00      	cmp	r3, #0
 8018118:	d00d      	beq.n	8018136 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	68db      	ldr	r3, [r3, #12]
 801811e:	899b      	ldrh	r3, [r3, #12]
 8018120:	b29c      	uxth	r4, r3
 8018122:	2001      	movs	r0, #1
 8018124:	f7fb f872 	bl	801320c <lwip_htons>
 8018128:	4603      	mov	r3, r0
 801812a:	461a      	mov	r2, r3
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	68db      	ldr	r3, [r3, #12]
 8018130:	4322      	orrs	r2, r4
 8018132:	b292      	uxth	r2, r2
 8018134:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018140:	68f8      	ldr	r0, [r7, #12]
 8018142:	f7fe f8f4 	bl	801632e <tcp_seg_free>
    while (next &&
 8018146:	683b      	ldr	r3, [r7, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d00e      	beq.n	801816a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	891b      	ldrh	r3, [r3, #8]
 8018150:	461a      	mov	r2, r3
 8018152:	4b1d      	ldr	r3, [pc, #116]	@ (80181c8 <tcp_oos_insert_segment+0x10c>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	441a      	add	r2, r3
 8018158:	683b      	ldr	r3, [r7, #0]
 801815a:	68db      	ldr	r3, [r3, #12]
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	6839      	ldr	r1, [r7, #0]
 8018160:	8909      	ldrh	r1, [r1, #8]
 8018162:	440b      	add	r3, r1
 8018164:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018166:	2b00      	cmp	r3, #0
 8018168:	daca      	bge.n	8018100 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d01e      	beq.n	80181ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	891b      	ldrh	r3, [r3, #8]
 8018174:	461a      	mov	r2, r3
 8018176:	4b14      	ldr	r3, [pc, #80]	@ (80181c8 <tcp_oos_insert_segment+0x10c>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	441a      	add	r2, r3
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	68db      	ldr	r3, [r3, #12]
 8018180:	685b      	ldr	r3, [r3, #4]
 8018182:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018184:	2b00      	cmp	r3, #0
 8018186:	dd12      	ble.n	80181ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	68db      	ldr	r3, [r3, #12]
 801818c:	685b      	ldr	r3, [r3, #4]
 801818e:	b29a      	uxth	r2, r3
 8018190:	4b0d      	ldr	r3, [pc, #52]	@ (80181c8 <tcp_oos_insert_segment+0x10c>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	b29b      	uxth	r3, r3
 8018196:	1ad3      	subs	r3, r2, r3
 8018198:	b29a      	uxth	r2, r3
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	685a      	ldr	r2, [r3, #4]
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	891b      	ldrh	r3, [r3, #8]
 80181a6:	4619      	mov	r1, r3
 80181a8:	4610      	mov	r0, r2
 80181aa:	f7fc fb67 	bl	801487c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	683a      	ldr	r2, [r7, #0]
 80181b2:	601a      	str	r2, [r3, #0]
}
 80181b4:	bf00      	nop
 80181b6:	3714      	adds	r7, #20
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd90      	pop	{r4, r7, pc}
 80181bc:	08022e84 	.word	0x08022e84
 80181c0:	08023144 	.word	0x08023144
 80181c4:	08022ed0 	.word	0x08022ed0
 80181c8:	2002d3e4 	.word	0x2002d3e4

080181cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80181cc:	b5b0      	push	{r4, r5, r7, lr}
 80181ce:	b086      	sub	sp, #24
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	60f8      	str	r0, [r7, #12]
 80181d4:	60b9      	str	r1, [r7, #8]
 80181d6:	607a      	str	r2, [r7, #4]
 80181d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80181da:	e03e      	b.n	801825a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80181e6:	697b      	ldr	r3, [r7, #20]
 80181e8:	685b      	ldr	r3, [r3, #4]
 80181ea:	4618      	mov	r0, r3
 80181ec:	f7fc fd5a 	bl	8014ca4 <pbuf_clen>
 80181f0:	4603      	mov	r3, r0
 80181f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80181fa:	8a7a      	ldrh	r2, [r7, #18]
 80181fc:	429a      	cmp	r2, r3
 80181fe:	d906      	bls.n	801820e <tcp_free_acked_segments+0x42>
 8018200:	4b2a      	ldr	r3, [pc, #168]	@ (80182ac <tcp_free_acked_segments+0xe0>)
 8018202:	f240 4257 	movw	r2, #1111	@ 0x457
 8018206:	492a      	ldr	r1, [pc, #168]	@ (80182b0 <tcp_free_acked_segments+0xe4>)
 8018208:	482a      	ldr	r0, [pc, #168]	@ (80182b4 <tcp_free_acked_segments+0xe8>)
 801820a:	f007 ff1b 	bl	8020044 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8018214:	8a7b      	ldrh	r3, [r7, #18]
 8018216:	1ad3      	subs	r3, r2, r3
 8018218:	b29a      	uxth	r2, r3
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018220:	697b      	ldr	r3, [r7, #20]
 8018222:	891a      	ldrh	r2, [r3, #8]
 8018224:	4b24      	ldr	r3, [pc, #144]	@ (80182b8 <tcp_free_acked_segments+0xec>)
 8018226:	881b      	ldrh	r3, [r3, #0]
 8018228:	4413      	add	r3, r2
 801822a:	b29a      	uxth	r2, r3
 801822c:	4b22      	ldr	r3, [pc, #136]	@ (80182b8 <tcp_free_acked_segments+0xec>)
 801822e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018230:	6978      	ldr	r0, [r7, #20]
 8018232:	f7fe f87c 	bl	801632e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801823c:	2b00      	cmp	r3, #0
 801823e:	d00c      	beq.n	801825a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d109      	bne.n	801825a <tcp_free_acked_segments+0x8e>
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d106      	bne.n	801825a <tcp_free_acked_segments+0x8e>
 801824c:	4b17      	ldr	r3, [pc, #92]	@ (80182ac <tcp_free_acked_segments+0xe0>)
 801824e:	f240 4261 	movw	r2, #1121	@ 0x461
 8018252:	491a      	ldr	r1, [pc, #104]	@ (80182bc <tcp_free_acked_segments+0xf0>)
 8018254:	4817      	ldr	r0, [pc, #92]	@ (80182b4 <tcp_free_acked_segments+0xe8>)
 8018256:	f007 fef5 	bl	8020044 <iprintf>
  while (seg_list != NULL &&
 801825a:	68bb      	ldr	r3, [r7, #8]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d020      	beq.n	80182a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	68db      	ldr	r3, [r3, #12]
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	4618      	mov	r0, r3
 8018268:	f7fa ffe6 	bl	8013238 <lwip_htonl>
 801826c:	4604      	mov	r4, r0
 801826e:	68bb      	ldr	r3, [r7, #8]
 8018270:	891b      	ldrh	r3, [r3, #8]
 8018272:	461d      	mov	r5, r3
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	68db      	ldr	r3, [r3, #12]
 8018278:	899b      	ldrh	r3, [r3, #12]
 801827a:	b29b      	uxth	r3, r3
 801827c:	4618      	mov	r0, r3
 801827e:	f7fa ffc5 	bl	801320c <lwip_htons>
 8018282:	4603      	mov	r3, r0
 8018284:	b2db      	uxtb	r3, r3
 8018286:	f003 0303 	and.w	r3, r3, #3
 801828a:	2b00      	cmp	r3, #0
 801828c:	d001      	beq.n	8018292 <tcp_free_acked_segments+0xc6>
 801828e:	2301      	movs	r3, #1
 8018290:	e000      	b.n	8018294 <tcp_free_acked_segments+0xc8>
 8018292:	2300      	movs	r3, #0
 8018294:	442b      	add	r3, r5
 8018296:	18e2      	adds	r2, r4, r3
 8018298:	4b09      	ldr	r3, [pc, #36]	@ (80182c0 <tcp_free_acked_segments+0xf4>)
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801829e:	2b00      	cmp	r3, #0
 80182a0:	dd9c      	ble.n	80181dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80182a2:	68bb      	ldr	r3, [r7, #8]
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	3718      	adds	r7, #24
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bdb0      	pop	{r4, r5, r7, pc}
 80182ac:	08022e84 	.word	0x08022e84
 80182b0:	0802316c 	.word	0x0802316c
 80182b4:	08022ed0 	.word	0x08022ed0
 80182b8:	2002d3ec 	.word	0x2002d3ec
 80182bc:	08023194 	.word	0x08023194
 80182c0:	2002d3e8 	.word	0x2002d3e8

080182c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80182c4:	b5b0      	push	{r4, r5, r7, lr}
 80182c6:	b094      	sub	sp, #80	@ 0x50
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80182cc:	2300      	movs	r3, #0
 80182ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d106      	bne.n	80182e4 <tcp_receive+0x20>
 80182d6:	4b91      	ldr	r3, [pc, #580]	@ (801851c <tcp_receive+0x258>)
 80182d8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80182dc:	4990      	ldr	r1, [pc, #576]	@ (8018520 <tcp_receive+0x25c>)
 80182de:	4891      	ldr	r0, [pc, #580]	@ (8018524 <tcp_receive+0x260>)
 80182e0:	f007 feb0 	bl	8020044 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	7d1b      	ldrb	r3, [r3, #20]
 80182e8:	2b03      	cmp	r3, #3
 80182ea:	d806      	bhi.n	80182fa <tcp_receive+0x36>
 80182ec:	4b8b      	ldr	r3, [pc, #556]	@ (801851c <tcp_receive+0x258>)
 80182ee:	f240 427c 	movw	r2, #1148	@ 0x47c
 80182f2:	498d      	ldr	r1, [pc, #564]	@ (8018528 <tcp_receive+0x264>)
 80182f4:	488b      	ldr	r0, [pc, #556]	@ (8018524 <tcp_receive+0x260>)
 80182f6:	f007 fea5 	bl	8020044 <iprintf>

  if (flags & TCP_ACK) {
 80182fa:	4b8c      	ldr	r3, [pc, #560]	@ (801852c <tcp_receive+0x268>)
 80182fc:	781b      	ldrb	r3, [r3, #0]
 80182fe:	f003 0310 	and.w	r3, r3, #16
 8018302:	2b00      	cmp	r3, #0
 8018304:	f000 8264 	beq.w	80187d0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801830e:	461a      	mov	r2, r3
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018314:	4413      	add	r3, r2
 8018316:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801831c:	4b84      	ldr	r3, [pc, #528]	@ (8018530 <tcp_receive+0x26c>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	1ad3      	subs	r3, r2, r3
 8018322:	2b00      	cmp	r3, #0
 8018324:	db1b      	blt.n	801835e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801832a:	4b81      	ldr	r3, [pc, #516]	@ (8018530 <tcp_receive+0x26c>)
 801832c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801832e:	429a      	cmp	r2, r3
 8018330:	d106      	bne.n	8018340 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018336:	4b7f      	ldr	r3, [pc, #508]	@ (8018534 <tcp_receive+0x270>)
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	1ad3      	subs	r3, r2, r3
 801833c:	2b00      	cmp	r3, #0
 801833e:	db0e      	blt.n	801835e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018344:	4b7b      	ldr	r3, [pc, #492]	@ (8018534 <tcp_receive+0x270>)
 8018346:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018348:	429a      	cmp	r2, r3
 801834a:	d125      	bne.n	8018398 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801834c:	4b7a      	ldr	r3, [pc, #488]	@ (8018538 <tcp_receive+0x274>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	89db      	ldrh	r3, [r3, #14]
 8018352:	b29a      	uxth	r2, r3
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801835a:	429a      	cmp	r2, r3
 801835c:	d91c      	bls.n	8018398 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801835e:	4b76      	ldr	r3, [pc, #472]	@ (8018538 <tcp_receive+0x274>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	89db      	ldrh	r3, [r3, #14]
 8018364:	b29a      	uxth	r2, r3
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018378:	429a      	cmp	r2, r3
 801837a:	d205      	bcs.n	8018388 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8018388:	4b69      	ldr	r3, [pc, #420]	@ (8018530 <tcp_receive+0x26c>)
 801838a:	681a      	ldr	r2, [r3, #0]
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8018390:	4b68      	ldr	r3, [pc, #416]	@ (8018534 <tcp_receive+0x270>)
 8018392:	681a      	ldr	r2, [r3, #0]
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018398:	4b66      	ldr	r3, [pc, #408]	@ (8018534 <tcp_receive+0x270>)
 801839a:	681a      	ldr	r2, [r3, #0]
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80183a0:	1ad3      	subs	r3, r2, r3
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	dc58      	bgt.n	8018458 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80183a6:	4b65      	ldr	r3, [pc, #404]	@ (801853c <tcp_receive+0x278>)
 80183a8:	881b      	ldrh	r3, [r3, #0]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d14b      	bne.n	8018446 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183b2:	687a      	ldr	r2, [r7, #4]
 80183b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80183b8:	4413      	add	r3, r2
 80183ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80183bc:	429a      	cmp	r2, r3
 80183be:	d142      	bne.n	8018446 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	db3d      	blt.n	8018446 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80183ce:	4b59      	ldr	r3, [pc, #356]	@ (8018534 <tcp_receive+0x270>)
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	429a      	cmp	r2, r3
 80183d4:	d137      	bne.n	8018446 <tcp_receive+0x182>
              found_dupack = 1;
 80183d6:	2301      	movs	r3, #1
 80183d8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80183e0:	2bff      	cmp	r3, #255	@ 0xff
 80183e2:	d007      	beq.n	80183f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80183ea:	3301      	adds	r3, #1
 80183ec:	b2da      	uxtb	r2, r3
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80183fa:	2b03      	cmp	r3, #3
 80183fc:	d91b      	bls.n	8018436 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018408:	4413      	add	r3, r2
 801840a:	b29a      	uxth	r2, r3
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018412:	429a      	cmp	r2, r3
 8018414:	d30a      	bcc.n	801842c <tcp_receive+0x168>
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018420:	4413      	add	r3, r2
 8018422:	b29a      	uxth	r2, r3
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801842a:	e004      	b.n	8018436 <tcp_receive+0x172>
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018432:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801843c:	2b02      	cmp	r3, #2
 801843e:	d902      	bls.n	8018446 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018440:	6878      	ldr	r0, [r7, #4]
 8018442:	f002 fb83 	bl	801ab4c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018448:	2b00      	cmp	r3, #0
 801844a:	f040 8161 	bne.w	8018710 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	2200      	movs	r2, #0
 8018452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018456:	e15b      	b.n	8018710 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018458:	4b36      	ldr	r3, [pc, #216]	@ (8018534 <tcp_receive+0x270>)
 801845a:	681a      	ldr	r2, [r3, #0]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018460:	1ad3      	subs	r3, r2, r3
 8018462:	3b01      	subs	r3, #1
 8018464:	2b00      	cmp	r3, #0
 8018466:	f2c0 814e 	blt.w	8018706 <tcp_receive+0x442>
 801846a:	4b32      	ldr	r3, [pc, #200]	@ (8018534 <tcp_receive+0x270>)
 801846c:	681a      	ldr	r2, [r3, #0]
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018472:	1ad3      	subs	r3, r2, r3
 8018474:	2b00      	cmp	r3, #0
 8018476:	f300 8146 	bgt.w	8018706 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	8b5b      	ldrh	r3, [r3, #26]
 801847e:	f003 0304 	and.w	r3, r3, #4
 8018482:	2b00      	cmp	r3, #0
 8018484:	d010      	beq.n	80184a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	8b5b      	ldrh	r3, [r3, #26]
 801848a:	f023 0304 	bic.w	r3, r3, #4
 801848e:	b29a      	uxth	r2, r3
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2200      	movs	r2, #0
 80184a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	2200      	movs	r2, #0
 80184ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80184b6:	10db      	asrs	r3, r3, #3
 80184b8:	b21b      	sxth	r3, r3
 80184ba:	b29a      	uxth	r2, r3
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80184c2:	b29b      	uxth	r3, r3
 80184c4:	4413      	add	r3, r2
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	b21a      	sxth	r2, r3
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80184d0:	4b18      	ldr	r3, [pc, #96]	@ (8018534 <tcp_receive+0x270>)
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	b29a      	uxth	r2, r3
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80184da:	b29b      	uxth	r3, r3
 80184dc:	1ad3      	subs	r3, r2, r3
 80184de:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2200      	movs	r2, #0
 80184e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80184e8:	4b12      	ldr	r3, [pc, #72]	@ (8018534 <tcp_receive+0x270>)
 80184ea:	681a      	ldr	r2, [r3, #0]
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	7d1b      	ldrb	r3, [r3, #20]
 80184f4:	2b03      	cmp	r3, #3
 80184f6:	f240 8097 	bls.w	8018628 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018506:	429a      	cmp	r2, r3
 8018508:	d245      	bcs.n	8018596 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	8b5b      	ldrh	r3, [r3, #26]
 801850e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018512:	2b00      	cmp	r3, #0
 8018514:	d014      	beq.n	8018540 <tcp_receive+0x27c>
 8018516:	2301      	movs	r3, #1
 8018518:	e013      	b.n	8018542 <tcp_receive+0x27e>
 801851a:	bf00      	nop
 801851c:	08022e84 	.word	0x08022e84
 8018520:	080231b4 	.word	0x080231b4
 8018524:	08022ed0 	.word	0x08022ed0
 8018528:	080231d0 	.word	0x080231d0
 801852c:	2002d3f0 	.word	0x2002d3f0
 8018530:	2002d3e4 	.word	0x2002d3e4
 8018534:	2002d3e8 	.word	0x2002d3e8
 8018538:	2002d3d4 	.word	0x2002d3d4
 801853c:	2002d3ee 	.word	0x2002d3ee
 8018540:	2302      	movs	r3, #2
 8018542:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018546:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801854a:	b29a      	uxth	r2, r3
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018550:	fb12 f303 	smulbb	r3, r2, r3
 8018554:	b29b      	uxth	r3, r3
 8018556:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018558:	4293      	cmp	r3, r2
 801855a:	bf28      	it	cs
 801855c:	4613      	movcs	r3, r2
 801855e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018566:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018568:	4413      	add	r3, r2
 801856a:	b29a      	uxth	r2, r3
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018572:	429a      	cmp	r2, r3
 8018574:	d309      	bcc.n	801858a <tcp_receive+0x2c6>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801857c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801857e:	4413      	add	r3, r2
 8018580:	b29a      	uxth	r2, r3
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018588:	e04e      	b.n	8018628 <tcp_receive+0x364>
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018590:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018594:	e048      	b.n	8018628 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801859c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801859e:	4413      	add	r3, r2
 80185a0:	b29a      	uxth	r2, r3
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80185a8:	429a      	cmp	r2, r3
 80185aa:	d309      	bcc.n	80185c0 <tcp_receive+0x2fc>
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80185b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80185b4:	4413      	add	r3, r2
 80185b6:	b29a      	uxth	r2, r3
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80185be:	e004      	b.n	80185ca <tcp_receive+0x306>
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80185c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d326      	bcc.n	8018628 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80185e6:	1ad3      	subs	r3, r2, r3
 80185e8:	b29a      	uxth	r2, r3
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80185fa:	4413      	add	r3, r2
 80185fc:	b29a      	uxth	r2, r3
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018604:	429a      	cmp	r2, r3
 8018606:	d30a      	bcc.n	801861e <tcp_receive+0x35a>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018612:	4413      	add	r3, r2
 8018614:	b29a      	uxth	r2, r3
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801861c:	e004      	b.n	8018628 <tcp_receive+0x364>
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018624:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018630:	4a98      	ldr	r2, [pc, #608]	@ (8018894 <tcp_receive+0x5d0>)
 8018632:	6878      	ldr	r0, [r7, #4]
 8018634:	f7ff fdca 	bl	80181cc <tcp_free_acked_segments>
 8018638:	4602      	mov	r2, r0
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018646:	4a94      	ldr	r2, [pc, #592]	@ (8018898 <tcp_receive+0x5d4>)
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	f7ff fdbf 	bl	80181cc <tcp_free_acked_segments>
 801864e:	4602      	mov	r2, r0
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018658:	2b00      	cmp	r3, #0
 801865a:	d104      	bne.n	8018666 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018662:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018664:	e002      	b.n	801866c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	2200      	movs	r2, #0
 801866a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	2200      	movs	r2, #0
 8018670:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018676:	2b00      	cmp	r3, #0
 8018678:	d103      	bne.n	8018682 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	2200      	movs	r2, #0
 801867e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018688:	4b84      	ldr	r3, [pc, #528]	@ (801889c <tcp_receive+0x5d8>)
 801868a:	881b      	ldrh	r3, [r3, #0]
 801868c:	4413      	add	r3, r2
 801868e:	b29a      	uxth	r2, r3
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	8b5b      	ldrh	r3, [r3, #26]
 801869a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d035      	beq.n	801870e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d118      	bne.n	80186dc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d00c      	beq.n	80186cc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186ba:	68db      	ldr	r3, [r3, #12]
 80186bc:	685b      	ldr	r3, [r3, #4]
 80186be:	4618      	mov	r0, r3
 80186c0:	f7fa fdba 	bl	8013238 <lwip_htonl>
 80186c4:	4603      	mov	r3, r0
 80186c6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	dc20      	bgt.n	801870e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	8b5b      	ldrh	r3, [r3, #26]
 80186d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80186d4:	b29a      	uxth	r2, r3
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80186da:	e018      	b.n	801870e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80186e4:	68db      	ldr	r3, [r3, #12]
 80186e6:	685b      	ldr	r3, [r3, #4]
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7fa fda5 	bl	8013238 <lwip_htonl>
 80186ee:	4603      	mov	r3, r0
 80186f0:	1ae3      	subs	r3, r4, r3
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	dc0b      	bgt.n	801870e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	8b5b      	ldrh	r3, [r3, #26]
 80186fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80186fe:	b29a      	uxth	r2, r3
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018704:	e003      	b.n	801870e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018706:	6878      	ldr	r0, [r7, #4]
 8018708:	f002 fc16 	bl	801af38 <tcp_send_empty_ack>
 801870c:	e000      	b.n	8018710 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801870e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018714:	2b00      	cmp	r3, #0
 8018716:	d05b      	beq.n	80187d0 <tcp_receive+0x50c>
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801871c:	4b60      	ldr	r3, [pc, #384]	@ (80188a0 <tcp_receive+0x5dc>)
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	1ad3      	subs	r3, r2, r3
 8018722:	2b00      	cmp	r3, #0
 8018724:	da54      	bge.n	80187d0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018726:	4b5f      	ldr	r3, [pc, #380]	@ (80188a4 <tcp_receive+0x5e0>)
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	b29a      	uxth	r2, r3
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018730:	b29b      	uxth	r3, r3
 8018732:	1ad3      	subs	r3, r2, r3
 8018734:	b29b      	uxth	r3, r3
 8018736:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801873a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018744:	10db      	asrs	r3, r3, #3
 8018746:	b21b      	sxth	r3, r3
 8018748:	b29b      	uxth	r3, r3
 801874a:	1ad3      	subs	r3, r2, r3
 801874c:	b29b      	uxth	r3, r3
 801874e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018758:	b29a      	uxth	r2, r3
 801875a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801875e:	4413      	add	r3, r2
 8018760:	b29b      	uxth	r3, r3
 8018762:	b21a      	sxth	r2, r3
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018768:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801876c:	2b00      	cmp	r3, #0
 801876e:	da05      	bge.n	801877c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018770:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018774:	425b      	negs	r3, r3
 8018776:	b29b      	uxth	r3, r3
 8018778:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801877c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018786:	109b      	asrs	r3, r3, #2
 8018788:	b21b      	sxth	r3, r3
 801878a:	b29b      	uxth	r3, r3
 801878c:	1ad3      	subs	r3, r2, r3
 801878e:	b29b      	uxth	r3, r3
 8018790:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801879a:	b29a      	uxth	r2, r3
 801879c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80187a0:	4413      	add	r3, r2
 80187a2:	b29b      	uxth	r3, r3
 80187a4:	b21a      	sxth	r2, r3
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80187b0:	10db      	asrs	r3, r3, #3
 80187b2:	b21b      	sxth	r3, r3
 80187b4:	b29a      	uxth	r2, r3
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80187bc:	b29b      	uxth	r3, r3
 80187be:	4413      	add	r3, r2
 80187c0:	b29b      	uxth	r3, r3
 80187c2:	b21a      	sxth	r2, r3
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2200      	movs	r2, #0
 80187ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80187d0:	4b35      	ldr	r3, [pc, #212]	@ (80188a8 <tcp_receive+0x5e4>)
 80187d2:	881b      	ldrh	r3, [r3, #0]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	f000 84df 	beq.w	8019198 <tcp_receive+0xed4>
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	7d1b      	ldrb	r3, [r3, #20]
 80187de:	2b06      	cmp	r3, #6
 80187e0:	f200 84da 	bhi.w	8019198 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80187e8:	4b30      	ldr	r3, [pc, #192]	@ (80188ac <tcp_receive+0x5e8>)
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	1ad3      	subs	r3, r2, r3
 80187ee:	3b01      	subs	r3, #1
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	f2c0 808f 	blt.w	8018914 <tcp_receive+0x650>
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80187fa:	4b2b      	ldr	r3, [pc, #172]	@ (80188a8 <tcp_receive+0x5e4>)
 80187fc:	881b      	ldrh	r3, [r3, #0]
 80187fe:	4619      	mov	r1, r3
 8018800:	4b2a      	ldr	r3, [pc, #168]	@ (80188ac <tcp_receive+0x5e8>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	440b      	add	r3, r1
 8018806:	1ad3      	subs	r3, r2, r3
 8018808:	3301      	adds	r3, #1
 801880a:	2b00      	cmp	r3, #0
 801880c:	f300 8082 	bgt.w	8018914 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018810:	4b27      	ldr	r3, [pc, #156]	@ (80188b0 <tcp_receive+0x5ec>)
 8018812:	685b      	ldr	r3, [r3, #4]
 8018814:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801881a:	4b24      	ldr	r3, [pc, #144]	@ (80188ac <tcp_receive+0x5e8>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	1ad3      	subs	r3, r2, r3
 8018820:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018822:	4b23      	ldr	r3, [pc, #140]	@ (80188b0 <tcp_receive+0x5ec>)
 8018824:	685b      	ldr	r3, [r3, #4]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d106      	bne.n	8018838 <tcp_receive+0x574>
 801882a:	4b22      	ldr	r3, [pc, #136]	@ (80188b4 <tcp_receive+0x5f0>)
 801882c:	f240 5294 	movw	r2, #1428	@ 0x594
 8018830:	4921      	ldr	r1, [pc, #132]	@ (80188b8 <tcp_receive+0x5f4>)
 8018832:	4822      	ldr	r0, [pc, #136]	@ (80188bc <tcp_receive+0x5f8>)
 8018834:	f007 fc06 	bl	8020044 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801883a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801883e:	4293      	cmp	r3, r2
 8018840:	d906      	bls.n	8018850 <tcp_receive+0x58c>
 8018842:	4b1c      	ldr	r3, [pc, #112]	@ (80188b4 <tcp_receive+0x5f0>)
 8018844:	f240 5295 	movw	r2, #1429	@ 0x595
 8018848:	491d      	ldr	r1, [pc, #116]	@ (80188c0 <tcp_receive+0x5fc>)
 801884a:	481c      	ldr	r0, [pc, #112]	@ (80188bc <tcp_receive+0x5f8>)
 801884c:	f007 fbfa 	bl	8020044 <iprintf>
      off = (u16_t)off32;
 8018850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018852:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018856:	4b16      	ldr	r3, [pc, #88]	@ (80188b0 <tcp_receive+0x5ec>)
 8018858:	685b      	ldr	r3, [r3, #4]
 801885a:	891b      	ldrh	r3, [r3, #8]
 801885c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018860:	429a      	cmp	r2, r3
 8018862:	d906      	bls.n	8018872 <tcp_receive+0x5ae>
 8018864:	4b13      	ldr	r3, [pc, #76]	@ (80188b4 <tcp_receive+0x5f0>)
 8018866:	f240 5297 	movw	r2, #1431	@ 0x597
 801886a:	4916      	ldr	r1, [pc, #88]	@ (80188c4 <tcp_receive+0x600>)
 801886c:	4813      	ldr	r0, [pc, #76]	@ (80188bc <tcp_receive+0x5f8>)
 801886e:	f007 fbe9 	bl	8020044 <iprintf>
      inseg.len -= off;
 8018872:	4b0f      	ldr	r3, [pc, #60]	@ (80188b0 <tcp_receive+0x5ec>)
 8018874:	891a      	ldrh	r2, [r3, #8]
 8018876:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801887a:	1ad3      	subs	r3, r2, r3
 801887c:	b29a      	uxth	r2, r3
 801887e:	4b0c      	ldr	r3, [pc, #48]	@ (80188b0 <tcp_receive+0x5ec>)
 8018880:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018882:	4b0b      	ldr	r3, [pc, #44]	@ (80188b0 <tcp_receive+0x5ec>)
 8018884:	685b      	ldr	r3, [r3, #4]
 8018886:	891a      	ldrh	r2, [r3, #8]
 8018888:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801888c:	1ad3      	subs	r3, r2, r3
 801888e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8018890:	e02a      	b.n	80188e8 <tcp_receive+0x624>
 8018892:	bf00      	nop
 8018894:	080231ec 	.word	0x080231ec
 8018898:	080231f4 	.word	0x080231f4
 801889c:	2002d3ec 	.word	0x2002d3ec
 80188a0:	2002d3e8 	.word	0x2002d3e8
 80188a4:	2002d3ac 	.word	0x2002d3ac
 80188a8:	2002d3ee 	.word	0x2002d3ee
 80188ac:	2002d3e4 	.word	0x2002d3e4
 80188b0:	2002d3c4 	.word	0x2002d3c4
 80188b4:	08022e84 	.word	0x08022e84
 80188b8:	080231fc 	.word	0x080231fc
 80188bc:	08022ed0 	.word	0x08022ed0
 80188c0:	0802320c 	.word	0x0802320c
 80188c4:	0802321c 	.word	0x0802321c
        off -= p->len;
 80188c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80188ca:	895b      	ldrh	r3, [r3, #10]
 80188cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80188d0:	1ad3      	subs	r3, r2, r3
 80188d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80188d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80188d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80188da:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80188dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80188de:	2200      	movs	r2, #0
 80188e0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80188e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80188e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80188ea:	895b      	ldrh	r3, [r3, #10]
 80188ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d8e9      	bhi.n	80188c8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80188f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80188f8:	4619      	mov	r1, r3
 80188fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80188fc:	f7fc f8be 	bl	8014a7c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018904:	4a90      	ldr	r2, [pc, #576]	@ (8018b48 <tcp_receive+0x884>)
 8018906:	6013      	str	r3, [r2, #0]
 8018908:	4b90      	ldr	r3, [pc, #576]	@ (8018b4c <tcp_receive+0x888>)
 801890a:	68db      	ldr	r3, [r3, #12]
 801890c:	4a8e      	ldr	r2, [pc, #568]	@ (8018b48 <tcp_receive+0x884>)
 801890e:	6812      	ldr	r2, [r2, #0]
 8018910:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018912:	e00d      	b.n	8018930 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018914:	4b8c      	ldr	r3, [pc, #560]	@ (8018b48 <tcp_receive+0x884>)
 8018916:	681a      	ldr	r2, [r3, #0]
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801891c:	1ad3      	subs	r3, r2, r3
 801891e:	2b00      	cmp	r3, #0
 8018920:	da06      	bge.n	8018930 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	8b5b      	ldrh	r3, [r3, #26]
 8018926:	f043 0302 	orr.w	r3, r3, #2
 801892a:	b29a      	uxth	r2, r3
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018930:	4b85      	ldr	r3, [pc, #532]	@ (8018b48 <tcp_receive+0x884>)
 8018932:	681a      	ldr	r2, [r3, #0]
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018938:	1ad3      	subs	r3, r2, r3
 801893a:	2b00      	cmp	r3, #0
 801893c:	f2c0 8427 	blt.w	801918e <tcp_receive+0xeca>
 8018940:	4b81      	ldr	r3, [pc, #516]	@ (8018b48 <tcp_receive+0x884>)
 8018942:	681a      	ldr	r2, [r3, #0]
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018948:	6879      	ldr	r1, [r7, #4]
 801894a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801894c:	440b      	add	r3, r1
 801894e:	1ad3      	subs	r3, r2, r3
 8018950:	3301      	adds	r3, #1
 8018952:	2b00      	cmp	r3, #0
 8018954:	f300 841b 	bgt.w	801918e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801895c:	4b7a      	ldr	r3, [pc, #488]	@ (8018b48 <tcp_receive+0x884>)
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	429a      	cmp	r2, r3
 8018962:	f040 8298 	bne.w	8018e96 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018966:	4b79      	ldr	r3, [pc, #484]	@ (8018b4c <tcp_receive+0x888>)
 8018968:	891c      	ldrh	r4, [r3, #8]
 801896a:	4b78      	ldr	r3, [pc, #480]	@ (8018b4c <tcp_receive+0x888>)
 801896c:	68db      	ldr	r3, [r3, #12]
 801896e:	899b      	ldrh	r3, [r3, #12]
 8018970:	b29b      	uxth	r3, r3
 8018972:	4618      	mov	r0, r3
 8018974:	f7fa fc4a 	bl	801320c <lwip_htons>
 8018978:	4603      	mov	r3, r0
 801897a:	b2db      	uxtb	r3, r3
 801897c:	f003 0303 	and.w	r3, r3, #3
 8018980:	2b00      	cmp	r3, #0
 8018982:	d001      	beq.n	8018988 <tcp_receive+0x6c4>
 8018984:	2301      	movs	r3, #1
 8018986:	e000      	b.n	801898a <tcp_receive+0x6c6>
 8018988:	2300      	movs	r3, #0
 801898a:	4423      	add	r3, r4
 801898c:	b29a      	uxth	r2, r3
 801898e:	4b70      	ldr	r3, [pc, #448]	@ (8018b50 <tcp_receive+0x88c>)
 8018990:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018996:	4b6e      	ldr	r3, [pc, #440]	@ (8018b50 <tcp_receive+0x88c>)
 8018998:	881b      	ldrh	r3, [r3, #0]
 801899a:	429a      	cmp	r2, r3
 801899c:	d274      	bcs.n	8018a88 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801899e:	4b6b      	ldr	r3, [pc, #428]	@ (8018b4c <tcp_receive+0x888>)
 80189a0:	68db      	ldr	r3, [r3, #12]
 80189a2:	899b      	ldrh	r3, [r3, #12]
 80189a4:	b29b      	uxth	r3, r3
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7fa fc30 	bl	801320c <lwip_htons>
 80189ac:	4603      	mov	r3, r0
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	f003 0301 	and.w	r3, r3, #1
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d01e      	beq.n	80189f6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80189b8:	4b64      	ldr	r3, [pc, #400]	@ (8018b4c <tcp_receive+0x888>)
 80189ba:	68db      	ldr	r3, [r3, #12]
 80189bc:	899b      	ldrh	r3, [r3, #12]
 80189be:	b29b      	uxth	r3, r3
 80189c0:	b21b      	sxth	r3, r3
 80189c2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80189c6:	b21c      	sxth	r4, r3
 80189c8:	4b60      	ldr	r3, [pc, #384]	@ (8018b4c <tcp_receive+0x888>)
 80189ca:	68db      	ldr	r3, [r3, #12]
 80189cc:	899b      	ldrh	r3, [r3, #12]
 80189ce:	b29b      	uxth	r3, r3
 80189d0:	4618      	mov	r0, r3
 80189d2:	f7fa fc1b 	bl	801320c <lwip_htons>
 80189d6:	4603      	mov	r3, r0
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80189de:	b29b      	uxth	r3, r3
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7fa fc13 	bl	801320c <lwip_htons>
 80189e6:	4603      	mov	r3, r0
 80189e8:	b21b      	sxth	r3, r3
 80189ea:	4323      	orrs	r3, r4
 80189ec:	b21a      	sxth	r2, r3
 80189ee:	4b57      	ldr	r3, [pc, #348]	@ (8018b4c <tcp_receive+0x888>)
 80189f0:	68db      	ldr	r3, [r3, #12]
 80189f2:	b292      	uxth	r2, r2
 80189f4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80189fa:	4b54      	ldr	r3, [pc, #336]	@ (8018b4c <tcp_receive+0x888>)
 80189fc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80189fe:	4b53      	ldr	r3, [pc, #332]	@ (8018b4c <tcp_receive+0x888>)
 8018a00:	68db      	ldr	r3, [r3, #12]
 8018a02:	899b      	ldrh	r3, [r3, #12]
 8018a04:	b29b      	uxth	r3, r3
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7fa fc00 	bl	801320c <lwip_htons>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	b2db      	uxtb	r3, r3
 8018a10:	f003 0302 	and.w	r3, r3, #2
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d005      	beq.n	8018a24 <tcp_receive+0x760>
            inseg.len -= 1;
 8018a18:	4b4c      	ldr	r3, [pc, #304]	@ (8018b4c <tcp_receive+0x888>)
 8018a1a:	891b      	ldrh	r3, [r3, #8]
 8018a1c:	3b01      	subs	r3, #1
 8018a1e:	b29a      	uxth	r2, r3
 8018a20:	4b4a      	ldr	r3, [pc, #296]	@ (8018b4c <tcp_receive+0x888>)
 8018a22:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018a24:	4b49      	ldr	r3, [pc, #292]	@ (8018b4c <tcp_receive+0x888>)
 8018a26:	685b      	ldr	r3, [r3, #4]
 8018a28:	4a48      	ldr	r2, [pc, #288]	@ (8018b4c <tcp_receive+0x888>)
 8018a2a:	8912      	ldrh	r2, [r2, #8]
 8018a2c:	4611      	mov	r1, r2
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f7fb ff24 	bl	801487c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018a34:	4b45      	ldr	r3, [pc, #276]	@ (8018b4c <tcp_receive+0x888>)
 8018a36:	891c      	ldrh	r4, [r3, #8]
 8018a38:	4b44      	ldr	r3, [pc, #272]	@ (8018b4c <tcp_receive+0x888>)
 8018a3a:	68db      	ldr	r3, [r3, #12]
 8018a3c:	899b      	ldrh	r3, [r3, #12]
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7fa fbe3 	bl	801320c <lwip_htons>
 8018a46:	4603      	mov	r3, r0
 8018a48:	b2db      	uxtb	r3, r3
 8018a4a:	f003 0303 	and.w	r3, r3, #3
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d001      	beq.n	8018a56 <tcp_receive+0x792>
 8018a52:	2301      	movs	r3, #1
 8018a54:	e000      	b.n	8018a58 <tcp_receive+0x794>
 8018a56:	2300      	movs	r3, #0
 8018a58:	4423      	add	r3, r4
 8018a5a:	b29a      	uxth	r2, r3
 8018a5c:	4b3c      	ldr	r3, [pc, #240]	@ (8018b50 <tcp_receive+0x88c>)
 8018a5e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018a60:	4b3b      	ldr	r3, [pc, #236]	@ (8018b50 <tcp_receive+0x88c>)
 8018a62:	881b      	ldrh	r3, [r3, #0]
 8018a64:	461a      	mov	r2, r3
 8018a66:	4b38      	ldr	r3, [pc, #224]	@ (8018b48 <tcp_receive+0x884>)
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	441a      	add	r2, r3
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a70:	6879      	ldr	r1, [r7, #4]
 8018a72:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018a74:	440b      	add	r3, r1
 8018a76:	429a      	cmp	r2, r3
 8018a78:	d006      	beq.n	8018a88 <tcp_receive+0x7c4>
 8018a7a:	4b36      	ldr	r3, [pc, #216]	@ (8018b54 <tcp_receive+0x890>)
 8018a7c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018a80:	4935      	ldr	r1, [pc, #212]	@ (8018b58 <tcp_receive+0x894>)
 8018a82:	4836      	ldr	r0, [pc, #216]	@ (8018b5c <tcp_receive+0x898>)
 8018a84:	f007 fade 	bl	8020044 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	f000 80e6 	beq.w	8018c5e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018a92:	4b2e      	ldr	r3, [pc, #184]	@ (8018b4c <tcp_receive+0x888>)
 8018a94:	68db      	ldr	r3, [r3, #12]
 8018a96:	899b      	ldrh	r3, [r3, #12]
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f7fa fbb6 	bl	801320c <lwip_htons>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	b2db      	uxtb	r3, r3
 8018aa4:	f003 0301 	and.w	r3, r3, #1
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d010      	beq.n	8018ace <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018aac:	e00a      	b.n	8018ac4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ab2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ab8:	681a      	ldr	r2, [r3, #0]
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8018abe:	68f8      	ldr	r0, [r7, #12]
 8018ac0:	f7fd fc35 	bl	801632e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d1f0      	bne.n	8018aae <tcp_receive+0x7ea>
 8018acc:	e0c7      	b.n	8018c5e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018ad4:	e051      	b.n	8018b7a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ad8:	68db      	ldr	r3, [r3, #12]
 8018ada:	899b      	ldrh	r3, [r3, #12]
 8018adc:	b29b      	uxth	r3, r3
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7fa fb94 	bl	801320c <lwip_htons>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	b2db      	uxtb	r3, r3
 8018ae8:	f003 0301 	and.w	r3, r3, #1
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d03c      	beq.n	8018b6a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018af0:	4b16      	ldr	r3, [pc, #88]	@ (8018b4c <tcp_receive+0x888>)
 8018af2:	68db      	ldr	r3, [r3, #12]
 8018af4:	899b      	ldrh	r3, [r3, #12]
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	4618      	mov	r0, r3
 8018afa:	f7fa fb87 	bl	801320c <lwip_htons>
 8018afe:	4603      	mov	r3, r0
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d12f      	bne.n	8018b6a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018b0a:	4b10      	ldr	r3, [pc, #64]	@ (8018b4c <tcp_receive+0x888>)
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	899b      	ldrh	r3, [r3, #12]
 8018b10:	b29c      	uxth	r4, r3
 8018b12:	2001      	movs	r0, #1
 8018b14:	f7fa fb7a 	bl	801320c <lwip_htons>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	461a      	mov	r2, r3
 8018b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8018b4c <tcp_receive+0x888>)
 8018b1e:	68db      	ldr	r3, [r3, #12]
 8018b20:	4322      	orrs	r2, r4
 8018b22:	b292      	uxth	r2, r2
 8018b24:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018b26:	4b09      	ldr	r3, [pc, #36]	@ (8018b4c <tcp_receive+0x888>)
 8018b28:	891c      	ldrh	r4, [r3, #8]
 8018b2a:	4b08      	ldr	r3, [pc, #32]	@ (8018b4c <tcp_receive+0x888>)
 8018b2c:	68db      	ldr	r3, [r3, #12]
 8018b2e:	899b      	ldrh	r3, [r3, #12]
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	4618      	mov	r0, r3
 8018b34:	f7fa fb6a 	bl	801320c <lwip_htons>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	f003 0303 	and.w	r3, r3, #3
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d00d      	beq.n	8018b60 <tcp_receive+0x89c>
 8018b44:	2301      	movs	r3, #1
 8018b46:	e00c      	b.n	8018b62 <tcp_receive+0x89e>
 8018b48:	2002d3e4 	.word	0x2002d3e4
 8018b4c:	2002d3c4 	.word	0x2002d3c4
 8018b50:	2002d3ee 	.word	0x2002d3ee
 8018b54:	08022e84 	.word	0x08022e84
 8018b58:	0802322c 	.word	0x0802322c
 8018b5c:	08022ed0 	.word	0x08022ed0
 8018b60:	2300      	movs	r3, #0
 8018b62:	4423      	add	r3, r4
 8018b64:	b29a      	uxth	r2, r3
 8018b66:	4b98      	ldr	r3, [pc, #608]	@ (8018dc8 <tcp_receive+0xb04>)
 8018b68:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b6c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018b74:	6938      	ldr	r0, [r7, #16]
 8018b76:	f7fd fbda 	bl	801632e <tcp_seg_free>
            while (next &&
 8018b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d00e      	beq.n	8018b9e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018b80:	4b91      	ldr	r3, [pc, #580]	@ (8018dc8 <tcp_receive+0xb04>)
 8018b82:	881b      	ldrh	r3, [r3, #0]
 8018b84:	461a      	mov	r2, r3
 8018b86:	4b91      	ldr	r3, [pc, #580]	@ (8018dcc <tcp_receive+0xb08>)
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	441a      	add	r2, r3
 8018b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b8e:	68db      	ldr	r3, [r3, #12]
 8018b90:	685b      	ldr	r3, [r3, #4]
 8018b92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018b94:	8909      	ldrh	r1, [r1, #8]
 8018b96:	440b      	add	r3, r1
 8018b98:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	da9b      	bge.n	8018ad6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d059      	beq.n	8018c58 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018ba4:	4b88      	ldr	r3, [pc, #544]	@ (8018dc8 <tcp_receive+0xb04>)
 8018ba6:	881b      	ldrh	r3, [r3, #0]
 8018ba8:	461a      	mov	r2, r3
 8018baa:	4b88      	ldr	r3, [pc, #544]	@ (8018dcc <tcp_receive+0xb08>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	441a      	add	r2, r3
 8018bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018bb2:	68db      	ldr	r3, [r3, #12]
 8018bb4:	685b      	ldr	r3, [r3, #4]
 8018bb6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	dd4d      	ble.n	8018c58 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018bbe:	68db      	ldr	r3, [r3, #12]
 8018bc0:	685b      	ldr	r3, [r3, #4]
 8018bc2:	b29a      	uxth	r2, r3
 8018bc4:	4b81      	ldr	r3, [pc, #516]	@ (8018dcc <tcp_receive+0xb08>)
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	1ad3      	subs	r3, r2, r3
 8018bcc:	b29a      	uxth	r2, r3
 8018bce:	4b80      	ldr	r3, [pc, #512]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018bd0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018bd4:	68db      	ldr	r3, [r3, #12]
 8018bd6:	899b      	ldrh	r3, [r3, #12]
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	4618      	mov	r0, r3
 8018bdc:	f7fa fb16 	bl	801320c <lwip_htons>
 8018be0:	4603      	mov	r3, r0
 8018be2:	b2db      	uxtb	r3, r3
 8018be4:	f003 0302 	and.w	r3, r3, #2
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d005      	beq.n	8018bf8 <tcp_receive+0x934>
                inseg.len -= 1;
 8018bec:	4b78      	ldr	r3, [pc, #480]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018bee:	891b      	ldrh	r3, [r3, #8]
 8018bf0:	3b01      	subs	r3, #1
 8018bf2:	b29a      	uxth	r2, r3
 8018bf4:	4b76      	ldr	r3, [pc, #472]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018bf6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018bf8:	4b75      	ldr	r3, [pc, #468]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018bfa:	685b      	ldr	r3, [r3, #4]
 8018bfc:	4a74      	ldr	r2, [pc, #464]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018bfe:	8912      	ldrh	r2, [r2, #8]
 8018c00:	4611      	mov	r1, r2
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7fb fe3a 	bl	801487c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018c08:	4b71      	ldr	r3, [pc, #452]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018c0a:	891c      	ldrh	r4, [r3, #8]
 8018c0c:	4b70      	ldr	r3, [pc, #448]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018c0e:	68db      	ldr	r3, [r3, #12]
 8018c10:	899b      	ldrh	r3, [r3, #12]
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	4618      	mov	r0, r3
 8018c16:	f7fa faf9 	bl	801320c <lwip_htons>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	b2db      	uxtb	r3, r3
 8018c1e:	f003 0303 	and.w	r3, r3, #3
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d001      	beq.n	8018c2a <tcp_receive+0x966>
 8018c26:	2301      	movs	r3, #1
 8018c28:	e000      	b.n	8018c2c <tcp_receive+0x968>
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	4423      	add	r3, r4
 8018c2e:	b29a      	uxth	r2, r3
 8018c30:	4b65      	ldr	r3, [pc, #404]	@ (8018dc8 <tcp_receive+0xb04>)
 8018c32:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018c34:	4b64      	ldr	r3, [pc, #400]	@ (8018dc8 <tcp_receive+0xb04>)
 8018c36:	881b      	ldrh	r3, [r3, #0]
 8018c38:	461a      	mov	r2, r3
 8018c3a:	4b64      	ldr	r3, [pc, #400]	@ (8018dcc <tcp_receive+0xb08>)
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	441a      	add	r2, r3
 8018c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	685b      	ldr	r3, [r3, #4]
 8018c46:	429a      	cmp	r2, r3
 8018c48:	d006      	beq.n	8018c58 <tcp_receive+0x994>
 8018c4a:	4b62      	ldr	r3, [pc, #392]	@ (8018dd4 <tcp_receive+0xb10>)
 8018c4c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018c50:	4961      	ldr	r1, [pc, #388]	@ (8018dd8 <tcp_receive+0xb14>)
 8018c52:	4862      	ldr	r0, [pc, #392]	@ (8018ddc <tcp_receive+0xb18>)
 8018c54:	f007 f9f6 	bl	8020044 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018c5c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8018dc8 <tcp_receive+0xb04>)
 8018c60:	881b      	ldrh	r3, [r3, #0]
 8018c62:	461a      	mov	r2, r3
 8018c64:	4b59      	ldr	r3, [pc, #356]	@ (8018dcc <tcp_receive+0xb08>)
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	441a      	add	r2, r3
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018c72:	4b55      	ldr	r3, [pc, #340]	@ (8018dc8 <tcp_receive+0xb04>)
 8018c74:	881b      	ldrh	r3, [r3, #0]
 8018c76:	429a      	cmp	r2, r3
 8018c78:	d206      	bcs.n	8018c88 <tcp_receive+0x9c4>
 8018c7a:	4b56      	ldr	r3, [pc, #344]	@ (8018dd4 <tcp_receive+0xb10>)
 8018c7c:	f240 6207 	movw	r2, #1543	@ 0x607
 8018c80:	4957      	ldr	r1, [pc, #348]	@ (8018de0 <tcp_receive+0xb1c>)
 8018c82:	4856      	ldr	r0, [pc, #344]	@ (8018ddc <tcp_receive+0xb18>)
 8018c84:	f007 f9de 	bl	8020044 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8018dc8 <tcp_receive+0xb04>)
 8018c8e:	881b      	ldrh	r3, [r3, #0]
 8018c90:	1ad3      	subs	r3, r2, r3
 8018c92:	b29a      	uxth	r2, r3
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018c98:	6878      	ldr	r0, [r7, #4]
 8018c9a:	f7fc fe21 	bl	80158e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018ca0:	685b      	ldr	r3, [r3, #4]
 8018ca2:	891b      	ldrh	r3, [r3, #8]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d006      	beq.n	8018cb6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018ca8:	4b49      	ldr	r3, [pc, #292]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018caa:	685b      	ldr	r3, [r3, #4]
 8018cac:	4a4d      	ldr	r2, [pc, #308]	@ (8018de4 <tcp_receive+0xb20>)
 8018cae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018cb0:	4b47      	ldr	r3, [pc, #284]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018cb6:	4b46      	ldr	r3, [pc, #280]	@ (8018dd0 <tcp_receive+0xb0c>)
 8018cb8:	68db      	ldr	r3, [r3, #12]
 8018cba:	899b      	ldrh	r3, [r3, #12]
 8018cbc:	b29b      	uxth	r3, r3
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	f7fa faa4 	bl	801320c <lwip_htons>
 8018cc4:	4603      	mov	r3, r0
 8018cc6:	b2db      	uxtb	r3, r3
 8018cc8:	f003 0301 	and.w	r3, r3, #1
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	f000 80b8 	beq.w	8018e42 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018cd2:	4b45      	ldr	r3, [pc, #276]	@ (8018de8 <tcp_receive+0xb24>)
 8018cd4:	781b      	ldrb	r3, [r3, #0]
 8018cd6:	f043 0320 	orr.w	r3, r3, #32
 8018cda:	b2da      	uxtb	r2, r3
 8018cdc:	4b42      	ldr	r3, [pc, #264]	@ (8018de8 <tcp_receive+0xb24>)
 8018cde:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018ce0:	e0af      	b.n	8018e42 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ce6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018cec:	68db      	ldr	r3, [r3, #12]
 8018cee:	685b      	ldr	r3, [r3, #4]
 8018cf0:	4a36      	ldr	r2, [pc, #216]	@ (8018dcc <tcp_receive+0xb08>)
 8018cf2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	891b      	ldrh	r3, [r3, #8]
 8018cf8:	461c      	mov	r4, r3
 8018cfa:	68bb      	ldr	r3, [r7, #8]
 8018cfc:	68db      	ldr	r3, [r3, #12]
 8018cfe:	899b      	ldrh	r3, [r3, #12]
 8018d00:	b29b      	uxth	r3, r3
 8018d02:	4618      	mov	r0, r3
 8018d04:	f7fa fa82 	bl	801320c <lwip_htons>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	f003 0303 	and.w	r3, r3, #3
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d001      	beq.n	8018d18 <tcp_receive+0xa54>
 8018d14:	2301      	movs	r3, #1
 8018d16:	e000      	b.n	8018d1a <tcp_receive+0xa56>
 8018d18:	2300      	movs	r3, #0
 8018d1a:	191a      	adds	r2, r3, r4
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d20:	441a      	add	r2, r3
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018d2a:	461c      	mov	r4, r3
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	891b      	ldrh	r3, [r3, #8]
 8018d30:	461d      	mov	r5, r3
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	68db      	ldr	r3, [r3, #12]
 8018d36:	899b      	ldrh	r3, [r3, #12]
 8018d38:	b29b      	uxth	r3, r3
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	f7fa fa66 	bl	801320c <lwip_htons>
 8018d40:	4603      	mov	r3, r0
 8018d42:	b2db      	uxtb	r3, r3
 8018d44:	f003 0303 	and.w	r3, r3, #3
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d001      	beq.n	8018d50 <tcp_receive+0xa8c>
 8018d4c:	2301      	movs	r3, #1
 8018d4e:	e000      	b.n	8018d52 <tcp_receive+0xa8e>
 8018d50:	2300      	movs	r3, #0
 8018d52:	442b      	add	r3, r5
 8018d54:	429c      	cmp	r4, r3
 8018d56:	d206      	bcs.n	8018d66 <tcp_receive+0xaa2>
 8018d58:	4b1e      	ldr	r3, [pc, #120]	@ (8018dd4 <tcp_receive+0xb10>)
 8018d5a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8018d5e:	4923      	ldr	r1, [pc, #140]	@ (8018dec <tcp_receive+0xb28>)
 8018d60:	481e      	ldr	r0, [pc, #120]	@ (8018ddc <tcp_receive+0xb18>)
 8018d62:	f007 f96f 	bl	8020044 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018d66:	68bb      	ldr	r3, [r7, #8]
 8018d68:	891b      	ldrh	r3, [r3, #8]
 8018d6a:	461c      	mov	r4, r3
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	68db      	ldr	r3, [r3, #12]
 8018d70:	899b      	ldrh	r3, [r3, #12]
 8018d72:	b29b      	uxth	r3, r3
 8018d74:	4618      	mov	r0, r3
 8018d76:	f7fa fa49 	bl	801320c <lwip_htons>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	f003 0303 	and.w	r3, r3, #3
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d001      	beq.n	8018d8a <tcp_receive+0xac6>
 8018d86:	2301      	movs	r3, #1
 8018d88:	e000      	b.n	8018d8c <tcp_receive+0xac8>
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	1919      	adds	r1, r3, r4
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018d92:	b28b      	uxth	r3, r1
 8018d94:	1ad3      	subs	r3, r2, r3
 8018d96:	b29a      	uxth	r2, r3
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018d9c:	6878      	ldr	r0, [r7, #4]
 8018d9e:	f7fc fd9f 	bl	80158e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	685b      	ldr	r3, [r3, #4]
 8018da6:	891b      	ldrh	r3, [r3, #8]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d028      	beq.n	8018dfe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018dac:	4b0d      	ldr	r3, [pc, #52]	@ (8018de4 <tcp_receive+0xb20>)
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d01d      	beq.n	8018df0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018db4:	4b0b      	ldr	r3, [pc, #44]	@ (8018de4 <tcp_receive+0xb20>)
 8018db6:	681a      	ldr	r2, [r3, #0]
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	685b      	ldr	r3, [r3, #4]
 8018dbc:	4619      	mov	r1, r3
 8018dbe:	4610      	mov	r0, r2
 8018dc0:	f7fb ffb0 	bl	8014d24 <pbuf_cat>
 8018dc4:	e018      	b.n	8018df8 <tcp_receive+0xb34>
 8018dc6:	bf00      	nop
 8018dc8:	2002d3ee 	.word	0x2002d3ee
 8018dcc:	2002d3e4 	.word	0x2002d3e4
 8018dd0:	2002d3c4 	.word	0x2002d3c4
 8018dd4:	08022e84 	.word	0x08022e84
 8018dd8:	08023264 	.word	0x08023264
 8018ddc:	08022ed0 	.word	0x08022ed0
 8018de0:	080232a0 	.word	0x080232a0
 8018de4:	2002d3f4 	.word	0x2002d3f4
 8018de8:	2002d3f1 	.word	0x2002d3f1
 8018dec:	080232c0 	.word	0x080232c0
            } else {
              recv_data = cseg->p;
 8018df0:	68bb      	ldr	r3, [r7, #8]
 8018df2:	685b      	ldr	r3, [r3, #4]
 8018df4:	4a70      	ldr	r2, [pc, #448]	@ (8018fb8 <tcp_receive+0xcf4>)
 8018df6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018df8:	68bb      	ldr	r3, [r7, #8]
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018dfe:	68bb      	ldr	r3, [r7, #8]
 8018e00:	68db      	ldr	r3, [r3, #12]
 8018e02:	899b      	ldrh	r3, [r3, #12]
 8018e04:	b29b      	uxth	r3, r3
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7fa fa00 	bl	801320c <lwip_htons>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	b2db      	uxtb	r3, r3
 8018e10:	f003 0301 	and.w	r3, r3, #1
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d00d      	beq.n	8018e34 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018e18:	4b68      	ldr	r3, [pc, #416]	@ (8018fbc <tcp_receive+0xcf8>)
 8018e1a:	781b      	ldrb	r3, [r3, #0]
 8018e1c:	f043 0320 	orr.w	r3, r3, #32
 8018e20:	b2da      	uxtb	r2, r3
 8018e22:	4b66      	ldr	r3, [pc, #408]	@ (8018fbc <tcp_receive+0xcf8>)
 8018e24:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	7d1b      	ldrb	r3, [r3, #20]
 8018e2a:	2b04      	cmp	r3, #4
 8018e2c:	d102      	bne.n	8018e34 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	2207      	movs	r2, #7
 8018e32:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018e34:	68bb      	ldr	r3, [r7, #8]
 8018e36:	681a      	ldr	r2, [r3, #0]
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018e3c:	68b8      	ldr	r0, [r7, #8]
 8018e3e:	f7fd fa76 	bl	801632e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d008      	beq.n	8018e5c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e4e:	68db      	ldr	r3, [r3, #12]
 8018e50:	685a      	ldr	r2, [r3, #4]
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018e56:	429a      	cmp	r2, r3
 8018e58:	f43f af43 	beq.w	8018ce2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	8b5b      	ldrh	r3, [r3, #26]
 8018e60:	f003 0301 	and.w	r3, r3, #1
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d00e      	beq.n	8018e86 <tcp_receive+0xbc2>
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	8b5b      	ldrh	r3, [r3, #26]
 8018e6c:	f023 0301 	bic.w	r3, r3, #1
 8018e70:	b29a      	uxth	r2, r3
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	835a      	strh	r2, [r3, #26]
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	8b5b      	ldrh	r3, [r3, #26]
 8018e7a:	f043 0302 	orr.w	r3, r3, #2
 8018e7e:	b29a      	uxth	r2, r3
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018e84:	e187      	b.n	8019196 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	8b5b      	ldrh	r3, [r3, #26]
 8018e8a:	f043 0301 	orr.w	r3, r3, #1
 8018e8e:	b29a      	uxth	r2, r3
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018e94:	e17f      	b.n	8019196 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d106      	bne.n	8018eac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018e9e:	4848      	ldr	r0, [pc, #288]	@ (8018fc0 <tcp_receive+0xcfc>)
 8018ea0:	f7fd fa5e 	bl	8016360 <tcp_seg_copy>
 8018ea4:	4602      	mov	r2, r0
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	675a      	str	r2, [r3, #116]	@ 0x74
 8018eaa:	e16c      	b.n	8019186 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018eac:	2300      	movs	r3, #0
 8018eae:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018eb6:	e156      	b.n	8019166 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8018eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018eba:	68db      	ldr	r3, [r3, #12]
 8018ebc:	685a      	ldr	r2, [r3, #4]
 8018ebe:	4b41      	ldr	r3, [pc, #260]	@ (8018fc4 <tcp_receive+0xd00>)
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	429a      	cmp	r2, r3
 8018ec4:	d11d      	bne.n	8018f02 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8018fc0 <tcp_receive+0xcfc>)
 8018ec8:	891a      	ldrh	r2, [r3, #8]
 8018eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ecc:	891b      	ldrh	r3, [r3, #8]
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	f240 814e 	bls.w	8019170 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018ed4:	483a      	ldr	r0, [pc, #232]	@ (8018fc0 <tcp_receive+0xcfc>)
 8018ed6:	f7fd fa43 	bl	8016360 <tcp_seg_copy>
 8018eda:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018edc:	697b      	ldr	r3, [r7, #20]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	f000 8148 	beq.w	8019174 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8018ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d003      	beq.n	8018ef2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8018eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018eec:	697a      	ldr	r2, [r7, #20]
 8018eee:	601a      	str	r2, [r3, #0]
 8018ef0:	e002      	b.n	8018ef8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	697a      	ldr	r2, [r7, #20]
 8018ef6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018ef8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018efa:	6978      	ldr	r0, [r7, #20]
 8018efc:	f7ff f8de 	bl	80180bc <tcp_oos_insert_segment>
                }
                break;
 8018f00:	e138      	b.n	8019174 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d117      	bne.n	8018f38 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018f08:	4b2e      	ldr	r3, [pc, #184]	@ (8018fc4 <tcp_receive+0xd00>)
 8018f0a:	681a      	ldr	r2, [r3, #0]
 8018f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f0e:	68db      	ldr	r3, [r3, #12]
 8018f10:	685b      	ldr	r3, [r3, #4]
 8018f12:	1ad3      	subs	r3, r2, r3
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	da57      	bge.n	8018fc8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018f18:	4829      	ldr	r0, [pc, #164]	@ (8018fc0 <tcp_receive+0xcfc>)
 8018f1a:	f7fd fa21 	bl	8016360 <tcp_seg_copy>
 8018f1e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018f20:	69bb      	ldr	r3, [r7, #24]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	f000 8128 	beq.w	8019178 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	69ba      	ldr	r2, [r7, #24]
 8018f2c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018f2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018f30:	69b8      	ldr	r0, [r7, #24]
 8018f32:	f7ff f8c3 	bl	80180bc <tcp_oos_insert_segment>
                  }
                  break;
 8018f36:	e11f      	b.n	8019178 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018f38:	4b22      	ldr	r3, [pc, #136]	@ (8018fc4 <tcp_receive+0xd00>)
 8018f3a:	681a      	ldr	r2, [r3, #0]
 8018f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f3e:	68db      	ldr	r3, [r3, #12]
 8018f40:	685b      	ldr	r3, [r3, #4]
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	3b01      	subs	r3, #1
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	db3e      	blt.n	8018fc8 <tcp_receive+0xd04>
 8018f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8018fc4 <tcp_receive+0xd00>)
 8018f4c:	681a      	ldr	r2, [r3, #0]
 8018f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f50:	68db      	ldr	r3, [r3, #12]
 8018f52:	685b      	ldr	r3, [r3, #4]
 8018f54:	1ad3      	subs	r3, r2, r3
 8018f56:	3301      	adds	r3, #1
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	dc35      	bgt.n	8018fc8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018f5c:	4818      	ldr	r0, [pc, #96]	@ (8018fc0 <tcp_receive+0xcfc>)
 8018f5e:	f7fd f9ff 	bl	8016360 <tcp_seg_copy>
 8018f62:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018f64:	69fb      	ldr	r3, [r7, #28]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	f000 8108 	beq.w	801917c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f6e:	68db      	ldr	r3, [r3, #12]
 8018f70:	685b      	ldr	r3, [r3, #4]
 8018f72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018f74:	8912      	ldrh	r2, [r2, #8]
 8018f76:	441a      	add	r2, r3
 8018f78:	4b12      	ldr	r3, [pc, #72]	@ (8018fc4 <tcp_receive+0xd00>)
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	1ad3      	subs	r3, r2, r3
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	dd12      	ble.n	8018fa8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018f82:	4b10      	ldr	r3, [pc, #64]	@ (8018fc4 <tcp_receive+0xd00>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	b29a      	uxth	r2, r3
 8018f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f8a:	68db      	ldr	r3, [r3, #12]
 8018f8c:	685b      	ldr	r3, [r3, #4]
 8018f8e:	b29b      	uxth	r3, r3
 8018f90:	1ad3      	subs	r3, r2, r3
 8018f92:	b29a      	uxth	r2, r3
 8018f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f96:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f9a:	685a      	ldr	r2, [r3, #4]
 8018f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f9e:	891b      	ldrh	r3, [r3, #8]
 8018fa0:	4619      	mov	r1, r3
 8018fa2:	4610      	mov	r0, r2
 8018fa4:	f7fb fc6a 	bl	801487c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018faa:	69fa      	ldr	r2, [r7, #28]
 8018fac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018fae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018fb0:	69f8      	ldr	r0, [r7, #28]
 8018fb2:	f7ff f883 	bl	80180bc <tcp_oos_insert_segment>
                  }
                  break;
 8018fb6:	e0e1      	b.n	801917c <tcp_receive+0xeb8>
 8018fb8:	2002d3f4 	.word	0x2002d3f4
 8018fbc:	2002d3f1 	.word	0x2002d3f1
 8018fc0:	2002d3c4 	.word	0x2002d3c4
 8018fc4:	2002d3e4 	.word	0x2002d3e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fca:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	f040 80c5 	bne.w	8019160 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80191d4 <tcp_receive+0xf10>)
 8018fd8:	681a      	ldr	r2, [r3, #0]
 8018fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fdc:	68db      	ldr	r3, [r3, #12]
 8018fde:	685b      	ldr	r3, [r3, #4]
 8018fe0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	f340 80bc 	ble.w	8019160 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fea:	68db      	ldr	r3, [r3, #12]
 8018fec:	899b      	ldrh	r3, [r3, #12]
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7fa f90b 	bl	801320c <lwip_htons>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	f003 0301 	and.w	r3, r3, #1
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	f040 80be 	bne.w	8019180 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019004:	4874      	ldr	r0, [pc, #464]	@ (80191d8 <tcp_receive+0xf14>)
 8019006:	f7fd f9ab 	bl	8016360 <tcp_seg_copy>
 801900a:	4602      	mov	r2, r0
 801900c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801900e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	f000 80b5 	beq.w	8019184 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801901a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801901c:	68db      	ldr	r3, [r3, #12]
 801901e:	685b      	ldr	r3, [r3, #4]
 8019020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019022:	8912      	ldrh	r2, [r2, #8]
 8019024:	441a      	add	r2, r3
 8019026:	4b6b      	ldr	r3, [pc, #428]	@ (80191d4 <tcp_receive+0xf10>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	1ad3      	subs	r3, r2, r3
 801902c:	2b00      	cmp	r3, #0
 801902e:	dd12      	ble.n	8019056 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019030:	4b68      	ldr	r3, [pc, #416]	@ (80191d4 <tcp_receive+0xf10>)
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	b29a      	uxth	r2, r3
 8019036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019038:	68db      	ldr	r3, [r3, #12]
 801903a:	685b      	ldr	r3, [r3, #4]
 801903c:	b29b      	uxth	r3, r3
 801903e:	1ad3      	subs	r3, r2, r3
 8019040:	b29a      	uxth	r2, r3
 8019042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019044:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019048:	685a      	ldr	r2, [r3, #4]
 801904a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801904c:	891b      	ldrh	r3, [r3, #8]
 801904e:	4619      	mov	r1, r3
 8019050:	4610      	mov	r0, r2
 8019052:	f7fb fc13 	bl	801487c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019056:	4b61      	ldr	r3, [pc, #388]	@ (80191dc <tcp_receive+0xf18>)
 8019058:	881b      	ldrh	r3, [r3, #0]
 801905a:	461a      	mov	r2, r3
 801905c:	4b5d      	ldr	r3, [pc, #372]	@ (80191d4 <tcp_receive+0xf10>)
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	441a      	add	r2, r3
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019066:	6879      	ldr	r1, [r7, #4]
 8019068:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801906a:	440b      	add	r3, r1
 801906c:	1ad3      	subs	r3, r2, r3
 801906e:	2b00      	cmp	r3, #0
 8019070:	f340 8088 	ble.w	8019184 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	68db      	ldr	r3, [r3, #12]
 801907a:	899b      	ldrh	r3, [r3, #12]
 801907c:	b29b      	uxth	r3, r3
 801907e:	4618      	mov	r0, r3
 8019080:	f7fa f8c4 	bl	801320c <lwip_htons>
 8019084:	4603      	mov	r3, r0
 8019086:	b2db      	uxtb	r3, r3
 8019088:	f003 0301 	and.w	r3, r3, #1
 801908c:	2b00      	cmp	r3, #0
 801908e:	d021      	beq.n	80190d4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	68db      	ldr	r3, [r3, #12]
 8019096:	899b      	ldrh	r3, [r3, #12]
 8019098:	b29b      	uxth	r3, r3
 801909a:	b21b      	sxth	r3, r3
 801909c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80190a0:	b21c      	sxth	r4, r3
 80190a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	68db      	ldr	r3, [r3, #12]
 80190a8:	899b      	ldrh	r3, [r3, #12]
 80190aa:	b29b      	uxth	r3, r3
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7fa f8ad 	bl	801320c <lwip_htons>
 80190b2:	4603      	mov	r3, r0
 80190b4:	b2db      	uxtb	r3, r3
 80190b6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80190ba:	b29b      	uxth	r3, r3
 80190bc:	4618      	mov	r0, r3
 80190be:	f7fa f8a5 	bl	801320c <lwip_htons>
 80190c2:	4603      	mov	r3, r0
 80190c4:	b21b      	sxth	r3, r3
 80190c6:	4323      	orrs	r3, r4
 80190c8:	b21a      	sxth	r2, r3
 80190ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	68db      	ldr	r3, [r3, #12]
 80190d0:	b292      	uxth	r2, r2
 80190d2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190d8:	b29a      	uxth	r2, r3
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80190de:	4413      	add	r3, r2
 80190e0:	b299      	uxth	r1, r3
 80190e2:	4b3c      	ldr	r3, [pc, #240]	@ (80191d4 <tcp_receive+0xf10>)
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	b29a      	uxth	r2, r3
 80190e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	1a8a      	subs	r2, r1, r2
 80190ee:	b292      	uxth	r2, r2
 80190f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80190f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	685a      	ldr	r2, [r3, #4]
 80190f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	891b      	ldrh	r3, [r3, #8]
 80190fe:	4619      	mov	r1, r3
 8019100:	4610      	mov	r0, r2
 8019102:	f7fb fbbb 	bl	801487c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	891c      	ldrh	r4, [r3, #8]
 801910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	68db      	ldr	r3, [r3, #12]
 8019112:	899b      	ldrh	r3, [r3, #12]
 8019114:	b29b      	uxth	r3, r3
 8019116:	4618      	mov	r0, r3
 8019118:	f7fa f878 	bl	801320c <lwip_htons>
 801911c:	4603      	mov	r3, r0
 801911e:	b2db      	uxtb	r3, r3
 8019120:	f003 0303 	and.w	r3, r3, #3
 8019124:	2b00      	cmp	r3, #0
 8019126:	d001      	beq.n	801912c <tcp_receive+0xe68>
 8019128:	2301      	movs	r3, #1
 801912a:	e000      	b.n	801912e <tcp_receive+0xe6a>
 801912c:	2300      	movs	r3, #0
 801912e:	4423      	add	r3, r4
 8019130:	b29a      	uxth	r2, r3
 8019132:	4b2a      	ldr	r3, [pc, #168]	@ (80191dc <tcp_receive+0xf18>)
 8019134:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019136:	4b29      	ldr	r3, [pc, #164]	@ (80191dc <tcp_receive+0xf18>)
 8019138:	881b      	ldrh	r3, [r3, #0]
 801913a:	461a      	mov	r2, r3
 801913c:	4b25      	ldr	r3, [pc, #148]	@ (80191d4 <tcp_receive+0xf10>)
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	441a      	add	r2, r3
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019146:	6879      	ldr	r1, [r7, #4]
 8019148:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801914a:	440b      	add	r3, r1
 801914c:	429a      	cmp	r2, r3
 801914e:	d019      	beq.n	8019184 <tcp_receive+0xec0>
 8019150:	4b23      	ldr	r3, [pc, #140]	@ (80191e0 <tcp_receive+0xf1c>)
 8019152:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8019156:	4923      	ldr	r1, [pc, #140]	@ (80191e4 <tcp_receive+0xf20>)
 8019158:	4823      	ldr	r0, [pc, #140]	@ (80191e8 <tcp_receive+0xf24>)
 801915a:	f006 ff73 	bl	8020044 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801915e:	e011      	b.n	8019184 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019168:	2b00      	cmp	r3, #0
 801916a:	f47f aea5 	bne.w	8018eb8 <tcp_receive+0xbf4>
 801916e:	e00a      	b.n	8019186 <tcp_receive+0xec2>
                break;
 8019170:	bf00      	nop
 8019172:	e008      	b.n	8019186 <tcp_receive+0xec2>
                break;
 8019174:	bf00      	nop
 8019176:	e006      	b.n	8019186 <tcp_receive+0xec2>
                  break;
 8019178:	bf00      	nop
 801917a:	e004      	b.n	8019186 <tcp_receive+0xec2>
                  break;
 801917c:	bf00      	nop
 801917e:	e002      	b.n	8019186 <tcp_receive+0xec2>
                  break;
 8019180:	bf00      	nop
 8019182:	e000      	b.n	8019186 <tcp_receive+0xec2>
                break;
 8019184:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019186:	6878      	ldr	r0, [r7, #4]
 8019188:	f001 fed6 	bl	801af38 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801918c:	e003      	b.n	8019196 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801918e:	6878      	ldr	r0, [r7, #4]
 8019190:	f001 fed2 	bl	801af38 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019194:	e01a      	b.n	80191cc <tcp_receive+0xf08>
 8019196:	e019      	b.n	80191cc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019198:	4b0e      	ldr	r3, [pc, #56]	@ (80191d4 <tcp_receive+0xf10>)
 801919a:	681a      	ldr	r2, [r3, #0]
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191a0:	1ad3      	subs	r3, r2, r3
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	db0a      	blt.n	80191bc <tcp_receive+0xef8>
 80191a6:	4b0b      	ldr	r3, [pc, #44]	@ (80191d4 <tcp_receive+0xf10>)
 80191a8:	681a      	ldr	r2, [r3, #0]
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191ae:	6879      	ldr	r1, [r7, #4]
 80191b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80191b2:	440b      	add	r3, r1
 80191b4:	1ad3      	subs	r3, r2, r3
 80191b6:	3301      	adds	r3, #1
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	dd07      	ble.n	80191cc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	8b5b      	ldrh	r3, [r3, #26]
 80191c0:	f043 0302 	orr.w	r3, r3, #2
 80191c4:	b29a      	uxth	r2, r3
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80191ca:	e7ff      	b.n	80191cc <tcp_receive+0xf08>
 80191cc:	bf00      	nop
 80191ce:	3750      	adds	r7, #80	@ 0x50
 80191d0:	46bd      	mov	sp, r7
 80191d2:	bdb0      	pop	{r4, r5, r7, pc}
 80191d4:	2002d3e4 	.word	0x2002d3e4
 80191d8:	2002d3c4 	.word	0x2002d3c4
 80191dc:	2002d3ee 	.word	0x2002d3ee
 80191e0:	08022e84 	.word	0x08022e84
 80191e4:	0802322c 	.word	0x0802322c
 80191e8:	08022ed0 	.word	0x08022ed0

080191ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80191ec:	b480      	push	{r7}
 80191ee:	b083      	sub	sp, #12
 80191f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80191f2:	4b15      	ldr	r3, [pc, #84]	@ (8019248 <tcp_get_next_optbyte+0x5c>)
 80191f4:	881b      	ldrh	r3, [r3, #0]
 80191f6:	1c5a      	adds	r2, r3, #1
 80191f8:	b291      	uxth	r1, r2
 80191fa:	4a13      	ldr	r2, [pc, #76]	@ (8019248 <tcp_get_next_optbyte+0x5c>)
 80191fc:	8011      	strh	r1, [r2, #0]
 80191fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019200:	4b12      	ldr	r3, [pc, #72]	@ (801924c <tcp_get_next_optbyte+0x60>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d004      	beq.n	8019212 <tcp_get_next_optbyte+0x26>
 8019208:	4b11      	ldr	r3, [pc, #68]	@ (8019250 <tcp_get_next_optbyte+0x64>)
 801920a:	881b      	ldrh	r3, [r3, #0]
 801920c:	88fa      	ldrh	r2, [r7, #6]
 801920e:	429a      	cmp	r2, r3
 8019210:	d208      	bcs.n	8019224 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019212:	4b10      	ldr	r3, [pc, #64]	@ (8019254 <tcp_get_next_optbyte+0x68>)
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	3314      	adds	r3, #20
 8019218:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801921a:	88fb      	ldrh	r3, [r7, #6]
 801921c:	683a      	ldr	r2, [r7, #0]
 801921e:	4413      	add	r3, r2
 8019220:	781b      	ldrb	r3, [r3, #0]
 8019222:	e00b      	b.n	801923c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019224:	88fb      	ldrh	r3, [r7, #6]
 8019226:	b2da      	uxtb	r2, r3
 8019228:	4b09      	ldr	r3, [pc, #36]	@ (8019250 <tcp_get_next_optbyte+0x64>)
 801922a:	881b      	ldrh	r3, [r3, #0]
 801922c:	b2db      	uxtb	r3, r3
 801922e:	1ad3      	subs	r3, r2, r3
 8019230:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019232:	4b06      	ldr	r3, [pc, #24]	@ (801924c <tcp_get_next_optbyte+0x60>)
 8019234:	681a      	ldr	r2, [r3, #0]
 8019236:	797b      	ldrb	r3, [r7, #5]
 8019238:	4413      	add	r3, r2
 801923a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801923c:	4618      	mov	r0, r3
 801923e:	370c      	adds	r7, #12
 8019240:	46bd      	mov	sp, r7
 8019242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019246:	4770      	bx	lr
 8019248:	2002d3e0 	.word	0x2002d3e0
 801924c:	2002d3dc 	.word	0x2002d3dc
 8019250:	2002d3da 	.word	0x2002d3da
 8019254:	2002d3d4 	.word	0x2002d3d4

08019258 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019258:	b580      	push	{r7, lr}
 801925a:	b084      	sub	sp, #16
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d106      	bne.n	8019274 <tcp_parseopt+0x1c>
 8019266:	4b32      	ldr	r3, [pc, #200]	@ (8019330 <tcp_parseopt+0xd8>)
 8019268:	f240 727d 	movw	r2, #1917	@ 0x77d
 801926c:	4931      	ldr	r1, [pc, #196]	@ (8019334 <tcp_parseopt+0xdc>)
 801926e:	4832      	ldr	r0, [pc, #200]	@ (8019338 <tcp_parseopt+0xe0>)
 8019270:	f006 fee8 	bl	8020044 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019274:	4b31      	ldr	r3, [pc, #196]	@ (801933c <tcp_parseopt+0xe4>)
 8019276:	881b      	ldrh	r3, [r3, #0]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d056      	beq.n	801932a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801927c:	4b30      	ldr	r3, [pc, #192]	@ (8019340 <tcp_parseopt+0xe8>)
 801927e:	2200      	movs	r2, #0
 8019280:	801a      	strh	r2, [r3, #0]
 8019282:	e046      	b.n	8019312 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8019284:	f7ff ffb2 	bl	80191ec <tcp_get_next_optbyte>
 8019288:	4603      	mov	r3, r0
 801928a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801928c:	7bfb      	ldrb	r3, [r7, #15]
 801928e:	2b02      	cmp	r3, #2
 8019290:	d006      	beq.n	80192a0 <tcp_parseopt+0x48>
 8019292:	2b02      	cmp	r3, #2
 8019294:	dc2a      	bgt.n	80192ec <tcp_parseopt+0x94>
 8019296:	2b00      	cmp	r3, #0
 8019298:	d042      	beq.n	8019320 <tcp_parseopt+0xc8>
 801929a:	2b01      	cmp	r3, #1
 801929c:	d038      	beq.n	8019310 <tcp_parseopt+0xb8>
 801929e:	e025      	b.n	80192ec <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80192a0:	f7ff ffa4 	bl	80191ec <tcp_get_next_optbyte>
 80192a4:	4603      	mov	r3, r0
 80192a6:	2b04      	cmp	r3, #4
 80192a8:	d13c      	bne.n	8019324 <tcp_parseopt+0xcc>
 80192aa:	4b25      	ldr	r3, [pc, #148]	@ (8019340 <tcp_parseopt+0xe8>)
 80192ac:	881b      	ldrh	r3, [r3, #0]
 80192ae:	3301      	adds	r3, #1
 80192b0:	4a22      	ldr	r2, [pc, #136]	@ (801933c <tcp_parseopt+0xe4>)
 80192b2:	8812      	ldrh	r2, [r2, #0]
 80192b4:	4293      	cmp	r3, r2
 80192b6:	da35      	bge.n	8019324 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80192b8:	f7ff ff98 	bl	80191ec <tcp_get_next_optbyte>
 80192bc:	4603      	mov	r3, r0
 80192be:	021b      	lsls	r3, r3, #8
 80192c0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80192c2:	f7ff ff93 	bl	80191ec <tcp_get_next_optbyte>
 80192c6:	4603      	mov	r3, r0
 80192c8:	461a      	mov	r2, r3
 80192ca:	89bb      	ldrh	r3, [r7, #12]
 80192cc:	4313      	orrs	r3, r2
 80192ce:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80192d0:	89bb      	ldrh	r3, [r7, #12]
 80192d2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80192d6:	d804      	bhi.n	80192e2 <tcp_parseopt+0x8a>
 80192d8:	89bb      	ldrh	r3, [r7, #12]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d001      	beq.n	80192e2 <tcp_parseopt+0x8a>
 80192de:	89ba      	ldrh	r2, [r7, #12]
 80192e0:	e001      	b.n	80192e6 <tcp_parseopt+0x8e>
 80192e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80192ea:	e012      	b.n	8019312 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80192ec:	f7ff ff7e 	bl	80191ec <tcp_get_next_optbyte>
 80192f0:	4603      	mov	r3, r0
 80192f2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80192f4:	7afb      	ldrb	r3, [r7, #11]
 80192f6:	2b01      	cmp	r3, #1
 80192f8:	d916      	bls.n	8019328 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80192fa:	7afb      	ldrb	r3, [r7, #11]
 80192fc:	b29a      	uxth	r2, r3
 80192fe:	4b10      	ldr	r3, [pc, #64]	@ (8019340 <tcp_parseopt+0xe8>)
 8019300:	881b      	ldrh	r3, [r3, #0]
 8019302:	4413      	add	r3, r2
 8019304:	b29b      	uxth	r3, r3
 8019306:	3b02      	subs	r3, #2
 8019308:	b29a      	uxth	r2, r3
 801930a:	4b0d      	ldr	r3, [pc, #52]	@ (8019340 <tcp_parseopt+0xe8>)
 801930c:	801a      	strh	r2, [r3, #0]
 801930e:	e000      	b.n	8019312 <tcp_parseopt+0xba>
          break;
 8019310:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019312:	4b0b      	ldr	r3, [pc, #44]	@ (8019340 <tcp_parseopt+0xe8>)
 8019314:	881a      	ldrh	r2, [r3, #0]
 8019316:	4b09      	ldr	r3, [pc, #36]	@ (801933c <tcp_parseopt+0xe4>)
 8019318:	881b      	ldrh	r3, [r3, #0]
 801931a:	429a      	cmp	r2, r3
 801931c:	d3b2      	bcc.n	8019284 <tcp_parseopt+0x2c>
 801931e:	e004      	b.n	801932a <tcp_parseopt+0xd2>
          return;
 8019320:	bf00      	nop
 8019322:	e002      	b.n	801932a <tcp_parseopt+0xd2>
            return;
 8019324:	bf00      	nop
 8019326:	e000      	b.n	801932a <tcp_parseopt+0xd2>
            return;
 8019328:	bf00      	nop
      }
    }
  }
}
 801932a:	3710      	adds	r7, #16
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}
 8019330:	08022e84 	.word	0x08022e84
 8019334:	080232e8 	.word	0x080232e8
 8019338:	08022ed0 	.word	0x08022ed0
 801933c:	2002d3d8 	.word	0x2002d3d8
 8019340:	2002d3e0 	.word	0x2002d3e0

08019344 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019344:	b480      	push	{r7}
 8019346:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019348:	4b05      	ldr	r3, [pc, #20]	@ (8019360 <tcp_trigger_input_pcb_close+0x1c>)
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	f043 0310 	orr.w	r3, r3, #16
 8019350:	b2da      	uxtb	r2, r3
 8019352:	4b03      	ldr	r3, [pc, #12]	@ (8019360 <tcp_trigger_input_pcb_close+0x1c>)
 8019354:	701a      	strb	r2, [r3, #0]
}
 8019356:	bf00      	nop
 8019358:	46bd      	mov	sp, r7
 801935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935e:	4770      	bx	lr
 8019360:	2002d3f1 	.word	0x2002d3f1

08019364 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b084      	sub	sp, #16
 8019368:	af00      	add	r7, sp, #0
 801936a:	60f8      	str	r0, [r7, #12]
 801936c:	60b9      	str	r1, [r7, #8]
 801936e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d00a      	beq.n	801938c <tcp_route+0x28>
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	7a1b      	ldrb	r3, [r3, #8]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d006      	beq.n	801938c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801937e:	68fb      	ldr	r3, [r7, #12]
 8019380:	7a1b      	ldrb	r3, [r3, #8]
 8019382:	4618      	mov	r0, r3
 8019384:	f7fb f872 	bl	801446c <netif_get_by_index>
 8019388:	4603      	mov	r3, r0
 801938a:	e003      	b.n	8019394 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801938c:	6878      	ldr	r0, [r7, #4]
 801938e:	f003 ff4d 	bl	801d22c <ip4_route>
 8019392:	4603      	mov	r3, r0
  }
}
 8019394:	4618      	mov	r0, r3
 8019396:	3710      	adds	r7, #16
 8019398:	46bd      	mov	sp, r7
 801939a:	bd80      	pop	{r7, pc}

0801939c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801939c:	b590      	push	{r4, r7, lr}
 801939e:	b087      	sub	sp, #28
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	60f8      	str	r0, [r7, #12]
 80193a4:	60b9      	str	r1, [r7, #8]
 80193a6:	603b      	str	r3, [r7, #0]
 80193a8:	4613      	mov	r3, r2
 80193aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d105      	bne.n	80193be <tcp_create_segment+0x22>
 80193b2:	4b47      	ldr	r3, [pc, #284]	@ (80194d0 <tcp_create_segment+0x134>)
 80193b4:	22a3      	movs	r2, #163	@ 0xa3
 80193b6:	4947      	ldr	r1, [pc, #284]	@ (80194d4 <tcp_create_segment+0x138>)
 80193b8:	4847      	ldr	r0, [pc, #284]	@ (80194d8 <tcp_create_segment+0x13c>)
 80193ba:	f006 fe43 	bl	8020044 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d105      	bne.n	80193d0 <tcp_create_segment+0x34>
 80193c4:	4b42      	ldr	r3, [pc, #264]	@ (80194d0 <tcp_create_segment+0x134>)
 80193c6:	22a4      	movs	r2, #164	@ 0xa4
 80193c8:	4944      	ldr	r1, [pc, #272]	@ (80194dc <tcp_create_segment+0x140>)
 80193ca:	4843      	ldr	r0, [pc, #268]	@ (80194d8 <tcp_create_segment+0x13c>)
 80193cc:	f006 fe3a 	bl	8020044 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80193d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80193d4:	009b      	lsls	r3, r3, #2
 80193d6:	b2db      	uxtb	r3, r3
 80193d8:	f003 0304 	and.w	r3, r3, #4
 80193dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80193de:	2003      	movs	r0, #3
 80193e0:	f7fa fcb2 	bl	8013d48 <memp_malloc>
 80193e4:	6138      	str	r0, [r7, #16]
 80193e6:	693b      	ldr	r3, [r7, #16]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d104      	bne.n	80193f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80193ec:	68b8      	ldr	r0, [r7, #8]
 80193ee:	f7fb fbcb 	bl	8014b88 <pbuf_free>
    return NULL;
 80193f2:	2300      	movs	r3, #0
 80193f4:	e068      	b.n	80194c8 <tcp_create_segment+0x12c>
  }
  seg->flags = optflags;
 80193f6:	693b      	ldr	r3, [r7, #16]
 80193f8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80193fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80193fe:	693b      	ldr	r3, [r7, #16]
 8019400:	2200      	movs	r2, #0
 8019402:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019404:	693b      	ldr	r3, [r7, #16]
 8019406:	68ba      	ldr	r2, [r7, #8]
 8019408:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801940a:	68bb      	ldr	r3, [r7, #8]
 801940c:	891a      	ldrh	r2, [r3, #8]
 801940e:	7dfb      	ldrb	r3, [r7, #23]
 8019410:	b29b      	uxth	r3, r3
 8019412:	429a      	cmp	r2, r3
 8019414:	d205      	bcs.n	8019422 <tcp_create_segment+0x86>
 8019416:	4b2e      	ldr	r3, [pc, #184]	@ (80194d0 <tcp_create_segment+0x134>)
 8019418:	22b0      	movs	r2, #176	@ 0xb0
 801941a:	4931      	ldr	r1, [pc, #196]	@ (80194e0 <tcp_create_segment+0x144>)
 801941c:	482e      	ldr	r0, [pc, #184]	@ (80194d8 <tcp_create_segment+0x13c>)
 801941e:	f006 fe11 	bl	8020044 <iprintf>
  seg->len = p->tot_len - optlen;
 8019422:	68bb      	ldr	r3, [r7, #8]
 8019424:	891a      	ldrh	r2, [r3, #8]
 8019426:	7dfb      	ldrb	r3, [r7, #23]
 8019428:	b29b      	uxth	r3, r3
 801942a:	1ad3      	subs	r3, r2, r3
 801942c:	b29a      	uxth	r2, r3
 801942e:	693b      	ldr	r3, [r7, #16]
 8019430:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019432:	2114      	movs	r1, #20
 8019434:	68b8      	ldr	r0, [r7, #8]
 8019436:	f7fb fb11 	bl	8014a5c <pbuf_add_header>
 801943a:	4603      	mov	r3, r0
 801943c:	2b00      	cmp	r3, #0
 801943e:	d00c      	beq.n	801945a <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8019440:	4b28      	ldr	r3, [pc, #160]	@ (80194e4 <tcp_create_segment+0x148>)
 8019442:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8019446:	3301      	adds	r3, #1
 8019448:	b29a      	uxth	r2, r3
 801944a:	4b26      	ldr	r3, [pc, #152]	@ (80194e4 <tcp_create_segment+0x148>)
 801944c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 8019450:	6938      	ldr	r0, [r7, #16]
 8019452:	f7fc ff6c 	bl	801632e <tcp_seg_free>
    return NULL;
 8019456:	2300      	movs	r3, #0
 8019458:	e036      	b.n	80194c8 <tcp_create_segment+0x12c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801945a:	693b      	ldr	r3, [r7, #16]
 801945c:	685b      	ldr	r3, [r3, #4]
 801945e:	685a      	ldr	r2, [r3, #4]
 8019460:	693b      	ldr	r3, [r7, #16]
 8019462:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	8ada      	ldrh	r2, [r3, #22]
 8019468:	693b      	ldr	r3, [r7, #16]
 801946a:	68dc      	ldr	r4, [r3, #12]
 801946c:	4610      	mov	r0, r2
 801946e:	f7f9 fecd 	bl	801320c <lwip_htons>
 8019472:	4603      	mov	r3, r0
 8019474:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	8b1a      	ldrh	r2, [r3, #24]
 801947a:	693b      	ldr	r3, [r7, #16]
 801947c:	68dc      	ldr	r4, [r3, #12]
 801947e:	4610      	mov	r0, r2
 8019480:	f7f9 fec4 	bl	801320c <lwip_htons>
 8019484:	4603      	mov	r3, r0
 8019486:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	68dc      	ldr	r4, [r3, #12]
 801948c:	6838      	ldr	r0, [r7, #0]
 801948e:	f7f9 fed3 	bl	8013238 <lwip_htonl>
 8019492:	4603      	mov	r3, r0
 8019494:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019496:	7dfb      	ldrb	r3, [r7, #23]
 8019498:	089b      	lsrs	r3, r3, #2
 801949a:	b2db      	uxtb	r3, r3
 801949c:	3305      	adds	r3, #5
 801949e:	b29b      	uxth	r3, r3
 80194a0:	031b      	lsls	r3, r3, #12
 80194a2:	b29a      	uxth	r2, r3
 80194a4:	79fb      	ldrb	r3, [r7, #7]
 80194a6:	b29b      	uxth	r3, r3
 80194a8:	4313      	orrs	r3, r2
 80194aa:	b29a      	uxth	r2, r3
 80194ac:	693b      	ldr	r3, [r7, #16]
 80194ae:	68dc      	ldr	r4, [r3, #12]
 80194b0:	4610      	mov	r0, r2
 80194b2:	f7f9 feab 	bl	801320c <lwip_htons>
 80194b6:	4603      	mov	r3, r0
 80194b8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80194ba:	693b      	ldr	r3, [r7, #16]
 80194bc:	68db      	ldr	r3, [r3, #12]
 80194be:	2200      	movs	r2, #0
 80194c0:	749a      	strb	r2, [r3, #18]
 80194c2:	2200      	movs	r2, #0
 80194c4:	74da      	strb	r2, [r3, #19]
  return seg;
 80194c6:	693b      	ldr	r3, [r7, #16]
}
 80194c8:	4618      	mov	r0, r3
 80194ca:	371c      	adds	r7, #28
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bd90      	pop	{r4, r7, pc}
 80194d0:	08023304 	.word	0x08023304
 80194d4:	08023338 	.word	0x08023338
 80194d8:	08023358 	.word	0x08023358
 80194dc:	08023380 	.word	0x08023380
 80194e0:	080233a4 	.word	0x080233a4
 80194e4:	2002d2b0 	.word	0x2002d2b0

080194e8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b086      	sub	sp, #24
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	607b      	str	r3, [r7, #4]
 80194f0:	4603      	mov	r3, r0
 80194f2:	73fb      	strb	r3, [r7, #15]
 80194f4:	460b      	mov	r3, r1
 80194f6:	81bb      	strh	r3, [r7, #12]
 80194f8:	4613      	mov	r3, r2
 80194fa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80194fc:	89bb      	ldrh	r3, [r7, #12]
 80194fe:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d105      	bne.n	8019512 <tcp_pbuf_prealloc+0x2a>
 8019506:	4b30      	ldr	r3, [pc, #192]	@ (80195c8 <tcp_pbuf_prealloc+0xe0>)
 8019508:	22e8      	movs	r2, #232	@ 0xe8
 801950a:	4930      	ldr	r1, [pc, #192]	@ (80195cc <tcp_pbuf_prealloc+0xe4>)
 801950c:	4830      	ldr	r0, [pc, #192]	@ (80195d0 <tcp_pbuf_prealloc+0xe8>)
 801950e:	f006 fd99 	bl	8020044 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019512:	6a3b      	ldr	r3, [r7, #32]
 8019514:	2b00      	cmp	r3, #0
 8019516:	d105      	bne.n	8019524 <tcp_pbuf_prealloc+0x3c>
 8019518:	4b2b      	ldr	r3, [pc, #172]	@ (80195c8 <tcp_pbuf_prealloc+0xe0>)
 801951a:	22e9      	movs	r2, #233	@ 0xe9
 801951c:	492d      	ldr	r1, [pc, #180]	@ (80195d4 <tcp_pbuf_prealloc+0xec>)
 801951e:	482c      	ldr	r0, [pc, #176]	@ (80195d0 <tcp_pbuf_prealloc+0xe8>)
 8019520:	f006 fd90 	bl	8020044 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019524:	89ba      	ldrh	r2, [r7, #12]
 8019526:	897b      	ldrh	r3, [r7, #10]
 8019528:	429a      	cmp	r2, r3
 801952a:	d221      	bcs.n	8019570 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801952c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019530:	f003 0302 	and.w	r3, r3, #2
 8019534:	2b00      	cmp	r3, #0
 8019536:	d111      	bne.n	801955c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019538:	6a3b      	ldr	r3, [r7, #32]
 801953a:	8b5b      	ldrh	r3, [r3, #26]
 801953c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019540:	2b00      	cmp	r3, #0
 8019542:	d115      	bne.n	8019570 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019544:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019548:	2b00      	cmp	r3, #0
 801954a:	d007      	beq.n	801955c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801954c:	6a3b      	ldr	r3, [r7, #32]
 801954e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019550:	2b00      	cmp	r3, #0
 8019552:	d103      	bne.n	801955c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019554:	6a3b      	ldr	r3, [r7, #32]
 8019556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8019558:	2b00      	cmp	r3, #0
 801955a:	d009      	beq.n	8019570 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801955c:	89bb      	ldrh	r3, [r7, #12]
 801955e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019562:	f023 0203 	bic.w	r2, r3, #3
 8019566:	897b      	ldrh	r3, [r7, #10]
 8019568:	4293      	cmp	r3, r2
 801956a:	bf28      	it	cs
 801956c:	4613      	movcs	r3, r2
 801956e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019570:	8af9      	ldrh	r1, [r7, #22]
 8019572:	7bfb      	ldrb	r3, [r7, #15]
 8019574:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019578:	4618      	mov	r0, r3
 801957a:	f7fb f821 	bl	80145c0 <pbuf_alloc>
 801957e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019580:	693b      	ldr	r3, [r7, #16]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d101      	bne.n	801958a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019586:	2300      	movs	r3, #0
 8019588:	e019      	b.n	80195be <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801958a:	693b      	ldr	r3, [r7, #16]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d006      	beq.n	80195a0 <tcp_pbuf_prealloc+0xb8>
 8019592:	4b0d      	ldr	r3, [pc, #52]	@ (80195c8 <tcp_pbuf_prealloc+0xe0>)
 8019594:	f240 120b 	movw	r2, #267	@ 0x10b
 8019598:	490f      	ldr	r1, [pc, #60]	@ (80195d8 <tcp_pbuf_prealloc+0xf0>)
 801959a:	480d      	ldr	r0, [pc, #52]	@ (80195d0 <tcp_pbuf_prealloc+0xe8>)
 801959c:	f006 fd52 	bl	8020044 <iprintf>
  *oversize = p->len - length;
 80195a0:	693b      	ldr	r3, [r7, #16]
 80195a2:	895a      	ldrh	r2, [r3, #10]
 80195a4:	89bb      	ldrh	r3, [r7, #12]
 80195a6:	1ad3      	subs	r3, r2, r3
 80195a8:	b29a      	uxth	r2, r3
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	89ba      	ldrh	r2, [r7, #12]
 80195b2:	811a      	strh	r2, [r3, #8]
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	891a      	ldrh	r2, [r3, #8]
 80195b8:	693b      	ldr	r3, [r7, #16]
 80195ba:	815a      	strh	r2, [r3, #10]
  return p;
 80195bc:	693b      	ldr	r3, [r7, #16]
}
 80195be:	4618      	mov	r0, r3
 80195c0:	3718      	adds	r7, #24
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}
 80195c6:	bf00      	nop
 80195c8:	08023304 	.word	0x08023304
 80195cc:	080233bc 	.word	0x080233bc
 80195d0:	08023358 	.word	0x08023358
 80195d4:	080233e0 	.word	0x080233e0
 80195d8:	08023400 	.word	0x08023400

080195dc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b082      	sub	sp, #8
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	6078      	str	r0, [r7, #4]
 80195e4:	460b      	mov	r3, r1
 80195e6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d106      	bne.n	80195fc <tcp_write_checks+0x20>
 80195ee:	4b37      	ldr	r3, [pc, #220]	@ (80196cc <tcp_write_checks+0xf0>)
 80195f0:	f240 1233 	movw	r2, #307	@ 0x133
 80195f4:	4936      	ldr	r1, [pc, #216]	@ (80196d0 <tcp_write_checks+0xf4>)
 80195f6:	4837      	ldr	r0, [pc, #220]	@ (80196d4 <tcp_write_checks+0xf8>)
 80195f8:	f006 fd24 	bl	8020044 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	7d1b      	ldrb	r3, [r3, #20]
 8019600:	2b04      	cmp	r3, #4
 8019602:	d00e      	beq.n	8019622 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019608:	2b07      	cmp	r3, #7
 801960a:	d00a      	beq.n	8019622 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019610:	2b02      	cmp	r3, #2
 8019612:	d006      	beq.n	8019622 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019618:	2b03      	cmp	r3, #3
 801961a:	d002      	beq.n	8019622 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801961c:	f06f 030a 	mvn.w	r3, #10
 8019620:	e050      	b.n	80196c4 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 8019622:	887b      	ldrh	r3, [r7, #2]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d101      	bne.n	801962c <tcp_write_checks+0x50>
    return ERR_OK;
 8019628:	2300      	movs	r3, #0
 801962a:	e04b      	b.n	80196c4 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019632:	887a      	ldrh	r2, [r7, #2]
 8019634:	429a      	cmp	r2, r3
 8019636:	d909      	bls.n	801964c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	8b5b      	ldrh	r3, [r3, #26]
 801963c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019640:	b29a      	uxth	r2, r3
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801964a:	e03b      	b.n	80196c4 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019652:	2b08      	cmp	r3, #8
 8019654:	d911      	bls.n	801967a <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8019656:	4b20      	ldr	r3, [pc, #128]	@ (80196d8 <tcp_write_checks+0xfc>)
 8019658:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801965c:	3301      	adds	r3, #1
 801965e:	b29a      	uxth	r2, r3
 8019660:	4b1d      	ldr	r3, [pc, #116]	@ (80196d8 <tcp_write_checks+0xfc>)
 8019662:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	8b5b      	ldrh	r3, [r3, #26]
 801966a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801966e:	b29a      	uxth	r2, r3
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019674:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019678:	e024      	b.n	80196c4 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019680:	2b00      	cmp	r3, #0
 8019682:	d00f      	beq.n	80196a4 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019688:	2b00      	cmp	r3, #0
 801968a:	d11a      	bne.n	80196c2 <tcp_write_checks+0xe6>
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019690:	2b00      	cmp	r3, #0
 8019692:	d116      	bne.n	80196c2 <tcp_write_checks+0xe6>
 8019694:	4b0d      	ldr	r3, [pc, #52]	@ (80196cc <tcp_write_checks+0xf0>)
 8019696:	f240 1255 	movw	r2, #341	@ 0x155
 801969a:	4910      	ldr	r1, [pc, #64]	@ (80196dc <tcp_write_checks+0x100>)
 801969c:	480d      	ldr	r0, [pc, #52]	@ (80196d4 <tcp_write_checks+0xf8>)
 801969e:	f006 fcd1 	bl	8020044 <iprintf>
 80196a2:	e00e      	b.n	80196c2 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d103      	bne.n	80196b4 <tcp_write_checks+0xd8>
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d006      	beq.n	80196c2 <tcp_write_checks+0xe6>
 80196b4:	4b05      	ldr	r3, [pc, #20]	@ (80196cc <tcp_write_checks+0xf0>)
 80196b6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80196ba:	4909      	ldr	r1, [pc, #36]	@ (80196e0 <tcp_write_checks+0x104>)
 80196bc:	4805      	ldr	r0, [pc, #20]	@ (80196d4 <tcp_write_checks+0xf8>)
 80196be:	f006 fcc1 	bl	8020044 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80196c2:	2300      	movs	r3, #0
}
 80196c4:	4618      	mov	r0, r3
 80196c6:	3708      	adds	r7, #8
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	08023304 	.word	0x08023304
 80196d0:	08023414 	.word	0x08023414
 80196d4:	08023358 	.word	0x08023358
 80196d8:	2002d2b0 	.word	0x2002d2b0
 80196dc:	08023434 	.word	0x08023434
 80196e0:	08023470 	.word	0x08023470

080196e4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80196e4:	b590      	push	{r4, r7, lr}
 80196e6:	b09b      	sub	sp, #108	@ 0x6c
 80196e8:	af04      	add	r7, sp, #16
 80196ea:	60f8      	str	r0, [r7, #12]
 80196ec:	60b9      	str	r1, [r7, #8]
 80196ee:	4611      	mov	r1, r2
 80196f0:	461a      	mov	r2, r3
 80196f2:	460b      	mov	r3, r1
 80196f4:	80fb      	strh	r3, [r7, #6]
 80196f6:	4613      	mov	r3, r2
 80196f8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80196fa:	2300      	movs	r3, #0
 80196fc:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80196fe:	2300      	movs	r3, #0
 8019700:	653b      	str	r3, [r7, #80]	@ 0x50
 8019702:	2300      	movs	r3, #0
 8019704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019706:	2300      	movs	r3, #0
 8019708:	64bb      	str	r3, [r7, #72]	@ 0x48
 801970a:	2300      	movs	r3, #0
 801970c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801970e:	2300      	movs	r3, #0
 8019710:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019714:	2300      	movs	r3, #0
 8019716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801971a:	2300      	movs	r3, #0
 801971c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801971e:	2300      	movs	r3, #0
 8019720:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019722:	2300      	movs	r3, #0
 8019724:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d109      	bne.n	8019740 <tcp_write+0x5c>
 801972c:	4ba4      	ldr	r3, [pc, #656]	@ (80199c0 <tcp_write+0x2dc>)
 801972e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8019732:	49a4      	ldr	r1, [pc, #656]	@ (80199c4 <tcp_write+0x2e0>)
 8019734:	48a4      	ldr	r0, [pc, #656]	@ (80199c8 <tcp_write+0x2e4>)
 8019736:	f006 fc85 	bl	8020044 <iprintf>
 801973a:	f06f 030f 	mvn.w	r3, #15
 801973e:	e332      	b.n	8019da6 <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019740:	68fb      	ldr	r3, [r7, #12]
 8019742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019746:	085b      	lsrs	r3, r3, #1
 8019748:	b29a      	uxth	r2, r3
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801974e:	4293      	cmp	r3, r2
 8019750:	bf28      	it	cs
 8019752:	4613      	movcs	r3, r2
 8019754:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019758:	2b00      	cmp	r3, #0
 801975a:	d102      	bne.n	8019762 <tcp_write+0x7e>
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019760:	e000      	b.n	8019764 <tcp_write+0x80>
 8019762:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019764:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019766:	68bb      	ldr	r3, [r7, #8]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d109      	bne.n	8019780 <tcp_write+0x9c>
 801976c:	4b94      	ldr	r3, [pc, #592]	@ (80199c0 <tcp_write+0x2dc>)
 801976e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8019772:	4996      	ldr	r1, [pc, #600]	@ (80199cc <tcp_write+0x2e8>)
 8019774:	4894      	ldr	r0, [pc, #592]	@ (80199c8 <tcp_write+0x2e4>)
 8019776:	f006 fc65 	bl	8020044 <iprintf>
 801977a:	f06f 030f 	mvn.w	r3, #15
 801977e:	e312      	b.n	8019da6 <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019780:	88fb      	ldrh	r3, [r7, #6]
 8019782:	4619      	mov	r1, r3
 8019784:	68f8      	ldr	r0, [r7, #12]
 8019786:	f7ff ff29 	bl	80195dc <tcp_write_checks>
 801978a:	4603      	mov	r3, r0
 801978c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8019790:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8019794:	2b00      	cmp	r3, #0
 8019796:	d002      	beq.n	801979e <tcp_write+0xba>
    return err;
 8019798:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801979c:	e303      	b.n	8019da6 <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80197a4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80197a8:	2300      	movs	r3, #0
 80197aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	f000 80f6 	beq.w	80199a4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80197bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80197be:	e002      	b.n	80197c6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80197c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80197c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d1f8      	bne.n	80197c0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80197ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197d0:	7a9b      	ldrb	r3, [r3, #10]
 80197d2:	009b      	lsls	r3, r3, #2
 80197d4:	b29b      	uxth	r3, r3
 80197d6:	f003 0304 	and.w	r3, r3, #4
 80197da:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80197dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80197de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197e0:	891b      	ldrh	r3, [r3, #8]
 80197e2:	4619      	mov	r1, r3
 80197e4:	8c3b      	ldrh	r3, [r7, #32]
 80197e6:	440b      	add	r3, r1
 80197e8:	429a      	cmp	r2, r3
 80197ea:	da06      	bge.n	80197fa <tcp_write+0x116>
 80197ec:	4b74      	ldr	r3, [pc, #464]	@ (80199c0 <tcp_write+0x2dc>)
 80197ee:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80197f2:	4977      	ldr	r1, [pc, #476]	@ (80199d0 <tcp_write+0x2ec>)
 80197f4:	4874      	ldr	r0, [pc, #464]	@ (80199c8 <tcp_write+0x2e4>)
 80197f6:	f006 fc25 	bl	8020044 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80197fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197fc:	891a      	ldrh	r2, [r3, #8]
 80197fe:	8c3b      	ldrh	r3, [r7, #32]
 8019800:	4413      	add	r3, r2
 8019802:	b29b      	uxth	r3, r3
 8019804:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019806:	1ad3      	subs	r3, r2, r3
 8019808:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019810:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019812:	8a7b      	ldrh	r3, [r7, #18]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d026      	beq.n	8019866 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019818:	8a7b      	ldrh	r3, [r7, #18]
 801981a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801981c:	429a      	cmp	r2, r3
 801981e:	d206      	bcs.n	801982e <tcp_write+0x14a>
 8019820:	4b67      	ldr	r3, [pc, #412]	@ (80199c0 <tcp_write+0x2dc>)
 8019822:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8019826:	496b      	ldr	r1, [pc, #428]	@ (80199d4 <tcp_write+0x2f0>)
 8019828:	4867      	ldr	r0, [pc, #412]	@ (80199c8 <tcp_write+0x2e4>)
 801982a:	f006 fc0b 	bl	8020044 <iprintf>
      seg = last_unsent;
 801982e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019830:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019832:	8a7b      	ldrh	r3, [r7, #18]
 8019834:	88fa      	ldrh	r2, [r7, #6]
 8019836:	4293      	cmp	r3, r2
 8019838:	bf28      	it	cs
 801983a:	4613      	movcs	r3, r2
 801983c:	b29b      	uxth	r3, r3
 801983e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019840:	4293      	cmp	r3, r2
 8019842:	bf28      	it	cs
 8019844:	4613      	movcs	r3, r2
 8019846:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8019848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801984c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801984e:	4413      	add	r3, r2
 8019850:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8019854:	8a7a      	ldrh	r2, [r7, #18]
 8019856:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019858:	1ad3      	subs	r3, r2, r3
 801985a:	b29b      	uxth	r3, r3
 801985c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801985e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019860:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019862:	1ad3      	subs	r3, r2, r3
 8019864:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019866:	8a7b      	ldrh	r3, [r7, #18]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d00b      	beq.n	8019884 <tcp_write+0x1a0>
 801986c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019870:	88fb      	ldrh	r3, [r7, #6]
 8019872:	429a      	cmp	r2, r3
 8019874:	d006      	beq.n	8019884 <tcp_write+0x1a0>
 8019876:	4b52      	ldr	r3, [pc, #328]	@ (80199c0 <tcp_write+0x2dc>)
 8019878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801987c:	4956      	ldr	r1, [pc, #344]	@ (80199d8 <tcp_write+0x2f4>)
 801987e:	4852      	ldr	r0, [pc, #328]	@ (80199c8 <tcp_write+0x2e4>)
 8019880:	f006 fbe0 	bl	8020044 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019884:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019888:	88fb      	ldrh	r3, [r7, #6]
 801988a:	429a      	cmp	r2, r3
 801988c:	f080 8167 	bcs.w	8019b5e <tcp_write+0x47a>
 8019890:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019892:	2b00      	cmp	r3, #0
 8019894:	f000 8163 	beq.w	8019b5e <tcp_write+0x47a>
 8019898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801989a:	891b      	ldrh	r3, [r3, #8]
 801989c:	2b00      	cmp	r3, #0
 801989e:	f000 815e 	beq.w	8019b5e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80198a2:	88fa      	ldrh	r2, [r7, #6]
 80198a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80198a8:	1ad2      	subs	r2, r2, r3
 80198aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80198ac:	4293      	cmp	r3, r2
 80198ae:	bfa8      	it	ge
 80198b0:	4613      	movge	r3, r2
 80198b2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80198b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80198b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80198b8:	797b      	ldrb	r3, [r7, #5]
 80198ba:	f003 0301 	and.w	r3, r3, #1
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d027      	beq.n	8019912 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80198c2:	f107 0012 	add.w	r0, r7, #18
 80198c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80198c8:	8bf9      	ldrh	r1, [r7, #30]
 80198ca:	2301      	movs	r3, #1
 80198cc:	9302      	str	r3, [sp, #8]
 80198ce:	797b      	ldrb	r3, [r7, #5]
 80198d0:	9301      	str	r3, [sp, #4]
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	9300      	str	r3, [sp, #0]
 80198d6:	4603      	mov	r3, r0
 80198d8:	2000      	movs	r0, #0
 80198da:	f7ff fe05 	bl	80194e8 <tcp_pbuf_prealloc>
 80198de:	6578      	str	r0, [r7, #84]	@ 0x54
 80198e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	f000 8225 	beq.w	8019d32 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80198e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198ea:	6858      	ldr	r0, [r3, #4]
 80198ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80198f0:	68ba      	ldr	r2, [r7, #8]
 80198f2:	4413      	add	r3, r2
 80198f4:	8bfa      	ldrh	r2, [r7, #30]
 80198f6:	4619      	mov	r1, r3
 80198f8:	f006 fdcf 	bl	802049a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80198fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80198fe:	f7fb f9d1 	bl	8014ca4 <pbuf_clen>
 8019902:	4603      	mov	r3, r0
 8019904:	461a      	mov	r2, r3
 8019906:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801990a:	4413      	add	r3, r2
 801990c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019910:	e041      	b.n	8019996 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019914:	685b      	ldr	r3, [r3, #4]
 8019916:	637b      	str	r3, [r7, #52]	@ 0x34
 8019918:	e002      	b.n	8019920 <tcp_write+0x23c>
 801991a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	2b00      	cmp	r3, #0
 8019926:	d1f8      	bne.n	801991a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801992a:	7b1b      	ldrb	r3, [r3, #12]
 801992c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8019930:	2b00      	cmp	r3, #0
 8019932:	d115      	bne.n	8019960 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019936:	685b      	ldr	r3, [r3, #4]
 8019938:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801993a:	8952      	ldrh	r2, [r2, #10]
 801993c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801993e:	68ba      	ldr	r2, [r7, #8]
 8019940:	429a      	cmp	r2, r3
 8019942:	d10d      	bne.n	8019960 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019944:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019948:	2b00      	cmp	r3, #0
 801994a:	d006      	beq.n	801995a <tcp_write+0x276>
 801994c:	4b1c      	ldr	r3, [pc, #112]	@ (80199c0 <tcp_write+0x2dc>)
 801994e:	f240 2231 	movw	r2, #561	@ 0x231
 8019952:	4922      	ldr	r1, [pc, #136]	@ (80199dc <tcp_write+0x2f8>)
 8019954:	481c      	ldr	r0, [pc, #112]	@ (80199c8 <tcp_write+0x2e4>)
 8019956:	f006 fb75 	bl	8020044 <iprintf>
          extendlen = seglen;
 801995a:	8bfb      	ldrh	r3, [r7, #30]
 801995c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801995e:	e01a      	b.n	8019996 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019960:	8bfb      	ldrh	r3, [r7, #30]
 8019962:	2201      	movs	r2, #1
 8019964:	4619      	mov	r1, r3
 8019966:	2000      	movs	r0, #0
 8019968:	f7fa fe2a 	bl	80145c0 <pbuf_alloc>
 801996c:	6578      	str	r0, [r7, #84]	@ 0x54
 801996e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019970:	2b00      	cmp	r3, #0
 8019972:	f000 81e0 	beq.w	8019d36 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019976:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801997a:	68ba      	ldr	r2, [r7, #8]
 801997c:	441a      	add	r2, r3
 801997e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019980:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019982:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019984:	f7fb f98e 	bl	8014ca4 <pbuf_clen>
 8019988:	4603      	mov	r3, r0
 801998a:	461a      	mov	r2, r3
 801998c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019990:	4413      	add	r3, r2
 8019992:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019996:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801999a:	8bfb      	ldrh	r3, [r7, #30]
 801999c:	4413      	add	r3, r2
 801999e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80199a2:	e0dc      	b.n	8019b5e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	f000 80d7 	beq.w	8019b5e <tcp_write+0x47a>
 80199b0:	4b03      	ldr	r3, [pc, #12]	@ (80199c0 <tcp_write+0x2dc>)
 80199b2:	f240 224a 	movw	r2, #586	@ 0x24a
 80199b6:	490a      	ldr	r1, [pc, #40]	@ (80199e0 <tcp_write+0x2fc>)
 80199b8:	4803      	ldr	r0, [pc, #12]	@ (80199c8 <tcp_write+0x2e4>)
 80199ba:	f006 fb43 	bl	8020044 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80199be:	e0ce      	b.n	8019b5e <tcp_write+0x47a>
 80199c0:	08023304 	.word	0x08023304
 80199c4:	080234a4 	.word	0x080234a4
 80199c8:	08023358 	.word	0x08023358
 80199cc:	080234bc 	.word	0x080234bc
 80199d0:	080234f0 	.word	0x080234f0
 80199d4:	08023508 	.word	0x08023508
 80199d8:	08023528 	.word	0x08023528
 80199dc:	08023548 	.word	0x08023548
 80199e0:	08023574 	.word	0x08023574
    struct pbuf *p;
    u16_t left = len - pos;
 80199e4:	88fa      	ldrh	r2, [r7, #6]
 80199e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80199ea:	1ad3      	subs	r3, r2, r3
 80199ec:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80199ee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80199f2:	b29b      	uxth	r3, r3
 80199f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80199f6:	1ad3      	subs	r3, r2, r3
 80199f8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80199fa:	8b7a      	ldrh	r2, [r7, #26]
 80199fc:	8bbb      	ldrh	r3, [r7, #28]
 80199fe:	4293      	cmp	r3, r2
 8019a00:	bf28      	it	cs
 8019a02:	4613      	movcs	r3, r2
 8019a04:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a06:	797b      	ldrb	r3, [r7, #5]
 8019a08:	f003 0301 	and.w	r3, r3, #1
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d036      	beq.n	8019a7e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019a10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019a14:	b29a      	uxth	r2, r3
 8019a16:	8b3b      	ldrh	r3, [r7, #24]
 8019a18:	4413      	add	r3, r2
 8019a1a:	b299      	uxth	r1, r3
 8019a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	bf0c      	ite	eq
 8019a22:	2301      	moveq	r3, #1
 8019a24:	2300      	movne	r3, #0
 8019a26:	b2db      	uxtb	r3, r3
 8019a28:	f107 0012 	add.w	r0, r7, #18
 8019a2c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019a2e:	9302      	str	r3, [sp, #8]
 8019a30:	797b      	ldrb	r3, [r7, #5]
 8019a32:	9301      	str	r3, [sp, #4]
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	9300      	str	r3, [sp, #0]
 8019a38:	4603      	mov	r3, r0
 8019a3a:	2036      	movs	r0, #54	@ 0x36
 8019a3c:	f7ff fd54 	bl	80194e8 <tcp_pbuf_prealloc>
 8019a40:	6338      	str	r0, [r7, #48]	@ 0x30
 8019a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	f000 8178 	beq.w	8019d3a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a4c:	895b      	ldrh	r3, [r3, #10]
 8019a4e:	8b3a      	ldrh	r2, [r7, #24]
 8019a50:	429a      	cmp	r2, r3
 8019a52:	d906      	bls.n	8019a62 <tcp_write+0x37e>
 8019a54:	4b8c      	ldr	r3, [pc, #560]	@ (8019c88 <tcp_write+0x5a4>)
 8019a56:	f240 2266 	movw	r2, #614	@ 0x266
 8019a5a:	498c      	ldr	r1, [pc, #560]	@ (8019c8c <tcp_write+0x5a8>)
 8019a5c:	488c      	ldr	r0, [pc, #560]	@ (8019c90 <tcp_write+0x5ac>)
 8019a5e:	f006 faf1 	bl	8020044 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a64:	685a      	ldr	r2, [r3, #4]
 8019a66:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019a6a:	18d0      	adds	r0, r2, r3
 8019a6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019a70:	68ba      	ldr	r2, [r7, #8]
 8019a72:	4413      	add	r3, r2
 8019a74:	8b3a      	ldrh	r2, [r7, #24]
 8019a76:	4619      	mov	r1, r3
 8019a78:	f006 fd0f 	bl	802049a <memcpy>
 8019a7c:	e02f      	b.n	8019ade <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019a7e:	8a7b      	ldrh	r3, [r7, #18]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d006      	beq.n	8019a92 <tcp_write+0x3ae>
 8019a84:	4b80      	ldr	r3, [pc, #512]	@ (8019c88 <tcp_write+0x5a4>)
 8019a86:	f240 2271 	movw	r2, #625	@ 0x271
 8019a8a:	4982      	ldr	r1, [pc, #520]	@ (8019c94 <tcp_write+0x5b0>)
 8019a8c:	4880      	ldr	r0, [pc, #512]	@ (8019c90 <tcp_write+0x5ac>)
 8019a8e:	f006 fad9 	bl	8020044 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019a92:	8b3b      	ldrh	r3, [r7, #24]
 8019a94:	2201      	movs	r2, #1
 8019a96:	4619      	mov	r1, r3
 8019a98:	2036      	movs	r0, #54	@ 0x36
 8019a9a:	f7fa fd91 	bl	80145c0 <pbuf_alloc>
 8019a9e:	6178      	str	r0, [r7, #20]
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	f000 814b 	beq.w	8019d3e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019aa8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019aac:	68ba      	ldr	r2, [r7, #8]
 8019aae:	441a      	add	r2, r3
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019ab8:	b29b      	uxth	r3, r3
 8019aba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019abe:	4619      	mov	r1, r3
 8019ac0:	2036      	movs	r0, #54	@ 0x36
 8019ac2:	f7fa fd7d 	bl	80145c0 <pbuf_alloc>
 8019ac6:	6338      	str	r0, [r7, #48]	@ 0x30
 8019ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d103      	bne.n	8019ad6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019ace:	6978      	ldr	r0, [r7, #20]
 8019ad0:	f7fb f85a 	bl	8014b88 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019ad4:	e136      	b.n	8019d44 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019ad6:	6979      	ldr	r1, [r7, #20]
 8019ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ada:	f7fb f923 	bl	8014d24 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019ade:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ae0:	f7fb f8e0 	bl	8014ca4 <pbuf_clen>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	461a      	mov	r2, r3
 8019ae8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019aec:	4413      	add	r3, r2
 8019aee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019af2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019af6:	2b09      	cmp	r3, #9
 8019af8:	d903      	bls.n	8019b02 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019afa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019afc:	f7fb f844 	bl	8014b88 <pbuf_free>
      goto memerr;
 8019b00:	e120      	b.n	8019d44 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019b06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019b0a:	441a      	add	r2, r3
 8019b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b10:	9300      	str	r3, [sp, #0]
 8019b12:	4613      	mov	r3, r2
 8019b14:	2200      	movs	r2, #0
 8019b16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019b18:	68f8      	ldr	r0, [r7, #12]
 8019b1a:	f7ff fc3f 	bl	801939c <tcp_create_segment>
 8019b1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8019b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	f000 810d 	beq.w	8019d42 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d102      	bne.n	8019b34 <tcp_write+0x450>
      queue = seg;
 8019b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8019b32:	e00c      	b.n	8019b4e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d106      	bne.n	8019b48 <tcp_write+0x464>
 8019b3a:	4b53      	ldr	r3, [pc, #332]	@ (8019c88 <tcp_write+0x5a4>)
 8019b3c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019b40:	4955      	ldr	r1, [pc, #340]	@ (8019c98 <tcp_write+0x5b4>)
 8019b42:	4853      	ldr	r0, [pc, #332]	@ (8019c90 <tcp_write+0x5ac>)
 8019b44:	f006 fa7e 	bl	8020044 <iprintf>
      prev_seg->next = seg;
 8019b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019b4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019b4c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b50:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019b52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019b56:	8b3b      	ldrh	r3, [r7, #24]
 8019b58:	4413      	add	r3, r2
 8019b5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8019b5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019b62:	88fb      	ldrh	r3, [r7, #6]
 8019b64:	429a      	cmp	r2, r3
 8019b66:	f4ff af3d 	bcc.w	80199e4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019b6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d02c      	beq.n	8019bca <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b72:	685b      	ldr	r3, [r3, #4]
 8019b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019b76:	e01e      	b.n	8019bb6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b7a:	891a      	ldrh	r2, [r3, #8]
 8019b7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019b7e:	4413      	add	r3, r2
 8019b80:	b29a      	uxth	r2, r3
 8019b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b84:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d110      	bne.n	8019bb0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b90:	685b      	ldr	r3, [r3, #4]
 8019b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019b94:	8952      	ldrh	r2, [r2, #10]
 8019b96:	4413      	add	r3, r2
 8019b98:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019b9a:	68b9      	ldr	r1, [r7, #8]
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	f006 fc7c 	bl	802049a <memcpy>
        p->len += oversize_used;
 8019ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ba4:	895a      	ldrh	r2, [r3, #10]
 8019ba6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019ba8:	4413      	add	r3, r2
 8019baa:	b29a      	uxth	r2, r3
 8019bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bae:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d1dd      	bne.n	8019b78 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bbe:	891a      	ldrh	r2, [r3, #8]
 8019bc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019bc2:	4413      	add	r3, r2
 8019bc4:	b29a      	uxth	r2, r3
 8019bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bc8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019bca:	8a7a      	ldrh	r2, [r7, #18]
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d018      	beq.n	8019c0a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d106      	bne.n	8019bec <tcp_write+0x508>
 8019bde:	4b2a      	ldr	r3, [pc, #168]	@ (8019c88 <tcp_write+0x5a4>)
 8019be0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8019be4:	492d      	ldr	r1, [pc, #180]	@ (8019c9c <tcp_write+0x5b8>)
 8019be6:	482a      	ldr	r0, [pc, #168]	@ (8019c90 <tcp_write+0x5ac>)
 8019be8:	f006 fa2c 	bl	8020044 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bee:	685b      	ldr	r3, [r3, #4]
 8019bf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f7fb f896 	bl	8014d24 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bfa:	891a      	ldrh	r2, [r3, #8]
 8019bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bfe:	891b      	ldrh	r3, [r3, #8]
 8019c00:	4413      	add	r3, r2
 8019c02:	b29a      	uxth	r2, r3
 8019c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c06:	811a      	strh	r2, [r3, #8]
 8019c08:	e037      	b.n	8019c7a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8019c0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d034      	beq.n	8019c7a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d003      	beq.n	8019c1e <tcp_write+0x53a>
 8019c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c18:	685b      	ldr	r3, [r3, #4]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d106      	bne.n	8019c2c <tcp_write+0x548>
 8019c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8019c88 <tcp_write+0x5a4>)
 8019c20:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8019c24:	491e      	ldr	r1, [pc, #120]	@ (8019ca0 <tcp_write+0x5bc>)
 8019c26:	481a      	ldr	r0, [pc, #104]	@ (8019c90 <tcp_write+0x5ac>)
 8019c28:	f006 fa0c 	bl	8020044 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c2e:	685b      	ldr	r3, [r3, #4]
 8019c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c32:	e009      	b.n	8019c48 <tcp_write+0x564>
      p->tot_len += extendlen;
 8019c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c36:	891a      	ldrh	r2, [r3, #8]
 8019c38:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019c3a:	4413      	add	r3, r2
 8019c3c:	b29a      	uxth	r2, r3
 8019c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c40:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d1f1      	bne.n	8019c34 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c52:	891a      	ldrh	r2, [r3, #8]
 8019c54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019c56:	4413      	add	r3, r2
 8019c58:	b29a      	uxth	r2, r3
 8019c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c5c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c60:	895a      	ldrh	r2, [r3, #10]
 8019c62:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019c64:	4413      	add	r3, r2
 8019c66:	b29a      	uxth	r2, r3
 8019c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c6a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c6e:	891a      	ldrh	r2, [r3, #8]
 8019c70:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019c72:	4413      	add	r3, r2
 8019c74:	b29a      	uxth	r2, r3
 8019c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c78:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d111      	bne.n	8019ca4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019c84:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019c86:	e010      	b.n	8019caa <tcp_write+0x5c6>
 8019c88:	08023304 	.word	0x08023304
 8019c8c:	080235a4 	.word	0x080235a4
 8019c90:	08023358 	.word	0x08023358
 8019c94:	080235e4 	.word	0x080235e4
 8019c98:	080235f4 	.word	0x080235f4
 8019c9c:	08023608 	.word	0x08023608
 8019ca0:	08023640 	.word	0x08023640
  } else {
    last_unsent->next = queue;
 8019ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019ca8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019cae:	88fb      	ldrh	r3, [r7, #6]
 8019cb0:	441a      	add	r2, r3
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019cbc:	88fb      	ldrh	r3, [r7, #6]
 8019cbe:	1ad3      	subs	r3, r2, r3
 8019cc0:	b29a      	uxth	r2, r3
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019cce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d00e      	beq.n	8019cfa <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d10a      	bne.n	8019cfa <tcp_write+0x616>
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d106      	bne.n	8019cfa <tcp_write+0x616>
 8019cec:	4b30      	ldr	r3, [pc, #192]	@ (8019db0 <tcp_write+0x6cc>)
 8019cee:	f240 3212 	movw	r2, #786	@ 0x312
 8019cf2:	4930      	ldr	r1, [pc, #192]	@ (8019db4 <tcp_write+0x6d0>)
 8019cf4:	4830      	ldr	r0, [pc, #192]	@ (8019db8 <tcp_write+0x6d4>)
 8019cf6:	f006 f9a5 	bl	8020044 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d016      	beq.n	8019d2e <tcp_write+0x64a>
 8019d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d02:	68db      	ldr	r3, [r3, #12]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d012      	beq.n	8019d2e <tcp_write+0x64a>
 8019d08:	797b      	ldrb	r3, [r7, #5]
 8019d0a:	f003 0302 	and.w	r3, r3, #2
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d10d      	bne.n	8019d2e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d14:	68db      	ldr	r3, [r3, #12]
 8019d16:	899b      	ldrh	r3, [r3, #12]
 8019d18:	b29c      	uxth	r4, r3
 8019d1a:	2008      	movs	r0, #8
 8019d1c:	f7f9 fa76 	bl	801320c <lwip_htons>
 8019d20:	4603      	mov	r3, r0
 8019d22:	461a      	mov	r2, r3
 8019d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d26:	68db      	ldr	r3, [r3, #12]
 8019d28:	4322      	orrs	r2, r4
 8019d2a:	b292      	uxth	r2, r2
 8019d2c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019d2e:	2300      	movs	r3, #0
 8019d30:	e039      	b.n	8019da6 <tcp_write+0x6c2>
          goto memerr;
 8019d32:	bf00      	nop
 8019d34:	e006      	b.n	8019d44 <tcp_write+0x660>
            goto memerr;
 8019d36:	bf00      	nop
 8019d38:	e004      	b.n	8019d44 <tcp_write+0x660>
        goto memerr;
 8019d3a:	bf00      	nop
 8019d3c:	e002      	b.n	8019d44 <tcp_write+0x660>
        goto memerr;
 8019d3e:	bf00      	nop
 8019d40:	e000      	b.n	8019d44 <tcp_write+0x660>
      goto memerr;
 8019d42:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	8b5b      	ldrh	r3, [r3, #26]
 8019d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d4c:	b29a      	uxth	r2, r3
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8019d52:	4b1a      	ldr	r3, [pc, #104]	@ (8019dbc <tcp_write+0x6d8>)
 8019d54:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019d58:	3301      	adds	r3, #1
 8019d5a:	b29a      	uxth	r2, r3
 8019d5c:	4b17      	ldr	r3, [pc, #92]	@ (8019dbc <tcp_write+0x6d8>)
 8019d5e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 8019d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d002      	beq.n	8019d6e <tcp_write+0x68a>
    pbuf_free(concat_p);
 8019d68:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019d6a:	f7fa ff0d 	bl	8014b88 <pbuf_free>
  }
  if (queue != NULL) {
 8019d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d002      	beq.n	8019d7a <tcp_write+0x696>
    tcp_segs_free(queue);
 8019d74:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019d76:	f7fc fac5 	bl	8016304 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d00e      	beq.n	8019da2 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d10a      	bne.n	8019da2 <tcp_write+0x6be>
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d106      	bne.n	8019da2 <tcp_write+0x6be>
 8019d94:	4b06      	ldr	r3, [pc, #24]	@ (8019db0 <tcp_write+0x6cc>)
 8019d96:	f240 3227 	movw	r2, #807	@ 0x327
 8019d9a:	4906      	ldr	r1, [pc, #24]	@ (8019db4 <tcp_write+0x6d0>)
 8019d9c:	4806      	ldr	r0, [pc, #24]	@ (8019db8 <tcp_write+0x6d4>)
 8019d9e:	f006 f951 	bl	8020044 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019da6:	4618      	mov	r0, r3
 8019da8:	375c      	adds	r7, #92	@ 0x5c
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd90      	pop	{r4, r7, pc}
 8019dae:	bf00      	nop
 8019db0:	08023304 	.word	0x08023304
 8019db4:	08023678 	.word	0x08023678
 8019db8:	08023358 	.word	0x08023358
 8019dbc:	2002d2b0 	.word	0x2002d2b0

08019dc0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019dc0:	b590      	push	{r4, r7, lr}
 8019dc2:	b08b      	sub	sp, #44	@ 0x2c
 8019dc4:	af02      	add	r7, sp, #8
 8019dc6:	6078      	str	r0, [r7, #4]
 8019dc8:	460b      	mov	r3, r1
 8019dca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019dcc:	2300      	movs	r3, #0
 8019dce:	61fb      	str	r3, [r7, #28]
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d106      	bne.n	8019dec <tcp_split_unsent_seg+0x2c>
 8019dde:	4b99      	ldr	r3, [pc, #612]	@ (801a044 <tcp_split_unsent_seg+0x284>)
 8019de0:	f240 324b 	movw	r2, #843	@ 0x34b
 8019de4:	4998      	ldr	r1, [pc, #608]	@ (801a048 <tcp_split_unsent_seg+0x288>)
 8019de6:	4899      	ldr	r0, [pc, #612]	@ (801a04c <tcp_split_unsent_seg+0x28c>)
 8019de8:	f006 f92c 	bl	8020044 <iprintf>

  useg = pcb->unsent;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019df0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d102      	bne.n	8019dfe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019df8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019dfc:	e11e      	b.n	801a03c <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 8019dfe:	887b      	ldrh	r3, [r7, #2]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d109      	bne.n	8019e18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019e04:	4b8f      	ldr	r3, [pc, #572]	@ (801a044 <tcp_split_unsent_seg+0x284>)
 8019e06:	f240 3253 	movw	r2, #851	@ 0x353
 8019e0a:	4991      	ldr	r1, [pc, #580]	@ (801a050 <tcp_split_unsent_seg+0x290>)
 8019e0c:	488f      	ldr	r0, [pc, #572]	@ (801a04c <tcp_split_unsent_seg+0x28c>)
 8019e0e:	f006 f919 	bl	8020044 <iprintf>
    return ERR_VAL;
 8019e12:	f06f 0305 	mvn.w	r3, #5
 8019e16:	e111      	b.n	801a03c <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 8019e18:	697b      	ldr	r3, [r7, #20]
 8019e1a:	891b      	ldrh	r3, [r3, #8]
 8019e1c:	887a      	ldrh	r2, [r7, #2]
 8019e1e:	429a      	cmp	r2, r3
 8019e20:	d301      	bcc.n	8019e26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019e22:	2300      	movs	r3, #0
 8019e24:	e10a      	b.n	801a03c <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019e2a:	887a      	ldrh	r2, [r7, #2]
 8019e2c:	429a      	cmp	r2, r3
 8019e2e:	d906      	bls.n	8019e3e <tcp_split_unsent_seg+0x7e>
 8019e30:	4b84      	ldr	r3, [pc, #528]	@ (801a044 <tcp_split_unsent_seg+0x284>)
 8019e32:	f240 325b 	movw	r2, #859	@ 0x35b
 8019e36:	4987      	ldr	r1, [pc, #540]	@ (801a054 <tcp_split_unsent_seg+0x294>)
 8019e38:	4884      	ldr	r0, [pc, #528]	@ (801a04c <tcp_split_unsent_seg+0x28c>)
 8019e3a:	f006 f903 	bl	8020044 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	891b      	ldrh	r3, [r3, #8]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d106      	bne.n	8019e54 <tcp_split_unsent_seg+0x94>
 8019e46:	4b7f      	ldr	r3, [pc, #508]	@ (801a044 <tcp_split_unsent_seg+0x284>)
 8019e48:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019e4c:	4982      	ldr	r1, [pc, #520]	@ (801a058 <tcp_split_unsent_seg+0x298>)
 8019e4e:	487f      	ldr	r0, [pc, #508]	@ (801a04c <tcp_split_unsent_seg+0x28c>)
 8019e50:	f006 f8f8 	bl	8020044 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019e54:	697b      	ldr	r3, [r7, #20]
 8019e56:	7a9b      	ldrb	r3, [r3, #10]
 8019e58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019e5a:	7bfb      	ldrb	r3, [r7, #15]
 8019e5c:	009b      	lsls	r3, r3, #2
 8019e5e:	b2db      	uxtb	r3, r3
 8019e60:	f003 0304 	and.w	r3, r3, #4
 8019e64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019e66:	697b      	ldr	r3, [r7, #20]
 8019e68:	891a      	ldrh	r2, [r3, #8]
 8019e6a:	887b      	ldrh	r3, [r7, #2]
 8019e6c:	1ad3      	subs	r3, r2, r3
 8019e6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019e70:	7bbb      	ldrb	r3, [r7, #14]
 8019e72:	b29a      	uxth	r2, r3
 8019e74:	89bb      	ldrh	r3, [r7, #12]
 8019e76:	4413      	add	r3, r2
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019e7e:	4619      	mov	r1, r3
 8019e80:	2036      	movs	r0, #54	@ 0x36
 8019e82:	f7fa fb9d 	bl	80145c0 <pbuf_alloc>
 8019e86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019e88:	693b      	ldr	r3, [r7, #16]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	f000 80b7 	beq.w	8019ffe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019e90:	697b      	ldr	r3, [r7, #20]
 8019e92:	685b      	ldr	r3, [r3, #4]
 8019e94:	891a      	ldrh	r2, [r3, #8]
 8019e96:	697b      	ldr	r3, [r7, #20]
 8019e98:	891b      	ldrh	r3, [r3, #8]
 8019e9a:	1ad3      	subs	r3, r2, r3
 8019e9c:	b29a      	uxth	r2, r3
 8019e9e:	887b      	ldrh	r3, [r7, #2]
 8019ea0:	4413      	add	r3, r2
 8019ea2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019ea4:	697b      	ldr	r3, [r7, #20]
 8019ea6:	6858      	ldr	r0, [r3, #4]
 8019ea8:	693b      	ldr	r3, [r7, #16]
 8019eaa:	685a      	ldr	r2, [r3, #4]
 8019eac:	7bbb      	ldrb	r3, [r7, #14]
 8019eae:	18d1      	adds	r1, r2, r3
 8019eb0:	897b      	ldrh	r3, [r7, #10]
 8019eb2:	89ba      	ldrh	r2, [r7, #12]
 8019eb4:	f7fb f86e 	bl	8014f94 <pbuf_copy_partial>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	461a      	mov	r2, r3
 8019ebc:	89bb      	ldrh	r3, [r7, #12]
 8019ebe:	4293      	cmp	r3, r2
 8019ec0:	f040 809f 	bne.w	801a002 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019ec4:	697b      	ldr	r3, [r7, #20]
 8019ec6:	68db      	ldr	r3, [r3, #12]
 8019ec8:	899b      	ldrh	r3, [r3, #12]
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7f9 f99d 	bl	801320c <lwip_htons>
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	b2db      	uxtb	r3, r3
 8019ed6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019eda:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019edc:	2300      	movs	r3, #0
 8019ede:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019ee0:	7efb      	ldrb	r3, [r7, #27]
 8019ee2:	f003 0308 	and.w	r3, r3, #8
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d007      	beq.n	8019efa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019eea:	7efb      	ldrb	r3, [r7, #27]
 8019eec:	f023 0308 	bic.w	r3, r3, #8
 8019ef0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019ef2:	7ebb      	ldrb	r3, [r7, #26]
 8019ef4:	f043 0308 	orr.w	r3, r3, #8
 8019ef8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8019efa:	7efb      	ldrb	r3, [r7, #27]
 8019efc:	f003 0301 	and.w	r3, r3, #1
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d007      	beq.n	8019f14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019f04:	7efb      	ldrb	r3, [r7, #27]
 8019f06:	f023 0301 	bic.w	r3, r3, #1
 8019f0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019f0c:	7ebb      	ldrb	r3, [r7, #26]
 8019f0e:	f043 0301 	orr.w	r3, r3, #1
 8019f12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019f14:	697b      	ldr	r3, [r7, #20]
 8019f16:	68db      	ldr	r3, [r3, #12]
 8019f18:	685b      	ldr	r3, [r3, #4]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f7f9 f98c 	bl	8013238 <lwip_htonl>
 8019f20:	4602      	mov	r2, r0
 8019f22:	887b      	ldrh	r3, [r7, #2]
 8019f24:	18d1      	adds	r1, r2, r3
 8019f26:	7eba      	ldrb	r2, [r7, #26]
 8019f28:	7bfb      	ldrb	r3, [r7, #15]
 8019f2a:	9300      	str	r3, [sp, #0]
 8019f2c:	460b      	mov	r3, r1
 8019f2e:	6939      	ldr	r1, [r7, #16]
 8019f30:	6878      	ldr	r0, [r7, #4]
 8019f32:	f7ff fa33 	bl	801939c <tcp_create_segment>
 8019f36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019f38:	69fb      	ldr	r3, [r7, #28]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d063      	beq.n	801a006 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8019f3e:	697b      	ldr	r3, [r7, #20]
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	4618      	mov	r0, r3
 8019f44:	f7fa feae 	bl	8014ca4 <pbuf_clen>
 8019f48:	4603      	mov	r3, r0
 8019f4a:	461a      	mov	r2, r3
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f52:	1a9b      	subs	r3, r3, r2
 8019f54:	b29a      	uxth	r2, r3
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019f5c:	697b      	ldr	r3, [r7, #20]
 8019f5e:	6858      	ldr	r0, [r3, #4]
 8019f60:	697b      	ldr	r3, [r7, #20]
 8019f62:	685b      	ldr	r3, [r3, #4]
 8019f64:	891a      	ldrh	r2, [r3, #8]
 8019f66:	89bb      	ldrh	r3, [r7, #12]
 8019f68:	1ad3      	subs	r3, r2, r3
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	4619      	mov	r1, r3
 8019f6e:	f7fa fc85 	bl	801487c <pbuf_realloc>
  useg->len -= remainder;
 8019f72:	697b      	ldr	r3, [r7, #20]
 8019f74:	891a      	ldrh	r2, [r3, #8]
 8019f76:	89bb      	ldrh	r3, [r7, #12]
 8019f78:	1ad3      	subs	r3, r2, r3
 8019f7a:	b29a      	uxth	r2, r3
 8019f7c:	697b      	ldr	r3, [r7, #20]
 8019f7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	68db      	ldr	r3, [r3, #12]
 8019f84:	899b      	ldrh	r3, [r3, #12]
 8019f86:	b29c      	uxth	r4, r3
 8019f88:	7efb      	ldrb	r3, [r7, #27]
 8019f8a:	b29b      	uxth	r3, r3
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	f7f9 f93d 	bl	801320c <lwip_htons>
 8019f92:	4603      	mov	r3, r0
 8019f94:	461a      	mov	r2, r3
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	68db      	ldr	r3, [r3, #12]
 8019f9a:	4322      	orrs	r2, r4
 8019f9c:	b292      	uxth	r2, r2
 8019f9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019fa0:	697b      	ldr	r3, [r7, #20]
 8019fa2:	685b      	ldr	r3, [r3, #4]
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f7fa fe7d 	bl	8014ca4 <pbuf_clen>
 8019faa:	4603      	mov	r3, r0
 8019fac:	461a      	mov	r2, r3
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019fb4:	4413      	add	r3, r2
 8019fb6:	b29a      	uxth	r2, r3
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019fbe:	69fb      	ldr	r3, [r7, #28]
 8019fc0:	685b      	ldr	r3, [r3, #4]
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f7fa fe6e 	bl	8014ca4 <pbuf_clen>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	461a      	mov	r2, r3
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019fd2:	4413      	add	r3, r2
 8019fd4:	b29a      	uxth	r2, r3
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019fdc:	697b      	ldr	r3, [r7, #20]
 8019fde:	681a      	ldr	r2, [r3, #0]
 8019fe0:	69fb      	ldr	r3, [r7, #28]
 8019fe2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019fe4:	697b      	ldr	r3, [r7, #20]
 8019fe6:	69fa      	ldr	r2, [r7, #28]
 8019fe8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8019fea:	69fb      	ldr	r3, [r7, #28]
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d103      	bne.n	8019ffa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	2200      	movs	r2, #0
 8019ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	e01e      	b.n	801a03c <tcp_split_unsent_seg+0x27c>
    goto memerr;
 8019ffe:	bf00      	nop
 801a000:	e002      	b.n	801a008 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a002:	bf00      	nop
 801a004:	e000      	b.n	801a008 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a006:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 801a008:	4b14      	ldr	r3, [pc, #80]	@ (801a05c <tcp_split_unsent_seg+0x29c>)
 801a00a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a00e:	3301      	adds	r3, #1
 801a010:	b29a      	uxth	r2, r3
 801a012:	4b12      	ldr	r3, [pc, #72]	@ (801a05c <tcp_split_unsent_seg+0x29c>)
 801a014:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a018:	69fb      	ldr	r3, [r7, #28]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d006      	beq.n	801a02c <tcp_split_unsent_seg+0x26c>
 801a01e:	4b09      	ldr	r3, [pc, #36]	@ (801a044 <tcp_split_unsent_seg+0x284>)
 801a020:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801a024:	490e      	ldr	r1, [pc, #56]	@ (801a060 <tcp_split_unsent_seg+0x2a0>)
 801a026:	4809      	ldr	r0, [pc, #36]	@ (801a04c <tcp_split_unsent_seg+0x28c>)
 801a028:	f006 f80c 	bl	8020044 <iprintf>
  if (p != NULL) {
 801a02c:	693b      	ldr	r3, [r7, #16]
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d002      	beq.n	801a038 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 801a032:	6938      	ldr	r0, [r7, #16]
 801a034:	f7fa fda8 	bl	8014b88 <pbuf_free>
  }

  return ERR_MEM;
 801a038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a03c:	4618      	mov	r0, r3
 801a03e:	3724      	adds	r7, #36	@ 0x24
 801a040:	46bd      	mov	sp, r7
 801a042:	bd90      	pop	{r4, r7, pc}
 801a044:	08023304 	.word	0x08023304
 801a048:	08023698 	.word	0x08023698
 801a04c:	08023358 	.word	0x08023358
 801a050:	080236bc 	.word	0x080236bc
 801a054:	080236e0 	.word	0x080236e0
 801a058:	080236f0 	.word	0x080236f0
 801a05c:	2002d2b0 	.word	0x2002d2b0
 801a060:	08023700 	.word	0x08023700

0801a064 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a064:	b590      	push	{r4, r7, lr}
 801a066:	b085      	sub	sp, #20
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d106      	bne.n	801a080 <tcp_send_fin+0x1c>
 801a072:	4b21      	ldr	r3, [pc, #132]	@ (801a0f8 <tcp_send_fin+0x94>)
 801a074:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a078:	4920      	ldr	r1, [pc, #128]	@ (801a0fc <tcp_send_fin+0x98>)
 801a07a:	4821      	ldr	r0, [pc, #132]	@ (801a100 <tcp_send_fin+0x9c>)
 801a07c:	f005 ffe2 	bl	8020044 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a084:	2b00      	cmp	r3, #0
 801a086:	d02e      	beq.n	801a0e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a08c:	60fb      	str	r3, [r7, #12]
 801a08e:	e002      	b.n	801a096 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d1f8      	bne.n	801a090 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	68db      	ldr	r3, [r3, #12]
 801a0a2:	899b      	ldrh	r3, [r3, #12]
 801a0a4:	b29b      	uxth	r3, r3
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7f9 f8b0 	bl	801320c <lwip_htons>
 801a0ac:	4603      	mov	r3, r0
 801a0ae:	b2db      	uxtb	r3, r3
 801a0b0:	f003 0307 	and.w	r3, r3, #7
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d116      	bne.n	801a0e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	68db      	ldr	r3, [r3, #12]
 801a0bc:	899b      	ldrh	r3, [r3, #12]
 801a0be:	b29c      	uxth	r4, r3
 801a0c0:	2001      	movs	r0, #1
 801a0c2:	f7f9 f8a3 	bl	801320c <lwip_htons>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	461a      	mov	r2, r3
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	68db      	ldr	r3, [r3, #12]
 801a0ce:	4322      	orrs	r2, r4
 801a0d0:	b292      	uxth	r2, r2
 801a0d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	8b5b      	ldrh	r3, [r3, #26]
 801a0d8:	f043 0320 	orr.w	r3, r3, #32
 801a0dc:	b29a      	uxth	r2, r3
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	e004      	b.n	801a0f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a0e6:	2101      	movs	r1, #1
 801a0e8:	6878      	ldr	r0, [r7, #4]
 801a0ea:	f000 f80b 	bl	801a104 <tcp_enqueue_flags>
 801a0ee:	4603      	mov	r3, r0
}
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	3714      	adds	r7, #20
 801a0f4:	46bd      	mov	sp, r7
 801a0f6:	bd90      	pop	{r4, r7, pc}
 801a0f8:	08023304 	.word	0x08023304
 801a0fc:	0802370c 	.word	0x0802370c
 801a100:	08023358 	.word	0x08023358

0801a104 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b08a      	sub	sp, #40	@ 0x28
 801a108:	af02      	add	r7, sp, #8
 801a10a:	6078      	str	r0, [r7, #4]
 801a10c:	460b      	mov	r3, r1
 801a10e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a110:	2300      	movs	r3, #0
 801a112:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a114:	2300      	movs	r3, #0
 801a116:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a118:	78fb      	ldrb	r3, [r7, #3]
 801a11a:	f003 0303 	and.w	r3, r3, #3
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d106      	bne.n	801a130 <tcp_enqueue_flags+0x2c>
 801a122:	4b6f      	ldr	r3, [pc, #444]	@ (801a2e0 <tcp_enqueue_flags+0x1dc>)
 801a124:	f240 4211 	movw	r2, #1041	@ 0x411
 801a128:	496e      	ldr	r1, [pc, #440]	@ (801a2e4 <tcp_enqueue_flags+0x1e0>)
 801a12a:	486f      	ldr	r0, [pc, #444]	@ (801a2e8 <tcp_enqueue_flags+0x1e4>)
 801a12c:	f005 ff8a 	bl	8020044 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d106      	bne.n	801a144 <tcp_enqueue_flags+0x40>
 801a136:	4b6a      	ldr	r3, [pc, #424]	@ (801a2e0 <tcp_enqueue_flags+0x1dc>)
 801a138:	f240 4213 	movw	r2, #1043	@ 0x413
 801a13c:	496b      	ldr	r1, [pc, #428]	@ (801a2ec <tcp_enqueue_flags+0x1e8>)
 801a13e:	486a      	ldr	r0, [pc, #424]	@ (801a2e8 <tcp_enqueue_flags+0x1e4>)
 801a140:	f005 ff80 	bl	8020044 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a144:	78fb      	ldrb	r3, [r7, #3]
 801a146:	f003 0302 	and.w	r3, r3, #2
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d001      	beq.n	801a152 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a14e:	2301      	movs	r3, #1
 801a150:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a152:	7ffb      	ldrb	r3, [r7, #31]
 801a154:	009b      	lsls	r3, r3, #2
 801a156:	b2db      	uxtb	r3, r3
 801a158:	f003 0304 	and.w	r3, r3, #4
 801a15c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a15e:	7dfb      	ldrb	r3, [r7, #23]
 801a160:	b29b      	uxth	r3, r3
 801a162:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a166:	4619      	mov	r1, r3
 801a168:	2036      	movs	r0, #54	@ 0x36
 801a16a:	f7fa fa29 	bl	80145c0 <pbuf_alloc>
 801a16e:	6138      	str	r0, [r7, #16]
 801a170:	693b      	ldr	r3, [r7, #16]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d111      	bne.n	801a19a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	8b5b      	ldrh	r3, [r3, #26]
 801a17a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a17e:	b29a      	uxth	r2, r3
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a184:	4b5a      	ldr	r3, [pc, #360]	@ (801a2f0 <tcp_enqueue_flags+0x1ec>)
 801a186:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a18a:	3301      	adds	r3, #1
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	4b58      	ldr	r3, [pc, #352]	@ (801a2f0 <tcp_enqueue_flags+0x1ec>)
 801a190:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a198:	e09d      	b.n	801a2d6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a19a:	693b      	ldr	r3, [r7, #16]
 801a19c:	895a      	ldrh	r2, [r3, #10]
 801a19e:	7dfb      	ldrb	r3, [r7, #23]
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	429a      	cmp	r2, r3
 801a1a4:	d206      	bcs.n	801a1b4 <tcp_enqueue_flags+0xb0>
 801a1a6:	4b4e      	ldr	r3, [pc, #312]	@ (801a2e0 <tcp_enqueue_flags+0x1dc>)
 801a1a8:	f240 4239 	movw	r2, #1081	@ 0x439
 801a1ac:	4951      	ldr	r1, [pc, #324]	@ (801a2f4 <tcp_enqueue_flags+0x1f0>)
 801a1ae:	484e      	ldr	r0, [pc, #312]	@ (801a2e8 <tcp_enqueue_flags+0x1e4>)
 801a1b0:	f005 ff48 	bl	8020044 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801a1b8:	78fa      	ldrb	r2, [r7, #3]
 801a1ba:	7ffb      	ldrb	r3, [r7, #31]
 801a1bc:	9300      	str	r3, [sp, #0]
 801a1be:	460b      	mov	r3, r1
 801a1c0:	6939      	ldr	r1, [r7, #16]
 801a1c2:	6878      	ldr	r0, [r7, #4]
 801a1c4:	f7ff f8ea 	bl	801939c <tcp_create_segment>
 801a1c8:	60f8      	str	r0, [r7, #12]
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d111      	bne.n	801a1f4 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	8b5b      	ldrh	r3, [r3, #26]
 801a1d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a1d8:	b29a      	uxth	r2, r3
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a1de:	4b44      	ldr	r3, [pc, #272]	@ (801a2f0 <tcp_enqueue_flags+0x1ec>)
 801a1e0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a1e4:	3301      	adds	r3, #1
 801a1e6:	b29a      	uxth	r2, r3
 801a1e8:	4b41      	ldr	r3, [pc, #260]	@ (801a2f0 <tcp_enqueue_flags+0x1ec>)
 801a1ea:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a1ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1f2:	e070      	b.n	801a2d6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	68db      	ldr	r3, [r3, #12]
 801a1f8:	f003 0303 	and.w	r3, r3, #3
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d006      	beq.n	801a20e <tcp_enqueue_flags+0x10a>
 801a200:	4b37      	ldr	r3, [pc, #220]	@ (801a2e0 <tcp_enqueue_flags+0x1dc>)
 801a202:	f240 4242 	movw	r2, #1090	@ 0x442
 801a206:	493c      	ldr	r1, [pc, #240]	@ (801a2f8 <tcp_enqueue_flags+0x1f4>)
 801a208:	4837      	ldr	r0, [pc, #220]	@ (801a2e8 <tcp_enqueue_flags+0x1e4>)
 801a20a:	f005 ff1b 	bl	8020044 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	891b      	ldrh	r3, [r3, #8]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d006      	beq.n	801a224 <tcp_enqueue_flags+0x120>
 801a216:	4b32      	ldr	r3, [pc, #200]	@ (801a2e0 <tcp_enqueue_flags+0x1dc>)
 801a218:	f240 4243 	movw	r2, #1091	@ 0x443
 801a21c:	4937      	ldr	r1, [pc, #220]	@ (801a2fc <tcp_enqueue_flags+0x1f8>)
 801a21e:	4832      	ldr	r0, [pc, #200]	@ (801a2e8 <tcp_enqueue_flags+0x1e4>)
 801a220:	f005 ff10 	bl	8020044 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d103      	bne.n	801a234 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	68fa      	ldr	r2, [r7, #12]
 801a230:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a232:	e00d      	b.n	801a250 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a238:	61bb      	str	r3, [r7, #24]
 801a23a:	e002      	b.n	801a242 <tcp_enqueue_flags+0x13e>
 801a23c:	69bb      	ldr	r3, [r7, #24]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	61bb      	str	r3, [r7, #24]
 801a242:	69bb      	ldr	r3, [r7, #24]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d1f8      	bne.n	801a23c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801a24a:	69bb      	ldr	r3, [r7, #24]
 801a24c:	68fa      	ldr	r2, [r7, #12]
 801a24e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	2200      	movs	r2, #0
 801a254:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a258:	78fb      	ldrb	r3, [r7, #3]
 801a25a:	f003 0302 	and.w	r3, r3, #2
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d104      	bne.n	801a26c <tcp_enqueue_flags+0x168>
 801a262:	78fb      	ldrb	r3, [r7, #3]
 801a264:	f003 0301 	and.w	r3, r3, #1
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d004      	beq.n	801a276 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a270:	1c5a      	adds	r2, r3, #1
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a276:	78fb      	ldrb	r3, [r7, #3]
 801a278:	f003 0301 	and.w	r3, r3, #1
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d006      	beq.n	801a28e <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	8b5b      	ldrh	r3, [r3, #26]
 801a284:	f043 0320 	orr.w	r3, r3, #32
 801a288:	b29a      	uxth	r2, r3
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	685b      	ldr	r3, [r3, #4]
 801a292:	4618      	mov	r0, r3
 801a294:	f7fa fd06 	bl	8014ca4 <pbuf_clen>
 801a298:	4603      	mov	r3, r0
 801a29a:	461a      	mov	r2, r3
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a2a2:	4413      	add	r3, r2
 801a2a4:	b29a      	uxth	r2, r3
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d00e      	beq.n	801a2d4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d10a      	bne.n	801a2d4 <tcp_enqueue_flags+0x1d0>
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d106      	bne.n	801a2d4 <tcp_enqueue_flags+0x1d0>
 801a2c6:	4b06      	ldr	r3, [pc, #24]	@ (801a2e0 <tcp_enqueue_flags+0x1dc>)
 801a2c8:	f240 4265 	movw	r2, #1125	@ 0x465
 801a2cc:	490c      	ldr	r1, [pc, #48]	@ (801a300 <tcp_enqueue_flags+0x1fc>)
 801a2ce:	4806      	ldr	r0, [pc, #24]	@ (801a2e8 <tcp_enqueue_flags+0x1e4>)
 801a2d0:	f005 feb8 	bl	8020044 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a2d4:	2300      	movs	r3, #0
}
 801a2d6:	4618      	mov	r0, r3
 801a2d8:	3720      	adds	r7, #32
 801a2da:	46bd      	mov	sp, r7
 801a2dc:	bd80      	pop	{r7, pc}
 801a2de:	bf00      	nop
 801a2e0:	08023304 	.word	0x08023304
 801a2e4:	08023728 	.word	0x08023728
 801a2e8:	08023358 	.word	0x08023358
 801a2ec:	08023780 	.word	0x08023780
 801a2f0:	2002d2b0 	.word	0x2002d2b0
 801a2f4:	080237a0 	.word	0x080237a0
 801a2f8:	080237dc 	.word	0x080237dc
 801a2fc:	080237f4 	.word	0x080237f4
 801a300:	08023820 	.word	0x08023820

0801a304 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a304:	b5b0      	push	{r4, r5, r7, lr}
 801a306:	b08a      	sub	sp, #40	@ 0x28
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d106      	bne.n	801a320 <tcp_output+0x1c>
 801a312:	4b8a      	ldr	r3, [pc, #552]	@ (801a53c <tcp_output+0x238>)
 801a314:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801a318:	4989      	ldr	r1, [pc, #548]	@ (801a540 <tcp_output+0x23c>)
 801a31a:	488a      	ldr	r0, [pc, #552]	@ (801a544 <tcp_output+0x240>)
 801a31c:	f005 fe92 	bl	8020044 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	7d1b      	ldrb	r3, [r3, #20]
 801a324:	2b01      	cmp	r3, #1
 801a326:	d106      	bne.n	801a336 <tcp_output+0x32>
 801a328:	4b84      	ldr	r3, [pc, #528]	@ (801a53c <tcp_output+0x238>)
 801a32a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801a32e:	4986      	ldr	r1, [pc, #536]	@ (801a548 <tcp_output+0x244>)
 801a330:	4884      	ldr	r0, [pc, #528]	@ (801a544 <tcp_output+0x240>)
 801a332:	f005 fe87 	bl	8020044 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a336:	4b85      	ldr	r3, [pc, #532]	@ (801a54c <tcp_output+0x248>)
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	687a      	ldr	r2, [r7, #4]
 801a33c:	429a      	cmp	r2, r3
 801a33e:	d101      	bne.n	801a344 <tcp_output+0x40>
    return ERR_OK;
 801a340:	2300      	movs	r3, #0
 801a342:	e1ce      	b.n	801a6e2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a350:	4293      	cmp	r3, r2
 801a352:	bf28      	it	cs
 801a354:	4613      	movcs	r3, r2
 801a356:	b29b      	uxth	r3, r3
 801a358:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a35e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a362:	2b00      	cmp	r3, #0
 801a364:	d10b      	bne.n	801a37e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	8b5b      	ldrh	r3, [r3, #26]
 801a36a:	f003 0302 	and.w	r3, r3, #2
 801a36e:	2b00      	cmp	r3, #0
 801a370:	f000 81aa 	beq.w	801a6c8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801a374:	6878      	ldr	r0, [r7, #4]
 801a376:	f000 fddf 	bl	801af38 <tcp_send_empty_ack>
 801a37a:	4603      	mov	r3, r0
 801a37c:	e1b1      	b.n	801a6e2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a37e:	6879      	ldr	r1, [r7, #4]
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	3304      	adds	r3, #4
 801a384:	461a      	mov	r2, r3
 801a386:	6878      	ldr	r0, [r7, #4]
 801a388:	f7fe ffec 	bl	8019364 <tcp_route>
 801a38c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a38e:	697b      	ldr	r3, [r7, #20]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d102      	bne.n	801a39a <tcp_output+0x96>
    return ERR_RTE;
 801a394:	f06f 0303 	mvn.w	r3, #3
 801a398:	e1a3      	b.n	801a6e2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d003      	beq.n	801a3a8 <tcp_output+0xa4>
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d111      	bne.n	801a3cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a3a8:	697b      	ldr	r3, [r7, #20]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d002      	beq.n	801a3b4 <tcp_output+0xb0>
 801a3ae:	697b      	ldr	r3, [r7, #20]
 801a3b0:	3304      	adds	r3, #4
 801a3b2:	e000      	b.n	801a3b6 <tcp_output+0xb2>
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a3b8:	693b      	ldr	r3, [r7, #16]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d102      	bne.n	801a3c4 <tcp_output+0xc0>
      return ERR_RTE;
 801a3be:	f06f 0303 	mvn.w	r3, #3
 801a3c2:	e18e      	b.n	801a6e2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a3c4:	693b      	ldr	r3, [r7, #16]
 801a3c6:	681a      	ldr	r2, [r3, #0]
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3ce:	68db      	ldr	r3, [r3, #12]
 801a3d0:	685b      	ldr	r3, [r3, #4]
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	f7f8 ff30 	bl	8013238 <lwip_htonl>
 801a3d8:	4602      	mov	r2, r0
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a3de:	1ad3      	subs	r3, r2, r3
 801a3e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a3e2:	8912      	ldrh	r2, [r2, #8]
 801a3e4:	4413      	add	r3, r2
 801a3e6:	69ba      	ldr	r2, [r7, #24]
 801a3e8:	429a      	cmp	r2, r3
 801a3ea:	d227      	bcs.n	801a43c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a3f2:	461a      	mov	r2, r3
 801a3f4:	69bb      	ldr	r3, [r7, #24]
 801a3f6:	4293      	cmp	r3, r2
 801a3f8:	d114      	bne.n	801a424 <tcp_output+0x120>
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d110      	bne.n	801a424 <tcp_output+0x120>
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d10b      	bne.n	801a424 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	2200      	movs	r2, #0
 801a410:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	2201      	movs	r2, #1
 801a418:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	2200      	movs	r2, #0
 801a420:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	8b5b      	ldrh	r3, [r3, #26]
 801a428:	f003 0302 	and.w	r3, r3, #2
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	f000 814d 	beq.w	801a6cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801a432:	6878      	ldr	r0, [r7, #4]
 801a434:	f000 fd80 	bl	801af38 <tcp_send_empty_ack>
 801a438:	4603      	mov	r3, r0
 801a43a:	e152      	b.n	801a6e2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2200      	movs	r2, #0
 801a440:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a448:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a44a:	6a3b      	ldr	r3, [r7, #32]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	f000 811c 	beq.w	801a68a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801a452:	e002      	b.n	801a45a <tcp_output+0x156>
 801a454:	6a3b      	ldr	r3, [r7, #32]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	623b      	str	r3, [r7, #32]
 801a45a:	6a3b      	ldr	r3, [r7, #32]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d1f8      	bne.n	801a454 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a462:	e112      	b.n	801a68a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a466:	68db      	ldr	r3, [r3, #12]
 801a468:	899b      	ldrh	r3, [r3, #12]
 801a46a:	b29b      	uxth	r3, r3
 801a46c:	4618      	mov	r0, r3
 801a46e:	f7f8 fecd 	bl	801320c <lwip_htons>
 801a472:	4603      	mov	r3, r0
 801a474:	b2db      	uxtb	r3, r3
 801a476:	f003 0304 	and.w	r3, r3, #4
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d006      	beq.n	801a48c <tcp_output+0x188>
 801a47e:	4b2f      	ldr	r3, [pc, #188]	@ (801a53c <tcp_output+0x238>)
 801a480:	f240 5236 	movw	r2, #1334	@ 0x536
 801a484:	4932      	ldr	r1, [pc, #200]	@ (801a550 <tcp_output+0x24c>)
 801a486:	482f      	ldr	r0, [pc, #188]	@ (801a544 <tcp_output+0x240>)
 801a488:	f005 fddc 	bl	8020044 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a490:	2b00      	cmp	r3, #0
 801a492:	d01f      	beq.n	801a4d4 <tcp_output+0x1d0>
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	8b5b      	ldrh	r3, [r3, #26]
 801a498:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d119      	bne.n	801a4d4 <tcp_output+0x1d0>
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d00b      	beq.n	801a4c0 <tcp_output+0x1bc>
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d110      	bne.n	801a4d4 <tcp_output+0x1d0>
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a4b6:	891a      	ldrh	r2, [r3, #8]
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a4bc:	429a      	cmp	r2, r3
 801a4be:	d209      	bcs.n	801a4d4 <tcp_output+0x1d0>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d004      	beq.n	801a4d4 <tcp_output+0x1d0>
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a4d0:	2b08      	cmp	r3, #8
 801a4d2:	d901      	bls.n	801a4d8 <tcp_output+0x1d4>
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	e000      	b.n	801a4da <tcp_output+0x1d6>
 801a4d8:	2300      	movs	r3, #0
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d106      	bne.n	801a4ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	8b5b      	ldrh	r3, [r3, #26]
 801a4e2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	f000 80e4 	beq.w	801a6b4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	7d1b      	ldrb	r3, [r3, #20]
 801a4f0:	2b02      	cmp	r3, #2
 801a4f2:	d00d      	beq.n	801a510 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4f6:	68db      	ldr	r3, [r3, #12]
 801a4f8:	899b      	ldrh	r3, [r3, #12]
 801a4fa:	b29c      	uxth	r4, r3
 801a4fc:	2010      	movs	r0, #16
 801a4fe:	f7f8 fe85 	bl	801320c <lwip_htons>
 801a502:	4603      	mov	r3, r0
 801a504:	461a      	mov	r2, r3
 801a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a508:	68db      	ldr	r3, [r3, #12]
 801a50a:	4322      	orrs	r2, r4
 801a50c:	b292      	uxth	r2, r2
 801a50e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a510:	697a      	ldr	r2, [r7, #20]
 801a512:	6879      	ldr	r1, [r7, #4]
 801a514:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a516:	f000 f909 	bl	801a72c <tcp_output_segment>
 801a51a:	4603      	mov	r3, r0
 801a51c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d016      	beq.n	801a554 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	8b5b      	ldrh	r3, [r3, #26]
 801a52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a52e:	b29a      	uxth	r2, r3
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	835a      	strh	r2, [r3, #26]
      return err;
 801a534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a538:	e0d3      	b.n	801a6e2 <tcp_output+0x3de>
 801a53a:	bf00      	nop
 801a53c:	08023304 	.word	0x08023304
 801a540:	08023848 	.word	0x08023848
 801a544:	08023358 	.word	0x08023358
 801a548:	08023860 	.word	0x08023860
 801a54c:	2002d3f8 	.word	0x2002d3f8
 801a550:	08023888 	.word	0x08023888
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a556:	681a      	ldr	r2, [r3, #0]
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	7d1b      	ldrb	r3, [r3, #20]
 801a560:	2b02      	cmp	r3, #2
 801a562:	d006      	beq.n	801a572 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	8b5b      	ldrh	r3, [r3, #26]
 801a568:	f023 0303 	bic.w	r3, r3, #3
 801a56c:	b29a      	uxth	r2, r3
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a574:	68db      	ldr	r3, [r3, #12]
 801a576:	685b      	ldr	r3, [r3, #4]
 801a578:	4618      	mov	r0, r3
 801a57a:	f7f8 fe5d 	bl	8013238 <lwip_htonl>
 801a57e:	4604      	mov	r4, r0
 801a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a582:	891b      	ldrh	r3, [r3, #8]
 801a584:	461d      	mov	r5, r3
 801a586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a588:	68db      	ldr	r3, [r3, #12]
 801a58a:	899b      	ldrh	r3, [r3, #12]
 801a58c:	b29b      	uxth	r3, r3
 801a58e:	4618      	mov	r0, r3
 801a590:	f7f8 fe3c 	bl	801320c <lwip_htons>
 801a594:	4603      	mov	r3, r0
 801a596:	b2db      	uxtb	r3, r3
 801a598:	f003 0303 	and.w	r3, r3, #3
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d001      	beq.n	801a5a4 <tcp_output+0x2a0>
 801a5a0:	2301      	movs	r3, #1
 801a5a2:	e000      	b.n	801a5a6 <tcp_output+0x2a2>
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	442b      	add	r3, r5
 801a5a8:	4423      	add	r3, r4
 801a5aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a5b0:	68bb      	ldr	r3, [r7, #8]
 801a5b2:	1ad3      	subs	r3, r2, r3
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	da02      	bge.n	801a5be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	68ba      	ldr	r2, [r7, #8]
 801a5bc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5c0:	891b      	ldrh	r3, [r3, #8]
 801a5c2:	461c      	mov	r4, r3
 801a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5c6:	68db      	ldr	r3, [r3, #12]
 801a5c8:	899b      	ldrh	r3, [r3, #12]
 801a5ca:	b29b      	uxth	r3, r3
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	f7f8 fe1d 	bl	801320c <lwip_htons>
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	b2db      	uxtb	r3, r3
 801a5d6:	f003 0303 	and.w	r3, r3, #3
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d001      	beq.n	801a5e2 <tcp_output+0x2de>
 801a5de:	2301      	movs	r3, #1
 801a5e0:	e000      	b.n	801a5e4 <tcp_output+0x2e0>
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	4423      	add	r3, r4
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d049      	beq.n	801a67e <tcp_output+0x37a>
      seg->next = NULL;
 801a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d105      	bne.n	801a604 <tcp_output+0x300>
        pcb->unacked = seg;
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a5fc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a600:	623b      	str	r3, [r7, #32]
 801a602:	e03f      	b.n	801a684 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a606:	68db      	ldr	r3, [r3, #12]
 801a608:	685b      	ldr	r3, [r3, #4]
 801a60a:	4618      	mov	r0, r3
 801a60c:	f7f8 fe14 	bl	8013238 <lwip_htonl>
 801a610:	4604      	mov	r4, r0
 801a612:	6a3b      	ldr	r3, [r7, #32]
 801a614:	68db      	ldr	r3, [r3, #12]
 801a616:	685b      	ldr	r3, [r3, #4]
 801a618:	4618      	mov	r0, r3
 801a61a:	f7f8 fe0d 	bl	8013238 <lwip_htonl>
 801a61e:	4603      	mov	r3, r0
 801a620:	1ae3      	subs	r3, r4, r3
 801a622:	2b00      	cmp	r3, #0
 801a624:	da24      	bge.n	801a670 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	3370      	adds	r3, #112	@ 0x70
 801a62a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a62c:	e002      	b.n	801a634 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a62e:	69fb      	ldr	r3, [r7, #28]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a634:	69fb      	ldr	r3, [r7, #28]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d011      	beq.n	801a660 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a63c:	69fb      	ldr	r3, [r7, #28]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	68db      	ldr	r3, [r3, #12]
 801a642:	685b      	ldr	r3, [r3, #4]
 801a644:	4618      	mov	r0, r3
 801a646:	f7f8 fdf7 	bl	8013238 <lwip_htonl>
 801a64a:	4604      	mov	r4, r0
 801a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a64e:	68db      	ldr	r3, [r3, #12]
 801a650:	685b      	ldr	r3, [r3, #4]
 801a652:	4618      	mov	r0, r3
 801a654:	f7f8 fdf0 	bl	8013238 <lwip_htonl>
 801a658:	4603      	mov	r3, r0
 801a65a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	dbe6      	blt.n	801a62e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801a660:	69fb      	ldr	r3, [r7, #28]
 801a662:	681a      	ldr	r2, [r3, #0]
 801a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a666:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a668:	69fb      	ldr	r3, [r7, #28]
 801a66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a66c:	601a      	str	r2, [r3, #0]
 801a66e:	e009      	b.n	801a684 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a670:	6a3b      	ldr	r3, [r7, #32]
 801a672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a674:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a676:	6a3b      	ldr	r3, [r7, #32]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	623b      	str	r3, [r7, #32]
 801a67c:	e002      	b.n	801a684 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a67e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a680:	f7fb fe55 	bl	801632e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a688:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d012      	beq.n	801a6b6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a692:	68db      	ldr	r3, [r3, #12]
 801a694:	685b      	ldr	r3, [r3, #4]
 801a696:	4618      	mov	r0, r3
 801a698:	f7f8 fdce 	bl	8013238 <lwip_htonl>
 801a69c:	4602      	mov	r2, r0
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a6a2:	1ad3      	subs	r3, r2, r3
 801a6a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a6a6:	8912      	ldrh	r2, [r2, #8]
 801a6a8:	4413      	add	r3, r2
  while (seg != NULL &&
 801a6aa:	69ba      	ldr	r2, [r7, #24]
 801a6ac:	429a      	cmp	r2, r3
 801a6ae:	f4bf aed9 	bcs.w	801a464 <tcp_output+0x160>
 801a6b2:	e000      	b.n	801a6b6 <tcp_output+0x3b2>
      break;
 801a6b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d108      	bne.n	801a6d0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	2200      	movs	r2, #0
 801a6c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a6c6:	e004      	b.n	801a6d2 <tcp_output+0x3ce>
    goto output_done;
 801a6c8:	bf00      	nop
 801a6ca:	e002      	b.n	801a6d2 <tcp_output+0x3ce>
    goto output_done;
 801a6cc:	bf00      	nop
 801a6ce:	e000      	b.n	801a6d2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a6d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	8b5b      	ldrh	r3, [r3, #26]
 801a6d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a6da:	b29a      	uxth	r2, r3
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a6e0:	2300      	movs	r3, #0
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	3728      	adds	r7, #40	@ 0x28
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bdb0      	pop	{r4, r5, r7, pc}
 801a6ea:	bf00      	nop

0801a6ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d106      	bne.n	801a708 <tcp_output_segment_busy+0x1c>
 801a6fa:	4b09      	ldr	r3, [pc, #36]	@ (801a720 <tcp_output_segment_busy+0x34>)
 801a6fc:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a700:	4908      	ldr	r1, [pc, #32]	@ (801a724 <tcp_output_segment_busy+0x38>)
 801a702:	4809      	ldr	r0, [pc, #36]	@ (801a728 <tcp_output_segment_busy+0x3c>)
 801a704:	f005 fc9e 	bl	8020044 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	685b      	ldr	r3, [r3, #4]
 801a70c:	7b9b      	ldrb	r3, [r3, #14]
 801a70e:	2b01      	cmp	r3, #1
 801a710:	d001      	beq.n	801a716 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a712:	2301      	movs	r3, #1
 801a714:	e000      	b.n	801a718 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a716:	2300      	movs	r3, #0
}
 801a718:	4618      	mov	r0, r3
 801a71a:	3708      	adds	r7, #8
 801a71c:	46bd      	mov	sp, r7
 801a71e:	bd80      	pop	{r7, pc}
 801a720:	08023304 	.word	0x08023304
 801a724:	080238a0 	.word	0x080238a0
 801a728:	08023358 	.word	0x08023358

0801a72c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a72c:	b5b0      	push	{r4, r5, r7, lr}
 801a72e:	b08c      	sub	sp, #48	@ 0x30
 801a730:	af04      	add	r7, sp, #16
 801a732:	60f8      	str	r0, [r7, #12]
 801a734:	60b9      	str	r1, [r7, #8]
 801a736:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d106      	bne.n	801a74c <tcp_output_segment+0x20>
 801a73e:	4b68      	ldr	r3, [pc, #416]	@ (801a8e0 <tcp_output_segment+0x1b4>)
 801a740:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a744:	4967      	ldr	r1, [pc, #412]	@ (801a8e4 <tcp_output_segment+0x1b8>)
 801a746:	4868      	ldr	r0, [pc, #416]	@ (801a8e8 <tcp_output_segment+0x1bc>)
 801a748:	f005 fc7c 	bl	8020044 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a74c:	68bb      	ldr	r3, [r7, #8]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d106      	bne.n	801a760 <tcp_output_segment+0x34>
 801a752:	4b63      	ldr	r3, [pc, #396]	@ (801a8e0 <tcp_output_segment+0x1b4>)
 801a754:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a758:	4964      	ldr	r1, [pc, #400]	@ (801a8ec <tcp_output_segment+0x1c0>)
 801a75a:	4863      	ldr	r0, [pc, #396]	@ (801a8e8 <tcp_output_segment+0x1bc>)
 801a75c:	f005 fc72 	bl	8020044 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d106      	bne.n	801a774 <tcp_output_segment+0x48>
 801a766:	4b5e      	ldr	r3, [pc, #376]	@ (801a8e0 <tcp_output_segment+0x1b4>)
 801a768:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a76c:	4960      	ldr	r1, [pc, #384]	@ (801a8f0 <tcp_output_segment+0x1c4>)
 801a76e:	485e      	ldr	r0, [pc, #376]	@ (801a8e8 <tcp_output_segment+0x1bc>)
 801a770:	f005 fc68 	bl	8020044 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a774:	68f8      	ldr	r0, [r7, #12]
 801a776:	f7ff ffb9 	bl	801a6ec <tcp_output_segment_busy>
 801a77a:	4603      	mov	r3, r0
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d001      	beq.n	801a784 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a780:	2300      	movs	r3, #0
 801a782:	e0a9      	b.n	801a8d8 <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	68dc      	ldr	r4, [r3, #12]
 801a78c:	4610      	mov	r0, r2
 801a78e:	f7f8 fd53 	bl	8013238 <lwip_htonl>
 801a792:	4603      	mov	r3, r0
 801a794:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	68dc      	ldr	r4, [r3, #12]
 801a79e:	4610      	mov	r0, r2
 801a7a0:	f7f8 fd34 	bl	801320c <lwip_htons>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a7a8:	68bb      	ldr	r3, [r7, #8]
 801a7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7ac:	68ba      	ldr	r2, [r7, #8]
 801a7ae:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a7b0:	441a      	add	r2, r3
 801a7b2:	68bb      	ldr	r3, [r7, #8]
 801a7b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	68db      	ldr	r3, [r3, #12]
 801a7ba:	3314      	adds	r3, #20
 801a7bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	7a9b      	ldrb	r3, [r3, #10]
 801a7c2:	f003 0301 	and.w	r3, r3, #1
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d015      	beq.n	801a7f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a7ca:	68bb      	ldr	r3, [r7, #8]
 801a7cc:	3304      	adds	r3, #4
 801a7ce:	461a      	mov	r2, r3
 801a7d0:	6879      	ldr	r1, [r7, #4]
 801a7d2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801a7d6:	f7fc f999 	bl	8016b0c <tcp_eff_send_mss_netif>
 801a7da:	4603      	mov	r3, r0
 801a7dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a7de:	8b7b      	ldrh	r3, [r7, #26]
 801a7e0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f7f8 fd27 	bl	8013238 <lwip_htonl>
 801a7ea:	4602      	mov	r2, r0
 801a7ec:	69fb      	ldr	r3, [r7, #28]
 801a7ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a7f0:	69fb      	ldr	r3, [r7, #28]
 801a7f2:	3304      	adds	r3, #4
 801a7f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a7f6:	68bb      	ldr	r3, [r7, #8]
 801a7f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	da02      	bge.n	801a806 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a800:	68bb      	ldr	r3, [r7, #8]
 801a802:	2200      	movs	r2, #0
 801a804:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801a806:	68bb      	ldr	r3, [r7, #8]
 801a808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d10c      	bne.n	801a828 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a80e:	4b39      	ldr	r3, [pc, #228]	@ (801a8f4 <tcp_output_segment+0x1c8>)
 801a810:	681a      	ldr	r2, [r3, #0]
 801a812:	68bb      	ldr	r3, [r7, #8]
 801a814:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	68db      	ldr	r3, [r3, #12]
 801a81a:	685b      	ldr	r3, [r3, #4]
 801a81c:	4618      	mov	r0, r3
 801a81e:	f7f8 fd0b 	bl	8013238 <lwip_htonl>
 801a822:	4602      	mov	r2, r0
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	68da      	ldr	r2, [r3, #12]
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	685b      	ldr	r3, [r3, #4]
 801a830:	685b      	ldr	r3, [r3, #4]
 801a832:	1ad3      	subs	r3, r2, r3
 801a834:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	685b      	ldr	r3, [r3, #4]
 801a83a:	8959      	ldrh	r1, [r3, #10]
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	685b      	ldr	r3, [r3, #4]
 801a840:	8b3a      	ldrh	r2, [r7, #24]
 801a842:	1a8a      	subs	r2, r1, r2
 801a844:	b292      	uxth	r2, r2
 801a846:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	685b      	ldr	r3, [r3, #4]
 801a84c:	8919      	ldrh	r1, [r3, #8]
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	685b      	ldr	r3, [r3, #4]
 801a852:	8b3a      	ldrh	r2, [r7, #24]
 801a854:	1a8a      	subs	r2, r1, r2
 801a856:	b292      	uxth	r2, r2
 801a858:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	685b      	ldr	r3, [r3, #4]
 801a85e:	68fa      	ldr	r2, [r7, #12]
 801a860:	68d2      	ldr	r2, [r2, #12]
 801a862:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	68db      	ldr	r3, [r3, #12]
 801a868:	2200      	movs	r2, #0
 801a86a:	741a      	strb	r2, [r3, #16]
 801a86c:	2200      	movs	r2, #0
 801a86e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	68da      	ldr	r2, [r3, #12]
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	7a9b      	ldrb	r3, [r3, #10]
 801a878:	f003 0301 	and.w	r3, r3, #1
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d001      	beq.n	801a884 <tcp_output_segment+0x158>
 801a880:	2318      	movs	r3, #24
 801a882:	e000      	b.n	801a886 <tcp_output_segment+0x15a>
 801a884:	2314      	movs	r3, #20
 801a886:	4413      	add	r3, r2
 801a888:	69fa      	ldr	r2, [r7, #28]
 801a88a:	429a      	cmp	r2, r3
 801a88c:	d006      	beq.n	801a89c <tcp_output_segment+0x170>
 801a88e:	4b14      	ldr	r3, [pc, #80]	@ (801a8e0 <tcp_output_segment+0x1b4>)
 801a890:	f240 621c 	movw	r2, #1564	@ 0x61c
 801a894:	4918      	ldr	r1, [pc, #96]	@ (801a8f8 <tcp_output_segment+0x1cc>)
 801a896:	4814      	ldr	r0, [pc, #80]	@ (801a8e8 <tcp_output_segment+0x1bc>)
 801a898:	f005 fbd4 	bl	8020044 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801a89c:	4b17      	ldr	r3, [pc, #92]	@ (801a8fc <tcp_output_segment+0x1d0>)
 801a89e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801a8a2:	3301      	adds	r3, #1
 801a8a4:	b29a      	uxth	r2, r3
 801a8a6:	4b15      	ldr	r3, [pc, #84]	@ (801a8fc <tcp_output_segment+0x1d0>)
 801a8a8:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	6858      	ldr	r0, [r3, #4]
 801a8b0:	68b9      	ldr	r1, [r7, #8]
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	1d1c      	adds	r4, r3, #4
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	7add      	ldrb	r5, [r3, #11]
 801a8ba:	68bb      	ldr	r3, [r7, #8]
 801a8bc:	7a9b      	ldrb	r3, [r3, #10]
 801a8be:	687a      	ldr	r2, [r7, #4]
 801a8c0:	9202      	str	r2, [sp, #8]
 801a8c2:	2206      	movs	r2, #6
 801a8c4:	9201      	str	r2, [sp, #4]
 801a8c6:	9300      	str	r3, [sp, #0]
 801a8c8:	462b      	mov	r3, r5
 801a8ca:	4622      	mov	r2, r4
 801a8cc:	f002 fec4 	bl	801d658 <ip4_output_if>
 801a8d0:	4603      	mov	r3, r0
 801a8d2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a8d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a8d8:	4618      	mov	r0, r3
 801a8da:	3720      	adds	r7, #32
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bdb0      	pop	{r4, r5, r7, pc}
 801a8e0:	08023304 	.word	0x08023304
 801a8e4:	080238c8 	.word	0x080238c8
 801a8e8:	08023358 	.word	0x08023358
 801a8ec:	080238e8 	.word	0x080238e8
 801a8f0:	08023908 	.word	0x08023908
 801a8f4:	2002d3ac 	.word	0x2002d3ac
 801a8f8:	0802392c 	.word	0x0802392c
 801a8fc:	2002d2b0 	.word	0x2002d2b0

0801a900 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a900:	b5b0      	push	{r4, r5, r7, lr}
 801a902:	b084      	sub	sp, #16
 801a904:	af00      	add	r7, sp, #0
 801a906:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d106      	bne.n	801a91c <tcp_rexmit_rto_prepare+0x1c>
 801a90e:	4b31      	ldr	r3, [pc, #196]	@ (801a9d4 <tcp_rexmit_rto_prepare+0xd4>)
 801a910:	f240 6263 	movw	r2, #1635	@ 0x663
 801a914:	4930      	ldr	r1, [pc, #192]	@ (801a9d8 <tcp_rexmit_rto_prepare+0xd8>)
 801a916:	4831      	ldr	r0, [pc, #196]	@ (801a9dc <tcp_rexmit_rto_prepare+0xdc>)
 801a918:	f005 fb94 	bl	8020044 <iprintf>

  if (pcb->unacked == NULL) {
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a920:	2b00      	cmp	r3, #0
 801a922:	d102      	bne.n	801a92a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a924:	f06f 0305 	mvn.w	r3, #5
 801a928:	e050      	b.n	801a9cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a92e:	60fb      	str	r3, [r7, #12]
 801a930:	e00b      	b.n	801a94a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a932:	68f8      	ldr	r0, [r7, #12]
 801a934:	f7ff feda 	bl	801a6ec <tcp_output_segment_busy>
 801a938:	4603      	mov	r3, r0
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d002      	beq.n	801a944 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a93e:	f06f 0305 	mvn.w	r3, #5
 801a942:	e043      	b.n	801a9cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	60fb      	str	r3, [r7, #12]
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d1ef      	bne.n	801a932 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a952:	68f8      	ldr	r0, [r7, #12]
 801a954:	f7ff feca 	bl	801a6ec <tcp_output_segment_busy>
 801a958:	4603      	mov	r3, r0
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d002      	beq.n	801a964 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a95e:	f06f 0305 	mvn.w	r3, #5
 801a962:	e033      	b.n	801a9cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	2200      	movs	r2, #0
 801a978:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	8b5b      	ldrh	r3, [r3, #26]
 801a97e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801a982:	b29a      	uxth	r2, r3
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	68db      	ldr	r3, [r3, #12]
 801a98c:	685b      	ldr	r3, [r3, #4]
 801a98e:	4618      	mov	r0, r3
 801a990:	f7f8 fc52 	bl	8013238 <lwip_htonl>
 801a994:	4604      	mov	r4, r0
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	891b      	ldrh	r3, [r3, #8]
 801a99a:	461d      	mov	r5, r3
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	68db      	ldr	r3, [r3, #12]
 801a9a0:	899b      	ldrh	r3, [r3, #12]
 801a9a2:	b29b      	uxth	r3, r3
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f7f8 fc31 	bl	801320c <lwip_htons>
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	b2db      	uxtb	r3, r3
 801a9ae:	f003 0303 	and.w	r3, r3, #3
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d001      	beq.n	801a9ba <tcp_rexmit_rto_prepare+0xba>
 801a9b6:	2301      	movs	r3, #1
 801a9b8:	e000      	b.n	801a9bc <tcp_rexmit_rto_prepare+0xbc>
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	442b      	add	r3, r5
 801a9be:	18e2      	adds	r2, r4, r3
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801a9ca:	2300      	movs	r3, #0
}
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	3710      	adds	r7, #16
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	bdb0      	pop	{r4, r5, r7, pc}
 801a9d4:	08023304 	.word	0x08023304
 801a9d8:	08023940 	.word	0x08023940
 801a9dc:	08023358 	.word	0x08023358

0801a9e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a9e0:	b580      	push	{r7, lr}
 801a9e2:	b082      	sub	sp, #8
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d106      	bne.n	801a9fc <tcp_rexmit_rto_commit+0x1c>
 801a9ee:	4b0d      	ldr	r3, [pc, #52]	@ (801aa24 <tcp_rexmit_rto_commit+0x44>)
 801a9f0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801a9f4:	490c      	ldr	r1, [pc, #48]	@ (801aa28 <tcp_rexmit_rto_commit+0x48>)
 801a9f6:	480d      	ldr	r0, [pc, #52]	@ (801aa2c <tcp_rexmit_rto_commit+0x4c>)
 801a9f8:	f005 fb24 	bl	8020044 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801aa02:	2bff      	cmp	r3, #255	@ 0xff
 801aa04:	d007      	beq.n	801aa16 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	b2da      	uxtb	r2, r3
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801aa16:	6878      	ldr	r0, [r7, #4]
 801aa18:	f7ff fc74 	bl	801a304 <tcp_output>
}
 801aa1c:	bf00      	nop
 801aa1e:	3708      	adds	r7, #8
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bd80      	pop	{r7, pc}
 801aa24:	08023304 	.word	0x08023304
 801aa28:	08023964 	.word	0x08023964
 801aa2c:	08023358 	.word	0x08023358

0801aa30 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b082      	sub	sp, #8
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d106      	bne.n	801aa4c <tcp_rexmit_rto+0x1c>
 801aa3e:	4b0a      	ldr	r3, [pc, #40]	@ (801aa68 <tcp_rexmit_rto+0x38>)
 801aa40:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801aa44:	4909      	ldr	r1, [pc, #36]	@ (801aa6c <tcp_rexmit_rto+0x3c>)
 801aa46:	480a      	ldr	r0, [pc, #40]	@ (801aa70 <tcp_rexmit_rto+0x40>)
 801aa48:	f005 fafc 	bl	8020044 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801aa4c:	6878      	ldr	r0, [r7, #4]
 801aa4e:	f7ff ff57 	bl	801a900 <tcp_rexmit_rto_prepare>
 801aa52:	4603      	mov	r3, r0
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d102      	bne.n	801aa5e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801aa58:	6878      	ldr	r0, [r7, #4]
 801aa5a:	f7ff ffc1 	bl	801a9e0 <tcp_rexmit_rto_commit>
  }
}
 801aa5e:	bf00      	nop
 801aa60:	3708      	adds	r7, #8
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
 801aa66:	bf00      	nop
 801aa68:	08023304 	.word	0x08023304
 801aa6c:	08023988 	.word	0x08023988
 801aa70:	08023358 	.word	0x08023358

0801aa74 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801aa74:	b590      	push	{r4, r7, lr}
 801aa76:	b085      	sub	sp, #20
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d106      	bne.n	801aa90 <tcp_rexmit+0x1c>
 801aa82:	4b2f      	ldr	r3, [pc, #188]	@ (801ab40 <tcp_rexmit+0xcc>)
 801aa84:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801aa88:	492e      	ldr	r1, [pc, #184]	@ (801ab44 <tcp_rexmit+0xd0>)
 801aa8a:	482f      	ldr	r0, [pc, #188]	@ (801ab48 <tcp_rexmit+0xd4>)
 801aa8c:	f005 fada 	bl	8020044 <iprintf>

  if (pcb->unacked == NULL) {
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d102      	bne.n	801aa9e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801aa98:	f06f 0305 	mvn.w	r3, #5
 801aa9c:	e04c      	b.n	801ab38 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aaa2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801aaa4:	68b8      	ldr	r0, [r7, #8]
 801aaa6:	f7ff fe21 	bl	801a6ec <tcp_output_segment_busy>
 801aaaa:	4603      	mov	r3, r0
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d002      	beq.n	801aab6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801aab0:	f06f 0305 	mvn.w	r3, #5
 801aab4:	e040      	b.n	801ab38 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801aab6:	68bb      	ldr	r3, [r7, #8]
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	336c      	adds	r3, #108	@ 0x6c
 801aac2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801aac4:	e002      	b.n	801aacc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d011      	beq.n	801aaf8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	68db      	ldr	r3, [r3, #12]
 801aada:	685b      	ldr	r3, [r3, #4]
 801aadc:	4618      	mov	r0, r3
 801aade:	f7f8 fbab 	bl	8013238 <lwip_htonl>
 801aae2:	4604      	mov	r4, r0
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	68db      	ldr	r3, [r3, #12]
 801aae8:	685b      	ldr	r3, [r3, #4]
 801aaea:	4618      	mov	r0, r3
 801aaec:	f7f8 fba4 	bl	8013238 <lwip_htonl>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	dbe6      	blt.n	801aac6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	681a      	ldr	r2, [r3, #0]
 801aafc:	68bb      	ldr	r3, [r7, #8]
 801aafe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	68ba      	ldr	r2, [r7, #8]
 801ab04:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801ab06:	68bb      	ldr	r3, [r7, #8]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d103      	bne.n	801ab16 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	2200      	movs	r2, #0
 801ab12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ab1c:	2bff      	cmp	r3, #255	@ 0xff
 801ab1e:	d007      	beq.n	801ab30 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ab26:	3301      	adds	r3, #1
 801ab28:	b2da      	uxtb	r2, r3
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	2200      	movs	r2, #0
 801ab34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ab36:	2300      	movs	r3, #0
}
 801ab38:	4618      	mov	r0, r3
 801ab3a:	3714      	adds	r7, #20
 801ab3c:	46bd      	mov	sp, r7
 801ab3e:	bd90      	pop	{r4, r7, pc}
 801ab40:	08023304 	.word	0x08023304
 801ab44:	080239a4 	.word	0x080239a4
 801ab48:	08023358 	.word	0x08023358

0801ab4c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ab4c:	b580      	push	{r7, lr}
 801ab4e:	b082      	sub	sp, #8
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d106      	bne.n	801ab68 <tcp_rexmit_fast+0x1c>
 801ab5a:	4b2a      	ldr	r3, [pc, #168]	@ (801ac04 <tcp_rexmit_fast+0xb8>)
 801ab5c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801ab60:	4929      	ldr	r1, [pc, #164]	@ (801ac08 <tcp_rexmit_fast+0xbc>)
 801ab62:	482a      	ldr	r0, [pc, #168]	@ (801ac0c <tcp_rexmit_fast+0xc0>)
 801ab64:	f005 fa6e 	bl	8020044 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d045      	beq.n	801abfc <tcp_rexmit_fast+0xb0>
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	8b5b      	ldrh	r3, [r3, #26]
 801ab74:	f003 0304 	and.w	r3, r3, #4
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d13f      	bne.n	801abfc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ab7c:	6878      	ldr	r0, [r7, #4]
 801ab7e:	f7ff ff79 	bl	801aa74 <tcp_rexmit>
 801ab82:	4603      	mov	r3, r0
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d139      	bne.n	801abfc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ab94:	4293      	cmp	r3, r2
 801ab96:	bf28      	it	cs
 801ab98:	4613      	movcs	r3, r2
 801ab9a:	b29b      	uxth	r3, r3
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	da00      	bge.n	801aba2 <tcp_rexmit_fast+0x56>
 801aba0:	3301      	adds	r3, #1
 801aba2:	105b      	asrs	r3, r3, #1
 801aba4:	b29a      	uxth	r2, r3
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801abb2:	461a      	mov	r2, r3
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801abb8:	005b      	lsls	r3, r3, #1
 801abba:	429a      	cmp	r2, r3
 801abbc:	d206      	bcs.n	801abcc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801abc2:	005b      	lsls	r3, r3, #1
 801abc4:	b29a      	uxth	r2, r3
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801abd6:	4619      	mov	r1, r3
 801abd8:	0049      	lsls	r1, r1, #1
 801abda:	440b      	add	r3, r1
 801abdc:	b29b      	uxth	r3, r3
 801abde:	4413      	add	r3, r2
 801abe0:	b29a      	uxth	r2, r3
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	8b5b      	ldrh	r3, [r3, #26]
 801abec:	f043 0304 	orr.w	r3, r3, #4
 801abf0:	b29a      	uxth	r2, r3
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	2200      	movs	r2, #0
 801abfa:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801abfc:	bf00      	nop
 801abfe:	3708      	adds	r7, #8
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}
 801ac04:	08023304 	.word	0x08023304
 801ac08:	080239bc 	.word	0x080239bc
 801ac0c:	08023358 	.word	0x08023358

0801ac10 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ac10:	b580      	push	{r7, lr}
 801ac12:	b086      	sub	sp, #24
 801ac14:	af00      	add	r7, sp, #0
 801ac16:	60f8      	str	r0, [r7, #12]
 801ac18:	607b      	str	r3, [r7, #4]
 801ac1a:	460b      	mov	r3, r1
 801ac1c:	817b      	strh	r3, [r7, #10]
 801ac1e:	4613      	mov	r3, r2
 801ac20:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ac22:	897a      	ldrh	r2, [r7, #10]
 801ac24:	893b      	ldrh	r3, [r7, #8]
 801ac26:	4413      	add	r3, r2
 801ac28:	b29b      	uxth	r3, r3
 801ac2a:	3314      	adds	r3, #20
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ac32:	4619      	mov	r1, r3
 801ac34:	2022      	movs	r0, #34	@ 0x22
 801ac36:	f7f9 fcc3 	bl	80145c0 <pbuf_alloc>
 801ac3a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ac3c:	697b      	ldr	r3, [r7, #20]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d04d      	beq.n	801acde <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ac42:	897b      	ldrh	r3, [r7, #10]
 801ac44:	3313      	adds	r3, #19
 801ac46:	697a      	ldr	r2, [r7, #20]
 801ac48:	8952      	ldrh	r2, [r2, #10]
 801ac4a:	4293      	cmp	r3, r2
 801ac4c:	db06      	blt.n	801ac5c <tcp_output_alloc_header_common+0x4c>
 801ac4e:	4b26      	ldr	r3, [pc, #152]	@ (801ace8 <tcp_output_alloc_header_common+0xd8>)
 801ac50:	f240 7223 	movw	r2, #1827	@ 0x723
 801ac54:	4925      	ldr	r1, [pc, #148]	@ (801acec <tcp_output_alloc_header_common+0xdc>)
 801ac56:	4826      	ldr	r0, [pc, #152]	@ (801acf0 <tcp_output_alloc_header_common+0xe0>)
 801ac58:	f005 f9f4 	bl	8020044 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ac5c:	697b      	ldr	r3, [r7, #20]
 801ac5e:	685b      	ldr	r3, [r3, #4]
 801ac60:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ac62:	8c3b      	ldrh	r3, [r7, #32]
 801ac64:	4618      	mov	r0, r3
 801ac66:	f7f8 fad1 	bl	801320c <lwip_htons>
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	461a      	mov	r2, r3
 801ac6e:	693b      	ldr	r3, [r7, #16]
 801ac70:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ac72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac74:	4618      	mov	r0, r3
 801ac76:	f7f8 fac9 	bl	801320c <lwip_htons>
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	461a      	mov	r2, r3
 801ac7e:	693b      	ldr	r3, [r7, #16]
 801ac80:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ac82:	693b      	ldr	r3, [r7, #16]
 801ac84:	687a      	ldr	r2, [r7, #4]
 801ac86:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ac88:	68f8      	ldr	r0, [r7, #12]
 801ac8a:	f7f8 fad5 	bl	8013238 <lwip_htonl>
 801ac8e:	4602      	mov	r2, r0
 801ac90:	693b      	ldr	r3, [r7, #16]
 801ac92:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ac94:	897b      	ldrh	r3, [r7, #10]
 801ac96:	089b      	lsrs	r3, r3, #2
 801ac98:	b29b      	uxth	r3, r3
 801ac9a:	3305      	adds	r3, #5
 801ac9c:	b29b      	uxth	r3, r3
 801ac9e:	031b      	lsls	r3, r3, #12
 801aca0:	b29a      	uxth	r2, r3
 801aca2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801aca6:	b29b      	uxth	r3, r3
 801aca8:	4313      	orrs	r3, r2
 801acaa:	b29b      	uxth	r3, r3
 801acac:	4618      	mov	r0, r3
 801acae:	f7f8 faad 	bl	801320c <lwip_htons>
 801acb2:	4603      	mov	r3, r0
 801acb4:	461a      	mov	r2, r3
 801acb6:	693b      	ldr	r3, [r7, #16]
 801acb8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801acba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801acbc:	4618      	mov	r0, r3
 801acbe:	f7f8 faa5 	bl	801320c <lwip_htons>
 801acc2:	4603      	mov	r3, r0
 801acc4:	461a      	mov	r2, r3
 801acc6:	693b      	ldr	r3, [r7, #16]
 801acc8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801acca:	693b      	ldr	r3, [r7, #16]
 801accc:	2200      	movs	r2, #0
 801acce:	741a      	strb	r2, [r3, #16]
 801acd0:	2200      	movs	r2, #0
 801acd2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801acd4:	693b      	ldr	r3, [r7, #16]
 801acd6:	2200      	movs	r2, #0
 801acd8:	749a      	strb	r2, [r3, #18]
 801acda:	2200      	movs	r2, #0
 801acdc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801acde:	697b      	ldr	r3, [r7, #20]
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3718      	adds	r7, #24
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}
 801ace8:	08023304 	.word	0x08023304
 801acec:	080239dc 	.word	0x080239dc
 801acf0:	08023358 	.word	0x08023358

0801acf4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801acf4:	b5b0      	push	{r4, r5, r7, lr}
 801acf6:	b08a      	sub	sp, #40	@ 0x28
 801acf8:	af04      	add	r7, sp, #16
 801acfa:	60f8      	str	r0, [r7, #12]
 801acfc:	607b      	str	r3, [r7, #4]
 801acfe:	460b      	mov	r3, r1
 801ad00:	817b      	strh	r3, [r7, #10]
 801ad02:	4613      	mov	r3, r2
 801ad04:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d106      	bne.n	801ad1a <tcp_output_alloc_header+0x26>
 801ad0c:	4b15      	ldr	r3, [pc, #84]	@ (801ad64 <tcp_output_alloc_header+0x70>)
 801ad0e:	f240 7242 	movw	r2, #1858	@ 0x742
 801ad12:	4915      	ldr	r1, [pc, #84]	@ (801ad68 <tcp_output_alloc_header+0x74>)
 801ad14:	4815      	ldr	r0, [pc, #84]	@ (801ad6c <tcp_output_alloc_header+0x78>)
 801ad16:	f005 f995 	bl	8020044 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	8adb      	ldrh	r3, [r3, #22]
 801ad22:	68fa      	ldr	r2, [r7, #12]
 801ad24:	8b12      	ldrh	r2, [r2, #24]
 801ad26:	68f9      	ldr	r1, [r7, #12]
 801ad28:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801ad2a:	893d      	ldrh	r5, [r7, #8]
 801ad2c:	897c      	ldrh	r4, [r7, #10]
 801ad2e:	9103      	str	r1, [sp, #12]
 801ad30:	2110      	movs	r1, #16
 801ad32:	9102      	str	r1, [sp, #8]
 801ad34:	9201      	str	r2, [sp, #4]
 801ad36:	9300      	str	r3, [sp, #0]
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	462a      	mov	r2, r5
 801ad3c:	4621      	mov	r1, r4
 801ad3e:	f7ff ff67 	bl	801ac10 <tcp_output_alloc_header_common>
 801ad42:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ad44:	697b      	ldr	r3, [r7, #20]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d006      	beq.n	801ad58 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad4e:	68fa      	ldr	r2, [r7, #12]
 801ad50:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801ad52:	441a      	add	r2, r3
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801ad58:	697b      	ldr	r3, [r7, #20]
}
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	3718      	adds	r7, #24
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	bdb0      	pop	{r4, r5, r7, pc}
 801ad62:	bf00      	nop
 801ad64:	08023304 	.word	0x08023304
 801ad68:	08023a0c 	.word	0x08023a0c
 801ad6c:	08023358 	.word	0x08023358

0801ad70 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b088      	sub	sp, #32
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	60f8      	str	r0, [r7, #12]
 801ad78:	60b9      	str	r1, [r7, #8]
 801ad7a:	4611      	mov	r1, r2
 801ad7c:	461a      	mov	r2, r3
 801ad7e:	460b      	mov	r3, r1
 801ad80:	71fb      	strb	r3, [r7, #7]
 801ad82:	4613      	mov	r3, r2
 801ad84:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ad86:	2300      	movs	r3, #0
 801ad88:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ad8a:	68bb      	ldr	r3, [r7, #8]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d106      	bne.n	801ad9e <tcp_output_fill_options+0x2e>
 801ad90:	4b12      	ldr	r3, [pc, #72]	@ (801addc <tcp_output_fill_options+0x6c>)
 801ad92:	f240 7256 	movw	r2, #1878	@ 0x756
 801ad96:	4912      	ldr	r1, [pc, #72]	@ (801ade0 <tcp_output_fill_options+0x70>)
 801ad98:	4812      	ldr	r0, [pc, #72]	@ (801ade4 <tcp_output_fill_options+0x74>)
 801ad9a:	f005 f953 	bl	8020044 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ad9e:	68bb      	ldr	r3, [r7, #8]
 801ada0:	685b      	ldr	r3, [r3, #4]
 801ada2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ada4:	69bb      	ldr	r3, [r7, #24]
 801ada6:	3314      	adds	r3, #20
 801ada8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801adaa:	8bfb      	ldrh	r3, [r7, #30]
 801adac:	009b      	lsls	r3, r3, #2
 801adae:	461a      	mov	r2, r3
 801adb0:	79fb      	ldrb	r3, [r7, #7]
 801adb2:	009b      	lsls	r3, r3, #2
 801adb4:	f003 0304 	and.w	r3, r3, #4
 801adb8:	4413      	add	r3, r2
 801adba:	3314      	adds	r3, #20
 801adbc:	69ba      	ldr	r2, [r7, #24]
 801adbe:	4413      	add	r3, r2
 801adc0:	697a      	ldr	r2, [r7, #20]
 801adc2:	429a      	cmp	r2, r3
 801adc4:	d006      	beq.n	801add4 <tcp_output_fill_options+0x64>
 801adc6:	4b05      	ldr	r3, [pc, #20]	@ (801addc <tcp_output_fill_options+0x6c>)
 801adc8:	f240 7275 	movw	r2, #1909	@ 0x775
 801adcc:	4906      	ldr	r1, [pc, #24]	@ (801ade8 <tcp_output_fill_options+0x78>)
 801adce:	4805      	ldr	r0, [pc, #20]	@ (801ade4 <tcp_output_fill_options+0x74>)
 801add0:	f005 f938 	bl	8020044 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801add4:	bf00      	nop
 801add6:	3720      	adds	r7, #32
 801add8:	46bd      	mov	sp, r7
 801adda:	bd80      	pop	{r7, pc}
 801addc:	08023304 	.word	0x08023304
 801ade0:	08023a34 	.word	0x08023a34
 801ade4:	08023358 	.word	0x08023358
 801ade8:	0802392c 	.word	0x0802392c

0801adec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b08a      	sub	sp, #40	@ 0x28
 801adf0:	af04      	add	r7, sp, #16
 801adf2:	60f8      	str	r0, [r7, #12]
 801adf4:	60b9      	str	r1, [r7, #8]
 801adf6:	607a      	str	r2, [r7, #4]
 801adf8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801adfa:	68bb      	ldr	r3, [r7, #8]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d106      	bne.n	801ae0e <tcp_output_control_segment+0x22>
 801ae00:	4b20      	ldr	r3, [pc, #128]	@ (801ae84 <tcp_output_control_segment+0x98>)
 801ae02:	f240 7287 	movw	r2, #1927	@ 0x787
 801ae06:	4920      	ldr	r1, [pc, #128]	@ (801ae88 <tcp_output_control_segment+0x9c>)
 801ae08:	4820      	ldr	r0, [pc, #128]	@ (801ae8c <tcp_output_control_segment+0xa0>)
 801ae0a:	f005 f91b 	bl	8020044 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ae0e:	683a      	ldr	r2, [r7, #0]
 801ae10:	6879      	ldr	r1, [r7, #4]
 801ae12:	68f8      	ldr	r0, [r7, #12]
 801ae14:	f7fe faa6 	bl	8019364 <tcp_route>
 801ae18:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ae1a:	693b      	ldr	r3, [r7, #16]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d102      	bne.n	801ae26 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ae20:	23fc      	movs	r3, #252	@ 0xfc
 801ae22:	75fb      	strb	r3, [r7, #23]
 801ae24:	e024      	b.n	801ae70 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d006      	beq.n	801ae3a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	7adb      	ldrb	r3, [r3, #11]
 801ae30:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	7a9b      	ldrb	r3, [r3, #10]
 801ae36:	757b      	strb	r3, [r7, #21]
 801ae38:	e003      	b.n	801ae42 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ae3a:	23ff      	movs	r3, #255	@ 0xff
 801ae3c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ae3e:	2300      	movs	r3, #0
 801ae40:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801ae42:	4b13      	ldr	r3, [pc, #76]	@ (801ae90 <tcp_output_control_segment+0xa4>)
 801ae44:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801ae48:	3301      	adds	r3, #1
 801ae4a:	b29a      	uxth	r2, r3
 801ae4c:	4b10      	ldr	r3, [pc, #64]	@ (801ae90 <tcp_output_control_segment+0xa4>)
 801ae4e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ae52:	7dba      	ldrb	r2, [r7, #22]
 801ae54:	693b      	ldr	r3, [r7, #16]
 801ae56:	9302      	str	r3, [sp, #8]
 801ae58:	2306      	movs	r3, #6
 801ae5a:	9301      	str	r3, [sp, #4]
 801ae5c:	7d7b      	ldrb	r3, [r7, #21]
 801ae5e:	9300      	str	r3, [sp, #0]
 801ae60:	4613      	mov	r3, r2
 801ae62:	683a      	ldr	r2, [r7, #0]
 801ae64:	6879      	ldr	r1, [r7, #4]
 801ae66:	68b8      	ldr	r0, [r7, #8]
 801ae68:	f002 fbf6 	bl	801d658 <ip4_output_if>
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ae70:	68b8      	ldr	r0, [r7, #8]
 801ae72:	f7f9 fe89 	bl	8014b88 <pbuf_free>
  return err;
 801ae76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3718      	adds	r7, #24
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
 801ae82:	bf00      	nop
 801ae84:	08023304 	.word	0x08023304
 801ae88:	08023a5c 	.word	0x08023a5c
 801ae8c:	08023358 	.word	0x08023358
 801ae90:	2002d2b0 	.word	0x2002d2b0

0801ae94 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ae94:	b590      	push	{r4, r7, lr}
 801ae96:	b08b      	sub	sp, #44	@ 0x2c
 801ae98:	af04      	add	r7, sp, #16
 801ae9a:	60f8      	str	r0, [r7, #12]
 801ae9c:	60b9      	str	r1, [r7, #8]
 801ae9e:	607a      	str	r2, [r7, #4]
 801aea0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d106      	bne.n	801aeb6 <tcp_rst+0x22>
 801aea8:	4b1f      	ldr	r3, [pc, #124]	@ (801af28 <tcp_rst+0x94>)
 801aeaa:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801aeae:	491f      	ldr	r1, [pc, #124]	@ (801af2c <tcp_rst+0x98>)
 801aeb0:	481f      	ldr	r0, [pc, #124]	@ (801af30 <tcp_rst+0x9c>)
 801aeb2:	f005 f8c7 	bl	8020044 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801aeb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d106      	bne.n	801aeca <tcp_rst+0x36>
 801aebc:	4b1a      	ldr	r3, [pc, #104]	@ (801af28 <tcp_rst+0x94>)
 801aebe:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801aec2:	491c      	ldr	r1, [pc, #112]	@ (801af34 <tcp_rst+0xa0>)
 801aec4:	481a      	ldr	r0, [pc, #104]	@ (801af30 <tcp_rst+0x9c>)
 801aec6:	f005 f8bd 	bl	8020044 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aeca:	2300      	movs	r3, #0
 801aecc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801aece:	f246 0308 	movw	r3, #24584	@ 0x6008
 801aed2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801aed4:	7dfb      	ldrb	r3, [r7, #23]
 801aed6:	b29c      	uxth	r4, r3
 801aed8:	68b8      	ldr	r0, [r7, #8]
 801aeda:	f7f8 f9ad 	bl	8013238 <lwip_htonl>
 801aede:	4602      	mov	r2, r0
 801aee0:	8abb      	ldrh	r3, [r7, #20]
 801aee2:	9303      	str	r3, [sp, #12]
 801aee4:	2314      	movs	r3, #20
 801aee6:	9302      	str	r3, [sp, #8]
 801aee8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801aeea:	9301      	str	r3, [sp, #4]
 801aeec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801aeee:	9300      	str	r3, [sp, #0]
 801aef0:	4613      	mov	r3, r2
 801aef2:	2200      	movs	r2, #0
 801aef4:	4621      	mov	r1, r4
 801aef6:	6878      	ldr	r0, [r7, #4]
 801aef8:	f7ff fe8a 	bl	801ac10 <tcp_output_alloc_header_common>
 801aefc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801aefe:	693b      	ldr	r3, [r7, #16]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d00c      	beq.n	801af1e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801af04:	7dfb      	ldrb	r3, [r7, #23]
 801af06:	2200      	movs	r2, #0
 801af08:	6939      	ldr	r1, [r7, #16]
 801af0a:	68f8      	ldr	r0, [r7, #12]
 801af0c:	f7ff ff30 	bl	801ad70 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801af10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af12:	683a      	ldr	r2, [r7, #0]
 801af14:	6939      	ldr	r1, [r7, #16]
 801af16:	68f8      	ldr	r0, [r7, #12]
 801af18:	f7ff ff68 	bl	801adec <tcp_output_control_segment>
 801af1c:	e000      	b.n	801af20 <tcp_rst+0x8c>
    return;
 801af1e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801af20:	371c      	adds	r7, #28
 801af22:	46bd      	mov	sp, r7
 801af24:	bd90      	pop	{r4, r7, pc}
 801af26:	bf00      	nop
 801af28:	08023304 	.word	0x08023304
 801af2c:	08023a88 	.word	0x08023a88
 801af30:	08023358 	.word	0x08023358
 801af34:	08023aa4 	.word	0x08023aa4

0801af38 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801af38:	b590      	push	{r4, r7, lr}
 801af3a:	b087      	sub	sp, #28
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801af40:	2300      	movs	r3, #0
 801af42:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801af44:	2300      	movs	r3, #0
 801af46:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d106      	bne.n	801af5c <tcp_send_empty_ack+0x24>
 801af4e:	4b28      	ldr	r3, [pc, #160]	@ (801aff0 <tcp_send_empty_ack+0xb8>)
 801af50:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801af54:	4927      	ldr	r1, [pc, #156]	@ (801aff4 <tcp_send_empty_ack+0xbc>)
 801af56:	4828      	ldr	r0, [pc, #160]	@ (801aff8 <tcp_send_empty_ack+0xc0>)
 801af58:	f005 f874 	bl	8020044 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801af5c:	7dfb      	ldrb	r3, [r7, #23]
 801af5e:	009b      	lsls	r3, r3, #2
 801af60:	b2db      	uxtb	r3, r3
 801af62:	f003 0304 	and.w	r3, r3, #4
 801af66:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801af68:	7d7b      	ldrb	r3, [r7, #21]
 801af6a:	b29c      	uxth	r4, r3
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801af70:	4618      	mov	r0, r3
 801af72:	f7f8 f961 	bl	8013238 <lwip_htonl>
 801af76:	4603      	mov	r3, r0
 801af78:	2200      	movs	r2, #0
 801af7a:	4621      	mov	r1, r4
 801af7c:	6878      	ldr	r0, [r7, #4]
 801af7e:	f7ff feb9 	bl	801acf4 <tcp_output_alloc_header>
 801af82:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801af84:	693b      	ldr	r3, [r7, #16]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d109      	bne.n	801af9e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	8b5b      	ldrh	r3, [r3, #26]
 801af8e:	f043 0303 	orr.w	r3, r3, #3
 801af92:	b29a      	uxth	r2, r3
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801af98:	f06f 0301 	mvn.w	r3, #1
 801af9c:	e023      	b.n	801afe6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801af9e:	7dbb      	ldrb	r3, [r7, #22]
 801afa0:	7dfa      	ldrb	r2, [r7, #23]
 801afa2:	6939      	ldr	r1, [r7, #16]
 801afa4:	6878      	ldr	r0, [r7, #4]
 801afa6:	f7ff fee3 	bl	801ad70 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801afaa:	687a      	ldr	r2, [r7, #4]
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	3304      	adds	r3, #4
 801afb0:	6939      	ldr	r1, [r7, #16]
 801afb2:	6878      	ldr	r0, [r7, #4]
 801afb4:	f7ff ff1a 	bl	801adec <tcp_output_control_segment>
 801afb8:	4603      	mov	r3, r0
 801afba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801afbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d007      	beq.n	801afd4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	8b5b      	ldrh	r3, [r3, #26]
 801afc8:	f043 0303 	orr.w	r3, r3, #3
 801afcc:	b29a      	uxth	r2, r3
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	835a      	strh	r2, [r3, #26]
 801afd2:	e006      	b.n	801afe2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	8b5b      	ldrh	r3, [r3, #26]
 801afd8:	f023 0303 	bic.w	r3, r3, #3
 801afdc:	b29a      	uxth	r2, r3
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801afe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801afe6:	4618      	mov	r0, r3
 801afe8:	371c      	adds	r7, #28
 801afea:	46bd      	mov	sp, r7
 801afec:	bd90      	pop	{r4, r7, pc}
 801afee:	bf00      	nop
 801aff0:	08023304 	.word	0x08023304
 801aff4:	08023ac0 	.word	0x08023ac0
 801aff8:	08023358 	.word	0x08023358

0801affc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801affc:	b590      	push	{r4, r7, lr}
 801affe:	b087      	sub	sp, #28
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b004:	2300      	movs	r3, #0
 801b006:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d106      	bne.n	801b01c <tcp_keepalive+0x20>
 801b00e:	4b18      	ldr	r3, [pc, #96]	@ (801b070 <tcp_keepalive+0x74>)
 801b010:	f640 0224 	movw	r2, #2084	@ 0x824
 801b014:	4917      	ldr	r1, [pc, #92]	@ (801b074 <tcp_keepalive+0x78>)
 801b016:	4818      	ldr	r0, [pc, #96]	@ (801b078 <tcp_keepalive+0x7c>)
 801b018:	f005 f814 	bl	8020044 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b01c:	7dfb      	ldrb	r3, [r7, #23]
 801b01e:	b29c      	uxth	r4, r3
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b024:	3b01      	subs	r3, #1
 801b026:	4618      	mov	r0, r3
 801b028:	f7f8 f906 	bl	8013238 <lwip_htonl>
 801b02c:	4603      	mov	r3, r0
 801b02e:	2200      	movs	r2, #0
 801b030:	4621      	mov	r1, r4
 801b032:	6878      	ldr	r0, [r7, #4]
 801b034:	f7ff fe5e 	bl	801acf4 <tcp_output_alloc_header>
 801b038:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b03a:	693b      	ldr	r3, [r7, #16]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d102      	bne.n	801b046 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b040:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b044:	e010      	b.n	801b068 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b046:	7dfb      	ldrb	r3, [r7, #23]
 801b048:	2200      	movs	r2, #0
 801b04a:	6939      	ldr	r1, [r7, #16]
 801b04c:	6878      	ldr	r0, [r7, #4]
 801b04e:	f7ff fe8f 	bl	801ad70 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b052:	687a      	ldr	r2, [r7, #4]
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	3304      	adds	r3, #4
 801b058:	6939      	ldr	r1, [r7, #16]
 801b05a:	6878      	ldr	r0, [r7, #4]
 801b05c:	f7ff fec6 	bl	801adec <tcp_output_control_segment>
 801b060:	4603      	mov	r3, r0
 801b062:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b068:	4618      	mov	r0, r3
 801b06a:	371c      	adds	r7, #28
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd90      	pop	{r4, r7, pc}
 801b070:	08023304 	.word	0x08023304
 801b074:	08023ae0 	.word	0x08023ae0
 801b078:	08023358 	.word	0x08023358

0801b07c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b07c:	b590      	push	{r4, r7, lr}
 801b07e:	b08b      	sub	sp, #44	@ 0x2c
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b084:	2300      	movs	r3, #0
 801b086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d106      	bne.n	801b09e <tcp_zero_window_probe+0x22>
 801b090:	4b4c      	ldr	r3, [pc, #304]	@ (801b1c4 <tcp_zero_window_probe+0x148>)
 801b092:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b096:	494c      	ldr	r1, [pc, #304]	@ (801b1c8 <tcp_zero_window_probe+0x14c>)
 801b098:	484c      	ldr	r0, [pc, #304]	@ (801b1cc <tcp_zero_window_probe+0x150>)
 801b09a:	f004 ffd3 	bl	8020044 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b0a4:	6a3b      	ldr	r3, [r7, #32]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d101      	bne.n	801b0ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b0aa:	2300      	movs	r3, #0
 801b0ac:	e086      	b.n	801b1bc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b0b4:	2bff      	cmp	r3, #255	@ 0xff
 801b0b6:	d007      	beq.n	801b0c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b0be:	3301      	adds	r3, #1
 801b0c0:	b2da      	uxtb	r2, r3
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b0c8:	6a3b      	ldr	r3, [r7, #32]
 801b0ca:	68db      	ldr	r3, [r3, #12]
 801b0cc:	899b      	ldrh	r3, [r3, #12]
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	f7f8 f89b 	bl	801320c <lwip_htons>
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	b2db      	uxtb	r3, r3
 801b0da:	f003 0301 	and.w	r3, r3, #1
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d005      	beq.n	801b0ee <tcp_zero_window_probe+0x72>
 801b0e2:	6a3b      	ldr	r3, [r7, #32]
 801b0e4:	891b      	ldrh	r3, [r3, #8]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d101      	bne.n	801b0ee <tcp_zero_window_probe+0x72>
 801b0ea:	2301      	movs	r3, #1
 801b0ec:	e000      	b.n	801b0f0 <tcp_zero_window_probe+0x74>
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b0f2:	7ffb      	ldrb	r3, [r7, #31]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	bf0c      	ite	eq
 801b0f8:	2301      	moveq	r3, #1
 801b0fa:	2300      	movne	r3, #0
 801b0fc:	b2db      	uxtb	r3, r3
 801b0fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b104:	b299      	uxth	r1, r3
 801b106:	6a3b      	ldr	r3, [r7, #32]
 801b108:	68db      	ldr	r3, [r3, #12]
 801b10a:	685b      	ldr	r3, [r3, #4]
 801b10c:	8bba      	ldrh	r2, [r7, #28]
 801b10e:	6878      	ldr	r0, [r7, #4]
 801b110:	f7ff fdf0 	bl	801acf4 <tcp_output_alloc_header>
 801b114:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b116:	69bb      	ldr	r3, [r7, #24]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d102      	bne.n	801b122 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b11c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b120:	e04c      	b.n	801b1bc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b122:	69bb      	ldr	r3, [r7, #24]
 801b124:	685b      	ldr	r3, [r3, #4]
 801b126:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b128:	7ffb      	ldrb	r3, [r7, #31]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d011      	beq.n	801b152 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b12e:	697b      	ldr	r3, [r7, #20]
 801b130:	899b      	ldrh	r3, [r3, #12]
 801b132:	b29b      	uxth	r3, r3
 801b134:	b21b      	sxth	r3, r3
 801b136:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b13a:	b21c      	sxth	r4, r3
 801b13c:	2011      	movs	r0, #17
 801b13e:	f7f8 f865 	bl	801320c <lwip_htons>
 801b142:	4603      	mov	r3, r0
 801b144:	b21b      	sxth	r3, r3
 801b146:	4323      	orrs	r3, r4
 801b148:	b21b      	sxth	r3, r3
 801b14a:	b29a      	uxth	r2, r3
 801b14c:	697b      	ldr	r3, [r7, #20]
 801b14e:	819a      	strh	r2, [r3, #12]
 801b150:	e010      	b.n	801b174 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b152:	69bb      	ldr	r3, [r7, #24]
 801b154:	685b      	ldr	r3, [r3, #4]
 801b156:	3314      	adds	r3, #20
 801b158:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b15a:	6a3b      	ldr	r3, [r7, #32]
 801b15c:	6858      	ldr	r0, [r3, #4]
 801b15e:	6a3b      	ldr	r3, [r7, #32]
 801b160:	685b      	ldr	r3, [r3, #4]
 801b162:	891a      	ldrh	r2, [r3, #8]
 801b164:	6a3b      	ldr	r3, [r7, #32]
 801b166:	891b      	ldrh	r3, [r3, #8]
 801b168:	1ad3      	subs	r3, r2, r3
 801b16a:	b29b      	uxth	r3, r3
 801b16c:	2201      	movs	r2, #1
 801b16e:	6939      	ldr	r1, [r7, #16]
 801b170:	f7f9 ff10 	bl	8014f94 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b174:	6a3b      	ldr	r3, [r7, #32]
 801b176:	68db      	ldr	r3, [r3, #12]
 801b178:	685b      	ldr	r3, [r3, #4]
 801b17a:	4618      	mov	r0, r3
 801b17c:	f7f8 f85c 	bl	8013238 <lwip_htonl>
 801b180:	4603      	mov	r3, r0
 801b182:	3301      	adds	r3, #1
 801b184:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	1ad3      	subs	r3, r2, r3
 801b18e:	2b00      	cmp	r3, #0
 801b190:	da02      	bge.n	801b198 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	68fa      	ldr	r2, [r7, #12]
 801b196:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b19c:	2200      	movs	r2, #0
 801b19e:	69b9      	ldr	r1, [r7, #24]
 801b1a0:	6878      	ldr	r0, [r7, #4]
 801b1a2:	f7ff fde5 	bl	801ad70 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b1a6:	687a      	ldr	r2, [r7, #4]
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	3304      	adds	r3, #4
 801b1ac:	69b9      	ldr	r1, [r7, #24]
 801b1ae:	6878      	ldr	r0, [r7, #4]
 801b1b0:	f7ff fe1c 	bl	801adec <tcp_output_control_segment>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b1b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b1bc:	4618      	mov	r0, r3
 801b1be:	372c      	adds	r7, #44	@ 0x2c
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bd90      	pop	{r4, r7, pc}
 801b1c4:	08023304 	.word	0x08023304
 801b1c8:	08023afc 	.word	0x08023afc
 801b1cc:	08023358 	.word	0x08023358

0801b1d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	b082      	sub	sp, #8
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b1d8:	f7f9 ffd2 	bl	8015180 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b1dc:	4b0a      	ldr	r3, [pc, #40]	@ (801b208 <tcpip_tcp_timer+0x38>)
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d103      	bne.n	801b1ec <tcpip_tcp_timer+0x1c>
 801b1e4:	4b09      	ldr	r3, [pc, #36]	@ (801b20c <tcpip_tcp_timer+0x3c>)
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d005      	beq.n	801b1f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b1ec:	2200      	movs	r2, #0
 801b1ee:	4908      	ldr	r1, [pc, #32]	@ (801b210 <tcpip_tcp_timer+0x40>)
 801b1f0:	20fa      	movs	r0, #250	@ 0xfa
 801b1f2:	f000 f8f3 	bl	801b3dc <sys_timeout>
 801b1f6:	e003      	b.n	801b200 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b1f8:	4b06      	ldr	r3, [pc, #24]	@ (801b214 <tcpip_tcp_timer+0x44>)
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	601a      	str	r2, [r3, #0]
  }
}
 801b1fe:	bf00      	nop
 801b200:	bf00      	nop
 801b202:	3708      	adds	r7, #8
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}
 801b208:	2002d3b8 	.word	0x2002d3b8
 801b20c:	2002d3bc 	.word	0x2002d3bc
 801b210:	0801b1d1 	.word	0x0801b1d1
 801b214:	2002d404 	.word	0x2002d404

0801b218 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b21c:	4b0a      	ldr	r3, [pc, #40]	@ (801b248 <tcp_timer_needed+0x30>)
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d10f      	bne.n	801b244 <tcp_timer_needed+0x2c>
 801b224:	4b09      	ldr	r3, [pc, #36]	@ (801b24c <tcp_timer_needed+0x34>)
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d103      	bne.n	801b234 <tcp_timer_needed+0x1c>
 801b22c:	4b08      	ldr	r3, [pc, #32]	@ (801b250 <tcp_timer_needed+0x38>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	2b00      	cmp	r3, #0
 801b232:	d007      	beq.n	801b244 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b234:	4b04      	ldr	r3, [pc, #16]	@ (801b248 <tcp_timer_needed+0x30>)
 801b236:	2201      	movs	r2, #1
 801b238:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b23a:	2200      	movs	r2, #0
 801b23c:	4905      	ldr	r1, [pc, #20]	@ (801b254 <tcp_timer_needed+0x3c>)
 801b23e:	20fa      	movs	r0, #250	@ 0xfa
 801b240:	f000 f8cc 	bl	801b3dc <sys_timeout>
  }
}
 801b244:	bf00      	nop
 801b246:	bd80      	pop	{r7, pc}
 801b248:	2002d404 	.word	0x2002d404
 801b24c:	2002d3b8 	.word	0x2002d3b8
 801b250:	2002d3bc 	.word	0x2002d3bc
 801b254:	0801b1d1 	.word	0x0801b1d1

0801b258 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b258:	b580      	push	{r7, lr}
 801b25a:	b086      	sub	sp, #24
 801b25c:	af00      	add	r7, sp, #0
 801b25e:	60f8      	str	r0, [r7, #12]
 801b260:	60b9      	str	r1, [r7, #8]
 801b262:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b264:	200a      	movs	r0, #10
 801b266:	f7f8 fd6f 	bl	8013d48 <memp_malloc>
 801b26a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b26c:	693b      	ldr	r3, [r7, #16]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d109      	bne.n	801b286 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b272:	693b      	ldr	r3, [r7, #16]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d151      	bne.n	801b31c <sys_timeout_abs+0xc4>
 801b278:	4b2a      	ldr	r3, [pc, #168]	@ (801b324 <sys_timeout_abs+0xcc>)
 801b27a:	22be      	movs	r2, #190	@ 0xbe
 801b27c:	492a      	ldr	r1, [pc, #168]	@ (801b328 <sys_timeout_abs+0xd0>)
 801b27e:	482b      	ldr	r0, [pc, #172]	@ (801b32c <sys_timeout_abs+0xd4>)
 801b280:	f004 fee0 	bl	8020044 <iprintf>
    return;
 801b284:	e04a      	b.n	801b31c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b286:	693b      	ldr	r3, [r7, #16]
 801b288:	2200      	movs	r2, #0
 801b28a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b28c:	693b      	ldr	r3, [r7, #16]
 801b28e:	68ba      	ldr	r2, [r7, #8]
 801b290:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	687a      	ldr	r2, [r7, #4]
 801b296:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b298:	693b      	ldr	r3, [r7, #16]
 801b29a:	68fa      	ldr	r2, [r7, #12]
 801b29c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b29e:	4b24      	ldr	r3, [pc, #144]	@ (801b330 <sys_timeout_abs+0xd8>)
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d103      	bne.n	801b2ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b2a6:	4a22      	ldr	r2, [pc, #136]	@ (801b330 <sys_timeout_abs+0xd8>)
 801b2a8:	693b      	ldr	r3, [r7, #16]
 801b2aa:	6013      	str	r3, [r2, #0]
    return;
 801b2ac:	e037      	b.n	801b31e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b2ae:	693b      	ldr	r3, [r7, #16]
 801b2b0:	685a      	ldr	r2, [r3, #4]
 801b2b2:	4b1f      	ldr	r3, [pc, #124]	@ (801b330 <sys_timeout_abs+0xd8>)
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	685b      	ldr	r3, [r3, #4]
 801b2b8:	1ad3      	subs	r3, r2, r3
 801b2ba:	0fdb      	lsrs	r3, r3, #31
 801b2bc:	f003 0301 	and.w	r3, r3, #1
 801b2c0:	b2db      	uxtb	r3, r3
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d007      	beq.n	801b2d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b2c6:	4b1a      	ldr	r3, [pc, #104]	@ (801b330 <sys_timeout_abs+0xd8>)
 801b2c8:	681a      	ldr	r2, [r3, #0]
 801b2ca:	693b      	ldr	r3, [r7, #16]
 801b2cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b2ce:	4a18      	ldr	r2, [pc, #96]	@ (801b330 <sys_timeout_abs+0xd8>)
 801b2d0:	693b      	ldr	r3, [r7, #16]
 801b2d2:	6013      	str	r3, [r2, #0]
 801b2d4:	e023      	b.n	801b31e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b2d6:	4b16      	ldr	r3, [pc, #88]	@ (801b330 <sys_timeout_abs+0xd8>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	617b      	str	r3, [r7, #20]
 801b2dc:	e01a      	b.n	801b314 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b2de:	697b      	ldr	r3, [r7, #20]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d00b      	beq.n	801b2fe <sys_timeout_abs+0xa6>
 801b2e6:	693b      	ldr	r3, [r7, #16]
 801b2e8:	685a      	ldr	r2, [r3, #4]
 801b2ea:	697b      	ldr	r3, [r7, #20]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	685b      	ldr	r3, [r3, #4]
 801b2f0:	1ad3      	subs	r3, r2, r3
 801b2f2:	0fdb      	lsrs	r3, r3, #31
 801b2f4:	f003 0301 	and.w	r3, r3, #1
 801b2f8:	b2db      	uxtb	r3, r3
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d007      	beq.n	801b30e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b2fe:	697b      	ldr	r3, [r7, #20]
 801b300:	681a      	ldr	r2, [r3, #0]
 801b302:	693b      	ldr	r3, [r7, #16]
 801b304:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b306:	697b      	ldr	r3, [r7, #20]
 801b308:	693a      	ldr	r2, [r7, #16]
 801b30a:	601a      	str	r2, [r3, #0]
        break;
 801b30c:	e007      	b.n	801b31e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	617b      	str	r3, [r7, #20]
 801b314:	697b      	ldr	r3, [r7, #20]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d1e1      	bne.n	801b2de <sys_timeout_abs+0x86>
 801b31a:	e000      	b.n	801b31e <sys_timeout_abs+0xc6>
    return;
 801b31c:	bf00      	nop
      }
    }
  }
}
 801b31e:	3718      	adds	r7, #24
 801b320:	46bd      	mov	sp, r7
 801b322:	bd80      	pop	{r7, pc}
 801b324:	08023b20 	.word	0x08023b20
 801b328:	08023b54 	.word	0x08023b54
 801b32c:	08023b94 	.word	0x08023b94
 801b330:	2002d3fc 	.word	0x2002d3fc

0801b334 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b334:	b580      	push	{r7, lr}
 801b336:	b086      	sub	sp, #24
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b340:	697b      	ldr	r3, [r7, #20]
 801b342:	685b      	ldr	r3, [r3, #4]
 801b344:	4798      	blx	r3

  now = sys_now();
 801b346:	f7f1 fba7 	bl	800ca98 <sys_now>
 801b34a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	681a      	ldr	r2, [r3, #0]
 801b350:	4b0f      	ldr	r3, [pc, #60]	@ (801b390 <lwip_cyclic_timer+0x5c>)
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	4413      	add	r3, r2
 801b356:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b358:	68fa      	ldr	r2, [r7, #12]
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	1ad3      	subs	r3, r2, r3
 801b35e:	0fdb      	lsrs	r3, r3, #31
 801b360:	f003 0301 	and.w	r3, r3, #1
 801b364:	b2db      	uxtb	r3, r3
 801b366:	2b00      	cmp	r3, #0
 801b368:	d009      	beq.n	801b37e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b36a:	697b      	ldr	r3, [r7, #20]
 801b36c:	681a      	ldr	r2, [r3, #0]
 801b36e:	693b      	ldr	r3, [r7, #16]
 801b370:	4413      	add	r3, r2
 801b372:	687a      	ldr	r2, [r7, #4]
 801b374:	4907      	ldr	r1, [pc, #28]	@ (801b394 <lwip_cyclic_timer+0x60>)
 801b376:	4618      	mov	r0, r3
 801b378:	f7ff ff6e 	bl	801b258 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b37c:	e004      	b.n	801b388 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b37e:	687a      	ldr	r2, [r7, #4]
 801b380:	4904      	ldr	r1, [pc, #16]	@ (801b394 <lwip_cyclic_timer+0x60>)
 801b382:	68f8      	ldr	r0, [r7, #12]
 801b384:	f7ff ff68 	bl	801b258 <sys_timeout_abs>
}
 801b388:	bf00      	nop
 801b38a:	3718      	adds	r7, #24
 801b38c:	46bd      	mov	sp, r7
 801b38e:	bd80      	pop	{r7, pc}
 801b390:	2002d400 	.word	0x2002d400
 801b394:	0801b335 	.word	0x0801b335

0801b398 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b398:	b580      	push	{r7, lr}
 801b39a:	b082      	sub	sp, #8
 801b39c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b39e:	2301      	movs	r3, #1
 801b3a0:	607b      	str	r3, [r7, #4]
 801b3a2:	e00e      	b.n	801b3c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b3a4:	4a0b      	ldr	r2, [pc, #44]	@ (801b3d4 <sys_timeouts_init+0x3c>)
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	00db      	lsls	r3, r3, #3
 801b3b0:	4a08      	ldr	r2, [pc, #32]	@ (801b3d4 <sys_timeouts_init+0x3c>)
 801b3b2:	4413      	add	r3, r2
 801b3b4:	461a      	mov	r2, r3
 801b3b6:	4908      	ldr	r1, [pc, #32]	@ (801b3d8 <sys_timeouts_init+0x40>)
 801b3b8:	f000 f810 	bl	801b3dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	3301      	adds	r3, #1
 801b3c0:	607b      	str	r3, [r7, #4]
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	2b02      	cmp	r3, #2
 801b3c6:	d9ed      	bls.n	801b3a4 <sys_timeouts_init+0xc>
  }
}
 801b3c8:	bf00      	nop
 801b3ca:	bf00      	nop
 801b3cc:	3708      	adds	r7, #8
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bd80      	pop	{r7, pc}
 801b3d2:	bf00      	nop
 801b3d4:	08024da0 	.word	0x08024da0
 801b3d8:	0801b335 	.word	0x0801b335

0801b3dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b086      	sub	sp, #24
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	60f8      	str	r0, [r7, #12]
 801b3e4:	60b9      	str	r1, [r7, #8]
 801b3e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b3ee:	d306      	bcc.n	801b3fe <sys_timeout+0x22>
 801b3f0:	4b0a      	ldr	r3, [pc, #40]	@ (801b41c <sys_timeout+0x40>)
 801b3f2:	f240 1229 	movw	r2, #297	@ 0x129
 801b3f6:	490a      	ldr	r1, [pc, #40]	@ (801b420 <sys_timeout+0x44>)
 801b3f8:	480a      	ldr	r0, [pc, #40]	@ (801b424 <sys_timeout+0x48>)
 801b3fa:	f004 fe23 	bl	8020044 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b3fe:	f7f1 fb4b 	bl	800ca98 <sys_now>
 801b402:	4602      	mov	r2, r0
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	4413      	add	r3, r2
 801b408:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b40a:	687a      	ldr	r2, [r7, #4]
 801b40c:	68b9      	ldr	r1, [r7, #8]
 801b40e:	6978      	ldr	r0, [r7, #20]
 801b410:	f7ff ff22 	bl	801b258 <sys_timeout_abs>
#endif
}
 801b414:	bf00      	nop
 801b416:	3718      	adds	r7, #24
 801b418:	46bd      	mov	sp, r7
 801b41a:	bd80      	pop	{r7, pc}
 801b41c:	08023b20 	.word	0x08023b20
 801b420:	08023bbc 	.word	0x08023bbc
 801b424:	08023b94 	.word	0x08023b94

0801b428 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b084      	sub	sp, #16
 801b42c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b42e:	f7f1 fb33 	bl	800ca98 <sys_now>
 801b432:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b434:	4b17      	ldr	r3, [pc, #92]	@ (801b494 <sys_check_timeouts+0x6c>)
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b43a:	68bb      	ldr	r3, [r7, #8]
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d022      	beq.n	801b486 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	685b      	ldr	r3, [r3, #4]
 801b444:	68fa      	ldr	r2, [r7, #12]
 801b446:	1ad3      	subs	r3, r2, r3
 801b448:	0fdb      	lsrs	r3, r3, #31
 801b44a:	f003 0301 	and.w	r3, r3, #1
 801b44e:	b2db      	uxtb	r3, r3
 801b450:	2b00      	cmp	r3, #0
 801b452:	d11a      	bne.n	801b48a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b454:	68bb      	ldr	r3, [r7, #8]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	4a0e      	ldr	r2, [pc, #56]	@ (801b494 <sys_check_timeouts+0x6c>)
 801b45a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b45c:	68bb      	ldr	r3, [r7, #8]
 801b45e:	689b      	ldr	r3, [r3, #8]
 801b460:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b462:	68bb      	ldr	r3, [r7, #8]
 801b464:	68db      	ldr	r3, [r3, #12]
 801b466:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b468:	68bb      	ldr	r3, [r7, #8]
 801b46a:	685b      	ldr	r3, [r3, #4]
 801b46c:	4a0a      	ldr	r2, [pc, #40]	@ (801b498 <sys_check_timeouts+0x70>)
 801b46e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b470:	68b9      	ldr	r1, [r7, #8]
 801b472:	200a      	movs	r0, #10
 801b474:	f7f8 fce4 	bl	8013e40 <memp_free>
    if (handler != NULL) {
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d0da      	beq.n	801b434 <sys_check_timeouts+0xc>
      handler(arg);
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	6838      	ldr	r0, [r7, #0]
 801b482:	4798      	blx	r3
  do {
 801b484:	e7d6      	b.n	801b434 <sys_check_timeouts+0xc>
      return;
 801b486:	bf00      	nop
 801b488:	e000      	b.n	801b48c <sys_check_timeouts+0x64>
      return;
 801b48a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b48c:	3710      	adds	r7, #16
 801b48e:	46bd      	mov	sp, r7
 801b490:	bd80      	pop	{r7, pc}
 801b492:	bf00      	nop
 801b494:	2002d3fc 	.word	0x2002d3fc
 801b498:	2002d400 	.word	0x2002d400

0801b49c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b082      	sub	sp, #8
 801b4a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b4a2:	4b16      	ldr	r3, [pc, #88]	@ (801b4fc <sys_timeouts_sleeptime+0x60>)
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d102      	bne.n	801b4b0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b4aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b4ae:	e020      	b.n	801b4f2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b4b0:	f7f1 faf2 	bl	800ca98 <sys_now>
 801b4b4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b4b6:	4b11      	ldr	r3, [pc, #68]	@ (801b4fc <sys_timeouts_sleeptime+0x60>)
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	685a      	ldr	r2, [r3, #4]
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	1ad3      	subs	r3, r2, r3
 801b4c0:	0fdb      	lsrs	r3, r3, #31
 801b4c2:	f003 0301 	and.w	r3, r3, #1
 801b4c6:	b2db      	uxtb	r3, r3
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d001      	beq.n	801b4d0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	e010      	b.n	801b4f2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b4d0:	4b0a      	ldr	r3, [pc, #40]	@ (801b4fc <sys_timeouts_sleeptime+0x60>)
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	685a      	ldr	r2, [r3, #4]
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	1ad3      	subs	r3, r2, r3
 801b4da:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b4dc:	683b      	ldr	r3, [r7, #0]
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	da06      	bge.n	801b4f0 <sys_timeouts_sleeptime+0x54>
 801b4e2:	4b07      	ldr	r3, [pc, #28]	@ (801b500 <sys_timeouts_sleeptime+0x64>)
 801b4e4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801b4e8:	4906      	ldr	r1, [pc, #24]	@ (801b504 <sys_timeouts_sleeptime+0x68>)
 801b4ea:	4807      	ldr	r0, [pc, #28]	@ (801b508 <sys_timeouts_sleeptime+0x6c>)
 801b4ec:	f004 fdaa 	bl	8020044 <iprintf>
    return ret;
 801b4f0:	683b      	ldr	r3, [r7, #0]
  }
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3708      	adds	r7, #8
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}
 801b4fa:	bf00      	nop
 801b4fc:	2002d3fc 	.word	0x2002d3fc
 801b500:	08023b20 	.word	0x08023b20
 801b504:	08023bf4 	.word	0x08023bf4
 801b508:	08023b94 	.word	0x08023b94

0801b50c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b50c:	b580      	push	{r7, lr}
 801b50e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b510:	f004 fc98 	bl	801fe44 <rand>
 801b514:	4603      	mov	r3, r0
 801b516:	b29b      	uxth	r3, r3
 801b518:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b51c:	b29b      	uxth	r3, r3
 801b51e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b522:	b29a      	uxth	r2, r3
 801b524:	4b01      	ldr	r3, [pc, #4]	@ (801b52c <udp_init+0x20>)
 801b526:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b528:	bf00      	nop
 801b52a:	bd80      	pop	{r7, pc}
 801b52c:	2000002c 	.word	0x2000002c

0801b530 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b530:	b480      	push	{r7}
 801b532:	b083      	sub	sp, #12
 801b534:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b536:	2300      	movs	r3, #0
 801b538:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b53a:	4b17      	ldr	r3, [pc, #92]	@ (801b598 <udp_new_port+0x68>)
 801b53c:	881b      	ldrh	r3, [r3, #0]
 801b53e:	1c5a      	adds	r2, r3, #1
 801b540:	b291      	uxth	r1, r2
 801b542:	4a15      	ldr	r2, [pc, #84]	@ (801b598 <udp_new_port+0x68>)
 801b544:	8011      	strh	r1, [r2, #0]
 801b546:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b54a:	4293      	cmp	r3, r2
 801b54c:	d103      	bne.n	801b556 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b54e:	4b12      	ldr	r3, [pc, #72]	@ (801b598 <udp_new_port+0x68>)
 801b550:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b554:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b556:	4b11      	ldr	r3, [pc, #68]	@ (801b59c <udp_new_port+0x6c>)
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	603b      	str	r3, [r7, #0]
 801b55c:	e011      	b.n	801b582 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b55e:	683b      	ldr	r3, [r7, #0]
 801b560:	8a5a      	ldrh	r2, [r3, #18]
 801b562:	4b0d      	ldr	r3, [pc, #52]	@ (801b598 <udp_new_port+0x68>)
 801b564:	881b      	ldrh	r3, [r3, #0]
 801b566:	429a      	cmp	r2, r3
 801b568:	d108      	bne.n	801b57c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b56a:	88fb      	ldrh	r3, [r7, #6]
 801b56c:	3301      	adds	r3, #1
 801b56e:	80fb      	strh	r3, [r7, #6]
 801b570:	88fb      	ldrh	r3, [r7, #6]
 801b572:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b576:	d3e0      	bcc.n	801b53a <udp_new_port+0xa>
        return 0;
 801b578:	2300      	movs	r3, #0
 801b57a:	e007      	b.n	801b58c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b57c:	683b      	ldr	r3, [r7, #0]
 801b57e:	68db      	ldr	r3, [r3, #12]
 801b580:	603b      	str	r3, [r7, #0]
 801b582:	683b      	ldr	r3, [r7, #0]
 801b584:	2b00      	cmp	r3, #0
 801b586:	d1ea      	bne.n	801b55e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b588:	4b03      	ldr	r3, [pc, #12]	@ (801b598 <udp_new_port+0x68>)
 801b58a:	881b      	ldrh	r3, [r3, #0]
}
 801b58c:	4618      	mov	r0, r3
 801b58e:	370c      	adds	r7, #12
 801b590:	46bd      	mov	sp, r7
 801b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b596:	4770      	bx	lr
 801b598:	2000002c 	.word	0x2000002c
 801b59c:	2002d408 	.word	0x2002d408

0801b5a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b5a0:	b580      	push	{r7, lr}
 801b5a2:	b084      	sub	sp, #16
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	60f8      	str	r0, [r7, #12]
 801b5a8:	60b9      	str	r1, [r7, #8]
 801b5aa:	4613      	mov	r3, r2
 801b5ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d105      	bne.n	801b5c0 <udp_input_local_match+0x20>
 801b5b4:	4b27      	ldr	r3, [pc, #156]	@ (801b654 <udp_input_local_match+0xb4>)
 801b5b6:	2287      	movs	r2, #135	@ 0x87
 801b5b8:	4927      	ldr	r1, [pc, #156]	@ (801b658 <udp_input_local_match+0xb8>)
 801b5ba:	4828      	ldr	r0, [pc, #160]	@ (801b65c <udp_input_local_match+0xbc>)
 801b5bc:	f004 fd42 	bl	8020044 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b5c0:	68bb      	ldr	r3, [r7, #8]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d105      	bne.n	801b5d2 <udp_input_local_match+0x32>
 801b5c6:	4b23      	ldr	r3, [pc, #140]	@ (801b654 <udp_input_local_match+0xb4>)
 801b5c8:	2288      	movs	r2, #136	@ 0x88
 801b5ca:	4925      	ldr	r1, [pc, #148]	@ (801b660 <udp_input_local_match+0xc0>)
 801b5cc:	4823      	ldr	r0, [pc, #140]	@ (801b65c <udp_input_local_match+0xbc>)
 801b5ce:	f004 fd39 	bl	8020044 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	7a1b      	ldrb	r3, [r3, #8]
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d00b      	beq.n	801b5f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	7a1a      	ldrb	r2, [r3, #8]
 801b5de:	4b21      	ldr	r3, [pc, #132]	@ (801b664 <udp_input_local_match+0xc4>)
 801b5e0:	685b      	ldr	r3, [r3, #4]
 801b5e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b5e6:	3301      	adds	r3, #1
 801b5e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b5ea:	429a      	cmp	r2, r3
 801b5ec:	d001      	beq.n	801b5f2 <udp_input_local_match+0x52>
    return 0;
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	e02b      	b.n	801b64a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b5f2:	79fb      	ldrb	r3, [r7, #7]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d018      	beq.n	801b62a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d013      	beq.n	801b626 <udp_input_local_match+0x86>
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d00f      	beq.n	801b626 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b606:	4b17      	ldr	r3, [pc, #92]	@ (801b664 <udp_input_local_match+0xc4>)
 801b608:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b60a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b60e:	d00a      	beq.n	801b626 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	681a      	ldr	r2, [r3, #0]
 801b614:	4b13      	ldr	r3, [pc, #76]	@ (801b664 <udp_input_local_match+0xc4>)
 801b616:	695b      	ldr	r3, [r3, #20]
 801b618:	405a      	eors	r2, r3
 801b61a:	68bb      	ldr	r3, [r7, #8]
 801b61c:	3308      	adds	r3, #8
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b622:	2b00      	cmp	r3, #0
 801b624:	d110      	bne.n	801b648 <udp_input_local_match+0xa8>
          return 1;
 801b626:	2301      	movs	r3, #1
 801b628:	e00f      	b.n	801b64a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d009      	beq.n	801b644 <udp_input_local_match+0xa4>
 801b630:	68fb      	ldr	r3, [r7, #12]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	2b00      	cmp	r3, #0
 801b636:	d005      	beq.n	801b644 <udp_input_local_match+0xa4>
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	681a      	ldr	r2, [r3, #0]
 801b63c:	4b09      	ldr	r3, [pc, #36]	@ (801b664 <udp_input_local_match+0xc4>)
 801b63e:	695b      	ldr	r3, [r3, #20]
 801b640:	429a      	cmp	r2, r3
 801b642:	d101      	bne.n	801b648 <udp_input_local_match+0xa8>
        return 1;
 801b644:	2301      	movs	r3, #1
 801b646:	e000      	b.n	801b64a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b648:	2300      	movs	r3, #0
}
 801b64a:	4618      	mov	r0, r3
 801b64c:	3710      	adds	r7, #16
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd80      	pop	{r7, pc}
 801b652:	bf00      	nop
 801b654:	08023c08 	.word	0x08023c08
 801b658:	08023c38 	.word	0x08023c38
 801b65c:	08023c5c 	.word	0x08023c5c
 801b660:	08023c84 	.word	0x08023c84
 801b664:	200270b4 	.word	0x200270b4

0801b668 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b668:	b590      	push	{r4, r7, lr}
 801b66a:	b08d      	sub	sp, #52	@ 0x34
 801b66c:	af02      	add	r7, sp, #8
 801b66e:	6078      	str	r0, [r7, #4]
 801b670:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b672:	2300      	movs	r3, #0
 801b674:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d105      	bne.n	801b688 <udp_input+0x20>
 801b67c:	4b98      	ldr	r3, [pc, #608]	@ (801b8e0 <udp_input+0x278>)
 801b67e:	22cf      	movs	r2, #207	@ 0xcf
 801b680:	4998      	ldr	r1, [pc, #608]	@ (801b8e4 <udp_input+0x27c>)
 801b682:	4899      	ldr	r0, [pc, #612]	@ (801b8e8 <udp_input+0x280>)
 801b684:	f004 fcde 	bl	8020044 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b688:	683b      	ldr	r3, [r7, #0]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d105      	bne.n	801b69a <udp_input+0x32>
 801b68e:	4b94      	ldr	r3, [pc, #592]	@ (801b8e0 <udp_input+0x278>)
 801b690:	22d0      	movs	r2, #208	@ 0xd0
 801b692:	4996      	ldr	r1, [pc, #600]	@ (801b8ec <udp_input+0x284>)
 801b694:	4894      	ldr	r0, [pc, #592]	@ (801b8e8 <udp_input+0x280>)
 801b696:	f004 fcd5 	bl	8020044 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b69a:	4b95      	ldr	r3, [pc, #596]	@ (801b8f0 <udp_input+0x288>)
 801b69c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801b6a0:	3301      	adds	r3, #1
 801b6a2:	b29a      	uxth	r2, r3
 801b6a4:	4b92      	ldr	r3, [pc, #584]	@ (801b8f0 <udp_input+0x288>)
 801b6a6:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	895b      	ldrh	r3, [r3, #10]
 801b6ae:	2b07      	cmp	r3, #7
 801b6b0:	d813      	bhi.n	801b6da <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801b6b2:	4b8f      	ldr	r3, [pc, #572]	@ (801b8f0 <udp_input+0x288>)
 801b6b4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801b6b8:	3301      	adds	r3, #1
 801b6ba:	b29a      	uxth	r2, r3
 801b6bc:	4b8c      	ldr	r3, [pc, #560]	@ (801b8f0 <udp_input+0x288>)
 801b6be:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801b6c2:	4b8b      	ldr	r3, [pc, #556]	@ (801b8f0 <udp_input+0x288>)
 801b6c4:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b6c8:	3301      	adds	r3, #1
 801b6ca:	b29a      	uxth	r2, r3
 801b6cc:	4b88      	ldr	r3, [pc, #544]	@ (801b8f0 <udp_input+0x288>)
 801b6ce:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b6d2:	6878      	ldr	r0, [r7, #4]
 801b6d4:	f7f9 fa58 	bl	8014b88 <pbuf_free>
    goto end;
 801b6d8:	e0fd      	b.n	801b8d6 <udp_input+0x26e>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	685b      	ldr	r3, [r3, #4]
 801b6de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b6e0:	4b84      	ldr	r3, [pc, #528]	@ (801b8f4 <udp_input+0x28c>)
 801b6e2:	695b      	ldr	r3, [r3, #20]
 801b6e4:	4a83      	ldr	r2, [pc, #524]	@ (801b8f4 <udp_input+0x28c>)
 801b6e6:	6812      	ldr	r2, [r2, #0]
 801b6e8:	4611      	mov	r1, r2
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	f002 f8a6 	bl	801d83c <ip4_addr_isbroadcast_u32>
 801b6f0:	4603      	mov	r3, r0
 801b6f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b6f4:	697b      	ldr	r3, [r7, #20]
 801b6f6:	881b      	ldrh	r3, [r3, #0]
 801b6f8:	b29b      	uxth	r3, r3
 801b6fa:	4618      	mov	r0, r3
 801b6fc:	f7f7 fd86 	bl	801320c <lwip_htons>
 801b700:	4603      	mov	r3, r0
 801b702:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b704:	697b      	ldr	r3, [r7, #20]
 801b706:	885b      	ldrh	r3, [r3, #2]
 801b708:	b29b      	uxth	r3, r3
 801b70a:	4618      	mov	r0, r3
 801b70c:	f7f7 fd7e 	bl	801320c <lwip_htons>
 801b710:	4603      	mov	r3, r0
 801b712:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b714:	2300      	movs	r3, #0
 801b716:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b718:	2300      	movs	r3, #0
 801b71a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b71c:	2300      	movs	r3, #0
 801b71e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b720:	4b75      	ldr	r3, [pc, #468]	@ (801b8f8 <udp_input+0x290>)
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	627b      	str	r3, [r7, #36]	@ 0x24
 801b726:	e05d      	b.n	801b7e4 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b72a:	8a5b      	ldrh	r3, [r3, #18]
 801b72c:	89fa      	ldrh	r2, [r7, #14]
 801b72e:	429a      	cmp	r2, r3
 801b730:	d153      	bne.n	801b7da <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b732:	7cfb      	ldrb	r3, [r7, #19]
 801b734:	461a      	mov	r2, r3
 801b736:	6839      	ldr	r1, [r7, #0]
 801b738:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b73a:	f7ff ff31 	bl	801b5a0 <udp_input_local_match>
 801b73e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b740:	2b00      	cmp	r3, #0
 801b742:	d04a      	beq.n	801b7da <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b746:	7c1b      	ldrb	r3, [r3, #16]
 801b748:	f003 0304 	and.w	r3, r3, #4
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d11d      	bne.n	801b78c <udp_input+0x124>
        if (uncon_pcb == NULL) {
 801b750:	69fb      	ldr	r3, [r7, #28]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d102      	bne.n	801b75c <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b758:	61fb      	str	r3, [r7, #28]
 801b75a:	e017      	b.n	801b78c <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b75c:	7cfb      	ldrb	r3, [r7, #19]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d014      	beq.n	801b78c <udp_input+0x124>
 801b762:	4b64      	ldr	r3, [pc, #400]	@ (801b8f4 <udp_input+0x28c>)
 801b764:	695b      	ldr	r3, [r3, #20]
 801b766:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b76a:	d10f      	bne.n	801b78c <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b76c:	69fb      	ldr	r3, [r7, #28]
 801b76e:	681a      	ldr	r2, [r3, #0]
 801b770:	683b      	ldr	r3, [r7, #0]
 801b772:	3304      	adds	r3, #4
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	429a      	cmp	r2, r3
 801b778:	d008      	beq.n	801b78c <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b77c:	681a      	ldr	r2, [r3, #0]
 801b77e:	683b      	ldr	r3, [r7, #0]
 801b780:	3304      	adds	r3, #4
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	429a      	cmp	r2, r3
 801b786:	d101      	bne.n	801b78c <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 801b788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b78a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b78e:	8a9b      	ldrh	r3, [r3, #20]
 801b790:	8a3a      	ldrh	r2, [r7, #16]
 801b792:	429a      	cmp	r2, r3
 801b794:	d121      	bne.n	801b7da <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b798:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d005      	beq.n	801b7aa <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7a0:	685a      	ldr	r2, [r3, #4]
 801b7a2:	4b54      	ldr	r3, [pc, #336]	@ (801b8f4 <udp_input+0x28c>)
 801b7a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b7a6:	429a      	cmp	r2, r3
 801b7a8:	d117      	bne.n	801b7da <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b7aa:	6a3b      	ldr	r3, [r7, #32]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d00b      	beq.n	801b7c8 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7b2:	68da      	ldr	r2, [r3, #12]
 801b7b4:	6a3b      	ldr	r3, [r7, #32]
 801b7b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b7b8:	4b4f      	ldr	r3, [pc, #316]	@ (801b8f8 <udp_input+0x290>)
 801b7ba:	681a      	ldr	r2, [r3, #0]
 801b7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b7c0:	4a4d      	ldr	r2, [pc, #308]	@ (801b8f8 <udp_input+0x290>)
 801b7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b7c6:	e010      	b.n	801b7ea <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 801b7c8:	4b49      	ldr	r3, [pc, #292]	@ (801b8f0 <udp_input+0x288>)
 801b7ca:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801b7ce:	3301      	adds	r3, #1
 801b7d0:	b29a      	uxth	r2, r3
 801b7d2:	4b47      	ldr	r3, [pc, #284]	@ (801b8f0 <udp_input+0x288>)
 801b7d4:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801b7d8:	e007      	b.n	801b7ea <udp_input+0x182>
      }
    }

    prev = pcb;
 801b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7dc:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7e0:	68db      	ldr	r3, [r3, #12]
 801b7e2:	627b      	str	r3, [r7, #36]	@ 0x24
 801b7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d19e      	bne.n	801b728 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d101      	bne.n	801b7f4 <udp_input+0x18c>
    pcb = uncon_pcb;
 801b7f0:	69fb      	ldr	r3, [r7, #28]
 801b7f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d002      	beq.n	801b800 <udp_input+0x198>
    for_us = 1;
 801b7fa:	2301      	movs	r3, #1
 801b7fc:	76fb      	strb	r3, [r7, #27]
 801b7fe:	e00a      	b.n	801b816 <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b800:	683b      	ldr	r3, [r7, #0]
 801b802:	3304      	adds	r3, #4
 801b804:	681a      	ldr	r2, [r3, #0]
 801b806:	4b3b      	ldr	r3, [pc, #236]	@ (801b8f4 <udp_input+0x28c>)
 801b808:	695b      	ldr	r3, [r3, #20]
 801b80a:	429a      	cmp	r2, r3
 801b80c:	bf0c      	ite	eq
 801b80e:	2301      	moveq	r3, #1
 801b810:	2300      	movne	r3, #0
 801b812:	b2db      	uxtb	r3, r3
 801b814:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b816:	7efb      	ldrb	r3, [r7, #27]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d059      	beq.n	801b8d0 <udp_input+0x268>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b81c:	2108      	movs	r1, #8
 801b81e:	6878      	ldr	r0, [r7, #4]
 801b820:	f7f9 f92c 	bl	8014a7c <pbuf_remove_header>
 801b824:	4603      	mov	r3, r0
 801b826:	2b00      	cmp	r3, #0
 801b828:	d012      	beq.n	801b850 <udp_input+0x1e8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b82a:	4b2d      	ldr	r3, [pc, #180]	@ (801b8e0 <udp_input+0x278>)
 801b82c:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801b830:	4932      	ldr	r1, [pc, #200]	@ (801b8fc <udp_input+0x294>)
 801b832:	482d      	ldr	r0, [pc, #180]	@ (801b8e8 <udp_input+0x280>)
 801b834:	f004 fc06 	bl	8020044 <iprintf>
      UDP_STATS_INC(udp.drop);
 801b838:	4b2d      	ldr	r3, [pc, #180]	@ (801b8f0 <udp_input+0x288>)
 801b83a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b83e:	3301      	adds	r3, #1
 801b840:	b29a      	uxth	r2, r3
 801b842:	4b2b      	ldr	r3, [pc, #172]	@ (801b8f0 <udp_input+0x288>)
 801b844:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b848:	6878      	ldr	r0, [r7, #4]
 801b84a:	f7f9 f99d 	bl	8014b88 <pbuf_free>
      goto end;
 801b84e:	e042      	b.n	801b8d6 <udp_input+0x26e>
    }

    if (pcb != NULL) {
 801b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b852:	2b00      	cmp	r3, #0
 801b854:	d012      	beq.n	801b87c <udp_input+0x214>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b858:	699b      	ldr	r3, [r3, #24]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d00a      	beq.n	801b874 <udp_input+0x20c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b860:	699c      	ldr	r4, [r3, #24]
 801b862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b864:	69d8      	ldr	r0, [r3, #28]
 801b866:	8a3b      	ldrh	r3, [r7, #16]
 801b868:	9300      	str	r3, [sp, #0]
 801b86a:	4b25      	ldr	r3, [pc, #148]	@ (801b900 <udp_input+0x298>)
 801b86c:	687a      	ldr	r2, [r7, #4]
 801b86e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b870:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b872:	e031      	b.n	801b8d8 <udp_input+0x270>
        pbuf_free(p);
 801b874:	6878      	ldr	r0, [r7, #4]
 801b876:	f7f9 f987 	bl	8014b88 <pbuf_free>
        goto end;
 801b87a:	e02c      	b.n	801b8d6 <udp_input+0x26e>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b87c:	7cfb      	ldrb	r3, [r7, #19]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d112      	bne.n	801b8a8 <udp_input+0x240>
 801b882:	4b1c      	ldr	r3, [pc, #112]	@ (801b8f4 <udp_input+0x28c>)
 801b884:	695b      	ldr	r3, [r3, #20]
 801b886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b88a:	2be0      	cmp	r3, #224	@ 0xe0
 801b88c:	d00c      	beq.n	801b8a8 <udp_input+0x240>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b88e:	4b19      	ldr	r3, [pc, #100]	@ (801b8f4 <udp_input+0x28c>)
 801b890:	899b      	ldrh	r3, [r3, #12]
 801b892:	3308      	adds	r3, #8
 801b894:	b29b      	uxth	r3, r3
 801b896:	b21b      	sxth	r3, r3
 801b898:	4619      	mov	r1, r3
 801b89a:	6878      	ldr	r0, [r7, #4]
 801b89c:	f7f9 f961 	bl	8014b62 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b8a0:	2103      	movs	r1, #3
 801b8a2:	6878      	ldr	r0, [r7, #4]
 801b8a4:	f001 fc2e 	bl	801d104 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801b8a8:	4b11      	ldr	r3, [pc, #68]	@ (801b8f0 <udp_input+0x288>)
 801b8aa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801b8ae:	3301      	adds	r3, #1
 801b8b0:	b29a      	uxth	r2, r3
 801b8b2:	4b0f      	ldr	r3, [pc, #60]	@ (801b8f0 <udp_input+0x288>)
 801b8b4:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801b8b8:	4b0d      	ldr	r3, [pc, #52]	@ (801b8f0 <udp_input+0x288>)
 801b8ba:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b8be:	3301      	adds	r3, #1
 801b8c0:	b29a      	uxth	r2, r3
 801b8c2:	4b0b      	ldr	r3, [pc, #44]	@ (801b8f0 <udp_input+0x288>)
 801b8c4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801b8c8:	6878      	ldr	r0, [r7, #4]
 801b8ca:	f7f9 f95d 	bl	8014b88 <pbuf_free>
  return;
 801b8ce:	e003      	b.n	801b8d8 <udp_input+0x270>
    pbuf_free(p);
 801b8d0:	6878      	ldr	r0, [r7, #4]
 801b8d2:	f7f9 f959 	bl	8014b88 <pbuf_free>
  return;
 801b8d6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b8d8:	372c      	adds	r7, #44	@ 0x2c
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	bd90      	pop	{r4, r7, pc}
 801b8de:	bf00      	nop
 801b8e0:	08023c08 	.word	0x08023c08
 801b8e4:	08023cac 	.word	0x08023cac
 801b8e8:	08023c5c 	.word	0x08023c5c
 801b8ec:	08023cc4 	.word	0x08023cc4
 801b8f0:	2002d2b0 	.word	0x2002d2b0
 801b8f4:	200270b4 	.word	0x200270b4
 801b8f8:	2002d408 	.word	0x2002d408
 801b8fc:	08023ce0 	.word	0x08023ce0
 801b900:	200270c4 	.word	0x200270c4

0801b904 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b082      	sub	sp, #8
 801b908:	af00      	add	r7, sp, #0
 801b90a:	6078      	str	r0, [r7, #4]
 801b90c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d109      	bne.n	801b928 <udp_send+0x24>
 801b914:	4b11      	ldr	r3, [pc, #68]	@ (801b95c <udp_send+0x58>)
 801b916:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801b91a:	4911      	ldr	r1, [pc, #68]	@ (801b960 <udp_send+0x5c>)
 801b91c:	4811      	ldr	r0, [pc, #68]	@ (801b964 <udp_send+0x60>)
 801b91e:	f004 fb91 	bl	8020044 <iprintf>
 801b922:	f06f 030f 	mvn.w	r3, #15
 801b926:	e015      	b.n	801b954 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801b928:	683b      	ldr	r3, [r7, #0]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d109      	bne.n	801b942 <udp_send+0x3e>
 801b92e:	4b0b      	ldr	r3, [pc, #44]	@ (801b95c <udp_send+0x58>)
 801b930:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801b934:	490c      	ldr	r1, [pc, #48]	@ (801b968 <udp_send+0x64>)
 801b936:	480b      	ldr	r0, [pc, #44]	@ (801b964 <udp_send+0x60>)
 801b938:	f004 fb84 	bl	8020044 <iprintf>
 801b93c:	f06f 030f 	mvn.w	r3, #15
 801b940:	e008      	b.n	801b954 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	1d1a      	adds	r2, r3, #4
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	8a9b      	ldrh	r3, [r3, #20]
 801b94a:	6839      	ldr	r1, [r7, #0]
 801b94c:	6878      	ldr	r0, [r7, #4]
 801b94e:	f000 f80d 	bl	801b96c <udp_sendto>
 801b952:	4603      	mov	r3, r0
}
 801b954:	4618      	mov	r0, r3
 801b956:	3708      	adds	r7, #8
 801b958:	46bd      	mov	sp, r7
 801b95a:	bd80      	pop	{r7, pc}
 801b95c:	08023c08 	.word	0x08023c08
 801b960:	08023cfc 	.word	0x08023cfc
 801b964:	08023c5c 	.word	0x08023c5c
 801b968:	08023d14 	.word	0x08023d14

0801b96c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b088      	sub	sp, #32
 801b970:	af02      	add	r7, sp, #8
 801b972:	60f8      	str	r0, [r7, #12]
 801b974:	60b9      	str	r1, [r7, #8]
 801b976:	607a      	str	r2, [r7, #4]
 801b978:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d109      	bne.n	801b994 <udp_sendto+0x28>
 801b980:	4b27      	ldr	r3, [pc, #156]	@ (801ba20 <udp_sendto+0xb4>)
 801b982:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801b986:	4927      	ldr	r1, [pc, #156]	@ (801ba24 <udp_sendto+0xb8>)
 801b988:	4827      	ldr	r0, [pc, #156]	@ (801ba28 <udp_sendto+0xbc>)
 801b98a:	f004 fb5b 	bl	8020044 <iprintf>
 801b98e:	f06f 030f 	mvn.w	r3, #15
 801b992:	e040      	b.n	801ba16 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801b994:	68bb      	ldr	r3, [r7, #8]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d109      	bne.n	801b9ae <udp_sendto+0x42>
 801b99a:	4b21      	ldr	r3, [pc, #132]	@ (801ba20 <udp_sendto+0xb4>)
 801b99c:	f240 2219 	movw	r2, #537	@ 0x219
 801b9a0:	4922      	ldr	r1, [pc, #136]	@ (801ba2c <udp_sendto+0xc0>)
 801b9a2:	4821      	ldr	r0, [pc, #132]	@ (801ba28 <udp_sendto+0xbc>)
 801b9a4:	f004 fb4e 	bl	8020044 <iprintf>
 801b9a8:	f06f 030f 	mvn.w	r3, #15
 801b9ac:	e033      	b.n	801ba16 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d109      	bne.n	801b9c8 <udp_sendto+0x5c>
 801b9b4:	4b1a      	ldr	r3, [pc, #104]	@ (801ba20 <udp_sendto+0xb4>)
 801b9b6:	f240 221a 	movw	r2, #538	@ 0x21a
 801b9ba:	491d      	ldr	r1, [pc, #116]	@ (801ba30 <udp_sendto+0xc4>)
 801b9bc:	481a      	ldr	r0, [pc, #104]	@ (801ba28 <udp_sendto+0xbc>)
 801b9be:	f004 fb41 	bl	8020044 <iprintf>
 801b9c2:	f06f 030f 	mvn.w	r3, #15
 801b9c6:	e026      	b.n	801ba16 <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	7a1b      	ldrb	r3, [r3, #8]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d006      	beq.n	801b9de <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	7a1b      	ldrb	r3, [r3, #8]
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	f7f8 fd49 	bl	801446c <netif_get_by_index>
 801b9da:	6178      	str	r0, [r7, #20]
 801b9dc:	e003      	b.n	801b9e6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801b9de:	6878      	ldr	r0, [r7, #4]
 801b9e0:	f001 fc24 	bl	801d22c <ip4_route>
 801b9e4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801b9e6:	697b      	ldr	r3, [r7, #20]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d10a      	bne.n	801ba02 <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801b9ec:	4b11      	ldr	r3, [pc, #68]	@ (801ba34 <udp_sendto+0xc8>)
 801b9ee:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801b9f2:	3301      	adds	r3, #1
 801b9f4:	b29a      	uxth	r2, r3
 801b9f6:	4b0f      	ldr	r3, [pc, #60]	@ (801ba34 <udp_sendto+0xc8>)
 801b9f8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801b9fc:	f06f 0303 	mvn.w	r3, #3
 801ba00:	e009      	b.n	801ba16 <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801ba02:	887a      	ldrh	r2, [r7, #2]
 801ba04:	697b      	ldr	r3, [r7, #20]
 801ba06:	9300      	str	r3, [sp, #0]
 801ba08:	4613      	mov	r3, r2
 801ba0a:	687a      	ldr	r2, [r7, #4]
 801ba0c:	68b9      	ldr	r1, [r7, #8]
 801ba0e:	68f8      	ldr	r0, [r7, #12]
 801ba10:	f000 f812 	bl	801ba38 <udp_sendto_if>
 801ba14:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801ba16:	4618      	mov	r0, r3
 801ba18:	3718      	adds	r7, #24
 801ba1a:	46bd      	mov	sp, r7
 801ba1c:	bd80      	pop	{r7, pc}
 801ba1e:	bf00      	nop
 801ba20:	08023c08 	.word	0x08023c08
 801ba24:	08023d2c 	.word	0x08023d2c
 801ba28:	08023c5c 	.word	0x08023c5c
 801ba2c:	08023d44 	.word	0x08023d44
 801ba30:	08023d60 	.word	0x08023d60
 801ba34:	2002d2b0 	.word	0x2002d2b0

0801ba38 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b088      	sub	sp, #32
 801ba3c:	af02      	add	r7, sp, #8
 801ba3e:	60f8      	str	r0, [r7, #12]
 801ba40:	60b9      	str	r1, [r7, #8]
 801ba42:	607a      	str	r2, [r7, #4]
 801ba44:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d109      	bne.n	801ba60 <udp_sendto_if+0x28>
 801ba4c:	4b2e      	ldr	r3, [pc, #184]	@ (801bb08 <udp_sendto_if+0xd0>)
 801ba4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ba52:	492e      	ldr	r1, [pc, #184]	@ (801bb0c <udp_sendto_if+0xd4>)
 801ba54:	482e      	ldr	r0, [pc, #184]	@ (801bb10 <udp_sendto_if+0xd8>)
 801ba56:	f004 faf5 	bl	8020044 <iprintf>
 801ba5a:	f06f 030f 	mvn.w	r3, #15
 801ba5e:	e04f      	b.n	801bb00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801ba60:	68bb      	ldr	r3, [r7, #8]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d109      	bne.n	801ba7a <udp_sendto_if+0x42>
 801ba66:	4b28      	ldr	r3, [pc, #160]	@ (801bb08 <udp_sendto_if+0xd0>)
 801ba68:	f240 2281 	movw	r2, #641	@ 0x281
 801ba6c:	4929      	ldr	r1, [pc, #164]	@ (801bb14 <udp_sendto_if+0xdc>)
 801ba6e:	4828      	ldr	r0, [pc, #160]	@ (801bb10 <udp_sendto_if+0xd8>)
 801ba70:	f004 fae8 	bl	8020044 <iprintf>
 801ba74:	f06f 030f 	mvn.w	r3, #15
 801ba78:	e042      	b.n	801bb00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d109      	bne.n	801ba94 <udp_sendto_if+0x5c>
 801ba80:	4b21      	ldr	r3, [pc, #132]	@ (801bb08 <udp_sendto_if+0xd0>)
 801ba82:	f240 2282 	movw	r2, #642	@ 0x282
 801ba86:	4924      	ldr	r1, [pc, #144]	@ (801bb18 <udp_sendto_if+0xe0>)
 801ba88:	4821      	ldr	r0, [pc, #132]	@ (801bb10 <udp_sendto_if+0xd8>)
 801ba8a:	f004 fadb 	bl	8020044 <iprintf>
 801ba8e:	f06f 030f 	mvn.w	r3, #15
 801ba92:	e035      	b.n	801bb00 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801ba94:	6a3b      	ldr	r3, [r7, #32]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d109      	bne.n	801baae <udp_sendto_if+0x76>
 801ba9a:	4b1b      	ldr	r3, [pc, #108]	@ (801bb08 <udp_sendto_if+0xd0>)
 801ba9c:	f240 2283 	movw	r2, #643	@ 0x283
 801baa0:	491e      	ldr	r1, [pc, #120]	@ (801bb1c <udp_sendto_if+0xe4>)
 801baa2:	481b      	ldr	r0, [pc, #108]	@ (801bb10 <udp_sendto_if+0xd8>)
 801baa4:	f004 face 	bl	8020044 <iprintf>
 801baa8:	f06f 030f 	mvn.w	r3, #15
 801baac:	e028      	b.n	801bb00 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d009      	beq.n	801bac8 <udp_sendto_if+0x90>
 801bab4:	68fb      	ldr	r3, [r7, #12]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d005      	beq.n	801bac8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bac4:	2be0      	cmp	r3, #224	@ 0xe0
 801bac6:	d103      	bne.n	801bad0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801bac8:	6a3b      	ldr	r3, [r7, #32]
 801baca:	3304      	adds	r3, #4
 801bacc:	617b      	str	r3, [r7, #20]
 801bace:	e00b      	b.n	801bae8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	681a      	ldr	r2, [r3, #0]
 801bad4:	6a3b      	ldr	r3, [r7, #32]
 801bad6:	3304      	adds	r3, #4
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	429a      	cmp	r2, r3
 801badc:	d002      	beq.n	801bae4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bade:	f06f 0303 	mvn.w	r3, #3
 801bae2:	e00d      	b.n	801bb00 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bae8:	887a      	ldrh	r2, [r7, #2]
 801baea:	697b      	ldr	r3, [r7, #20]
 801baec:	9301      	str	r3, [sp, #4]
 801baee:	6a3b      	ldr	r3, [r7, #32]
 801baf0:	9300      	str	r3, [sp, #0]
 801baf2:	4613      	mov	r3, r2
 801baf4:	687a      	ldr	r2, [r7, #4]
 801baf6:	68b9      	ldr	r1, [r7, #8]
 801baf8:	68f8      	ldr	r0, [r7, #12]
 801bafa:	f000 f811 	bl	801bb20 <udp_sendto_if_src>
 801bafe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bb00:	4618      	mov	r0, r3
 801bb02:	3718      	adds	r7, #24
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd80      	pop	{r7, pc}
 801bb08:	08023c08 	.word	0x08023c08
 801bb0c:	08023d7c 	.word	0x08023d7c
 801bb10:	08023c5c 	.word	0x08023c5c
 801bb14:	08023d98 	.word	0x08023d98
 801bb18:	08023db4 	.word	0x08023db4
 801bb1c:	08023dd4 	.word	0x08023dd4

0801bb20 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b08c      	sub	sp, #48	@ 0x30
 801bb24:	af04      	add	r7, sp, #16
 801bb26:	60f8      	str	r0, [r7, #12]
 801bb28:	60b9      	str	r1, [r7, #8]
 801bb2a:	607a      	str	r2, [r7, #4]
 801bb2c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d109      	bne.n	801bb48 <udp_sendto_if_src+0x28>
 801bb34:	4b69      	ldr	r3, [pc, #420]	@ (801bcdc <udp_sendto_if_src+0x1bc>)
 801bb36:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801bb3a:	4969      	ldr	r1, [pc, #420]	@ (801bce0 <udp_sendto_if_src+0x1c0>)
 801bb3c:	4869      	ldr	r0, [pc, #420]	@ (801bce4 <udp_sendto_if_src+0x1c4>)
 801bb3e:	f004 fa81 	bl	8020044 <iprintf>
 801bb42:	f06f 030f 	mvn.w	r3, #15
 801bb46:	e0c4      	b.n	801bcd2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bb48:	68bb      	ldr	r3, [r7, #8]
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d109      	bne.n	801bb62 <udp_sendto_if_src+0x42>
 801bb4e:	4b63      	ldr	r3, [pc, #396]	@ (801bcdc <udp_sendto_if_src+0x1bc>)
 801bb50:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801bb54:	4964      	ldr	r1, [pc, #400]	@ (801bce8 <udp_sendto_if_src+0x1c8>)
 801bb56:	4863      	ldr	r0, [pc, #396]	@ (801bce4 <udp_sendto_if_src+0x1c4>)
 801bb58:	f004 fa74 	bl	8020044 <iprintf>
 801bb5c:	f06f 030f 	mvn.w	r3, #15
 801bb60:	e0b7      	b.n	801bcd2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d109      	bne.n	801bb7c <udp_sendto_if_src+0x5c>
 801bb68:	4b5c      	ldr	r3, [pc, #368]	@ (801bcdc <udp_sendto_if_src+0x1bc>)
 801bb6a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801bb6e:	495f      	ldr	r1, [pc, #380]	@ (801bcec <udp_sendto_if_src+0x1cc>)
 801bb70:	485c      	ldr	r0, [pc, #368]	@ (801bce4 <udp_sendto_if_src+0x1c4>)
 801bb72:	f004 fa67 	bl	8020044 <iprintf>
 801bb76:	f06f 030f 	mvn.w	r3, #15
 801bb7a:	e0aa      	b.n	801bcd2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d109      	bne.n	801bb96 <udp_sendto_if_src+0x76>
 801bb82:	4b56      	ldr	r3, [pc, #344]	@ (801bcdc <udp_sendto_if_src+0x1bc>)
 801bb84:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801bb88:	4959      	ldr	r1, [pc, #356]	@ (801bcf0 <udp_sendto_if_src+0x1d0>)
 801bb8a:	4856      	ldr	r0, [pc, #344]	@ (801bce4 <udp_sendto_if_src+0x1c4>)
 801bb8c:	f004 fa5a 	bl	8020044 <iprintf>
 801bb90:	f06f 030f 	mvn.w	r3, #15
 801bb94:	e09d      	b.n	801bcd2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d109      	bne.n	801bbb0 <udp_sendto_if_src+0x90>
 801bb9c:	4b4f      	ldr	r3, [pc, #316]	@ (801bcdc <udp_sendto_if_src+0x1bc>)
 801bb9e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801bba2:	4954      	ldr	r1, [pc, #336]	@ (801bcf4 <udp_sendto_if_src+0x1d4>)
 801bba4:	484f      	ldr	r0, [pc, #316]	@ (801bce4 <udp_sendto_if_src+0x1c4>)
 801bba6:	f004 fa4d 	bl	8020044 <iprintf>
 801bbaa:	f06f 030f 	mvn.w	r3, #15
 801bbae:	e090      	b.n	801bcd2 <udp_sendto_if_src+0x1b2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	8a5b      	ldrh	r3, [r3, #18]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d10f      	bne.n	801bbd8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bbb8:	68f9      	ldr	r1, [r7, #12]
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	8a5b      	ldrh	r3, [r3, #18]
 801bbbe:	461a      	mov	r2, r3
 801bbc0:	68f8      	ldr	r0, [r7, #12]
 801bbc2:	f000 f89d 	bl	801bd00 <udp_bind>
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bbca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d002      	beq.n	801bbd8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801bbd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bbd6:	e07c      	b.n	801bcd2 <udp_sendto_if_src+0x1b2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bbd8:	68bb      	ldr	r3, [r7, #8]
 801bbda:	891b      	ldrh	r3, [r3, #8]
 801bbdc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801bbe0:	4293      	cmp	r3, r2
 801bbe2:	d902      	bls.n	801bbea <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801bbe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bbe8:	e073      	b.n	801bcd2 <udp_sendto_if_src+0x1b2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bbea:	2108      	movs	r1, #8
 801bbec:	68b8      	ldr	r0, [r7, #8]
 801bbee:	f7f8 ff35 	bl	8014a5c <pbuf_add_header>
 801bbf2:	4603      	mov	r3, r0
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d015      	beq.n	801bc24 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bbf8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bbfc:	2108      	movs	r1, #8
 801bbfe:	2022      	movs	r0, #34	@ 0x22
 801bc00:	f7f8 fcde 	bl	80145c0 <pbuf_alloc>
 801bc04:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bc06:	69fb      	ldr	r3, [r7, #28]
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	d102      	bne.n	801bc12 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801bc0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bc10:	e05f      	b.n	801bcd2 <udp_sendto_if_src+0x1b2>
    }
    if (p->tot_len != 0) {
 801bc12:	68bb      	ldr	r3, [r7, #8]
 801bc14:	891b      	ldrh	r3, [r3, #8]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d006      	beq.n	801bc28 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bc1a:	68b9      	ldr	r1, [r7, #8]
 801bc1c:	69f8      	ldr	r0, [r7, #28]
 801bc1e:	f7f9 f8d7 	bl	8014dd0 <pbuf_chain>
 801bc22:	e001      	b.n	801bc28 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bc28:	69fb      	ldr	r3, [r7, #28]
 801bc2a:	895b      	ldrh	r3, [r3, #10]
 801bc2c:	2b07      	cmp	r3, #7
 801bc2e:	d806      	bhi.n	801bc3e <udp_sendto_if_src+0x11e>
 801bc30:	4b2a      	ldr	r3, [pc, #168]	@ (801bcdc <udp_sendto_if_src+0x1bc>)
 801bc32:	f240 320d 	movw	r2, #781	@ 0x30d
 801bc36:	4930      	ldr	r1, [pc, #192]	@ (801bcf8 <udp_sendto_if_src+0x1d8>)
 801bc38:	482a      	ldr	r0, [pc, #168]	@ (801bce4 <udp_sendto_if_src+0x1c4>)
 801bc3a:	f004 fa03 	bl	8020044 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801bc3e:	69fb      	ldr	r3, [r7, #28]
 801bc40:	685b      	ldr	r3, [r3, #4]
 801bc42:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	8a5b      	ldrh	r3, [r3, #18]
 801bc48:	4618      	mov	r0, r3
 801bc4a:	f7f7 fadf 	bl	801320c <lwip_htons>
 801bc4e:	4603      	mov	r3, r0
 801bc50:	461a      	mov	r2, r3
 801bc52:	697b      	ldr	r3, [r7, #20]
 801bc54:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801bc56:	887b      	ldrh	r3, [r7, #2]
 801bc58:	4618      	mov	r0, r3
 801bc5a:	f7f7 fad7 	bl	801320c <lwip_htons>
 801bc5e:	4603      	mov	r3, r0
 801bc60:	461a      	mov	r2, r3
 801bc62:	697b      	ldr	r3, [r7, #20]
 801bc64:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801bc66:	697b      	ldr	r3, [r7, #20]
 801bc68:	2200      	movs	r2, #0
 801bc6a:	719a      	strb	r2, [r3, #6]
 801bc6c:	2200      	movs	r2, #0
 801bc6e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801bc70:	69fb      	ldr	r3, [r7, #28]
 801bc72:	891b      	ldrh	r3, [r3, #8]
 801bc74:	4618      	mov	r0, r3
 801bc76:	f7f7 fac9 	bl	801320c <lwip_htons>
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	461a      	mov	r2, r3
 801bc7e:	697b      	ldr	r3, [r7, #20]
 801bc80:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801bc82:	2311      	movs	r3, #17
 801bc84:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801bc86:	68fb      	ldr	r3, [r7, #12]
 801bc88:	7adb      	ldrb	r3, [r3, #11]
 801bc8a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	7a9b      	ldrb	r3, [r3, #10]
 801bc90:	7cb9      	ldrb	r1, [r7, #18]
 801bc92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801bc94:	9202      	str	r2, [sp, #8]
 801bc96:	7cfa      	ldrb	r2, [r7, #19]
 801bc98:	9201      	str	r2, [sp, #4]
 801bc9a:	9300      	str	r3, [sp, #0]
 801bc9c:	460b      	mov	r3, r1
 801bc9e:	687a      	ldr	r2, [r7, #4]
 801bca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801bca2:	69f8      	ldr	r0, [r7, #28]
 801bca4:	f001 fd02 	bl	801d6ac <ip4_output_if_src>
 801bca8:	4603      	mov	r3, r0
 801bcaa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801bcac:	69fa      	ldr	r2, [r7, #28]
 801bcae:	68bb      	ldr	r3, [r7, #8]
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d004      	beq.n	801bcbe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801bcb4:	69f8      	ldr	r0, [r7, #28]
 801bcb6:	f7f8 ff67 	bl	8014b88 <pbuf_free>
    q = NULL;
 801bcba:	2300      	movs	r3, #0
 801bcbc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801bcbe:	4b0f      	ldr	r3, [pc, #60]	@ (801bcfc <udp_sendto_if_src+0x1dc>)
 801bcc0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801bcc4:	3301      	adds	r3, #1
 801bcc6:	b29a      	uxth	r2, r3
 801bcc8:	4b0c      	ldr	r3, [pc, #48]	@ (801bcfc <udp_sendto_if_src+0x1dc>)
 801bcca:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801bcce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	3720      	adds	r7, #32
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	bd80      	pop	{r7, pc}
 801bcda:	bf00      	nop
 801bcdc:	08023c08 	.word	0x08023c08
 801bce0:	08023df4 	.word	0x08023df4
 801bce4:	08023c5c 	.word	0x08023c5c
 801bce8:	08023e14 	.word	0x08023e14
 801bcec:	08023e34 	.word	0x08023e34
 801bcf0:	08023e58 	.word	0x08023e58
 801bcf4:	08023e7c 	.word	0x08023e7c
 801bcf8:	08023ea0 	.word	0x08023ea0
 801bcfc:	2002d2b0 	.word	0x2002d2b0

0801bd00 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b086      	sub	sp, #24
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	60f8      	str	r0, [r7, #12]
 801bd08:	60b9      	str	r1, [r7, #8]
 801bd0a:	4613      	mov	r3, r2
 801bd0c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bd0e:	68bb      	ldr	r3, [r7, #8]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d101      	bne.n	801bd18 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801bd14:	4b39      	ldr	r3, [pc, #228]	@ (801bdfc <udp_bind+0xfc>)
 801bd16:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d109      	bne.n	801bd32 <udp_bind+0x32>
 801bd1e:	4b38      	ldr	r3, [pc, #224]	@ (801be00 <udp_bind+0x100>)
 801bd20:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801bd24:	4937      	ldr	r1, [pc, #220]	@ (801be04 <udp_bind+0x104>)
 801bd26:	4838      	ldr	r0, [pc, #224]	@ (801be08 <udp_bind+0x108>)
 801bd28:	f004 f98c 	bl	8020044 <iprintf>
 801bd2c:	f06f 030f 	mvn.w	r3, #15
 801bd30:	e060      	b.n	801bdf4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801bd32:	2300      	movs	r3, #0
 801bd34:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bd36:	4b35      	ldr	r3, [pc, #212]	@ (801be0c <udp_bind+0x10c>)
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	617b      	str	r3, [r7, #20]
 801bd3c:	e009      	b.n	801bd52 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801bd3e:	68fa      	ldr	r2, [r7, #12]
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	429a      	cmp	r2, r3
 801bd44:	d102      	bne.n	801bd4c <udp_bind+0x4c>
      rebind = 1;
 801bd46:	2301      	movs	r3, #1
 801bd48:	74fb      	strb	r3, [r7, #19]
      break;
 801bd4a:	e005      	b.n	801bd58 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	68db      	ldr	r3, [r3, #12]
 801bd50:	617b      	str	r3, [r7, #20]
 801bd52:	697b      	ldr	r3, [r7, #20]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d1f2      	bne.n	801bd3e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801bd58:	88fb      	ldrh	r3, [r7, #6]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d109      	bne.n	801bd72 <udp_bind+0x72>
    port = udp_new_port();
 801bd5e:	f7ff fbe7 	bl	801b530 <udp_new_port>
 801bd62:	4603      	mov	r3, r0
 801bd64:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801bd66:	88fb      	ldrh	r3, [r7, #6]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d12c      	bne.n	801bdc6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801bd6c:	f06f 0307 	mvn.w	r3, #7
 801bd70:	e040      	b.n	801bdf4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bd72:	4b26      	ldr	r3, [pc, #152]	@ (801be0c <udp_bind+0x10c>)
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	617b      	str	r3, [r7, #20]
 801bd78:	e022      	b.n	801bdc0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801bd7a:	68fa      	ldr	r2, [r7, #12]
 801bd7c:	697b      	ldr	r3, [r7, #20]
 801bd7e:	429a      	cmp	r2, r3
 801bd80:	d01b      	beq.n	801bdba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801bd82:	697b      	ldr	r3, [r7, #20]
 801bd84:	8a5b      	ldrh	r3, [r3, #18]
 801bd86:	88fa      	ldrh	r2, [r7, #6]
 801bd88:	429a      	cmp	r2, r3
 801bd8a:	d116      	bne.n	801bdba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bd8c:	697b      	ldr	r3, [r7, #20]
 801bd8e:	681a      	ldr	r2, [r3, #0]
 801bd90:	68bb      	ldr	r3, [r7, #8]
 801bd92:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801bd94:	429a      	cmp	r2, r3
 801bd96:	d00d      	beq.n	801bdb4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d00a      	beq.n	801bdb4 <udp_bind+0xb4>
 801bd9e:	68bb      	ldr	r3, [r7, #8]
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d006      	beq.n	801bdb4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bda6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d003      	beq.n	801bdb4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bdac:	697b      	ldr	r3, [r7, #20]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d102      	bne.n	801bdba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801bdb4:	f06f 0307 	mvn.w	r3, #7
 801bdb8:	e01c      	b.n	801bdf4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bdba:	697b      	ldr	r3, [r7, #20]
 801bdbc:	68db      	ldr	r3, [r3, #12]
 801bdbe:	617b      	str	r3, [r7, #20]
 801bdc0:	697b      	ldr	r3, [r7, #20]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d1d9      	bne.n	801bd7a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801bdc6:	68bb      	ldr	r3, [r7, #8]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d002      	beq.n	801bdd2 <udp_bind+0xd2>
 801bdcc:	68bb      	ldr	r3, [r7, #8]
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	e000      	b.n	801bdd4 <udp_bind+0xd4>
 801bdd2:	2300      	movs	r3, #0
 801bdd4:	68fa      	ldr	r2, [r7, #12]
 801bdd6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	88fa      	ldrh	r2, [r7, #6]
 801bddc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801bdde:	7cfb      	ldrb	r3, [r7, #19]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d106      	bne.n	801bdf2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801bde4:	4b09      	ldr	r3, [pc, #36]	@ (801be0c <udp_bind+0x10c>)
 801bde6:	681a      	ldr	r2, [r3, #0]
 801bde8:	68fb      	ldr	r3, [r7, #12]
 801bdea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801bdec:	4a07      	ldr	r2, [pc, #28]	@ (801be0c <udp_bind+0x10c>)
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801bdf2:	2300      	movs	r3, #0
}
 801bdf4:	4618      	mov	r0, r3
 801bdf6:	3718      	adds	r7, #24
 801bdf8:	46bd      	mov	sp, r7
 801bdfa:	bd80      	pop	{r7, pc}
 801bdfc:	08024db8 	.word	0x08024db8
 801be00:	08023c08 	.word	0x08023c08
 801be04:	08023ed0 	.word	0x08023ed0
 801be08:	08023c5c 	.word	0x08023c5c
 801be0c:	2002d408 	.word	0x2002d408

0801be10 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b084      	sub	sp, #16
 801be14:	af00      	add	r7, sp, #0
 801be16:	60f8      	str	r0, [r7, #12]
 801be18:	60b9      	str	r1, [r7, #8]
 801be1a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d107      	bne.n	801be32 <udp_recv+0x22>
 801be22:	4b08      	ldr	r3, [pc, #32]	@ (801be44 <udp_recv+0x34>)
 801be24:	f240 428a 	movw	r2, #1162	@ 0x48a
 801be28:	4907      	ldr	r1, [pc, #28]	@ (801be48 <udp_recv+0x38>)
 801be2a:	4808      	ldr	r0, [pc, #32]	@ (801be4c <udp_recv+0x3c>)
 801be2c:	f004 f90a 	bl	8020044 <iprintf>
 801be30:	e005      	b.n	801be3e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	68ba      	ldr	r2, [r7, #8]
 801be36:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	687a      	ldr	r2, [r7, #4]
 801be3c:	61da      	str	r2, [r3, #28]
}
 801be3e:	3710      	adds	r7, #16
 801be40:	46bd      	mov	sp, r7
 801be42:	bd80      	pop	{r7, pc}
 801be44:	08023c08 	.word	0x08023c08
 801be48:	08023f3c 	.word	0x08023f3c
 801be4c:	08023c5c 	.word	0x08023c5c

0801be50 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b084      	sub	sp, #16
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d107      	bne.n	801be6e <udp_remove+0x1e>
 801be5e:	4b19      	ldr	r3, [pc, #100]	@ (801bec4 <udp_remove+0x74>)
 801be60:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801be64:	4918      	ldr	r1, [pc, #96]	@ (801bec8 <udp_remove+0x78>)
 801be66:	4819      	ldr	r0, [pc, #100]	@ (801becc <udp_remove+0x7c>)
 801be68:	f004 f8ec 	bl	8020044 <iprintf>
 801be6c:	e026      	b.n	801bebc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801be6e:	4b18      	ldr	r3, [pc, #96]	@ (801bed0 <udp_remove+0x80>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	687a      	ldr	r2, [r7, #4]
 801be74:	429a      	cmp	r2, r3
 801be76:	d105      	bne.n	801be84 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801be78:	4b15      	ldr	r3, [pc, #84]	@ (801bed0 <udp_remove+0x80>)
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	68db      	ldr	r3, [r3, #12]
 801be7e:	4a14      	ldr	r2, [pc, #80]	@ (801bed0 <udp_remove+0x80>)
 801be80:	6013      	str	r3, [r2, #0]
 801be82:	e017      	b.n	801beb4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801be84:	4b12      	ldr	r3, [pc, #72]	@ (801bed0 <udp_remove+0x80>)
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	60fb      	str	r3, [r7, #12]
 801be8a:	e010      	b.n	801beae <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	68db      	ldr	r3, [r3, #12]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d009      	beq.n	801bea8 <udp_remove+0x58>
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	68db      	ldr	r3, [r3, #12]
 801be98:	687a      	ldr	r2, [r7, #4]
 801be9a:	429a      	cmp	r2, r3
 801be9c:	d104      	bne.n	801bea8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	68da      	ldr	r2, [r3, #12]
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	60da      	str	r2, [r3, #12]
        break;
 801bea6:	e005      	b.n	801beb4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	68db      	ldr	r3, [r3, #12]
 801beac:	60fb      	str	r3, [r7, #12]
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d1eb      	bne.n	801be8c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801beb4:	6879      	ldr	r1, [r7, #4]
 801beb6:	2000      	movs	r0, #0
 801beb8:	f7f7 ffc2 	bl	8013e40 <memp_free>
}
 801bebc:	3710      	adds	r7, #16
 801bebe:	46bd      	mov	sp, r7
 801bec0:	bd80      	pop	{r7, pc}
 801bec2:	bf00      	nop
 801bec4:	08023c08 	.word	0x08023c08
 801bec8:	08023f54 	.word	0x08023f54
 801becc:	08023c5c 	.word	0x08023c5c
 801bed0:	2002d408 	.word	0x2002d408

0801bed4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b082      	sub	sp, #8
 801bed8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801beda:	2000      	movs	r0, #0
 801bedc:	f7f7 ff34 	bl	8013d48 <memp_malloc>
 801bee0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d007      	beq.n	801bef8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801bee8:	2220      	movs	r2, #32
 801beea:	2100      	movs	r1, #0
 801beec:	6878      	ldr	r0, [r7, #4]
 801beee:	f004 fa01 	bl	80202f4 <memset>
    pcb->ttl = UDP_TTL;
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	22ff      	movs	r2, #255	@ 0xff
 801bef6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801bef8:	687b      	ldr	r3, [r7, #4]
}
 801befa:	4618      	mov	r0, r3
 801befc:	3708      	adds	r7, #8
 801befe:	46bd      	mov	sp, r7
 801bf00:	bd80      	pop	{r7, pc}

0801bf02 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801bf02:	b580      	push	{r7, lr}
 801bf04:	b084      	sub	sp, #16
 801bf06:	af00      	add	r7, sp, #0
 801bf08:	4603      	mov	r3, r0
 801bf0a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801bf0c:	f7ff ffe2 	bl	801bed4 <udp_new>
 801bf10:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801bf12:	68fb      	ldr	r3, [r7, #12]
}
 801bf14:	4618      	mov	r0, r3
 801bf16:	3710      	adds	r7, #16
 801bf18:	46bd      	mov	sp, r7
 801bf1a:	bd80      	pop	{r7, pc}

0801bf1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801bf1c:	b480      	push	{r7}
 801bf1e:	b085      	sub	sp, #20
 801bf20:	af00      	add	r7, sp, #0
 801bf22:	6078      	str	r0, [r7, #4]
 801bf24:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d01e      	beq.n	801bf6a <udp_netif_ip_addr_changed+0x4e>
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d01a      	beq.n	801bf6a <udp_netif_ip_addr_changed+0x4e>
 801bf34:	683b      	ldr	r3, [r7, #0]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d017      	beq.n	801bf6a <udp_netif_ip_addr_changed+0x4e>
 801bf3a:	683b      	ldr	r3, [r7, #0]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d013      	beq.n	801bf6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bf42:	4b0d      	ldr	r3, [pc, #52]	@ (801bf78 <udp_netif_ip_addr_changed+0x5c>)
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	60fb      	str	r3, [r7, #12]
 801bf48:	e00c      	b.n	801bf64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	681a      	ldr	r2, [r3, #0]
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	429a      	cmp	r2, r3
 801bf54:	d103      	bne.n	801bf5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801bf56:	683b      	ldr	r3, [r7, #0]
 801bf58:	681a      	ldr	r2, [r3, #0]
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	68db      	ldr	r3, [r3, #12]
 801bf62:	60fb      	str	r3, [r7, #12]
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d1ef      	bne.n	801bf4a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801bf6a:	bf00      	nop
 801bf6c:	3714      	adds	r7, #20
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf74:	4770      	bx	lr
 801bf76:	bf00      	nop
 801bf78:	2002d408 	.word	0x2002d408

0801bf7c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801bf7c:	b580      	push	{r7, lr}
 801bf7e:	b082      	sub	sp, #8
 801bf80:	af00      	add	r7, sp, #0
 801bf82:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801bf84:	4915      	ldr	r1, [pc, #84]	@ (801bfdc <etharp_free_entry+0x60>)
 801bf86:	687a      	ldr	r2, [r7, #4]
 801bf88:	4613      	mov	r3, r2
 801bf8a:	005b      	lsls	r3, r3, #1
 801bf8c:	4413      	add	r3, r2
 801bf8e:	00db      	lsls	r3, r3, #3
 801bf90:	440b      	add	r3, r1
 801bf92:	681b      	ldr	r3, [r3, #0]
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d013      	beq.n	801bfc0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801bf98:	4910      	ldr	r1, [pc, #64]	@ (801bfdc <etharp_free_entry+0x60>)
 801bf9a:	687a      	ldr	r2, [r7, #4]
 801bf9c:	4613      	mov	r3, r2
 801bf9e:	005b      	lsls	r3, r3, #1
 801bfa0:	4413      	add	r3, r2
 801bfa2:	00db      	lsls	r3, r3, #3
 801bfa4:	440b      	add	r3, r1
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	4618      	mov	r0, r3
 801bfaa:	f7f8 fded 	bl	8014b88 <pbuf_free>
    arp_table[i].q = NULL;
 801bfae:	490b      	ldr	r1, [pc, #44]	@ (801bfdc <etharp_free_entry+0x60>)
 801bfb0:	687a      	ldr	r2, [r7, #4]
 801bfb2:	4613      	mov	r3, r2
 801bfb4:	005b      	lsls	r3, r3, #1
 801bfb6:	4413      	add	r3, r2
 801bfb8:	00db      	lsls	r3, r3, #3
 801bfba:	440b      	add	r3, r1
 801bfbc:	2200      	movs	r2, #0
 801bfbe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801bfc0:	4906      	ldr	r1, [pc, #24]	@ (801bfdc <etharp_free_entry+0x60>)
 801bfc2:	687a      	ldr	r2, [r7, #4]
 801bfc4:	4613      	mov	r3, r2
 801bfc6:	005b      	lsls	r3, r3, #1
 801bfc8:	4413      	add	r3, r2
 801bfca:	00db      	lsls	r3, r3, #3
 801bfcc:	440b      	add	r3, r1
 801bfce:	3314      	adds	r3, #20
 801bfd0:	2200      	movs	r2, #0
 801bfd2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801bfd4:	bf00      	nop
 801bfd6:	3708      	adds	r7, #8
 801bfd8:	46bd      	mov	sp, r7
 801bfda:	bd80      	pop	{r7, pc}
 801bfdc:	2002d40c 	.word	0x2002d40c

0801bfe0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b082      	sub	sp, #8
 801bfe4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	607b      	str	r3, [r7, #4]
 801bfea:	e096      	b.n	801c11a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801bfec:	494f      	ldr	r1, [pc, #316]	@ (801c12c <etharp_tmr+0x14c>)
 801bfee:	687a      	ldr	r2, [r7, #4]
 801bff0:	4613      	mov	r3, r2
 801bff2:	005b      	lsls	r3, r3, #1
 801bff4:	4413      	add	r3, r2
 801bff6:	00db      	lsls	r3, r3, #3
 801bff8:	440b      	add	r3, r1
 801bffa:	3314      	adds	r3, #20
 801bffc:	781b      	ldrb	r3, [r3, #0]
 801bffe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c000:	78fb      	ldrb	r3, [r7, #3]
 801c002:	2b00      	cmp	r3, #0
 801c004:	f000 8086 	beq.w	801c114 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c008:	4948      	ldr	r1, [pc, #288]	@ (801c12c <etharp_tmr+0x14c>)
 801c00a:	687a      	ldr	r2, [r7, #4]
 801c00c:	4613      	mov	r3, r2
 801c00e:	005b      	lsls	r3, r3, #1
 801c010:	4413      	add	r3, r2
 801c012:	00db      	lsls	r3, r3, #3
 801c014:	440b      	add	r3, r1
 801c016:	3312      	adds	r3, #18
 801c018:	881b      	ldrh	r3, [r3, #0]
 801c01a:	3301      	adds	r3, #1
 801c01c:	b298      	uxth	r0, r3
 801c01e:	4943      	ldr	r1, [pc, #268]	@ (801c12c <etharp_tmr+0x14c>)
 801c020:	687a      	ldr	r2, [r7, #4]
 801c022:	4613      	mov	r3, r2
 801c024:	005b      	lsls	r3, r3, #1
 801c026:	4413      	add	r3, r2
 801c028:	00db      	lsls	r3, r3, #3
 801c02a:	440b      	add	r3, r1
 801c02c:	3312      	adds	r3, #18
 801c02e:	4602      	mov	r2, r0
 801c030:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c032:	493e      	ldr	r1, [pc, #248]	@ (801c12c <etharp_tmr+0x14c>)
 801c034:	687a      	ldr	r2, [r7, #4]
 801c036:	4613      	mov	r3, r2
 801c038:	005b      	lsls	r3, r3, #1
 801c03a:	4413      	add	r3, r2
 801c03c:	00db      	lsls	r3, r3, #3
 801c03e:	440b      	add	r3, r1
 801c040:	3312      	adds	r3, #18
 801c042:	881b      	ldrh	r3, [r3, #0]
 801c044:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801c048:	d215      	bcs.n	801c076 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c04a:	4938      	ldr	r1, [pc, #224]	@ (801c12c <etharp_tmr+0x14c>)
 801c04c:	687a      	ldr	r2, [r7, #4]
 801c04e:	4613      	mov	r3, r2
 801c050:	005b      	lsls	r3, r3, #1
 801c052:	4413      	add	r3, r2
 801c054:	00db      	lsls	r3, r3, #3
 801c056:	440b      	add	r3, r1
 801c058:	3314      	adds	r3, #20
 801c05a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c05c:	2b01      	cmp	r3, #1
 801c05e:	d10e      	bne.n	801c07e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c060:	4932      	ldr	r1, [pc, #200]	@ (801c12c <etharp_tmr+0x14c>)
 801c062:	687a      	ldr	r2, [r7, #4]
 801c064:	4613      	mov	r3, r2
 801c066:	005b      	lsls	r3, r3, #1
 801c068:	4413      	add	r3, r2
 801c06a:	00db      	lsls	r3, r3, #3
 801c06c:	440b      	add	r3, r1
 801c06e:	3312      	adds	r3, #18
 801c070:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c072:	2b04      	cmp	r3, #4
 801c074:	d903      	bls.n	801c07e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c076:	6878      	ldr	r0, [r7, #4]
 801c078:	f7ff ff80 	bl	801bf7c <etharp_free_entry>
 801c07c:	e04a      	b.n	801c114 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c07e:	492b      	ldr	r1, [pc, #172]	@ (801c12c <etharp_tmr+0x14c>)
 801c080:	687a      	ldr	r2, [r7, #4]
 801c082:	4613      	mov	r3, r2
 801c084:	005b      	lsls	r3, r3, #1
 801c086:	4413      	add	r3, r2
 801c088:	00db      	lsls	r3, r3, #3
 801c08a:	440b      	add	r3, r1
 801c08c:	3314      	adds	r3, #20
 801c08e:	781b      	ldrb	r3, [r3, #0]
 801c090:	2b03      	cmp	r3, #3
 801c092:	d10a      	bne.n	801c0aa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c094:	4925      	ldr	r1, [pc, #148]	@ (801c12c <etharp_tmr+0x14c>)
 801c096:	687a      	ldr	r2, [r7, #4]
 801c098:	4613      	mov	r3, r2
 801c09a:	005b      	lsls	r3, r3, #1
 801c09c:	4413      	add	r3, r2
 801c09e:	00db      	lsls	r3, r3, #3
 801c0a0:	440b      	add	r3, r1
 801c0a2:	3314      	adds	r3, #20
 801c0a4:	2204      	movs	r2, #4
 801c0a6:	701a      	strb	r2, [r3, #0]
 801c0a8:	e034      	b.n	801c114 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c0aa:	4920      	ldr	r1, [pc, #128]	@ (801c12c <etharp_tmr+0x14c>)
 801c0ac:	687a      	ldr	r2, [r7, #4]
 801c0ae:	4613      	mov	r3, r2
 801c0b0:	005b      	lsls	r3, r3, #1
 801c0b2:	4413      	add	r3, r2
 801c0b4:	00db      	lsls	r3, r3, #3
 801c0b6:	440b      	add	r3, r1
 801c0b8:	3314      	adds	r3, #20
 801c0ba:	781b      	ldrb	r3, [r3, #0]
 801c0bc:	2b04      	cmp	r3, #4
 801c0be:	d10a      	bne.n	801c0d6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c0c0:	491a      	ldr	r1, [pc, #104]	@ (801c12c <etharp_tmr+0x14c>)
 801c0c2:	687a      	ldr	r2, [r7, #4]
 801c0c4:	4613      	mov	r3, r2
 801c0c6:	005b      	lsls	r3, r3, #1
 801c0c8:	4413      	add	r3, r2
 801c0ca:	00db      	lsls	r3, r3, #3
 801c0cc:	440b      	add	r3, r1
 801c0ce:	3314      	adds	r3, #20
 801c0d0:	2202      	movs	r2, #2
 801c0d2:	701a      	strb	r2, [r3, #0]
 801c0d4:	e01e      	b.n	801c114 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c0d6:	4915      	ldr	r1, [pc, #84]	@ (801c12c <etharp_tmr+0x14c>)
 801c0d8:	687a      	ldr	r2, [r7, #4]
 801c0da:	4613      	mov	r3, r2
 801c0dc:	005b      	lsls	r3, r3, #1
 801c0de:	4413      	add	r3, r2
 801c0e0:	00db      	lsls	r3, r3, #3
 801c0e2:	440b      	add	r3, r1
 801c0e4:	3314      	adds	r3, #20
 801c0e6:	781b      	ldrb	r3, [r3, #0]
 801c0e8:	2b01      	cmp	r3, #1
 801c0ea:	d113      	bne.n	801c114 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c0ec:	490f      	ldr	r1, [pc, #60]	@ (801c12c <etharp_tmr+0x14c>)
 801c0ee:	687a      	ldr	r2, [r7, #4]
 801c0f0:	4613      	mov	r3, r2
 801c0f2:	005b      	lsls	r3, r3, #1
 801c0f4:	4413      	add	r3, r2
 801c0f6:	00db      	lsls	r3, r3, #3
 801c0f8:	440b      	add	r3, r1
 801c0fa:	3308      	adds	r3, #8
 801c0fc:	6818      	ldr	r0, [r3, #0]
 801c0fe:	687a      	ldr	r2, [r7, #4]
 801c100:	4613      	mov	r3, r2
 801c102:	005b      	lsls	r3, r3, #1
 801c104:	4413      	add	r3, r2
 801c106:	00db      	lsls	r3, r3, #3
 801c108:	4a08      	ldr	r2, [pc, #32]	@ (801c12c <etharp_tmr+0x14c>)
 801c10a:	4413      	add	r3, r2
 801c10c:	3304      	adds	r3, #4
 801c10e:	4619      	mov	r1, r3
 801c110:	f000 feae 	bl	801ce70 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	3301      	adds	r3, #1
 801c118:	607b      	str	r3, [r7, #4]
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	2b09      	cmp	r3, #9
 801c11e:	f77f af65 	ble.w	801bfec <etharp_tmr+0xc>
      }
    }
  }
}
 801c122:	bf00      	nop
 801c124:	bf00      	nop
 801c126:	3708      	adds	r7, #8
 801c128:	46bd      	mov	sp, r7
 801c12a:	bd80      	pop	{r7, pc}
 801c12c:	2002d40c 	.word	0x2002d40c

0801c130 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b08a      	sub	sp, #40	@ 0x28
 801c134:	af00      	add	r7, sp, #0
 801c136:	60f8      	str	r0, [r7, #12]
 801c138:	460b      	mov	r3, r1
 801c13a:	607a      	str	r2, [r7, #4]
 801c13c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c13e:	230a      	movs	r3, #10
 801c140:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c142:	230a      	movs	r3, #10
 801c144:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c146:	230a      	movs	r3, #10
 801c148:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801c14a:	2300      	movs	r3, #0
 801c14c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c14e:	230a      	movs	r3, #10
 801c150:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c152:	2300      	movs	r3, #0
 801c154:	83bb      	strh	r3, [r7, #28]
 801c156:	2300      	movs	r3, #0
 801c158:	837b      	strh	r3, [r7, #26]
 801c15a:	2300      	movs	r3, #0
 801c15c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c15e:	2300      	movs	r3, #0
 801c160:	843b      	strh	r3, [r7, #32]
 801c162:	e0ae      	b.n	801c2c2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c164:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c168:	49a6      	ldr	r1, [pc, #664]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c16a:	4613      	mov	r3, r2
 801c16c:	005b      	lsls	r3, r3, #1
 801c16e:	4413      	add	r3, r2
 801c170:	00db      	lsls	r3, r3, #3
 801c172:	440b      	add	r3, r1
 801c174:	3314      	adds	r3, #20
 801c176:	781b      	ldrb	r3, [r3, #0]
 801c178:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c17a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c17e:	2b0a      	cmp	r3, #10
 801c180:	d105      	bne.n	801c18e <etharp_find_entry+0x5e>
 801c182:	7dfb      	ldrb	r3, [r7, #23]
 801c184:	2b00      	cmp	r3, #0
 801c186:	d102      	bne.n	801c18e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c188:	8c3b      	ldrh	r3, [r7, #32]
 801c18a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801c18c:	e095      	b.n	801c2ba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c18e:	7dfb      	ldrb	r3, [r7, #23]
 801c190:	2b00      	cmp	r3, #0
 801c192:	f000 8092 	beq.w	801c2ba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c196:	7dfb      	ldrb	r3, [r7, #23]
 801c198:	2b01      	cmp	r3, #1
 801c19a:	d009      	beq.n	801c1b0 <etharp_find_entry+0x80>
 801c19c:	7dfb      	ldrb	r3, [r7, #23]
 801c19e:	2b01      	cmp	r3, #1
 801c1a0:	d806      	bhi.n	801c1b0 <etharp_find_entry+0x80>
 801c1a2:	4b99      	ldr	r3, [pc, #612]	@ (801c408 <etharp_find_entry+0x2d8>)
 801c1a4:	f240 1223 	movw	r2, #291	@ 0x123
 801c1a8:	4998      	ldr	r1, [pc, #608]	@ (801c40c <etharp_find_entry+0x2dc>)
 801c1aa:	4899      	ldr	r0, [pc, #612]	@ (801c410 <etharp_find_entry+0x2e0>)
 801c1ac:	f003 ff4a 	bl	8020044 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d020      	beq.n	801c1f8 <etharp_find_entry+0xc8>
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	6819      	ldr	r1, [r3, #0]
 801c1ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1be:	4891      	ldr	r0, [pc, #580]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c1c0:	4613      	mov	r3, r2
 801c1c2:	005b      	lsls	r3, r3, #1
 801c1c4:	4413      	add	r3, r2
 801c1c6:	00db      	lsls	r3, r3, #3
 801c1c8:	4403      	add	r3, r0
 801c1ca:	3304      	adds	r3, #4
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	4299      	cmp	r1, r3
 801c1d0:	d112      	bne.n	801c1f8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d00c      	beq.n	801c1f2 <etharp_find_entry+0xc2>
 801c1d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c1dc:	4989      	ldr	r1, [pc, #548]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c1de:	4613      	mov	r3, r2
 801c1e0:	005b      	lsls	r3, r3, #1
 801c1e2:	4413      	add	r3, r2
 801c1e4:	00db      	lsls	r3, r3, #3
 801c1e6:	440b      	add	r3, r1
 801c1e8:	3308      	adds	r3, #8
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	687a      	ldr	r2, [r7, #4]
 801c1ee:	429a      	cmp	r2, r3
 801c1f0:	d102      	bne.n	801c1f8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c1f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c1f6:	e100      	b.n	801c3fa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c1f8:	7dfb      	ldrb	r3, [r7, #23]
 801c1fa:	2b01      	cmp	r3, #1
 801c1fc:	d140      	bne.n	801c280 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c1fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c202:	4980      	ldr	r1, [pc, #512]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c204:	4613      	mov	r3, r2
 801c206:	005b      	lsls	r3, r3, #1
 801c208:	4413      	add	r3, r2
 801c20a:	00db      	lsls	r3, r3, #3
 801c20c:	440b      	add	r3, r1
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d01a      	beq.n	801c24a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c214:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c218:	497a      	ldr	r1, [pc, #488]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c21a:	4613      	mov	r3, r2
 801c21c:	005b      	lsls	r3, r3, #1
 801c21e:	4413      	add	r3, r2
 801c220:	00db      	lsls	r3, r3, #3
 801c222:	440b      	add	r3, r1
 801c224:	3312      	adds	r3, #18
 801c226:	881b      	ldrh	r3, [r3, #0]
 801c228:	8bba      	ldrh	r2, [r7, #28]
 801c22a:	429a      	cmp	r2, r3
 801c22c:	d845      	bhi.n	801c2ba <etharp_find_entry+0x18a>
            old_queue = i;
 801c22e:	8c3b      	ldrh	r3, [r7, #32]
 801c230:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c232:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c236:	4973      	ldr	r1, [pc, #460]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c238:	4613      	mov	r3, r2
 801c23a:	005b      	lsls	r3, r3, #1
 801c23c:	4413      	add	r3, r2
 801c23e:	00db      	lsls	r3, r3, #3
 801c240:	440b      	add	r3, r1
 801c242:	3312      	adds	r3, #18
 801c244:	881b      	ldrh	r3, [r3, #0]
 801c246:	83bb      	strh	r3, [r7, #28]
 801c248:	e037      	b.n	801c2ba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c24a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c24e:	496d      	ldr	r1, [pc, #436]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c250:	4613      	mov	r3, r2
 801c252:	005b      	lsls	r3, r3, #1
 801c254:	4413      	add	r3, r2
 801c256:	00db      	lsls	r3, r3, #3
 801c258:	440b      	add	r3, r1
 801c25a:	3312      	adds	r3, #18
 801c25c:	881b      	ldrh	r3, [r3, #0]
 801c25e:	8b7a      	ldrh	r2, [r7, #26]
 801c260:	429a      	cmp	r2, r3
 801c262:	d82a      	bhi.n	801c2ba <etharp_find_entry+0x18a>
            old_pending = i;
 801c264:	8c3b      	ldrh	r3, [r7, #32]
 801c266:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801c268:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c26c:	4965      	ldr	r1, [pc, #404]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c26e:	4613      	mov	r3, r2
 801c270:	005b      	lsls	r3, r3, #1
 801c272:	4413      	add	r3, r2
 801c274:	00db      	lsls	r3, r3, #3
 801c276:	440b      	add	r3, r1
 801c278:	3312      	adds	r3, #18
 801c27a:	881b      	ldrh	r3, [r3, #0]
 801c27c:	837b      	strh	r3, [r7, #26]
 801c27e:	e01c      	b.n	801c2ba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c280:	7dfb      	ldrb	r3, [r7, #23]
 801c282:	2b01      	cmp	r3, #1
 801c284:	d919      	bls.n	801c2ba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c286:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c28a:	495e      	ldr	r1, [pc, #376]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c28c:	4613      	mov	r3, r2
 801c28e:	005b      	lsls	r3, r3, #1
 801c290:	4413      	add	r3, r2
 801c292:	00db      	lsls	r3, r3, #3
 801c294:	440b      	add	r3, r1
 801c296:	3312      	adds	r3, #18
 801c298:	881b      	ldrh	r3, [r3, #0]
 801c29a:	8b3a      	ldrh	r2, [r7, #24]
 801c29c:	429a      	cmp	r2, r3
 801c29e:	d80c      	bhi.n	801c2ba <etharp_find_entry+0x18a>
            old_stable = i;
 801c2a0:	8c3b      	ldrh	r3, [r7, #32]
 801c2a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801c2a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c2a8:	4956      	ldr	r1, [pc, #344]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c2aa:	4613      	mov	r3, r2
 801c2ac:	005b      	lsls	r3, r3, #1
 801c2ae:	4413      	add	r3, r2
 801c2b0:	00db      	lsls	r3, r3, #3
 801c2b2:	440b      	add	r3, r1
 801c2b4:	3312      	adds	r3, #18
 801c2b6:	881b      	ldrh	r3, [r3, #0]
 801c2b8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c2ba:	8c3b      	ldrh	r3, [r7, #32]
 801c2bc:	3301      	adds	r3, #1
 801c2be:	b29b      	uxth	r3, r3
 801c2c0:	843b      	strh	r3, [r7, #32]
 801c2c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c2c6:	2b09      	cmp	r3, #9
 801c2c8:	f77f af4c 	ble.w	801c164 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c2cc:	7afb      	ldrb	r3, [r7, #11]
 801c2ce:	f003 0302 	and.w	r3, r3, #2
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d108      	bne.n	801c2e8 <etharp_find_entry+0x1b8>
 801c2d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c2da:	2b0a      	cmp	r3, #10
 801c2dc:	d107      	bne.n	801c2ee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c2de:	7afb      	ldrb	r3, [r7, #11]
 801c2e0:	f003 0301 	and.w	r3, r3, #1
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d102      	bne.n	801c2ee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c2e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c2ec:	e085      	b.n	801c3fa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c2ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c2f2:	2b09      	cmp	r3, #9
 801c2f4:	dc02      	bgt.n	801c2fc <etharp_find_entry+0x1cc>
    i = empty;
 801c2f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2f8:	843b      	strh	r3, [r7, #32]
 801c2fa:	e039      	b.n	801c370 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c2fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c300:	2b09      	cmp	r3, #9
 801c302:	dc14      	bgt.n	801c32e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c304:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c306:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c308:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c30c:	493d      	ldr	r1, [pc, #244]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c30e:	4613      	mov	r3, r2
 801c310:	005b      	lsls	r3, r3, #1
 801c312:	4413      	add	r3, r2
 801c314:	00db      	lsls	r3, r3, #3
 801c316:	440b      	add	r3, r1
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d018      	beq.n	801c350 <etharp_find_entry+0x220>
 801c31e:	4b3a      	ldr	r3, [pc, #232]	@ (801c408 <etharp_find_entry+0x2d8>)
 801c320:	f240 126d 	movw	r2, #365	@ 0x16d
 801c324:	493b      	ldr	r1, [pc, #236]	@ (801c414 <etharp_find_entry+0x2e4>)
 801c326:	483a      	ldr	r0, [pc, #232]	@ (801c410 <etharp_find_entry+0x2e0>)
 801c328:	f003 fe8c 	bl	8020044 <iprintf>
 801c32c:	e010      	b.n	801c350 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c32e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c332:	2b09      	cmp	r3, #9
 801c334:	dc02      	bgt.n	801c33c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c336:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c338:	843b      	strh	r3, [r7, #32]
 801c33a:	e009      	b.n	801c350 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c33c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c340:	2b09      	cmp	r3, #9
 801c342:	dc02      	bgt.n	801c34a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c344:	8bfb      	ldrh	r3, [r7, #30]
 801c346:	843b      	strh	r3, [r7, #32]
 801c348:	e002      	b.n	801c350 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c34a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c34e:	e054      	b.n	801c3fa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c350:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c354:	2b09      	cmp	r3, #9
 801c356:	dd06      	ble.n	801c366 <etharp_find_entry+0x236>
 801c358:	4b2b      	ldr	r3, [pc, #172]	@ (801c408 <etharp_find_entry+0x2d8>)
 801c35a:	f240 127f 	movw	r2, #383	@ 0x17f
 801c35e:	492e      	ldr	r1, [pc, #184]	@ (801c418 <etharp_find_entry+0x2e8>)
 801c360:	482b      	ldr	r0, [pc, #172]	@ (801c410 <etharp_find_entry+0x2e0>)
 801c362:	f003 fe6f 	bl	8020044 <iprintf>
    etharp_free_entry(i);
 801c366:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c36a:	4618      	mov	r0, r3
 801c36c:	f7ff fe06 	bl	801bf7c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c370:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c374:	2b09      	cmp	r3, #9
 801c376:	dd06      	ble.n	801c386 <etharp_find_entry+0x256>
 801c378:	4b23      	ldr	r3, [pc, #140]	@ (801c408 <etharp_find_entry+0x2d8>)
 801c37a:	f240 1283 	movw	r2, #387	@ 0x183
 801c37e:	4926      	ldr	r1, [pc, #152]	@ (801c418 <etharp_find_entry+0x2e8>)
 801c380:	4823      	ldr	r0, [pc, #140]	@ (801c410 <etharp_find_entry+0x2e0>)
 801c382:	f003 fe5f 	bl	8020044 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c386:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c38a:	491e      	ldr	r1, [pc, #120]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c38c:	4613      	mov	r3, r2
 801c38e:	005b      	lsls	r3, r3, #1
 801c390:	4413      	add	r3, r2
 801c392:	00db      	lsls	r3, r3, #3
 801c394:	440b      	add	r3, r1
 801c396:	3314      	adds	r3, #20
 801c398:	781b      	ldrb	r3, [r3, #0]
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	d006      	beq.n	801c3ac <etharp_find_entry+0x27c>
 801c39e:	4b1a      	ldr	r3, [pc, #104]	@ (801c408 <etharp_find_entry+0x2d8>)
 801c3a0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801c3a4:	491d      	ldr	r1, [pc, #116]	@ (801c41c <etharp_find_entry+0x2ec>)
 801c3a6:	481a      	ldr	r0, [pc, #104]	@ (801c410 <etharp_find_entry+0x2e0>)
 801c3a8:	f003 fe4c 	bl	8020044 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d00b      	beq.n	801c3ca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c3b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	6819      	ldr	r1, [r3, #0]
 801c3ba:	4812      	ldr	r0, [pc, #72]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c3bc:	4613      	mov	r3, r2
 801c3be:	005b      	lsls	r3, r3, #1
 801c3c0:	4413      	add	r3, r2
 801c3c2:	00db      	lsls	r3, r3, #3
 801c3c4:	4403      	add	r3, r0
 801c3c6:	3304      	adds	r3, #4
 801c3c8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c3ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3ce:	490d      	ldr	r1, [pc, #52]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c3d0:	4613      	mov	r3, r2
 801c3d2:	005b      	lsls	r3, r3, #1
 801c3d4:	4413      	add	r3, r2
 801c3d6:	00db      	lsls	r3, r3, #3
 801c3d8:	440b      	add	r3, r1
 801c3da:	3312      	adds	r3, #18
 801c3dc:	2200      	movs	r2, #0
 801c3de:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c3e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3e4:	4907      	ldr	r1, [pc, #28]	@ (801c404 <etharp_find_entry+0x2d4>)
 801c3e6:	4613      	mov	r3, r2
 801c3e8:	005b      	lsls	r3, r3, #1
 801c3ea:	4413      	add	r3, r2
 801c3ec:	00db      	lsls	r3, r3, #3
 801c3ee:	440b      	add	r3, r1
 801c3f0:	3308      	adds	r3, #8
 801c3f2:	687a      	ldr	r2, [r7, #4]
 801c3f4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c3f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	3728      	adds	r7, #40	@ 0x28
 801c3fe:	46bd      	mov	sp, r7
 801c400:	bd80      	pop	{r7, pc}
 801c402:	bf00      	nop
 801c404:	2002d40c 	.word	0x2002d40c
 801c408:	08023f6c 	.word	0x08023f6c
 801c40c:	08023fa4 	.word	0x08023fa4
 801c410:	08023fe4 	.word	0x08023fe4
 801c414:	0802400c 	.word	0x0802400c
 801c418:	08024024 	.word	0x08024024
 801c41c:	08024038 	.word	0x08024038

0801c420 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c420:	b580      	push	{r7, lr}
 801c422:	b088      	sub	sp, #32
 801c424:	af02      	add	r7, sp, #8
 801c426:	60f8      	str	r0, [r7, #12]
 801c428:	60b9      	str	r1, [r7, #8]
 801c42a:	607a      	str	r2, [r7, #4]
 801c42c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c434:	2b06      	cmp	r3, #6
 801c436:	d006      	beq.n	801c446 <etharp_update_arp_entry+0x26>
 801c438:	4b48      	ldr	r3, [pc, #288]	@ (801c55c <etharp_update_arp_entry+0x13c>)
 801c43a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801c43e:	4948      	ldr	r1, [pc, #288]	@ (801c560 <etharp_update_arp_entry+0x140>)
 801c440:	4848      	ldr	r0, [pc, #288]	@ (801c564 <etharp_update_arp_entry+0x144>)
 801c442:	f003 fdff 	bl	8020044 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c446:	68bb      	ldr	r3, [r7, #8]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d012      	beq.n	801c472 <etharp_update_arp_entry+0x52>
 801c44c:	68bb      	ldr	r3, [r7, #8]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d00e      	beq.n	801c472 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c454:	68bb      	ldr	r3, [r7, #8]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	68f9      	ldr	r1, [r7, #12]
 801c45a:	4618      	mov	r0, r3
 801c45c:	f001 f9ee 	bl	801d83c <ip4_addr_isbroadcast_u32>
 801c460:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c462:	2b00      	cmp	r3, #0
 801c464:	d105      	bne.n	801c472 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c466:	68bb      	ldr	r3, [r7, #8]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c46e:	2be0      	cmp	r3, #224	@ 0xe0
 801c470:	d102      	bne.n	801c478 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c472:	f06f 030f 	mvn.w	r3, #15
 801c476:	e06c      	b.n	801c552 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c478:	78fb      	ldrb	r3, [r7, #3]
 801c47a:	68fa      	ldr	r2, [r7, #12]
 801c47c:	4619      	mov	r1, r3
 801c47e:	68b8      	ldr	r0, [r7, #8]
 801c480:	f7ff fe56 	bl	801c130 <etharp_find_entry>
 801c484:	4603      	mov	r3, r0
 801c486:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c488:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	da02      	bge.n	801c496 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c490:	8afb      	ldrh	r3, [r7, #22]
 801c492:	b25b      	sxtb	r3, r3
 801c494:	e05d      	b.n	801c552 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c496:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c49a:	4933      	ldr	r1, [pc, #204]	@ (801c568 <etharp_update_arp_entry+0x148>)
 801c49c:	4613      	mov	r3, r2
 801c49e:	005b      	lsls	r3, r3, #1
 801c4a0:	4413      	add	r3, r2
 801c4a2:	00db      	lsls	r3, r3, #3
 801c4a4:	440b      	add	r3, r1
 801c4a6:	3314      	adds	r3, #20
 801c4a8:	2202      	movs	r2, #2
 801c4aa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c4ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c4b0:	492d      	ldr	r1, [pc, #180]	@ (801c568 <etharp_update_arp_entry+0x148>)
 801c4b2:	4613      	mov	r3, r2
 801c4b4:	005b      	lsls	r3, r3, #1
 801c4b6:	4413      	add	r3, r2
 801c4b8:	00db      	lsls	r3, r3, #3
 801c4ba:	440b      	add	r3, r1
 801c4bc:	3308      	adds	r3, #8
 801c4be:	68fa      	ldr	r2, [r7, #12]
 801c4c0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c4c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c4c6:	4613      	mov	r3, r2
 801c4c8:	005b      	lsls	r3, r3, #1
 801c4ca:	4413      	add	r3, r2
 801c4cc:	00db      	lsls	r3, r3, #3
 801c4ce:	3308      	adds	r3, #8
 801c4d0:	4a25      	ldr	r2, [pc, #148]	@ (801c568 <etharp_update_arp_entry+0x148>)
 801c4d2:	4413      	add	r3, r2
 801c4d4:	3304      	adds	r3, #4
 801c4d6:	2206      	movs	r2, #6
 801c4d8:	6879      	ldr	r1, [r7, #4]
 801c4da:	4618      	mov	r0, r3
 801c4dc:	f003 ffdd 	bl	802049a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c4e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c4e4:	4920      	ldr	r1, [pc, #128]	@ (801c568 <etharp_update_arp_entry+0x148>)
 801c4e6:	4613      	mov	r3, r2
 801c4e8:	005b      	lsls	r3, r3, #1
 801c4ea:	4413      	add	r3, r2
 801c4ec:	00db      	lsls	r3, r3, #3
 801c4ee:	440b      	add	r3, r1
 801c4f0:	3312      	adds	r3, #18
 801c4f2:	2200      	movs	r2, #0
 801c4f4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c4f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c4fa:	491b      	ldr	r1, [pc, #108]	@ (801c568 <etharp_update_arp_entry+0x148>)
 801c4fc:	4613      	mov	r3, r2
 801c4fe:	005b      	lsls	r3, r3, #1
 801c500:	4413      	add	r3, r2
 801c502:	00db      	lsls	r3, r3, #3
 801c504:	440b      	add	r3, r1
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d021      	beq.n	801c550 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c50c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c510:	4915      	ldr	r1, [pc, #84]	@ (801c568 <etharp_update_arp_entry+0x148>)
 801c512:	4613      	mov	r3, r2
 801c514:	005b      	lsls	r3, r3, #1
 801c516:	4413      	add	r3, r2
 801c518:	00db      	lsls	r3, r3, #3
 801c51a:	440b      	add	r3, r1
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c520:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c524:	4910      	ldr	r1, [pc, #64]	@ (801c568 <etharp_update_arp_entry+0x148>)
 801c526:	4613      	mov	r3, r2
 801c528:	005b      	lsls	r3, r3, #1
 801c52a:	4413      	add	r3, r2
 801c52c:	00db      	lsls	r3, r3, #3
 801c52e:	440b      	add	r3, r1
 801c530:	2200      	movs	r2, #0
 801c532:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c53a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c53e:	9300      	str	r3, [sp, #0]
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	6939      	ldr	r1, [r7, #16]
 801c544:	68f8      	ldr	r0, [r7, #12]
 801c546:	f002 f8d9 	bl	801e6fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c54a:	6938      	ldr	r0, [r7, #16]
 801c54c:	f7f8 fb1c 	bl	8014b88 <pbuf_free>
  }
  return ERR_OK;
 801c550:	2300      	movs	r3, #0
}
 801c552:	4618      	mov	r0, r3
 801c554:	3718      	adds	r7, #24
 801c556:	46bd      	mov	sp, r7
 801c558:	bd80      	pop	{r7, pc}
 801c55a:	bf00      	nop
 801c55c:	08023f6c 	.word	0x08023f6c
 801c560:	08024064 	.word	0x08024064
 801c564:	08023fe4 	.word	0x08023fe4
 801c568:	2002d40c 	.word	0x2002d40c

0801c56c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c56c:	b580      	push	{r7, lr}
 801c56e:	b084      	sub	sp, #16
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c574:	2300      	movs	r3, #0
 801c576:	60fb      	str	r3, [r7, #12]
 801c578:	e01e      	b.n	801c5b8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c57a:	4913      	ldr	r1, [pc, #76]	@ (801c5c8 <etharp_cleanup_netif+0x5c>)
 801c57c:	68fa      	ldr	r2, [r7, #12]
 801c57e:	4613      	mov	r3, r2
 801c580:	005b      	lsls	r3, r3, #1
 801c582:	4413      	add	r3, r2
 801c584:	00db      	lsls	r3, r3, #3
 801c586:	440b      	add	r3, r1
 801c588:	3314      	adds	r3, #20
 801c58a:	781b      	ldrb	r3, [r3, #0]
 801c58c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c58e:	7afb      	ldrb	r3, [r7, #11]
 801c590:	2b00      	cmp	r3, #0
 801c592:	d00e      	beq.n	801c5b2 <etharp_cleanup_netif+0x46>
 801c594:	490c      	ldr	r1, [pc, #48]	@ (801c5c8 <etharp_cleanup_netif+0x5c>)
 801c596:	68fa      	ldr	r2, [r7, #12]
 801c598:	4613      	mov	r3, r2
 801c59a:	005b      	lsls	r3, r3, #1
 801c59c:	4413      	add	r3, r2
 801c59e:	00db      	lsls	r3, r3, #3
 801c5a0:	440b      	add	r3, r1
 801c5a2:	3308      	adds	r3, #8
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	687a      	ldr	r2, [r7, #4]
 801c5a8:	429a      	cmp	r2, r3
 801c5aa:	d102      	bne.n	801c5b2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c5ac:	68f8      	ldr	r0, [r7, #12]
 801c5ae:	f7ff fce5 	bl	801bf7c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	3301      	adds	r3, #1
 801c5b6:	60fb      	str	r3, [r7, #12]
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	2b09      	cmp	r3, #9
 801c5bc:	dddd      	ble.n	801c57a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c5be:	bf00      	nop
 801c5c0:	bf00      	nop
 801c5c2:	3710      	adds	r7, #16
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	bd80      	pop	{r7, pc}
 801c5c8:	2002d40c 	.word	0x2002d40c

0801c5cc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c5cc:	b5b0      	push	{r4, r5, r7, lr}
 801c5ce:	b08a      	sub	sp, #40	@ 0x28
 801c5d0:	af04      	add	r7, sp, #16
 801c5d2:	6078      	str	r0, [r7, #4]
 801c5d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c5d6:	683b      	ldr	r3, [r7, #0]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d107      	bne.n	801c5ec <etharp_input+0x20>
 801c5dc:	4b49      	ldr	r3, [pc, #292]	@ (801c704 <etharp_input+0x138>)
 801c5de:	f240 228a 	movw	r2, #650	@ 0x28a
 801c5e2:	4949      	ldr	r1, [pc, #292]	@ (801c708 <etharp_input+0x13c>)
 801c5e4:	4849      	ldr	r0, [pc, #292]	@ (801c70c <etharp_input+0x140>)
 801c5e6:	f003 fd2d 	bl	8020044 <iprintf>
 801c5ea:	e088      	b.n	801c6fe <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	685b      	ldr	r3, [r3, #4]
 801c5f0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c5f2:	693b      	ldr	r3, [r7, #16]
 801c5f4:	881b      	ldrh	r3, [r3, #0]
 801c5f6:	b29b      	uxth	r3, r3
 801c5f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c5fc:	d10c      	bne.n	801c618 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c5fe:	693b      	ldr	r3, [r7, #16]
 801c600:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c602:	2b06      	cmp	r3, #6
 801c604:	d108      	bne.n	801c618 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c606:	693b      	ldr	r3, [r7, #16]
 801c608:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c60a:	2b04      	cmp	r3, #4
 801c60c:	d104      	bne.n	801c618 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c60e:	693b      	ldr	r3, [r7, #16]
 801c610:	885b      	ldrh	r3, [r3, #2]
 801c612:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c614:	2b08      	cmp	r3, #8
 801c616:	d00f      	beq.n	801c638 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801c618:	4b3d      	ldr	r3, [pc, #244]	@ (801c710 <etharp_input+0x144>)
 801c61a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c61c:	3301      	adds	r3, #1
 801c61e:	b29a      	uxth	r2, r3
 801c620:	4b3b      	ldr	r3, [pc, #236]	@ (801c710 <etharp_input+0x144>)
 801c622:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801c624:	4b3a      	ldr	r3, [pc, #232]	@ (801c710 <etharp_input+0x144>)
 801c626:	8bdb      	ldrh	r3, [r3, #30]
 801c628:	3301      	adds	r3, #1
 801c62a:	b29a      	uxth	r2, r3
 801c62c:	4b38      	ldr	r3, [pc, #224]	@ (801c710 <etharp_input+0x144>)
 801c62e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801c630:	6878      	ldr	r0, [r7, #4]
 801c632:	f7f8 faa9 	bl	8014b88 <pbuf_free>
    return;
 801c636:	e062      	b.n	801c6fe <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801c638:	4b35      	ldr	r3, [pc, #212]	@ (801c710 <etharp_input+0x144>)
 801c63a:	8b5b      	ldrh	r3, [r3, #26]
 801c63c:	3301      	adds	r3, #1
 801c63e:	b29a      	uxth	r2, r3
 801c640:	4b33      	ldr	r3, [pc, #204]	@ (801c710 <etharp_input+0x144>)
 801c642:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c644:	693b      	ldr	r3, [r7, #16]
 801c646:	330e      	adds	r3, #14
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c64c:	693b      	ldr	r3, [r7, #16]
 801c64e:	3318      	adds	r3, #24
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c654:	683b      	ldr	r3, [r7, #0]
 801c656:	3304      	adds	r3, #4
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d102      	bne.n	801c664 <etharp_input+0x98>
    for_us = 0;
 801c65e:	2300      	movs	r3, #0
 801c660:	75fb      	strb	r3, [r7, #23]
 801c662:	e009      	b.n	801c678 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c664:	68ba      	ldr	r2, [r7, #8]
 801c666:	683b      	ldr	r3, [r7, #0]
 801c668:	3304      	adds	r3, #4
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	429a      	cmp	r2, r3
 801c66e:	bf0c      	ite	eq
 801c670:	2301      	moveq	r3, #1
 801c672:	2300      	movne	r3, #0
 801c674:	b2db      	uxtb	r3, r3
 801c676:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	f103 0208 	add.w	r2, r3, #8
 801c67e:	7dfb      	ldrb	r3, [r7, #23]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d001      	beq.n	801c688 <etharp_input+0xbc>
 801c684:	2301      	movs	r3, #1
 801c686:	e000      	b.n	801c68a <etharp_input+0xbe>
 801c688:	2302      	movs	r3, #2
 801c68a:	f107 010c 	add.w	r1, r7, #12
 801c68e:	6838      	ldr	r0, [r7, #0]
 801c690:	f7ff fec6 	bl	801c420 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c694:	693b      	ldr	r3, [r7, #16]
 801c696:	88db      	ldrh	r3, [r3, #6]
 801c698:	b29b      	uxth	r3, r3
 801c69a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c69e:	d003      	beq.n	801c6a8 <etharp_input+0xdc>
 801c6a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c6a4:	d025      	beq.n	801c6f2 <etharp_input+0x126>
 801c6a6:	e01d      	b.n	801c6e4 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801c6a8:	7dfb      	ldrb	r3, [r7, #23]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d023      	beq.n	801c6f6 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c6ae:	683b      	ldr	r3, [r7, #0]
 801c6b0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801c6b4:	693b      	ldr	r3, [r7, #16]
 801c6b6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c6ba:	683b      	ldr	r3, [r7, #0]
 801c6bc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801c6c0:	683b      	ldr	r3, [r7, #0]
 801c6c2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c6c4:	693a      	ldr	r2, [r7, #16]
 801c6c6:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c6c8:	2102      	movs	r1, #2
 801c6ca:	9103      	str	r1, [sp, #12]
 801c6cc:	f107 010c 	add.w	r1, r7, #12
 801c6d0:	9102      	str	r1, [sp, #8]
 801c6d2:	9201      	str	r2, [sp, #4]
 801c6d4:	9300      	str	r3, [sp, #0]
 801c6d6:	462b      	mov	r3, r5
 801c6d8:	4622      	mov	r2, r4
 801c6da:	4601      	mov	r1, r0
 801c6dc:	6838      	ldr	r0, [r7, #0]
 801c6de:	f000 fb0b 	bl	801ccf8 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801c6e2:	e008      	b.n	801c6f6 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801c6e4:	4b0a      	ldr	r3, [pc, #40]	@ (801c710 <etharp_input+0x144>)
 801c6e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c6e8:	3301      	adds	r3, #1
 801c6ea:	b29a      	uxth	r2, r3
 801c6ec:	4b08      	ldr	r3, [pc, #32]	@ (801c710 <etharp_input+0x144>)
 801c6ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801c6f0:	e002      	b.n	801c6f8 <etharp_input+0x12c>
      break;
 801c6f2:	bf00      	nop
 801c6f4:	e000      	b.n	801c6f8 <etharp_input+0x12c>
      break;
 801c6f6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c6f8:	6878      	ldr	r0, [r7, #4]
 801c6fa:	f7f8 fa45 	bl	8014b88 <pbuf_free>
}
 801c6fe:	3718      	adds	r7, #24
 801c700:	46bd      	mov	sp, r7
 801c702:	bdb0      	pop	{r4, r5, r7, pc}
 801c704:	08023f6c 	.word	0x08023f6c
 801c708:	080240bc 	.word	0x080240bc
 801c70c:	08023fe4 	.word	0x08023fe4
 801c710:	2002d2b0 	.word	0x2002d2b0

0801c714 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c714:	b580      	push	{r7, lr}
 801c716:	b086      	sub	sp, #24
 801c718:	af02      	add	r7, sp, #8
 801c71a:	60f8      	str	r0, [r7, #12]
 801c71c:	60b9      	str	r1, [r7, #8]
 801c71e:	4613      	mov	r3, r2
 801c720:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c722:	79fa      	ldrb	r2, [r7, #7]
 801c724:	4944      	ldr	r1, [pc, #272]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c726:	4613      	mov	r3, r2
 801c728:	005b      	lsls	r3, r3, #1
 801c72a:	4413      	add	r3, r2
 801c72c:	00db      	lsls	r3, r3, #3
 801c72e:	440b      	add	r3, r1
 801c730:	3314      	adds	r3, #20
 801c732:	781b      	ldrb	r3, [r3, #0]
 801c734:	2b01      	cmp	r3, #1
 801c736:	d806      	bhi.n	801c746 <etharp_output_to_arp_index+0x32>
 801c738:	4b40      	ldr	r3, [pc, #256]	@ (801c83c <etharp_output_to_arp_index+0x128>)
 801c73a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801c73e:	4940      	ldr	r1, [pc, #256]	@ (801c840 <etharp_output_to_arp_index+0x12c>)
 801c740:	4840      	ldr	r0, [pc, #256]	@ (801c844 <etharp_output_to_arp_index+0x130>)
 801c742:	f003 fc7f 	bl	8020044 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c746:	79fa      	ldrb	r2, [r7, #7]
 801c748:	493b      	ldr	r1, [pc, #236]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c74a:	4613      	mov	r3, r2
 801c74c:	005b      	lsls	r3, r3, #1
 801c74e:	4413      	add	r3, r2
 801c750:	00db      	lsls	r3, r3, #3
 801c752:	440b      	add	r3, r1
 801c754:	3314      	adds	r3, #20
 801c756:	781b      	ldrb	r3, [r3, #0]
 801c758:	2b02      	cmp	r3, #2
 801c75a:	d153      	bne.n	801c804 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c75c:	79fa      	ldrb	r2, [r7, #7]
 801c75e:	4936      	ldr	r1, [pc, #216]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c760:	4613      	mov	r3, r2
 801c762:	005b      	lsls	r3, r3, #1
 801c764:	4413      	add	r3, r2
 801c766:	00db      	lsls	r3, r3, #3
 801c768:	440b      	add	r3, r1
 801c76a:	3312      	adds	r3, #18
 801c76c:	881b      	ldrh	r3, [r3, #0]
 801c76e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801c772:	d919      	bls.n	801c7a8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c774:	79fa      	ldrb	r2, [r7, #7]
 801c776:	4613      	mov	r3, r2
 801c778:	005b      	lsls	r3, r3, #1
 801c77a:	4413      	add	r3, r2
 801c77c:	00db      	lsls	r3, r3, #3
 801c77e:	4a2e      	ldr	r2, [pc, #184]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c780:	4413      	add	r3, r2
 801c782:	3304      	adds	r3, #4
 801c784:	4619      	mov	r1, r3
 801c786:	68f8      	ldr	r0, [r7, #12]
 801c788:	f000 fb72 	bl	801ce70 <etharp_request>
 801c78c:	4603      	mov	r3, r0
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d138      	bne.n	801c804 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c792:	79fa      	ldrb	r2, [r7, #7]
 801c794:	4928      	ldr	r1, [pc, #160]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c796:	4613      	mov	r3, r2
 801c798:	005b      	lsls	r3, r3, #1
 801c79a:	4413      	add	r3, r2
 801c79c:	00db      	lsls	r3, r3, #3
 801c79e:	440b      	add	r3, r1
 801c7a0:	3314      	adds	r3, #20
 801c7a2:	2203      	movs	r2, #3
 801c7a4:	701a      	strb	r2, [r3, #0]
 801c7a6:	e02d      	b.n	801c804 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c7a8:	79fa      	ldrb	r2, [r7, #7]
 801c7aa:	4923      	ldr	r1, [pc, #140]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c7ac:	4613      	mov	r3, r2
 801c7ae:	005b      	lsls	r3, r3, #1
 801c7b0:	4413      	add	r3, r2
 801c7b2:	00db      	lsls	r3, r3, #3
 801c7b4:	440b      	add	r3, r1
 801c7b6:	3312      	adds	r3, #18
 801c7b8:	881b      	ldrh	r3, [r3, #0]
 801c7ba:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801c7be:	d321      	bcc.n	801c804 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c7c0:	79fa      	ldrb	r2, [r7, #7]
 801c7c2:	4613      	mov	r3, r2
 801c7c4:	005b      	lsls	r3, r3, #1
 801c7c6:	4413      	add	r3, r2
 801c7c8:	00db      	lsls	r3, r3, #3
 801c7ca:	4a1b      	ldr	r2, [pc, #108]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c7cc:	4413      	add	r3, r2
 801c7ce:	1d19      	adds	r1, r3, #4
 801c7d0:	79fa      	ldrb	r2, [r7, #7]
 801c7d2:	4613      	mov	r3, r2
 801c7d4:	005b      	lsls	r3, r3, #1
 801c7d6:	4413      	add	r3, r2
 801c7d8:	00db      	lsls	r3, r3, #3
 801c7da:	3308      	adds	r3, #8
 801c7dc:	4a16      	ldr	r2, [pc, #88]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c7de:	4413      	add	r3, r2
 801c7e0:	3304      	adds	r3, #4
 801c7e2:	461a      	mov	r2, r3
 801c7e4:	68f8      	ldr	r0, [r7, #12]
 801c7e6:	f000 fb21 	bl	801ce2c <etharp_request_dst>
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d109      	bne.n	801c804 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c7f0:	79fa      	ldrb	r2, [r7, #7]
 801c7f2:	4911      	ldr	r1, [pc, #68]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c7f4:	4613      	mov	r3, r2
 801c7f6:	005b      	lsls	r3, r3, #1
 801c7f8:	4413      	add	r3, r2
 801c7fa:	00db      	lsls	r3, r3, #3
 801c7fc:	440b      	add	r3, r1
 801c7fe:	3314      	adds	r3, #20
 801c800:	2203      	movs	r2, #3
 801c802:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801c80a:	79fa      	ldrb	r2, [r7, #7]
 801c80c:	4613      	mov	r3, r2
 801c80e:	005b      	lsls	r3, r3, #1
 801c810:	4413      	add	r3, r2
 801c812:	00db      	lsls	r3, r3, #3
 801c814:	3308      	adds	r3, #8
 801c816:	4a08      	ldr	r2, [pc, #32]	@ (801c838 <etharp_output_to_arp_index+0x124>)
 801c818:	4413      	add	r3, r2
 801c81a:	3304      	adds	r3, #4
 801c81c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c820:	9200      	str	r2, [sp, #0]
 801c822:	460a      	mov	r2, r1
 801c824:	68b9      	ldr	r1, [r7, #8]
 801c826:	68f8      	ldr	r0, [r7, #12]
 801c828:	f001 ff68 	bl	801e6fc <ethernet_output>
 801c82c:	4603      	mov	r3, r0
}
 801c82e:	4618      	mov	r0, r3
 801c830:	3710      	adds	r7, #16
 801c832:	46bd      	mov	sp, r7
 801c834:	bd80      	pop	{r7, pc}
 801c836:	bf00      	nop
 801c838:	2002d40c 	.word	0x2002d40c
 801c83c:	08023f6c 	.word	0x08023f6c
 801c840:	080240dc 	.word	0x080240dc
 801c844:	08023fe4 	.word	0x08023fe4

0801c848 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c848:	b580      	push	{r7, lr}
 801c84a:	b08a      	sub	sp, #40	@ 0x28
 801c84c:	af02      	add	r7, sp, #8
 801c84e:	60f8      	str	r0, [r7, #12]
 801c850:	60b9      	str	r1, [r7, #8]
 801c852:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d106      	bne.n	801c86c <etharp_output+0x24>
 801c85e:	4b76      	ldr	r3, [pc, #472]	@ (801ca38 <etharp_output+0x1f0>)
 801c860:	f240 321e 	movw	r2, #798	@ 0x31e
 801c864:	4975      	ldr	r1, [pc, #468]	@ (801ca3c <etharp_output+0x1f4>)
 801c866:	4876      	ldr	r0, [pc, #472]	@ (801ca40 <etharp_output+0x1f8>)
 801c868:	f003 fbec 	bl	8020044 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c86c:	68bb      	ldr	r3, [r7, #8]
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d106      	bne.n	801c880 <etharp_output+0x38>
 801c872:	4b71      	ldr	r3, [pc, #452]	@ (801ca38 <etharp_output+0x1f0>)
 801c874:	f240 321f 	movw	r2, #799	@ 0x31f
 801c878:	4972      	ldr	r1, [pc, #456]	@ (801ca44 <etharp_output+0x1fc>)
 801c87a:	4871      	ldr	r0, [pc, #452]	@ (801ca40 <etharp_output+0x1f8>)
 801c87c:	f003 fbe2 	bl	8020044 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	2b00      	cmp	r3, #0
 801c884:	d106      	bne.n	801c894 <etharp_output+0x4c>
 801c886:	4b6c      	ldr	r3, [pc, #432]	@ (801ca38 <etharp_output+0x1f0>)
 801c888:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801c88c:	496e      	ldr	r1, [pc, #440]	@ (801ca48 <etharp_output+0x200>)
 801c88e:	486c      	ldr	r0, [pc, #432]	@ (801ca40 <etharp_output+0x1f8>)
 801c890:	f003 fbd8 	bl	8020044 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	68f9      	ldr	r1, [r7, #12]
 801c89a:	4618      	mov	r0, r3
 801c89c:	f000 ffce 	bl	801d83c <ip4_addr_isbroadcast_u32>
 801c8a0:	4603      	mov	r3, r0
 801c8a2:	2b00      	cmp	r3, #0
 801c8a4:	d002      	beq.n	801c8ac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c8a6:	4b69      	ldr	r3, [pc, #420]	@ (801ca4c <etharp_output+0x204>)
 801c8a8:	61fb      	str	r3, [r7, #28]
 801c8aa:	e0b5      	b.n	801ca18 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c8b4:	2be0      	cmp	r3, #224	@ 0xe0
 801c8b6:	d118      	bne.n	801c8ea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c8b8:	2301      	movs	r3, #1
 801c8ba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c8bc:	2300      	movs	r3, #0
 801c8be:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c8c0:	235e      	movs	r3, #94	@ 0x5e
 801c8c2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	3301      	adds	r3, #1
 801c8c8:	781b      	ldrb	r3, [r3, #0]
 801c8ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c8ce:	b2db      	uxtb	r3, r3
 801c8d0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	3302      	adds	r3, #2
 801c8d6:	781b      	ldrb	r3, [r3, #0]
 801c8d8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	3303      	adds	r3, #3
 801c8de:	781b      	ldrb	r3, [r3, #0]
 801c8e0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c8e2:	f107 0310 	add.w	r3, r7, #16
 801c8e6:	61fb      	str	r3, [r7, #28]
 801c8e8:	e096      	b.n	801ca18 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c8ea:	687b      	ldr	r3, [r7, #4]
 801c8ec:	681a      	ldr	r2, [r3, #0]
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	3304      	adds	r3, #4
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	405a      	eors	r2, r3
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	3308      	adds	r3, #8
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	4013      	ands	r3, r2
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d012      	beq.n	801c928 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c908:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801c90c:	4293      	cmp	r3, r2
 801c90e:	d00b      	beq.n	801c928 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c910:	68fb      	ldr	r3, [r7, #12]
 801c912:	330c      	adds	r3, #12
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d003      	beq.n	801c922 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	330c      	adds	r3, #12
 801c91e:	61bb      	str	r3, [r7, #24]
 801c920:	e002      	b.n	801c928 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c922:	f06f 0303 	mvn.w	r3, #3
 801c926:	e083      	b.n	801ca30 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c928:	4b49      	ldr	r3, [pc, #292]	@ (801ca50 <etharp_output+0x208>)
 801c92a:	781b      	ldrb	r3, [r3, #0]
 801c92c:	4619      	mov	r1, r3
 801c92e:	4a49      	ldr	r2, [pc, #292]	@ (801ca54 <etharp_output+0x20c>)
 801c930:	460b      	mov	r3, r1
 801c932:	005b      	lsls	r3, r3, #1
 801c934:	440b      	add	r3, r1
 801c936:	00db      	lsls	r3, r3, #3
 801c938:	4413      	add	r3, r2
 801c93a:	3314      	adds	r3, #20
 801c93c:	781b      	ldrb	r3, [r3, #0]
 801c93e:	2b01      	cmp	r3, #1
 801c940:	d92b      	bls.n	801c99a <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c942:	4b43      	ldr	r3, [pc, #268]	@ (801ca50 <etharp_output+0x208>)
 801c944:	781b      	ldrb	r3, [r3, #0]
 801c946:	4619      	mov	r1, r3
 801c948:	4a42      	ldr	r2, [pc, #264]	@ (801ca54 <etharp_output+0x20c>)
 801c94a:	460b      	mov	r3, r1
 801c94c:	005b      	lsls	r3, r3, #1
 801c94e:	440b      	add	r3, r1
 801c950:	00db      	lsls	r3, r3, #3
 801c952:	4413      	add	r3, r2
 801c954:	3308      	adds	r3, #8
 801c956:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c958:	68fa      	ldr	r2, [r7, #12]
 801c95a:	429a      	cmp	r2, r3
 801c95c:	d11d      	bne.n	801c99a <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c95e:	69bb      	ldr	r3, [r7, #24]
 801c960:	681a      	ldr	r2, [r3, #0]
 801c962:	4b3b      	ldr	r3, [pc, #236]	@ (801ca50 <etharp_output+0x208>)
 801c964:	781b      	ldrb	r3, [r3, #0]
 801c966:	4618      	mov	r0, r3
 801c968:	493a      	ldr	r1, [pc, #232]	@ (801ca54 <etharp_output+0x20c>)
 801c96a:	4603      	mov	r3, r0
 801c96c:	005b      	lsls	r3, r3, #1
 801c96e:	4403      	add	r3, r0
 801c970:	00db      	lsls	r3, r3, #3
 801c972:	440b      	add	r3, r1
 801c974:	3304      	adds	r3, #4
 801c976:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c978:	429a      	cmp	r2, r3
 801c97a:	d10e      	bne.n	801c99a <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801c97c:	4b36      	ldr	r3, [pc, #216]	@ (801ca58 <etharp_output+0x210>)
 801c97e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801c980:	3301      	adds	r3, #1
 801c982:	b29a      	uxth	r2, r3
 801c984:	4b34      	ldr	r3, [pc, #208]	@ (801ca58 <etharp_output+0x210>)
 801c986:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c988:	4b31      	ldr	r3, [pc, #196]	@ (801ca50 <etharp_output+0x208>)
 801c98a:	781b      	ldrb	r3, [r3, #0]
 801c98c:	461a      	mov	r2, r3
 801c98e:	68b9      	ldr	r1, [r7, #8]
 801c990:	68f8      	ldr	r0, [r7, #12]
 801c992:	f7ff febf 	bl	801c714 <etharp_output_to_arp_index>
 801c996:	4603      	mov	r3, r0
 801c998:	e04a      	b.n	801ca30 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c99a:	2300      	movs	r3, #0
 801c99c:	75fb      	strb	r3, [r7, #23]
 801c99e:	e031      	b.n	801ca04 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c9a0:	7dfa      	ldrb	r2, [r7, #23]
 801c9a2:	492c      	ldr	r1, [pc, #176]	@ (801ca54 <etharp_output+0x20c>)
 801c9a4:	4613      	mov	r3, r2
 801c9a6:	005b      	lsls	r3, r3, #1
 801c9a8:	4413      	add	r3, r2
 801c9aa:	00db      	lsls	r3, r3, #3
 801c9ac:	440b      	add	r3, r1
 801c9ae:	3314      	adds	r3, #20
 801c9b0:	781b      	ldrb	r3, [r3, #0]
 801c9b2:	2b01      	cmp	r3, #1
 801c9b4:	d923      	bls.n	801c9fe <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c9b6:	7dfa      	ldrb	r2, [r7, #23]
 801c9b8:	4926      	ldr	r1, [pc, #152]	@ (801ca54 <etharp_output+0x20c>)
 801c9ba:	4613      	mov	r3, r2
 801c9bc:	005b      	lsls	r3, r3, #1
 801c9be:	4413      	add	r3, r2
 801c9c0:	00db      	lsls	r3, r3, #3
 801c9c2:	440b      	add	r3, r1
 801c9c4:	3308      	adds	r3, #8
 801c9c6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c9c8:	68fa      	ldr	r2, [r7, #12]
 801c9ca:	429a      	cmp	r2, r3
 801c9cc:	d117      	bne.n	801c9fe <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c9ce:	69bb      	ldr	r3, [r7, #24]
 801c9d0:	6819      	ldr	r1, [r3, #0]
 801c9d2:	7dfa      	ldrb	r2, [r7, #23]
 801c9d4:	481f      	ldr	r0, [pc, #124]	@ (801ca54 <etharp_output+0x20c>)
 801c9d6:	4613      	mov	r3, r2
 801c9d8:	005b      	lsls	r3, r3, #1
 801c9da:	4413      	add	r3, r2
 801c9dc:	00db      	lsls	r3, r3, #3
 801c9de:	4403      	add	r3, r0
 801c9e0:	3304      	adds	r3, #4
 801c9e2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c9e4:	4299      	cmp	r1, r3
 801c9e6:	d10a      	bne.n	801c9fe <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c9e8:	4a19      	ldr	r2, [pc, #100]	@ (801ca50 <etharp_output+0x208>)
 801c9ea:	7dfb      	ldrb	r3, [r7, #23]
 801c9ec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c9ee:	7dfb      	ldrb	r3, [r7, #23]
 801c9f0:	461a      	mov	r2, r3
 801c9f2:	68b9      	ldr	r1, [r7, #8]
 801c9f4:	68f8      	ldr	r0, [r7, #12]
 801c9f6:	f7ff fe8d 	bl	801c714 <etharp_output_to_arp_index>
 801c9fa:	4603      	mov	r3, r0
 801c9fc:	e018      	b.n	801ca30 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c9fe:	7dfb      	ldrb	r3, [r7, #23]
 801ca00:	3301      	adds	r3, #1
 801ca02:	75fb      	strb	r3, [r7, #23]
 801ca04:	7dfb      	ldrb	r3, [r7, #23]
 801ca06:	2b09      	cmp	r3, #9
 801ca08:	d9ca      	bls.n	801c9a0 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ca0a:	68ba      	ldr	r2, [r7, #8]
 801ca0c:	69b9      	ldr	r1, [r7, #24]
 801ca0e:	68f8      	ldr	r0, [r7, #12]
 801ca10:	f000 f824 	bl	801ca5c <etharp_query>
 801ca14:	4603      	mov	r3, r0
 801ca16:	e00b      	b.n	801ca30 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801ca1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ca22:	9300      	str	r3, [sp, #0]
 801ca24:	69fb      	ldr	r3, [r7, #28]
 801ca26:	68b9      	ldr	r1, [r7, #8]
 801ca28:	68f8      	ldr	r0, [r7, #12]
 801ca2a:	f001 fe67 	bl	801e6fc <ethernet_output>
 801ca2e:	4603      	mov	r3, r0
}
 801ca30:	4618      	mov	r0, r3
 801ca32:	3720      	adds	r7, #32
 801ca34:	46bd      	mov	sp, r7
 801ca36:	bd80      	pop	{r7, pc}
 801ca38:	08023f6c 	.word	0x08023f6c
 801ca3c:	080240bc 	.word	0x080240bc
 801ca40:	08023fe4 	.word	0x08023fe4
 801ca44:	0802410c 	.word	0x0802410c
 801ca48:	080240ac 	.word	0x080240ac
 801ca4c:	08024dbc 	.word	0x08024dbc
 801ca50:	2002d4fc 	.word	0x2002d4fc
 801ca54:	2002d40c 	.word	0x2002d40c
 801ca58:	2002d2b0 	.word	0x2002d2b0

0801ca5c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b08c      	sub	sp, #48	@ 0x30
 801ca60:	af02      	add	r7, sp, #8
 801ca62:	60f8      	str	r0, [r7, #12]
 801ca64:	60b9      	str	r1, [r7, #8]
 801ca66:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	3326      	adds	r3, #38	@ 0x26
 801ca6c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ca6e:	23ff      	movs	r3, #255	@ 0xff
 801ca70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ca74:	2300      	movs	r3, #0
 801ca76:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ca78:	68bb      	ldr	r3, [r7, #8]
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	68f9      	ldr	r1, [r7, #12]
 801ca7e:	4618      	mov	r0, r3
 801ca80:	f000 fedc 	bl	801d83c <ip4_addr_isbroadcast_u32>
 801ca84:	4603      	mov	r3, r0
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d10c      	bne.n	801caa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ca8a:	68bb      	ldr	r3, [r7, #8]
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ca92:	2be0      	cmp	r3, #224	@ 0xe0
 801ca94:	d006      	beq.n	801caa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ca96:	68bb      	ldr	r3, [r7, #8]
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d003      	beq.n	801caa4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ca9c:	68bb      	ldr	r3, [r7, #8]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d102      	bne.n	801caaa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801caa4:	f06f 030f 	mvn.w	r3, #15
 801caa8:	e110      	b.n	801cccc <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801caaa:	68fa      	ldr	r2, [r7, #12]
 801caac:	2101      	movs	r1, #1
 801caae:	68b8      	ldr	r0, [r7, #8]
 801cab0:	f7ff fb3e 	bl	801c130 <etharp_find_entry>
 801cab4:	4603      	mov	r3, r0
 801cab6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801cab8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	da0b      	bge.n	801cad8 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d005      	beq.n	801cad2 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801cac6:	4b83      	ldr	r3, [pc, #524]	@ (801ccd4 <etharp_query+0x278>)
 801cac8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801caca:	3301      	adds	r3, #1
 801cacc:	b29a      	uxth	r2, r3
 801cace:	4b81      	ldr	r3, [pc, #516]	@ (801ccd4 <etharp_query+0x278>)
 801cad0:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801cad2:	8a7b      	ldrh	r3, [r7, #18]
 801cad4:	b25b      	sxtb	r3, r3
 801cad6:	e0f9      	b.n	801cccc <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801cad8:	8a7b      	ldrh	r3, [r7, #18]
 801cada:	2b7e      	cmp	r3, #126	@ 0x7e
 801cadc:	d906      	bls.n	801caec <etharp_query+0x90>
 801cade:	4b7e      	ldr	r3, [pc, #504]	@ (801ccd8 <etharp_query+0x27c>)
 801cae0:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801cae4:	497d      	ldr	r1, [pc, #500]	@ (801ccdc <etharp_query+0x280>)
 801cae6:	487e      	ldr	r0, [pc, #504]	@ (801cce0 <etharp_query+0x284>)
 801cae8:	f003 faac 	bl	8020044 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801caec:	8a7b      	ldrh	r3, [r7, #18]
 801caee:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801caf0:	7c7a      	ldrb	r2, [r7, #17]
 801caf2:	497c      	ldr	r1, [pc, #496]	@ (801cce4 <etharp_query+0x288>)
 801caf4:	4613      	mov	r3, r2
 801caf6:	005b      	lsls	r3, r3, #1
 801caf8:	4413      	add	r3, r2
 801cafa:	00db      	lsls	r3, r3, #3
 801cafc:	440b      	add	r3, r1
 801cafe:	3314      	adds	r3, #20
 801cb00:	781b      	ldrb	r3, [r3, #0]
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d115      	bne.n	801cb32 <etharp_query+0xd6>
    is_new_entry = 1;
 801cb06:	2301      	movs	r3, #1
 801cb08:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801cb0a:	7c7a      	ldrb	r2, [r7, #17]
 801cb0c:	4975      	ldr	r1, [pc, #468]	@ (801cce4 <etharp_query+0x288>)
 801cb0e:	4613      	mov	r3, r2
 801cb10:	005b      	lsls	r3, r3, #1
 801cb12:	4413      	add	r3, r2
 801cb14:	00db      	lsls	r3, r3, #3
 801cb16:	440b      	add	r3, r1
 801cb18:	3314      	adds	r3, #20
 801cb1a:	2201      	movs	r2, #1
 801cb1c:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801cb1e:	7c7a      	ldrb	r2, [r7, #17]
 801cb20:	4970      	ldr	r1, [pc, #448]	@ (801cce4 <etharp_query+0x288>)
 801cb22:	4613      	mov	r3, r2
 801cb24:	005b      	lsls	r3, r3, #1
 801cb26:	4413      	add	r3, r2
 801cb28:	00db      	lsls	r3, r3, #3
 801cb2a:	440b      	add	r3, r1
 801cb2c:	3308      	adds	r3, #8
 801cb2e:	68fa      	ldr	r2, [r7, #12]
 801cb30:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801cb32:	7c7a      	ldrb	r2, [r7, #17]
 801cb34:	496b      	ldr	r1, [pc, #428]	@ (801cce4 <etharp_query+0x288>)
 801cb36:	4613      	mov	r3, r2
 801cb38:	005b      	lsls	r3, r3, #1
 801cb3a:	4413      	add	r3, r2
 801cb3c:	00db      	lsls	r3, r3, #3
 801cb3e:	440b      	add	r3, r1
 801cb40:	3314      	adds	r3, #20
 801cb42:	781b      	ldrb	r3, [r3, #0]
 801cb44:	2b01      	cmp	r3, #1
 801cb46:	d011      	beq.n	801cb6c <etharp_query+0x110>
 801cb48:	7c7a      	ldrb	r2, [r7, #17]
 801cb4a:	4966      	ldr	r1, [pc, #408]	@ (801cce4 <etharp_query+0x288>)
 801cb4c:	4613      	mov	r3, r2
 801cb4e:	005b      	lsls	r3, r3, #1
 801cb50:	4413      	add	r3, r2
 801cb52:	00db      	lsls	r3, r3, #3
 801cb54:	440b      	add	r3, r1
 801cb56:	3314      	adds	r3, #20
 801cb58:	781b      	ldrb	r3, [r3, #0]
 801cb5a:	2b01      	cmp	r3, #1
 801cb5c:	d806      	bhi.n	801cb6c <etharp_query+0x110>
 801cb5e:	4b5e      	ldr	r3, [pc, #376]	@ (801ccd8 <etharp_query+0x27c>)
 801cb60:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801cb64:	4960      	ldr	r1, [pc, #384]	@ (801cce8 <etharp_query+0x28c>)
 801cb66:	485e      	ldr	r0, [pc, #376]	@ (801cce0 <etharp_query+0x284>)
 801cb68:	f003 fa6c 	bl	8020044 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801cb6c:	6a3b      	ldr	r3, [r7, #32]
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d102      	bne.n	801cb78 <etharp_query+0x11c>
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d10c      	bne.n	801cb92 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801cb78:	68b9      	ldr	r1, [r7, #8]
 801cb7a:	68f8      	ldr	r0, [r7, #12]
 801cb7c:	f000 f978 	bl	801ce70 <etharp_request>
 801cb80:	4603      	mov	r3, r0
 801cb82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d102      	bne.n	801cb92 <etharp_query+0x136>
      return result;
 801cb8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cb90:	e09c      	b.n	801cccc <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d106      	bne.n	801cba6 <etharp_query+0x14a>
 801cb98:	4b4f      	ldr	r3, [pc, #316]	@ (801ccd8 <etharp_query+0x27c>)
 801cb9a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801cb9e:	4953      	ldr	r1, [pc, #332]	@ (801ccec <etharp_query+0x290>)
 801cba0:	484f      	ldr	r0, [pc, #316]	@ (801cce0 <etharp_query+0x284>)
 801cba2:	f003 fa4f 	bl	8020044 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801cba6:	7c7a      	ldrb	r2, [r7, #17]
 801cba8:	494e      	ldr	r1, [pc, #312]	@ (801cce4 <etharp_query+0x288>)
 801cbaa:	4613      	mov	r3, r2
 801cbac:	005b      	lsls	r3, r3, #1
 801cbae:	4413      	add	r3, r2
 801cbb0:	00db      	lsls	r3, r3, #3
 801cbb2:	440b      	add	r3, r1
 801cbb4:	3314      	adds	r3, #20
 801cbb6:	781b      	ldrb	r3, [r3, #0]
 801cbb8:	2b01      	cmp	r3, #1
 801cbba:	d917      	bls.n	801cbec <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801cbbc:	4a4c      	ldr	r2, [pc, #304]	@ (801ccf0 <etharp_query+0x294>)
 801cbbe:	7c7b      	ldrb	r3, [r7, #17]
 801cbc0:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801cbc2:	7c7a      	ldrb	r2, [r7, #17]
 801cbc4:	4613      	mov	r3, r2
 801cbc6:	005b      	lsls	r3, r3, #1
 801cbc8:	4413      	add	r3, r2
 801cbca:	00db      	lsls	r3, r3, #3
 801cbcc:	3308      	adds	r3, #8
 801cbce:	4a45      	ldr	r2, [pc, #276]	@ (801cce4 <etharp_query+0x288>)
 801cbd0:	4413      	add	r3, r2
 801cbd2:	3304      	adds	r3, #4
 801cbd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801cbd8:	9200      	str	r2, [sp, #0]
 801cbda:	697a      	ldr	r2, [r7, #20]
 801cbdc:	6879      	ldr	r1, [r7, #4]
 801cbde:	68f8      	ldr	r0, [r7, #12]
 801cbe0:	f001 fd8c 	bl	801e6fc <ethernet_output>
 801cbe4:	4603      	mov	r3, r0
 801cbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbea:	e06d      	b.n	801ccc8 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cbec:	7c7a      	ldrb	r2, [r7, #17]
 801cbee:	493d      	ldr	r1, [pc, #244]	@ (801cce4 <etharp_query+0x288>)
 801cbf0:	4613      	mov	r3, r2
 801cbf2:	005b      	lsls	r3, r3, #1
 801cbf4:	4413      	add	r3, r2
 801cbf6:	00db      	lsls	r3, r3, #3
 801cbf8:	440b      	add	r3, r1
 801cbfa:	3314      	adds	r3, #20
 801cbfc:	781b      	ldrb	r3, [r3, #0]
 801cbfe:	2b01      	cmp	r3, #1
 801cc00:	d162      	bne.n	801ccc8 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801cc02:	2300      	movs	r3, #0
 801cc04:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cc0a:	e01c      	b.n	801cc46 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801cc0c:	69fb      	ldr	r3, [r7, #28]
 801cc0e:	895a      	ldrh	r2, [r3, #10]
 801cc10:	69fb      	ldr	r3, [r7, #28]
 801cc12:	891b      	ldrh	r3, [r3, #8]
 801cc14:	429a      	cmp	r2, r3
 801cc16:	d10a      	bne.n	801cc2e <etharp_query+0x1d2>
 801cc18:	69fb      	ldr	r3, [r7, #28]
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d006      	beq.n	801cc2e <etharp_query+0x1d2>
 801cc20:	4b2d      	ldr	r3, [pc, #180]	@ (801ccd8 <etharp_query+0x27c>)
 801cc22:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801cc26:	4933      	ldr	r1, [pc, #204]	@ (801ccf4 <etharp_query+0x298>)
 801cc28:	482d      	ldr	r0, [pc, #180]	@ (801cce0 <etharp_query+0x284>)
 801cc2a:	f003 fa0b 	bl	8020044 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801cc2e:	69fb      	ldr	r3, [r7, #28]
 801cc30:	7b1b      	ldrb	r3, [r3, #12]
 801cc32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d002      	beq.n	801cc40 <etharp_query+0x1e4>
        copy_needed = 1;
 801cc3a:	2301      	movs	r3, #1
 801cc3c:	61bb      	str	r3, [r7, #24]
        break;
 801cc3e:	e005      	b.n	801cc4c <etharp_query+0x1f0>
      }
      p = p->next;
 801cc40:	69fb      	ldr	r3, [r7, #28]
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cc46:	69fb      	ldr	r3, [r7, #28]
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d1df      	bne.n	801cc0c <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801cc4c:	69bb      	ldr	r3, [r7, #24]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d007      	beq.n	801cc62 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801cc52:	687a      	ldr	r2, [r7, #4]
 801cc54:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801cc58:	200e      	movs	r0, #14
 801cc5a:	f7f8 fa0d 	bl	8015078 <pbuf_clone>
 801cc5e:	61f8      	str	r0, [r7, #28]
 801cc60:	e004      	b.n	801cc6c <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801cc66:	69f8      	ldr	r0, [r7, #28]
 801cc68:	f7f8 f834 	bl	8014cd4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801cc6c:	69fb      	ldr	r3, [r7, #28]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d021      	beq.n	801ccb6 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801cc72:	7c7a      	ldrb	r2, [r7, #17]
 801cc74:	491b      	ldr	r1, [pc, #108]	@ (801cce4 <etharp_query+0x288>)
 801cc76:	4613      	mov	r3, r2
 801cc78:	005b      	lsls	r3, r3, #1
 801cc7a:	4413      	add	r3, r2
 801cc7c:	00db      	lsls	r3, r3, #3
 801cc7e:	440b      	add	r3, r1
 801cc80:	681b      	ldr	r3, [r3, #0]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d00a      	beq.n	801cc9c <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801cc86:	7c7a      	ldrb	r2, [r7, #17]
 801cc88:	4916      	ldr	r1, [pc, #88]	@ (801cce4 <etharp_query+0x288>)
 801cc8a:	4613      	mov	r3, r2
 801cc8c:	005b      	lsls	r3, r3, #1
 801cc8e:	4413      	add	r3, r2
 801cc90:	00db      	lsls	r3, r3, #3
 801cc92:	440b      	add	r3, r1
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	4618      	mov	r0, r3
 801cc98:	f7f7 ff76 	bl	8014b88 <pbuf_free>
      }
      arp_table[i].q = p;
 801cc9c:	7c7a      	ldrb	r2, [r7, #17]
 801cc9e:	4911      	ldr	r1, [pc, #68]	@ (801cce4 <etharp_query+0x288>)
 801cca0:	4613      	mov	r3, r2
 801cca2:	005b      	lsls	r3, r3, #1
 801cca4:	4413      	add	r3, r2
 801cca6:	00db      	lsls	r3, r3, #3
 801cca8:	440b      	add	r3, r1
 801ccaa:	69fa      	ldr	r2, [r7, #28]
 801ccac:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ccae:	2300      	movs	r3, #0
 801ccb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ccb4:	e008      	b.n	801ccc8 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801ccb6:	4b07      	ldr	r3, [pc, #28]	@ (801ccd4 <etharp_query+0x278>)
 801ccb8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ccba:	3301      	adds	r3, #1
 801ccbc:	b29a      	uxth	r2, r3
 801ccbe:	4b05      	ldr	r3, [pc, #20]	@ (801ccd4 <etharp_query+0x278>)
 801ccc0:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ccc2:	23ff      	movs	r3, #255	@ 0xff
 801ccc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ccc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801cccc:	4618      	mov	r0, r3
 801ccce:	3728      	adds	r7, #40	@ 0x28
 801ccd0:	46bd      	mov	sp, r7
 801ccd2:	bd80      	pop	{r7, pc}
 801ccd4:	2002d2b0 	.word	0x2002d2b0
 801ccd8:	08023f6c 	.word	0x08023f6c
 801ccdc:	08024118 	.word	0x08024118
 801cce0:	08023fe4 	.word	0x08023fe4
 801cce4:	2002d40c 	.word	0x2002d40c
 801cce8:	08024128 	.word	0x08024128
 801ccec:	0802410c 	.word	0x0802410c
 801ccf0:	2002d4fc 	.word	0x2002d4fc
 801ccf4:	08024150 	.word	0x08024150

0801ccf8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b08a      	sub	sp, #40	@ 0x28
 801ccfc:	af02      	add	r7, sp, #8
 801ccfe:	60f8      	str	r0, [r7, #12]
 801cd00:	60b9      	str	r1, [r7, #8]
 801cd02:	607a      	str	r2, [r7, #4]
 801cd04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801cd06:	2300      	movs	r3, #0
 801cd08:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d106      	bne.n	801cd1e <etharp_raw+0x26>
 801cd10:	4b40      	ldr	r3, [pc, #256]	@ (801ce14 <etharp_raw+0x11c>)
 801cd12:	f240 4257 	movw	r2, #1111	@ 0x457
 801cd16:	4940      	ldr	r1, [pc, #256]	@ (801ce18 <etharp_raw+0x120>)
 801cd18:	4840      	ldr	r0, [pc, #256]	@ (801ce1c <etharp_raw+0x124>)
 801cd1a:	f003 f993 	bl	8020044 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801cd1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cd22:	211c      	movs	r1, #28
 801cd24:	200e      	movs	r0, #14
 801cd26:	f7f7 fc4b 	bl	80145c0 <pbuf_alloc>
 801cd2a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801cd2c:	69bb      	ldr	r3, [r7, #24]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d108      	bne.n	801cd44 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801cd32:	4b3b      	ldr	r3, [pc, #236]	@ (801ce20 <etharp_raw+0x128>)
 801cd34:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cd36:	3301      	adds	r3, #1
 801cd38:	b29a      	uxth	r2, r3
 801cd3a:	4b39      	ldr	r3, [pc, #228]	@ (801ce20 <etharp_raw+0x128>)
 801cd3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801cd3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cd42:	e063      	b.n	801ce0c <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801cd44:	69bb      	ldr	r3, [r7, #24]
 801cd46:	895b      	ldrh	r3, [r3, #10]
 801cd48:	2b1b      	cmp	r3, #27
 801cd4a:	d806      	bhi.n	801cd5a <etharp_raw+0x62>
 801cd4c:	4b31      	ldr	r3, [pc, #196]	@ (801ce14 <etharp_raw+0x11c>)
 801cd4e:	f240 4262 	movw	r2, #1122	@ 0x462
 801cd52:	4934      	ldr	r1, [pc, #208]	@ (801ce24 <etharp_raw+0x12c>)
 801cd54:	4831      	ldr	r0, [pc, #196]	@ (801ce1c <etharp_raw+0x124>)
 801cd56:	f003 f975 	bl	8020044 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801cd5a:	69bb      	ldr	r3, [r7, #24]
 801cd5c:	685b      	ldr	r3, [r3, #4]
 801cd5e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801cd60:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801cd62:	4618      	mov	r0, r3
 801cd64:	f7f6 fa52 	bl	801320c <lwip_htons>
 801cd68:	4603      	mov	r3, r0
 801cd6a:	461a      	mov	r2, r3
 801cd6c:	697b      	ldr	r3, [r7, #20]
 801cd6e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cd76:	2b06      	cmp	r3, #6
 801cd78:	d006      	beq.n	801cd88 <etharp_raw+0x90>
 801cd7a:	4b26      	ldr	r3, [pc, #152]	@ (801ce14 <etharp_raw+0x11c>)
 801cd7c:	f240 4269 	movw	r2, #1129	@ 0x469
 801cd80:	4929      	ldr	r1, [pc, #164]	@ (801ce28 <etharp_raw+0x130>)
 801cd82:	4826      	ldr	r0, [pc, #152]	@ (801ce1c <etharp_raw+0x124>)
 801cd84:	f003 f95e 	bl	8020044 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801cd88:	697b      	ldr	r3, [r7, #20]
 801cd8a:	3308      	adds	r3, #8
 801cd8c:	2206      	movs	r2, #6
 801cd8e:	6839      	ldr	r1, [r7, #0]
 801cd90:	4618      	mov	r0, r3
 801cd92:	f003 fb82 	bl	802049a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801cd96:	697b      	ldr	r3, [r7, #20]
 801cd98:	3312      	adds	r3, #18
 801cd9a:	2206      	movs	r2, #6
 801cd9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cd9e:	4618      	mov	r0, r3
 801cda0:	f003 fb7b 	bl	802049a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801cda4:	697b      	ldr	r3, [r7, #20]
 801cda6:	330e      	adds	r3, #14
 801cda8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cdaa:	6812      	ldr	r2, [r2, #0]
 801cdac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801cdae:	697b      	ldr	r3, [r7, #20]
 801cdb0:	3318      	adds	r3, #24
 801cdb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cdb4:	6812      	ldr	r2, [r2, #0]
 801cdb6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801cdb8:	697b      	ldr	r3, [r7, #20]
 801cdba:	2200      	movs	r2, #0
 801cdbc:	701a      	strb	r2, [r3, #0]
 801cdbe:	2200      	movs	r2, #0
 801cdc0:	f042 0201 	orr.w	r2, r2, #1
 801cdc4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801cdc6:	697b      	ldr	r3, [r7, #20]
 801cdc8:	2200      	movs	r2, #0
 801cdca:	f042 0208 	orr.w	r2, r2, #8
 801cdce:	709a      	strb	r2, [r3, #2]
 801cdd0:	2200      	movs	r2, #0
 801cdd2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801cdd4:	697b      	ldr	r3, [r7, #20]
 801cdd6:	2206      	movs	r2, #6
 801cdd8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801cdda:	697b      	ldr	r3, [r7, #20]
 801cddc:	2204      	movs	r2, #4
 801cdde:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801cde0:	f640 0306 	movw	r3, #2054	@ 0x806
 801cde4:	9300      	str	r3, [sp, #0]
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	68ba      	ldr	r2, [r7, #8]
 801cdea:	69b9      	ldr	r1, [r7, #24]
 801cdec:	68f8      	ldr	r0, [r7, #12]
 801cdee:	f001 fc85 	bl	801e6fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801cdf2:	4b0b      	ldr	r3, [pc, #44]	@ (801ce20 <etharp_raw+0x128>)
 801cdf4:	8b1b      	ldrh	r3, [r3, #24]
 801cdf6:	3301      	adds	r3, #1
 801cdf8:	b29a      	uxth	r2, r3
 801cdfa:	4b09      	ldr	r3, [pc, #36]	@ (801ce20 <etharp_raw+0x128>)
 801cdfc:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801cdfe:	69b8      	ldr	r0, [r7, #24]
 801ce00:	f7f7 fec2 	bl	8014b88 <pbuf_free>
  p = NULL;
 801ce04:	2300      	movs	r3, #0
 801ce06:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ce08:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ce0c:	4618      	mov	r0, r3
 801ce0e:	3720      	adds	r7, #32
 801ce10:	46bd      	mov	sp, r7
 801ce12:	bd80      	pop	{r7, pc}
 801ce14:	08023f6c 	.word	0x08023f6c
 801ce18:	080240bc 	.word	0x080240bc
 801ce1c:	08023fe4 	.word	0x08023fe4
 801ce20:	2002d2b0 	.word	0x2002d2b0
 801ce24:	0802416c 	.word	0x0802416c
 801ce28:	080241a0 	.word	0x080241a0

0801ce2c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ce2c:	b580      	push	{r7, lr}
 801ce2e:	b088      	sub	sp, #32
 801ce30:	af04      	add	r7, sp, #16
 801ce32:	60f8      	str	r0, [r7, #12]
 801ce34:	60b9      	str	r1, [r7, #8]
 801ce36:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801ce44:	68fb      	ldr	r3, [r7, #12]
 801ce46:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ce48:	2201      	movs	r2, #1
 801ce4a:	9203      	str	r2, [sp, #12]
 801ce4c:	68ba      	ldr	r2, [r7, #8]
 801ce4e:	9202      	str	r2, [sp, #8]
 801ce50:	4a06      	ldr	r2, [pc, #24]	@ (801ce6c <etharp_request_dst+0x40>)
 801ce52:	9201      	str	r2, [sp, #4]
 801ce54:	9300      	str	r3, [sp, #0]
 801ce56:	4603      	mov	r3, r0
 801ce58:	687a      	ldr	r2, [r7, #4]
 801ce5a:	68f8      	ldr	r0, [r7, #12]
 801ce5c:	f7ff ff4c 	bl	801ccf8 <etharp_raw>
 801ce60:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ce62:	4618      	mov	r0, r3
 801ce64:	3710      	adds	r7, #16
 801ce66:	46bd      	mov	sp, r7
 801ce68:	bd80      	pop	{r7, pc}
 801ce6a:	bf00      	nop
 801ce6c:	08024dc4 	.word	0x08024dc4

0801ce70 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b082      	sub	sp, #8
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	6078      	str	r0, [r7, #4]
 801ce78:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ce7a:	4a05      	ldr	r2, [pc, #20]	@ (801ce90 <etharp_request+0x20>)
 801ce7c:	6839      	ldr	r1, [r7, #0]
 801ce7e:	6878      	ldr	r0, [r7, #4]
 801ce80:	f7ff ffd4 	bl	801ce2c <etharp_request_dst>
 801ce84:	4603      	mov	r3, r0
}
 801ce86:	4618      	mov	r0, r3
 801ce88:	3708      	adds	r7, #8
 801ce8a:	46bd      	mov	sp, r7
 801ce8c:	bd80      	pop	{r7, pc}
 801ce8e:	bf00      	nop
 801ce90:	08024dbc 	.word	0x08024dbc

0801ce94 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ce94:	b580      	push	{r7, lr}
 801ce96:	b08e      	sub	sp, #56	@ 0x38
 801ce98:	af04      	add	r7, sp, #16
 801ce9a:	6078      	str	r0, [r7, #4]
 801ce9c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801ce9e:	4b92      	ldr	r3, [pc, #584]	@ (801d0e8 <icmp_input+0x254>)
 801cea0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801cea4:	3301      	adds	r3, #1
 801cea6:	b29a      	uxth	r2, r3
 801cea8:	4b8f      	ldr	r3, [pc, #572]	@ (801d0e8 <icmp_input+0x254>)
 801ceaa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ceae:	4b8f      	ldr	r3, [pc, #572]	@ (801d0ec <icmp_input+0x258>)
 801ceb0:	689b      	ldr	r3, [r3, #8]
 801ceb2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801ceb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ceb6:	781b      	ldrb	r3, [r3, #0]
 801ceb8:	f003 030f 	and.w	r3, r3, #15
 801cebc:	b2db      	uxtb	r3, r3
 801cebe:	009b      	lsls	r3, r3, #2
 801cec0:	b2db      	uxtb	r3, r3
 801cec2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801cec4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cec6:	2b13      	cmp	r3, #19
 801cec8:	f240 80e6 	bls.w	801d098 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	895b      	ldrh	r3, [r3, #10]
 801ced0:	2b03      	cmp	r3, #3
 801ced2:	f240 80e3 	bls.w	801d09c <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	685b      	ldr	r3, [r3, #4]
 801ceda:	781b      	ldrb	r3, [r3, #0]
 801cedc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801cee0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	f000 80d0 	beq.w	801d08a <icmp_input+0x1f6>
 801ceea:	2b08      	cmp	r3, #8
 801ceec:	f040 80bc 	bne.w	801d068 <icmp_input+0x1d4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801cef0:	4b7f      	ldr	r3, [pc, #508]	@ (801d0f0 <icmp_input+0x25c>)
 801cef2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cef4:	4b7d      	ldr	r3, [pc, #500]	@ (801d0ec <icmp_input+0x258>)
 801cef6:	695b      	ldr	r3, [r3, #20]
 801cef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cefc:	2be0      	cmp	r3, #224	@ 0xe0
 801cefe:	f000 80dc 	beq.w	801d0ba <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801cf02:	4b7a      	ldr	r3, [pc, #488]	@ (801d0ec <icmp_input+0x258>)
 801cf04:	695b      	ldr	r3, [r3, #20]
 801cf06:	4a79      	ldr	r2, [pc, #484]	@ (801d0ec <icmp_input+0x258>)
 801cf08:	6812      	ldr	r2, [r2, #0]
 801cf0a:	4611      	mov	r1, r2
 801cf0c:	4618      	mov	r0, r3
 801cf0e:	f000 fc95 	bl	801d83c <ip4_addr_isbroadcast_u32>
 801cf12:	4603      	mov	r3, r0
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	f040 80d2 	bne.w	801d0be <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	891b      	ldrh	r3, [r3, #8]
 801cf1e:	2b07      	cmp	r3, #7
 801cf20:	f240 80be 	bls.w	801d0a0 <icmp_input+0x20c>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cf24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cf26:	330e      	adds	r3, #14
 801cf28:	4619      	mov	r1, r3
 801cf2a:	6878      	ldr	r0, [r7, #4]
 801cf2c:	f7f7 fd96 	bl	8014a5c <pbuf_add_header>
 801cf30:	4603      	mov	r3, r0
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d04b      	beq.n	801cfce <icmp_input+0x13a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	891a      	ldrh	r2, [r3, #8]
 801cf3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cf3c:	4413      	add	r3, r2
 801cf3e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	891b      	ldrh	r3, [r3, #8]
 801cf44:	8b7a      	ldrh	r2, [r7, #26]
 801cf46:	429a      	cmp	r2, r3
 801cf48:	f0c0 80bb 	bcc.w	801d0c2 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801cf4c:	8b7b      	ldrh	r3, [r7, #26]
 801cf4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cf52:	4619      	mov	r1, r3
 801cf54:	200e      	movs	r0, #14
 801cf56:	f7f7 fb33 	bl	80145c0 <pbuf_alloc>
 801cf5a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801cf5c:	697b      	ldr	r3, [r7, #20]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	f000 80b1 	beq.w	801d0c6 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801cf64:	697b      	ldr	r3, [r7, #20]
 801cf66:	895b      	ldrh	r3, [r3, #10]
 801cf68:	461a      	mov	r2, r3
 801cf6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cf6c:	3308      	adds	r3, #8
 801cf6e:	429a      	cmp	r2, r3
 801cf70:	d203      	bcs.n	801cf7a <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801cf72:	6978      	ldr	r0, [r7, #20]
 801cf74:	f7f7 fe08 	bl	8014b88 <pbuf_free>
          goto icmperr;
 801cf78:	e0a6      	b.n	801d0c8 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801cf7a:	697b      	ldr	r3, [r7, #20]
 801cf7c:	685b      	ldr	r3, [r3, #4]
 801cf7e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801cf80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cf82:	4618      	mov	r0, r3
 801cf84:	f003 fa89 	bl	802049a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801cf88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cf8a:	4619      	mov	r1, r3
 801cf8c:	6978      	ldr	r0, [r7, #20]
 801cf8e:	f7f7 fd75 	bl	8014a7c <pbuf_remove_header>
 801cf92:	4603      	mov	r3, r0
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d009      	beq.n	801cfac <icmp_input+0x118>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801cf98:	4b56      	ldr	r3, [pc, #344]	@ (801d0f4 <icmp_input+0x260>)
 801cf9a:	22b6      	movs	r2, #182	@ 0xb6
 801cf9c:	4956      	ldr	r1, [pc, #344]	@ (801d0f8 <icmp_input+0x264>)
 801cf9e:	4857      	ldr	r0, [pc, #348]	@ (801d0fc <icmp_input+0x268>)
 801cfa0:	f003 f850 	bl	8020044 <iprintf>
          pbuf_free(r);
 801cfa4:	6978      	ldr	r0, [r7, #20]
 801cfa6:	f7f7 fdef 	bl	8014b88 <pbuf_free>
          goto icmperr;
 801cfaa:	e08d      	b.n	801d0c8 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801cfac:	6879      	ldr	r1, [r7, #4]
 801cfae:	6978      	ldr	r0, [r7, #20]
 801cfb0:	f7f7 ff1e 	bl	8014df0 <pbuf_copy>
 801cfb4:	4603      	mov	r3, r0
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d003      	beq.n	801cfc2 <icmp_input+0x12e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801cfba:	6978      	ldr	r0, [r7, #20]
 801cfbc:	f7f7 fde4 	bl	8014b88 <pbuf_free>
          goto icmperr;
 801cfc0:	e082      	b.n	801d0c8 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 801cfc2:	6878      	ldr	r0, [r7, #4]
 801cfc4:	f7f7 fde0 	bl	8014b88 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801cfc8:	697b      	ldr	r3, [r7, #20]
 801cfca:	607b      	str	r3, [r7, #4]
 801cfcc:	e00f      	b.n	801cfee <icmp_input+0x15a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cfce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cfd0:	330e      	adds	r3, #14
 801cfd2:	4619      	mov	r1, r3
 801cfd4:	6878      	ldr	r0, [r7, #4]
 801cfd6:	f7f7 fd51 	bl	8014a7c <pbuf_remove_header>
 801cfda:	4603      	mov	r3, r0
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d006      	beq.n	801cfee <icmp_input+0x15a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801cfe0:	4b44      	ldr	r3, [pc, #272]	@ (801d0f4 <icmp_input+0x260>)
 801cfe2:	22c7      	movs	r2, #199	@ 0xc7
 801cfe4:	4946      	ldr	r1, [pc, #280]	@ (801d100 <icmp_input+0x26c>)
 801cfe6:	4845      	ldr	r0, [pc, #276]	@ (801d0fc <icmp_input+0x268>)
 801cfe8:	f003 f82c 	bl	8020044 <iprintf>
          goto icmperr;
 801cfec:	e06c      	b.n	801d0c8 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	685b      	ldr	r3, [r3, #4]
 801cff2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801cff4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801cff6:	4619      	mov	r1, r3
 801cff8:	6878      	ldr	r0, [r7, #4]
 801cffa:	f7f7 fd2f 	bl	8014a5c <pbuf_add_header>
 801cffe:	4603      	mov	r3, r0
 801d000:	2b00      	cmp	r3, #0
 801d002:	d144      	bne.n	801d08e <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	685b      	ldr	r3, [r3, #4]
 801d008:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d00a:	69fb      	ldr	r3, [r7, #28]
 801d00c:	681a      	ldr	r2, [r3, #0]
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d012:	4b36      	ldr	r3, [pc, #216]	@ (801d0ec <icmp_input+0x258>)
 801d014:	691a      	ldr	r2, [r3, #16]
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d01a:	693b      	ldr	r3, [r7, #16]
 801d01c:	2200      	movs	r2, #0
 801d01e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d020:	693b      	ldr	r3, [r7, #16]
 801d022:	2200      	movs	r2, #0
 801d024:	709a      	strb	r2, [r3, #2]
 801d026:	2200      	movs	r2, #0
 801d028:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	22ff      	movs	r2, #255	@ 0xff
 801d02e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	2200      	movs	r2, #0
 801d034:	729a      	strb	r2, [r3, #10]
 801d036:	2200      	movs	r2, #0
 801d038:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 801d03a:	4b2b      	ldr	r3, [pc, #172]	@ (801d0e8 <icmp_input+0x254>)
 801d03c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d040:	3301      	adds	r3, #1
 801d042:	b29a      	uxth	r2, r3
 801d044:	4b28      	ldr	r3, [pc, #160]	@ (801d0e8 <icmp_input+0x254>)
 801d046:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d04a:	683b      	ldr	r3, [r7, #0]
 801d04c:	9302      	str	r3, [sp, #8]
 801d04e:	2301      	movs	r3, #1
 801d050:	9301      	str	r3, [sp, #4]
 801d052:	2300      	movs	r3, #0
 801d054:	9300      	str	r3, [sp, #0]
 801d056:	23ff      	movs	r3, #255	@ 0xff
 801d058:	2200      	movs	r2, #0
 801d05a:	69f9      	ldr	r1, [r7, #28]
 801d05c:	6878      	ldr	r0, [r7, #4]
 801d05e:	f000 fafb 	bl	801d658 <ip4_output_if>
 801d062:	4603      	mov	r3, r0
 801d064:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d066:	e012      	b.n	801d08e <icmp_input+0x1fa>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801d068:	4b1f      	ldr	r3, [pc, #124]	@ (801d0e8 <icmp_input+0x254>)
 801d06a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801d06e:	3301      	adds	r3, #1
 801d070:	b29a      	uxth	r2, r3
 801d072:	4b1d      	ldr	r3, [pc, #116]	@ (801d0e8 <icmp_input+0x254>)
 801d074:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801d078:	4b1b      	ldr	r3, [pc, #108]	@ (801d0e8 <icmp_input+0x254>)
 801d07a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d07e:	3301      	adds	r3, #1
 801d080:	b29a      	uxth	r2, r3
 801d082:	4b19      	ldr	r3, [pc, #100]	@ (801d0e8 <icmp_input+0x254>)
 801d084:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801d088:	e002      	b.n	801d090 <icmp_input+0x1fc>
      break;
 801d08a:	bf00      	nop
 801d08c:	e000      	b.n	801d090 <icmp_input+0x1fc>
      break;
 801d08e:	bf00      	nop
  }
  pbuf_free(p);
 801d090:	6878      	ldr	r0, [r7, #4]
 801d092:	f7f7 fd79 	bl	8014b88 <pbuf_free>
  return;
 801d096:	e023      	b.n	801d0e0 <icmp_input+0x24c>
    goto lenerr;
 801d098:	bf00      	nop
 801d09a:	e002      	b.n	801d0a2 <icmp_input+0x20e>
    goto lenerr;
 801d09c:	bf00      	nop
 801d09e:	e000      	b.n	801d0a2 <icmp_input+0x20e>
        goto lenerr;
 801d0a0:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	f7f7 fd70 	bl	8014b88 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801d0a8:	4b0f      	ldr	r3, [pc, #60]	@ (801d0e8 <icmp_input+0x254>)
 801d0aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801d0ae:	3301      	adds	r3, #1
 801d0b0:	b29a      	uxth	r2, r3
 801d0b2:	4b0d      	ldr	r3, [pc, #52]	@ (801d0e8 <icmp_input+0x254>)
 801d0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d0b8:	e012      	b.n	801d0e0 <icmp_input+0x24c>
        goto icmperr;
 801d0ba:	bf00      	nop
 801d0bc:	e004      	b.n	801d0c8 <icmp_input+0x234>
        goto icmperr;
 801d0be:	bf00      	nop
 801d0c0:	e002      	b.n	801d0c8 <icmp_input+0x234>
          goto icmperr;
 801d0c2:	bf00      	nop
 801d0c4:	e000      	b.n	801d0c8 <icmp_input+0x234>
          goto icmperr;
 801d0c6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d0c8:	6878      	ldr	r0, [r7, #4]
 801d0ca:	f7f7 fd5d 	bl	8014b88 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801d0ce:	4b06      	ldr	r3, [pc, #24]	@ (801d0e8 <icmp_input+0x254>)
 801d0d0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801d0d4:	3301      	adds	r3, #1
 801d0d6:	b29a      	uxth	r2, r3
 801d0d8:	4b03      	ldr	r3, [pc, #12]	@ (801d0e8 <icmp_input+0x254>)
 801d0da:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d0de:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d0e0:	3728      	adds	r7, #40	@ 0x28
 801d0e2:	46bd      	mov	sp, r7
 801d0e4:	bd80      	pop	{r7, pc}
 801d0e6:	bf00      	nop
 801d0e8:	2002d2b0 	.word	0x2002d2b0
 801d0ec:	200270b4 	.word	0x200270b4
 801d0f0:	200270c8 	.word	0x200270c8
 801d0f4:	080241e4 	.word	0x080241e4
 801d0f8:	0802421c 	.word	0x0802421c
 801d0fc:	08024254 	.word	0x08024254
 801d100:	0802427c 	.word	0x0802427c

0801d104 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d104:	b580      	push	{r7, lr}
 801d106:	b082      	sub	sp, #8
 801d108:	af00      	add	r7, sp, #0
 801d10a:	6078      	str	r0, [r7, #4]
 801d10c:	460b      	mov	r3, r1
 801d10e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d110:	78fb      	ldrb	r3, [r7, #3]
 801d112:	461a      	mov	r2, r3
 801d114:	2103      	movs	r1, #3
 801d116:	6878      	ldr	r0, [r7, #4]
 801d118:	f000 f814 	bl	801d144 <icmp_send_response>
}
 801d11c:	bf00      	nop
 801d11e:	3708      	adds	r7, #8
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}

0801d124 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d124:	b580      	push	{r7, lr}
 801d126:	b082      	sub	sp, #8
 801d128:	af00      	add	r7, sp, #0
 801d12a:	6078      	str	r0, [r7, #4]
 801d12c:	460b      	mov	r3, r1
 801d12e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d130:	78fb      	ldrb	r3, [r7, #3]
 801d132:	461a      	mov	r2, r3
 801d134:	210b      	movs	r1, #11
 801d136:	6878      	ldr	r0, [r7, #4]
 801d138:	f000 f804 	bl	801d144 <icmp_send_response>
}
 801d13c:	bf00      	nop
 801d13e:	3708      	adds	r7, #8
 801d140:	46bd      	mov	sp, r7
 801d142:	bd80      	pop	{r7, pc}

0801d144 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d144:	b580      	push	{r7, lr}
 801d146:	b08c      	sub	sp, #48	@ 0x30
 801d148:	af04      	add	r7, sp, #16
 801d14a:	6078      	str	r0, [r7, #4]
 801d14c:	460b      	mov	r3, r1
 801d14e:	70fb      	strb	r3, [r7, #3]
 801d150:	4613      	mov	r3, r2
 801d152:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d154:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d158:	2124      	movs	r1, #36	@ 0x24
 801d15a:	2022      	movs	r0, #34	@ 0x22
 801d15c:	f7f7 fa30 	bl	80145c0 <pbuf_alloc>
 801d160:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d162:	69fb      	ldr	r3, [r7, #28]
 801d164:	2b00      	cmp	r3, #0
 801d166:	d054      	beq.n	801d212 <icmp_send_response+0xce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d168:	69fb      	ldr	r3, [r7, #28]
 801d16a:	895b      	ldrh	r3, [r3, #10]
 801d16c:	2b23      	cmp	r3, #35	@ 0x23
 801d16e:	d806      	bhi.n	801d17e <icmp_send_response+0x3a>
 801d170:	4b2a      	ldr	r3, [pc, #168]	@ (801d21c <icmp_send_response+0xd8>)
 801d172:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801d176:	492a      	ldr	r1, [pc, #168]	@ (801d220 <icmp_send_response+0xdc>)
 801d178:	482a      	ldr	r0, [pc, #168]	@ (801d224 <icmp_send_response+0xe0>)
 801d17a:	f002 ff63 	bl	8020044 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	685b      	ldr	r3, [r3, #4]
 801d182:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d184:	69fb      	ldr	r3, [r7, #28]
 801d186:	685b      	ldr	r3, [r3, #4]
 801d188:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d18a:	697b      	ldr	r3, [r7, #20]
 801d18c:	78fa      	ldrb	r2, [r7, #3]
 801d18e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d190:	697b      	ldr	r3, [r7, #20]
 801d192:	78ba      	ldrb	r2, [r7, #2]
 801d194:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d196:	697b      	ldr	r3, [r7, #20]
 801d198:	2200      	movs	r2, #0
 801d19a:	711a      	strb	r2, [r3, #4]
 801d19c:	2200      	movs	r2, #0
 801d19e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d1a0:	697b      	ldr	r3, [r7, #20]
 801d1a2:	2200      	movs	r2, #0
 801d1a4:	719a      	strb	r2, [r3, #6]
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d1aa:	69fb      	ldr	r3, [r7, #28]
 801d1ac:	685b      	ldr	r3, [r3, #4]
 801d1ae:	f103 0008 	add.w	r0, r3, #8
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	685b      	ldr	r3, [r3, #4]
 801d1b6:	221c      	movs	r2, #28
 801d1b8:	4619      	mov	r1, r3
 801d1ba:	f003 f96e 	bl	802049a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d1be:	69bb      	ldr	r3, [r7, #24]
 801d1c0:	68db      	ldr	r3, [r3, #12]
 801d1c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d1c4:	f107 030c 	add.w	r3, r7, #12
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f000 f82f 	bl	801d22c <ip4_route>
 801d1ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d1d0:	693b      	ldr	r3, [r7, #16]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d019      	beq.n	801d20a <icmp_send_response+0xc6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d1d6:	697b      	ldr	r3, [r7, #20]
 801d1d8:	2200      	movs	r2, #0
 801d1da:	709a      	strb	r2, [r3, #2]
 801d1dc:	2200      	movs	r2, #0
 801d1de:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801d1e0:	4b11      	ldr	r3, [pc, #68]	@ (801d228 <icmp_send_response+0xe4>)
 801d1e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d1e6:	3301      	adds	r3, #1
 801d1e8:	b29a      	uxth	r2, r3
 801d1ea:	4b0f      	ldr	r3, [pc, #60]	@ (801d228 <icmp_send_response+0xe4>)
 801d1ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d1f0:	f107 020c 	add.w	r2, r7, #12
 801d1f4:	693b      	ldr	r3, [r7, #16]
 801d1f6:	9302      	str	r3, [sp, #8]
 801d1f8:	2301      	movs	r3, #1
 801d1fa:	9301      	str	r3, [sp, #4]
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	9300      	str	r3, [sp, #0]
 801d200:	23ff      	movs	r3, #255	@ 0xff
 801d202:	2100      	movs	r1, #0
 801d204:	69f8      	ldr	r0, [r7, #28]
 801d206:	f000 fa27 	bl	801d658 <ip4_output_if>
  }
  pbuf_free(q);
 801d20a:	69f8      	ldr	r0, [r7, #28]
 801d20c:	f7f7 fcbc 	bl	8014b88 <pbuf_free>
 801d210:	e000      	b.n	801d214 <icmp_send_response+0xd0>
    return;
 801d212:	bf00      	nop
}
 801d214:	3720      	adds	r7, #32
 801d216:	46bd      	mov	sp, r7
 801d218:	bd80      	pop	{r7, pc}
 801d21a:	bf00      	nop
 801d21c:	080241e4 	.word	0x080241e4
 801d220:	080242b0 	.word	0x080242b0
 801d224:	08024254 	.word	0x08024254
 801d228:	2002d2b0 	.word	0x2002d2b0

0801d22c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d22c:	b480      	push	{r7}
 801d22e:	b085      	sub	sp, #20
 801d230:	af00      	add	r7, sp, #0
 801d232:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d234:	4b37      	ldr	r3, [pc, #220]	@ (801d314 <ip4_route+0xe8>)
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	60fb      	str	r3, [r7, #12]
 801d23a:	e036      	b.n	801d2aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d242:	f003 0301 	and.w	r3, r3, #1
 801d246:	b2db      	uxtb	r3, r3
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d02b      	beq.n	801d2a4 <ip4_route+0x78>
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d252:	089b      	lsrs	r3, r3, #2
 801d254:	f003 0301 	and.w	r3, r3, #1
 801d258:	b2db      	uxtb	r3, r3
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d022      	beq.n	801d2a4 <ip4_route+0x78>
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	3304      	adds	r3, #4
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	2b00      	cmp	r3, #0
 801d266:	d01d      	beq.n	801d2a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	681a      	ldr	r2, [r3, #0]
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	3304      	adds	r3, #4
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	405a      	eors	r2, r3
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	3308      	adds	r3, #8
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	4013      	ands	r3, r2
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d101      	bne.n	801d284 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	e040      	b.n	801d306 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d28a:	f003 0302 	and.w	r3, r3, #2
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d108      	bne.n	801d2a4 <ip4_route+0x78>
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	681a      	ldr	r2, [r3, #0]
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	330c      	adds	r3, #12
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	429a      	cmp	r2, r3
 801d29e:	d101      	bne.n	801d2a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d2a0:	68fb      	ldr	r3, [r7, #12]
 801d2a2:	e030      	b.n	801d306 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801d2a4:	68fb      	ldr	r3, [r7, #12]
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	60fb      	str	r3, [r7, #12]
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d1c5      	bne.n	801d23c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d2b0:	4b19      	ldr	r3, [pc, #100]	@ (801d318 <ip4_route+0xec>)
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d01a      	beq.n	801d2ee <ip4_route+0xc2>
 801d2b8:	4b17      	ldr	r3, [pc, #92]	@ (801d318 <ip4_route+0xec>)
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d2c0:	f003 0301 	and.w	r3, r3, #1
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d012      	beq.n	801d2ee <ip4_route+0xc2>
 801d2c8:	4b13      	ldr	r3, [pc, #76]	@ (801d318 <ip4_route+0xec>)
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d2d0:	f003 0304 	and.w	r3, r3, #4
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d00a      	beq.n	801d2ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d2d8:	4b0f      	ldr	r3, [pc, #60]	@ (801d318 <ip4_route+0xec>)
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	3304      	adds	r3, #4
 801d2de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d004      	beq.n	801d2ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	b2db      	uxtb	r3, r3
 801d2ea:	2b7f      	cmp	r3, #127	@ 0x7f
 801d2ec:	d109      	bne.n	801d302 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801d2ee:	4b0b      	ldr	r3, [pc, #44]	@ (801d31c <ip4_route+0xf0>)
 801d2f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801d2f4:	3301      	adds	r3, #1
 801d2f6:	b29a      	uxth	r2, r3
 801d2f8:	4b08      	ldr	r3, [pc, #32]	@ (801d31c <ip4_route+0xf0>)
 801d2fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d2fe:	2300      	movs	r3, #0
 801d300:	e001      	b.n	801d306 <ip4_route+0xda>
  }

  return netif_default;
 801d302:	4b05      	ldr	r3, [pc, #20]	@ (801d318 <ip4_route+0xec>)
 801d304:	681b      	ldr	r3, [r3, #0]
}
 801d306:	4618      	mov	r0, r3
 801d308:	3714      	adds	r7, #20
 801d30a:	46bd      	mov	sp, r7
 801d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d310:	4770      	bx	lr
 801d312:	bf00      	nop
 801d314:	2002d2a4 	.word	0x2002d2a4
 801d318:	2002d2a8 	.word	0x2002d2a8
 801d31c:	2002d2b0 	.word	0x2002d2b0

0801d320 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d320:	b580      	push	{r7, lr}
 801d322:	b082      	sub	sp, #8
 801d324:	af00      	add	r7, sp, #0
 801d326:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d32e:	f003 0301 	and.w	r3, r3, #1
 801d332:	b2db      	uxtb	r3, r3
 801d334:	2b00      	cmp	r3, #0
 801d336:	d016      	beq.n	801d366 <ip4_input_accept+0x46>
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	3304      	adds	r3, #4
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d011      	beq.n	801d366 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d342:	4b0b      	ldr	r3, [pc, #44]	@ (801d370 <ip4_input_accept+0x50>)
 801d344:	695a      	ldr	r2, [r3, #20]
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	3304      	adds	r3, #4
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	429a      	cmp	r2, r3
 801d34e:	d008      	beq.n	801d362 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d350:	4b07      	ldr	r3, [pc, #28]	@ (801d370 <ip4_input_accept+0x50>)
 801d352:	695b      	ldr	r3, [r3, #20]
 801d354:	6879      	ldr	r1, [r7, #4]
 801d356:	4618      	mov	r0, r3
 801d358:	f000 fa70 	bl	801d83c <ip4_addr_isbroadcast_u32>
 801d35c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d001      	beq.n	801d366 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d362:	2301      	movs	r3, #1
 801d364:	e000      	b.n	801d368 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d366:	2300      	movs	r3, #0
}
 801d368:	4618      	mov	r0, r3
 801d36a:	3708      	adds	r7, #8
 801d36c:	46bd      	mov	sp, r7
 801d36e:	bd80      	pop	{r7, pc}
 801d370:	200270b4 	.word	0x200270b4

0801d374 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d374:	b580      	push	{r7, lr}
 801d376:	b086      	sub	sp, #24
 801d378:	af00      	add	r7, sp, #0
 801d37a:	6078      	str	r0, [r7, #4]
 801d37c:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801d37e:	4b8f      	ldr	r3, [pc, #572]	@ (801d5bc <ip4_input+0x248>)
 801d380:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801d384:	3301      	adds	r3, #1
 801d386:	b29a      	uxth	r2, r3
 801d388:	4b8c      	ldr	r3, [pc, #560]	@ (801d5bc <ip4_input+0x248>)
 801d38a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d38e:	687b      	ldr	r3, [r7, #4]
 801d390:	685b      	ldr	r3, [r3, #4]
 801d392:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801d394:	697b      	ldr	r3, [r7, #20]
 801d396:	781b      	ldrb	r3, [r3, #0]
 801d398:	091b      	lsrs	r3, r3, #4
 801d39a:	b2db      	uxtb	r3, r3
 801d39c:	2b04      	cmp	r3, #4
 801d39e:	d014      	beq.n	801d3ca <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d3a0:	6878      	ldr	r0, [r7, #4]
 801d3a2:	f7f7 fbf1 	bl	8014b88 <pbuf_free>
    IP_STATS_INC(ip.err);
 801d3a6:	4b85      	ldr	r3, [pc, #532]	@ (801d5bc <ip4_input+0x248>)
 801d3a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d3ac:	3301      	adds	r3, #1
 801d3ae:	b29a      	uxth	r2, r3
 801d3b0:	4b82      	ldr	r3, [pc, #520]	@ (801d5bc <ip4_input+0x248>)
 801d3b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801d3b6:	4b81      	ldr	r3, [pc, #516]	@ (801d5bc <ip4_input+0x248>)
 801d3b8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d3bc:	3301      	adds	r3, #1
 801d3be:	b29a      	uxth	r2, r3
 801d3c0:	4b7e      	ldr	r3, [pc, #504]	@ (801d5bc <ip4_input+0x248>)
 801d3c2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d3c6:	2300      	movs	r3, #0
 801d3c8:	e13e      	b.n	801d648 <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d3ca:	697b      	ldr	r3, [r7, #20]
 801d3cc:	781b      	ldrb	r3, [r3, #0]
 801d3ce:	f003 030f 	and.w	r3, r3, #15
 801d3d2:	b2db      	uxtb	r3, r3
 801d3d4:	009b      	lsls	r3, r3, #2
 801d3d6:	b2db      	uxtb	r3, r3
 801d3d8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d3da:	697b      	ldr	r3, [r7, #20]
 801d3dc:	885b      	ldrh	r3, [r3, #2]
 801d3de:	b29b      	uxth	r3, r3
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	f7f5 ff13 	bl	801320c <lwip_htons>
 801d3e6:	4603      	mov	r3, r0
 801d3e8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	891b      	ldrh	r3, [r3, #8]
 801d3ee:	89ba      	ldrh	r2, [r7, #12]
 801d3f0:	429a      	cmp	r2, r3
 801d3f2:	d204      	bcs.n	801d3fe <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801d3f4:	89bb      	ldrh	r3, [r7, #12]
 801d3f6:	4619      	mov	r1, r3
 801d3f8:	6878      	ldr	r0, [r7, #4]
 801d3fa:	f7f7 fa3f 	bl	801487c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	895b      	ldrh	r3, [r3, #10]
 801d402:	89fa      	ldrh	r2, [r7, #14]
 801d404:	429a      	cmp	r2, r3
 801d406:	d807      	bhi.n	801d418 <ip4_input+0xa4>
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	891b      	ldrh	r3, [r3, #8]
 801d40c:	89ba      	ldrh	r2, [r7, #12]
 801d40e:	429a      	cmp	r2, r3
 801d410:	d802      	bhi.n	801d418 <ip4_input+0xa4>
 801d412:	89fb      	ldrh	r3, [r7, #14]
 801d414:	2b13      	cmp	r3, #19
 801d416:	d814      	bhi.n	801d442 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d418:	6878      	ldr	r0, [r7, #4]
 801d41a:	f7f7 fbb5 	bl	8014b88 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801d41e:	4b67      	ldr	r3, [pc, #412]	@ (801d5bc <ip4_input+0x248>)
 801d420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801d424:	3301      	adds	r3, #1
 801d426:	b29a      	uxth	r2, r3
 801d428:	4b64      	ldr	r3, [pc, #400]	@ (801d5bc <ip4_input+0x248>)
 801d42a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801d42e:	4b63      	ldr	r3, [pc, #396]	@ (801d5bc <ip4_input+0x248>)
 801d430:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d434:	3301      	adds	r3, #1
 801d436:	b29a      	uxth	r2, r3
 801d438:	4b60      	ldr	r3, [pc, #384]	@ (801d5bc <ip4_input+0x248>)
 801d43a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d43e:	2300      	movs	r3, #0
 801d440:	e102      	b.n	801d648 <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d442:	697b      	ldr	r3, [r7, #20]
 801d444:	691b      	ldr	r3, [r3, #16]
 801d446:	4a5e      	ldr	r2, [pc, #376]	@ (801d5c0 <ip4_input+0x24c>)
 801d448:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d44a:	697b      	ldr	r3, [r7, #20]
 801d44c:	68db      	ldr	r3, [r3, #12]
 801d44e:	4a5c      	ldr	r2, [pc, #368]	@ (801d5c0 <ip4_input+0x24c>)
 801d450:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d452:	4b5b      	ldr	r3, [pc, #364]	@ (801d5c0 <ip4_input+0x24c>)
 801d454:	695b      	ldr	r3, [r3, #20]
 801d456:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d45a:	2be0      	cmp	r3, #224	@ 0xe0
 801d45c:	d112      	bne.n	801d484 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d45e:	683b      	ldr	r3, [r7, #0]
 801d460:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d464:	f003 0301 	and.w	r3, r3, #1
 801d468:	b2db      	uxtb	r3, r3
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d007      	beq.n	801d47e <ip4_input+0x10a>
 801d46e:	683b      	ldr	r3, [r7, #0]
 801d470:	3304      	adds	r3, #4
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d002      	beq.n	801d47e <ip4_input+0x10a>
      netif = inp;
 801d478:	683b      	ldr	r3, [r7, #0]
 801d47a:	613b      	str	r3, [r7, #16]
 801d47c:	e02a      	b.n	801d4d4 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d47e:	2300      	movs	r3, #0
 801d480:	613b      	str	r3, [r7, #16]
 801d482:	e027      	b.n	801d4d4 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d484:	6838      	ldr	r0, [r7, #0]
 801d486:	f7ff ff4b 	bl	801d320 <ip4_input_accept>
 801d48a:	4603      	mov	r3, r0
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d002      	beq.n	801d496 <ip4_input+0x122>
      netif = inp;
 801d490:	683b      	ldr	r3, [r7, #0]
 801d492:	613b      	str	r3, [r7, #16]
 801d494:	e01e      	b.n	801d4d4 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d496:	2300      	movs	r3, #0
 801d498:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d49a:	4b49      	ldr	r3, [pc, #292]	@ (801d5c0 <ip4_input+0x24c>)
 801d49c:	695b      	ldr	r3, [r3, #20]
 801d49e:	b2db      	uxtb	r3, r3
 801d4a0:	2b7f      	cmp	r3, #127	@ 0x7f
 801d4a2:	d017      	beq.n	801d4d4 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d4a4:	4b47      	ldr	r3, [pc, #284]	@ (801d5c4 <ip4_input+0x250>)
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	613b      	str	r3, [r7, #16]
 801d4aa:	e00e      	b.n	801d4ca <ip4_input+0x156>
          if (netif == inp) {
 801d4ac:	693a      	ldr	r2, [r7, #16]
 801d4ae:	683b      	ldr	r3, [r7, #0]
 801d4b0:	429a      	cmp	r2, r3
 801d4b2:	d006      	beq.n	801d4c2 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d4b4:	6938      	ldr	r0, [r7, #16]
 801d4b6:	f7ff ff33 	bl	801d320 <ip4_input_accept>
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d108      	bne.n	801d4d2 <ip4_input+0x15e>
 801d4c0:	e000      	b.n	801d4c4 <ip4_input+0x150>
            continue;
 801d4c2:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d4c4:	693b      	ldr	r3, [r7, #16]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	613b      	str	r3, [r7, #16]
 801d4ca:	693b      	ldr	r3, [r7, #16]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d1ed      	bne.n	801d4ac <ip4_input+0x138>
 801d4d0:	e000      	b.n	801d4d4 <ip4_input+0x160>
            break;
 801d4d2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d4d4:	4b3a      	ldr	r3, [pc, #232]	@ (801d5c0 <ip4_input+0x24c>)
 801d4d6:	691b      	ldr	r3, [r3, #16]
 801d4d8:	6839      	ldr	r1, [r7, #0]
 801d4da:	4618      	mov	r0, r3
 801d4dc:	f000 f9ae 	bl	801d83c <ip4_addr_isbroadcast_u32>
 801d4e0:	4603      	mov	r3, r0
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d105      	bne.n	801d4f2 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d4e6:	4b36      	ldr	r3, [pc, #216]	@ (801d5c0 <ip4_input+0x24c>)
 801d4e8:	691b      	ldr	r3, [r3, #16]
 801d4ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d4ee:	2be0      	cmp	r3, #224	@ 0xe0
 801d4f0:	d10c      	bne.n	801d50c <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d4f2:	6878      	ldr	r0, [r7, #4]
 801d4f4:	f7f7 fb48 	bl	8014b88 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801d4f8:	4b30      	ldr	r3, [pc, #192]	@ (801d5bc <ip4_input+0x248>)
 801d4fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d4fe:	3301      	adds	r3, #1
 801d500:	b29a      	uxth	r2, r3
 801d502:	4b2e      	ldr	r3, [pc, #184]	@ (801d5bc <ip4_input+0x248>)
 801d504:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d508:	2300      	movs	r3, #0
 801d50a:	e09d      	b.n	801d648 <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d50c:	693b      	ldr	r3, [r7, #16]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d10c      	bne.n	801d52c <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801d512:	4b2a      	ldr	r3, [pc, #168]	@ (801d5bc <ip4_input+0x248>)
 801d514:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d518:	3301      	adds	r3, #1
 801d51a:	b29a      	uxth	r2, r3
 801d51c:	4b27      	ldr	r3, [pc, #156]	@ (801d5bc <ip4_input+0x248>)
 801d51e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d522:	6878      	ldr	r0, [r7, #4]
 801d524:	f7f7 fb30 	bl	8014b88 <pbuf_free>
    return ERR_OK;
 801d528:	2300      	movs	r3, #0
 801d52a:	e08d      	b.n	801d648 <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d52c:	697b      	ldr	r3, [r7, #20]
 801d52e:	88db      	ldrh	r3, [r3, #6]
 801d530:	b29b      	uxth	r3, r3
 801d532:	461a      	mov	r2, r3
 801d534:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801d538:	4013      	ands	r3, r2
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d00b      	beq.n	801d556 <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d53e:	6878      	ldr	r0, [r7, #4]
 801d540:	f000 fcca 	bl	801ded8 <ip4_reass>
 801d544:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d101      	bne.n	801d550 <ip4_input+0x1dc>
      return ERR_OK;
 801d54c:	2300      	movs	r3, #0
 801d54e:	e07b      	b.n	801d648 <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	685b      	ldr	r3, [r3, #4]
 801d554:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d556:	4a1a      	ldr	r2, [pc, #104]	@ (801d5c0 <ip4_input+0x24c>)
 801d558:	693b      	ldr	r3, [r7, #16]
 801d55a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d55c:	4a18      	ldr	r2, [pc, #96]	@ (801d5c0 <ip4_input+0x24c>)
 801d55e:	683b      	ldr	r3, [r7, #0]
 801d560:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d562:	4a17      	ldr	r2, [pc, #92]	@ (801d5c0 <ip4_input+0x24c>)
 801d564:	697b      	ldr	r3, [r7, #20]
 801d566:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d568:	697b      	ldr	r3, [r7, #20]
 801d56a:	781b      	ldrb	r3, [r3, #0]
 801d56c:	f003 030f 	and.w	r3, r3, #15
 801d570:	b2db      	uxtb	r3, r3
 801d572:	009b      	lsls	r3, r3, #2
 801d574:	b2db      	uxtb	r3, r3
 801d576:	461a      	mov	r2, r3
 801d578:	4b11      	ldr	r3, [pc, #68]	@ (801d5c0 <ip4_input+0x24c>)
 801d57a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d57c:	89fb      	ldrh	r3, [r7, #14]
 801d57e:	4619      	mov	r1, r3
 801d580:	6878      	ldr	r0, [r7, #4]
 801d582:	f7f7 fa7b 	bl	8014a7c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d586:	697b      	ldr	r3, [r7, #20]
 801d588:	7a5b      	ldrb	r3, [r3, #9]
 801d58a:	2b11      	cmp	r3, #17
 801d58c:	d006      	beq.n	801d59c <ip4_input+0x228>
 801d58e:	2b11      	cmp	r3, #17
 801d590:	dc1a      	bgt.n	801d5c8 <ip4_input+0x254>
 801d592:	2b01      	cmp	r3, #1
 801d594:	d00c      	beq.n	801d5b0 <ip4_input+0x23c>
 801d596:	2b06      	cmp	r3, #6
 801d598:	d005      	beq.n	801d5a6 <ip4_input+0x232>
 801d59a:	e015      	b.n	801d5c8 <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d59c:	6839      	ldr	r1, [r7, #0]
 801d59e:	6878      	ldr	r0, [r7, #4]
 801d5a0:	f7fe f862 	bl	801b668 <udp_input>
        break;
 801d5a4:	e03d      	b.n	801d622 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d5a6:	6839      	ldr	r1, [r7, #0]
 801d5a8:	6878      	ldr	r0, [r7, #4]
 801d5aa:	f7f9 fb6d 	bl	8016c88 <tcp_input>
        break;
 801d5ae:	e038      	b.n	801d622 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d5b0:	6839      	ldr	r1, [r7, #0]
 801d5b2:	6878      	ldr	r0, [r7, #4]
 801d5b4:	f7ff fc6e 	bl	801ce94 <icmp_input>
        break;
 801d5b8:	e033      	b.n	801d622 <ip4_input+0x2ae>
 801d5ba:	bf00      	nop
 801d5bc:	2002d2b0 	.word	0x2002d2b0
 801d5c0:	200270b4 	.word	0x200270b4
 801d5c4:	2002d2a4 	.word	0x2002d2a4
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d5c8:	4b21      	ldr	r3, [pc, #132]	@ (801d650 <ip4_input+0x2dc>)
 801d5ca:	695b      	ldr	r3, [r3, #20]
 801d5cc:	6939      	ldr	r1, [r7, #16]
 801d5ce:	4618      	mov	r0, r3
 801d5d0:	f000 f934 	bl	801d83c <ip4_addr_isbroadcast_u32>
 801d5d4:	4603      	mov	r3, r0
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d10f      	bne.n	801d5fa <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d5da:	4b1d      	ldr	r3, [pc, #116]	@ (801d650 <ip4_input+0x2dc>)
 801d5dc:	695b      	ldr	r3, [r3, #20]
 801d5de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d5e2:	2be0      	cmp	r3, #224	@ 0xe0
 801d5e4:	d009      	beq.n	801d5fa <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d5e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d5ea:	4619      	mov	r1, r3
 801d5ec:	6878      	ldr	r0, [r7, #4]
 801d5ee:	f7f7 fab8 	bl	8014b62 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d5f2:	2102      	movs	r1, #2
 801d5f4:	6878      	ldr	r0, [r7, #4]
 801d5f6:	f7ff fd85 	bl	801d104 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801d5fa:	4b16      	ldr	r3, [pc, #88]	@ (801d654 <ip4_input+0x2e0>)
 801d5fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801d600:	3301      	adds	r3, #1
 801d602:	b29a      	uxth	r2, r3
 801d604:	4b13      	ldr	r3, [pc, #76]	@ (801d654 <ip4_input+0x2e0>)
 801d606:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801d60a:	4b12      	ldr	r3, [pc, #72]	@ (801d654 <ip4_input+0x2e0>)
 801d60c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d610:	3301      	adds	r3, #1
 801d612:	b29a      	uxth	r2, r3
 801d614:	4b0f      	ldr	r3, [pc, #60]	@ (801d654 <ip4_input+0x2e0>)
 801d616:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d61a:	6878      	ldr	r0, [r7, #4]
 801d61c:	f7f7 fab4 	bl	8014b88 <pbuf_free>
        break;
 801d620:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d622:	4b0b      	ldr	r3, [pc, #44]	@ (801d650 <ip4_input+0x2dc>)
 801d624:	2200      	movs	r2, #0
 801d626:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d628:	4b09      	ldr	r3, [pc, #36]	@ (801d650 <ip4_input+0x2dc>)
 801d62a:	2200      	movs	r2, #0
 801d62c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d62e:	4b08      	ldr	r3, [pc, #32]	@ (801d650 <ip4_input+0x2dc>)
 801d630:	2200      	movs	r2, #0
 801d632:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d634:	4b06      	ldr	r3, [pc, #24]	@ (801d650 <ip4_input+0x2dc>)
 801d636:	2200      	movs	r2, #0
 801d638:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d63a:	4b05      	ldr	r3, [pc, #20]	@ (801d650 <ip4_input+0x2dc>)
 801d63c:	2200      	movs	r2, #0
 801d63e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d640:	4b03      	ldr	r3, [pc, #12]	@ (801d650 <ip4_input+0x2dc>)
 801d642:	2200      	movs	r2, #0
 801d644:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d646:	2300      	movs	r3, #0
}
 801d648:	4618      	mov	r0, r3
 801d64a:	3718      	adds	r7, #24
 801d64c:	46bd      	mov	sp, r7
 801d64e:	bd80      	pop	{r7, pc}
 801d650:	200270b4 	.word	0x200270b4
 801d654:	2002d2b0 	.word	0x2002d2b0

0801d658 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d658:	b580      	push	{r7, lr}
 801d65a:	b08a      	sub	sp, #40	@ 0x28
 801d65c:	af04      	add	r7, sp, #16
 801d65e:	60f8      	str	r0, [r7, #12]
 801d660:	60b9      	str	r1, [r7, #8]
 801d662:	607a      	str	r2, [r7, #4]
 801d664:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d666:	68bb      	ldr	r3, [r7, #8]
 801d668:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d009      	beq.n	801d684 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d670:	68bb      	ldr	r3, [r7, #8]
 801d672:	2b00      	cmp	r3, #0
 801d674:	d003      	beq.n	801d67e <ip4_output_if+0x26>
 801d676:	68bb      	ldr	r3, [r7, #8]
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d102      	bne.n	801d684 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d680:	3304      	adds	r3, #4
 801d682:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d684:	78fa      	ldrb	r2, [r7, #3]
 801d686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d688:	9302      	str	r3, [sp, #8]
 801d68a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801d68e:	9301      	str	r3, [sp, #4]
 801d690:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d694:	9300      	str	r3, [sp, #0]
 801d696:	4613      	mov	r3, r2
 801d698:	687a      	ldr	r2, [r7, #4]
 801d69a:	6979      	ldr	r1, [r7, #20]
 801d69c:	68f8      	ldr	r0, [r7, #12]
 801d69e:	f000 f805 	bl	801d6ac <ip4_output_if_src>
 801d6a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	3718      	adds	r7, #24
 801d6a8:	46bd      	mov	sp, r7
 801d6aa:	bd80      	pop	{r7, pc}

0801d6ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d6ac:	b580      	push	{r7, lr}
 801d6ae:	b088      	sub	sp, #32
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	60f8      	str	r0, [r7, #12]
 801d6b4:	60b9      	str	r1, [r7, #8]
 801d6b6:	607a      	str	r2, [r7, #4]
 801d6b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	7b9b      	ldrb	r3, [r3, #14]
 801d6be:	2b01      	cmp	r3, #1
 801d6c0:	d006      	beq.n	801d6d0 <ip4_output_if_src+0x24>
 801d6c2:	4b57      	ldr	r3, [pc, #348]	@ (801d820 <ip4_output_if_src+0x174>)
 801d6c4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801d6c8:	4956      	ldr	r1, [pc, #344]	@ (801d824 <ip4_output_if_src+0x178>)
 801d6ca:	4857      	ldr	r0, [pc, #348]	@ (801d828 <ip4_output_if_src+0x17c>)
 801d6cc:	f002 fcba 	bl	8020044 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d068      	beq.n	801d7a8 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801d6d6:	2314      	movs	r3, #20
 801d6d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d6da:	2114      	movs	r1, #20
 801d6dc:	68f8      	ldr	r0, [r7, #12]
 801d6de:	f7f7 f9bd 	bl	8014a5c <pbuf_add_header>
 801d6e2:	4603      	mov	r3, r0
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d00a      	beq.n	801d6fe <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801d6e8:	4b50      	ldr	r3, [pc, #320]	@ (801d82c <ip4_output_if_src+0x180>)
 801d6ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d6ee:	3301      	adds	r3, #1
 801d6f0:	b29a      	uxth	r2, r3
 801d6f2:	4b4e      	ldr	r3, [pc, #312]	@ (801d82c <ip4_output_if_src+0x180>)
 801d6f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d6f8:	f06f 0301 	mvn.w	r3, #1
 801d6fc:	e08c      	b.n	801d818 <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	685b      	ldr	r3, [r3, #4]
 801d702:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	895b      	ldrh	r3, [r3, #10]
 801d708:	2b13      	cmp	r3, #19
 801d70a:	d806      	bhi.n	801d71a <ip4_output_if_src+0x6e>
 801d70c:	4b44      	ldr	r3, [pc, #272]	@ (801d820 <ip4_output_if_src+0x174>)
 801d70e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801d712:	4947      	ldr	r1, [pc, #284]	@ (801d830 <ip4_output_if_src+0x184>)
 801d714:	4844      	ldr	r0, [pc, #272]	@ (801d828 <ip4_output_if_src+0x17c>)
 801d716:	f002 fc95 	bl	8020044 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d71a:	69fb      	ldr	r3, [r7, #28]
 801d71c:	78fa      	ldrb	r2, [r7, #3]
 801d71e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d720:	69fb      	ldr	r3, [r7, #28]
 801d722:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801d726:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	681a      	ldr	r2, [r3, #0]
 801d72c:	69fb      	ldr	r3, [r7, #28]
 801d72e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d730:	8b7b      	ldrh	r3, [r7, #26]
 801d732:	089b      	lsrs	r3, r3, #2
 801d734:	b29b      	uxth	r3, r3
 801d736:	b2db      	uxtb	r3, r3
 801d738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d73c:	b2da      	uxtb	r2, r3
 801d73e:	69fb      	ldr	r3, [r7, #28]
 801d740:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d742:	69fb      	ldr	r3, [r7, #28]
 801d744:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801d748:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	891b      	ldrh	r3, [r3, #8]
 801d74e:	4618      	mov	r0, r3
 801d750:	f7f5 fd5c 	bl	801320c <lwip_htons>
 801d754:	4603      	mov	r3, r0
 801d756:	461a      	mov	r2, r3
 801d758:	69fb      	ldr	r3, [r7, #28]
 801d75a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d75c:	69fb      	ldr	r3, [r7, #28]
 801d75e:	2200      	movs	r2, #0
 801d760:	719a      	strb	r2, [r3, #6]
 801d762:	2200      	movs	r2, #0
 801d764:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d766:	4b33      	ldr	r3, [pc, #204]	@ (801d834 <ip4_output_if_src+0x188>)
 801d768:	881b      	ldrh	r3, [r3, #0]
 801d76a:	4618      	mov	r0, r3
 801d76c:	f7f5 fd4e 	bl	801320c <lwip_htons>
 801d770:	4603      	mov	r3, r0
 801d772:	461a      	mov	r2, r3
 801d774:	69fb      	ldr	r3, [r7, #28]
 801d776:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d778:	4b2e      	ldr	r3, [pc, #184]	@ (801d834 <ip4_output_if_src+0x188>)
 801d77a:	881b      	ldrh	r3, [r3, #0]
 801d77c:	3301      	adds	r3, #1
 801d77e:	b29a      	uxth	r2, r3
 801d780:	4b2c      	ldr	r3, [pc, #176]	@ (801d834 <ip4_output_if_src+0x188>)
 801d782:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d784:	68bb      	ldr	r3, [r7, #8]
 801d786:	2b00      	cmp	r3, #0
 801d788:	d104      	bne.n	801d794 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d78a:	4b2b      	ldr	r3, [pc, #172]	@ (801d838 <ip4_output_if_src+0x18c>)
 801d78c:	681a      	ldr	r2, [r3, #0]
 801d78e:	69fb      	ldr	r3, [r7, #28]
 801d790:	60da      	str	r2, [r3, #12]
 801d792:	e003      	b.n	801d79c <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d794:	68bb      	ldr	r3, [r7, #8]
 801d796:	681a      	ldr	r2, [r3, #0]
 801d798:	69fb      	ldr	r3, [r7, #28]
 801d79a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d79c:	69fb      	ldr	r3, [r7, #28]
 801d79e:	2200      	movs	r2, #0
 801d7a0:	729a      	strb	r2, [r3, #10]
 801d7a2:	2200      	movs	r2, #0
 801d7a4:	72da      	strb	r2, [r3, #11]
 801d7a6:	e017      	b.n	801d7d8 <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	895b      	ldrh	r3, [r3, #10]
 801d7ac:	2b13      	cmp	r3, #19
 801d7ae:	d80a      	bhi.n	801d7c6 <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801d7b0:	4b1e      	ldr	r3, [pc, #120]	@ (801d82c <ip4_output_if_src+0x180>)
 801d7b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d7b6:	3301      	adds	r3, #1
 801d7b8:	b29a      	uxth	r2, r3
 801d7ba:	4b1c      	ldr	r3, [pc, #112]	@ (801d82c <ip4_output_if_src+0x180>)
 801d7bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d7c0:	f06f 0301 	mvn.w	r3, #1
 801d7c4:	e028      	b.n	801d818 <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	685b      	ldr	r3, [r3, #4]
 801d7ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d7cc:	69fb      	ldr	r3, [r7, #28]
 801d7ce:	691b      	ldr	r3, [r3, #16]
 801d7d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d7d2:	f107 0314 	add.w	r3, r7, #20
 801d7d6:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801d7d8:	4b14      	ldr	r3, [pc, #80]	@ (801d82c <ip4_output_if_src+0x180>)
 801d7da:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d7de:	3301      	adds	r3, #1
 801d7e0:	b29a      	uxth	r2, r3
 801d7e2:	4b12      	ldr	r3, [pc, #72]	@ (801d82c <ip4_output_if_src+0x180>)
 801d7e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d7ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d00c      	beq.n	801d80a <ip4_output_if_src+0x15e>
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	891a      	ldrh	r2, [r3, #8]
 801d7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d7f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d7f8:	429a      	cmp	r2, r3
 801d7fa:	d906      	bls.n	801d80a <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801d7fc:	687a      	ldr	r2, [r7, #4]
 801d7fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d800:	68f8      	ldr	r0, [r7, #12]
 801d802:	f000 fd7b 	bl	801e2fc <ip4_frag>
 801d806:	4603      	mov	r3, r0
 801d808:	e006      	b.n	801d818 <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d80c:	695b      	ldr	r3, [r3, #20]
 801d80e:	687a      	ldr	r2, [r7, #4]
 801d810:	68f9      	ldr	r1, [r7, #12]
 801d812:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d814:	4798      	blx	r3
 801d816:	4603      	mov	r3, r0
}
 801d818:	4618      	mov	r0, r3
 801d81a:	3720      	adds	r7, #32
 801d81c:	46bd      	mov	sp, r7
 801d81e:	bd80      	pop	{r7, pc}
 801d820:	080242dc 	.word	0x080242dc
 801d824:	08024310 	.word	0x08024310
 801d828:	0802431c 	.word	0x0802431c
 801d82c:	2002d2b0 	.word	0x2002d2b0
 801d830:	08024344 	.word	0x08024344
 801d834:	2002d4fe 	.word	0x2002d4fe
 801d838:	08024db8 	.word	0x08024db8

0801d83c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d83c:	b480      	push	{r7}
 801d83e:	b085      	sub	sp, #20
 801d840:	af00      	add	r7, sp, #0
 801d842:	6078      	str	r0, [r7, #4]
 801d844:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d846:	687b      	ldr	r3, [r7, #4]
 801d848:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d850:	d002      	beq.n	801d858 <ip4_addr_isbroadcast_u32+0x1c>
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	2b00      	cmp	r3, #0
 801d856:	d101      	bne.n	801d85c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d858:	2301      	movs	r3, #1
 801d85a:	e02a      	b.n	801d8b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d85c:	683b      	ldr	r3, [r7, #0]
 801d85e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d862:	f003 0302 	and.w	r3, r3, #2
 801d866:	2b00      	cmp	r3, #0
 801d868:	d101      	bne.n	801d86e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d86a:	2300      	movs	r3, #0
 801d86c:	e021      	b.n	801d8b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d86e:	683b      	ldr	r3, [r7, #0]
 801d870:	3304      	adds	r3, #4
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	687a      	ldr	r2, [r7, #4]
 801d876:	429a      	cmp	r2, r3
 801d878:	d101      	bne.n	801d87e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d87a:	2300      	movs	r3, #0
 801d87c:	e019      	b.n	801d8b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d87e:	68fa      	ldr	r2, [r7, #12]
 801d880:	683b      	ldr	r3, [r7, #0]
 801d882:	3304      	adds	r3, #4
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	405a      	eors	r2, r3
 801d888:	683b      	ldr	r3, [r7, #0]
 801d88a:	3308      	adds	r3, #8
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	4013      	ands	r3, r2
 801d890:	2b00      	cmp	r3, #0
 801d892:	d10d      	bne.n	801d8b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d894:	683b      	ldr	r3, [r7, #0]
 801d896:	3308      	adds	r3, #8
 801d898:	681b      	ldr	r3, [r3, #0]
 801d89a:	43da      	mvns	r2, r3
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d8a0:	683b      	ldr	r3, [r7, #0]
 801d8a2:	3308      	adds	r3, #8
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d8a8:	429a      	cmp	r2, r3
 801d8aa:	d101      	bne.n	801d8b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d8ac:	2301      	movs	r3, #1
 801d8ae:	e000      	b.n	801d8b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d8b0:	2300      	movs	r3, #0
  }
}
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	3714      	adds	r7, #20
 801d8b6:	46bd      	mov	sp, r7
 801d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8bc:	4770      	bx	lr
	...

0801d8c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d8c0:	b580      	push	{r7, lr}
 801d8c2:	b084      	sub	sp, #16
 801d8c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d8c6:	2300      	movs	r3, #0
 801d8c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d8ca:	4b12      	ldr	r3, [pc, #72]	@ (801d914 <ip_reass_tmr+0x54>)
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d8d0:	e018      	b.n	801d904 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	7fdb      	ldrb	r3, [r3, #31]
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d00b      	beq.n	801d8f2 <ip_reass_tmr+0x32>
      r->timer--;
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	7fdb      	ldrb	r3, [r3, #31]
 801d8de:	3b01      	subs	r3, #1
 801d8e0:	b2da      	uxtb	r2, r3
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	60fb      	str	r3, [r7, #12]
 801d8f0:	e008      	b.n	801d904 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d8fc:	68b9      	ldr	r1, [r7, #8]
 801d8fe:	6878      	ldr	r0, [r7, #4]
 801d900:	f000 f80a 	bl	801d918 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	2b00      	cmp	r3, #0
 801d908:	d1e3      	bne.n	801d8d2 <ip_reass_tmr+0x12>
    }
  }
}
 801d90a:	bf00      	nop
 801d90c:	bf00      	nop
 801d90e:	3710      	adds	r7, #16
 801d910:	46bd      	mov	sp, r7
 801d912:	bd80      	pop	{r7, pc}
 801d914:	2002d500 	.word	0x2002d500

0801d918 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d918:	b580      	push	{r7, lr}
 801d91a:	b088      	sub	sp, #32
 801d91c:	af00      	add	r7, sp, #0
 801d91e:	6078      	str	r0, [r7, #4]
 801d920:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d922:	2300      	movs	r3, #0
 801d924:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d926:	683a      	ldr	r2, [r7, #0]
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	429a      	cmp	r2, r3
 801d92c:	d105      	bne.n	801d93a <ip_reass_free_complete_datagram+0x22>
 801d92e:	4b45      	ldr	r3, [pc, #276]	@ (801da44 <ip_reass_free_complete_datagram+0x12c>)
 801d930:	22ab      	movs	r2, #171	@ 0xab
 801d932:	4945      	ldr	r1, [pc, #276]	@ (801da48 <ip_reass_free_complete_datagram+0x130>)
 801d934:	4845      	ldr	r0, [pc, #276]	@ (801da4c <ip_reass_free_complete_datagram+0x134>)
 801d936:	f002 fb85 	bl	8020044 <iprintf>
  if (prev != NULL) {
 801d93a:	683b      	ldr	r3, [r7, #0]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d00a      	beq.n	801d956 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d940:	683b      	ldr	r3, [r7, #0]
 801d942:	681b      	ldr	r3, [r3, #0]
 801d944:	687a      	ldr	r2, [r7, #4]
 801d946:	429a      	cmp	r2, r3
 801d948:	d005      	beq.n	801d956 <ip_reass_free_complete_datagram+0x3e>
 801d94a:	4b3e      	ldr	r3, [pc, #248]	@ (801da44 <ip_reass_free_complete_datagram+0x12c>)
 801d94c:	22ad      	movs	r2, #173	@ 0xad
 801d94e:	4940      	ldr	r1, [pc, #256]	@ (801da50 <ip_reass_free_complete_datagram+0x138>)
 801d950:	483e      	ldr	r0, [pc, #248]	@ (801da4c <ip_reass_free_complete_datagram+0x134>)
 801d952:	f002 fb77 	bl	8020044 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	685b      	ldr	r3, [r3, #4]
 801d95a:	685b      	ldr	r3, [r3, #4]
 801d95c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d95e:	697b      	ldr	r3, [r7, #20]
 801d960:	889b      	ldrh	r3, [r3, #4]
 801d962:	b29b      	uxth	r3, r3
 801d964:	2b00      	cmp	r3, #0
 801d966:	d12a      	bne.n	801d9be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	685b      	ldr	r3, [r3, #4]
 801d96c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d96e:	697b      	ldr	r3, [r7, #20]
 801d970:	681a      	ldr	r2, [r3, #0]
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d976:	69bb      	ldr	r3, [r7, #24]
 801d978:	6858      	ldr	r0, [r3, #4]
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	3308      	adds	r3, #8
 801d97e:	2214      	movs	r2, #20
 801d980:	4619      	mov	r1, r3
 801d982:	f002 fd8a 	bl	802049a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d986:	2101      	movs	r1, #1
 801d988:	69b8      	ldr	r0, [r7, #24]
 801d98a:	f7ff fbcb 	bl	801d124 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d98e:	69b8      	ldr	r0, [r7, #24]
 801d990:	f7f7 f988 	bl	8014ca4 <pbuf_clen>
 801d994:	4603      	mov	r3, r0
 801d996:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d998:	8bfa      	ldrh	r2, [r7, #30]
 801d99a:	8a7b      	ldrh	r3, [r7, #18]
 801d99c:	4413      	add	r3, r2
 801d99e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d9a2:	db05      	blt.n	801d9b0 <ip_reass_free_complete_datagram+0x98>
 801d9a4:	4b27      	ldr	r3, [pc, #156]	@ (801da44 <ip_reass_free_complete_datagram+0x12c>)
 801d9a6:	22bc      	movs	r2, #188	@ 0xbc
 801d9a8:	492a      	ldr	r1, [pc, #168]	@ (801da54 <ip_reass_free_complete_datagram+0x13c>)
 801d9aa:	4828      	ldr	r0, [pc, #160]	@ (801da4c <ip_reass_free_complete_datagram+0x134>)
 801d9ac:	f002 fb4a 	bl	8020044 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d9b0:	8bfa      	ldrh	r2, [r7, #30]
 801d9b2:	8a7b      	ldrh	r3, [r7, #18]
 801d9b4:	4413      	add	r3, r2
 801d9b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d9b8:	69b8      	ldr	r0, [r7, #24]
 801d9ba:	f7f7 f8e5 	bl	8014b88 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	685b      	ldr	r3, [r3, #4]
 801d9c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d9c4:	e01f      	b.n	801da06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d9c6:	69bb      	ldr	r3, [r7, #24]
 801d9c8:	685b      	ldr	r3, [r3, #4]
 801d9ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d9cc:	69bb      	ldr	r3, [r7, #24]
 801d9ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d9d0:	697b      	ldr	r3, [r7, #20]
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d9d6:	68f8      	ldr	r0, [r7, #12]
 801d9d8:	f7f7 f964 	bl	8014ca4 <pbuf_clen>
 801d9dc:	4603      	mov	r3, r0
 801d9de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d9e0:	8bfa      	ldrh	r2, [r7, #30]
 801d9e2:	8a7b      	ldrh	r3, [r7, #18]
 801d9e4:	4413      	add	r3, r2
 801d9e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d9ea:	db05      	blt.n	801d9f8 <ip_reass_free_complete_datagram+0xe0>
 801d9ec:	4b15      	ldr	r3, [pc, #84]	@ (801da44 <ip_reass_free_complete_datagram+0x12c>)
 801d9ee:	22cc      	movs	r2, #204	@ 0xcc
 801d9f0:	4918      	ldr	r1, [pc, #96]	@ (801da54 <ip_reass_free_complete_datagram+0x13c>)
 801d9f2:	4816      	ldr	r0, [pc, #88]	@ (801da4c <ip_reass_free_complete_datagram+0x134>)
 801d9f4:	f002 fb26 	bl	8020044 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d9f8:	8bfa      	ldrh	r2, [r7, #30]
 801d9fa:	8a7b      	ldrh	r3, [r7, #18]
 801d9fc:	4413      	add	r3, r2
 801d9fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801da00:	68f8      	ldr	r0, [r7, #12]
 801da02:	f7f7 f8c1 	bl	8014b88 <pbuf_free>
  while (p != NULL) {
 801da06:	69bb      	ldr	r3, [r7, #24]
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d1dc      	bne.n	801d9c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801da0c:	6839      	ldr	r1, [r7, #0]
 801da0e:	6878      	ldr	r0, [r7, #4]
 801da10:	f000 f8ca 	bl	801dba8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801da14:	4b10      	ldr	r3, [pc, #64]	@ (801da58 <ip_reass_free_complete_datagram+0x140>)
 801da16:	881b      	ldrh	r3, [r3, #0]
 801da18:	8bfa      	ldrh	r2, [r7, #30]
 801da1a:	429a      	cmp	r2, r3
 801da1c:	d905      	bls.n	801da2a <ip_reass_free_complete_datagram+0x112>
 801da1e:	4b09      	ldr	r3, [pc, #36]	@ (801da44 <ip_reass_free_complete_datagram+0x12c>)
 801da20:	22d2      	movs	r2, #210	@ 0xd2
 801da22:	490e      	ldr	r1, [pc, #56]	@ (801da5c <ip_reass_free_complete_datagram+0x144>)
 801da24:	4809      	ldr	r0, [pc, #36]	@ (801da4c <ip_reass_free_complete_datagram+0x134>)
 801da26:	f002 fb0d 	bl	8020044 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801da2a:	4b0b      	ldr	r3, [pc, #44]	@ (801da58 <ip_reass_free_complete_datagram+0x140>)
 801da2c:	881a      	ldrh	r2, [r3, #0]
 801da2e:	8bfb      	ldrh	r3, [r7, #30]
 801da30:	1ad3      	subs	r3, r2, r3
 801da32:	b29a      	uxth	r2, r3
 801da34:	4b08      	ldr	r3, [pc, #32]	@ (801da58 <ip_reass_free_complete_datagram+0x140>)
 801da36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801da38:	8bfb      	ldrh	r3, [r7, #30]
}
 801da3a:	4618      	mov	r0, r3
 801da3c:	3720      	adds	r7, #32
 801da3e:	46bd      	mov	sp, r7
 801da40:	bd80      	pop	{r7, pc}
 801da42:	bf00      	nop
 801da44:	08024374 	.word	0x08024374
 801da48:	080243b0 	.word	0x080243b0
 801da4c:	080243bc 	.word	0x080243bc
 801da50:	080243e4 	.word	0x080243e4
 801da54:	080243f8 	.word	0x080243f8
 801da58:	2002d504 	.word	0x2002d504
 801da5c:	08024418 	.word	0x08024418

0801da60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801da60:	b580      	push	{r7, lr}
 801da62:	b08a      	sub	sp, #40	@ 0x28
 801da64:	af00      	add	r7, sp, #0
 801da66:	6078      	str	r0, [r7, #4]
 801da68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801da6a:	2300      	movs	r3, #0
 801da6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801da6e:	2300      	movs	r3, #0
 801da70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801da72:	2300      	movs	r3, #0
 801da74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801da76:	2300      	movs	r3, #0
 801da78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801da7a:	2300      	movs	r3, #0
 801da7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801da7e:	4b28      	ldr	r3, [pc, #160]	@ (801db20 <ip_reass_remove_oldest_datagram+0xc0>)
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801da84:	e030      	b.n	801dae8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801da86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da88:	695a      	ldr	r2, [r3, #20]
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	68db      	ldr	r3, [r3, #12]
 801da8e:	429a      	cmp	r2, r3
 801da90:	d10c      	bne.n	801daac <ip_reass_remove_oldest_datagram+0x4c>
 801da92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da94:	699a      	ldr	r2, [r3, #24]
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	691b      	ldr	r3, [r3, #16]
 801da9a:	429a      	cmp	r2, r3
 801da9c:	d106      	bne.n	801daac <ip_reass_remove_oldest_datagram+0x4c>
 801da9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801daa0:	899a      	ldrh	r2, [r3, #12]
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	889b      	ldrh	r3, [r3, #4]
 801daa6:	b29b      	uxth	r3, r3
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d014      	beq.n	801dad6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801daac:	693b      	ldr	r3, [r7, #16]
 801daae:	3301      	adds	r3, #1
 801dab0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801dab2:	6a3b      	ldr	r3, [r7, #32]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d104      	bne.n	801dac2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801dab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801daba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801dabc:	69fb      	ldr	r3, [r7, #28]
 801dabe:	61bb      	str	r3, [r7, #24]
 801dac0:	e009      	b.n	801dad6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801dac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dac4:	7fda      	ldrb	r2, [r3, #31]
 801dac6:	6a3b      	ldr	r3, [r7, #32]
 801dac8:	7fdb      	ldrb	r3, [r3, #31]
 801daca:	429a      	cmp	r2, r3
 801dacc:	d803      	bhi.n	801dad6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801dace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dad0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801dad2:	69fb      	ldr	r3, [r7, #28]
 801dad4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801dad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d001      	beq.n	801dae2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801dade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dae0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801dae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dae4:	681b      	ldr	r3, [r3, #0]
 801dae6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801dae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801daea:	2b00      	cmp	r3, #0
 801daec:	d1cb      	bne.n	801da86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801daee:	6a3b      	ldr	r3, [r7, #32]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d008      	beq.n	801db06 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801daf4:	69b9      	ldr	r1, [r7, #24]
 801daf6:	6a38      	ldr	r0, [r7, #32]
 801daf8:	f7ff ff0e 	bl	801d918 <ip_reass_free_complete_datagram>
 801dafc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801dafe:	697a      	ldr	r2, [r7, #20]
 801db00:	68fb      	ldr	r3, [r7, #12]
 801db02:	4413      	add	r3, r2
 801db04:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801db06:	697a      	ldr	r2, [r7, #20]
 801db08:	683b      	ldr	r3, [r7, #0]
 801db0a:	429a      	cmp	r2, r3
 801db0c:	da02      	bge.n	801db14 <ip_reass_remove_oldest_datagram+0xb4>
 801db0e:	693b      	ldr	r3, [r7, #16]
 801db10:	2b01      	cmp	r3, #1
 801db12:	dcac      	bgt.n	801da6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801db14:	697b      	ldr	r3, [r7, #20]
}
 801db16:	4618      	mov	r0, r3
 801db18:	3728      	adds	r7, #40	@ 0x28
 801db1a:	46bd      	mov	sp, r7
 801db1c:	bd80      	pop	{r7, pc}
 801db1e:	bf00      	nop
 801db20:	2002d500 	.word	0x2002d500

0801db24 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801db24:	b580      	push	{r7, lr}
 801db26:	b084      	sub	sp, #16
 801db28:	af00      	add	r7, sp, #0
 801db2a:	6078      	str	r0, [r7, #4]
 801db2c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801db2e:	2004      	movs	r0, #4
 801db30:	f7f6 f90a 	bl	8013d48 <memp_malloc>
 801db34:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d116      	bne.n	801db6a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801db3c:	6839      	ldr	r1, [r7, #0]
 801db3e:	6878      	ldr	r0, [r7, #4]
 801db40:	f7ff ff8e 	bl	801da60 <ip_reass_remove_oldest_datagram>
 801db44:	4602      	mov	r2, r0
 801db46:	683b      	ldr	r3, [r7, #0]
 801db48:	4293      	cmp	r3, r2
 801db4a:	dc03      	bgt.n	801db54 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801db4c:	2004      	movs	r0, #4
 801db4e:	f7f6 f8fb 	bl	8013d48 <memp_malloc>
 801db52:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	2b00      	cmp	r3, #0
 801db58:	d107      	bne.n	801db6a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801db5a:	4b11      	ldr	r3, [pc, #68]	@ (801dba0 <ip_reass_enqueue_new_datagram+0x7c>)
 801db5c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801db5e:	3301      	adds	r3, #1
 801db60:	b29a      	uxth	r2, r3
 801db62:	4b0f      	ldr	r3, [pc, #60]	@ (801dba0 <ip_reass_enqueue_new_datagram+0x7c>)
 801db64:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801db66:	2300      	movs	r3, #0
 801db68:	e016      	b.n	801db98 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801db6a:	2220      	movs	r2, #32
 801db6c:	2100      	movs	r1, #0
 801db6e:	68f8      	ldr	r0, [r7, #12]
 801db70:	f002 fbc0 	bl	80202f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801db74:	68fb      	ldr	r3, [r7, #12]
 801db76:	220f      	movs	r2, #15
 801db78:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801db7a:	4b0a      	ldr	r3, [pc, #40]	@ (801dba4 <ip_reass_enqueue_new_datagram+0x80>)
 801db7c:	681a      	ldr	r2, [r3, #0]
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801db82:	4a08      	ldr	r2, [pc, #32]	@ (801dba4 <ip_reass_enqueue_new_datagram+0x80>)
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801db88:	68fb      	ldr	r3, [r7, #12]
 801db8a:	3308      	adds	r3, #8
 801db8c:	2214      	movs	r2, #20
 801db8e:	6879      	ldr	r1, [r7, #4]
 801db90:	4618      	mov	r0, r3
 801db92:	f002 fc82 	bl	802049a <memcpy>
  return ipr;
 801db96:	68fb      	ldr	r3, [r7, #12]
}
 801db98:	4618      	mov	r0, r3
 801db9a:	3710      	adds	r7, #16
 801db9c:	46bd      	mov	sp, r7
 801db9e:	bd80      	pop	{r7, pc}
 801dba0:	2002d2b0 	.word	0x2002d2b0
 801dba4:	2002d500 	.word	0x2002d500

0801dba8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b082      	sub	sp, #8
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
 801dbb0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801dbb2:	4b10      	ldr	r3, [pc, #64]	@ (801dbf4 <ip_reass_dequeue_datagram+0x4c>)
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	687a      	ldr	r2, [r7, #4]
 801dbb8:	429a      	cmp	r2, r3
 801dbba:	d104      	bne.n	801dbc6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	4a0c      	ldr	r2, [pc, #48]	@ (801dbf4 <ip_reass_dequeue_datagram+0x4c>)
 801dbc2:	6013      	str	r3, [r2, #0]
 801dbc4:	e00d      	b.n	801dbe2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801dbc6:	683b      	ldr	r3, [r7, #0]
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d106      	bne.n	801dbda <ip_reass_dequeue_datagram+0x32>
 801dbcc:	4b0a      	ldr	r3, [pc, #40]	@ (801dbf8 <ip_reass_dequeue_datagram+0x50>)
 801dbce:	f240 1245 	movw	r2, #325	@ 0x145
 801dbd2:	490a      	ldr	r1, [pc, #40]	@ (801dbfc <ip_reass_dequeue_datagram+0x54>)
 801dbd4:	480a      	ldr	r0, [pc, #40]	@ (801dc00 <ip_reass_dequeue_datagram+0x58>)
 801dbd6:	f002 fa35 	bl	8020044 <iprintf>
    prev->next = ipr->next;
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	681a      	ldr	r2, [r3, #0]
 801dbde:	683b      	ldr	r3, [r7, #0]
 801dbe0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801dbe2:	6879      	ldr	r1, [r7, #4]
 801dbe4:	2004      	movs	r0, #4
 801dbe6:	f7f6 f92b 	bl	8013e40 <memp_free>
}
 801dbea:	bf00      	nop
 801dbec:	3708      	adds	r7, #8
 801dbee:	46bd      	mov	sp, r7
 801dbf0:	bd80      	pop	{r7, pc}
 801dbf2:	bf00      	nop
 801dbf4:	2002d500 	.word	0x2002d500
 801dbf8:	08024374 	.word	0x08024374
 801dbfc:	0802443c 	.word	0x0802443c
 801dc00:	080243bc 	.word	0x080243bc

0801dc04 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b08c      	sub	sp, #48	@ 0x30
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	60f8      	str	r0, [r7, #12]
 801dc0c:	60b9      	str	r1, [r7, #8]
 801dc0e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801dc10:	2300      	movs	r3, #0
 801dc12:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801dc14:	2301      	movs	r3, #1
 801dc16:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801dc18:	68bb      	ldr	r3, [r7, #8]
 801dc1a:	685b      	ldr	r3, [r3, #4]
 801dc1c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801dc1e:	69fb      	ldr	r3, [r7, #28]
 801dc20:	885b      	ldrh	r3, [r3, #2]
 801dc22:	b29b      	uxth	r3, r3
 801dc24:	4618      	mov	r0, r3
 801dc26:	f7f5 faf1 	bl	801320c <lwip_htons>
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801dc2e:	69fb      	ldr	r3, [r7, #28]
 801dc30:	781b      	ldrb	r3, [r3, #0]
 801dc32:	f003 030f 	and.w	r3, r3, #15
 801dc36:	b2db      	uxtb	r3, r3
 801dc38:	009b      	lsls	r3, r3, #2
 801dc3a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801dc3c:	7e7b      	ldrb	r3, [r7, #25]
 801dc3e:	b29b      	uxth	r3, r3
 801dc40:	8b7a      	ldrh	r2, [r7, #26]
 801dc42:	429a      	cmp	r2, r3
 801dc44:	d202      	bcs.n	801dc4c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dc46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dc4a:	e135      	b.n	801deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801dc4c:	7e7b      	ldrb	r3, [r7, #25]
 801dc4e:	b29b      	uxth	r3, r3
 801dc50:	8b7a      	ldrh	r2, [r7, #26]
 801dc52:	1ad3      	subs	r3, r2, r3
 801dc54:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801dc56:	69fb      	ldr	r3, [r7, #28]
 801dc58:	88db      	ldrh	r3, [r3, #6]
 801dc5a:	b29b      	uxth	r3, r3
 801dc5c:	4618      	mov	r0, r3
 801dc5e:	f7f5 fad5 	bl	801320c <lwip_htons>
 801dc62:	4603      	mov	r3, r0
 801dc64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc68:	b29b      	uxth	r3, r3
 801dc6a:	00db      	lsls	r3, r3, #3
 801dc6c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801dc6e:	68bb      	ldr	r3, [r7, #8]
 801dc70:	685b      	ldr	r3, [r3, #4]
 801dc72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801dc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc76:	2200      	movs	r2, #0
 801dc78:	701a      	strb	r2, [r3, #0]
 801dc7a:	2200      	movs	r2, #0
 801dc7c:	705a      	strb	r2, [r3, #1]
 801dc7e:	2200      	movs	r2, #0
 801dc80:	709a      	strb	r2, [r3, #2]
 801dc82:	2200      	movs	r2, #0
 801dc84:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801dc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc88:	8afa      	ldrh	r2, [r7, #22]
 801dc8a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801dc8c:	8afa      	ldrh	r2, [r7, #22]
 801dc8e:	8b7b      	ldrh	r3, [r7, #26]
 801dc90:	4413      	add	r3, r2
 801dc92:	b29a      	uxth	r2, r3
 801dc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc96:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801dc98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dc9a:	88db      	ldrh	r3, [r3, #6]
 801dc9c:	b29b      	uxth	r3, r3
 801dc9e:	8afa      	ldrh	r2, [r7, #22]
 801dca0:	429a      	cmp	r2, r3
 801dca2:	d902      	bls.n	801dcaa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dca8:	e106      	b.n	801deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	685b      	ldr	r3, [r3, #4]
 801dcae:	627b      	str	r3, [r7, #36]	@ 0x24
 801dcb0:	e068      	b.n	801dd84 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801dcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcb4:	685b      	ldr	r3, [r3, #4]
 801dcb6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801dcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcba:	889b      	ldrh	r3, [r3, #4]
 801dcbc:	b29a      	uxth	r2, r3
 801dcbe:	693b      	ldr	r3, [r7, #16]
 801dcc0:	889b      	ldrh	r3, [r3, #4]
 801dcc2:	b29b      	uxth	r3, r3
 801dcc4:	429a      	cmp	r2, r3
 801dcc6:	d235      	bcs.n	801dd34 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801dcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dccc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801dcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d020      	beq.n	801dd16 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801dcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcd6:	889b      	ldrh	r3, [r3, #4]
 801dcd8:	b29a      	uxth	r2, r3
 801dcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcdc:	88db      	ldrh	r3, [r3, #6]
 801dcde:	b29b      	uxth	r3, r3
 801dce0:	429a      	cmp	r2, r3
 801dce2:	d307      	bcc.n	801dcf4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801dce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dce6:	88db      	ldrh	r3, [r3, #6]
 801dce8:	b29a      	uxth	r2, r3
 801dcea:	693b      	ldr	r3, [r7, #16]
 801dcec:	889b      	ldrh	r3, [r3, #4]
 801dcee:	b29b      	uxth	r3, r3
 801dcf0:	429a      	cmp	r2, r3
 801dcf2:	d902      	bls.n	801dcfa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dcf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dcf8:	e0de      	b.n	801deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801dcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcfc:	68ba      	ldr	r2, [r7, #8]
 801dcfe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801dd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd02:	88db      	ldrh	r3, [r3, #6]
 801dd04:	b29a      	uxth	r2, r3
 801dd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd08:	889b      	ldrh	r3, [r3, #4]
 801dd0a:	b29b      	uxth	r3, r3
 801dd0c:	429a      	cmp	r2, r3
 801dd0e:	d03d      	beq.n	801dd8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801dd10:	2300      	movs	r3, #0
 801dd12:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801dd14:	e03a      	b.n	801dd8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801dd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd18:	88db      	ldrh	r3, [r3, #6]
 801dd1a:	b29a      	uxth	r2, r3
 801dd1c:	693b      	ldr	r3, [r7, #16]
 801dd1e:	889b      	ldrh	r3, [r3, #4]
 801dd20:	b29b      	uxth	r3, r3
 801dd22:	429a      	cmp	r2, r3
 801dd24:	d902      	bls.n	801dd2c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dd26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dd2a:	e0c5      	b.n	801deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801dd2c:	68fb      	ldr	r3, [r7, #12]
 801dd2e:	68ba      	ldr	r2, [r7, #8]
 801dd30:	605a      	str	r2, [r3, #4]
      break;
 801dd32:	e02b      	b.n	801dd8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801dd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd36:	889b      	ldrh	r3, [r3, #4]
 801dd38:	b29a      	uxth	r2, r3
 801dd3a:	693b      	ldr	r3, [r7, #16]
 801dd3c:	889b      	ldrh	r3, [r3, #4]
 801dd3e:	b29b      	uxth	r3, r3
 801dd40:	429a      	cmp	r2, r3
 801dd42:	d102      	bne.n	801dd4a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dd44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dd48:	e0b6      	b.n	801deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801dd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd4c:	889b      	ldrh	r3, [r3, #4]
 801dd4e:	b29a      	uxth	r2, r3
 801dd50:	693b      	ldr	r3, [r7, #16]
 801dd52:	88db      	ldrh	r3, [r3, #6]
 801dd54:	b29b      	uxth	r3, r3
 801dd56:	429a      	cmp	r2, r3
 801dd58:	d202      	bcs.n	801dd60 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dd5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dd5e:	e0ab      	b.n	801deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801dd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d009      	beq.n	801dd7a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801dd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd68:	88db      	ldrh	r3, [r3, #6]
 801dd6a:	b29a      	uxth	r2, r3
 801dd6c:	693b      	ldr	r3, [r7, #16]
 801dd6e:	889b      	ldrh	r3, [r3, #4]
 801dd70:	b29b      	uxth	r3, r3
 801dd72:	429a      	cmp	r2, r3
 801dd74:	d001      	beq.n	801dd7a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801dd76:	2300      	movs	r3, #0
 801dd78:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801dd7a:	693b      	ldr	r3, [r7, #16]
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801dd80:	693b      	ldr	r3, [r7, #16]
 801dd82:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801dd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d193      	bne.n	801dcb2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801dd8a:	e000      	b.n	801dd8e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801dd8c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801dd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d12d      	bne.n	801ddf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801dd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	d01c      	beq.n	801ddd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801dd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd9c:	88db      	ldrh	r3, [r3, #6]
 801dd9e:	b29a      	uxth	r2, r3
 801dda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dda2:	889b      	ldrh	r3, [r3, #4]
 801dda4:	b29b      	uxth	r3, r3
 801dda6:	429a      	cmp	r2, r3
 801dda8:	d906      	bls.n	801ddb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801ddaa:	4b45      	ldr	r3, [pc, #276]	@ (801dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ddac:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801ddb0:	4944      	ldr	r1, [pc, #272]	@ (801dec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ddb2:	4845      	ldr	r0, [pc, #276]	@ (801dec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ddb4:	f002 f946 	bl	8020044 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ddb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddba:	68ba      	ldr	r2, [r7, #8]
 801ddbc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ddbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddc0:	88db      	ldrh	r3, [r3, #6]
 801ddc2:	b29a      	uxth	r2, r3
 801ddc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ddc6:	889b      	ldrh	r3, [r3, #4]
 801ddc8:	b29b      	uxth	r3, r3
 801ddca:	429a      	cmp	r2, r3
 801ddcc:	d010      	beq.n	801ddf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801ddce:	2300      	movs	r3, #0
 801ddd0:	623b      	str	r3, [r7, #32]
 801ddd2:	e00d      	b.n	801ddf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ddd4:	68fb      	ldr	r3, [r7, #12]
 801ddd6:	685b      	ldr	r3, [r3, #4]
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d006      	beq.n	801ddea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801dddc:	4b38      	ldr	r3, [pc, #224]	@ (801dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ddde:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801dde2:	493a      	ldr	r1, [pc, #232]	@ (801decc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801dde4:	4838      	ldr	r0, [pc, #224]	@ (801dec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dde6:	f002 f92d 	bl	8020044 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ddea:	68fb      	ldr	r3, [r7, #12]
 801ddec:	68ba      	ldr	r2, [r7, #8]
 801ddee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d105      	bne.n	801de02 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ddf6:	68fb      	ldr	r3, [r7, #12]
 801ddf8:	7f9b      	ldrb	r3, [r3, #30]
 801ddfa:	f003 0301 	and.w	r3, r3, #1
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	d059      	beq.n	801deb6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801de02:	6a3b      	ldr	r3, [r7, #32]
 801de04:	2b00      	cmp	r3, #0
 801de06:	d04f      	beq.n	801dea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	685b      	ldr	r3, [r3, #4]
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d006      	beq.n	801de1e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	685b      	ldr	r3, [r3, #4]
 801de14:	685b      	ldr	r3, [r3, #4]
 801de16:	889b      	ldrh	r3, [r3, #4]
 801de18:	b29b      	uxth	r3, r3
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d002      	beq.n	801de24 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801de1e:	2300      	movs	r3, #0
 801de20:	623b      	str	r3, [r7, #32]
 801de22:	e041      	b.n	801dea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801de24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de26:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801de28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801de2e:	e012      	b.n	801de56 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801de30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de32:	685b      	ldr	r3, [r3, #4]
 801de34:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801de36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de38:	88db      	ldrh	r3, [r3, #6]
 801de3a:	b29a      	uxth	r2, r3
 801de3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de3e:	889b      	ldrh	r3, [r3, #4]
 801de40:	b29b      	uxth	r3, r3
 801de42:	429a      	cmp	r2, r3
 801de44:	d002      	beq.n	801de4c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801de46:	2300      	movs	r3, #0
 801de48:	623b      	str	r3, [r7, #32]
            break;
 801de4a:	e007      	b.n	801de5c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801de4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de4e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801de50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801de56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d1e9      	bne.n	801de30 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801de5c:	6a3b      	ldr	r3, [r7, #32]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d022      	beq.n	801dea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	685b      	ldr	r3, [r3, #4]
 801de66:	2b00      	cmp	r3, #0
 801de68:	d106      	bne.n	801de78 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801de6a:	4b15      	ldr	r3, [pc, #84]	@ (801dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801de6c:	f240 12df 	movw	r2, #479	@ 0x1df
 801de70:	4917      	ldr	r1, [pc, #92]	@ (801ded0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801de72:	4815      	ldr	r0, [pc, #84]	@ (801dec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801de74:	f002 f8e6 	bl	8020044 <iprintf>
          LWIP_ASSERT("sanity check",
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	685b      	ldr	r3, [r3, #4]
 801de7c:	685b      	ldr	r3, [r3, #4]
 801de7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801de80:	429a      	cmp	r2, r3
 801de82:	d106      	bne.n	801de92 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801de84:	4b0e      	ldr	r3, [pc, #56]	@ (801dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801de86:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801de8a:	4911      	ldr	r1, [pc, #68]	@ (801ded0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801de8c:	480e      	ldr	r0, [pc, #56]	@ (801dec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801de8e:	f002 f8d9 	bl	8020044 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801de92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	2b00      	cmp	r3, #0
 801de98:	d006      	beq.n	801dea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801de9a:	4b09      	ldr	r3, [pc, #36]	@ (801dec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801de9c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801dea0:	490c      	ldr	r1, [pc, #48]	@ (801ded4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801dea2:	4809      	ldr	r0, [pc, #36]	@ (801dec8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dea4:	f002 f8ce 	bl	8020044 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801dea8:	6a3b      	ldr	r3, [r7, #32]
 801deaa:	2b00      	cmp	r3, #0
 801deac:	bf14      	ite	ne
 801deae:	2301      	movne	r3, #1
 801deb0:	2300      	moveq	r3, #0
 801deb2:	b2db      	uxtb	r3, r3
 801deb4:	e000      	b.n	801deb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801deb6:	2300      	movs	r3, #0
}
 801deb8:	4618      	mov	r0, r3
 801deba:	3730      	adds	r7, #48	@ 0x30
 801debc:	46bd      	mov	sp, r7
 801debe:	bd80      	pop	{r7, pc}
 801dec0:	08024374 	.word	0x08024374
 801dec4:	08024458 	.word	0x08024458
 801dec8:	080243bc 	.word	0x080243bc
 801decc:	08024478 	.word	0x08024478
 801ded0:	080244b0 	.word	0x080244b0
 801ded4:	080244c0 	.word	0x080244c0

0801ded8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ded8:	b580      	push	{r7, lr}
 801deda:	b08e      	sub	sp, #56	@ 0x38
 801dedc:	af00      	add	r7, sp, #0
 801dede:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801dee0:	4b9d      	ldr	r3, [pc, #628]	@ (801e158 <ip4_reass+0x280>)
 801dee2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801dee4:	3301      	adds	r3, #1
 801dee6:	b29a      	uxth	r2, r3
 801dee8:	4b9b      	ldr	r3, [pc, #620]	@ (801e158 <ip4_reass+0x280>)
 801deea:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	685b      	ldr	r3, [r3, #4]
 801def0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801def2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801def4:	781b      	ldrb	r3, [r3, #0]
 801def6:	f003 030f 	and.w	r3, r3, #15
 801defa:	b2db      	uxtb	r3, r3
 801defc:	009b      	lsls	r3, r3, #2
 801defe:	b2db      	uxtb	r3, r3
 801df00:	2b14      	cmp	r3, #20
 801df02:	d008      	beq.n	801df16 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801df04:	4b94      	ldr	r3, [pc, #592]	@ (801e158 <ip4_reass+0x280>)
 801df06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801df0a:	3301      	adds	r3, #1
 801df0c:	b29a      	uxth	r2, r3
 801df0e:	4b92      	ldr	r3, [pc, #584]	@ (801e158 <ip4_reass+0x280>)
 801df10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801df14:	e17c      	b.n	801e210 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801df16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df18:	88db      	ldrh	r3, [r3, #6]
 801df1a:	b29b      	uxth	r3, r3
 801df1c:	4618      	mov	r0, r3
 801df1e:	f7f5 f975 	bl	801320c <lwip_htons>
 801df22:	4603      	mov	r3, r0
 801df24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801df28:	b29b      	uxth	r3, r3
 801df2a:	00db      	lsls	r3, r3, #3
 801df2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801df2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df30:	885b      	ldrh	r3, [r3, #2]
 801df32:	b29b      	uxth	r3, r3
 801df34:	4618      	mov	r0, r3
 801df36:	f7f5 f969 	bl	801320c <lwip_htons>
 801df3a:	4603      	mov	r3, r0
 801df3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801df3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df40:	781b      	ldrb	r3, [r3, #0]
 801df42:	f003 030f 	and.w	r3, r3, #15
 801df46:	b2db      	uxtb	r3, r3
 801df48:	009b      	lsls	r3, r3, #2
 801df4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801df4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801df52:	b29b      	uxth	r3, r3
 801df54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801df56:	429a      	cmp	r2, r3
 801df58:	f0c0 8157 	bcc.w	801e20a <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801df5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801df60:	b29b      	uxth	r3, r3
 801df62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801df64:	1ad3      	subs	r3, r2, r3
 801df66:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801df68:	6878      	ldr	r0, [r7, #4]
 801df6a:	f7f6 fe9b 	bl	8014ca4 <pbuf_clen>
 801df6e:	4603      	mov	r3, r0
 801df70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801df72:	4b7a      	ldr	r3, [pc, #488]	@ (801e15c <ip4_reass+0x284>)
 801df74:	881b      	ldrh	r3, [r3, #0]
 801df76:	461a      	mov	r2, r3
 801df78:	8c3b      	ldrh	r3, [r7, #32]
 801df7a:	4413      	add	r3, r2
 801df7c:	2b0a      	cmp	r3, #10
 801df7e:	dd15      	ble.n	801dfac <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801df80:	8c3b      	ldrh	r3, [r7, #32]
 801df82:	4619      	mov	r1, r3
 801df84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801df86:	f7ff fd6b 	bl	801da60 <ip_reass_remove_oldest_datagram>
 801df8a:	4603      	mov	r3, r0
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d006      	beq.n	801df9e <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801df90:	4b72      	ldr	r3, [pc, #456]	@ (801e15c <ip4_reass+0x284>)
 801df92:	881b      	ldrh	r3, [r3, #0]
 801df94:	461a      	mov	r2, r3
 801df96:	8c3b      	ldrh	r3, [r7, #32]
 801df98:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801df9a:	2b0a      	cmp	r3, #10
 801df9c:	dd06      	ble.n	801dfac <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801df9e:	4b6e      	ldr	r3, [pc, #440]	@ (801e158 <ip4_reass+0x280>)
 801dfa0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801dfa2:	3301      	adds	r3, #1
 801dfa4:	b29a      	uxth	r2, r3
 801dfa6:	4b6c      	ldr	r3, [pc, #432]	@ (801e158 <ip4_reass+0x280>)
 801dfa8:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801dfaa:	e131      	b.n	801e210 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801dfac:	4b6c      	ldr	r3, [pc, #432]	@ (801e160 <ip4_reass+0x288>)
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	633b      	str	r3, [r7, #48]	@ 0x30
 801dfb2:	e01e      	b.n	801dff2 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801dfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfb6:	695a      	ldr	r2, [r3, #20]
 801dfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dfba:	68db      	ldr	r3, [r3, #12]
 801dfbc:	429a      	cmp	r2, r3
 801dfbe:	d115      	bne.n	801dfec <ip4_reass+0x114>
 801dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfc2:	699a      	ldr	r2, [r3, #24]
 801dfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dfc6:	691b      	ldr	r3, [r3, #16]
 801dfc8:	429a      	cmp	r2, r3
 801dfca:	d10f      	bne.n	801dfec <ip4_reass+0x114>
 801dfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfce:	899a      	ldrh	r2, [r3, #12]
 801dfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dfd2:	889b      	ldrh	r3, [r3, #4]
 801dfd4:	b29b      	uxth	r3, r3
 801dfd6:	429a      	cmp	r2, r3
 801dfd8:	d108      	bne.n	801dfec <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801dfda:	4b5f      	ldr	r3, [pc, #380]	@ (801e158 <ip4_reass+0x280>)
 801dfdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801dfe0:	3301      	adds	r3, #1
 801dfe2:	b29a      	uxth	r2, r3
 801dfe4:	4b5c      	ldr	r3, [pc, #368]	@ (801e158 <ip4_reass+0x280>)
 801dfe6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801dfea:	e005      	b.n	801dff8 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801dfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dfee:	681b      	ldr	r3, [r3, #0]
 801dff0:	633b      	str	r3, [r7, #48]	@ 0x30
 801dff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d1dd      	bne.n	801dfb4 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801dff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	d109      	bne.n	801e012 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801dffe:	8c3b      	ldrh	r3, [r7, #32]
 801e000:	4619      	mov	r1, r3
 801e002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e004:	f7ff fd8e 	bl	801db24 <ip_reass_enqueue_new_datagram>
 801e008:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d11c      	bne.n	801e04a <ip4_reass+0x172>
      goto nullreturn;
 801e010:	e0fe      	b.n	801e210 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e014:	88db      	ldrh	r3, [r3, #6]
 801e016:	b29b      	uxth	r3, r3
 801e018:	4618      	mov	r0, r3
 801e01a:	f7f5 f8f7 	bl	801320c <lwip_htons>
 801e01e:	4603      	mov	r3, r0
 801e020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e024:	2b00      	cmp	r3, #0
 801e026:	d110      	bne.n	801e04a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e02a:	89db      	ldrh	r3, [r3, #14]
 801e02c:	4618      	mov	r0, r3
 801e02e:	f7f5 f8ed 	bl	801320c <lwip_htons>
 801e032:	4603      	mov	r3, r0
 801e034:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d006      	beq.n	801e04a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e03e:	3308      	adds	r3, #8
 801e040:	2214      	movs	r2, #20
 801e042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e044:	4618      	mov	r0, r3
 801e046:	f002 fa28 	bl	802049a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e04c:	88db      	ldrh	r3, [r3, #6]
 801e04e:	b29b      	uxth	r3, r3
 801e050:	f003 0320 	and.w	r3, r3, #32
 801e054:	2b00      	cmp	r3, #0
 801e056:	bf0c      	ite	eq
 801e058:	2301      	moveq	r3, #1
 801e05a:	2300      	movne	r3, #0
 801e05c:	b2db      	uxtb	r3, r3
 801e05e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e060:	69fb      	ldr	r3, [r7, #28]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d00e      	beq.n	801e084 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801e066:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e068:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e06a:	4413      	add	r3, r2
 801e06c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e06e:	8b7a      	ldrh	r2, [r7, #26]
 801e070:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801e072:	429a      	cmp	r2, r3
 801e074:	f0c0 80a7 	bcc.w	801e1c6 <ip4_reass+0x2ee>
 801e078:	8b7b      	ldrh	r3, [r7, #26]
 801e07a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801e07e:	4293      	cmp	r3, r2
 801e080:	f200 80a1 	bhi.w	801e1c6 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e084:	69fa      	ldr	r2, [r7, #28]
 801e086:	6879      	ldr	r1, [r7, #4]
 801e088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e08a:	f7ff fdbb 	bl	801dc04 <ip_reass_chain_frag_into_datagram_and_validate>
 801e08e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e090:	697b      	ldr	r3, [r7, #20]
 801e092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e096:	f000 8098 	beq.w	801e1ca <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e09a:	4b30      	ldr	r3, [pc, #192]	@ (801e15c <ip4_reass+0x284>)
 801e09c:	881a      	ldrh	r2, [r3, #0]
 801e09e:	8c3b      	ldrh	r3, [r7, #32]
 801e0a0:	4413      	add	r3, r2
 801e0a2:	b29a      	uxth	r2, r3
 801e0a4:	4b2d      	ldr	r3, [pc, #180]	@ (801e15c <ip4_reass+0x284>)
 801e0a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e0a8:	69fb      	ldr	r3, [r7, #28]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d00d      	beq.n	801e0ca <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801e0ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e0b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e0b2:	4413      	add	r3, r2
 801e0b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0b8:	8a7a      	ldrh	r2, [r7, #18]
 801e0ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0be:	7f9b      	ldrb	r3, [r3, #30]
 801e0c0:	f043 0301 	orr.w	r3, r3, #1
 801e0c4:	b2da      	uxtb	r2, r3
 801e0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e0ca:	697b      	ldr	r3, [r7, #20]
 801e0cc:	2b01      	cmp	r3, #1
 801e0ce:	d178      	bne.n	801e1c2 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0d2:	8b9b      	ldrh	r3, [r3, #28]
 801e0d4:	3314      	adds	r3, #20
 801e0d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0da:	685b      	ldr	r3, [r3, #4]
 801e0dc:	685b      	ldr	r3, [r3, #4]
 801e0de:	681b      	ldr	r3, [r3, #0]
 801e0e0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0e4:	685b      	ldr	r3, [r3, #4]
 801e0e6:	685b      	ldr	r3, [r3, #4]
 801e0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0ec:	3308      	adds	r3, #8
 801e0ee:	2214      	movs	r2, #20
 801e0f0:	4619      	mov	r1, r3
 801e0f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e0f4:	f002 f9d1 	bl	802049a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e0f8:	8a3b      	ldrh	r3, [r7, #16]
 801e0fa:	4618      	mov	r0, r3
 801e0fc:	f7f5 f886 	bl	801320c <lwip_htons>
 801e100:	4603      	mov	r3, r0
 801e102:	461a      	mov	r2, r3
 801e104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e106:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e10a:	2200      	movs	r2, #0
 801e10c:	719a      	strb	r2, [r3, #6]
 801e10e:	2200      	movs	r2, #0
 801e110:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e114:	2200      	movs	r2, #0
 801e116:	729a      	strb	r2, [r3, #10]
 801e118:	2200      	movs	r2, #0
 801e11a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e11e:	685b      	ldr	r3, [r3, #4]
 801e120:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e122:	e00d      	b.n	801e140 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801e124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e126:	685b      	ldr	r3, [r3, #4]
 801e128:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e12a:	2114      	movs	r1, #20
 801e12c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e12e:	f7f6 fca5 	bl	8014a7c <pbuf_remove_header>
      pbuf_cat(p, r);
 801e132:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e134:	6878      	ldr	r0, [r7, #4]
 801e136:	f7f6 fdf5 	bl	8014d24 <pbuf_cat>
      r = iprh->next_pbuf;
 801e13a:	68fb      	ldr	r3, [r7, #12]
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801e140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e142:	2b00      	cmp	r3, #0
 801e144:	d1ee      	bne.n	801e124 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e146:	4b06      	ldr	r3, [pc, #24]	@ (801e160 <ip4_reass+0x288>)
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e14c:	429a      	cmp	r2, r3
 801e14e:	d109      	bne.n	801e164 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801e150:	2300      	movs	r3, #0
 801e152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e154:	e017      	b.n	801e186 <ip4_reass+0x2ae>
 801e156:	bf00      	nop
 801e158:	2002d2b0 	.word	0x2002d2b0
 801e15c:	2002d504 	.word	0x2002d504
 801e160:	2002d500 	.word	0x2002d500
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e164:	4b31      	ldr	r3, [pc, #196]	@ (801e22c <ip4_reass+0x354>)
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e16a:	e007      	b.n	801e17c <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801e16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e172:	429a      	cmp	r2, r3
 801e174:	d006      	beq.n	801e184 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d1f4      	bne.n	801e16c <ip4_reass+0x294>
 801e182:	e000      	b.n	801e186 <ip4_reass+0x2ae>
          break;
 801e184:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e18a:	f7ff fd0d 	bl	801dba8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e18e:	6878      	ldr	r0, [r7, #4]
 801e190:	f7f6 fd88 	bl	8014ca4 <pbuf_clen>
 801e194:	4603      	mov	r3, r0
 801e196:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e198:	4b25      	ldr	r3, [pc, #148]	@ (801e230 <ip4_reass+0x358>)
 801e19a:	881b      	ldrh	r3, [r3, #0]
 801e19c:	8c3a      	ldrh	r2, [r7, #32]
 801e19e:	429a      	cmp	r2, r3
 801e1a0:	d906      	bls.n	801e1b0 <ip4_reass+0x2d8>
 801e1a2:	4b24      	ldr	r3, [pc, #144]	@ (801e234 <ip4_reass+0x35c>)
 801e1a4:	f240 229b 	movw	r2, #667	@ 0x29b
 801e1a8:	4923      	ldr	r1, [pc, #140]	@ (801e238 <ip4_reass+0x360>)
 801e1aa:	4824      	ldr	r0, [pc, #144]	@ (801e23c <ip4_reass+0x364>)
 801e1ac:	f001 ff4a 	bl	8020044 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e1b0:	4b1f      	ldr	r3, [pc, #124]	@ (801e230 <ip4_reass+0x358>)
 801e1b2:	881a      	ldrh	r2, [r3, #0]
 801e1b4:	8c3b      	ldrh	r3, [r7, #32]
 801e1b6:	1ad3      	subs	r3, r2, r3
 801e1b8:	b29a      	uxth	r2, r3
 801e1ba:	4b1d      	ldr	r3, [pc, #116]	@ (801e230 <ip4_reass+0x358>)
 801e1bc:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	e030      	b.n	801e224 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	e02e      	b.n	801e224 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801e1c6:	bf00      	nop
 801e1c8:	e000      	b.n	801e1cc <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801e1ca:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d106      	bne.n	801e1e0 <ip4_reass+0x308>
 801e1d2:	4b18      	ldr	r3, [pc, #96]	@ (801e234 <ip4_reass+0x35c>)
 801e1d4:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801e1d8:	4919      	ldr	r1, [pc, #100]	@ (801e240 <ip4_reass+0x368>)
 801e1da:	4818      	ldr	r0, [pc, #96]	@ (801e23c <ip4_reass+0x364>)
 801e1dc:	f001 ff32 	bl	8020044 <iprintf>
  if (ipr->p == NULL) {
 801e1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1e2:	685b      	ldr	r3, [r3, #4]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d112      	bne.n	801e20e <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e1e8:	4b10      	ldr	r3, [pc, #64]	@ (801e22c <ip4_reass+0x354>)
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e1ee:	429a      	cmp	r2, r3
 801e1f0:	d006      	beq.n	801e200 <ip4_reass+0x328>
 801e1f2:	4b10      	ldr	r3, [pc, #64]	@ (801e234 <ip4_reass+0x35c>)
 801e1f4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801e1f8:	4912      	ldr	r1, [pc, #72]	@ (801e244 <ip4_reass+0x36c>)
 801e1fa:	4810      	ldr	r0, [pc, #64]	@ (801e23c <ip4_reass+0x364>)
 801e1fc:	f001 ff22 	bl	8020044 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e200:	2100      	movs	r1, #0
 801e202:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e204:	f7ff fcd0 	bl	801dba8 <ip_reass_dequeue_datagram>
 801e208:	e002      	b.n	801e210 <ip4_reass+0x338>
    goto nullreturn;
 801e20a:	bf00      	nop
 801e20c:	e000      	b.n	801e210 <ip4_reass+0x338>
  }

nullreturn:
 801e20e:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801e210:	4b0d      	ldr	r3, [pc, #52]	@ (801e248 <ip4_reass+0x370>)
 801e212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801e214:	3301      	adds	r3, #1
 801e216:	b29a      	uxth	r2, r3
 801e218:	4b0b      	ldr	r3, [pc, #44]	@ (801e248 <ip4_reass+0x370>)
 801e21a:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801e21c:	6878      	ldr	r0, [r7, #4]
 801e21e:	f7f6 fcb3 	bl	8014b88 <pbuf_free>
  return NULL;
 801e222:	2300      	movs	r3, #0
}
 801e224:	4618      	mov	r0, r3
 801e226:	3738      	adds	r7, #56	@ 0x38
 801e228:	46bd      	mov	sp, r7
 801e22a:	bd80      	pop	{r7, pc}
 801e22c:	2002d500 	.word	0x2002d500
 801e230:	2002d504 	.word	0x2002d504
 801e234:	08024374 	.word	0x08024374
 801e238:	080244e4 	.word	0x080244e4
 801e23c:	080243bc 	.word	0x080243bc
 801e240:	08024500 	.word	0x08024500
 801e244:	0802450c 	.word	0x0802450c
 801e248:	2002d2b0 	.word	0x2002d2b0

0801e24c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e24c:	b580      	push	{r7, lr}
 801e24e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e250:	2005      	movs	r0, #5
 801e252:	f7f5 fd79 	bl	8013d48 <memp_malloc>
 801e256:	4603      	mov	r3, r0
}
 801e258:	4618      	mov	r0, r3
 801e25a:	bd80      	pop	{r7, pc}

0801e25c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e25c:	b580      	push	{r7, lr}
 801e25e:	b082      	sub	sp, #8
 801e260:	af00      	add	r7, sp, #0
 801e262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	2b00      	cmp	r3, #0
 801e268:	d106      	bne.n	801e278 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e26a:	4b07      	ldr	r3, [pc, #28]	@ (801e288 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e26c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801e270:	4906      	ldr	r1, [pc, #24]	@ (801e28c <ip_frag_free_pbuf_custom_ref+0x30>)
 801e272:	4807      	ldr	r0, [pc, #28]	@ (801e290 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e274:	f001 fee6 	bl	8020044 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e278:	6879      	ldr	r1, [r7, #4]
 801e27a:	2005      	movs	r0, #5
 801e27c:	f7f5 fde0 	bl	8013e40 <memp_free>
}
 801e280:	bf00      	nop
 801e282:	3708      	adds	r7, #8
 801e284:	46bd      	mov	sp, r7
 801e286:	bd80      	pop	{r7, pc}
 801e288:	08024374 	.word	0x08024374
 801e28c:	0802452c 	.word	0x0802452c
 801e290:	080243bc 	.word	0x080243bc

0801e294 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e294:	b580      	push	{r7, lr}
 801e296:	b084      	sub	sp, #16
 801e298:	af00      	add	r7, sp, #0
 801e29a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e2a0:	68fb      	ldr	r3, [r7, #12]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d106      	bne.n	801e2b4 <ipfrag_free_pbuf_custom+0x20>
 801e2a6:	4b11      	ldr	r3, [pc, #68]	@ (801e2ec <ipfrag_free_pbuf_custom+0x58>)
 801e2a8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801e2ac:	4910      	ldr	r1, [pc, #64]	@ (801e2f0 <ipfrag_free_pbuf_custom+0x5c>)
 801e2ae:	4811      	ldr	r0, [pc, #68]	@ (801e2f4 <ipfrag_free_pbuf_custom+0x60>)
 801e2b0:	f001 fec8 	bl	8020044 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e2b4:	68fa      	ldr	r2, [r7, #12]
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	429a      	cmp	r2, r3
 801e2ba:	d006      	beq.n	801e2ca <ipfrag_free_pbuf_custom+0x36>
 801e2bc:	4b0b      	ldr	r3, [pc, #44]	@ (801e2ec <ipfrag_free_pbuf_custom+0x58>)
 801e2be:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801e2c2:	490d      	ldr	r1, [pc, #52]	@ (801e2f8 <ipfrag_free_pbuf_custom+0x64>)
 801e2c4:	480b      	ldr	r0, [pc, #44]	@ (801e2f4 <ipfrag_free_pbuf_custom+0x60>)
 801e2c6:	f001 febd 	bl	8020044 <iprintf>
  if (pcr->original != NULL) {
 801e2ca:	68fb      	ldr	r3, [r7, #12]
 801e2cc:	695b      	ldr	r3, [r3, #20]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d004      	beq.n	801e2dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	695b      	ldr	r3, [r3, #20]
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	f7f6 fc56 	bl	8014b88 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e2dc:	68f8      	ldr	r0, [r7, #12]
 801e2de:	f7ff ffbd 	bl	801e25c <ip_frag_free_pbuf_custom_ref>
}
 801e2e2:	bf00      	nop
 801e2e4:	3710      	adds	r7, #16
 801e2e6:	46bd      	mov	sp, r7
 801e2e8:	bd80      	pop	{r7, pc}
 801e2ea:	bf00      	nop
 801e2ec:	08024374 	.word	0x08024374
 801e2f0:	08024538 	.word	0x08024538
 801e2f4:	080243bc 	.word	0x080243bc
 801e2f8:	08024544 	.word	0x08024544

0801e2fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e2fc:	b580      	push	{r7, lr}
 801e2fe:	b094      	sub	sp, #80	@ 0x50
 801e300:	af02      	add	r7, sp, #8
 801e302:	60f8      	str	r0, [r7, #12]
 801e304:	60b9      	str	r1, [r7, #8]
 801e306:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e308:	2300      	movs	r3, #0
 801e30a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e30e:	68bb      	ldr	r3, [r7, #8]
 801e310:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e312:	3b14      	subs	r3, #20
 801e314:	2b00      	cmp	r3, #0
 801e316:	da00      	bge.n	801e31a <ip4_frag+0x1e>
 801e318:	3307      	adds	r3, #7
 801e31a:	10db      	asrs	r3, r3, #3
 801e31c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e31e:	2314      	movs	r3, #20
 801e320:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e322:	68fb      	ldr	r3, [r7, #12]
 801e324:	685b      	ldr	r3, [r3, #4]
 801e326:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801e328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e32a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e32e:	781b      	ldrb	r3, [r3, #0]
 801e330:	f003 030f 	and.w	r3, r3, #15
 801e334:	b2db      	uxtb	r3, r3
 801e336:	009b      	lsls	r3, r3, #2
 801e338:	b2db      	uxtb	r3, r3
 801e33a:	2b14      	cmp	r3, #20
 801e33c:	d002      	beq.n	801e344 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e33e:	f06f 0305 	mvn.w	r3, #5
 801e342:	e116      	b.n	801e572 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	895b      	ldrh	r3, [r3, #10]
 801e348:	2b13      	cmp	r3, #19
 801e34a:	d809      	bhi.n	801e360 <ip4_frag+0x64>
 801e34c:	4b8b      	ldr	r3, [pc, #556]	@ (801e57c <ip4_frag+0x280>)
 801e34e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801e352:	498b      	ldr	r1, [pc, #556]	@ (801e580 <ip4_frag+0x284>)
 801e354:	488b      	ldr	r0, [pc, #556]	@ (801e584 <ip4_frag+0x288>)
 801e356:	f001 fe75 	bl	8020044 <iprintf>
 801e35a:	f06f 0305 	mvn.w	r3, #5
 801e35e:	e108      	b.n	801e572 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e362:	88db      	ldrh	r3, [r3, #6]
 801e364:	b29b      	uxth	r3, r3
 801e366:	4618      	mov	r0, r3
 801e368:	f7f4 ff50 	bl	801320c <lwip_htons>
 801e36c:	4603      	mov	r3, r0
 801e36e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801e370:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e376:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e37a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e37c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801e380:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	891b      	ldrh	r3, [r3, #8]
 801e386:	3b14      	subs	r3, #20
 801e388:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801e38c:	e0e7      	b.n	801e55e <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e38e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e390:	00db      	lsls	r3, r3, #3
 801e392:	b29b      	uxth	r3, r3
 801e394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e398:	4293      	cmp	r3, r2
 801e39a:	bf28      	it	cs
 801e39c:	4613      	movcs	r3, r2
 801e39e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e3a0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e3a4:	2114      	movs	r1, #20
 801e3a6:	200e      	movs	r0, #14
 801e3a8:	f7f6 f90a 	bl	80145c0 <pbuf_alloc>
 801e3ac:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801e3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	f000 80db 	beq.w	801e56c <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e3b8:	895b      	ldrh	r3, [r3, #10]
 801e3ba:	2b13      	cmp	r3, #19
 801e3bc:	d806      	bhi.n	801e3cc <ip4_frag+0xd0>
 801e3be:	4b6f      	ldr	r3, [pc, #444]	@ (801e57c <ip4_frag+0x280>)
 801e3c0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801e3c4:	4970      	ldr	r1, [pc, #448]	@ (801e588 <ip4_frag+0x28c>)
 801e3c6:	486f      	ldr	r0, [pc, #444]	@ (801e584 <ip4_frag+0x288>)
 801e3c8:	f001 fe3c 	bl	8020044 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e3ce:	685b      	ldr	r3, [r3, #4]
 801e3d0:	2214      	movs	r2, #20
 801e3d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e3d4:	4618      	mov	r0, r3
 801e3d6:	f002 f860 	bl	802049a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e3dc:	685b      	ldr	r3, [r3, #4]
 801e3de:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801e3e0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e3e2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801e3e6:	e064      	b.n	801e4b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	895a      	ldrh	r2, [r3, #10]
 801e3ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e3ee:	1ad3      	subs	r3, r2, r3
 801e3f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e3f2:	68fb      	ldr	r3, [r7, #12]
 801e3f4:	895b      	ldrh	r3, [r3, #10]
 801e3f6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e3f8:	429a      	cmp	r2, r3
 801e3fa:	d906      	bls.n	801e40a <ip4_frag+0x10e>
 801e3fc:	4b5f      	ldr	r3, [pc, #380]	@ (801e57c <ip4_frag+0x280>)
 801e3fe:	f240 322d 	movw	r2, #813	@ 0x32d
 801e402:	4962      	ldr	r1, [pc, #392]	@ (801e58c <ip4_frag+0x290>)
 801e404:	485f      	ldr	r0, [pc, #380]	@ (801e584 <ip4_frag+0x288>)
 801e406:	f001 fe1d 	bl	8020044 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e40a:	8bfa      	ldrh	r2, [r7, #30]
 801e40c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e410:	4293      	cmp	r3, r2
 801e412:	bf28      	it	cs
 801e414:	4613      	movcs	r3, r2
 801e416:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e41a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d105      	bne.n	801e42e <ip4_frag+0x132>
        poff = 0;
 801e422:	2300      	movs	r3, #0
 801e424:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	60fb      	str	r3, [r7, #12]
        continue;
 801e42c:	e041      	b.n	801e4b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e42e:	f7ff ff0d 	bl	801e24c <ip_frag_alloc_pbuf_custom_ref>
 801e432:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e434:	69bb      	ldr	r3, [r7, #24]
 801e436:	2b00      	cmp	r3, #0
 801e438:	d103      	bne.n	801e442 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e43a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e43c:	f7f6 fba4 	bl	8014b88 <pbuf_free>
        goto memerr;
 801e440:	e095      	b.n	801e56e <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e442:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e448:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e44a:	4413      	add	r3, r2
 801e44c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801e450:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801e454:	9201      	str	r2, [sp, #4]
 801e456:	9300      	str	r3, [sp, #0]
 801e458:	4603      	mov	r3, r0
 801e45a:	2241      	movs	r2, #65	@ 0x41
 801e45c:	2000      	movs	r0, #0
 801e45e:	f7f6 f9d9 	bl	8014814 <pbuf_alloced_custom>
 801e462:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e464:	697b      	ldr	r3, [r7, #20]
 801e466:	2b00      	cmp	r3, #0
 801e468:	d106      	bne.n	801e478 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e46a:	69b8      	ldr	r0, [r7, #24]
 801e46c:	f7ff fef6 	bl	801e25c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e470:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e472:	f7f6 fb89 	bl	8014b88 <pbuf_free>
        goto memerr;
 801e476:	e07a      	b.n	801e56e <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801e478:	68f8      	ldr	r0, [r7, #12]
 801e47a:	f7f6 fc2b 	bl	8014cd4 <pbuf_ref>
      pcr->original = p;
 801e47e:	69bb      	ldr	r3, [r7, #24]
 801e480:	68fa      	ldr	r2, [r7, #12]
 801e482:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e484:	69bb      	ldr	r3, [r7, #24]
 801e486:	4a42      	ldr	r2, [pc, #264]	@ (801e590 <ip4_frag+0x294>)
 801e488:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e48a:	6979      	ldr	r1, [r7, #20]
 801e48c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e48e:	f7f6 fc49 	bl	8014d24 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e492:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801e496:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e49a:	1ad3      	subs	r3, r2, r3
 801e49c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801e4a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d004      	beq.n	801e4b2 <ip4_frag+0x1b6>
        poff = 0;
 801e4a8:	2300      	movs	r3, #0
 801e4aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e4ac:	68fb      	ldr	r3, [r7, #12]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e4b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d196      	bne.n	801e3e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e4ba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e4bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e4c0:	4413      	add	r3, r2
 801e4c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e4c4:	68bb      	ldr	r3, [r7, #8]
 801e4c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e4c8:	f1a3 0213 	sub.w	r2, r3, #19
 801e4cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e4d0:	429a      	cmp	r2, r3
 801e4d2:	bfcc      	ite	gt
 801e4d4:	2301      	movgt	r3, #1
 801e4d6:	2300      	movle	r3, #0
 801e4d8:	b2db      	uxtb	r3, r3
 801e4da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e4dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e4e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e4e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801e4e6:	6a3b      	ldr	r3, [r7, #32]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d002      	beq.n	801e4f2 <ip4_frag+0x1f6>
 801e4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d003      	beq.n	801e4fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e4f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e4f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801e4f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e4fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e4fc:	4618      	mov	r0, r3
 801e4fe:	f7f4 fe85 	bl	801320c <lwip_htons>
 801e502:	4603      	mov	r3, r0
 801e504:	461a      	mov	r2, r3
 801e506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e508:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e50a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e50c:	3314      	adds	r3, #20
 801e50e:	b29b      	uxth	r3, r3
 801e510:	4618      	mov	r0, r3
 801e512:	f7f4 fe7b 	bl	801320c <lwip_htons>
 801e516:	4603      	mov	r3, r0
 801e518:	461a      	mov	r2, r3
 801e51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e51c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e520:	2200      	movs	r2, #0
 801e522:	729a      	strb	r2, [r3, #10]
 801e524:	2200      	movs	r2, #0
 801e526:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e528:	68bb      	ldr	r3, [r7, #8]
 801e52a:	695b      	ldr	r3, [r3, #20]
 801e52c:	687a      	ldr	r2, [r7, #4]
 801e52e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e530:	68b8      	ldr	r0, [r7, #8]
 801e532:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801e534:	4b17      	ldr	r3, [pc, #92]	@ (801e594 <ip4_frag+0x298>)
 801e536:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801e538:	3301      	adds	r3, #1
 801e53a:	b29a      	uxth	r2, r3
 801e53c:	4b15      	ldr	r3, [pc, #84]	@ (801e594 <ip4_frag+0x298>)
 801e53e:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e540:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e542:	f7f6 fb21 	bl	8014b88 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e546:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e54a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e54c:	1ad3      	subs	r3, r2, r3
 801e54e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801e552:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801e556:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e558:	4413      	add	r3, r2
 801e55a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801e55e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e562:	2b00      	cmp	r3, #0
 801e564:	f47f af13 	bne.w	801e38e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e568:	2300      	movs	r3, #0
 801e56a:	e002      	b.n	801e572 <ip4_frag+0x276>
      goto memerr;
 801e56c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e56e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801e572:	4618      	mov	r0, r3
 801e574:	3748      	adds	r7, #72	@ 0x48
 801e576:	46bd      	mov	sp, r7
 801e578:	bd80      	pop	{r7, pc}
 801e57a:	bf00      	nop
 801e57c:	08024374 	.word	0x08024374
 801e580:	08024550 	.word	0x08024550
 801e584:	080243bc 	.word	0x080243bc
 801e588:	0802456c 	.word	0x0802456c
 801e58c:	0802458c 	.word	0x0802458c
 801e590:	0801e295 	.word	0x0801e295
 801e594:	2002d2b0 	.word	0x2002d2b0

0801e598 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e598:	b580      	push	{r7, lr}
 801e59a:	b086      	sub	sp, #24
 801e59c:	af00      	add	r7, sp, #0
 801e59e:	6078      	str	r0, [r7, #4]
 801e5a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e5a2:	230e      	movs	r3, #14
 801e5a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	895b      	ldrh	r3, [r3, #10]
 801e5aa:	2b0e      	cmp	r3, #14
 801e5ac:	d80c      	bhi.n	801e5c8 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801e5ae:	4b51      	ldr	r3, [pc, #324]	@ (801e6f4 <ethernet_input+0x15c>)
 801e5b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e5b2:	3301      	adds	r3, #1
 801e5b4:	b29a      	uxth	r2, r3
 801e5b6:	4b4f      	ldr	r3, [pc, #316]	@ (801e6f4 <ethernet_input+0x15c>)
 801e5b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801e5ba:	4b4e      	ldr	r3, [pc, #312]	@ (801e6f4 <ethernet_input+0x15c>)
 801e5bc:	8bdb      	ldrh	r3, [r3, #30]
 801e5be:	3301      	adds	r3, #1
 801e5c0:	b29a      	uxth	r2, r3
 801e5c2:	4b4c      	ldr	r3, [pc, #304]	@ (801e6f4 <ethernet_input+0x15c>)
 801e5c4:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801e5c6:	e08d      	b.n	801e6e4 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	7bdb      	ldrb	r3, [r3, #15]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d106      	bne.n	801e5de <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801e5d0:	683b      	ldr	r3, [r7, #0]
 801e5d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e5d6:	3301      	adds	r3, #1
 801e5d8:	b2da      	uxtb	r2, r3
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	685b      	ldr	r3, [r3, #4]
 801e5e2:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e5e4:	693b      	ldr	r3, [r7, #16]
 801e5e6:	7b1a      	ldrb	r2, [r3, #12]
 801e5e8:	7b5b      	ldrb	r3, [r3, #13]
 801e5ea:	021b      	lsls	r3, r3, #8
 801e5ec:	4313      	orrs	r3, r2
 801e5ee:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e5f0:	693b      	ldr	r3, [r7, #16]
 801e5f2:	781b      	ldrb	r3, [r3, #0]
 801e5f4:	f003 0301 	and.w	r3, r3, #1
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d023      	beq.n	801e644 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e5fc:	693b      	ldr	r3, [r7, #16]
 801e5fe:	781b      	ldrb	r3, [r3, #0]
 801e600:	2b01      	cmp	r3, #1
 801e602:	d10f      	bne.n	801e624 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e604:	693b      	ldr	r3, [r7, #16]
 801e606:	785b      	ldrb	r3, [r3, #1]
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d11b      	bne.n	801e644 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e60c:	693b      	ldr	r3, [r7, #16]
 801e60e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e610:	2b5e      	cmp	r3, #94	@ 0x5e
 801e612:	d117      	bne.n	801e644 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	7b5b      	ldrb	r3, [r3, #13]
 801e618:	f043 0310 	orr.w	r3, r3, #16
 801e61c:	b2da      	uxtb	r2, r3
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	735a      	strb	r2, [r3, #13]
 801e622:	e00f      	b.n	801e644 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e624:	693b      	ldr	r3, [r7, #16]
 801e626:	2206      	movs	r2, #6
 801e628:	4933      	ldr	r1, [pc, #204]	@ (801e6f8 <ethernet_input+0x160>)
 801e62a:	4618      	mov	r0, r3
 801e62c:	f001 fe52 	bl	80202d4 <memcmp>
 801e630:	4603      	mov	r3, r0
 801e632:	2b00      	cmp	r3, #0
 801e634:	d106      	bne.n	801e644 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	7b5b      	ldrb	r3, [r3, #13]
 801e63a:	f043 0308 	orr.w	r3, r3, #8
 801e63e:	b2da      	uxtb	r2, r3
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e644:	89fb      	ldrh	r3, [r7, #14]
 801e646:	2b08      	cmp	r3, #8
 801e648:	d003      	beq.n	801e652 <ethernet_input+0xba>
 801e64a:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801e64e:	d014      	beq.n	801e67a <ethernet_input+0xe2>
 801e650:	e034      	b.n	801e6bc <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e652:	683b      	ldr	r3, [r7, #0]
 801e654:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e658:	f003 0308 	and.w	r3, r3, #8
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	d03c      	beq.n	801e6da <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e660:	8afb      	ldrh	r3, [r7, #22]
 801e662:	4619      	mov	r1, r3
 801e664:	6878      	ldr	r0, [r7, #4]
 801e666:	f7f6 fa09 	bl	8014a7c <pbuf_remove_header>
 801e66a:	4603      	mov	r3, r0
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d136      	bne.n	801e6de <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801e670:	6839      	ldr	r1, [r7, #0]
 801e672:	6878      	ldr	r0, [r7, #4]
 801e674:	f7fe fe7e 	bl	801d374 <ip4_input>
      }
      break;
 801e678:	e02d      	b.n	801e6d6 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e67a:	683b      	ldr	r3, [r7, #0]
 801e67c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e680:	f003 0308 	and.w	r3, r3, #8
 801e684:	2b00      	cmp	r3, #0
 801e686:	d02c      	beq.n	801e6e2 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e688:	8afb      	ldrh	r3, [r7, #22]
 801e68a:	4619      	mov	r1, r3
 801e68c:	6878      	ldr	r0, [r7, #4]
 801e68e:	f7f6 f9f5 	bl	8014a7c <pbuf_remove_header>
 801e692:	4603      	mov	r3, r0
 801e694:	2b00      	cmp	r3, #0
 801e696:	d00c      	beq.n	801e6b2 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801e698:	4b16      	ldr	r3, [pc, #88]	@ (801e6f4 <ethernet_input+0x15c>)
 801e69a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801e69c:	3301      	adds	r3, #1
 801e69e:	b29a      	uxth	r2, r3
 801e6a0:	4b14      	ldr	r3, [pc, #80]	@ (801e6f4 <ethernet_input+0x15c>)
 801e6a2:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801e6a4:	4b13      	ldr	r3, [pc, #76]	@ (801e6f4 <ethernet_input+0x15c>)
 801e6a6:	8bdb      	ldrh	r3, [r3, #30]
 801e6a8:	3301      	adds	r3, #1
 801e6aa:	b29a      	uxth	r2, r3
 801e6ac:	4b11      	ldr	r3, [pc, #68]	@ (801e6f4 <ethernet_input+0x15c>)
 801e6ae:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801e6b0:	e018      	b.n	801e6e4 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801e6b2:	6839      	ldr	r1, [r7, #0]
 801e6b4:	6878      	ldr	r0, [r7, #4]
 801e6b6:	f7fd ff89 	bl	801c5cc <etharp_input>
      }
      break;
 801e6ba:	e00c      	b.n	801e6d6 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801e6bc:	4b0d      	ldr	r3, [pc, #52]	@ (801e6f4 <ethernet_input+0x15c>)
 801e6be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e6c0:	3301      	adds	r3, #1
 801e6c2:	b29a      	uxth	r2, r3
 801e6c4:	4b0b      	ldr	r3, [pc, #44]	@ (801e6f4 <ethernet_input+0x15c>)
 801e6c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801e6c8:	4b0a      	ldr	r3, [pc, #40]	@ (801e6f4 <ethernet_input+0x15c>)
 801e6ca:	8bdb      	ldrh	r3, [r3, #30]
 801e6cc:	3301      	adds	r3, #1
 801e6ce:	b29a      	uxth	r2, r3
 801e6d0:	4b08      	ldr	r3, [pc, #32]	@ (801e6f4 <ethernet_input+0x15c>)
 801e6d2:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e6d4:	e006      	b.n	801e6e4 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e6d6:	2300      	movs	r3, #0
 801e6d8:	e008      	b.n	801e6ec <ethernet_input+0x154>
        goto free_and_return;
 801e6da:	bf00      	nop
 801e6dc:	e002      	b.n	801e6e4 <ethernet_input+0x14c>
        goto free_and_return;
 801e6de:	bf00      	nop
 801e6e0:	e000      	b.n	801e6e4 <ethernet_input+0x14c>
        goto free_and_return;
 801e6e2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e6e4:	6878      	ldr	r0, [r7, #4]
 801e6e6:	f7f6 fa4f 	bl	8014b88 <pbuf_free>
  return ERR_OK;
 801e6ea:	2300      	movs	r3, #0
}
 801e6ec:	4618      	mov	r0, r3
 801e6ee:	3718      	adds	r7, #24
 801e6f0:	46bd      	mov	sp, r7
 801e6f2:	bd80      	pop	{r7, pc}
 801e6f4:	2002d2b0 	.word	0x2002d2b0
 801e6f8:	08024dbc 	.word	0x08024dbc

0801e6fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e6fc:	b580      	push	{r7, lr}
 801e6fe:	b086      	sub	sp, #24
 801e700:	af00      	add	r7, sp, #0
 801e702:	60f8      	str	r0, [r7, #12]
 801e704:	60b9      	str	r1, [r7, #8]
 801e706:	607a      	str	r2, [r7, #4]
 801e708:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e70a:	8c3b      	ldrh	r3, [r7, #32]
 801e70c:	4618      	mov	r0, r3
 801e70e:	f7f4 fd7d 	bl	801320c <lwip_htons>
 801e712:	4603      	mov	r3, r0
 801e714:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e716:	210e      	movs	r1, #14
 801e718:	68b8      	ldr	r0, [r7, #8]
 801e71a:	f7f6 f99f 	bl	8014a5c <pbuf_add_header>
 801e71e:	4603      	mov	r3, r0
 801e720:	2b00      	cmp	r3, #0
 801e722:	d125      	bne.n	801e770 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e724:	68bb      	ldr	r3, [r7, #8]
 801e726:	685b      	ldr	r3, [r3, #4]
 801e728:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e72a:	693b      	ldr	r3, [r7, #16]
 801e72c:	8afa      	ldrh	r2, [r7, #22]
 801e72e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e730:	693b      	ldr	r3, [r7, #16]
 801e732:	2206      	movs	r2, #6
 801e734:	6839      	ldr	r1, [r7, #0]
 801e736:	4618      	mov	r0, r3
 801e738:	f001 feaf 	bl	802049a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e73c:	693b      	ldr	r3, [r7, #16]
 801e73e:	3306      	adds	r3, #6
 801e740:	2206      	movs	r2, #6
 801e742:	6879      	ldr	r1, [r7, #4]
 801e744:	4618      	mov	r0, r3
 801e746:	f001 fea8 	bl	802049a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e750:	2b06      	cmp	r3, #6
 801e752:	d006      	beq.n	801e762 <ethernet_output+0x66>
 801e754:	4b0d      	ldr	r3, [pc, #52]	@ (801e78c <ethernet_output+0x90>)
 801e756:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801e75a:	490d      	ldr	r1, [pc, #52]	@ (801e790 <ethernet_output+0x94>)
 801e75c:	480d      	ldr	r0, [pc, #52]	@ (801e794 <ethernet_output+0x98>)
 801e75e:	f001 fc71 	bl	8020044 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	699b      	ldr	r3, [r3, #24]
 801e766:	68b9      	ldr	r1, [r7, #8]
 801e768:	68f8      	ldr	r0, [r7, #12]
 801e76a:	4798      	blx	r3
 801e76c:	4603      	mov	r3, r0
 801e76e:	e008      	b.n	801e782 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801e770:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801e772:	4b09      	ldr	r3, [pc, #36]	@ (801e798 <ethernet_output+0x9c>)
 801e774:	895b      	ldrh	r3, [r3, #10]
 801e776:	3301      	adds	r3, #1
 801e778:	b29a      	uxth	r2, r3
 801e77a:	4b07      	ldr	r3, [pc, #28]	@ (801e798 <ethernet_output+0x9c>)
 801e77c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801e77e:	f06f 0301 	mvn.w	r3, #1
}
 801e782:	4618      	mov	r0, r3
 801e784:	3718      	adds	r7, #24
 801e786:	46bd      	mov	sp, r7
 801e788:	bd80      	pop	{r7, pc}
 801e78a:	bf00      	nop
 801e78c:	0802459c 	.word	0x0802459c
 801e790:	080245d4 	.word	0x080245d4
 801e794:	08024608 	.word	0x08024608
 801e798:	2002d2b0 	.word	0x2002d2b0

0801e79c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b082      	sub	sp, #8
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	6078      	str	r0, [r7, #4]
 801e7a4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801e7a6:	683b      	ldr	r3, [r7, #0]
 801e7a8:	2200      	movs	r2, #0
 801e7aa:	2104      	movs	r1, #4
 801e7ac:	4618      	mov	r0, r3
 801e7ae:	f7ee ffe9 	bl	800d784 <osMessageQueueNew>
 801e7b2:	4602      	mov	r2, r0
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801e7b8:	4b10      	ldr	r3, [pc, #64]	@ (801e7fc <sys_mbox_new+0x60>)
 801e7ba:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e7be:	3301      	adds	r3, #1
 801e7c0:	b29a      	uxth	r2, r3
 801e7c2:	4b0e      	ldr	r3, [pc, #56]	@ (801e7fc <sys_mbox_new+0x60>)
 801e7c4:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801e7c8:	4b0c      	ldr	r3, [pc, #48]	@ (801e7fc <sys_mbox_new+0x60>)
 801e7ca:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	@ 0xf6
 801e7ce:	4b0b      	ldr	r3, [pc, #44]	@ (801e7fc <sys_mbox_new+0x60>)
 801e7d0:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e7d4:	429a      	cmp	r2, r3
 801e7d6:	d205      	bcs.n	801e7e4 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801e7d8:	4b08      	ldr	r3, [pc, #32]	@ (801e7fc <sys_mbox_new+0x60>)
 801e7da:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 801e7de:	4b07      	ldr	r3, [pc, #28]	@ (801e7fc <sys_mbox_new+0x60>)
 801e7e0:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	d102      	bne.n	801e7f2 <sys_mbox_new+0x56>
    return ERR_MEM;
 801e7ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e7f0:	e000      	b.n	801e7f4 <sys_mbox_new+0x58>

  return ERR_OK;
 801e7f2:	2300      	movs	r3, #0
}
 801e7f4:	4618      	mov	r0, r3
 801e7f6:	3708      	adds	r7, #8
 801e7f8:	46bd      	mov	sp, r7
 801e7fa:	bd80      	pop	{r7, pc}
 801e7fc:	2002d2b0 	.word	0x2002d2b0

0801e800 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e800:	b580      	push	{r7, lr}
 801e802:	b082      	sub	sp, #8
 801e804:	af00      	add	r7, sp, #0
 801e806:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	4618      	mov	r0, r3
 801e80e:	f7ef f925 	bl	800da5c <osMessageQueueGetCount>
 801e812:	4603      	mov	r3, r0
 801e814:	2b00      	cmp	r3, #0
 801e816:	d007      	beq.n	801e828 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801e818:	4b0c      	ldr	r3, [pc, #48]	@ (801e84c <sys_mbox_free+0x4c>)
 801e81a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801e81e:	3301      	adds	r3, #1
 801e820:	b29a      	uxth	r2, r3
 801e822:	4b0a      	ldr	r3, [pc, #40]	@ (801e84c <sys_mbox_free+0x4c>)
 801e824:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	4618      	mov	r0, r3
 801e82e:	f7ef f947 	bl	800dac0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801e832:	4b06      	ldr	r3, [pc, #24]	@ (801e84c <sys_mbox_free+0x4c>)
 801e834:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e838:	3b01      	subs	r3, #1
 801e83a:	b29a      	uxth	r2, r3
 801e83c:	4b03      	ldr	r3, [pc, #12]	@ (801e84c <sys_mbox_free+0x4c>)
 801e83e:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
#endif /* SYS_STATS */
}
 801e842:	bf00      	nop
 801e844:	3708      	adds	r7, #8
 801e846:	46bd      	mov	sp, r7
 801e848:	bd80      	pop	{r7, pc}
 801e84a:	bf00      	nop
 801e84c:	2002d2b0 	.word	0x2002d2b0

0801e850 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e850:	b580      	push	{r7, lr}
 801e852:	b084      	sub	sp, #16
 801e854:	af00      	add	r7, sp, #0
 801e856:	6078      	str	r0, [r7, #4]
 801e858:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	6818      	ldr	r0, [r3, #0]
 801e85e:	4639      	mov	r1, r7
 801e860:	2300      	movs	r3, #0
 801e862:	2200      	movs	r2, #0
 801e864:	f7ef f814 	bl	800d890 <osMessageQueuePut>
 801e868:	4603      	mov	r3, r0
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d102      	bne.n	801e874 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801e86e:	2300      	movs	r3, #0
 801e870:	73fb      	strb	r3, [r7, #15]
 801e872:	e009      	b.n	801e888 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e874:	23ff      	movs	r3, #255	@ 0xff
 801e876:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801e878:	4b06      	ldr	r3, [pc, #24]	@ (801e894 <sys_mbox_trypost+0x44>)
 801e87a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801e87e:	3301      	adds	r3, #1
 801e880:	b29a      	uxth	r2, r3
 801e882:	4b04      	ldr	r3, [pc, #16]	@ (801e894 <sys_mbox_trypost+0x44>)
 801e884:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
  }

  return result;
 801e888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e88c:	4618      	mov	r0, r3
 801e88e:	3710      	adds	r7, #16
 801e890:	46bd      	mov	sp, r7
 801e892:	bd80      	pop	{r7, pc}
 801e894:	2002d2b0 	.word	0x2002d2b0

0801e898 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e898:	b580      	push	{r7, lr}
 801e89a:	b086      	sub	sp, #24
 801e89c:	af00      	add	r7, sp, #0
 801e89e:	60f8      	str	r0, [r7, #12]
 801e8a0:	60b9      	str	r1, [r7, #8]
 801e8a2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801e8a4:	f7ee fb92 	bl	800cfcc <osKernelGetTickCount>
 801e8a8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d013      	beq.n	801e8d8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	6818      	ldr	r0, [r3, #0]
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	2200      	movs	r2, #0
 801e8b8:	68b9      	ldr	r1, [r7, #8]
 801e8ba:	f7ef f85d 	bl	800d978 <osMessageQueueGet>
 801e8be:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801e8c0:	693b      	ldr	r3, [r7, #16]
 801e8c2:	2b00      	cmp	r3, #0
 801e8c4:	d105      	bne.n	801e8d2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801e8c6:	f7ee fb81 	bl	800cfcc <osKernelGetTickCount>
 801e8ca:	4602      	mov	r2, r0
 801e8cc:	697b      	ldr	r3, [r7, #20]
 801e8ce:	1ad3      	subs	r3, r2, r3
 801e8d0:	e00f      	b.n	801e8f2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e8d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e8d6:	e00c      	b.n	801e8f2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801e8d8:	68fb      	ldr	r3, [r7, #12]
 801e8da:	6818      	ldr	r0, [r3, #0]
 801e8dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e8e0:	2200      	movs	r2, #0
 801e8e2:	68b9      	ldr	r1, [r7, #8]
 801e8e4:	f7ef f848 	bl	800d978 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801e8e8:	f7ee fb70 	bl	800cfcc <osKernelGetTickCount>
 801e8ec:	4602      	mov	r2, r0
 801e8ee:	697b      	ldr	r3, [r7, #20]
 801e8f0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801e8f2:	4618      	mov	r0, r3
 801e8f4:	3718      	adds	r7, #24
 801e8f6:	46bd      	mov	sp, r7
 801e8f8:	bd80      	pop	{r7, pc}

0801e8fa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e8fa:	b580      	push	{r7, lr}
 801e8fc:	b082      	sub	sp, #8
 801e8fe:	af00      	add	r7, sp, #0
 801e900:	6078      	str	r0, [r7, #4]
 801e902:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	6818      	ldr	r0, [r3, #0]
 801e908:	2300      	movs	r3, #0
 801e90a:	2200      	movs	r2, #0
 801e90c:	6839      	ldr	r1, [r7, #0]
 801e90e:	f7ef f833 	bl	800d978 <osMessageQueueGet>
 801e912:	4603      	mov	r3, r0
 801e914:	2b00      	cmp	r3, #0
 801e916:	d101      	bne.n	801e91c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801e918:	2300      	movs	r3, #0
 801e91a:	e001      	b.n	801e920 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e91c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801e920:	4618      	mov	r0, r3
 801e922:	3708      	adds	r7, #8
 801e924:	46bd      	mov	sp, r7
 801e926:	bd80      	pop	{r7, pc}

0801e928 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e928:	b480      	push	{r7}
 801e92a:	b083      	sub	sp, #12
 801e92c:	af00      	add	r7, sp, #0
 801e92e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	2b00      	cmp	r3, #0
 801e936:	d101      	bne.n	801e93c <sys_mbox_valid+0x14>
    return 0;
 801e938:	2300      	movs	r3, #0
 801e93a:	e000      	b.n	801e93e <sys_mbox_valid+0x16>
  else
    return 1;
 801e93c:	2301      	movs	r3, #1
}
 801e93e:	4618      	mov	r0, r3
 801e940:	370c      	adds	r7, #12
 801e942:	46bd      	mov	sp, r7
 801e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e948:	4770      	bx	lr

0801e94a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e94a:	b480      	push	{r7}
 801e94c:	b083      	sub	sp, #12
 801e94e:	af00      	add	r7, sp, #0
 801e950:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	2200      	movs	r2, #0
 801e956:	601a      	str	r2, [r3, #0]
}
 801e958:	bf00      	nop
 801e95a:	370c      	adds	r7, #12
 801e95c:	46bd      	mov	sp, r7
 801e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e962:	4770      	bx	lr

0801e964 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e964:	b580      	push	{r7, lr}
 801e966:	b082      	sub	sp, #8
 801e968:	af00      	add	r7, sp, #0
 801e96a:	6078      	str	r0, [r7, #4]
 801e96c:	460b      	mov	r3, r1
 801e96e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801e970:	78fb      	ldrb	r3, [r7, #3]
 801e972:	2200      	movs	r2, #0
 801e974:	4619      	mov	r1, r3
 801e976:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801e97a:	f7ee fd73 	bl	800d464 <osSemaphoreNew>
 801e97e:	4602      	mov	r2, r0
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d10a      	bne.n	801e9a2 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801e98c:	4b17      	ldr	r3, [pc, #92]	@ (801e9ec <sys_sem_new+0x88>)
 801e98e:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801e992:	3301      	adds	r3, #1
 801e994:	b29a      	uxth	r2, r3
 801e996:	4b15      	ldr	r3, [pc, #84]	@ (801e9ec <sys_sem_new+0x88>)
 801e998:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */
    return ERR_MEM;
 801e99c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e9a0:	e01f      	b.n	801e9e2 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 801e9a2:	78fb      	ldrb	r3, [r7, #3]
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d105      	bne.n	801e9b4 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	2100      	movs	r1, #0
 801e9ae:	4618      	mov	r0, r3
 801e9b0:	f7ee fdf4 	bl	800d59c <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801e9b4:	4b0d      	ldr	r3, [pc, #52]	@ (801e9ec <sys_sem_new+0x88>)
 801e9b6:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801e9ba:	3301      	adds	r3, #1
 801e9bc:	b29a      	uxth	r2, r3
 801e9be:	4b0b      	ldr	r3, [pc, #44]	@ (801e9ec <sys_sem_new+0x88>)
 801e9c0:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801e9c4:	4b09      	ldr	r3, [pc, #36]	@ (801e9ec <sys_sem_new+0x88>)
 801e9c6:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	@ 0xea
 801e9ca:	4b08      	ldr	r3, [pc, #32]	@ (801e9ec <sys_sem_new+0x88>)
 801e9cc:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801e9d0:	429a      	cmp	r2, r3
 801e9d2:	d205      	bcs.n	801e9e0 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801e9d4:	4b05      	ldr	r3, [pc, #20]	@ (801e9ec <sys_sem_new+0x88>)
 801e9d6:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 801e9da:	4b04      	ldr	r3, [pc, #16]	@ (801e9ec <sys_sem_new+0x88>)
 801e9dc:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e9e0:	2300      	movs	r3, #0
}
 801e9e2:	4618      	mov	r0, r3
 801e9e4:	3708      	adds	r7, #8
 801e9e6:	46bd      	mov	sp, r7
 801e9e8:	bd80      	pop	{r7, pc}
 801e9ea:	bf00      	nop
 801e9ec:	2002d2b0 	.word	0x2002d2b0

0801e9f0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e9f0:	b580      	push	{r7, lr}
 801e9f2:	b084      	sub	sp, #16
 801e9f4:	af00      	add	r7, sp, #0
 801e9f6:	6078      	str	r0, [r7, #4]
 801e9f8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801e9fa:	f7ee fae7 	bl	800cfcc <osKernelGetTickCount>
 801e9fe:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801ea00:	683b      	ldr	r3, [r7, #0]
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d011      	beq.n	801ea2a <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	6839      	ldr	r1, [r7, #0]
 801ea0c:	4618      	mov	r0, r3
 801ea0e:	f7ee fdc5 	bl	800d59c <osSemaphoreAcquire>
 801ea12:	4603      	mov	r3, r0
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d105      	bne.n	801ea24 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801ea18:	f7ee fad8 	bl	800cfcc <osKernelGetTickCount>
 801ea1c:	4602      	mov	r2, r0
 801ea1e:	68fb      	ldr	r3, [r7, #12]
 801ea20:	1ad3      	subs	r3, r2, r3
 801ea22:	e012      	b.n	801ea4a <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ea24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ea28:	e00f      	b.n	801ea4a <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801ea2a:	bf00      	nop
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ea34:	4618      	mov	r0, r3
 801ea36:	f7ee fdb1 	bl	800d59c <osSemaphoreAcquire>
 801ea3a:	4603      	mov	r3, r0
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	d1f5      	bne.n	801ea2c <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801ea40:	f7ee fac4 	bl	800cfcc <osKernelGetTickCount>
 801ea44:	4602      	mov	r2, r0
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ea4a:	4618      	mov	r0, r3
 801ea4c:	3710      	adds	r7, #16
 801ea4e:	46bd      	mov	sp, r7
 801ea50:	bd80      	pop	{r7, pc}

0801ea52 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801ea52:	b580      	push	{r7, lr}
 801ea54:	b082      	sub	sp, #8
 801ea56:	af00      	add	r7, sp, #0
 801ea58:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	4618      	mov	r0, r3
 801ea60:	f7ee fe02 	bl	800d668 <osSemaphoreRelease>
}
 801ea64:	bf00      	nop
 801ea66:	3708      	adds	r7, #8
 801ea68:	46bd      	mov	sp, r7
 801ea6a:	bd80      	pop	{r7, pc}

0801ea6c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ea6c:	b580      	push	{r7, lr}
 801ea6e:	b082      	sub	sp, #8
 801ea70:	af00      	add	r7, sp, #0
 801ea72:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801ea74:	4b08      	ldr	r3, [pc, #32]	@ (801ea98 <sys_sem_free+0x2c>)
 801ea76:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801ea7a:	3b01      	subs	r3, #1
 801ea7c:	b29a      	uxth	r2, r3
 801ea7e:	4b06      	ldr	r3, [pc, #24]	@ (801ea98 <sys_sem_free+0x2c>)
 801ea80:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	681b      	ldr	r3, [r3, #0]
 801ea88:	4618      	mov	r0, r3
 801ea8a:	f7ee fe45 	bl	800d718 <osSemaphoreDelete>
}
 801ea8e:	bf00      	nop
 801ea90:	3708      	adds	r7, #8
 801ea92:	46bd      	mov	sp, r7
 801ea94:	bd80      	pop	{r7, pc}
 801ea96:	bf00      	nop
 801ea98:	2002d2b0 	.word	0x2002d2b0

0801ea9c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ea9c:	b480      	push	{r7}
 801ea9e:	b083      	sub	sp, #12
 801eaa0:	af00      	add	r7, sp, #0
 801eaa2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	d101      	bne.n	801eab0 <sys_sem_valid+0x14>
    return 0;
 801eaac:	2300      	movs	r3, #0
 801eaae:	e000      	b.n	801eab2 <sys_sem_valid+0x16>
  else
    return 1;
 801eab0:	2301      	movs	r3, #1
}
 801eab2:	4618      	mov	r0, r3
 801eab4:	370c      	adds	r7, #12
 801eab6:	46bd      	mov	sp, r7
 801eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eabc:	4770      	bx	lr

0801eabe <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801eabe:	b480      	push	{r7}
 801eac0:	b083      	sub	sp, #12
 801eac2:	af00      	add	r7, sp, #0
 801eac4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	2200      	movs	r2, #0
 801eaca:	601a      	str	r2, [r3, #0]
}
 801eacc:	bf00      	nop
 801eace:	370c      	adds	r7, #12
 801ead0:	46bd      	mov	sp, r7
 801ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ead6:	4770      	bx	lr

0801ead8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ead8:	b580      	push	{r7, lr}
 801eada:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801eadc:	2000      	movs	r0, #0
 801eade:	f7ee fb79 	bl	800d1d4 <osMutexNew>
 801eae2:	4603      	mov	r3, r0
 801eae4:	4a01      	ldr	r2, [pc, #4]	@ (801eaec <sys_init+0x14>)
 801eae6:	6013      	str	r3, [r2, #0]
#endif
}
 801eae8:	bf00      	nop
 801eaea:	bd80      	pop	{r7, pc}
 801eaec:	2002d508 	.word	0x2002d508

0801eaf0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801eaf0:	b580      	push	{r7, lr}
 801eaf2:	b082      	sub	sp, #8
 801eaf4:	af00      	add	r7, sp, #0
 801eaf6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801eaf8:	2000      	movs	r0, #0
 801eafa:	f7ee fb6b 	bl	800d1d4 <osMutexNew>
 801eafe:	4602      	mov	r2, r0
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d10a      	bne.n	801eb22 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801eb0c:	4b12      	ldr	r3, [pc, #72]	@ (801eb58 <sys_mutex_new+0x68>)
 801eb0e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801eb12:	3301      	adds	r3, #1
 801eb14:	b29a      	uxth	r2, r3
 801eb16:	4b10      	ldr	r3, [pc, #64]	@ (801eb58 <sys_mutex_new+0x68>)
 801eb18:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
#endif /* SYS_STATS */
    return ERR_MEM;
 801eb1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eb20:	e016      	b.n	801eb50 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801eb22:	4b0d      	ldr	r3, [pc, #52]	@ (801eb58 <sys_mutex_new+0x68>)
 801eb24:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 801eb28:	3301      	adds	r3, #1
 801eb2a:	b29a      	uxth	r2, r3
 801eb2c:	4b0a      	ldr	r3, [pc, #40]	@ (801eb58 <sys_mutex_new+0x68>)
 801eb2e:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801eb32:	4b09      	ldr	r3, [pc, #36]	@ (801eb58 <sys_mutex_new+0x68>)
 801eb34:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	@ 0xf0
 801eb38:	4b07      	ldr	r3, [pc, #28]	@ (801eb58 <sys_mutex_new+0x68>)
 801eb3a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 801eb3e:	429a      	cmp	r2, r3
 801eb40:	d205      	bcs.n	801eb4e <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801eb42:	4b05      	ldr	r3, [pc, #20]	@ (801eb58 <sys_mutex_new+0x68>)
 801eb44:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 801eb48:	4b03      	ldr	r3, [pc, #12]	@ (801eb58 <sys_mutex_new+0x68>)
 801eb4a:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801eb4e:	2300      	movs	r3, #0
}
 801eb50:	4618      	mov	r0, r3
 801eb52:	3708      	adds	r7, #8
 801eb54:	46bd      	mov	sp, r7
 801eb56:	bd80      	pop	{r7, pc}
 801eb58:	2002d2b0 	.word	0x2002d2b0

0801eb5c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801eb5c:	b580      	push	{r7, lr}
 801eb5e:	b082      	sub	sp, #8
 801eb60:	af00      	add	r7, sp, #0
 801eb62:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	681b      	ldr	r3, [r3, #0]
 801eb68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801eb6c:	4618      	mov	r0, r3
 801eb6e:	f7ee fbcb 	bl	800d308 <osMutexAcquire>
#endif
}
 801eb72:	bf00      	nop
 801eb74:	3708      	adds	r7, #8
 801eb76:	46bd      	mov	sp, r7
 801eb78:	bd80      	pop	{r7, pc}

0801eb7a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801eb7a:	b580      	push	{r7, lr}
 801eb7c:	b082      	sub	sp, #8
 801eb7e:	af00      	add	r7, sp, #0
 801eb80:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	4618      	mov	r0, r3
 801eb88:	f7ee fc1c 	bl	800d3c4 <osMutexRelease>
}
 801eb8c:	bf00      	nop
 801eb8e:	3708      	adds	r7, #8
 801eb90:	46bd      	mov	sp, r7
 801eb92:	bd80      	pop	{r7, pc}

0801eb94 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801eb94:	b580      	push	{r7, lr}
 801eb96:	b08e      	sub	sp, #56	@ 0x38
 801eb98:	af00      	add	r7, sp, #0
 801eb9a:	60f8      	str	r0, [r7, #12]
 801eb9c:	60b9      	str	r1, [r7, #8]
 801eb9e:	607a      	str	r2, [r7, #4]
 801eba0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801eba2:	f107 0314 	add.w	r3, r7, #20
 801eba6:	2224      	movs	r2, #36	@ 0x24
 801eba8:	2100      	movs	r1, #0
 801ebaa:	4618      	mov	r0, r3
 801ebac:	f001 fba2 	bl	80202f4 <memset>
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	617b      	str	r3, [r7, #20]
 801ebb4:	683b      	ldr	r3, [r7, #0]
 801ebb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ebb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ebba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801ebbc:	f107 0314 	add.w	r3, r7, #20
 801ebc0:	461a      	mov	r2, r3
 801ebc2:	6879      	ldr	r1, [r7, #4]
 801ebc4:	68b8      	ldr	r0, [r7, #8]
 801ebc6:	f7ee fa29 	bl	800d01c <osThreadNew>
 801ebca:	4603      	mov	r3, r0
#endif
}
 801ebcc:	4618      	mov	r0, r3
 801ebce:	3738      	adds	r7, #56	@ 0x38
 801ebd0:	46bd      	mov	sp, r7
 801ebd2:	bd80      	pop	{r7, pc}

0801ebd4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ebd4:	b580      	push	{r7, lr}
 801ebd6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801ebd8:	4b04      	ldr	r3, [pc, #16]	@ (801ebec <sys_arch_protect+0x18>)
 801ebda:	681b      	ldr	r3, [r3, #0]
 801ebdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ebe0:	4618      	mov	r0, r3
 801ebe2:	f7ee fb91 	bl	800d308 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801ebe6:	2301      	movs	r3, #1
}
 801ebe8:	4618      	mov	r0, r3
 801ebea:	bd80      	pop	{r7, pc}
 801ebec:	2002d508 	.word	0x2002d508

0801ebf0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ebf0:	b580      	push	{r7, lr}
 801ebf2:	b082      	sub	sp, #8
 801ebf4:	af00      	add	r7, sp, #0
 801ebf6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ebf8:	4b04      	ldr	r3, [pc, #16]	@ (801ec0c <sys_arch_unprotect+0x1c>)
 801ebfa:	681b      	ldr	r3, [r3, #0]
 801ebfc:	4618      	mov	r0, r3
 801ebfe:	f7ee fbe1 	bl	800d3c4 <osMutexRelease>
}
 801ec02:	bf00      	nop
 801ec04:	3708      	adds	r7, #8
 801ec06:	46bd      	mov	sp, r7
 801ec08:	bd80      	pop	{r7, pc}
 801ec0a:	bf00      	nop
 801ec0c:	2002d508 	.word	0x2002d508

0801ec10 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801ec10:	b580      	push	{r7, lr}
 801ec12:	b0ca      	sub	sp, #296	@ 0x128
 801ec14:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;
	osStatus_t status;

	adcReadySem = osSemaphoreNew(1, 0, NULL);
 801ec16:	2200      	movs	r2, #0
 801ec18:	2100      	movs	r1, #0
 801ec1a:	2001      	movs	r0, #1
 801ec1c:	f7ee fc22 	bl	800d464 <osSemaphoreNew>
 801ec20:	4603      	mov	r3, r0
 801ec22:	4a3c      	ldr	r2, [pc, #240]	@ (801ed14 <AdcTestTask+0x104>)
 801ec24:	6013      	str	r3, [r2, #0]

	while (1)
	{
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801ec26:	4b3c      	ldr	r3, [pc, #240]	@ (801ed18 <AdcTestTask+0x108>)
 801ec28:	6818      	ldr	r0, [r3, #0]
 801ec2a:	f107 0110 	add.w	r1, r7, #16
 801ec2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ec32:	2200      	movs	r2, #0
 801ec34:	f7ee fea0 	bl	800d978 <osMessageQueueGet>
 801ec38:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 801ec3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d155      	bne.n	801ecf0 <AdcTestTask+0xe0>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801ec44:	2300      	movs	r3, #0
 801ec46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ec4a:	e00d      	b.n	801ec68 <AdcTestTask+0x58>
			{
				result = ADC_Test_Perform();
 801ec4c:	f000 f870 	bl	801ed30 <ADC_Test_Perform>
 801ec50:	4603      	mov	r3, r0
 801ec52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801ec56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec5a:	2bff      	cmp	r3, #255	@ 0xff
 801ec5c:	d00e      	beq.n	801ec7c <AdcTestTask+0x6c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801ec5e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801ec62:	3301      	adds	r3, #1
 801ec64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ec68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ec6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ec70:	7b1b      	ldrb	r3, [r3, #12]
 801ec72:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801ec76:	429a      	cmp	r2, r3
 801ec78:	d3e8      	bcc.n	801ec4c <AdcTestTask+0x3c>
 801ec7a:	e000      	b.n	801ec7e <AdcTestTask+0x6e>
					break;
 801ec7c:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801ec7e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ec82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ec86:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801ec8a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801ec8e:	6812      	ldr	r2, [r2, #0]
 801ec90:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801ec92:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ec96:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ec9a:	889a      	ldrh	r2, [r3, #4]
 801ec9c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801eca0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801eca4:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801eca6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ecaa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ecae:	689a      	ldr	r2, [r3, #8]
 801ecb0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ecb4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ecb8:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801ecba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ecbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ecc2:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801ecc6:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("ADC test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801ecc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eccc:	2b01      	cmp	r3, #1
 801ecce:	d101      	bne.n	801ecd4 <AdcTestTask+0xc4>
 801ecd0:	4b12      	ldr	r3, [pc, #72]	@ (801ed1c <AdcTestTask+0x10c>)
 801ecd2:	e000      	b.n	801ecd6 <AdcTestTask+0xc6>
 801ecd4:	4b12      	ldr	r3, [pc, #72]	@ (801ed20 <AdcTestTask+0x110>)
 801ecd6:	4619      	mov	r1, r3
 801ecd8:	4812      	ldr	r0, [pc, #72]	@ (801ed24 <AdcTestTask+0x114>)
 801ecda:	f001 f9b3 	bl	8020044 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801ecde:	4b12      	ldr	r3, [pc, #72]	@ (801ed28 <AdcTestTask+0x118>)
 801ece0:	6818      	ldr	r0, [r3, #0]
 801ece2:	4639      	mov	r1, r7
 801ece4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ece8:	2200      	movs	r2, #0
 801ecea:	f7ee fdd1 	bl	800d890 <osMessageQueuePut>
 801ecee:	e79a      	b.n	801ec26 <AdcTestTask+0x16>
		}
		else if (status == osErrorTimeout)
 801ecf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ecf4:	f113 0f02 	cmn.w	r3, #2
 801ecf8:	d103      	bne.n	801ed02 <AdcTestTask+0xf2>
		{
			osDelay(1);
 801ecfa:	2001      	movs	r0, #1
 801ecfc:	f7ee fa3c 	bl	800d178 <osDelay>
 801ed00:	e791      	b.n	801ec26 <AdcTestTask+0x16>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 801ed02:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801ed06:	4809      	ldr	r0, [pc, #36]	@ (801ed2c <AdcTestTask+0x11c>)
 801ed08:	f001 f99c 	bl	8020044 <iprintf>
			osDelay(1);
 801ed0c:	2001      	movs	r0, #1
 801ed0e:	f7ee fa33 	bl	800d178 <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801ed12:	e788      	b.n	801ec26 <AdcTestTask+0x16>
 801ed14:	2002d50c 	.word	0x2002d50c
 801ed18:	200002f0 	.word	0x200002f0
 801ed1c:	08024630 	.word	0x08024630
 801ed20:	08024638 	.word	0x08024638
 801ed24:	08024640 	.word	0x08024640
 801ed28:	200002e0 	.word	0x200002e0
 801ed2c:	08024650 	.word	0x08024650

0801ed30 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 801ed30:	b580      	push	{r7, lr}
 801ed32:	b082      	sub	sp, #8
 801ed34:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801ed36:	2201      	movs	r2, #1
 801ed38:	4913      	ldr	r1, [pc, #76]	@ (801ed88 <ADC_Test_Perform+0x58>)
 801ed3a:	4814      	ldr	r0, [pc, #80]	@ (801ed8c <ADC_Test_Perform+0x5c>)
 801ed3c:	f7e3 fb9a 	bl	8002474 <HAL_ADC_Start_DMA>
 801ed40:	4603      	mov	r3, r0
 801ed42:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801ed44:	79fb      	ldrb	r3, [r7, #7]
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d004      	beq.n	801ed54 <ADC_Test_Perform+0x24>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
 801ed4a:	4811      	ldr	r0, [pc, #68]	@ (801ed90 <ADC_Test_Perform+0x60>)
 801ed4c:	f001 f9e2 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801ed50:	23ff      	movs	r3, #255	@ 0xff
 801ed52:	e015      	b.n	801ed80 <ADC_Test_Perform+0x50>
	}

	if (osSemaphoreAcquire(adcReadySem, 10) != osOK) {
 801ed54:	4b0f      	ldr	r3, [pc, #60]	@ (801ed94 <ADC_Test_Perform+0x64>)
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	210a      	movs	r1, #10
 801ed5a:	4618      	mov	r0, r3
 801ed5c:	f7ee fc1e 	bl	800d59c <osSemaphoreAcquire>
 801ed60:	4603      	mov	r3, r0
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	d004      	beq.n	801ed70 <ADC_Test_Perform+0x40>
#ifdef PRINT_TESTS_DEBUG
		printf("ADC semaphore timeout\n");
 801ed66:	480c      	ldr	r0, [pc, #48]	@ (801ed98 <ADC_Test_Perform+0x68>)
 801ed68:	f001 f9d4 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801ed6c:	23ff      	movs	r3, #255	@ 0xff
 801ed6e:	e007      	b.n	801ed80 <ADC_Test_Perform+0x50>

#ifdef PRINT_TESTS_DEBUG2
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801ed70:	4b05      	ldr	r3, [pc, #20]	@ (801ed88 <ADC_Test_Perform+0x58>)
 801ed72:	881b      	ldrh	r3, [r3, #0]
 801ed74:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801ed78:	d301      	bcc.n	801ed7e <ADC_Test_Perform+0x4e>
 801ed7a:	2301      	movs	r3, #1
 801ed7c:	e000      	b.n	801ed80 <ADC_Test_Perform+0x50>

	return TEST_FAILED;
 801ed7e:	23ff      	movs	r3, #255	@ 0xff
}
 801ed80:	4618      	mov	r0, r3
 801ed82:	3708      	adds	r7, #8
 801ed84:	46bd      	mov	sp, r7
 801ed86:	bd80      	pop	{r7, pc}
 801ed88:	2002d510 	.word	0x2002d510
 801ed8c:	200001e8 	.word	0x200001e8
 801ed90:	08024668 	.word	0x08024668
 801ed94:	2002d50c 	.word	0x2002d50c
 801ed98:	08024680 	.word	0x08024680

0801ed9c <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ed9c:	b580      	push	{r7, lr}
 801ed9e:	b082      	sub	sp, #8
 801eda0:	af00      	add	r7, sp, #0
 801eda2:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(adcReadySem);
 801eda4:	4b09      	ldr	r3, [pc, #36]	@ (801edcc <HAL_ADC_ConvCpltCallback+0x30>)
 801eda6:	681b      	ldr	r3, [r3, #0]
 801eda8:	4618      	mov	r0, r3
 801edaa:	f7ee fc5d 	bl	800d668 <osSemaphoreRelease>
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801edae:	4808      	ldr	r0, [pc, #32]	@ (801edd0 <HAL_ADC_ConvCpltCallback+0x34>)
 801edb0:	f7e3 fc5e 	bl	8002670 <HAL_ADC_Stop_DMA>
 801edb4:	4603      	mov	r3, r0
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	d004      	beq.n	801edc4 <HAL_ADC_ConvCpltCallback+0x28>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
 801edba:	4806      	ldr	r0, [pc, #24]	@ (801edd4 <HAL_ADC_ConvCpltCallback+0x38>)
 801edbc:	f001 f9aa 	bl	8020114 <puts>
#endif
		Error_Handler();
 801edc0:	f7e2 fa28 	bl	8001214 <Error_Handler>
	}
}
 801edc4:	bf00      	nop
 801edc6:	3708      	adds	r7, #8
 801edc8:	46bd      	mov	sp, r7
 801edca:	bd80      	pop	{r7, pc}
 801edcc:	2002d50c 	.word	0x2002d50c
 801edd0:	200001e8 	.word	0x200001e8
 801edd4:	08024698 	.word	0x08024698

0801edd8 <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 801edd8:	b580      	push	{r7, lr}
 801edda:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801edde:	af00      	add	r7, sp, #0
	while(1)
	{
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801ede0:	4b53      	ldr	r3, [pc, #332]	@ (801ef30 <TestDispatcher+0x158>)
 801ede2:	6818      	ldr	r0, [r3, #0]
 801ede4:	4639      	mov	r1, r7
 801ede6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801edea:	2200      	movs	r2, #0
 801edec:	f7ee fdc4 	bl	800d978 <osMessageQueueGet>
 801edf0:	4603      	mov	r3, r0
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d1f4      	bne.n	801ede0 <TestDispatcher+0x8>
		{
			// load test_data
			test_data.addr = in_msg.addr;
 801edf6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801edfa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801edfe:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801ee02:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801ee06:	6812      	ldr	r2, [r2, #0]
 801ee08:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801ee0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee0e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ee12:	889a      	ldrh	r2, [r3, #4]
 801ee14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ee1c:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801ee1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee22:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ee26:	689a      	ldr	r2, [r3, #8]
 801ee28:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ee30:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801ee32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee36:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ee3a:	7b5a      	ldrb	r2, [r3, #13]
 801ee3c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ee44:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801ee46:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee4a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ee4e:	7b9a      	ldrb	r2, [r3, #14]
 801ee50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ee58:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801ee5a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee5e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ee62:	7b9b      	ldrb	r3, [r3, #14]
 801ee64:	461a      	mov	r2, r3
 801ee66:	463b      	mov	r3, r7
 801ee68:	f103 010f 	add.w	r1, r3, #15
 801ee6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801ee70:	330e      	adds	r3, #14
 801ee72:	4618      	mov	r0, r3
 801ee74:	f001 fb11 	bl	802049a <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801ee78:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ee7c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ee80:	7b1b      	ldrb	r3, [r3, #12]
 801ee82:	f003 0302 	and.w	r3, r3, #2
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	d008      	beq.n	801ee9c <TestDispatcher+0xc4>
			{
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801ee8a:	4b2a      	ldr	r3, [pc, #168]	@ (801ef34 <TestDispatcher+0x15c>)
 801ee8c:	6818      	ldr	r0, [r3, #0]
 801ee8e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801ee92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee96:	2200      	movs	r2, #0
 801ee98:	f7ee fcfa 	bl	800d890 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801ee9c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801eea0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801eea4:	7b1b      	ldrb	r3, [r3, #12]
 801eea6:	f003 0308 	and.w	r3, r3, #8
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d008      	beq.n	801eec0 <TestDispatcher+0xe8>
			{
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801eeae:	4b22      	ldr	r3, [pc, #136]	@ (801ef38 <TestDispatcher+0x160>)
 801eeb0:	6818      	ldr	r0, [r3, #0]
 801eeb2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801eeb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eeba:	2200      	movs	r2, #0
 801eebc:	f7ee fce8 	bl	800d890 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_SPI)
 801eec0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801eec4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801eec8:	7b1b      	ldrb	r3, [r3, #12]
 801eeca:	f003 0304 	and.w	r3, r3, #4
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d008      	beq.n	801eee4 <TestDispatcher+0x10c>
			{
				osMessageQueuePut(spiQueueHandle, &test_data, 0, osWaitForever);
 801eed2:	4b1a      	ldr	r3, [pc, #104]	@ (801ef3c <TestDispatcher+0x164>)
 801eed4:	6818      	ldr	r0, [r3, #0]
 801eed6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801eeda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eede:	2200      	movs	r2, #0
 801eee0:	f7ee fcd6 	bl	800d890 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_ADC)
 801eee4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801eee8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801eeec:	7b1b      	ldrb	r3, [r3, #12]
 801eeee:	f003 0310 	and.w	r3, r3, #16
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d008      	beq.n	801ef08 <TestDispatcher+0x130>
			{
				osMessageQueuePut(adcQueueHandle, &test_data, 0, osWaitForever);
 801eef6:	4b12      	ldr	r3, [pc, #72]	@ (801ef40 <TestDispatcher+0x168>)
 801eef8:	6818      	ldr	r0, [r3, #0]
 801eefa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801eefe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef02:	2200      	movs	r2, #0
 801ef04:	f7ee fcc4 	bl	800d890 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_TIM)
 801ef08:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ef0c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ef10:	7b1b      	ldrb	r3, [r3, #12]
 801ef12:	f003 0301 	and.w	r3, r3, #1
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	f43f af62 	beq.w	801ede0 <TestDispatcher+0x8>
			{
				osMessageQueuePut(timQueueHandle, &test_data, 0, osWaitForever);
 801ef1c:	4b09      	ldr	r3, [pc, #36]	@ (801ef44 <TestDispatcher+0x16c>)
 801ef1e:	6818      	ldr	r0, [r3, #0]
 801ef20:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801ef24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef28:	2200      	movs	r2, #0
 801ef2a:	f7ee fcb1 	bl	800d890 <osMessageQueuePut>
	{
 801ef2e:	e757      	b.n	801ede0 <TestDispatcher+0x8>
 801ef30:	200002dc 	.word	0x200002dc
 801ef34:	200002e4 	.word	0x200002e4
 801ef38:	200002e8 	.word	0x200002e8
 801ef3c:	200002ec 	.word	0x200002ec
 801ef40:	200002f0 	.word	0x200002f0
 801ef44:	200002f4 	.word	0x200002f4

0801ef48 <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801ef48:	b580      	push	{r7, lr}
 801ef4a:	b086      	sub	sp, #24
 801ef4c:	af00      	add	r7, sp, #0
 801ef4e:	60f8      	str	r0, [r7, #12]
 801ef50:	607a      	str	r2, [r7, #4]
 801ef52:	461a      	mov	r2, r3
 801ef54:	460b      	mov	r3, r1
 801ef56:	72fb      	strb	r3, [r7, #11]
 801ef58:	4613      	mov	r3, r2
 801ef5a:	72bb      	strb	r3, [r7, #10]
	if (crcMutex == NULL) crcMutex = osMutexNew(NULL);
 801ef5c:	4b17      	ldr	r3, [pc, #92]	@ (801efbc <Match_CRC+0x74>)
 801ef5e:	681b      	ldr	r3, [r3, #0]
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	d105      	bne.n	801ef70 <Match_CRC+0x28>
 801ef64:	2000      	movs	r0, #0
 801ef66:	f7ee f935 	bl	800d1d4 <osMutexNew>
 801ef6a:	4603      	mov	r3, r0
 801ef6c:	4a13      	ldr	r2, [pc, #76]	@ (801efbc <Match_CRC+0x74>)
 801ef6e:	6013      	str	r3, [r2, #0]

	osMutexAcquire(crcMutex, osWaitForever);
 801ef70:	4b12      	ldr	r3, [pc, #72]	@ (801efbc <Match_CRC+0x74>)
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ef78:	4618      	mov	r0, r3
 801ef7a:	f7ee f9c5 	bl	800d308 <osMutexAcquire>
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801ef7e:	7afb      	ldrb	r3, [r7, #11]
 801ef80:	461a      	mov	r2, r3
 801ef82:	68f9      	ldr	r1, [r7, #12]
 801ef84:	480e      	ldr	r0, [pc, #56]	@ (801efc0 <Match_CRC+0x78>)
 801ef86:	f7e3 fffd 	bl	8002f84 <HAL_CRC_Calculate>
 801ef8a:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801ef8c:	7abb      	ldrb	r3, [r7, #10]
 801ef8e:	461a      	mov	r2, r3
 801ef90:	6879      	ldr	r1, [r7, #4]
 801ef92:	480b      	ldr	r0, [pc, #44]	@ (801efc0 <Match_CRC+0x78>)
 801ef94:	f7e3 fff6 	bl	8002f84 <HAL_CRC_Calculate>
 801ef98:	6138      	str	r0, [r7, #16]
	osMutexRelease(crcMutex);
 801ef9a:	4b08      	ldr	r3, [pc, #32]	@ (801efbc <Match_CRC+0x74>)
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	4618      	mov	r0, r3
 801efa0:	f7ee fa10 	bl	800d3c4 <osMutexRelease>

	if(buf1_crc == buf2_crc)
 801efa4:	697a      	ldr	r2, [r7, #20]
 801efa6:	693b      	ldr	r3, [r7, #16]
 801efa8:	429a      	cmp	r2, r3
 801efaa:	d101      	bne.n	801efb0 <Match_CRC+0x68>
		return CRC_MATCH_OK;
 801efac:	2301      	movs	r3, #1
 801efae:	e000      	b.n	801efb2 <Match_CRC+0x6a>

	return CRC_MATCH_FAIL;
 801efb0:	2300      	movs	r3, #0
}
 801efb2:	4618      	mov	r0, r3
 801efb4:	3718      	adds	r7, #24
 801efb6:	46bd      	mov	sp, r7
 801efb8:	bd80      	pop	{r7, pc}
 801efba:	bf00      	nop
 801efbc:	2002d710 	.word	0x2002d710
 801efc0:	20000290 	.word	0x20000290

0801efc4 <UDP_Listen>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Listen(void)
{
 801efc4:	b580      	push	{r7, lr}
 801efc6:	b0ca      	sub	sp, #296	@ 0x128
 801efc8:	af00      	add	r7, sp, #0
	void *raw_data;
	uint16_t len;
	InMsg_t in_msg;
	int n_read;

	conn_recv = netconn_new(NETCONN_UDP);
 801efca:	2200      	movs	r2, #0
 801efcc:	2100      	movs	r1, #0
 801efce:	2020      	movs	r0, #32
 801efd0:	f7f2 f8d6 	bl	8011180 <netconn_new_with_proto_and_callback>
 801efd4:	4603      	mov	r3, r0
 801efd6:	4a57      	ldr	r2, [pc, #348]	@ (801f134 <UDP_Listen+0x170>)
 801efd8:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 801efda:	4b56      	ldr	r3, [pc, #344]	@ (801f134 <UDP_Listen+0x170>)
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d104      	bne.n	801efec <UDP_Listen+0x28>
	{
		printf("error initializing UDP receive netconn\n");
 801efe2:	4855      	ldr	r0, [pc, #340]	@ (801f138 <UDP_Listen+0x174>)
 801efe4:	f001 f896 	bl	8020114 <puts>
		osThreadExit();
 801efe8:	f7ee f8be 	bl	800d168 <osThreadExit>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 801efec:	4b51      	ldr	r3, [pc, #324]	@ (801f134 <UDP_Listen+0x170>)
 801efee:	681b      	ldr	r3, [r3, #0]
 801eff0:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801eff4:	4951      	ldr	r1, [pc, #324]	@ (801f13c <UDP_Listen+0x178>)
 801eff6:	4618      	mov	r0, r3
 801eff8:	f7f2 f97c 	bl	80112f4 <netconn_bind>
 801effc:	4603      	mov	r3, r0
 801effe:	2b00      	cmp	r3, #0
 801f000:	d00c      	beq.n	801f01c <UDP_Listen+0x58>
	{
		printf("error binding UDP port\n");
 801f002:	484f      	ldr	r0, [pc, #316]	@ (801f140 <UDP_Listen+0x17c>)
 801f004:	f001 f886 	bl	8020114 <puts>
		netconn_delete(conn_recv);
 801f008:	4b4a      	ldr	r3, [pc, #296]	@ (801f134 <UDP_Listen+0x170>)
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	4618      	mov	r0, r3
 801f00e:	f7f2 f955 	bl	80112bc <netconn_delete>
		conn_recv = NULL;
 801f012:	4b48      	ldr	r3, [pc, #288]	@ (801f134 <UDP_Listen+0x170>)
 801f014:	2200      	movs	r2, #0
 801f016:	601a      	str	r2, [r3, #0]
		osThreadExit();
 801f018:	f7ee f8a6 	bl	800d168 <osThreadExit>
	}

	while (1)
	{
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 801f01c:	4b45      	ldr	r3, [pc, #276]	@ (801f134 <UDP_Listen+0x170>)
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 801f024:	4611      	mov	r1, r2
 801f026:	4618      	mov	r0, r3
 801f028:	f7f2 fb18 	bl	801165c <netconn_recv>
 801f02c:	4603      	mov	r3, r0
 801f02e:	2b00      	cmp	r3, #0
 801f030:	d17c      	bne.n	801f12c <UDP_Listen+0x168>
		{
			// Load in_msg
			in_msg.addr = *netbuf_fromaddr(buf);
 801f032:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801f036:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f03a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f03e:	6892      	ldr	r2, [r2, #8]
 801f040:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 801f042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f046:	899a      	ldrh	r2, [r3, #12]
 801f048:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f04c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f050:	809a      	strh	r2, [r3, #4]

			netbuf_data(buf, &raw_data, &len);
 801f052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f056:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 801f05a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 801f05e:	4618      	mov	r0, r3
 801f060:	f7f3 fed2 	bl	8012e08 <netbuf_data>

			n_read = 0;
 801f064:	2300      	movs	r3, #0
 801f066:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 801f06a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801f06e:	681b      	ldr	r3, [r3, #0]
 801f070:	461a      	mov	r2, r3
 801f072:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f076:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f07a:	609a      	str	r2, [r3, #8]
			n_read += sizeof(in_msg.test_id);
 801f07c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f080:	3304      	adds	r3, #4
 801f082:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

			memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 801f086:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f08a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f08e:	1c59      	adds	r1, r3, #1
 801f090:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f094:	4413      	add	r3, r2
 801f096:	781a      	ldrb	r2, [r3, #0]
 801f098:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f09c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f0a0:	731a      	strb	r2, [r3, #12]
			memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 801f0a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f0a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f0aa:	1c59      	adds	r1, r3, #1
 801f0ac:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f0b0:	4413      	add	r3, r2
 801f0b2:	781a      	ldrb	r2, [r3, #0]
 801f0b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f0b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f0bc:	735a      	strb	r2, [r3, #13]
			memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 801f0be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f0c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f0c6:	1c59      	adds	r1, r3, #1
 801f0c8:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 801f0cc:	4413      	add	r3, r2
 801f0ce:	781a      	ldrb	r2, [r3, #0]
 801f0d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f0d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f0d8:	739a      	strb	r2, [r3, #14]
			memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 801f0da:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f0de:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801f0e2:	18d1      	adds	r1, r2, r3
 801f0e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f0e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f0ec:	7b9b      	ldrb	r3, [r3, #14]
 801f0ee:	461a      	mov	r2, r3
 801f0f0:	1d3b      	adds	r3, r7, #4
 801f0f2:	330f      	adds	r3, #15
 801f0f4:	4618      	mov	r0, r3
 801f0f6:	f001 f9d0 	bl	802049a <memcpy>

			// send in_msg to InMsgQueue
			osStatus_t status = osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801f0fa:	4b12      	ldr	r3, [pc, #72]	@ (801f144 <UDP_Listen+0x180>)
 801f0fc:	6818      	ldr	r0, [r3, #0]
 801f0fe:	1d39      	adds	r1, r7, #4
 801f100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f104:	2200      	movs	r2, #0
 801f106:	f7ee fbc3 	bl	800d890 <osMessageQueuePut>
 801f10a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
			if (status != osOK)
 801f10e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f112:	2b00      	cmp	r3, #0
 801f114:	d004      	beq.n	801f120 <UDP_Listen+0x15c>
			{
				printf("inMsg put error: %d\n", status);
 801f116:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801f11a:	480b      	ldr	r0, [pc, #44]	@ (801f148 <UDP_Listen+0x184>)
 801f11c:	f000 ff92 	bl	8020044 <iprintf>
			}

			netbuf_delete(buf);
 801f120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f124:	4618      	mov	r0, r3
 801f126:	f7f3 fe05 	bl	8012d34 <netbuf_delete>
 801f12a:	e777      	b.n	801f01c <UDP_Listen+0x58>
		}
		else
		{
			printf("netconn_recv failed\n");
 801f12c:	4807      	ldr	r0, [pc, #28]	@ (801f14c <UDP_Listen+0x188>)
 801f12e:	f000 fff1 	bl	8020114 <puts>
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 801f132:	e773      	b.n	801f01c <UDP_Listen+0x58>
 801f134:	2002d714 	.word	0x2002d714
 801f138:	080246ac 	.word	0x080246ac
 801f13c:	08024db8 	.word	0x08024db8
 801f140:	080246d4 	.word	0x080246d4
 801f144:	200002dc 	.word	0x200002dc
 801f148:	080246ec 	.word	0x080246ec
 801f14c:	08024704 	.word	0x08024704

0801f150 <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 801f150:	b580      	push	{r7, lr}
 801f152:	b086      	sub	sp, #24
 801f154:	af00      	add	r7, sp, #0
	struct netbuf *buf;
	OutMsg_t out_msg;

	conn_send = netconn_new(NETCONN_UDP);
 801f156:	2200      	movs	r2, #0
 801f158:	2100      	movs	r1, #0
 801f15a:	2020      	movs	r0, #32
 801f15c:	f7f2 f810 	bl	8011180 <netconn_new_with_proto_and_callback>
 801f160:	4603      	mov	r3, r0
 801f162:	4a20      	ldr	r2, [pc, #128]	@ (801f1e4 <UDP_Response+0x94>)
 801f164:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 801f166:	4b1f      	ldr	r3, [pc, #124]	@ (801f1e4 <UDP_Response+0x94>)
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	2b00      	cmp	r3, #0
 801f16c:	d104      	bne.n	801f178 <UDP_Response+0x28>
	{
		printf("error initializing UDP send netconn\n");
 801f16e:	481e      	ldr	r0, [pc, #120]	@ (801f1e8 <UDP_Response+0x98>)
 801f170:	f000 ffd0 	bl	8020114 <puts>
		osThreadExit();
 801f174:	f7ed fff8 	bl	800d168 <osThreadExit>
	}

	while(1)
	{
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801f178:	4b1c      	ldr	r3, [pc, #112]	@ (801f1ec <UDP_Response+0x9c>)
 801f17a:	6818      	ldr	r0, [r3, #0]
 801f17c:	4639      	mov	r1, r7
 801f17e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f182:	2200      	movs	r2, #0
 801f184:	f7ee fbf8 	bl	800d978 <osMessageQueueGet>
 801f188:	4603      	mov	r3, r0
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d1f4      	bne.n	801f178 <UDP_Response+0x28>
		{
			//Load response buffer
			buf = netbuf_new();
 801f18e:	f7f3 fdbd 	bl	8012d0c <netbuf_new>
 801f192:	6178      	str	r0, [r7, #20]
			if (!buf)
 801f194:	697b      	ldr	r3, [r7, #20]
 801f196:	2b00      	cmp	r3, #0
 801f198:	d103      	bne.n	801f1a2 <UDP_Response+0x52>
			{
				printf("responder netbuf_new() failed");
 801f19a:	4815      	ldr	r0, [pc, #84]	@ (801f1f0 <UDP_Response+0xa0>)
 801f19c:	f000 ff52 	bl	8020044 <iprintf>
				continue;
 801f1a0:	e01f      	b.n	801f1e2 <UDP_Response+0x92>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 801f1a2:	2105      	movs	r1, #5
 801f1a4:	6978      	ldr	r0, [r7, #20]
 801f1a6:	f7f3 fde5 	bl	8012d74 <netbuf_alloc>
 801f1aa:	6138      	str	r0, [r7, #16]
			if (!data)
 801f1ac:	693b      	ldr	r3, [r7, #16]
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d106      	bne.n	801f1c0 <UDP_Response+0x70>
			{
				printf("responder netbuf_alloc() failed");
 801f1b2:	4810      	ldr	r0, [pc, #64]	@ (801f1f4 <UDP_Response+0xa4>)
 801f1b4:	f000 ff46 	bl	8020044 <iprintf>
			    netbuf_delete(buf);
 801f1b8:	6978      	ldr	r0, [r7, #20]
 801f1ba:	f7f3 fdbb 	bl	8012d34 <netbuf_delete>
			    continue;
 801f1be:	e010      	b.n	801f1e2 <UDP_Response+0x92>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 801f1c0:	68ba      	ldr	r2, [r7, #8]
 801f1c2:	693b      	ldr	r3, [r7, #16]
 801f1c4:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 801f1c6:	693b      	ldr	r3, [r7, #16]
 801f1c8:	3304      	adds	r3, #4
 801f1ca:	7b3a      	ldrb	r2, [r7, #12]
 801f1cc:	701a      	strb	r2, [r3, #0]

			// Send response
			netconn_sendto(conn_send, buf, &out_msg.addr, out_msg.port);
 801f1ce:	4b05      	ldr	r3, [pc, #20]	@ (801f1e4 <UDP_Response+0x94>)
 801f1d0:	6818      	ldr	r0, [r3, #0]
 801f1d2:	88bb      	ldrh	r3, [r7, #4]
 801f1d4:	463a      	mov	r2, r7
 801f1d6:	6979      	ldr	r1, [r7, #20]
 801f1d8:	f7f2 faba 	bl	8011750 <netconn_sendto>
			netbuf_delete(buf);
 801f1dc:	6978      	ldr	r0, [r7, #20]
 801f1de:	f7f3 fda9 	bl	8012d34 <netbuf_delete>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 801f1e2:	e7c9      	b.n	801f178 <UDP_Response+0x28>
 801f1e4:	2002d718 	.word	0x2002d718
 801f1e8:	08024718 	.word	0x08024718
 801f1ec:	200002e0 	.word	0x200002e0
 801f1f0:	0802473c 	.word	0x0802473c
 801f1f4:	0802475c 	.word	0x0802475c

0801f1f8 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801f1f8:	b580      	push	{r7, lr}
 801f1fa:	b0ca      	sub	sp, #296	@ 0x128
 801f1fc:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	i2c1TxSem = osSemaphoreNew(1, 0, NULL);
 801f1fe:	2200      	movs	r2, #0
 801f200:	2100      	movs	r1, #0
 801f202:	2001      	movs	r0, #1
 801f204:	f7ee f92e 	bl	800d464 <osSemaphoreNew>
 801f208:	4603      	mov	r3, r0
 801f20a:	4a45      	ldr	r2, [pc, #276]	@ (801f320 <I2cTestTask+0x128>)
 801f20c:	6013      	str	r3, [r2, #0]
	i2c1RxSem = osSemaphoreNew(1, 0, NULL);
 801f20e:	2200      	movs	r2, #0
 801f210:	2100      	movs	r1, #0
 801f212:	2001      	movs	r0, #1
 801f214:	f7ee f926 	bl	800d464 <osSemaphoreNew>
 801f218:	4603      	mov	r3, r0
 801f21a:	4a42      	ldr	r2, [pc, #264]	@ (801f324 <I2cTestTask+0x12c>)
 801f21c:	6013      	str	r3, [r2, #0]
	i2c2TxSem = osSemaphoreNew(1, 0, NULL);
 801f21e:	2200      	movs	r2, #0
 801f220:	2100      	movs	r1, #0
 801f222:	2001      	movs	r0, #1
 801f224:	f7ee f91e 	bl	800d464 <osSemaphoreNew>
 801f228:	4603      	mov	r3, r0
 801f22a:	4a3f      	ldr	r2, [pc, #252]	@ (801f328 <I2cTestTask+0x130>)
 801f22c:	6013      	str	r3, [r2, #0]
	i2c2RxSem = osSemaphoreNew(1, 0, NULL);
 801f22e:	2200      	movs	r2, #0
 801f230:	2100      	movs	r1, #0
 801f232:	2001      	movs	r0, #1
 801f234:	f7ee f916 	bl	800d464 <osSemaphoreNew>
 801f238:	4603      	mov	r3, r0
 801f23a:	4a3c      	ldr	r2, [pc, #240]	@ (801f32c <I2cTestTask+0x134>)
 801f23c:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f23e:	4b3c      	ldr	r3, [pc, #240]	@ (801f330 <I2cTestTask+0x138>)
 801f240:	6818      	ldr	r0, [r3, #0]
 801f242:	f107 0114 	add.w	r1, r7, #20
 801f246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f24a:	2200      	movs	r2, #0
 801f24c:	f7ee fb94 	bl	800d978 <osMessageQueueGet>
 801f250:	4603      	mov	r3, r0
 801f252:	2b00      	cmp	r3, #0
 801f254:	d15f      	bne.n	801f316 <I2cTestTask+0x11e>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f256:	2300      	movs	r3, #0
 801f258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f25c:	e017      	b.n	801f28e <I2cTestTask+0x96>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f25e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f262:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f266:	7b5a      	ldrb	r2, [r3, #13]
 801f268:	f107 0314 	add.w	r3, r7, #20
 801f26c:	330e      	adds	r3, #14
 801f26e:	4611      	mov	r1, r2
 801f270:	4618      	mov	r0, r3
 801f272:	f000 f867 	bl	801f344 <I2C_Test_Perform>
 801f276:	4603      	mov	r3, r0
 801f278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f27c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f280:	2bff      	cmp	r3, #255	@ 0xff
 801f282:	d00e      	beq.n	801f2a2 <I2cTestTask+0xaa>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f284:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f288:	3301      	adds	r3, #1
 801f28a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f28e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f292:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f296:	7b1b      	ldrb	r3, [r3, #12]
 801f298:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f29c:	429a      	cmp	r2, r3
 801f29e:	d3de      	bcc.n	801f25e <I2cTestTask+0x66>
 801f2a0:	e000      	b.n	801f2a4 <I2cTestTask+0xac>
					break;
 801f2a2:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f2a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f2ac:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f2b0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f2b4:	6812      	ldr	r2, [r2, #0]
 801f2b6:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f2b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f2c0:	889a      	ldrh	r2, [r3, #4]
 801f2c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f2ca:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f2cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2d0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f2d4:	689a      	ldr	r2, [r3, #8]
 801f2d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2da:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f2de:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f2e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f2e8:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f2ec:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("I2C test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801f2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2f2:	2b01      	cmp	r3, #1
 801f2f4:	d101      	bne.n	801f2fa <I2cTestTask+0x102>
 801f2f6:	4b0f      	ldr	r3, [pc, #60]	@ (801f334 <I2cTestTask+0x13c>)
 801f2f8:	e000      	b.n	801f2fc <I2cTestTask+0x104>
 801f2fa:	4b0f      	ldr	r3, [pc, #60]	@ (801f338 <I2cTestTask+0x140>)
 801f2fc:	4619      	mov	r1, r3
 801f2fe:	480f      	ldr	r0, [pc, #60]	@ (801f33c <I2cTestTask+0x144>)
 801f300:	f000 fea0 	bl	8020044 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f304:	4b0e      	ldr	r3, [pc, #56]	@ (801f340 <I2cTestTask+0x148>)
 801f306:	6818      	ldr	r0, [r3, #0]
 801f308:	1d39      	adds	r1, r7, #4
 801f30a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f30e:	2200      	movs	r2, #0
 801f310:	f7ee fabe 	bl	800d890 <osMessageQueuePut>
 801f314:	e793      	b.n	801f23e <I2cTestTask+0x46>
		}
		else osDelay(1);
 801f316:	2001      	movs	r0, #1
 801f318:	f7ed ff2e 	bl	800d178 <osDelay>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f31c:	e78f      	b.n	801f23e <I2cTestTask+0x46>
 801f31e:	bf00      	nop
 801f320:	2002d71c 	.word	0x2002d71c
 801f324:	2002d720 	.word	0x2002d720
 801f328:	2002d724 	.word	0x2002d724
 801f32c:	2002d728 	.word	0x2002d728
 801f330:	200002e8 	.word	0x200002e8
 801f334:	0802477c 	.word	0x0802477c
 801f338:	08024784 	.word	0x08024784
 801f33c:	0802478c 	.word	0x0802478c
 801f340:	200002e0 	.word	0x200002e0

0801f344 <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f344:	b590      	push	{r4, r7, lr}
 801f346:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f34a:	af00      	add	r7, sp, #0
 801f34c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f350:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f354:	6018      	str	r0, [r3, #0]
 801f356:	460a      	mov	r2, r1
 801f358:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f35c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f360:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801f362:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f366:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f36a:	781b      	ldrb	r3, [r3, #0]
 801f36c:	b29a      	uxth	r2, r3
 801f36e:	f107 0308 	add.w	r3, r7, #8
 801f372:	4619      	mov	r1, r3
 801f374:	4854      	ldr	r0, [pc, #336]	@ (801f4c8 <I2C_Test_Perform+0x184>)
 801f376:	f7e6 fbd1 	bl	8005b1c <HAL_I2C_Slave_Receive_DMA>
 801f37a:	4603      	mov	r3, r0
 801f37c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f380:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f384:	2b00      	cmp	r3, #0
 801f386:	d004      	beq.n	801f392 <I2C_Test_Perform+0x4e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
 801f388:	4850      	ldr	r0, [pc, #320]	@ (801f4cc <I2C_Test_Perform+0x188>)
 801f38a:	f000 fec3 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f38e:	23ff      	movs	r3, #255	@ 0xff
 801f390:	e095      	b.n	801f4be <I2C_Test_Perform+0x17a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801f392:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f396:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f39a:	781b      	ldrb	r3, [r3, #0]
 801f39c:	b29b      	uxth	r3, r3
 801f39e:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801f3a2:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801f3a6:	6812      	ldr	r2, [r2, #0]
 801f3a8:	2114      	movs	r1, #20
 801f3aa:	4849      	ldr	r0, [pc, #292]	@ (801f4d0 <I2C_Test_Perform+0x18c>)
 801f3ac:	f7e6 f8c6 	bl	800553c <HAL_I2C_Master_Transmit_DMA>
 801f3b0:	4603      	mov	r3, r0
 801f3b2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f3b6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f3ba:	2b00      	cmp	r3, #0
 801f3bc:	d004      	beq.n	801f3c8 <I2C_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
 801f3be:	4845      	ldr	r0, [pc, #276]	@ (801f4d4 <I2C_Test_Perform+0x190>)
 801f3c0:	f000 fea8 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f3c4:	23ff      	movs	r3, #255	@ 0xff
 801f3c6:	e07a      	b.n	801f4be <I2C_Test_Perform+0x17a>
	}
	if (osSemaphoreAcquire(i2c1TxSem, 10) != osOK || osSemaphoreAcquire(i2c2RxSem, 10) != osOK)
 801f3c8:	4b43      	ldr	r3, [pc, #268]	@ (801f4d8 <I2C_Test_Perform+0x194>)
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	210a      	movs	r1, #10
 801f3ce:	4618      	mov	r0, r3
 801f3d0:	f7ee f8e4 	bl	800d59c <osSemaphoreAcquire>
 801f3d4:	4603      	mov	r3, r0
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	d108      	bne.n	801f3ec <I2C_Test_Perform+0xa8>
 801f3da:	4b40      	ldr	r3, [pc, #256]	@ (801f4dc <I2C_Test_Perform+0x198>)
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	210a      	movs	r1, #10
 801f3e0:	4618      	mov	r0, r3
 801f3e2:	f7ee f8db 	bl	800d59c <osSemaphoreAcquire>
 801f3e6:	4603      	mov	r3, r0
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	d004      	beq.n	801f3f6 <I2C_Test_Perform+0xb2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 semaphore timeout\n");
 801f3ec:	483c      	ldr	r0, [pc, #240]	@ (801f4e0 <I2C_Test_Perform+0x19c>)
 801f3ee:	f000 fe91 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f3f2:	23ff      	movs	r3, #255	@ 0xff
 801f3f4:	e063      	b.n	801f4be <I2C_Test_Perform+0x17a>
	}

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801f3f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f3fa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f3fe:	781b      	ldrb	r3, [r3, #0]
 801f400:	b29b      	uxth	r3, r3
 801f402:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f406:	2114      	movs	r1, #20
 801f408:	4831      	ldr	r0, [pc, #196]	@ (801f4d0 <I2C_Test_Perform+0x18c>)
 801f40a:	f7e6 f9ab 	bl	8005764 <HAL_I2C_Master_Receive_DMA>
 801f40e:	4603      	mov	r3, r0
 801f410:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f414:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d004      	beq.n	801f426 <I2C_Test_Perform+0xe2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
 801f41c:	4831      	ldr	r0, [pc, #196]	@ (801f4e4 <I2C_Test_Perform+0x1a0>)
 801f41e:	f000 fe79 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f422:	23ff      	movs	r3, #255	@ 0xff
 801f424:	e04b      	b.n	801f4be <I2C_Test_Perform+0x17a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801f426:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f42a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f42e:	781b      	ldrb	r3, [r3, #0]
 801f430:	b29a      	uxth	r2, r3
 801f432:	f107 0308 	add.w	r3, r7, #8
 801f436:	4619      	mov	r1, r3
 801f438:	4823      	ldr	r0, [pc, #140]	@ (801f4c8 <I2C_Test_Perform+0x184>)
 801f43a:	f7e6 fa83 	bl	8005944 <HAL_I2C_Slave_Transmit_DMA>
 801f43e:	4603      	mov	r3, r0
 801f440:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f444:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d004      	beq.n	801f456 <I2C_Test_Perform+0x112>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
 801f44c:	4826      	ldr	r0, [pc, #152]	@ (801f4e8 <I2C_Test_Perform+0x1a4>)
 801f44e:	f000 fe61 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f452:	23ff      	movs	r3, #255	@ 0xff
 801f454:	e033      	b.n	801f4be <I2C_Test_Perform+0x17a>
	}
	if (osSemaphoreAcquire(i2c2TxSem, 10) != osOK || osSemaphoreAcquire(i2c1RxSem, 10) != osOK)
 801f456:	4b25      	ldr	r3, [pc, #148]	@ (801f4ec <I2C_Test_Perform+0x1a8>)
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	210a      	movs	r1, #10
 801f45c:	4618      	mov	r0, r3
 801f45e:	f7ee f89d 	bl	800d59c <osSemaphoreAcquire>
 801f462:	4603      	mov	r3, r0
 801f464:	2b00      	cmp	r3, #0
 801f466:	d108      	bne.n	801f47a <I2C_Test_Perform+0x136>
 801f468:	4b21      	ldr	r3, [pc, #132]	@ (801f4f0 <I2C_Test_Perform+0x1ac>)
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	210a      	movs	r1, #10
 801f46e:	4618      	mov	r0, r3
 801f470:	f7ee f894 	bl	800d59c <osSemaphoreAcquire>
 801f474:	4603      	mov	r3, r0
 801f476:	2b00      	cmp	r3, #0
 801f478:	d004      	beq.n	801f484 <I2C_Test_Perform+0x140>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 semaphore timeout\n");
 801f47a:	481e      	ldr	r0, [pc, #120]	@ (801f4f4 <I2C_Test_Perform+0x1b0>)
 801f47c:	f000 fe4a 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f480:	23ff      	movs	r3, #255	@ 0xff
 801f482:	e01c      	b.n	801f4be <I2C_Test_Perform+0x17a>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801f484:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f488:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f48c:	781c      	ldrb	r4, [r3, #0]
 801f48e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f492:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f496:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f49a:	7819      	ldrb	r1, [r3, #0]
 801f49c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f4a0:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f4a4:	4623      	mov	r3, r4
 801f4a6:	6800      	ldr	r0, [r0, #0]
 801f4a8:	f7ff fd4e 	bl	801ef48 <Match_CRC>
 801f4ac:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f4b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f4b4:	2b01      	cmp	r3, #1
 801f4b6:	d101      	bne.n	801f4bc <I2C_Test_Perform+0x178>
 801f4b8:	2301      	movs	r3, #1
 801f4ba:	e000      	b.n	801f4be <I2C_Test_Perform+0x17a>

	return TEST_FAILED;
 801f4bc:	23ff      	movs	r3, #255	@ 0xff
}
 801f4be:	4618      	mov	r0, r3
 801f4c0:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f4c4:	46bd      	mov	sp, r7
 801f4c6:	bd90      	pop	{r4, r7, pc}
 801f4c8:	2000034c 	.word	0x2000034c
 801f4cc:	0802479c 	.word	0x0802479c
 801f4d0:	200002f8 	.word	0x200002f8
 801f4d4:	080247b4 	.word	0x080247b4
 801f4d8:	2002d71c 	.word	0x2002d71c
 801f4dc:	2002d728 	.word	0x2002d728
 801f4e0:	080247cc 	.word	0x080247cc
 801f4e4:	080247ec 	.word	0x080247ec
 801f4e8:	08024804 	.word	0x08024804
 801f4ec:	2002d724 	.word	0x2002d724
 801f4f0:	2002d720 	.word	0x2002d720
 801f4f4:	0802481c 	.word	0x0802481c

0801f4f8 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f4f8:	b580      	push	{r7, lr}
 801f4fa:	b082      	sub	sp, #8
 801f4fc:	af00      	add	r7, sp, #0
 801f4fe:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1TxSem);
 801f500:	687b      	ldr	r3, [r7, #4]
 801f502:	4a06      	ldr	r2, [pc, #24]	@ (801f51c <HAL_I2C_MasterTxCpltCallback+0x24>)
 801f504:	4293      	cmp	r3, r2
 801f506:	d104      	bne.n	801f512 <HAL_I2C_MasterTxCpltCallback+0x1a>
 801f508:	4b05      	ldr	r3, [pc, #20]	@ (801f520 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	4618      	mov	r0, r3
 801f50e:	f7ee f8ab 	bl	800d668 <osSemaphoreRelease>
}
 801f512:	bf00      	nop
 801f514:	3708      	adds	r7, #8
 801f516:	46bd      	mov	sp, r7
 801f518:	bd80      	pop	{r7, pc}
 801f51a:	bf00      	nop
 801f51c:	200002f8 	.word	0x200002f8
 801f520:	2002d71c 	.word	0x2002d71c

0801f524 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f524:	b580      	push	{r7, lr}
 801f526:	b082      	sub	sp, #8
 801f528:	af00      	add	r7, sp, #0
 801f52a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1RxSem);
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	4a06      	ldr	r2, [pc, #24]	@ (801f548 <HAL_I2C_MasterRxCpltCallback+0x24>)
 801f530:	4293      	cmp	r3, r2
 801f532:	d104      	bne.n	801f53e <HAL_I2C_MasterRxCpltCallback+0x1a>
 801f534:	4b05      	ldr	r3, [pc, #20]	@ (801f54c <HAL_I2C_MasterRxCpltCallback+0x28>)
 801f536:	681b      	ldr	r3, [r3, #0]
 801f538:	4618      	mov	r0, r3
 801f53a:	f7ee f895 	bl	800d668 <osSemaphoreRelease>
}
 801f53e:	bf00      	nop
 801f540:	3708      	adds	r7, #8
 801f542:	46bd      	mov	sp, r7
 801f544:	bd80      	pop	{r7, pc}
 801f546:	bf00      	nop
 801f548:	200002f8 	.word	0x200002f8
 801f54c:	2002d720 	.word	0x2002d720

0801f550 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f550:	b580      	push	{r7, lr}
 801f552:	b082      	sub	sp, #8
 801f554:	af00      	add	r7, sp, #0
 801f556:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2TxSem);
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	4a06      	ldr	r2, [pc, #24]	@ (801f574 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801f55c:	4293      	cmp	r3, r2
 801f55e:	d104      	bne.n	801f56a <HAL_I2C_SlaveTxCpltCallback+0x1a>
 801f560:	4b05      	ldr	r3, [pc, #20]	@ (801f578 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	4618      	mov	r0, r3
 801f566:	f7ee f87f 	bl	800d668 <osSemaphoreRelease>
}
 801f56a:	bf00      	nop
 801f56c:	3708      	adds	r7, #8
 801f56e:	46bd      	mov	sp, r7
 801f570:	bd80      	pop	{r7, pc}
 801f572:	bf00      	nop
 801f574:	2000034c 	.word	0x2000034c
 801f578:	2002d724 	.word	0x2002d724

0801f57c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f57c:	b580      	push	{r7, lr}
 801f57e:	b082      	sub	sp, #8
 801f580:	af00      	add	r7, sp, #0
 801f582:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2RxSem);
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	4a06      	ldr	r2, [pc, #24]	@ (801f5a0 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801f588:	4293      	cmp	r3, r2
 801f58a:	d104      	bne.n	801f596 <HAL_I2C_SlaveRxCpltCallback+0x1a>
 801f58c:	4b05      	ldr	r3, [pc, #20]	@ (801f5a4 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801f58e:	681b      	ldr	r3, [r3, #0]
 801f590:	4618      	mov	r0, r3
 801f592:	f7ee f869 	bl	800d668 <osSemaphoreRelease>
}
 801f596:	bf00      	nop
 801f598:	3708      	adds	r7, #8
 801f59a:	46bd      	mov	sp, r7
 801f59c:	bd80      	pop	{r7, pc}
 801f59e:	bf00      	nop
 801f5a0:	2000034c 	.word	0x2000034c
 801f5a4:	2002d728 	.word	0x2002d728

0801f5a8 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 801f5a8:	b580      	push	{r7, lr}
 801f5aa:	b0ca      	sub	sp, #296	@ 0x128
 801f5ac:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	spi1TxSem = osSemaphoreNew(1, 0, NULL);
 801f5ae:	2200      	movs	r2, #0
 801f5b0:	2100      	movs	r1, #0
 801f5b2:	2001      	movs	r0, #1
 801f5b4:	f7ed ff56 	bl	800d464 <osSemaphoreNew>
 801f5b8:	4603      	mov	r3, r0
 801f5ba:	4a45      	ldr	r2, [pc, #276]	@ (801f6d0 <SpiTestTask+0x128>)
 801f5bc:	6013      	str	r3, [r2, #0]
	spi1RxSem = osSemaphoreNew(1, 0, NULL);
 801f5be:	2200      	movs	r2, #0
 801f5c0:	2100      	movs	r1, #0
 801f5c2:	2001      	movs	r0, #1
 801f5c4:	f7ed ff4e 	bl	800d464 <osSemaphoreNew>
 801f5c8:	4603      	mov	r3, r0
 801f5ca:	4a42      	ldr	r2, [pc, #264]	@ (801f6d4 <SpiTestTask+0x12c>)
 801f5cc:	6013      	str	r3, [r2, #0]
	spi4TxSem = osSemaphoreNew(1, 0, NULL);
 801f5ce:	2200      	movs	r2, #0
 801f5d0:	2100      	movs	r1, #0
 801f5d2:	2001      	movs	r0, #1
 801f5d4:	f7ed ff46 	bl	800d464 <osSemaphoreNew>
 801f5d8:	4603      	mov	r3, r0
 801f5da:	4a3f      	ldr	r2, [pc, #252]	@ (801f6d8 <SpiTestTask+0x130>)
 801f5dc:	6013      	str	r3, [r2, #0]
	spi4RxSem = osSemaphoreNew(1, 0, NULL);
 801f5de:	2200      	movs	r2, #0
 801f5e0:	2100      	movs	r1, #0
 801f5e2:	2001      	movs	r0, #1
 801f5e4:	f7ed ff3e 	bl	800d464 <osSemaphoreNew>
 801f5e8:	4603      	mov	r3, r0
 801f5ea:	4a3c      	ldr	r2, [pc, #240]	@ (801f6dc <SpiTestTask+0x134>)
 801f5ec:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f5ee:	4b3c      	ldr	r3, [pc, #240]	@ (801f6e0 <SpiTestTask+0x138>)
 801f5f0:	6818      	ldr	r0, [r3, #0]
 801f5f2:	f107 0114 	add.w	r1, r7, #20
 801f5f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f5fa:	2200      	movs	r2, #0
 801f5fc:	f7ee f9bc 	bl	800d978 <osMessageQueueGet>
 801f600:	4603      	mov	r3, r0
 801f602:	2b00      	cmp	r3, #0
 801f604:	d15f      	bne.n	801f6c6 <SpiTestTask+0x11e>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f606:	2300      	movs	r3, #0
 801f608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f60c:	e017      	b.n	801f63e <SpiTestTask+0x96>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f60e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f612:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f616:	7b5a      	ldrb	r2, [r3, #13]
 801f618:	f107 0314 	add.w	r3, r7, #20
 801f61c:	330e      	adds	r3, #14
 801f61e:	4611      	mov	r1, r2
 801f620:	4618      	mov	r0, r3
 801f622:	f000 f867 	bl	801f6f4 <SPI_Test_Perform>
 801f626:	4603      	mov	r3, r0
 801f628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f62c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f630:	2bff      	cmp	r3, #255	@ 0xff
 801f632:	d00e      	beq.n	801f652 <SpiTestTask+0xaa>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f634:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f638:	3301      	adds	r3, #1
 801f63a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f63e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f642:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f646:	7b1b      	ldrb	r3, [r3, #12]
 801f648:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f64c:	429a      	cmp	r2, r3
 801f64e:	d3de      	bcc.n	801f60e <SpiTestTask+0x66>
 801f650:	e000      	b.n	801f654 <SpiTestTask+0xac>
					break;
 801f652:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f654:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f658:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f65c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f660:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f664:	6812      	ldr	r2, [r2, #0]
 801f666:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f668:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f66c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f670:	889a      	ldrh	r2, [r3, #4]
 801f672:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f676:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f67a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f67c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f680:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f684:	689a      	ldr	r2, [r3, #8]
 801f686:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f68a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f68e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f690:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f694:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f698:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f69c:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("SPI test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801f69e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f6a2:	2b01      	cmp	r3, #1
 801f6a4:	d101      	bne.n	801f6aa <SpiTestTask+0x102>
 801f6a6:	4b0f      	ldr	r3, [pc, #60]	@ (801f6e4 <SpiTestTask+0x13c>)
 801f6a8:	e000      	b.n	801f6ac <SpiTestTask+0x104>
 801f6aa:	4b0f      	ldr	r3, [pc, #60]	@ (801f6e8 <SpiTestTask+0x140>)
 801f6ac:	4619      	mov	r1, r3
 801f6ae:	480f      	ldr	r0, [pc, #60]	@ (801f6ec <SpiTestTask+0x144>)
 801f6b0:	f000 fcc8 	bl	8020044 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f6b4:	4b0e      	ldr	r3, [pc, #56]	@ (801f6f0 <SpiTestTask+0x148>)
 801f6b6:	6818      	ldr	r0, [r3, #0]
 801f6b8:	1d39      	adds	r1, r7, #4
 801f6ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f6be:	2200      	movs	r2, #0
 801f6c0:	f7ee f8e6 	bl	800d890 <osMessageQueuePut>
 801f6c4:	e793      	b.n	801f5ee <SpiTestTask+0x46>
		}
		else osDelay(1);
 801f6c6:	2001      	movs	r0, #1
 801f6c8:	f7ed fd56 	bl	800d178 <osDelay>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f6cc:	e78f      	b.n	801f5ee <SpiTestTask+0x46>
 801f6ce:	bf00      	nop
 801f6d0:	2002d72c 	.word	0x2002d72c
 801f6d4:	2002d730 	.word	0x2002d730
 801f6d8:	2002d734 	.word	0x2002d734
 801f6dc:	2002d738 	.word	0x2002d738
 801f6e0:	200002ec 	.word	0x200002ec
 801f6e4:	0802483c 	.word	0x0802483c
 801f6e8:	08024844 	.word	0x08024844
 801f6ec:	0802484c 	.word	0x0802484c
 801f6f0:	200002e0 	.word	0x200002e0

0801f6f4 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f6f4:	b590      	push	{r4, r7, lr}
 801f6f6:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f6fa:	af00      	add	r7, sp, #0
 801f6fc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f700:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f704:	6018      	str	r0, [r3, #0]
 801f706:	460a      	mov	r2, r1
 801f708:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f70c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f710:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// reset SPI before first Xfer
	HAL_SPI_Abort(&hspi1);
 801f712:	485f      	ldr	r0, [pc, #380]	@ (801f890 <SPI_Test_Perform+0x19c>)
 801f714:	f7e9 fdf6 	bl	8009304 <HAL_SPI_Abort>
	HAL_SPI_Abort(&hspi4);
 801f718:	485e      	ldr	r0, [pc, #376]	@ (801f894 <SPI_Test_Perform+0x1a0>)
 801f71a:	f7e9 fdf3 	bl	8009304 <HAL_SPI_Abort>

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 801f71e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f722:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f726:	781b      	ldrb	r3, [r3, #0]
 801f728:	b29a      	uxth	r2, r3
 801f72a:	f107 0308 	add.w	r3, r7, #8
 801f72e:	4619      	mov	r1, r3
 801f730:	4858      	ldr	r0, [pc, #352]	@ (801f894 <SPI_Test_Perform+0x1a0>)
 801f732:	f7e9 fb41 	bl	8008db8 <HAL_SPI_Receive_DMA>
 801f736:	4603      	mov	r3, r0
 801f738:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f73c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f740:	2b00      	cmp	r3, #0
 801f742:	d004      	beq.n	801f74e <SPI_Test_Perform+0x5a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
 801f744:	4854      	ldr	r0, [pc, #336]	@ (801f898 <SPI_Test_Perform+0x1a4>)
 801f746:	f000 fce5 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f74a:	23ff      	movs	r3, #255	@ 0xff
 801f74c:	e09a      	b.n	801f884 <SPI_Test_Perform+0x190>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 801f74e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f752:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f756:	781b      	ldrb	r3, [r3, #0]
 801f758:	b29a      	uxth	r2, r3
 801f75a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f75e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f762:	6819      	ldr	r1, [r3, #0]
 801f764:	484a      	ldr	r0, [pc, #296]	@ (801f890 <SPI_Test_Perform+0x19c>)
 801f766:	f7e9 fa39 	bl	8008bdc <HAL_SPI_Transmit_DMA>
 801f76a:	4603      	mov	r3, r0
 801f76c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f770:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f774:	2b00      	cmp	r3, #0
 801f776:	d004      	beq.n	801f782 <SPI_Test_Perform+0x8e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
 801f778:	4848      	ldr	r0, [pc, #288]	@ (801f89c <SPI_Test_Perform+0x1a8>)
 801f77a:	f000 fccb 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f77e:	23ff      	movs	r3, #255	@ 0xff
 801f780:	e080      	b.n	801f884 <SPI_Test_Perform+0x190>
	}
	if (osSemaphoreAcquire(spi1TxSem, 100) != osOK || osSemaphoreAcquire(spi4RxSem, 100) != osOK)
 801f782:	4b47      	ldr	r3, [pc, #284]	@ (801f8a0 <SPI_Test_Perform+0x1ac>)
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	2164      	movs	r1, #100	@ 0x64
 801f788:	4618      	mov	r0, r3
 801f78a:	f7ed ff07 	bl	800d59c <osSemaphoreAcquire>
 801f78e:	4603      	mov	r3, r0
 801f790:	2b00      	cmp	r3, #0
 801f792:	d108      	bne.n	801f7a6 <SPI_Test_Perform+0xb2>
 801f794:	4b43      	ldr	r3, [pc, #268]	@ (801f8a4 <SPI_Test_Perform+0x1b0>)
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	2164      	movs	r1, #100	@ 0x64
 801f79a:	4618      	mov	r0, r3
 801f79c:	f7ed fefe 	bl	800d59c <osSemaphoreAcquire>
 801f7a0:	4603      	mov	r3, r0
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d004      	beq.n	801f7b0 <SPI_Test_Perform+0xbc>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 semaphore timeout\n");
 801f7a6:	4840      	ldr	r0, [pc, #256]	@ (801f8a8 <SPI_Test_Perform+0x1b4>)
 801f7a8:	f000 fcb4 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f7ac:	23ff      	movs	r3, #255	@ 0xff
 801f7ae:	e069      	b.n	801f884 <SPI_Test_Perform+0x190>
	}

	// reset SPI before second Xfer
	HAL_SPI_Abort(&hspi1);
 801f7b0:	4837      	ldr	r0, [pc, #220]	@ (801f890 <SPI_Test_Perform+0x19c>)
 801f7b2:	f7e9 fda7 	bl	8009304 <HAL_SPI_Abort>
	HAL_SPI_Abort(&hspi4);
 801f7b6:	4837      	ldr	r0, [pc, #220]	@ (801f894 <SPI_Test_Perform+0x1a0>)
 801f7b8:	f7e9 fda4 	bl	8009304 <HAL_SPI_Abort>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 801f7bc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f7c0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f7c4:	781b      	ldrb	r3, [r3, #0]
 801f7c6:	b29a      	uxth	r2, r3
 801f7c8:	f107 0308 	add.w	r3, r7, #8
 801f7cc:	4619      	mov	r1, r3
 801f7ce:	4831      	ldr	r0, [pc, #196]	@ (801f894 <SPI_Test_Perform+0x1a0>)
 801f7d0:	f7e9 fa04 	bl	8008bdc <HAL_SPI_Transmit_DMA>
 801f7d4:	4603      	mov	r3, r0
 801f7d6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f7da:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	d004      	beq.n	801f7ec <SPI_Test_Perform+0xf8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
 801f7e2:	4832      	ldr	r0, [pc, #200]	@ (801f8ac <SPI_Test_Perform+0x1b8>)
 801f7e4:	f000 fc96 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f7e8:	23ff      	movs	r3, #255	@ 0xff
 801f7ea:	e04b      	b.n	801f884 <SPI_Test_Perform+0x190>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 801f7ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f7f0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f7f4:	781b      	ldrb	r3, [r3, #0]
 801f7f6:	b29a      	uxth	r2, r3
 801f7f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801f7fc:	4619      	mov	r1, r3
 801f7fe:	4824      	ldr	r0, [pc, #144]	@ (801f890 <SPI_Test_Perform+0x19c>)
 801f800:	f7e9 fada 	bl	8008db8 <HAL_SPI_Receive_DMA>
 801f804:	4603      	mov	r3, r0
 801f806:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f80a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d004      	beq.n	801f81c <SPI_Test_Perform+0x128>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
 801f812:	4827      	ldr	r0, [pc, #156]	@ (801f8b0 <SPI_Test_Perform+0x1bc>)
 801f814:	f000 fc7e 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f818:	23ff      	movs	r3, #255	@ 0xff
 801f81a:	e033      	b.n	801f884 <SPI_Test_Perform+0x190>
	}
	if (osSemaphoreAcquire(spi4TxSem, 10) != osOK || osSemaphoreAcquire(spi1RxSem, 10) != osOK)
 801f81c:	4b25      	ldr	r3, [pc, #148]	@ (801f8b4 <SPI_Test_Perform+0x1c0>)
 801f81e:	681b      	ldr	r3, [r3, #0]
 801f820:	210a      	movs	r1, #10
 801f822:	4618      	mov	r0, r3
 801f824:	f7ed feba 	bl	800d59c <osSemaphoreAcquire>
 801f828:	4603      	mov	r3, r0
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d108      	bne.n	801f840 <SPI_Test_Perform+0x14c>
 801f82e:	4b22      	ldr	r3, [pc, #136]	@ (801f8b8 <SPI_Test_Perform+0x1c4>)
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	210a      	movs	r1, #10
 801f834:	4618      	mov	r0, r3
 801f836:	f7ed feb1 	bl	800d59c <osSemaphoreAcquire>
 801f83a:	4603      	mov	r3, r0
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	d004      	beq.n	801f84a <SPI_Test_Perform+0x156>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 semaphore timeout\n");
 801f840:	481e      	ldr	r0, [pc, #120]	@ (801f8bc <SPI_Test_Perform+0x1c8>)
 801f842:	f000 fc67 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801f846:	23ff      	movs	r3, #255	@ 0xff
 801f848:	e01c      	b.n	801f884 <SPI_Test_Perform+0x190>
	}

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 801f84a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f84e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f852:	781c      	ldrb	r4, [r3, #0]
 801f854:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f858:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f85c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f860:	7819      	ldrb	r1, [r3, #0]
 801f862:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f866:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f86a:	4623      	mov	r3, r4
 801f86c:	6800      	ldr	r0, [r0, #0]
 801f86e:	f7ff fb6b 	bl	801ef48 <Match_CRC>
 801f872:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f876:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f87a:	2b01      	cmp	r3, #1
 801f87c:	d101      	bne.n	801f882 <SPI_Test_Perform+0x18e>
 801f87e:	2301      	movs	r3, #1
 801f880:	e000      	b.n	801f884 <SPI_Test_Perform+0x190>

	return TEST_FAILED;
 801f882:	23ff      	movs	r3, #255	@ 0xff
}
 801f884:	4618      	mov	r0, r3
 801f886:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f88a:	46bd      	mov	sp, r7
 801f88c:	bd90      	pop	{r4, r7, pc}
 801f88e:	bf00      	nop
 801f890:	20000520 	.word	0x20000520
 801f894:	20000584 	.word	0x20000584
 801f898:	0802485c 	.word	0x0802485c
 801f89c:	08024874 	.word	0x08024874
 801f8a0:	2002d72c 	.word	0x2002d72c
 801f8a4:	2002d738 	.word	0x2002d738
 801f8a8:	0802488c 	.word	0x0802488c
 801f8ac:	080248ac 	.word	0x080248ac
 801f8b0:	080248c4 	.word	0x080248c4
 801f8b4:	2002d734 	.word	0x2002d734
 801f8b8:	2002d730 	.word	0x2002d730
 801f8bc:	080248dc 	.word	0x080248dc

0801f8c0 <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b082      	sub	sp, #8
 801f8c4:	af00      	add	r7, sp, #0
 801f8c6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1TxSem);
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	4a0a      	ldr	r2, [pc, #40]	@ (801f8f4 <HAL_SPI_TxCpltCallback+0x34>)
 801f8cc:	4293      	cmp	r3, r2
 801f8ce:	d104      	bne.n	801f8da <HAL_SPI_TxCpltCallback+0x1a>
 801f8d0:	4b09      	ldr	r3, [pc, #36]	@ (801f8f8 <HAL_SPI_TxCpltCallback+0x38>)
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	4618      	mov	r0, r3
 801f8d6:	f7ed fec7 	bl	800d668 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4TxSem);
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	4a07      	ldr	r2, [pc, #28]	@ (801f8fc <HAL_SPI_TxCpltCallback+0x3c>)
 801f8de:	4293      	cmp	r3, r2
 801f8e0:	d104      	bne.n	801f8ec <HAL_SPI_TxCpltCallback+0x2c>
 801f8e2:	4b07      	ldr	r3, [pc, #28]	@ (801f900 <HAL_SPI_TxCpltCallback+0x40>)
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	4618      	mov	r0, r3
 801f8e8:	f7ed febe 	bl	800d668 <osSemaphoreRelease>
}
 801f8ec:	bf00      	nop
 801f8ee:	3708      	adds	r7, #8
 801f8f0:	46bd      	mov	sp, r7
 801f8f2:	bd80      	pop	{r7, pc}
 801f8f4:	20000520 	.word	0x20000520
 801f8f8:	2002d72c 	.word	0x2002d72c
 801f8fc:	20000584 	.word	0x20000584
 801f900:	2002d734 	.word	0x2002d734

0801f904 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801f904:	b580      	push	{r7, lr}
 801f906:	b082      	sub	sp, #8
 801f908:	af00      	add	r7, sp, #0
 801f90a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1RxSem);
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	4a0a      	ldr	r2, [pc, #40]	@ (801f938 <HAL_SPI_RxCpltCallback+0x34>)
 801f910:	4293      	cmp	r3, r2
 801f912:	d104      	bne.n	801f91e <HAL_SPI_RxCpltCallback+0x1a>
 801f914:	4b09      	ldr	r3, [pc, #36]	@ (801f93c <HAL_SPI_RxCpltCallback+0x38>)
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	4618      	mov	r0, r3
 801f91a:	f7ed fea5 	bl	800d668 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4RxSem);
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	4a07      	ldr	r2, [pc, #28]	@ (801f940 <HAL_SPI_RxCpltCallback+0x3c>)
 801f922:	4293      	cmp	r3, r2
 801f924:	d104      	bne.n	801f930 <HAL_SPI_RxCpltCallback+0x2c>
 801f926:	4b07      	ldr	r3, [pc, #28]	@ (801f944 <HAL_SPI_RxCpltCallback+0x40>)
 801f928:	681b      	ldr	r3, [r3, #0]
 801f92a:	4618      	mov	r0, r3
 801f92c:	f7ed fe9c 	bl	800d668 <osSemaphoreRelease>
}
 801f930:	bf00      	nop
 801f932:	3708      	adds	r7, #8
 801f934:	46bd      	mov	sp, r7
 801f936:	bd80      	pop	{r7, pc}
 801f938:	20000520 	.word	0x20000520
 801f93c:	2002d730 	.word	0x2002d730
 801f940:	20000584 	.word	0x20000584
 801f944:	2002d738 	.word	0x2002d738

0801f948 <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 801f948:	b580      	push	{r7, lr}
 801f94a:	b0ca      	sub	sp, #296	@ 0x128
 801f94c:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	testDoneSem = osSemaphoreNew(1, 0, NULL);
 801f94e:	2200      	movs	r2, #0
 801f950:	2100      	movs	r1, #0
 801f952:	2001      	movs	r0, #1
 801f954:	f7ed fd86 	bl	800d464 <osSemaphoreNew>
 801f958:	4603      	mov	r3, r0
 801f95a:	4a34      	ldr	r2, [pc, #208]	@ (801fa2c <TimTestTask+0xe4>)
 801f95c:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f95e:	4b34      	ldr	r3, [pc, #208]	@ (801fa30 <TimTestTask+0xe8>)
 801f960:	6818      	ldr	r0, [r3, #0]
 801f962:	f107 0114 	add.w	r1, r7, #20
 801f966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f96a:	2200      	movs	r2, #0
 801f96c:	f7ee f804 	bl	800d978 <osMessageQueueGet>
 801f970:	4603      	mov	r3, r0
 801f972:	2b00      	cmp	r3, #0
 801f974:	d155      	bne.n	801fa22 <TimTestTask+0xda>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f976:	2300      	movs	r3, #0
 801f978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f97c:	e00d      	b.n	801f99a <TimTestTask+0x52>
			{
				result = TIM_Test_Perform();
 801f97e:	f000 f861 	bl	801fa44 <TIM_Test_Perform>
 801f982:	4603      	mov	r3, r0
 801f984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f988:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f98c:	2bff      	cmp	r3, #255	@ 0xff
 801f98e:	d00e      	beq.n	801f9ae <TimTestTask+0x66>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f990:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f994:	3301      	adds	r3, #1
 801f996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f99a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f99e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f9a2:	7b1b      	ldrb	r3, [r3, #12]
 801f9a4:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f9a8:	429a      	cmp	r2, r3
 801f9aa:	d3e8      	bcc.n	801f97e <TimTestTask+0x36>
 801f9ac:	e000      	b.n	801f9b0 <TimTestTask+0x68>
					break;
 801f9ae:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f9b0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f9b8:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f9bc:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f9c0:	6812      	ldr	r2, [r2, #0]
 801f9c2:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f9c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f9cc:	889a      	ldrh	r2, [r3, #4]
 801f9ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f9d6:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f9d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f9e0:	689a      	ldr	r2, [r3, #8]
 801f9e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f9ea:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f9ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f9f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f9f4:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f9f8:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("Timer test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801f9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f9fe:	2b01      	cmp	r3, #1
 801fa00:	d101      	bne.n	801fa06 <TimTestTask+0xbe>
 801fa02:	4b0c      	ldr	r3, [pc, #48]	@ (801fa34 <TimTestTask+0xec>)
 801fa04:	e000      	b.n	801fa08 <TimTestTask+0xc0>
 801fa06:	4b0c      	ldr	r3, [pc, #48]	@ (801fa38 <TimTestTask+0xf0>)
 801fa08:	4619      	mov	r1, r3
 801fa0a:	480c      	ldr	r0, [pc, #48]	@ (801fa3c <TimTestTask+0xf4>)
 801fa0c:	f000 fb1a 	bl	8020044 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fa10:	4b0b      	ldr	r3, [pc, #44]	@ (801fa40 <TimTestTask+0xf8>)
 801fa12:	6818      	ldr	r0, [r3, #0]
 801fa14:	1d39      	adds	r1, r7, #4
 801fa16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fa1a:	2200      	movs	r2, #0
 801fa1c:	f7ed ff38 	bl	800d890 <osMessageQueuePut>
 801fa20:	e79d      	b.n	801f95e <TimTestTask+0x16>
		}
		else osDelay(1);
 801fa22:	2001      	movs	r0, #1
 801fa24:	f7ed fba8 	bl	800d178 <osDelay>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fa28:	e799      	b.n	801f95e <TimTestTask+0x16>
 801fa2a:	bf00      	nop
 801fa2c:	2002d73c 	.word	0x2002d73c
 801fa30:	200002f4 	.word	0x200002f4
 801fa34:	080248fc 	.word	0x080248fc
 801fa38:	08024904 	.word	0x08024904
 801fa3c:	0802490c 	.word	0x0802490c
 801fa40:	200002e0 	.word	0x200002e0

0801fa44 <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 801fa44:	b580      	push	{r7, lr}
 801fa46:	b082      	sub	sp, #8
 801fa48:	af00      	add	r7, sp, #0
	static uint8_t callback_registered = 0;

	if (!callback_registered)
 801fa4a:	4b38      	ldr	r3, [pc, #224]	@ (801fb2c <TIM_Test_Perform+0xe8>)
 801fa4c:	781b      	ldrb	r3, [r3, #0]
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d107      	bne.n	801fa62 <TIM_Test_Perform+0x1e>
	{
		HAL_DMA_RegisterCallback(&hdma_tim6_up, HAL_DMA_XFER_CPLT_CB_ID, TIM6_UP_DMA_XferCplt);
 801fa52:	4a37      	ldr	r2, [pc, #220]	@ (801fb30 <TIM_Test_Perform+0xec>)
 801fa54:	2100      	movs	r1, #0
 801fa56:	4837      	ldr	r0, [pc, #220]	@ (801fb34 <TIM_Test_Perform+0xf0>)
 801fa58:	f7e3 ff64 	bl	8003924 <HAL_DMA_RegisterCallback>
		callback_registered = 1;
 801fa5c:	4b33      	ldr	r3, [pc, #204]	@ (801fb2c <TIM_Test_Perform+0xe8>)
 801fa5e:	2201      	movs	r2, #1
 801fa60:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_Base_Start(&htim2);
 801fa62:	4835      	ldr	r0, [pc, #212]	@ (801fb38 <TIM_Test_Perform+0xf4>)
 801fa64:	f7ea fb50 	bl	800a108 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 801fa68:	4834      	ldr	r0, [pc, #208]	@ (801fb3c <TIM_Test_Perform+0xf8>)
 801fa6a:	f7ea fb4d 	bl	800a108 <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 801fa6e:	4b32      	ldr	r3, [pc, #200]	@ (801fb38 <TIM_Test_Perform+0xf4>)
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	3324      	adds	r3, #36	@ 0x24
 801fa74:	4619      	mov	r1, r3
 801fa76:	4a32      	ldr	r2, [pc, #200]	@ (801fb40 <TIM_Test_Perform+0xfc>)
 801fa78:	230a      	movs	r3, #10
 801fa7a:	482e      	ldr	r0, [pc, #184]	@ (801fb34 <TIM_Test_Perform+0xf0>)
 801fa7c:	f7e3 fcd6 	bl	800342c <HAL_DMA_Start_IT>
 801fa80:	4603      	mov	r3, r0
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d004      	beq.n	801fa90 <TIM_Test_Perform+0x4c>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
 801fa86:	482f      	ldr	r0, [pc, #188]	@ (801fb44 <TIM_Test_Perform+0x100>)
 801fa88:	f000 fb44 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801fa8c:	23ff      	movs	r3, #255	@ 0xff
 801fa8e:	e049      	b.n	801fb24 <TIM_Test_Perform+0xe0>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801fa90:	4b2a      	ldr	r3, [pc, #168]	@ (801fb3c <TIM_Test_Perform+0xf8>)
 801fa92:	681b      	ldr	r3, [r3, #0]
 801fa94:	68da      	ldr	r2, [r3, #12]
 801fa96:	4b29      	ldr	r3, [pc, #164]	@ (801fb3c <TIM_Test_Perform+0xf8>)
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801fa9e:	60da      	str	r2, [r3, #12]

    if (osSemaphoreAcquire(testDoneSem, 10) != osOK)
 801faa0:	4b29      	ldr	r3, [pc, #164]	@ (801fb48 <TIM_Test_Perform+0x104>)
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	210a      	movs	r1, #10
 801faa6:	4618      	mov	r0, r3
 801faa8:	f7ed fd78 	bl	800d59c <osSemaphoreAcquire>
 801faac:	4603      	mov	r3, r0
 801faae:	2b00      	cmp	r3, #0
 801fab0:	d00a      	beq.n	801fac8 <TIM_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("Timer test: timeout waiting for DMA complete\n");
 801fab2:	4826      	ldr	r0, [pc, #152]	@ (801fb4c <TIM_Test_Perform+0x108>)
 801fab4:	f000 fb2e 	bl	8020114 <puts>
#endif
		HAL_TIM_Base_Stop(&htim6);
 801fab8:	4820      	ldr	r0, [pc, #128]	@ (801fb3c <TIM_Test_Perform+0xf8>)
 801faba:	f7ea fb95 	bl	800a1e8 <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim2);
 801fabe:	481e      	ldr	r0, [pc, #120]	@ (801fb38 <TIM_Test_Perform+0xf4>)
 801fac0:	f7ea fb92 	bl	800a1e8 <HAL_TIM_Base_Stop>
		return TEST_FAILED;
 801fac4:	23ff      	movs	r3, #255	@ 0xff
 801fac6:	e02d      	b.n	801fb24 <TIM_Test_Perform+0xe0>
	}

	HAL_TIM_Base_Stop(&htim6);
 801fac8:	481c      	ldr	r0, [pc, #112]	@ (801fb3c <TIM_Test_Perform+0xf8>)
 801faca:	f7ea fb8d 	bl	800a1e8 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 801face:	481a      	ldr	r0, [pc, #104]	@ (801fb38 <TIM_Test_Perform+0xf4>)
 801fad0:	f7ea fb8a 	bl	800a1e8 <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG2
	printf("Sampling complete\n");
#endif
	for (int i = 2; i < N_SAMPLES; i++)
 801fad4:	2302      	movs	r3, #2
 801fad6:	607b      	str	r3, [r7, #4]
 801fad8:	e020      	b.n	801fb1c <TIM_Test_Perform+0xd8>
#ifdef PRINT_TESTS_DEBUG2
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] < EXPECTED_INTERVAL - TIM_ERR_TOLERANCE ||
 801fada:	4a19      	ldr	r2, [pc, #100]	@ (801fb40 <TIM_Test_Perform+0xfc>)
 801fadc:	687b      	ldr	r3, [r7, #4]
 801fade:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801fae2:	687b      	ldr	r3, [r7, #4]
 801fae4:	3b01      	subs	r3, #1
 801fae6:	4916      	ldr	r1, [pc, #88]	@ (801fb40 <TIM_Test_Perform+0xfc>)
 801fae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801faec:	1ad3      	subs	r3, r2, r3
 801faee:	f24d 228b 	movw	r2, #53899	@ 0xd28b
 801faf2:	4293      	cmp	r3, r2
 801faf4:	d90d      	bls.n	801fb12 <TIM_Test_Perform+0xce>
			tim2_samples[i] - tim2_samples[i-1] > EXPECTED_INTERVAL + TIM_ERR_TOLERANCE)
 801faf6:	4a12      	ldr	r2, [pc, #72]	@ (801fb40 <TIM_Test_Perform+0xfc>)
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	3b01      	subs	r3, #1
 801fb02:	490f      	ldr	r1, [pc, #60]	@ (801fb40 <TIM_Test_Perform+0xfc>)
 801fb04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fb08:	1ad3      	subs	r3, r2, r3
		if (tim2_samples[i] - tim2_samples[i-1] < EXPECTED_INTERVAL - TIM_ERR_TOLERANCE ||
 801fb0a:	f24d 3254 	movw	r2, #54100	@ 0xd354
 801fb0e:	4293      	cmp	r3, r2
 801fb10:	d901      	bls.n	801fb16 <TIM_Test_Perform+0xd2>
			return TEST_FAILED;
 801fb12:	23ff      	movs	r3, #255	@ 0xff
 801fb14:	e006      	b.n	801fb24 <TIM_Test_Perform+0xe0>
	for (int i = 2; i < N_SAMPLES; i++)
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	3301      	adds	r3, #1
 801fb1a:	607b      	str	r3, [r7, #4]
 801fb1c:	687b      	ldr	r3, [r7, #4]
 801fb1e:	2b09      	cmp	r3, #9
 801fb20:	dddb      	ble.n	801fada <TIM_Test_Perform+0x96>
	}

	return TEST_SUCCESS;
 801fb22:	2301      	movs	r3, #1
}
 801fb24:	4618      	mov	r0, r3
 801fb26:	3708      	adds	r7, #8
 801fb28:	46bd      	mov	sp, r7
 801fb2a:	bd80      	pop	{r7, pc}
 801fb2c:	2002d768 	.word	0x2002d768
 801fb30:	0801fb51 	.word	0x0801fb51
 801fb34:	20000850 	.word	0x20000850
 801fb38:	200007b8 	.word	0x200007b8
 801fb3c:	20000804 	.word	0x20000804
 801fb40:	2002d740 	.word	0x2002d740
 801fb44:	0802491c 	.word	0x0802491c
 801fb48:	2002d73c 	.word	0x2002d73c
 801fb4c:	08024938 	.word	0x08024938

0801fb50 <TIM6_UP_DMA_XferCplt>:
 * Using the same strategy with FreeRTOS will break the code, so I implemented
 * here a different strategy.
 */

void TIM6_UP_DMA_XferCplt(DMA_HandleTypeDef *hdma)
{
 801fb50:	b580      	push	{r7, lr}
 801fb52:	b082      	sub	sp, #8
 801fb54:	af00      	add	r7, sp, #0
 801fb56:	6078      	str	r0, [r7, #4]
    if (hdma == &hdma_tim6_up)
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	4a06      	ldr	r2, [pc, #24]	@ (801fb74 <TIM6_UP_DMA_XferCplt+0x24>)
 801fb5c:	4293      	cmp	r3, r2
 801fb5e:	d104      	bne.n	801fb6a <TIM6_UP_DMA_XferCplt+0x1a>
    {
    	osSemaphoreRelease(testDoneSem);
 801fb60:	4b05      	ldr	r3, [pc, #20]	@ (801fb78 <TIM6_UP_DMA_XferCplt+0x28>)
 801fb62:	681b      	ldr	r3, [r3, #0]
 801fb64:	4618      	mov	r0, r3
 801fb66:	f7ed fd7f 	bl	800d668 <osSemaphoreRelease>
    }
}
 801fb6a:	bf00      	nop
 801fb6c:	3708      	adds	r7, #8
 801fb6e:	46bd      	mov	sp, r7
 801fb70:	bd80      	pop	{r7, pc}
 801fb72:	bf00      	nop
 801fb74:	20000850 	.word	0x20000850
 801fb78:	2002d73c 	.word	0x2002d73c

0801fb7c <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 801fb7c:	b580      	push	{r7, lr}
 801fb7e:	b0ca      	sub	sp, #296	@ 0x128
 801fb80:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	uart4RxSem = osSemaphoreNew(1, 0, NULL);
 801fb82:	2200      	movs	r2, #0
 801fb84:	2100      	movs	r1, #0
 801fb86:	2001      	movs	r0, #1
 801fb88:	f7ed fc6c 	bl	800d464 <osSemaphoreNew>
 801fb8c:	4603      	mov	r3, r0
 801fb8e:	4a3b      	ldr	r2, [pc, #236]	@ (801fc7c <UartTestTask+0x100>)
 801fb90:	6013      	str	r3, [r2, #0]
	uart5RxSem = osSemaphoreNew(1, 0, NULL);
 801fb92:	2200      	movs	r2, #0
 801fb94:	2100      	movs	r1, #0
 801fb96:	2001      	movs	r0, #1
 801fb98:	f7ed fc64 	bl	800d464 <osSemaphoreNew>
 801fb9c:	4603      	mov	r3, r0
 801fb9e:	4a38      	ldr	r2, [pc, #224]	@ (801fc80 <UartTestTask+0x104>)
 801fba0:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fba2:	4b38      	ldr	r3, [pc, #224]	@ (801fc84 <UartTestTask+0x108>)
 801fba4:	6818      	ldr	r0, [r3, #0]
 801fba6:	f107 0114 	add.w	r1, r7, #20
 801fbaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fbae:	2200      	movs	r2, #0
 801fbb0:	f7ed fee2 	bl	800d978 <osMessageQueueGet>
 801fbb4:	4603      	mov	r3, r0
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d1f3      	bne.n	801fba2 <UartTestTask+0x26>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fbba:	2300      	movs	r3, #0
 801fbbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fbc0:	e017      	b.n	801fbf2 <UartTestTask+0x76>
			{
                result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801fbc2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fbc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fbca:	7b5a      	ldrb	r2, [r3, #13]
 801fbcc:	f107 0314 	add.w	r3, r7, #20
 801fbd0:	330e      	adds	r3, #14
 801fbd2:	4611      	mov	r1, r2
 801fbd4:	4618      	mov	r0, r3
 801fbd6:	f000 f85f 	bl	801fc98 <UART_Test_Perform>
 801fbda:	4603      	mov	r3, r0
 801fbdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fbe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fbe4:	2bff      	cmp	r3, #255	@ 0xff
 801fbe6:	d00e      	beq.n	801fc06 <UartTestTask+0x8a>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fbe8:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fbec:	3301      	adds	r3, #1
 801fbee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fbf2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fbf6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fbfa:	7b1b      	ldrb	r3, [r3, #12]
 801fbfc:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fc00:	429a      	cmp	r2, r3
 801fc02:	d3de      	bcc.n	801fbc2 <UartTestTask+0x46>
 801fc04:	e000      	b.n	801fc08 <UartTestTask+0x8c>
					break;
 801fc06:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fc08:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc10:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fc14:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fc18:	6812      	ldr	r2, [r2, #0]
 801fc1a:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fc1c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc20:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fc24:	889a      	ldrh	r2, [r3, #4]
 801fc26:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc2a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc2e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fc30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fc38:	689a      	ldr	r2, [r3, #8]
 801fc3a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc3e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc42:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fc44:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc48:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc4c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fc50:	731a      	strb	r2, [r3, #12]

#ifdef PRINT_TESTS_DEBUG
		    printf("UART test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
 801fc52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc56:	2b01      	cmp	r3, #1
 801fc58:	d101      	bne.n	801fc5e <UartTestTask+0xe2>
 801fc5a:	4b0b      	ldr	r3, [pc, #44]	@ (801fc88 <UartTestTask+0x10c>)
 801fc5c:	e000      	b.n	801fc60 <UartTestTask+0xe4>
 801fc5e:	4b0b      	ldr	r3, [pc, #44]	@ (801fc8c <UartTestTask+0x110>)
 801fc60:	4619      	mov	r1, r3
 801fc62:	480b      	ldr	r0, [pc, #44]	@ (801fc90 <UartTestTask+0x114>)
 801fc64:	f000 f9ee 	bl	8020044 <iprintf>
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fc68:	4b0a      	ldr	r3, [pc, #40]	@ (801fc94 <UartTestTask+0x118>)
 801fc6a:	6818      	ldr	r0, [r3, #0]
 801fc6c:	1d39      	adds	r1, r7, #4
 801fc6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fc72:	2200      	movs	r2, #0
 801fc74:	f7ed fe0c 	bl	800d890 <osMessageQueuePut>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fc78:	e793      	b.n	801fba2 <UartTestTask+0x26>
 801fc7a:	bf00      	nop
 801fc7c:	2002d76c 	.word	0x2002d76c
 801fc80:	2002d770 	.word	0x2002d770
 801fc84:	200002e4 	.word	0x200002e4
 801fc88:	08024968 	.word	0x08024968
 801fc8c:	08024970 	.word	0x08024970
 801fc90:	08024978 	.word	0x08024978
 801fc94:	200002e0 	.word	0x200002e0

0801fc98 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801fc98:	b590      	push	{r4, r7, lr}
 801fc9a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801fc9e:	af00      	add	r7, sp, #0
 801fca0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fca4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fca8:	6018      	str	r0, [r3, #0]
 801fcaa:	460a      	mov	r2, r1
 801fcac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fcb0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fcb4:	701a      	strb	r2, [r3, #0]
	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 801fcb6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fcba:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fcbe:	781b      	ldrb	r3, [r3, #0]
 801fcc0:	b29a      	uxth	r2, r3
 801fcc2:	f107 030c 	add.w	r3, r7, #12
 801fcc6:	4619      	mov	r1, r3
 801fcc8:	4843      	ldr	r0, [pc, #268]	@ (801fdd8 <UART_Test_Perform+0x140>)
 801fcca:	f7eb f849 	bl	800ad60 <HAL_UART_Receive_DMA>
 801fcce:	4603      	mov	r3, r0
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	d004      	beq.n	801fcde <UART_Test_Perform+0x46>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
 801fcd4:	4841      	ldr	r0, [pc, #260]	@ (801fddc <UART_Test_Perform+0x144>)
 801fcd6:	f000 fa1d 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801fcda:	23ff      	movs	r3, #255	@ 0xff
 801fcdc:	e076      	b.n	801fdcc <UART_Test_Perform+0x134>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 801fcde:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fce2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fce6:	781b      	ldrb	r3, [r3, #0]
 801fce8:	b29a      	uxth	r2, r3
 801fcea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fcee:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fcf2:	6819      	ldr	r1, [r3, #0]
 801fcf4:	483a      	ldr	r0, [pc, #232]	@ (801fde0 <UART_Test_Perform+0x148>)
 801fcf6:	f7ea ffd5 	bl	800aca4 <HAL_UART_Transmit_IT>
 801fcfa:	4603      	mov	r3, r0
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d004      	beq.n	801fd0a <UART_Test_Perform+0x72>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
 801fd00:	4838      	ldr	r0, [pc, #224]	@ (801fde4 <UART_Test_Perform+0x14c>)
 801fd02:	f000 fa07 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801fd06:	23ff      	movs	r3, #255	@ 0xff
 801fd08:	e060      	b.n	801fdcc <UART_Test_Perform+0x134>
	}
	if (osSemaphoreAcquire(uart5RxSem, 10) != osOK) {
 801fd0a:	4b37      	ldr	r3, [pc, #220]	@ (801fde8 <UART_Test_Perform+0x150>)
 801fd0c:	681b      	ldr	r3, [r3, #0]
 801fd0e:	210a      	movs	r1, #10
 801fd10:	4618      	mov	r0, r3
 801fd12:	f7ed fc43 	bl	800d59c <osSemaphoreAcquire>
 801fd16:	4603      	mov	r3, r0
 801fd18:	2b00      	cmp	r3, #0
 801fd1a:	d004      	beq.n	801fd26 <UART_Test_Perform+0x8e>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart5 RX semaphore timeout\n");
 801fd1c:	4833      	ldr	r0, [pc, #204]	@ (801fdec <UART_Test_Perform+0x154>)
 801fd1e:	f000 f9f9 	bl	8020114 <puts>
#endif
	    return TEST_FAILED;
 801fd22:	23ff      	movs	r3, #255	@ 0xff
 801fd24:	e052      	b.n	801fdcc <UART_Test_Perform+0x134>
	}

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 801fd26:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fd2a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fd2e:	781b      	ldrb	r3, [r3, #0]
 801fd30:	b29a      	uxth	r2, r3
 801fd32:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801fd36:	4619      	mov	r1, r3
 801fd38:	4829      	ldr	r0, [pc, #164]	@ (801fde0 <UART_Test_Perform+0x148>)
 801fd3a:	f7eb f811 	bl	800ad60 <HAL_UART_Receive_DMA>
 801fd3e:	4603      	mov	r3, r0
 801fd40:	2b00      	cmp	r3, #0
 801fd42:	d004      	beq.n	801fd4e <UART_Test_Perform+0xb6>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
 801fd44:	482a      	ldr	r0, [pc, #168]	@ (801fdf0 <UART_Test_Perform+0x158>)
 801fd46:	f000 f9e5 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801fd4a:	23ff      	movs	r3, #255	@ 0xff
 801fd4c:	e03e      	b.n	801fdcc <UART_Test_Perform+0x134>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 801fd4e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fd52:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fd56:	781b      	ldrb	r3, [r3, #0]
 801fd58:	b29a      	uxth	r2, r3
 801fd5a:	f107 030c 	add.w	r3, r7, #12
 801fd5e:	4619      	mov	r1, r3
 801fd60:	481d      	ldr	r0, [pc, #116]	@ (801fdd8 <UART_Test_Perform+0x140>)
 801fd62:	f7ea ff9f 	bl	800aca4 <HAL_UART_Transmit_IT>
 801fd66:	4603      	mov	r3, r0
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d004      	beq.n	801fd76 <UART_Test_Perform+0xde>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
 801fd6c:	4821      	ldr	r0, [pc, #132]	@ (801fdf4 <UART_Test_Perform+0x15c>)
 801fd6e:	f000 f9d1 	bl	8020114 <puts>
#endif
		return TEST_FAILED;
 801fd72:	23ff      	movs	r3, #255	@ 0xff
 801fd74:	e02a      	b.n	801fdcc <UART_Test_Perform+0x134>
	}
	if (osSemaphoreAcquire(uart4RxSem, 10) != osOK) {
 801fd76:	4b20      	ldr	r3, [pc, #128]	@ (801fdf8 <UART_Test_Perform+0x160>)
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	210a      	movs	r1, #10
 801fd7c:	4618      	mov	r0, r3
 801fd7e:	f7ed fc0d 	bl	800d59c <osSemaphoreAcquire>
 801fd82:	4603      	mov	r3, r0
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	d004      	beq.n	801fd92 <UART_Test_Perform+0xfa>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart4 RX semaphore timeout\n");
 801fd88:	481c      	ldr	r0, [pc, #112]	@ (801fdfc <UART_Test_Perform+0x164>)
 801fd8a:	f000 f9c3 	bl	8020114 <puts>
#endif
	    return TEST_FAILED;
 801fd8e:	23ff      	movs	r3, #255	@ 0xff
 801fd90:	e01c      	b.n	801fdcc <UART_Test_Perform+0x134>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 801fd92:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fd96:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fd9a:	781c      	ldrb	r4, [r3, #0]
 801fd9c:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 801fda0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fda4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fda8:	7819      	ldrb	r1, [r3, #0]
 801fdaa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fdae:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801fdb2:	4623      	mov	r3, r4
 801fdb4:	6800      	ldr	r0, [r0, #0]
 801fdb6:	f7ff f8c7 	bl	801ef48 <Match_CRC>
 801fdba:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801fdbe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801fdc2:	2b01      	cmp	r3, #1
 801fdc4:	d101      	bne.n	801fdca <UART_Test_Perform+0x132>
 801fdc6:	2301      	movs	r3, #1
 801fdc8:	e000      	b.n	801fdcc <UART_Test_Perform+0x134>

	return TEST_FAILED;
 801fdca:	23ff      	movs	r3, #255	@ 0xff
}
 801fdcc:	4618      	mov	r0, r3
 801fdce:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801fdd2:	46bd      	mov	sp, r7
 801fdd4:	bd90      	pop	{r4, r7, pc}
 801fdd6:	bf00      	nop
 801fdd8:	20000938 	.word	0x20000938
 801fddc:	08024988 	.word	0x08024988
 801fde0:	200008b0 	.word	0x200008b0
 801fde4:	080249a4 	.word	0x080249a4
 801fde8:	2002d770 	.word	0x2002d770
 801fdec:	080249c0 	.word	0x080249c0
 801fdf0:	080249dc 	.word	0x080249dc
 801fdf4:	080249f8 	.word	0x080249f8
 801fdf8:	2002d76c 	.word	0x2002d76c
 801fdfc:	08024a14 	.word	0x08024a14

0801fe00 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801fe00:	b580      	push	{r7, lr}
 801fe02:	b082      	sub	sp, #8
 801fe04:	af00      	add	r7, sp, #0
 801fe06:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) osSemaphoreRelease(uart4RxSem);
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	4a0a      	ldr	r2, [pc, #40]	@ (801fe34 <HAL_UART_RxCpltCallback+0x34>)
 801fe0c:	4293      	cmp	r3, r2
 801fe0e:	d104      	bne.n	801fe1a <HAL_UART_RxCpltCallback+0x1a>
 801fe10:	4b09      	ldr	r3, [pc, #36]	@ (801fe38 <HAL_UART_RxCpltCallback+0x38>)
 801fe12:	681b      	ldr	r3, [r3, #0]
 801fe14:	4618      	mov	r0, r3
 801fe16:	f7ed fc27 	bl	800d668 <osSemaphoreRelease>
    if (huart == &huart5) osSemaphoreRelease(uart5RxSem);
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	4a07      	ldr	r2, [pc, #28]	@ (801fe3c <HAL_UART_RxCpltCallback+0x3c>)
 801fe1e:	4293      	cmp	r3, r2
 801fe20:	d104      	bne.n	801fe2c <HAL_UART_RxCpltCallback+0x2c>
 801fe22:	4b07      	ldr	r3, [pc, #28]	@ (801fe40 <HAL_UART_RxCpltCallback+0x40>)
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	4618      	mov	r0, r3
 801fe28:	f7ed fc1e 	bl	800d668 <osSemaphoreRelease>
}
 801fe2c:	bf00      	nop
 801fe2e:	3708      	adds	r7, #8
 801fe30:	46bd      	mov	sp, r7
 801fe32:	bd80      	pop	{r7, pc}
 801fe34:	200008b0 	.word	0x200008b0
 801fe38:	2002d76c 	.word	0x2002d76c
 801fe3c:	20000938 	.word	0x20000938
 801fe40:	2002d770 	.word	0x2002d770

0801fe44 <rand>:
 801fe44:	4b16      	ldr	r3, [pc, #88]	@ (801fea0 <rand+0x5c>)
 801fe46:	b510      	push	{r4, lr}
 801fe48:	681c      	ldr	r4, [r3, #0]
 801fe4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fe4c:	b9b3      	cbnz	r3, 801fe7c <rand+0x38>
 801fe4e:	2018      	movs	r0, #24
 801fe50:	f000 fb9a 	bl	8020588 <malloc>
 801fe54:	4602      	mov	r2, r0
 801fe56:	6320      	str	r0, [r4, #48]	@ 0x30
 801fe58:	b920      	cbnz	r0, 801fe64 <rand+0x20>
 801fe5a:	4b12      	ldr	r3, [pc, #72]	@ (801fea4 <rand+0x60>)
 801fe5c:	4812      	ldr	r0, [pc, #72]	@ (801fea8 <rand+0x64>)
 801fe5e:	2152      	movs	r1, #82	@ 0x52
 801fe60:	f000 fb2a 	bl	80204b8 <__assert_func>
 801fe64:	4911      	ldr	r1, [pc, #68]	@ (801feac <rand+0x68>)
 801fe66:	4b12      	ldr	r3, [pc, #72]	@ (801feb0 <rand+0x6c>)
 801fe68:	e9c0 1300 	strd	r1, r3, [r0]
 801fe6c:	4b11      	ldr	r3, [pc, #68]	@ (801feb4 <rand+0x70>)
 801fe6e:	6083      	str	r3, [r0, #8]
 801fe70:	230b      	movs	r3, #11
 801fe72:	8183      	strh	r3, [r0, #12]
 801fe74:	2100      	movs	r1, #0
 801fe76:	2001      	movs	r0, #1
 801fe78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fe7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801fe7e:	480e      	ldr	r0, [pc, #56]	@ (801feb8 <rand+0x74>)
 801fe80:	690b      	ldr	r3, [r1, #16]
 801fe82:	694c      	ldr	r4, [r1, #20]
 801fe84:	4a0d      	ldr	r2, [pc, #52]	@ (801febc <rand+0x78>)
 801fe86:	4358      	muls	r0, r3
 801fe88:	fb02 0004 	mla	r0, r2, r4, r0
 801fe8c:	fba3 3202 	umull	r3, r2, r3, r2
 801fe90:	3301      	adds	r3, #1
 801fe92:	eb40 0002 	adc.w	r0, r0, r2
 801fe96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801fe9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801fe9e:	bd10      	pop	{r4, pc}
 801fea0:	2000003c 	.word	0x2000003c
 801fea4:	08024dca 	.word	0x08024dca
 801fea8:	08024de1 	.word	0x08024de1
 801feac:	abcd330e 	.word	0xabcd330e
 801feb0:	e66d1234 	.word	0xe66d1234
 801feb4:	0005deec 	.word	0x0005deec
 801feb8:	5851f42d 	.word	0x5851f42d
 801febc:	4c957f2d 	.word	0x4c957f2d

0801fec0 <std>:
 801fec0:	2300      	movs	r3, #0
 801fec2:	b510      	push	{r4, lr}
 801fec4:	4604      	mov	r4, r0
 801fec6:	e9c0 3300 	strd	r3, r3, [r0]
 801feca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801fece:	6083      	str	r3, [r0, #8]
 801fed0:	8181      	strh	r1, [r0, #12]
 801fed2:	6643      	str	r3, [r0, #100]	@ 0x64
 801fed4:	81c2      	strh	r2, [r0, #14]
 801fed6:	6183      	str	r3, [r0, #24]
 801fed8:	4619      	mov	r1, r3
 801feda:	2208      	movs	r2, #8
 801fedc:	305c      	adds	r0, #92	@ 0x5c
 801fede:	f000 fa09 	bl	80202f4 <memset>
 801fee2:	4b0d      	ldr	r3, [pc, #52]	@ (801ff18 <std+0x58>)
 801fee4:	6263      	str	r3, [r4, #36]	@ 0x24
 801fee6:	4b0d      	ldr	r3, [pc, #52]	@ (801ff1c <std+0x5c>)
 801fee8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801feea:	4b0d      	ldr	r3, [pc, #52]	@ (801ff20 <std+0x60>)
 801feec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801feee:	4b0d      	ldr	r3, [pc, #52]	@ (801ff24 <std+0x64>)
 801fef0:	6323      	str	r3, [r4, #48]	@ 0x30
 801fef2:	4b0d      	ldr	r3, [pc, #52]	@ (801ff28 <std+0x68>)
 801fef4:	6224      	str	r4, [r4, #32]
 801fef6:	429c      	cmp	r4, r3
 801fef8:	d006      	beq.n	801ff08 <std+0x48>
 801fefa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801fefe:	4294      	cmp	r4, r2
 801ff00:	d002      	beq.n	801ff08 <std+0x48>
 801ff02:	33d0      	adds	r3, #208	@ 0xd0
 801ff04:	429c      	cmp	r4, r3
 801ff06:	d105      	bne.n	801ff14 <std+0x54>
 801ff08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ff0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff10:	f000 bac0 	b.w	8020494 <__retarget_lock_init_recursive>
 801ff14:	bd10      	pop	{r4, pc}
 801ff16:	bf00      	nop
 801ff18:	08020125 	.word	0x08020125
 801ff1c:	08020147 	.word	0x08020147
 801ff20:	0802017f 	.word	0x0802017f
 801ff24:	080201a3 	.word	0x080201a3
 801ff28:	2002d774 	.word	0x2002d774

0801ff2c <stdio_exit_handler>:
 801ff2c:	4a02      	ldr	r2, [pc, #8]	@ (801ff38 <stdio_exit_handler+0xc>)
 801ff2e:	4903      	ldr	r1, [pc, #12]	@ (801ff3c <stdio_exit_handler+0x10>)
 801ff30:	4803      	ldr	r0, [pc, #12]	@ (801ff40 <stdio_exit_handler+0x14>)
 801ff32:	f000 b869 	b.w	8020008 <_fwalk_sglue>
 801ff36:	bf00      	nop
 801ff38:	20000030 	.word	0x20000030
 801ff3c:	08020d99 	.word	0x08020d99
 801ff40:	20000040 	.word	0x20000040

0801ff44 <cleanup_stdio>:
 801ff44:	6841      	ldr	r1, [r0, #4]
 801ff46:	4b0c      	ldr	r3, [pc, #48]	@ (801ff78 <cleanup_stdio+0x34>)
 801ff48:	4299      	cmp	r1, r3
 801ff4a:	b510      	push	{r4, lr}
 801ff4c:	4604      	mov	r4, r0
 801ff4e:	d001      	beq.n	801ff54 <cleanup_stdio+0x10>
 801ff50:	f000 ff22 	bl	8020d98 <_fflush_r>
 801ff54:	68a1      	ldr	r1, [r4, #8]
 801ff56:	4b09      	ldr	r3, [pc, #36]	@ (801ff7c <cleanup_stdio+0x38>)
 801ff58:	4299      	cmp	r1, r3
 801ff5a:	d002      	beq.n	801ff62 <cleanup_stdio+0x1e>
 801ff5c:	4620      	mov	r0, r4
 801ff5e:	f000 ff1b 	bl	8020d98 <_fflush_r>
 801ff62:	68e1      	ldr	r1, [r4, #12]
 801ff64:	4b06      	ldr	r3, [pc, #24]	@ (801ff80 <cleanup_stdio+0x3c>)
 801ff66:	4299      	cmp	r1, r3
 801ff68:	d004      	beq.n	801ff74 <cleanup_stdio+0x30>
 801ff6a:	4620      	mov	r0, r4
 801ff6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff70:	f000 bf12 	b.w	8020d98 <_fflush_r>
 801ff74:	bd10      	pop	{r4, pc}
 801ff76:	bf00      	nop
 801ff78:	2002d774 	.word	0x2002d774
 801ff7c:	2002d7dc 	.word	0x2002d7dc
 801ff80:	2002d844 	.word	0x2002d844

0801ff84 <global_stdio_init.part.0>:
 801ff84:	b510      	push	{r4, lr}
 801ff86:	4b0b      	ldr	r3, [pc, #44]	@ (801ffb4 <global_stdio_init.part.0+0x30>)
 801ff88:	4c0b      	ldr	r4, [pc, #44]	@ (801ffb8 <global_stdio_init.part.0+0x34>)
 801ff8a:	4a0c      	ldr	r2, [pc, #48]	@ (801ffbc <global_stdio_init.part.0+0x38>)
 801ff8c:	601a      	str	r2, [r3, #0]
 801ff8e:	4620      	mov	r0, r4
 801ff90:	2200      	movs	r2, #0
 801ff92:	2104      	movs	r1, #4
 801ff94:	f7ff ff94 	bl	801fec0 <std>
 801ff98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ff9c:	2201      	movs	r2, #1
 801ff9e:	2109      	movs	r1, #9
 801ffa0:	f7ff ff8e 	bl	801fec0 <std>
 801ffa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ffa8:	2202      	movs	r2, #2
 801ffaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffae:	2112      	movs	r1, #18
 801ffb0:	f7ff bf86 	b.w	801fec0 <std>
 801ffb4:	2002d8ac 	.word	0x2002d8ac
 801ffb8:	2002d774 	.word	0x2002d774
 801ffbc:	0801ff2d 	.word	0x0801ff2d

0801ffc0 <__sfp_lock_acquire>:
 801ffc0:	4801      	ldr	r0, [pc, #4]	@ (801ffc8 <__sfp_lock_acquire+0x8>)
 801ffc2:	f000 ba68 	b.w	8020496 <__retarget_lock_acquire_recursive>
 801ffc6:	bf00      	nop
 801ffc8:	2002d8b5 	.word	0x2002d8b5

0801ffcc <__sfp_lock_release>:
 801ffcc:	4801      	ldr	r0, [pc, #4]	@ (801ffd4 <__sfp_lock_release+0x8>)
 801ffce:	f000 ba63 	b.w	8020498 <__retarget_lock_release_recursive>
 801ffd2:	bf00      	nop
 801ffd4:	2002d8b5 	.word	0x2002d8b5

0801ffd8 <__sinit>:
 801ffd8:	b510      	push	{r4, lr}
 801ffda:	4604      	mov	r4, r0
 801ffdc:	f7ff fff0 	bl	801ffc0 <__sfp_lock_acquire>
 801ffe0:	6a23      	ldr	r3, [r4, #32]
 801ffe2:	b11b      	cbz	r3, 801ffec <__sinit+0x14>
 801ffe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ffe8:	f7ff bff0 	b.w	801ffcc <__sfp_lock_release>
 801ffec:	4b04      	ldr	r3, [pc, #16]	@ (8020000 <__sinit+0x28>)
 801ffee:	6223      	str	r3, [r4, #32]
 801fff0:	4b04      	ldr	r3, [pc, #16]	@ (8020004 <__sinit+0x2c>)
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	d1f5      	bne.n	801ffe4 <__sinit+0xc>
 801fff8:	f7ff ffc4 	bl	801ff84 <global_stdio_init.part.0>
 801fffc:	e7f2      	b.n	801ffe4 <__sinit+0xc>
 801fffe:	bf00      	nop
 8020000:	0801ff45 	.word	0x0801ff45
 8020004:	2002d8ac 	.word	0x2002d8ac

08020008 <_fwalk_sglue>:
 8020008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802000c:	4607      	mov	r7, r0
 802000e:	4688      	mov	r8, r1
 8020010:	4614      	mov	r4, r2
 8020012:	2600      	movs	r6, #0
 8020014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020018:	f1b9 0901 	subs.w	r9, r9, #1
 802001c:	d505      	bpl.n	802002a <_fwalk_sglue+0x22>
 802001e:	6824      	ldr	r4, [r4, #0]
 8020020:	2c00      	cmp	r4, #0
 8020022:	d1f7      	bne.n	8020014 <_fwalk_sglue+0xc>
 8020024:	4630      	mov	r0, r6
 8020026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802002a:	89ab      	ldrh	r3, [r5, #12]
 802002c:	2b01      	cmp	r3, #1
 802002e:	d907      	bls.n	8020040 <_fwalk_sglue+0x38>
 8020030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020034:	3301      	adds	r3, #1
 8020036:	d003      	beq.n	8020040 <_fwalk_sglue+0x38>
 8020038:	4629      	mov	r1, r5
 802003a:	4638      	mov	r0, r7
 802003c:	47c0      	blx	r8
 802003e:	4306      	orrs	r6, r0
 8020040:	3568      	adds	r5, #104	@ 0x68
 8020042:	e7e9      	b.n	8020018 <_fwalk_sglue+0x10>

08020044 <iprintf>:
 8020044:	b40f      	push	{r0, r1, r2, r3}
 8020046:	b507      	push	{r0, r1, r2, lr}
 8020048:	4906      	ldr	r1, [pc, #24]	@ (8020064 <iprintf+0x20>)
 802004a:	ab04      	add	r3, sp, #16
 802004c:	6808      	ldr	r0, [r1, #0]
 802004e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020052:	6881      	ldr	r1, [r0, #8]
 8020054:	9301      	str	r3, [sp, #4]
 8020056:	f000 fb77 	bl	8020748 <_vfiprintf_r>
 802005a:	b003      	add	sp, #12
 802005c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020060:	b004      	add	sp, #16
 8020062:	4770      	bx	lr
 8020064:	2000003c 	.word	0x2000003c

08020068 <_puts_r>:
 8020068:	6a03      	ldr	r3, [r0, #32]
 802006a:	b570      	push	{r4, r5, r6, lr}
 802006c:	6884      	ldr	r4, [r0, #8]
 802006e:	4605      	mov	r5, r0
 8020070:	460e      	mov	r6, r1
 8020072:	b90b      	cbnz	r3, 8020078 <_puts_r+0x10>
 8020074:	f7ff ffb0 	bl	801ffd8 <__sinit>
 8020078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802007a:	07db      	lsls	r3, r3, #31
 802007c:	d405      	bmi.n	802008a <_puts_r+0x22>
 802007e:	89a3      	ldrh	r3, [r4, #12]
 8020080:	0598      	lsls	r0, r3, #22
 8020082:	d402      	bmi.n	802008a <_puts_r+0x22>
 8020084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020086:	f000 fa06 	bl	8020496 <__retarget_lock_acquire_recursive>
 802008a:	89a3      	ldrh	r3, [r4, #12]
 802008c:	0719      	lsls	r1, r3, #28
 802008e:	d502      	bpl.n	8020096 <_puts_r+0x2e>
 8020090:	6923      	ldr	r3, [r4, #16]
 8020092:	2b00      	cmp	r3, #0
 8020094:	d135      	bne.n	8020102 <_puts_r+0x9a>
 8020096:	4621      	mov	r1, r4
 8020098:	4628      	mov	r0, r5
 802009a:	f000 f8c5 	bl	8020228 <__swsetup_r>
 802009e:	b380      	cbz	r0, 8020102 <_puts_r+0x9a>
 80200a0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80200a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80200a6:	07da      	lsls	r2, r3, #31
 80200a8:	d405      	bmi.n	80200b6 <_puts_r+0x4e>
 80200aa:	89a3      	ldrh	r3, [r4, #12]
 80200ac:	059b      	lsls	r3, r3, #22
 80200ae:	d402      	bmi.n	80200b6 <_puts_r+0x4e>
 80200b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80200b2:	f000 f9f1 	bl	8020498 <__retarget_lock_release_recursive>
 80200b6:	4628      	mov	r0, r5
 80200b8:	bd70      	pop	{r4, r5, r6, pc}
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	da04      	bge.n	80200c8 <_puts_r+0x60>
 80200be:	69a2      	ldr	r2, [r4, #24]
 80200c0:	429a      	cmp	r2, r3
 80200c2:	dc17      	bgt.n	80200f4 <_puts_r+0x8c>
 80200c4:	290a      	cmp	r1, #10
 80200c6:	d015      	beq.n	80200f4 <_puts_r+0x8c>
 80200c8:	6823      	ldr	r3, [r4, #0]
 80200ca:	1c5a      	adds	r2, r3, #1
 80200cc:	6022      	str	r2, [r4, #0]
 80200ce:	7019      	strb	r1, [r3, #0]
 80200d0:	68a3      	ldr	r3, [r4, #8]
 80200d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80200d6:	3b01      	subs	r3, #1
 80200d8:	60a3      	str	r3, [r4, #8]
 80200da:	2900      	cmp	r1, #0
 80200dc:	d1ed      	bne.n	80200ba <_puts_r+0x52>
 80200de:	2b00      	cmp	r3, #0
 80200e0:	da11      	bge.n	8020106 <_puts_r+0x9e>
 80200e2:	4622      	mov	r2, r4
 80200e4:	210a      	movs	r1, #10
 80200e6:	4628      	mov	r0, r5
 80200e8:	f000 f85f 	bl	80201aa <__swbuf_r>
 80200ec:	3001      	adds	r0, #1
 80200ee:	d0d7      	beq.n	80200a0 <_puts_r+0x38>
 80200f0:	250a      	movs	r5, #10
 80200f2:	e7d7      	b.n	80200a4 <_puts_r+0x3c>
 80200f4:	4622      	mov	r2, r4
 80200f6:	4628      	mov	r0, r5
 80200f8:	f000 f857 	bl	80201aa <__swbuf_r>
 80200fc:	3001      	adds	r0, #1
 80200fe:	d1e7      	bne.n	80200d0 <_puts_r+0x68>
 8020100:	e7ce      	b.n	80200a0 <_puts_r+0x38>
 8020102:	3e01      	subs	r6, #1
 8020104:	e7e4      	b.n	80200d0 <_puts_r+0x68>
 8020106:	6823      	ldr	r3, [r4, #0]
 8020108:	1c5a      	adds	r2, r3, #1
 802010a:	6022      	str	r2, [r4, #0]
 802010c:	220a      	movs	r2, #10
 802010e:	701a      	strb	r2, [r3, #0]
 8020110:	e7ee      	b.n	80200f0 <_puts_r+0x88>
	...

08020114 <puts>:
 8020114:	4b02      	ldr	r3, [pc, #8]	@ (8020120 <puts+0xc>)
 8020116:	4601      	mov	r1, r0
 8020118:	6818      	ldr	r0, [r3, #0]
 802011a:	f7ff bfa5 	b.w	8020068 <_puts_r>
 802011e:	bf00      	nop
 8020120:	2000003c 	.word	0x2000003c

08020124 <__sread>:
 8020124:	b510      	push	{r4, lr}
 8020126:	460c      	mov	r4, r1
 8020128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802012c:	f000 f96a 	bl	8020404 <_read_r>
 8020130:	2800      	cmp	r0, #0
 8020132:	bfab      	itete	ge
 8020134:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020136:	89a3      	ldrhlt	r3, [r4, #12]
 8020138:	181b      	addge	r3, r3, r0
 802013a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802013e:	bfac      	ite	ge
 8020140:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020142:	81a3      	strhlt	r3, [r4, #12]
 8020144:	bd10      	pop	{r4, pc}

08020146 <__swrite>:
 8020146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802014a:	461f      	mov	r7, r3
 802014c:	898b      	ldrh	r3, [r1, #12]
 802014e:	05db      	lsls	r3, r3, #23
 8020150:	4605      	mov	r5, r0
 8020152:	460c      	mov	r4, r1
 8020154:	4616      	mov	r6, r2
 8020156:	d505      	bpl.n	8020164 <__swrite+0x1e>
 8020158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802015c:	2302      	movs	r3, #2
 802015e:	2200      	movs	r2, #0
 8020160:	f000 f93e 	bl	80203e0 <_lseek_r>
 8020164:	89a3      	ldrh	r3, [r4, #12]
 8020166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802016a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802016e:	81a3      	strh	r3, [r4, #12]
 8020170:	4632      	mov	r2, r6
 8020172:	463b      	mov	r3, r7
 8020174:	4628      	mov	r0, r5
 8020176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802017a:	f000 b955 	b.w	8020428 <_write_r>

0802017e <__sseek>:
 802017e:	b510      	push	{r4, lr}
 8020180:	460c      	mov	r4, r1
 8020182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020186:	f000 f92b 	bl	80203e0 <_lseek_r>
 802018a:	1c43      	adds	r3, r0, #1
 802018c:	89a3      	ldrh	r3, [r4, #12]
 802018e:	bf15      	itete	ne
 8020190:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020192:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020196:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802019a:	81a3      	strheq	r3, [r4, #12]
 802019c:	bf18      	it	ne
 802019e:	81a3      	strhne	r3, [r4, #12]
 80201a0:	bd10      	pop	{r4, pc}

080201a2 <__sclose>:
 80201a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80201a6:	f000 b8ad 	b.w	8020304 <_close_r>

080201aa <__swbuf_r>:
 80201aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201ac:	460e      	mov	r6, r1
 80201ae:	4614      	mov	r4, r2
 80201b0:	4605      	mov	r5, r0
 80201b2:	b118      	cbz	r0, 80201bc <__swbuf_r+0x12>
 80201b4:	6a03      	ldr	r3, [r0, #32]
 80201b6:	b90b      	cbnz	r3, 80201bc <__swbuf_r+0x12>
 80201b8:	f7ff ff0e 	bl	801ffd8 <__sinit>
 80201bc:	69a3      	ldr	r3, [r4, #24]
 80201be:	60a3      	str	r3, [r4, #8]
 80201c0:	89a3      	ldrh	r3, [r4, #12]
 80201c2:	071a      	lsls	r2, r3, #28
 80201c4:	d501      	bpl.n	80201ca <__swbuf_r+0x20>
 80201c6:	6923      	ldr	r3, [r4, #16]
 80201c8:	b943      	cbnz	r3, 80201dc <__swbuf_r+0x32>
 80201ca:	4621      	mov	r1, r4
 80201cc:	4628      	mov	r0, r5
 80201ce:	f000 f82b 	bl	8020228 <__swsetup_r>
 80201d2:	b118      	cbz	r0, 80201dc <__swbuf_r+0x32>
 80201d4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80201d8:	4638      	mov	r0, r7
 80201da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80201dc:	6823      	ldr	r3, [r4, #0]
 80201de:	6922      	ldr	r2, [r4, #16]
 80201e0:	1a98      	subs	r0, r3, r2
 80201e2:	6963      	ldr	r3, [r4, #20]
 80201e4:	b2f6      	uxtb	r6, r6
 80201e6:	4283      	cmp	r3, r0
 80201e8:	4637      	mov	r7, r6
 80201ea:	dc05      	bgt.n	80201f8 <__swbuf_r+0x4e>
 80201ec:	4621      	mov	r1, r4
 80201ee:	4628      	mov	r0, r5
 80201f0:	f000 fdd2 	bl	8020d98 <_fflush_r>
 80201f4:	2800      	cmp	r0, #0
 80201f6:	d1ed      	bne.n	80201d4 <__swbuf_r+0x2a>
 80201f8:	68a3      	ldr	r3, [r4, #8]
 80201fa:	3b01      	subs	r3, #1
 80201fc:	60a3      	str	r3, [r4, #8]
 80201fe:	6823      	ldr	r3, [r4, #0]
 8020200:	1c5a      	adds	r2, r3, #1
 8020202:	6022      	str	r2, [r4, #0]
 8020204:	701e      	strb	r6, [r3, #0]
 8020206:	6962      	ldr	r2, [r4, #20]
 8020208:	1c43      	adds	r3, r0, #1
 802020a:	429a      	cmp	r2, r3
 802020c:	d004      	beq.n	8020218 <__swbuf_r+0x6e>
 802020e:	89a3      	ldrh	r3, [r4, #12]
 8020210:	07db      	lsls	r3, r3, #31
 8020212:	d5e1      	bpl.n	80201d8 <__swbuf_r+0x2e>
 8020214:	2e0a      	cmp	r6, #10
 8020216:	d1df      	bne.n	80201d8 <__swbuf_r+0x2e>
 8020218:	4621      	mov	r1, r4
 802021a:	4628      	mov	r0, r5
 802021c:	f000 fdbc 	bl	8020d98 <_fflush_r>
 8020220:	2800      	cmp	r0, #0
 8020222:	d0d9      	beq.n	80201d8 <__swbuf_r+0x2e>
 8020224:	e7d6      	b.n	80201d4 <__swbuf_r+0x2a>
	...

08020228 <__swsetup_r>:
 8020228:	b538      	push	{r3, r4, r5, lr}
 802022a:	4b29      	ldr	r3, [pc, #164]	@ (80202d0 <__swsetup_r+0xa8>)
 802022c:	4605      	mov	r5, r0
 802022e:	6818      	ldr	r0, [r3, #0]
 8020230:	460c      	mov	r4, r1
 8020232:	b118      	cbz	r0, 802023c <__swsetup_r+0x14>
 8020234:	6a03      	ldr	r3, [r0, #32]
 8020236:	b90b      	cbnz	r3, 802023c <__swsetup_r+0x14>
 8020238:	f7ff fece 	bl	801ffd8 <__sinit>
 802023c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020240:	0719      	lsls	r1, r3, #28
 8020242:	d422      	bmi.n	802028a <__swsetup_r+0x62>
 8020244:	06da      	lsls	r2, r3, #27
 8020246:	d407      	bmi.n	8020258 <__swsetup_r+0x30>
 8020248:	2209      	movs	r2, #9
 802024a:	602a      	str	r2, [r5, #0]
 802024c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020250:	81a3      	strh	r3, [r4, #12]
 8020252:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020256:	e033      	b.n	80202c0 <__swsetup_r+0x98>
 8020258:	0758      	lsls	r0, r3, #29
 802025a:	d512      	bpl.n	8020282 <__swsetup_r+0x5a>
 802025c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802025e:	b141      	cbz	r1, 8020272 <__swsetup_r+0x4a>
 8020260:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020264:	4299      	cmp	r1, r3
 8020266:	d002      	beq.n	802026e <__swsetup_r+0x46>
 8020268:	4628      	mov	r0, r5
 802026a:	f000 f943 	bl	80204f4 <_free_r>
 802026e:	2300      	movs	r3, #0
 8020270:	6363      	str	r3, [r4, #52]	@ 0x34
 8020272:	89a3      	ldrh	r3, [r4, #12]
 8020274:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020278:	81a3      	strh	r3, [r4, #12]
 802027a:	2300      	movs	r3, #0
 802027c:	6063      	str	r3, [r4, #4]
 802027e:	6923      	ldr	r3, [r4, #16]
 8020280:	6023      	str	r3, [r4, #0]
 8020282:	89a3      	ldrh	r3, [r4, #12]
 8020284:	f043 0308 	orr.w	r3, r3, #8
 8020288:	81a3      	strh	r3, [r4, #12]
 802028a:	6923      	ldr	r3, [r4, #16]
 802028c:	b94b      	cbnz	r3, 80202a2 <__swsetup_r+0x7a>
 802028e:	89a3      	ldrh	r3, [r4, #12]
 8020290:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020298:	d003      	beq.n	80202a2 <__swsetup_r+0x7a>
 802029a:	4621      	mov	r1, r4
 802029c:	4628      	mov	r0, r5
 802029e:	f000 fddb 	bl	8020e58 <__smakebuf_r>
 80202a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80202a6:	f013 0201 	ands.w	r2, r3, #1
 80202aa:	d00a      	beq.n	80202c2 <__swsetup_r+0x9a>
 80202ac:	2200      	movs	r2, #0
 80202ae:	60a2      	str	r2, [r4, #8]
 80202b0:	6962      	ldr	r2, [r4, #20]
 80202b2:	4252      	negs	r2, r2
 80202b4:	61a2      	str	r2, [r4, #24]
 80202b6:	6922      	ldr	r2, [r4, #16]
 80202b8:	b942      	cbnz	r2, 80202cc <__swsetup_r+0xa4>
 80202ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80202be:	d1c5      	bne.n	802024c <__swsetup_r+0x24>
 80202c0:	bd38      	pop	{r3, r4, r5, pc}
 80202c2:	0799      	lsls	r1, r3, #30
 80202c4:	bf58      	it	pl
 80202c6:	6962      	ldrpl	r2, [r4, #20]
 80202c8:	60a2      	str	r2, [r4, #8]
 80202ca:	e7f4      	b.n	80202b6 <__swsetup_r+0x8e>
 80202cc:	2000      	movs	r0, #0
 80202ce:	e7f7      	b.n	80202c0 <__swsetup_r+0x98>
 80202d0:	2000003c 	.word	0x2000003c

080202d4 <memcmp>:
 80202d4:	b510      	push	{r4, lr}
 80202d6:	3901      	subs	r1, #1
 80202d8:	4402      	add	r2, r0
 80202da:	4290      	cmp	r0, r2
 80202dc:	d101      	bne.n	80202e2 <memcmp+0xe>
 80202de:	2000      	movs	r0, #0
 80202e0:	e005      	b.n	80202ee <memcmp+0x1a>
 80202e2:	7803      	ldrb	r3, [r0, #0]
 80202e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80202e8:	42a3      	cmp	r3, r4
 80202ea:	d001      	beq.n	80202f0 <memcmp+0x1c>
 80202ec:	1b18      	subs	r0, r3, r4
 80202ee:	bd10      	pop	{r4, pc}
 80202f0:	3001      	adds	r0, #1
 80202f2:	e7f2      	b.n	80202da <memcmp+0x6>

080202f4 <memset>:
 80202f4:	4402      	add	r2, r0
 80202f6:	4603      	mov	r3, r0
 80202f8:	4293      	cmp	r3, r2
 80202fa:	d100      	bne.n	80202fe <memset+0xa>
 80202fc:	4770      	bx	lr
 80202fe:	f803 1b01 	strb.w	r1, [r3], #1
 8020302:	e7f9      	b.n	80202f8 <memset+0x4>

08020304 <_close_r>:
 8020304:	b538      	push	{r3, r4, r5, lr}
 8020306:	4d06      	ldr	r5, [pc, #24]	@ (8020320 <_close_r+0x1c>)
 8020308:	2300      	movs	r3, #0
 802030a:	4604      	mov	r4, r0
 802030c:	4608      	mov	r0, r1
 802030e:	602b      	str	r3, [r5, #0]
 8020310:	f7e1 fb64 	bl	80019dc <_close>
 8020314:	1c43      	adds	r3, r0, #1
 8020316:	d102      	bne.n	802031e <_close_r+0x1a>
 8020318:	682b      	ldr	r3, [r5, #0]
 802031a:	b103      	cbz	r3, 802031e <_close_r+0x1a>
 802031c:	6023      	str	r3, [r4, #0]
 802031e:	bd38      	pop	{r3, r4, r5, pc}
 8020320:	2002d8b0 	.word	0x2002d8b0

08020324 <_reclaim_reent>:
 8020324:	4b2d      	ldr	r3, [pc, #180]	@ (80203dc <_reclaim_reent+0xb8>)
 8020326:	681b      	ldr	r3, [r3, #0]
 8020328:	4283      	cmp	r3, r0
 802032a:	b570      	push	{r4, r5, r6, lr}
 802032c:	4604      	mov	r4, r0
 802032e:	d053      	beq.n	80203d8 <_reclaim_reent+0xb4>
 8020330:	69c3      	ldr	r3, [r0, #28]
 8020332:	b31b      	cbz	r3, 802037c <_reclaim_reent+0x58>
 8020334:	68db      	ldr	r3, [r3, #12]
 8020336:	b163      	cbz	r3, 8020352 <_reclaim_reent+0x2e>
 8020338:	2500      	movs	r5, #0
 802033a:	69e3      	ldr	r3, [r4, #28]
 802033c:	68db      	ldr	r3, [r3, #12]
 802033e:	5959      	ldr	r1, [r3, r5]
 8020340:	b9b1      	cbnz	r1, 8020370 <_reclaim_reent+0x4c>
 8020342:	3504      	adds	r5, #4
 8020344:	2d80      	cmp	r5, #128	@ 0x80
 8020346:	d1f8      	bne.n	802033a <_reclaim_reent+0x16>
 8020348:	69e3      	ldr	r3, [r4, #28]
 802034a:	4620      	mov	r0, r4
 802034c:	68d9      	ldr	r1, [r3, #12]
 802034e:	f000 f8d1 	bl	80204f4 <_free_r>
 8020352:	69e3      	ldr	r3, [r4, #28]
 8020354:	6819      	ldr	r1, [r3, #0]
 8020356:	b111      	cbz	r1, 802035e <_reclaim_reent+0x3a>
 8020358:	4620      	mov	r0, r4
 802035a:	f000 f8cb 	bl	80204f4 <_free_r>
 802035e:	69e3      	ldr	r3, [r4, #28]
 8020360:	689d      	ldr	r5, [r3, #8]
 8020362:	b15d      	cbz	r5, 802037c <_reclaim_reent+0x58>
 8020364:	4629      	mov	r1, r5
 8020366:	4620      	mov	r0, r4
 8020368:	682d      	ldr	r5, [r5, #0]
 802036a:	f000 f8c3 	bl	80204f4 <_free_r>
 802036e:	e7f8      	b.n	8020362 <_reclaim_reent+0x3e>
 8020370:	680e      	ldr	r6, [r1, #0]
 8020372:	4620      	mov	r0, r4
 8020374:	f000 f8be 	bl	80204f4 <_free_r>
 8020378:	4631      	mov	r1, r6
 802037a:	e7e1      	b.n	8020340 <_reclaim_reent+0x1c>
 802037c:	6961      	ldr	r1, [r4, #20]
 802037e:	b111      	cbz	r1, 8020386 <_reclaim_reent+0x62>
 8020380:	4620      	mov	r0, r4
 8020382:	f000 f8b7 	bl	80204f4 <_free_r>
 8020386:	69e1      	ldr	r1, [r4, #28]
 8020388:	b111      	cbz	r1, 8020390 <_reclaim_reent+0x6c>
 802038a:	4620      	mov	r0, r4
 802038c:	f000 f8b2 	bl	80204f4 <_free_r>
 8020390:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020392:	b111      	cbz	r1, 802039a <_reclaim_reent+0x76>
 8020394:	4620      	mov	r0, r4
 8020396:	f000 f8ad 	bl	80204f4 <_free_r>
 802039a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802039c:	b111      	cbz	r1, 80203a4 <_reclaim_reent+0x80>
 802039e:	4620      	mov	r0, r4
 80203a0:	f000 f8a8 	bl	80204f4 <_free_r>
 80203a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80203a6:	b111      	cbz	r1, 80203ae <_reclaim_reent+0x8a>
 80203a8:	4620      	mov	r0, r4
 80203aa:	f000 f8a3 	bl	80204f4 <_free_r>
 80203ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80203b0:	b111      	cbz	r1, 80203b8 <_reclaim_reent+0x94>
 80203b2:	4620      	mov	r0, r4
 80203b4:	f000 f89e 	bl	80204f4 <_free_r>
 80203b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80203ba:	b111      	cbz	r1, 80203c2 <_reclaim_reent+0x9e>
 80203bc:	4620      	mov	r0, r4
 80203be:	f000 f899 	bl	80204f4 <_free_r>
 80203c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80203c4:	b111      	cbz	r1, 80203cc <_reclaim_reent+0xa8>
 80203c6:	4620      	mov	r0, r4
 80203c8:	f000 f894 	bl	80204f4 <_free_r>
 80203cc:	6a23      	ldr	r3, [r4, #32]
 80203ce:	b11b      	cbz	r3, 80203d8 <_reclaim_reent+0xb4>
 80203d0:	4620      	mov	r0, r4
 80203d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80203d6:	4718      	bx	r3
 80203d8:	bd70      	pop	{r4, r5, r6, pc}
 80203da:	bf00      	nop
 80203dc:	2000003c 	.word	0x2000003c

080203e0 <_lseek_r>:
 80203e0:	b538      	push	{r3, r4, r5, lr}
 80203e2:	4d07      	ldr	r5, [pc, #28]	@ (8020400 <_lseek_r+0x20>)
 80203e4:	4604      	mov	r4, r0
 80203e6:	4608      	mov	r0, r1
 80203e8:	4611      	mov	r1, r2
 80203ea:	2200      	movs	r2, #0
 80203ec:	602a      	str	r2, [r5, #0]
 80203ee:	461a      	mov	r2, r3
 80203f0:	f7e1 fb1b 	bl	8001a2a <_lseek>
 80203f4:	1c43      	adds	r3, r0, #1
 80203f6:	d102      	bne.n	80203fe <_lseek_r+0x1e>
 80203f8:	682b      	ldr	r3, [r5, #0]
 80203fa:	b103      	cbz	r3, 80203fe <_lseek_r+0x1e>
 80203fc:	6023      	str	r3, [r4, #0]
 80203fe:	bd38      	pop	{r3, r4, r5, pc}
 8020400:	2002d8b0 	.word	0x2002d8b0

08020404 <_read_r>:
 8020404:	b538      	push	{r3, r4, r5, lr}
 8020406:	4d07      	ldr	r5, [pc, #28]	@ (8020424 <_read_r+0x20>)
 8020408:	4604      	mov	r4, r0
 802040a:	4608      	mov	r0, r1
 802040c:	4611      	mov	r1, r2
 802040e:	2200      	movs	r2, #0
 8020410:	602a      	str	r2, [r5, #0]
 8020412:	461a      	mov	r2, r3
 8020414:	f7e1 fac5 	bl	80019a2 <_read>
 8020418:	1c43      	adds	r3, r0, #1
 802041a:	d102      	bne.n	8020422 <_read_r+0x1e>
 802041c:	682b      	ldr	r3, [r5, #0]
 802041e:	b103      	cbz	r3, 8020422 <_read_r+0x1e>
 8020420:	6023      	str	r3, [r4, #0]
 8020422:	bd38      	pop	{r3, r4, r5, pc}
 8020424:	2002d8b0 	.word	0x2002d8b0

08020428 <_write_r>:
 8020428:	b538      	push	{r3, r4, r5, lr}
 802042a:	4d07      	ldr	r5, [pc, #28]	@ (8020448 <_write_r+0x20>)
 802042c:	4604      	mov	r4, r0
 802042e:	4608      	mov	r0, r1
 8020430:	4611      	mov	r1, r2
 8020432:	2200      	movs	r2, #0
 8020434:	602a      	str	r2, [r5, #0]
 8020436:	461a      	mov	r2, r3
 8020438:	f7e0 fe24 	bl	8001084 <_write>
 802043c:	1c43      	adds	r3, r0, #1
 802043e:	d102      	bne.n	8020446 <_write_r+0x1e>
 8020440:	682b      	ldr	r3, [r5, #0]
 8020442:	b103      	cbz	r3, 8020446 <_write_r+0x1e>
 8020444:	6023      	str	r3, [r4, #0]
 8020446:	bd38      	pop	{r3, r4, r5, pc}
 8020448:	2002d8b0 	.word	0x2002d8b0

0802044c <__libc_init_array>:
 802044c:	b570      	push	{r4, r5, r6, lr}
 802044e:	4d0d      	ldr	r5, [pc, #52]	@ (8020484 <__libc_init_array+0x38>)
 8020450:	4c0d      	ldr	r4, [pc, #52]	@ (8020488 <__libc_init_array+0x3c>)
 8020452:	1b64      	subs	r4, r4, r5
 8020454:	10a4      	asrs	r4, r4, #2
 8020456:	2600      	movs	r6, #0
 8020458:	42a6      	cmp	r6, r4
 802045a:	d109      	bne.n	8020470 <__libc_init_array+0x24>
 802045c:	4d0b      	ldr	r5, [pc, #44]	@ (802048c <__libc_init_array+0x40>)
 802045e:	4c0c      	ldr	r4, [pc, #48]	@ (8020490 <__libc_init_array+0x44>)
 8020460:	f000 fdb4 	bl	8020fcc <_init>
 8020464:	1b64      	subs	r4, r4, r5
 8020466:	10a4      	asrs	r4, r4, #2
 8020468:	2600      	movs	r6, #0
 802046a:	42a6      	cmp	r6, r4
 802046c:	d105      	bne.n	802047a <__libc_init_array+0x2e>
 802046e:	bd70      	pop	{r4, r5, r6, pc}
 8020470:	f855 3b04 	ldr.w	r3, [r5], #4
 8020474:	4798      	blx	r3
 8020476:	3601      	adds	r6, #1
 8020478:	e7ee      	b.n	8020458 <__libc_init_array+0xc>
 802047a:	f855 3b04 	ldr.w	r3, [r5], #4
 802047e:	4798      	blx	r3
 8020480:	3601      	adds	r6, #1
 8020482:	e7f2      	b.n	802046a <__libc_init_array+0x1e>
 8020484:	08024eb0 	.word	0x08024eb0
 8020488:	08024eb0 	.word	0x08024eb0
 802048c:	08024eb0 	.word	0x08024eb0
 8020490:	08024eb4 	.word	0x08024eb4

08020494 <__retarget_lock_init_recursive>:
 8020494:	4770      	bx	lr

08020496 <__retarget_lock_acquire_recursive>:
 8020496:	4770      	bx	lr

08020498 <__retarget_lock_release_recursive>:
 8020498:	4770      	bx	lr

0802049a <memcpy>:
 802049a:	440a      	add	r2, r1
 802049c:	4291      	cmp	r1, r2
 802049e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80204a2:	d100      	bne.n	80204a6 <memcpy+0xc>
 80204a4:	4770      	bx	lr
 80204a6:	b510      	push	{r4, lr}
 80204a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80204ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80204b0:	4291      	cmp	r1, r2
 80204b2:	d1f9      	bne.n	80204a8 <memcpy+0xe>
 80204b4:	bd10      	pop	{r4, pc}
	...

080204b8 <__assert_func>:
 80204b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80204ba:	4614      	mov	r4, r2
 80204bc:	461a      	mov	r2, r3
 80204be:	4b09      	ldr	r3, [pc, #36]	@ (80204e4 <__assert_func+0x2c>)
 80204c0:	681b      	ldr	r3, [r3, #0]
 80204c2:	4605      	mov	r5, r0
 80204c4:	68d8      	ldr	r0, [r3, #12]
 80204c6:	b14c      	cbz	r4, 80204dc <__assert_func+0x24>
 80204c8:	4b07      	ldr	r3, [pc, #28]	@ (80204e8 <__assert_func+0x30>)
 80204ca:	9100      	str	r1, [sp, #0]
 80204cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80204d0:	4906      	ldr	r1, [pc, #24]	@ (80204ec <__assert_func+0x34>)
 80204d2:	462b      	mov	r3, r5
 80204d4:	f000 fc88 	bl	8020de8 <fiprintf>
 80204d8:	f000 fd2c 	bl	8020f34 <abort>
 80204dc:	4b04      	ldr	r3, [pc, #16]	@ (80204f0 <__assert_func+0x38>)
 80204de:	461c      	mov	r4, r3
 80204e0:	e7f3      	b.n	80204ca <__assert_func+0x12>
 80204e2:	bf00      	nop
 80204e4:	2000003c 	.word	0x2000003c
 80204e8:	08024e39 	.word	0x08024e39
 80204ec:	08024e46 	.word	0x08024e46
 80204f0:	08024e74 	.word	0x08024e74

080204f4 <_free_r>:
 80204f4:	b538      	push	{r3, r4, r5, lr}
 80204f6:	4605      	mov	r5, r0
 80204f8:	2900      	cmp	r1, #0
 80204fa:	d041      	beq.n	8020580 <_free_r+0x8c>
 80204fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020500:	1f0c      	subs	r4, r1, #4
 8020502:	2b00      	cmp	r3, #0
 8020504:	bfb8      	it	lt
 8020506:	18e4      	addlt	r4, r4, r3
 8020508:	f000 f8e8 	bl	80206dc <__malloc_lock>
 802050c:	4a1d      	ldr	r2, [pc, #116]	@ (8020584 <_free_r+0x90>)
 802050e:	6813      	ldr	r3, [r2, #0]
 8020510:	b933      	cbnz	r3, 8020520 <_free_r+0x2c>
 8020512:	6063      	str	r3, [r4, #4]
 8020514:	6014      	str	r4, [r2, #0]
 8020516:	4628      	mov	r0, r5
 8020518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802051c:	f000 b8e4 	b.w	80206e8 <__malloc_unlock>
 8020520:	42a3      	cmp	r3, r4
 8020522:	d908      	bls.n	8020536 <_free_r+0x42>
 8020524:	6820      	ldr	r0, [r4, #0]
 8020526:	1821      	adds	r1, r4, r0
 8020528:	428b      	cmp	r3, r1
 802052a:	bf01      	itttt	eq
 802052c:	6819      	ldreq	r1, [r3, #0]
 802052e:	685b      	ldreq	r3, [r3, #4]
 8020530:	1809      	addeq	r1, r1, r0
 8020532:	6021      	streq	r1, [r4, #0]
 8020534:	e7ed      	b.n	8020512 <_free_r+0x1e>
 8020536:	461a      	mov	r2, r3
 8020538:	685b      	ldr	r3, [r3, #4]
 802053a:	b10b      	cbz	r3, 8020540 <_free_r+0x4c>
 802053c:	42a3      	cmp	r3, r4
 802053e:	d9fa      	bls.n	8020536 <_free_r+0x42>
 8020540:	6811      	ldr	r1, [r2, #0]
 8020542:	1850      	adds	r0, r2, r1
 8020544:	42a0      	cmp	r0, r4
 8020546:	d10b      	bne.n	8020560 <_free_r+0x6c>
 8020548:	6820      	ldr	r0, [r4, #0]
 802054a:	4401      	add	r1, r0
 802054c:	1850      	adds	r0, r2, r1
 802054e:	4283      	cmp	r3, r0
 8020550:	6011      	str	r1, [r2, #0]
 8020552:	d1e0      	bne.n	8020516 <_free_r+0x22>
 8020554:	6818      	ldr	r0, [r3, #0]
 8020556:	685b      	ldr	r3, [r3, #4]
 8020558:	6053      	str	r3, [r2, #4]
 802055a:	4408      	add	r0, r1
 802055c:	6010      	str	r0, [r2, #0]
 802055e:	e7da      	b.n	8020516 <_free_r+0x22>
 8020560:	d902      	bls.n	8020568 <_free_r+0x74>
 8020562:	230c      	movs	r3, #12
 8020564:	602b      	str	r3, [r5, #0]
 8020566:	e7d6      	b.n	8020516 <_free_r+0x22>
 8020568:	6820      	ldr	r0, [r4, #0]
 802056a:	1821      	adds	r1, r4, r0
 802056c:	428b      	cmp	r3, r1
 802056e:	bf04      	itt	eq
 8020570:	6819      	ldreq	r1, [r3, #0]
 8020572:	685b      	ldreq	r3, [r3, #4]
 8020574:	6063      	str	r3, [r4, #4]
 8020576:	bf04      	itt	eq
 8020578:	1809      	addeq	r1, r1, r0
 802057a:	6021      	streq	r1, [r4, #0]
 802057c:	6054      	str	r4, [r2, #4]
 802057e:	e7ca      	b.n	8020516 <_free_r+0x22>
 8020580:	bd38      	pop	{r3, r4, r5, pc}
 8020582:	bf00      	nop
 8020584:	2002d8bc 	.word	0x2002d8bc

08020588 <malloc>:
 8020588:	4b02      	ldr	r3, [pc, #8]	@ (8020594 <malloc+0xc>)
 802058a:	4601      	mov	r1, r0
 802058c:	6818      	ldr	r0, [r3, #0]
 802058e:	f000 b825 	b.w	80205dc <_malloc_r>
 8020592:	bf00      	nop
 8020594:	2000003c 	.word	0x2000003c

08020598 <sbrk_aligned>:
 8020598:	b570      	push	{r4, r5, r6, lr}
 802059a:	4e0f      	ldr	r6, [pc, #60]	@ (80205d8 <sbrk_aligned+0x40>)
 802059c:	460c      	mov	r4, r1
 802059e:	6831      	ldr	r1, [r6, #0]
 80205a0:	4605      	mov	r5, r0
 80205a2:	b911      	cbnz	r1, 80205aa <sbrk_aligned+0x12>
 80205a4:	f000 fcb6 	bl	8020f14 <_sbrk_r>
 80205a8:	6030      	str	r0, [r6, #0]
 80205aa:	4621      	mov	r1, r4
 80205ac:	4628      	mov	r0, r5
 80205ae:	f000 fcb1 	bl	8020f14 <_sbrk_r>
 80205b2:	1c43      	adds	r3, r0, #1
 80205b4:	d103      	bne.n	80205be <sbrk_aligned+0x26>
 80205b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80205ba:	4620      	mov	r0, r4
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	1cc4      	adds	r4, r0, #3
 80205c0:	f024 0403 	bic.w	r4, r4, #3
 80205c4:	42a0      	cmp	r0, r4
 80205c6:	d0f8      	beq.n	80205ba <sbrk_aligned+0x22>
 80205c8:	1a21      	subs	r1, r4, r0
 80205ca:	4628      	mov	r0, r5
 80205cc:	f000 fca2 	bl	8020f14 <_sbrk_r>
 80205d0:	3001      	adds	r0, #1
 80205d2:	d1f2      	bne.n	80205ba <sbrk_aligned+0x22>
 80205d4:	e7ef      	b.n	80205b6 <sbrk_aligned+0x1e>
 80205d6:	bf00      	nop
 80205d8:	2002d8b8 	.word	0x2002d8b8

080205dc <_malloc_r>:
 80205dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80205e0:	1ccd      	adds	r5, r1, #3
 80205e2:	f025 0503 	bic.w	r5, r5, #3
 80205e6:	3508      	adds	r5, #8
 80205e8:	2d0c      	cmp	r5, #12
 80205ea:	bf38      	it	cc
 80205ec:	250c      	movcc	r5, #12
 80205ee:	2d00      	cmp	r5, #0
 80205f0:	4606      	mov	r6, r0
 80205f2:	db01      	blt.n	80205f8 <_malloc_r+0x1c>
 80205f4:	42a9      	cmp	r1, r5
 80205f6:	d904      	bls.n	8020602 <_malloc_r+0x26>
 80205f8:	230c      	movs	r3, #12
 80205fa:	6033      	str	r3, [r6, #0]
 80205fc:	2000      	movs	r0, #0
 80205fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80206d8 <_malloc_r+0xfc>
 8020606:	f000 f869 	bl	80206dc <__malloc_lock>
 802060a:	f8d8 3000 	ldr.w	r3, [r8]
 802060e:	461c      	mov	r4, r3
 8020610:	bb44      	cbnz	r4, 8020664 <_malloc_r+0x88>
 8020612:	4629      	mov	r1, r5
 8020614:	4630      	mov	r0, r6
 8020616:	f7ff ffbf 	bl	8020598 <sbrk_aligned>
 802061a:	1c43      	adds	r3, r0, #1
 802061c:	4604      	mov	r4, r0
 802061e:	d158      	bne.n	80206d2 <_malloc_r+0xf6>
 8020620:	f8d8 4000 	ldr.w	r4, [r8]
 8020624:	4627      	mov	r7, r4
 8020626:	2f00      	cmp	r7, #0
 8020628:	d143      	bne.n	80206b2 <_malloc_r+0xd6>
 802062a:	2c00      	cmp	r4, #0
 802062c:	d04b      	beq.n	80206c6 <_malloc_r+0xea>
 802062e:	6823      	ldr	r3, [r4, #0]
 8020630:	4639      	mov	r1, r7
 8020632:	4630      	mov	r0, r6
 8020634:	eb04 0903 	add.w	r9, r4, r3
 8020638:	f000 fc6c 	bl	8020f14 <_sbrk_r>
 802063c:	4581      	cmp	r9, r0
 802063e:	d142      	bne.n	80206c6 <_malloc_r+0xea>
 8020640:	6821      	ldr	r1, [r4, #0]
 8020642:	1a6d      	subs	r5, r5, r1
 8020644:	4629      	mov	r1, r5
 8020646:	4630      	mov	r0, r6
 8020648:	f7ff ffa6 	bl	8020598 <sbrk_aligned>
 802064c:	3001      	adds	r0, #1
 802064e:	d03a      	beq.n	80206c6 <_malloc_r+0xea>
 8020650:	6823      	ldr	r3, [r4, #0]
 8020652:	442b      	add	r3, r5
 8020654:	6023      	str	r3, [r4, #0]
 8020656:	f8d8 3000 	ldr.w	r3, [r8]
 802065a:	685a      	ldr	r2, [r3, #4]
 802065c:	bb62      	cbnz	r2, 80206b8 <_malloc_r+0xdc>
 802065e:	f8c8 7000 	str.w	r7, [r8]
 8020662:	e00f      	b.n	8020684 <_malloc_r+0xa8>
 8020664:	6822      	ldr	r2, [r4, #0]
 8020666:	1b52      	subs	r2, r2, r5
 8020668:	d420      	bmi.n	80206ac <_malloc_r+0xd0>
 802066a:	2a0b      	cmp	r2, #11
 802066c:	d917      	bls.n	802069e <_malloc_r+0xc2>
 802066e:	1961      	adds	r1, r4, r5
 8020670:	42a3      	cmp	r3, r4
 8020672:	6025      	str	r5, [r4, #0]
 8020674:	bf18      	it	ne
 8020676:	6059      	strne	r1, [r3, #4]
 8020678:	6863      	ldr	r3, [r4, #4]
 802067a:	bf08      	it	eq
 802067c:	f8c8 1000 	streq.w	r1, [r8]
 8020680:	5162      	str	r2, [r4, r5]
 8020682:	604b      	str	r3, [r1, #4]
 8020684:	4630      	mov	r0, r6
 8020686:	f000 f82f 	bl	80206e8 <__malloc_unlock>
 802068a:	f104 000b 	add.w	r0, r4, #11
 802068e:	1d23      	adds	r3, r4, #4
 8020690:	f020 0007 	bic.w	r0, r0, #7
 8020694:	1ac2      	subs	r2, r0, r3
 8020696:	bf1c      	itt	ne
 8020698:	1a1b      	subne	r3, r3, r0
 802069a:	50a3      	strne	r3, [r4, r2]
 802069c:	e7af      	b.n	80205fe <_malloc_r+0x22>
 802069e:	6862      	ldr	r2, [r4, #4]
 80206a0:	42a3      	cmp	r3, r4
 80206a2:	bf0c      	ite	eq
 80206a4:	f8c8 2000 	streq.w	r2, [r8]
 80206a8:	605a      	strne	r2, [r3, #4]
 80206aa:	e7eb      	b.n	8020684 <_malloc_r+0xa8>
 80206ac:	4623      	mov	r3, r4
 80206ae:	6864      	ldr	r4, [r4, #4]
 80206b0:	e7ae      	b.n	8020610 <_malloc_r+0x34>
 80206b2:	463c      	mov	r4, r7
 80206b4:	687f      	ldr	r7, [r7, #4]
 80206b6:	e7b6      	b.n	8020626 <_malloc_r+0x4a>
 80206b8:	461a      	mov	r2, r3
 80206ba:	685b      	ldr	r3, [r3, #4]
 80206bc:	42a3      	cmp	r3, r4
 80206be:	d1fb      	bne.n	80206b8 <_malloc_r+0xdc>
 80206c0:	2300      	movs	r3, #0
 80206c2:	6053      	str	r3, [r2, #4]
 80206c4:	e7de      	b.n	8020684 <_malloc_r+0xa8>
 80206c6:	230c      	movs	r3, #12
 80206c8:	6033      	str	r3, [r6, #0]
 80206ca:	4630      	mov	r0, r6
 80206cc:	f000 f80c 	bl	80206e8 <__malloc_unlock>
 80206d0:	e794      	b.n	80205fc <_malloc_r+0x20>
 80206d2:	6005      	str	r5, [r0, #0]
 80206d4:	e7d6      	b.n	8020684 <_malloc_r+0xa8>
 80206d6:	bf00      	nop
 80206d8:	2002d8bc 	.word	0x2002d8bc

080206dc <__malloc_lock>:
 80206dc:	4801      	ldr	r0, [pc, #4]	@ (80206e4 <__malloc_lock+0x8>)
 80206de:	f7ff beda 	b.w	8020496 <__retarget_lock_acquire_recursive>
 80206e2:	bf00      	nop
 80206e4:	2002d8b4 	.word	0x2002d8b4

080206e8 <__malloc_unlock>:
 80206e8:	4801      	ldr	r0, [pc, #4]	@ (80206f0 <__malloc_unlock+0x8>)
 80206ea:	f7ff bed5 	b.w	8020498 <__retarget_lock_release_recursive>
 80206ee:	bf00      	nop
 80206f0:	2002d8b4 	.word	0x2002d8b4

080206f4 <__sfputc_r>:
 80206f4:	6893      	ldr	r3, [r2, #8]
 80206f6:	3b01      	subs	r3, #1
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	b410      	push	{r4}
 80206fc:	6093      	str	r3, [r2, #8]
 80206fe:	da08      	bge.n	8020712 <__sfputc_r+0x1e>
 8020700:	6994      	ldr	r4, [r2, #24]
 8020702:	42a3      	cmp	r3, r4
 8020704:	db01      	blt.n	802070a <__sfputc_r+0x16>
 8020706:	290a      	cmp	r1, #10
 8020708:	d103      	bne.n	8020712 <__sfputc_r+0x1e>
 802070a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802070e:	f7ff bd4c 	b.w	80201aa <__swbuf_r>
 8020712:	6813      	ldr	r3, [r2, #0]
 8020714:	1c58      	adds	r0, r3, #1
 8020716:	6010      	str	r0, [r2, #0]
 8020718:	7019      	strb	r1, [r3, #0]
 802071a:	4608      	mov	r0, r1
 802071c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020720:	4770      	bx	lr

08020722 <__sfputs_r>:
 8020722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020724:	4606      	mov	r6, r0
 8020726:	460f      	mov	r7, r1
 8020728:	4614      	mov	r4, r2
 802072a:	18d5      	adds	r5, r2, r3
 802072c:	42ac      	cmp	r4, r5
 802072e:	d101      	bne.n	8020734 <__sfputs_r+0x12>
 8020730:	2000      	movs	r0, #0
 8020732:	e007      	b.n	8020744 <__sfputs_r+0x22>
 8020734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020738:	463a      	mov	r2, r7
 802073a:	4630      	mov	r0, r6
 802073c:	f7ff ffda 	bl	80206f4 <__sfputc_r>
 8020740:	1c43      	adds	r3, r0, #1
 8020742:	d1f3      	bne.n	802072c <__sfputs_r+0xa>
 8020744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020748 <_vfiprintf_r>:
 8020748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802074c:	460d      	mov	r5, r1
 802074e:	b09d      	sub	sp, #116	@ 0x74
 8020750:	4614      	mov	r4, r2
 8020752:	4698      	mov	r8, r3
 8020754:	4606      	mov	r6, r0
 8020756:	b118      	cbz	r0, 8020760 <_vfiprintf_r+0x18>
 8020758:	6a03      	ldr	r3, [r0, #32]
 802075a:	b90b      	cbnz	r3, 8020760 <_vfiprintf_r+0x18>
 802075c:	f7ff fc3c 	bl	801ffd8 <__sinit>
 8020760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020762:	07d9      	lsls	r1, r3, #31
 8020764:	d405      	bmi.n	8020772 <_vfiprintf_r+0x2a>
 8020766:	89ab      	ldrh	r3, [r5, #12]
 8020768:	059a      	lsls	r2, r3, #22
 802076a:	d402      	bmi.n	8020772 <_vfiprintf_r+0x2a>
 802076c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802076e:	f7ff fe92 	bl	8020496 <__retarget_lock_acquire_recursive>
 8020772:	89ab      	ldrh	r3, [r5, #12]
 8020774:	071b      	lsls	r3, r3, #28
 8020776:	d501      	bpl.n	802077c <_vfiprintf_r+0x34>
 8020778:	692b      	ldr	r3, [r5, #16]
 802077a:	b99b      	cbnz	r3, 80207a4 <_vfiprintf_r+0x5c>
 802077c:	4629      	mov	r1, r5
 802077e:	4630      	mov	r0, r6
 8020780:	f7ff fd52 	bl	8020228 <__swsetup_r>
 8020784:	b170      	cbz	r0, 80207a4 <_vfiprintf_r+0x5c>
 8020786:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020788:	07dc      	lsls	r4, r3, #31
 802078a:	d504      	bpl.n	8020796 <_vfiprintf_r+0x4e>
 802078c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020790:	b01d      	add	sp, #116	@ 0x74
 8020792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020796:	89ab      	ldrh	r3, [r5, #12]
 8020798:	0598      	lsls	r0, r3, #22
 802079a:	d4f7      	bmi.n	802078c <_vfiprintf_r+0x44>
 802079c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802079e:	f7ff fe7b 	bl	8020498 <__retarget_lock_release_recursive>
 80207a2:	e7f3      	b.n	802078c <_vfiprintf_r+0x44>
 80207a4:	2300      	movs	r3, #0
 80207a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80207a8:	2320      	movs	r3, #32
 80207aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80207ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80207b2:	2330      	movs	r3, #48	@ 0x30
 80207b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020964 <_vfiprintf_r+0x21c>
 80207b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80207bc:	f04f 0901 	mov.w	r9, #1
 80207c0:	4623      	mov	r3, r4
 80207c2:	469a      	mov	sl, r3
 80207c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80207c8:	b10a      	cbz	r2, 80207ce <_vfiprintf_r+0x86>
 80207ca:	2a25      	cmp	r2, #37	@ 0x25
 80207cc:	d1f9      	bne.n	80207c2 <_vfiprintf_r+0x7a>
 80207ce:	ebba 0b04 	subs.w	fp, sl, r4
 80207d2:	d00b      	beq.n	80207ec <_vfiprintf_r+0xa4>
 80207d4:	465b      	mov	r3, fp
 80207d6:	4622      	mov	r2, r4
 80207d8:	4629      	mov	r1, r5
 80207da:	4630      	mov	r0, r6
 80207dc:	f7ff ffa1 	bl	8020722 <__sfputs_r>
 80207e0:	3001      	adds	r0, #1
 80207e2:	f000 80a7 	beq.w	8020934 <_vfiprintf_r+0x1ec>
 80207e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80207e8:	445a      	add	r2, fp
 80207ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80207ec:	f89a 3000 	ldrb.w	r3, [sl]
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	f000 809f 	beq.w	8020934 <_vfiprintf_r+0x1ec>
 80207f6:	2300      	movs	r3, #0
 80207f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80207fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020800:	f10a 0a01 	add.w	sl, sl, #1
 8020804:	9304      	str	r3, [sp, #16]
 8020806:	9307      	str	r3, [sp, #28]
 8020808:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802080c:	931a      	str	r3, [sp, #104]	@ 0x68
 802080e:	4654      	mov	r4, sl
 8020810:	2205      	movs	r2, #5
 8020812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020816:	4853      	ldr	r0, [pc, #332]	@ (8020964 <_vfiprintf_r+0x21c>)
 8020818:	f7df fcfa 	bl	8000210 <memchr>
 802081c:	9a04      	ldr	r2, [sp, #16]
 802081e:	b9d8      	cbnz	r0, 8020858 <_vfiprintf_r+0x110>
 8020820:	06d1      	lsls	r1, r2, #27
 8020822:	bf44      	itt	mi
 8020824:	2320      	movmi	r3, #32
 8020826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802082a:	0713      	lsls	r3, r2, #28
 802082c:	bf44      	itt	mi
 802082e:	232b      	movmi	r3, #43	@ 0x2b
 8020830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020834:	f89a 3000 	ldrb.w	r3, [sl]
 8020838:	2b2a      	cmp	r3, #42	@ 0x2a
 802083a:	d015      	beq.n	8020868 <_vfiprintf_r+0x120>
 802083c:	9a07      	ldr	r2, [sp, #28]
 802083e:	4654      	mov	r4, sl
 8020840:	2000      	movs	r0, #0
 8020842:	f04f 0c0a 	mov.w	ip, #10
 8020846:	4621      	mov	r1, r4
 8020848:	f811 3b01 	ldrb.w	r3, [r1], #1
 802084c:	3b30      	subs	r3, #48	@ 0x30
 802084e:	2b09      	cmp	r3, #9
 8020850:	d94b      	bls.n	80208ea <_vfiprintf_r+0x1a2>
 8020852:	b1b0      	cbz	r0, 8020882 <_vfiprintf_r+0x13a>
 8020854:	9207      	str	r2, [sp, #28]
 8020856:	e014      	b.n	8020882 <_vfiprintf_r+0x13a>
 8020858:	eba0 0308 	sub.w	r3, r0, r8
 802085c:	fa09 f303 	lsl.w	r3, r9, r3
 8020860:	4313      	orrs	r3, r2
 8020862:	9304      	str	r3, [sp, #16]
 8020864:	46a2      	mov	sl, r4
 8020866:	e7d2      	b.n	802080e <_vfiprintf_r+0xc6>
 8020868:	9b03      	ldr	r3, [sp, #12]
 802086a:	1d19      	adds	r1, r3, #4
 802086c:	681b      	ldr	r3, [r3, #0]
 802086e:	9103      	str	r1, [sp, #12]
 8020870:	2b00      	cmp	r3, #0
 8020872:	bfbb      	ittet	lt
 8020874:	425b      	neglt	r3, r3
 8020876:	f042 0202 	orrlt.w	r2, r2, #2
 802087a:	9307      	strge	r3, [sp, #28]
 802087c:	9307      	strlt	r3, [sp, #28]
 802087e:	bfb8      	it	lt
 8020880:	9204      	strlt	r2, [sp, #16]
 8020882:	7823      	ldrb	r3, [r4, #0]
 8020884:	2b2e      	cmp	r3, #46	@ 0x2e
 8020886:	d10a      	bne.n	802089e <_vfiprintf_r+0x156>
 8020888:	7863      	ldrb	r3, [r4, #1]
 802088a:	2b2a      	cmp	r3, #42	@ 0x2a
 802088c:	d132      	bne.n	80208f4 <_vfiprintf_r+0x1ac>
 802088e:	9b03      	ldr	r3, [sp, #12]
 8020890:	1d1a      	adds	r2, r3, #4
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	9203      	str	r2, [sp, #12]
 8020896:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802089a:	3402      	adds	r4, #2
 802089c:	9305      	str	r3, [sp, #20]
 802089e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020974 <_vfiprintf_r+0x22c>
 80208a2:	7821      	ldrb	r1, [r4, #0]
 80208a4:	2203      	movs	r2, #3
 80208a6:	4650      	mov	r0, sl
 80208a8:	f7df fcb2 	bl	8000210 <memchr>
 80208ac:	b138      	cbz	r0, 80208be <_vfiprintf_r+0x176>
 80208ae:	9b04      	ldr	r3, [sp, #16]
 80208b0:	eba0 000a 	sub.w	r0, r0, sl
 80208b4:	2240      	movs	r2, #64	@ 0x40
 80208b6:	4082      	lsls	r2, r0
 80208b8:	4313      	orrs	r3, r2
 80208ba:	3401      	adds	r4, #1
 80208bc:	9304      	str	r3, [sp, #16]
 80208be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80208c2:	4829      	ldr	r0, [pc, #164]	@ (8020968 <_vfiprintf_r+0x220>)
 80208c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80208c8:	2206      	movs	r2, #6
 80208ca:	f7df fca1 	bl	8000210 <memchr>
 80208ce:	2800      	cmp	r0, #0
 80208d0:	d03f      	beq.n	8020952 <_vfiprintf_r+0x20a>
 80208d2:	4b26      	ldr	r3, [pc, #152]	@ (802096c <_vfiprintf_r+0x224>)
 80208d4:	bb1b      	cbnz	r3, 802091e <_vfiprintf_r+0x1d6>
 80208d6:	9b03      	ldr	r3, [sp, #12]
 80208d8:	3307      	adds	r3, #7
 80208da:	f023 0307 	bic.w	r3, r3, #7
 80208de:	3308      	adds	r3, #8
 80208e0:	9303      	str	r3, [sp, #12]
 80208e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208e4:	443b      	add	r3, r7
 80208e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80208e8:	e76a      	b.n	80207c0 <_vfiprintf_r+0x78>
 80208ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80208ee:	460c      	mov	r4, r1
 80208f0:	2001      	movs	r0, #1
 80208f2:	e7a8      	b.n	8020846 <_vfiprintf_r+0xfe>
 80208f4:	2300      	movs	r3, #0
 80208f6:	3401      	adds	r4, #1
 80208f8:	9305      	str	r3, [sp, #20]
 80208fa:	4619      	mov	r1, r3
 80208fc:	f04f 0c0a 	mov.w	ip, #10
 8020900:	4620      	mov	r0, r4
 8020902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020906:	3a30      	subs	r2, #48	@ 0x30
 8020908:	2a09      	cmp	r2, #9
 802090a:	d903      	bls.n	8020914 <_vfiprintf_r+0x1cc>
 802090c:	2b00      	cmp	r3, #0
 802090e:	d0c6      	beq.n	802089e <_vfiprintf_r+0x156>
 8020910:	9105      	str	r1, [sp, #20]
 8020912:	e7c4      	b.n	802089e <_vfiprintf_r+0x156>
 8020914:	fb0c 2101 	mla	r1, ip, r1, r2
 8020918:	4604      	mov	r4, r0
 802091a:	2301      	movs	r3, #1
 802091c:	e7f0      	b.n	8020900 <_vfiprintf_r+0x1b8>
 802091e:	ab03      	add	r3, sp, #12
 8020920:	9300      	str	r3, [sp, #0]
 8020922:	462a      	mov	r2, r5
 8020924:	4b12      	ldr	r3, [pc, #72]	@ (8020970 <_vfiprintf_r+0x228>)
 8020926:	a904      	add	r1, sp, #16
 8020928:	4630      	mov	r0, r6
 802092a:	f3af 8000 	nop.w
 802092e:	4607      	mov	r7, r0
 8020930:	1c78      	adds	r0, r7, #1
 8020932:	d1d6      	bne.n	80208e2 <_vfiprintf_r+0x19a>
 8020934:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020936:	07d9      	lsls	r1, r3, #31
 8020938:	d405      	bmi.n	8020946 <_vfiprintf_r+0x1fe>
 802093a:	89ab      	ldrh	r3, [r5, #12]
 802093c:	059a      	lsls	r2, r3, #22
 802093e:	d402      	bmi.n	8020946 <_vfiprintf_r+0x1fe>
 8020940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020942:	f7ff fda9 	bl	8020498 <__retarget_lock_release_recursive>
 8020946:	89ab      	ldrh	r3, [r5, #12]
 8020948:	065b      	lsls	r3, r3, #25
 802094a:	f53f af1f 	bmi.w	802078c <_vfiprintf_r+0x44>
 802094e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020950:	e71e      	b.n	8020790 <_vfiprintf_r+0x48>
 8020952:	ab03      	add	r3, sp, #12
 8020954:	9300      	str	r3, [sp, #0]
 8020956:	462a      	mov	r2, r5
 8020958:	4b05      	ldr	r3, [pc, #20]	@ (8020970 <_vfiprintf_r+0x228>)
 802095a:	a904      	add	r1, sp, #16
 802095c:	4630      	mov	r0, r6
 802095e:	f000 f879 	bl	8020a54 <_printf_i>
 8020962:	e7e4      	b.n	802092e <_vfiprintf_r+0x1e6>
 8020964:	08024e75 	.word	0x08024e75
 8020968:	08024e7f 	.word	0x08024e7f
 802096c:	00000000 	.word	0x00000000
 8020970:	08020723 	.word	0x08020723
 8020974:	08024e7b 	.word	0x08024e7b

08020978 <_printf_common>:
 8020978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802097c:	4616      	mov	r6, r2
 802097e:	4698      	mov	r8, r3
 8020980:	688a      	ldr	r2, [r1, #8]
 8020982:	690b      	ldr	r3, [r1, #16]
 8020984:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020988:	4293      	cmp	r3, r2
 802098a:	bfb8      	it	lt
 802098c:	4613      	movlt	r3, r2
 802098e:	6033      	str	r3, [r6, #0]
 8020990:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020994:	4607      	mov	r7, r0
 8020996:	460c      	mov	r4, r1
 8020998:	b10a      	cbz	r2, 802099e <_printf_common+0x26>
 802099a:	3301      	adds	r3, #1
 802099c:	6033      	str	r3, [r6, #0]
 802099e:	6823      	ldr	r3, [r4, #0]
 80209a0:	0699      	lsls	r1, r3, #26
 80209a2:	bf42      	ittt	mi
 80209a4:	6833      	ldrmi	r3, [r6, #0]
 80209a6:	3302      	addmi	r3, #2
 80209a8:	6033      	strmi	r3, [r6, #0]
 80209aa:	6825      	ldr	r5, [r4, #0]
 80209ac:	f015 0506 	ands.w	r5, r5, #6
 80209b0:	d106      	bne.n	80209c0 <_printf_common+0x48>
 80209b2:	f104 0a19 	add.w	sl, r4, #25
 80209b6:	68e3      	ldr	r3, [r4, #12]
 80209b8:	6832      	ldr	r2, [r6, #0]
 80209ba:	1a9b      	subs	r3, r3, r2
 80209bc:	42ab      	cmp	r3, r5
 80209be:	dc26      	bgt.n	8020a0e <_printf_common+0x96>
 80209c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80209c4:	6822      	ldr	r2, [r4, #0]
 80209c6:	3b00      	subs	r3, #0
 80209c8:	bf18      	it	ne
 80209ca:	2301      	movne	r3, #1
 80209cc:	0692      	lsls	r2, r2, #26
 80209ce:	d42b      	bmi.n	8020a28 <_printf_common+0xb0>
 80209d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80209d4:	4641      	mov	r1, r8
 80209d6:	4638      	mov	r0, r7
 80209d8:	47c8      	blx	r9
 80209da:	3001      	adds	r0, #1
 80209dc:	d01e      	beq.n	8020a1c <_printf_common+0xa4>
 80209de:	6823      	ldr	r3, [r4, #0]
 80209e0:	6922      	ldr	r2, [r4, #16]
 80209e2:	f003 0306 	and.w	r3, r3, #6
 80209e6:	2b04      	cmp	r3, #4
 80209e8:	bf02      	ittt	eq
 80209ea:	68e5      	ldreq	r5, [r4, #12]
 80209ec:	6833      	ldreq	r3, [r6, #0]
 80209ee:	1aed      	subeq	r5, r5, r3
 80209f0:	68a3      	ldr	r3, [r4, #8]
 80209f2:	bf0c      	ite	eq
 80209f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80209f8:	2500      	movne	r5, #0
 80209fa:	4293      	cmp	r3, r2
 80209fc:	bfc4      	itt	gt
 80209fe:	1a9b      	subgt	r3, r3, r2
 8020a00:	18ed      	addgt	r5, r5, r3
 8020a02:	2600      	movs	r6, #0
 8020a04:	341a      	adds	r4, #26
 8020a06:	42b5      	cmp	r5, r6
 8020a08:	d11a      	bne.n	8020a40 <_printf_common+0xc8>
 8020a0a:	2000      	movs	r0, #0
 8020a0c:	e008      	b.n	8020a20 <_printf_common+0xa8>
 8020a0e:	2301      	movs	r3, #1
 8020a10:	4652      	mov	r2, sl
 8020a12:	4641      	mov	r1, r8
 8020a14:	4638      	mov	r0, r7
 8020a16:	47c8      	blx	r9
 8020a18:	3001      	adds	r0, #1
 8020a1a:	d103      	bne.n	8020a24 <_printf_common+0xac>
 8020a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a24:	3501      	adds	r5, #1
 8020a26:	e7c6      	b.n	80209b6 <_printf_common+0x3e>
 8020a28:	18e1      	adds	r1, r4, r3
 8020a2a:	1c5a      	adds	r2, r3, #1
 8020a2c:	2030      	movs	r0, #48	@ 0x30
 8020a2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020a32:	4422      	add	r2, r4
 8020a34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020a38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020a3c:	3302      	adds	r3, #2
 8020a3e:	e7c7      	b.n	80209d0 <_printf_common+0x58>
 8020a40:	2301      	movs	r3, #1
 8020a42:	4622      	mov	r2, r4
 8020a44:	4641      	mov	r1, r8
 8020a46:	4638      	mov	r0, r7
 8020a48:	47c8      	blx	r9
 8020a4a:	3001      	adds	r0, #1
 8020a4c:	d0e6      	beq.n	8020a1c <_printf_common+0xa4>
 8020a4e:	3601      	adds	r6, #1
 8020a50:	e7d9      	b.n	8020a06 <_printf_common+0x8e>
	...

08020a54 <_printf_i>:
 8020a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020a58:	7e0f      	ldrb	r7, [r1, #24]
 8020a5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020a5c:	2f78      	cmp	r7, #120	@ 0x78
 8020a5e:	4691      	mov	r9, r2
 8020a60:	4680      	mov	r8, r0
 8020a62:	460c      	mov	r4, r1
 8020a64:	469a      	mov	sl, r3
 8020a66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020a6a:	d807      	bhi.n	8020a7c <_printf_i+0x28>
 8020a6c:	2f62      	cmp	r7, #98	@ 0x62
 8020a6e:	d80a      	bhi.n	8020a86 <_printf_i+0x32>
 8020a70:	2f00      	cmp	r7, #0
 8020a72:	f000 80d1 	beq.w	8020c18 <_printf_i+0x1c4>
 8020a76:	2f58      	cmp	r7, #88	@ 0x58
 8020a78:	f000 80b8 	beq.w	8020bec <_printf_i+0x198>
 8020a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020a80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020a84:	e03a      	b.n	8020afc <_printf_i+0xa8>
 8020a86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020a8a:	2b15      	cmp	r3, #21
 8020a8c:	d8f6      	bhi.n	8020a7c <_printf_i+0x28>
 8020a8e:	a101      	add	r1, pc, #4	@ (adr r1, 8020a94 <_printf_i+0x40>)
 8020a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020a94:	08020aed 	.word	0x08020aed
 8020a98:	08020b01 	.word	0x08020b01
 8020a9c:	08020a7d 	.word	0x08020a7d
 8020aa0:	08020a7d 	.word	0x08020a7d
 8020aa4:	08020a7d 	.word	0x08020a7d
 8020aa8:	08020a7d 	.word	0x08020a7d
 8020aac:	08020b01 	.word	0x08020b01
 8020ab0:	08020a7d 	.word	0x08020a7d
 8020ab4:	08020a7d 	.word	0x08020a7d
 8020ab8:	08020a7d 	.word	0x08020a7d
 8020abc:	08020a7d 	.word	0x08020a7d
 8020ac0:	08020bff 	.word	0x08020bff
 8020ac4:	08020b2b 	.word	0x08020b2b
 8020ac8:	08020bb9 	.word	0x08020bb9
 8020acc:	08020a7d 	.word	0x08020a7d
 8020ad0:	08020a7d 	.word	0x08020a7d
 8020ad4:	08020c21 	.word	0x08020c21
 8020ad8:	08020a7d 	.word	0x08020a7d
 8020adc:	08020b2b 	.word	0x08020b2b
 8020ae0:	08020a7d 	.word	0x08020a7d
 8020ae4:	08020a7d 	.word	0x08020a7d
 8020ae8:	08020bc1 	.word	0x08020bc1
 8020aec:	6833      	ldr	r3, [r6, #0]
 8020aee:	1d1a      	adds	r2, r3, #4
 8020af0:	681b      	ldr	r3, [r3, #0]
 8020af2:	6032      	str	r2, [r6, #0]
 8020af4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020af8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020afc:	2301      	movs	r3, #1
 8020afe:	e09c      	b.n	8020c3a <_printf_i+0x1e6>
 8020b00:	6833      	ldr	r3, [r6, #0]
 8020b02:	6820      	ldr	r0, [r4, #0]
 8020b04:	1d19      	adds	r1, r3, #4
 8020b06:	6031      	str	r1, [r6, #0]
 8020b08:	0606      	lsls	r6, r0, #24
 8020b0a:	d501      	bpl.n	8020b10 <_printf_i+0xbc>
 8020b0c:	681d      	ldr	r5, [r3, #0]
 8020b0e:	e003      	b.n	8020b18 <_printf_i+0xc4>
 8020b10:	0645      	lsls	r5, r0, #25
 8020b12:	d5fb      	bpl.n	8020b0c <_printf_i+0xb8>
 8020b14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020b18:	2d00      	cmp	r5, #0
 8020b1a:	da03      	bge.n	8020b24 <_printf_i+0xd0>
 8020b1c:	232d      	movs	r3, #45	@ 0x2d
 8020b1e:	426d      	negs	r5, r5
 8020b20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020b24:	4858      	ldr	r0, [pc, #352]	@ (8020c88 <_printf_i+0x234>)
 8020b26:	230a      	movs	r3, #10
 8020b28:	e011      	b.n	8020b4e <_printf_i+0xfa>
 8020b2a:	6821      	ldr	r1, [r4, #0]
 8020b2c:	6833      	ldr	r3, [r6, #0]
 8020b2e:	0608      	lsls	r0, r1, #24
 8020b30:	f853 5b04 	ldr.w	r5, [r3], #4
 8020b34:	d402      	bmi.n	8020b3c <_printf_i+0xe8>
 8020b36:	0649      	lsls	r1, r1, #25
 8020b38:	bf48      	it	mi
 8020b3a:	b2ad      	uxthmi	r5, r5
 8020b3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8020b3e:	4852      	ldr	r0, [pc, #328]	@ (8020c88 <_printf_i+0x234>)
 8020b40:	6033      	str	r3, [r6, #0]
 8020b42:	bf14      	ite	ne
 8020b44:	230a      	movne	r3, #10
 8020b46:	2308      	moveq	r3, #8
 8020b48:	2100      	movs	r1, #0
 8020b4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020b4e:	6866      	ldr	r6, [r4, #4]
 8020b50:	60a6      	str	r6, [r4, #8]
 8020b52:	2e00      	cmp	r6, #0
 8020b54:	db05      	blt.n	8020b62 <_printf_i+0x10e>
 8020b56:	6821      	ldr	r1, [r4, #0]
 8020b58:	432e      	orrs	r6, r5
 8020b5a:	f021 0104 	bic.w	r1, r1, #4
 8020b5e:	6021      	str	r1, [r4, #0]
 8020b60:	d04b      	beq.n	8020bfa <_printf_i+0x1a6>
 8020b62:	4616      	mov	r6, r2
 8020b64:	fbb5 f1f3 	udiv	r1, r5, r3
 8020b68:	fb03 5711 	mls	r7, r3, r1, r5
 8020b6c:	5dc7      	ldrb	r7, [r0, r7]
 8020b6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020b72:	462f      	mov	r7, r5
 8020b74:	42bb      	cmp	r3, r7
 8020b76:	460d      	mov	r5, r1
 8020b78:	d9f4      	bls.n	8020b64 <_printf_i+0x110>
 8020b7a:	2b08      	cmp	r3, #8
 8020b7c:	d10b      	bne.n	8020b96 <_printf_i+0x142>
 8020b7e:	6823      	ldr	r3, [r4, #0]
 8020b80:	07df      	lsls	r7, r3, #31
 8020b82:	d508      	bpl.n	8020b96 <_printf_i+0x142>
 8020b84:	6923      	ldr	r3, [r4, #16]
 8020b86:	6861      	ldr	r1, [r4, #4]
 8020b88:	4299      	cmp	r1, r3
 8020b8a:	bfde      	ittt	le
 8020b8c:	2330      	movle	r3, #48	@ 0x30
 8020b8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020b92:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8020b96:	1b92      	subs	r2, r2, r6
 8020b98:	6122      	str	r2, [r4, #16]
 8020b9a:	f8cd a000 	str.w	sl, [sp]
 8020b9e:	464b      	mov	r3, r9
 8020ba0:	aa03      	add	r2, sp, #12
 8020ba2:	4621      	mov	r1, r4
 8020ba4:	4640      	mov	r0, r8
 8020ba6:	f7ff fee7 	bl	8020978 <_printf_common>
 8020baa:	3001      	adds	r0, #1
 8020bac:	d14a      	bne.n	8020c44 <_printf_i+0x1f0>
 8020bae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020bb2:	b004      	add	sp, #16
 8020bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bb8:	6823      	ldr	r3, [r4, #0]
 8020bba:	f043 0320 	orr.w	r3, r3, #32
 8020bbe:	6023      	str	r3, [r4, #0]
 8020bc0:	4832      	ldr	r0, [pc, #200]	@ (8020c8c <_printf_i+0x238>)
 8020bc2:	2778      	movs	r7, #120	@ 0x78
 8020bc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020bc8:	6823      	ldr	r3, [r4, #0]
 8020bca:	6831      	ldr	r1, [r6, #0]
 8020bcc:	061f      	lsls	r7, r3, #24
 8020bce:	f851 5b04 	ldr.w	r5, [r1], #4
 8020bd2:	d402      	bmi.n	8020bda <_printf_i+0x186>
 8020bd4:	065f      	lsls	r7, r3, #25
 8020bd6:	bf48      	it	mi
 8020bd8:	b2ad      	uxthmi	r5, r5
 8020bda:	6031      	str	r1, [r6, #0]
 8020bdc:	07d9      	lsls	r1, r3, #31
 8020bde:	bf44      	itt	mi
 8020be0:	f043 0320 	orrmi.w	r3, r3, #32
 8020be4:	6023      	strmi	r3, [r4, #0]
 8020be6:	b11d      	cbz	r5, 8020bf0 <_printf_i+0x19c>
 8020be8:	2310      	movs	r3, #16
 8020bea:	e7ad      	b.n	8020b48 <_printf_i+0xf4>
 8020bec:	4826      	ldr	r0, [pc, #152]	@ (8020c88 <_printf_i+0x234>)
 8020bee:	e7e9      	b.n	8020bc4 <_printf_i+0x170>
 8020bf0:	6823      	ldr	r3, [r4, #0]
 8020bf2:	f023 0320 	bic.w	r3, r3, #32
 8020bf6:	6023      	str	r3, [r4, #0]
 8020bf8:	e7f6      	b.n	8020be8 <_printf_i+0x194>
 8020bfa:	4616      	mov	r6, r2
 8020bfc:	e7bd      	b.n	8020b7a <_printf_i+0x126>
 8020bfe:	6833      	ldr	r3, [r6, #0]
 8020c00:	6825      	ldr	r5, [r4, #0]
 8020c02:	6961      	ldr	r1, [r4, #20]
 8020c04:	1d18      	adds	r0, r3, #4
 8020c06:	6030      	str	r0, [r6, #0]
 8020c08:	062e      	lsls	r6, r5, #24
 8020c0a:	681b      	ldr	r3, [r3, #0]
 8020c0c:	d501      	bpl.n	8020c12 <_printf_i+0x1be>
 8020c0e:	6019      	str	r1, [r3, #0]
 8020c10:	e002      	b.n	8020c18 <_printf_i+0x1c4>
 8020c12:	0668      	lsls	r0, r5, #25
 8020c14:	d5fb      	bpl.n	8020c0e <_printf_i+0x1ba>
 8020c16:	8019      	strh	r1, [r3, #0]
 8020c18:	2300      	movs	r3, #0
 8020c1a:	6123      	str	r3, [r4, #16]
 8020c1c:	4616      	mov	r6, r2
 8020c1e:	e7bc      	b.n	8020b9a <_printf_i+0x146>
 8020c20:	6833      	ldr	r3, [r6, #0]
 8020c22:	1d1a      	adds	r2, r3, #4
 8020c24:	6032      	str	r2, [r6, #0]
 8020c26:	681e      	ldr	r6, [r3, #0]
 8020c28:	6862      	ldr	r2, [r4, #4]
 8020c2a:	2100      	movs	r1, #0
 8020c2c:	4630      	mov	r0, r6
 8020c2e:	f7df faef 	bl	8000210 <memchr>
 8020c32:	b108      	cbz	r0, 8020c38 <_printf_i+0x1e4>
 8020c34:	1b80      	subs	r0, r0, r6
 8020c36:	6060      	str	r0, [r4, #4]
 8020c38:	6863      	ldr	r3, [r4, #4]
 8020c3a:	6123      	str	r3, [r4, #16]
 8020c3c:	2300      	movs	r3, #0
 8020c3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020c42:	e7aa      	b.n	8020b9a <_printf_i+0x146>
 8020c44:	6923      	ldr	r3, [r4, #16]
 8020c46:	4632      	mov	r2, r6
 8020c48:	4649      	mov	r1, r9
 8020c4a:	4640      	mov	r0, r8
 8020c4c:	47d0      	blx	sl
 8020c4e:	3001      	adds	r0, #1
 8020c50:	d0ad      	beq.n	8020bae <_printf_i+0x15a>
 8020c52:	6823      	ldr	r3, [r4, #0]
 8020c54:	079b      	lsls	r3, r3, #30
 8020c56:	d413      	bmi.n	8020c80 <_printf_i+0x22c>
 8020c58:	68e0      	ldr	r0, [r4, #12]
 8020c5a:	9b03      	ldr	r3, [sp, #12]
 8020c5c:	4298      	cmp	r0, r3
 8020c5e:	bfb8      	it	lt
 8020c60:	4618      	movlt	r0, r3
 8020c62:	e7a6      	b.n	8020bb2 <_printf_i+0x15e>
 8020c64:	2301      	movs	r3, #1
 8020c66:	4632      	mov	r2, r6
 8020c68:	4649      	mov	r1, r9
 8020c6a:	4640      	mov	r0, r8
 8020c6c:	47d0      	blx	sl
 8020c6e:	3001      	adds	r0, #1
 8020c70:	d09d      	beq.n	8020bae <_printf_i+0x15a>
 8020c72:	3501      	adds	r5, #1
 8020c74:	68e3      	ldr	r3, [r4, #12]
 8020c76:	9903      	ldr	r1, [sp, #12]
 8020c78:	1a5b      	subs	r3, r3, r1
 8020c7a:	42ab      	cmp	r3, r5
 8020c7c:	dcf2      	bgt.n	8020c64 <_printf_i+0x210>
 8020c7e:	e7eb      	b.n	8020c58 <_printf_i+0x204>
 8020c80:	2500      	movs	r5, #0
 8020c82:	f104 0619 	add.w	r6, r4, #25
 8020c86:	e7f5      	b.n	8020c74 <_printf_i+0x220>
 8020c88:	08024e86 	.word	0x08024e86
 8020c8c:	08024e97 	.word	0x08024e97

08020c90 <__sflush_r>:
 8020c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c98:	0716      	lsls	r6, r2, #28
 8020c9a:	4605      	mov	r5, r0
 8020c9c:	460c      	mov	r4, r1
 8020c9e:	d454      	bmi.n	8020d4a <__sflush_r+0xba>
 8020ca0:	684b      	ldr	r3, [r1, #4]
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	dc02      	bgt.n	8020cac <__sflush_r+0x1c>
 8020ca6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	dd48      	ble.n	8020d3e <__sflush_r+0xae>
 8020cac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020cae:	2e00      	cmp	r6, #0
 8020cb0:	d045      	beq.n	8020d3e <__sflush_r+0xae>
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020cb8:	682f      	ldr	r7, [r5, #0]
 8020cba:	6a21      	ldr	r1, [r4, #32]
 8020cbc:	602b      	str	r3, [r5, #0]
 8020cbe:	d030      	beq.n	8020d22 <__sflush_r+0x92>
 8020cc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020cc2:	89a3      	ldrh	r3, [r4, #12]
 8020cc4:	0759      	lsls	r1, r3, #29
 8020cc6:	d505      	bpl.n	8020cd4 <__sflush_r+0x44>
 8020cc8:	6863      	ldr	r3, [r4, #4]
 8020cca:	1ad2      	subs	r2, r2, r3
 8020ccc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020cce:	b10b      	cbz	r3, 8020cd4 <__sflush_r+0x44>
 8020cd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020cd2:	1ad2      	subs	r2, r2, r3
 8020cd4:	2300      	movs	r3, #0
 8020cd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020cd8:	6a21      	ldr	r1, [r4, #32]
 8020cda:	4628      	mov	r0, r5
 8020cdc:	47b0      	blx	r6
 8020cde:	1c43      	adds	r3, r0, #1
 8020ce0:	89a3      	ldrh	r3, [r4, #12]
 8020ce2:	d106      	bne.n	8020cf2 <__sflush_r+0x62>
 8020ce4:	6829      	ldr	r1, [r5, #0]
 8020ce6:	291d      	cmp	r1, #29
 8020ce8:	d82b      	bhi.n	8020d42 <__sflush_r+0xb2>
 8020cea:	4a2a      	ldr	r2, [pc, #168]	@ (8020d94 <__sflush_r+0x104>)
 8020cec:	40ca      	lsrs	r2, r1
 8020cee:	07d6      	lsls	r6, r2, #31
 8020cf0:	d527      	bpl.n	8020d42 <__sflush_r+0xb2>
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	6062      	str	r2, [r4, #4]
 8020cf6:	04d9      	lsls	r1, r3, #19
 8020cf8:	6922      	ldr	r2, [r4, #16]
 8020cfa:	6022      	str	r2, [r4, #0]
 8020cfc:	d504      	bpl.n	8020d08 <__sflush_r+0x78>
 8020cfe:	1c42      	adds	r2, r0, #1
 8020d00:	d101      	bne.n	8020d06 <__sflush_r+0x76>
 8020d02:	682b      	ldr	r3, [r5, #0]
 8020d04:	b903      	cbnz	r3, 8020d08 <__sflush_r+0x78>
 8020d06:	6560      	str	r0, [r4, #84]	@ 0x54
 8020d08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020d0a:	602f      	str	r7, [r5, #0]
 8020d0c:	b1b9      	cbz	r1, 8020d3e <__sflush_r+0xae>
 8020d0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020d12:	4299      	cmp	r1, r3
 8020d14:	d002      	beq.n	8020d1c <__sflush_r+0x8c>
 8020d16:	4628      	mov	r0, r5
 8020d18:	f7ff fbec 	bl	80204f4 <_free_r>
 8020d1c:	2300      	movs	r3, #0
 8020d1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8020d20:	e00d      	b.n	8020d3e <__sflush_r+0xae>
 8020d22:	2301      	movs	r3, #1
 8020d24:	4628      	mov	r0, r5
 8020d26:	47b0      	blx	r6
 8020d28:	4602      	mov	r2, r0
 8020d2a:	1c50      	adds	r0, r2, #1
 8020d2c:	d1c9      	bne.n	8020cc2 <__sflush_r+0x32>
 8020d2e:	682b      	ldr	r3, [r5, #0]
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	d0c6      	beq.n	8020cc2 <__sflush_r+0x32>
 8020d34:	2b1d      	cmp	r3, #29
 8020d36:	d001      	beq.n	8020d3c <__sflush_r+0xac>
 8020d38:	2b16      	cmp	r3, #22
 8020d3a:	d11e      	bne.n	8020d7a <__sflush_r+0xea>
 8020d3c:	602f      	str	r7, [r5, #0]
 8020d3e:	2000      	movs	r0, #0
 8020d40:	e022      	b.n	8020d88 <__sflush_r+0xf8>
 8020d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020d46:	b21b      	sxth	r3, r3
 8020d48:	e01b      	b.n	8020d82 <__sflush_r+0xf2>
 8020d4a:	690f      	ldr	r7, [r1, #16]
 8020d4c:	2f00      	cmp	r7, #0
 8020d4e:	d0f6      	beq.n	8020d3e <__sflush_r+0xae>
 8020d50:	0793      	lsls	r3, r2, #30
 8020d52:	680e      	ldr	r6, [r1, #0]
 8020d54:	bf08      	it	eq
 8020d56:	694b      	ldreq	r3, [r1, #20]
 8020d58:	600f      	str	r7, [r1, #0]
 8020d5a:	bf18      	it	ne
 8020d5c:	2300      	movne	r3, #0
 8020d5e:	eba6 0807 	sub.w	r8, r6, r7
 8020d62:	608b      	str	r3, [r1, #8]
 8020d64:	f1b8 0f00 	cmp.w	r8, #0
 8020d68:	dde9      	ble.n	8020d3e <__sflush_r+0xae>
 8020d6a:	6a21      	ldr	r1, [r4, #32]
 8020d6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020d6e:	4643      	mov	r3, r8
 8020d70:	463a      	mov	r2, r7
 8020d72:	4628      	mov	r0, r5
 8020d74:	47b0      	blx	r6
 8020d76:	2800      	cmp	r0, #0
 8020d78:	dc08      	bgt.n	8020d8c <__sflush_r+0xfc>
 8020d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020d82:	81a3      	strh	r3, [r4, #12]
 8020d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d8c:	4407      	add	r7, r0
 8020d8e:	eba8 0800 	sub.w	r8, r8, r0
 8020d92:	e7e7      	b.n	8020d64 <__sflush_r+0xd4>
 8020d94:	20400001 	.word	0x20400001

08020d98 <_fflush_r>:
 8020d98:	b538      	push	{r3, r4, r5, lr}
 8020d9a:	690b      	ldr	r3, [r1, #16]
 8020d9c:	4605      	mov	r5, r0
 8020d9e:	460c      	mov	r4, r1
 8020da0:	b913      	cbnz	r3, 8020da8 <_fflush_r+0x10>
 8020da2:	2500      	movs	r5, #0
 8020da4:	4628      	mov	r0, r5
 8020da6:	bd38      	pop	{r3, r4, r5, pc}
 8020da8:	b118      	cbz	r0, 8020db2 <_fflush_r+0x1a>
 8020daa:	6a03      	ldr	r3, [r0, #32]
 8020dac:	b90b      	cbnz	r3, 8020db2 <_fflush_r+0x1a>
 8020dae:	f7ff f913 	bl	801ffd8 <__sinit>
 8020db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d0f3      	beq.n	8020da2 <_fflush_r+0xa>
 8020dba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020dbc:	07d0      	lsls	r0, r2, #31
 8020dbe:	d404      	bmi.n	8020dca <_fflush_r+0x32>
 8020dc0:	0599      	lsls	r1, r3, #22
 8020dc2:	d402      	bmi.n	8020dca <_fflush_r+0x32>
 8020dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020dc6:	f7ff fb66 	bl	8020496 <__retarget_lock_acquire_recursive>
 8020dca:	4628      	mov	r0, r5
 8020dcc:	4621      	mov	r1, r4
 8020dce:	f7ff ff5f 	bl	8020c90 <__sflush_r>
 8020dd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020dd4:	07da      	lsls	r2, r3, #31
 8020dd6:	4605      	mov	r5, r0
 8020dd8:	d4e4      	bmi.n	8020da4 <_fflush_r+0xc>
 8020dda:	89a3      	ldrh	r3, [r4, #12]
 8020ddc:	059b      	lsls	r3, r3, #22
 8020dde:	d4e1      	bmi.n	8020da4 <_fflush_r+0xc>
 8020de0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020de2:	f7ff fb59 	bl	8020498 <__retarget_lock_release_recursive>
 8020de6:	e7dd      	b.n	8020da4 <_fflush_r+0xc>

08020de8 <fiprintf>:
 8020de8:	b40e      	push	{r1, r2, r3}
 8020dea:	b503      	push	{r0, r1, lr}
 8020dec:	4601      	mov	r1, r0
 8020dee:	ab03      	add	r3, sp, #12
 8020df0:	4805      	ldr	r0, [pc, #20]	@ (8020e08 <fiprintf+0x20>)
 8020df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8020df6:	6800      	ldr	r0, [r0, #0]
 8020df8:	9301      	str	r3, [sp, #4]
 8020dfa:	f7ff fca5 	bl	8020748 <_vfiprintf_r>
 8020dfe:	b002      	add	sp, #8
 8020e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8020e04:	b003      	add	sp, #12
 8020e06:	4770      	bx	lr
 8020e08:	2000003c 	.word	0x2000003c

08020e0c <__swhatbuf_r>:
 8020e0c:	b570      	push	{r4, r5, r6, lr}
 8020e0e:	460c      	mov	r4, r1
 8020e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e14:	2900      	cmp	r1, #0
 8020e16:	b096      	sub	sp, #88	@ 0x58
 8020e18:	4615      	mov	r5, r2
 8020e1a:	461e      	mov	r6, r3
 8020e1c:	da0d      	bge.n	8020e3a <__swhatbuf_r+0x2e>
 8020e1e:	89a3      	ldrh	r3, [r4, #12]
 8020e20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020e24:	f04f 0100 	mov.w	r1, #0
 8020e28:	bf14      	ite	ne
 8020e2a:	2340      	movne	r3, #64	@ 0x40
 8020e2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020e30:	2000      	movs	r0, #0
 8020e32:	6031      	str	r1, [r6, #0]
 8020e34:	602b      	str	r3, [r5, #0]
 8020e36:	b016      	add	sp, #88	@ 0x58
 8020e38:	bd70      	pop	{r4, r5, r6, pc}
 8020e3a:	466a      	mov	r2, sp
 8020e3c:	f000 f848 	bl	8020ed0 <_fstat_r>
 8020e40:	2800      	cmp	r0, #0
 8020e42:	dbec      	blt.n	8020e1e <__swhatbuf_r+0x12>
 8020e44:	9901      	ldr	r1, [sp, #4]
 8020e46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020e4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020e4e:	4259      	negs	r1, r3
 8020e50:	4159      	adcs	r1, r3
 8020e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020e56:	e7eb      	b.n	8020e30 <__swhatbuf_r+0x24>

08020e58 <__smakebuf_r>:
 8020e58:	898b      	ldrh	r3, [r1, #12]
 8020e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020e5c:	079d      	lsls	r5, r3, #30
 8020e5e:	4606      	mov	r6, r0
 8020e60:	460c      	mov	r4, r1
 8020e62:	d507      	bpl.n	8020e74 <__smakebuf_r+0x1c>
 8020e64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020e68:	6023      	str	r3, [r4, #0]
 8020e6a:	6123      	str	r3, [r4, #16]
 8020e6c:	2301      	movs	r3, #1
 8020e6e:	6163      	str	r3, [r4, #20]
 8020e70:	b003      	add	sp, #12
 8020e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e74:	ab01      	add	r3, sp, #4
 8020e76:	466a      	mov	r2, sp
 8020e78:	f7ff ffc8 	bl	8020e0c <__swhatbuf_r>
 8020e7c:	9f00      	ldr	r7, [sp, #0]
 8020e7e:	4605      	mov	r5, r0
 8020e80:	4639      	mov	r1, r7
 8020e82:	4630      	mov	r0, r6
 8020e84:	f7ff fbaa 	bl	80205dc <_malloc_r>
 8020e88:	b948      	cbnz	r0, 8020e9e <__smakebuf_r+0x46>
 8020e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020e8e:	059a      	lsls	r2, r3, #22
 8020e90:	d4ee      	bmi.n	8020e70 <__smakebuf_r+0x18>
 8020e92:	f023 0303 	bic.w	r3, r3, #3
 8020e96:	f043 0302 	orr.w	r3, r3, #2
 8020e9a:	81a3      	strh	r3, [r4, #12]
 8020e9c:	e7e2      	b.n	8020e64 <__smakebuf_r+0xc>
 8020e9e:	89a3      	ldrh	r3, [r4, #12]
 8020ea0:	6020      	str	r0, [r4, #0]
 8020ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020ea6:	81a3      	strh	r3, [r4, #12]
 8020ea8:	9b01      	ldr	r3, [sp, #4]
 8020eaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8020eae:	b15b      	cbz	r3, 8020ec8 <__smakebuf_r+0x70>
 8020eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020eb4:	4630      	mov	r0, r6
 8020eb6:	f000 f81d 	bl	8020ef4 <_isatty_r>
 8020eba:	b128      	cbz	r0, 8020ec8 <__smakebuf_r+0x70>
 8020ebc:	89a3      	ldrh	r3, [r4, #12]
 8020ebe:	f023 0303 	bic.w	r3, r3, #3
 8020ec2:	f043 0301 	orr.w	r3, r3, #1
 8020ec6:	81a3      	strh	r3, [r4, #12]
 8020ec8:	89a3      	ldrh	r3, [r4, #12]
 8020eca:	431d      	orrs	r5, r3
 8020ecc:	81a5      	strh	r5, [r4, #12]
 8020ece:	e7cf      	b.n	8020e70 <__smakebuf_r+0x18>

08020ed0 <_fstat_r>:
 8020ed0:	b538      	push	{r3, r4, r5, lr}
 8020ed2:	4d07      	ldr	r5, [pc, #28]	@ (8020ef0 <_fstat_r+0x20>)
 8020ed4:	2300      	movs	r3, #0
 8020ed6:	4604      	mov	r4, r0
 8020ed8:	4608      	mov	r0, r1
 8020eda:	4611      	mov	r1, r2
 8020edc:	602b      	str	r3, [r5, #0]
 8020ede:	f7e0 fd89 	bl	80019f4 <_fstat>
 8020ee2:	1c43      	adds	r3, r0, #1
 8020ee4:	d102      	bne.n	8020eec <_fstat_r+0x1c>
 8020ee6:	682b      	ldr	r3, [r5, #0]
 8020ee8:	b103      	cbz	r3, 8020eec <_fstat_r+0x1c>
 8020eea:	6023      	str	r3, [r4, #0]
 8020eec:	bd38      	pop	{r3, r4, r5, pc}
 8020eee:	bf00      	nop
 8020ef0:	2002d8b0 	.word	0x2002d8b0

08020ef4 <_isatty_r>:
 8020ef4:	b538      	push	{r3, r4, r5, lr}
 8020ef6:	4d06      	ldr	r5, [pc, #24]	@ (8020f10 <_isatty_r+0x1c>)
 8020ef8:	2300      	movs	r3, #0
 8020efa:	4604      	mov	r4, r0
 8020efc:	4608      	mov	r0, r1
 8020efe:	602b      	str	r3, [r5, #0]
 8020f00:	f7e0 fd88 	bl	8001a14 <_isatty>
 8020f04:	1c43      	adds	r3, r0, #1
 8020f06:	d102      	bne.n	8020f0e <_isatty_r+0x1a>
 8020f08:	682b      	ldr	r3, [r5, #0]
 8020f0a:	b103      	cbz	r3, 8020f0e <_isatty_r+0x1a>
 8020f0c:	6023      	str	r3, [r4, #0]
 8020f0e:	bd38      	pop	{r3, r4, r5, pc}
 8020f10:	2002d8b0 	.word	0x2002d8b0

08020f14 <_sbrk_r>:
 8020f14:	b538      	push	{r3, r4, r5, lr}
 8020f16:	4d06      	ldr	r5, [pc, #24]	@ (8020f30 <_sbrk_r+0x1c>)
 8020f18:	2300      	movs	r3, #0
 8020f1a:	4604      	mov	r4, r0
 8020f1c:	4608      	mov	r0, r1
 8020f1e:	602b      	str	r3, [r5, #0]
 8020f20:	f7e0 fd90 	bl	8001a44 <_sbrk>
 8020f24:	1c43      	adds	r3, r0, #1
 8020f26:	d102      	bne.n	8020f2e <_sbrk_r+0x1a>
 8020f28:	682b      	ldr	r3, [r5, #0]
 8020f2a:	b103      	cbz	r3, 8020f2e <_sbrk_r+0x1a>
 8020f2c:	6023      	str	r3, [r4, #0]
 8020f2e:	bd38      	pop	{r3, r4, r5, pc}
 8020f30:	2002d8b0 	.word	0x2002d8b0

08020f34 <abort>:
 8020f34:	b508      	push	{r3, lr}
 8020f36:	2006      	movs	r0, #6
 8020f38:	f000 f82c 	bl	8020f94 <raise>
 8020f3c:	2001      	movs	r0, #1
 8020f3e:	f7e0 fd25 	bl	800198c <_exit>

08020f42 <_raise_r>:
 8020f42:	291f      	cmp	r1, #31
 8020f44:	b538      	push	{r3, r4, r5, lr}
 8020f46:	4605      	mov	r5, r0
 8020f48:	460c      	mov	r4, r1
 8020f4a:	d904      	bls.n	8020f56 <_raise_r+0x14>
 8020f4c:	2316      	movs	r3, #22
 8020f4e:	6003      	str	r3, [r0, #0]
 8020f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020f54:	bd38      	pop	{r3, r4, r5, pc}
 8020f56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020f58:	b112      	cbz	r2, 8020f60 <_raise_r+0x1e>
 8020f5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020f5e:	b94b      	cbnz	r3, 8020f74 <_raise_r+0x32>
 8020f60:	4628      	mov	r0, r5
 8020f62:	f000 f831 	bl	8020fc8 <_getpid_r>
 8020f66:	4622      	mov	r2, r4
 8020f68:	4601      	mov	r1, r0
 8020f6a:	4628      	mov	r0, r5
 8020f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020f70:	f000 b818 	b.w	8020fa4 <_kill_r>
 8020f74:	2b01      	cmp	r3, #1
 8020f76:	d00a      	beq.n	8020f8e <_raise_r+0x4c>
 8020f78:	1c59      	adds	r1, r3, #1
 8020f7a:	d103      	bne.n	8020f84 <_raise_r+0x42>
 8020f7c:	2316      	movs	r3, #22
 8020f7e:	6003      	str	r3, [r0, #0]
 8020f80:	2001      	movs	r0, #1
 8020f82:	e7e7      	b.n	8020f54 <_raise_r+0x12>
 8020f84:	2100      	movs	r1, #0
 8020f86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020f8a:	4620      	mov	r0, r4
 8020f8c:	4798      	blx	r3
 8020f8e:	2000      	movs	r0, #0
 8020f90:	e7e0      	b.n	8020f54 <_raise_r+0x12>
	...

08020f94 <raise>:
 8020f94:	4b02      	ldr	r3, [pc, #8]	@ (8020fa0 <raise+0xc>)
 8020f96:	4601      	mov	r1, r0
 8020f98:	6818      	ldr	r0, [r3, #0]
 8020f9a:	f7ff bfd2 	b.w	8020f42 <_raise_r>
 8020f9e:	bf00      	nop
 8020fa0:	2000003c 	.word	0x2000003c

08020fa4 <_kill_r>:
 8020fa4:	b538      	push	{r3, r4, r5, lr}
 8020fa6:	4d07      	ldr	r5, [pc, #28]	@ (8020fc4 <_kill_r+0x20>)
 8020fa8:	2300      	movs	r3, #0
 8020faa:	4604      	mov	r4, r0
 8020fac:	4608      	mov	r0, r1
 8020fae:	4611      	mov	r1, r2
 8020fb0:	602b      	str	r3, [r5, #0]
 8020fb2:	f7e0 fcd9 	bl	8001968 <_kill>
 8020fb6:	1c43      	adds	r3, r0, #1
 8020fb8:	d102      	bne.n	8020fc0 <_kill_r+0x1c>
 8020fba:	682b      	ldr	r3, [r5, #0]
 8020fbc:	b103      	cbz	r3, 8020fc0 <_kill_r+0x1c>
 8020fbe:	6023      	str	r3, [r4, #0]
 8020fc0:	bd38      	pop	{r3, r4, r5, pc}
 8020fc2:	bf00      	nop
 8020fc4:	2002d8b0 	.word	0x2002d8b0

08020fc8 <_getpid_r>:
 8020fc8:	f7e0 bcc6 	b.w	8001958 <_getpid>

08020fcc <_init>:
 8020fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fce:	bf00      	nop
 8020fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020fd2:	bc08      	pop	{r3}
 8020fd4:	469e      	mov	lr, r3
 8020fd6:	4770      	bx	lr

08020fd8 <_fini>:
 8020fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fda:	bf00      	nop
 8020fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020fde:	bc08      	pop	{r3}
 8020fe0:	469e      	mov	lr, r3
 8020fe2:	4770      	bx	lr
